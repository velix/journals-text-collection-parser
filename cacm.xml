<?xml version="1.0"  encoding="UTF-8"  ?>
<catalog>

	<document id= '3204'>
	<title>An On-Line Program for Non-Numerical Algebra</title>
	<abstract>The goal of this program is to make a step toward te design of an automated mathematical assistant. Some requirements for such a program are: it must be easy to access, and that the result must be obtained in a reasonably short time. Accordingly the program is written for a time-shared computer. The Q-32 computer as System Development Corporation, Santa Monica, California, was  chosen because it also had a LISP 1.5 compiler. Programming and debugging was done from a remote teletype console at Stanford University.</abstract>
	<conference>CACM August, 1966</conference>
	<authors>
	<author>Korsvold, K.</author>
	</authors>
	<location>CA660818 ES March 17, 1982 10:10 AM</location>
	<citations>
	<citation>1396	5	3204</citation>
	<citation>3204	5	3204</citation>
	<citation>3204	5	3204</citation>
	<citation>3204	5	3204</citation>
	<citation>964	6	3204</citation>
	<citation>1028	6	3204</citation>
	<citation>1029	6	3204</citation>
	<citation>1083	6	3204</citation>
	<citation>1132	6	3204</citation>
	<citation>1214	6	3204</citation>
	<citation>1278	6	3204</citation>
	<citation>1334	6	3204</citation>
	<citation>1365	6	3204</citation>
	<citation>1386	6	3204</citation>
	<citation>1387	6	3204</citation>
	<citation>1388	6	3204</citation>
	<citation>1392	6	3204</citation>
	<citation>1393	6	3204</citation>
	<citation>1394	6	3204</citation>
	<citation>1395	6	3204</citation>
	<citation>1396	6	3204</citation>
	<citation>1397	6	3204</citation>
	<citation>1496	6	3204</citation>
	<citation>284	6	3204</citation>
	<citation>407	6	3204</citation>
	<citation>3199	6	3204</citation>
	<citation>3200	6	3204</citation>
	<citation>3201	6	3204</citation>
	<citation>3202	6	3204</citation>
	<citation>3203	6	3204</citation>
	<citation>3204	6	3204</citation>
	<citation>561	6	3204</citation>
	<citation>730	6	3204</citation>
	</citations>
	</document>
	<document id= '3203'>
	<title>GRAD Assistant - A Program for Symbolic Algebraic Manipulation and  Differentiation</title>
	<abstract>The General Recursive Algebra and Differentiation Assistant (GRAD Assistant) now under development is a set of LISP functions which symbolically manipulate abd differentiate algebraic expressions. It is designed for use with problemms  in which a large amount of routine manipulation is to be done by a program  without human intervention. Thus, GRAD must recognize necessary simplifications without external guidance. While some complicated expressions (notably ones involving nested radicals and trigonometric functions) do not yield completely to the present version, it has proved quite useful indeed.</abstract>
	<conference>CACM August, 1966</conference>
	<authors>
	<author>Fletcher, J. G.</author>
	</authors>
	<location>CA660817 ES March 17, 1982 10:10 AM</location>
	<citations>
	<citation>1396	5	3203</citation>
	<citation>3203	5	3203</citation>
	<citation>3203	5	3203</citation>
	<citation>3203	5	3203</citation>
	<citation>964	6	3203</citation>
	<citation>1028	6	3203</citation>
	<citation>1029	6	3203</citation>
	<citation>1083	6	3203</citation>
	<citation>1132	6	3203</citation>
	<citation>1214	6	3203</citation>
	<citation>1278	6	3203</citation>
	<citation>1334	6	3203</citation>
	<citation>1365	6	3203</citation>
	<citation>1386	6	3203</citation>
	<citation>1387	6	3203</citation>
	<citation>1388	6	3203</citation>
	<citation>1392	6	3203</citation>
	<citation>1393	6	3203</citation>
	<citation>1394	6	3203</citation>
	<citation>1395	6	3203</citation>
	<citation>1396	6	3203</citation>
	<citation>1397	6	3203</citation>
	<citation>1496	6	3203</citation>
	<citation>284	6	3203</citation>
	<citation>407	6	3203</citation>
	<citation>3199	6	3203</citation>
	<citation>3200	6	3203</citation>
	<citation>3201	6	3203</citation>
	<citation>3202	6	3203</citation>
	<citation>3203	6	3203</citation>
	<citation>3204	6	3203</citation>
	<citation>561	6	3203</citation>
	<citation>730	6	3203</citation>
	</citations>
	</document>
	<document id= '3202'>
	<title>MANIP: A Computer System for Algebra and Analytic Differentiation</title>
	<abstract>A mathematical expression to be operated upon is written in FORTRAN-like  notation and stored in the computer as a string of BCD characters with all blanks removed. It may be as complicated as desired (parentheses nested without restriction, etc.) so long as the entire expression (or any subsequent form) does not exceed 5000 characters. The problemm of performing algebraic operations and obtaining analytic derivatives was translated into that of identifying and manipulating character sequences. Programs which resulted were written in FORTRAN IV for a CDC 3600 and are discussed in detail.</abstract>
	<conference>CACM August, 1966</conference>
	<authors>
	<author>Bender, B.</author>
	</authors>
	<location>CA660816 ES March 17, 1982 10:10 AM</location>
	<citations>
	<citation>1396	5	3202</citation>
	<citation>3202	5	3202</citation>
	<citation>3202	5	3202</citation>
	<citation>3202	5	3202</citation>
	<citation>964	6	3202</citation>
	<citation>1028	6	3202</citation>
	<citation>1029	6	3202</citation>
	<citation>1083	6	3202</citation>
	<citation>1132	6	3202</citation>
	<citation>1214	6	3202</citation>
	<citation>1278	6	3202</citation>
	<citation>1334	6	3202</citation>
	<citation>1365	6	3202</citation>
	<citation>1386	6	3202</citation>
	<citation>1387	6	3202</citation>
	<citation>1388	6	3202</citation>
	<citation>1392	6	3202</citation>
	<citation>1393	6	3202</citation>
	<citation>1394	6	3202</citation>
	<citation>1395	6	3202</citation>
	<citation>1396	6	3202</citation>
	<citation>1397	6	3202</citation>
	<citation>1496	6	3202</citation>
	<citation>284	6	3202</citation>
	<citation>407	6	3202</citation>
	<citation>3199	6	3202</citation>
	<citation>3200	6	3202</citation>
	<citation>3201	6	3202</citation>
	<citation>3202	6	3202</citation>
	<citation>3203	6	3202</citation>
	<citation>3204	6	3202</citation>
	<citation>561	6	3202</citation>
	<citation>730	6	3202</citation>
	</citations>
	</document>
	<document id= '3201'>
	<title>Symbolic Manipulation of Poisson Series</title>
	<abstract>Poisson series of three variables are manageable symbolically through as a  set of formal subroutines written partially in the IBM 7094 machine language, but to be called in the FORTRAN language for use in Fortran  programs. An  effort has been made to supply those operations which are most required by celestial mechanics. The routines are entirely self-contained subroutines and require only standard Fortran input/output units 5 and 6; they are design to avoid waste and overflow of core storage space.</abstract>
	<conference>CACM August, 1966</conference>
	<authors>
	<author>Danby, J.</author>
	<author>Deprit, A.</author>
	<author>Rom, A.</author>
	</authors>
	<location>CA660815 ES March 17, 1982 10:10 AM</location>
	<citations>
	<citation>1396	5	3201</citation>
	<citation>3201	5	3201</citation>
	<citation>3201	5	3201</citation>
	<citation>3201	5	3201</citation>
	<citation>964	6	3201</citation>
	<citation>1028	6	3201</citation>
	<citation>1029	6	3201</citation>
	<citation>1083	6	3201</citation>
	<citation>1132	6	3201</citation>
	<citation>1214	6	3201</citation>
	<citation>1278	6	3201</citation>
	<citation>1334	6	3201</citation>
	<citation>1365	6	3201</citation>
	<citation>1386	6	3201</citation>
	<citation>1387	6	3201</citation>
	<citation>1388	6	3201</citation>
	<citation>1392	6	3201</citation>
	<citation>1393	6	3201</citation>
	<citation>1394	6	3201</citation>
	<citation>1395	6	3201</citation>
	<citation>1396	6	3201</citation>
	<citation>1397	6	3201</citation>
	<citation>1496	6	3201</citation>
	<citation>284	6	3201</citation>
	<citation>407	6	3201</citation>
	<citation>3199	6	3201</citation>
	<citation>3200	6	3201</citation>
	<citation>3201	6	3201</citation>
	<citation>3202	6	3201</citation>
	<citation>3203	6	3201</citation>
	<citation>3204	6	3201</citation>
	<citation>561	6	3201</citation>
	<citation>730	6	3201</citation>
	</citations>
	</document>
	<document id= '3200'>
	<title>A FORMAC Program for the Solution of Linear Boundary and Initial Value  Problems</title>
	<abstract>A computer program is described which has been developed for obtaining approximate solutions to linear initial and boundary-value problems involving  differential equations. For each problem, input to the program includes:    1. The equations (in symbolic form) to be satisfied  -  the differential equations, equations describing auxiliary conditions such as boundary  conditions, etc.    2. A numerical description of the regions in which each of the equations are to be satisfied.    3. Sets of functions (in symbolic form) to be used in linear combinations to approximate the solution functions. Give the above input, the program generates an approximation to the solutions of the specified problemm in terms  of the specified functions which is optimum in the least-squares sense.</abstract>
	<conference>CACM August, 1966</conference>
	<authors>
	<author>Cuthill, E.</author>
	</authors>
	<location>CA660814 ES March 17, 1982 10:10 AM</location>
	<citations>
	<citation>1396	5	3200</citation>
	<citation>3200	5	3200</citation>
	<citation>3200	5	3200</citation>
	<citation>3200	5	3200</citation>
	<citation>964	6	3200</citation>
	<citation>1028	6	3200</citation>
	<citation>1029	6	3200</citation>
	<citation>1083	6	3200</citation>
	<citation>1132	6	3200</citation>
	<citation>1214	6	3200</citation>
	<citation>1278	6	3200</citation>
	<citation>1334	6	3200</citation>
	<citation>1365	6	3200</citation>
	<citation>1386	6	3200</citation>
	<citation>1387	6	3200</citation>
	<citation>1388	6	3200</citation>
	<citation>1392	6	3200</citation>
	<citation>1393	6	3200</citation>
	<citation>1394	6	3200</citation>
	<citation>1395	6	3200</citation>
	<citation>1396	6	3200</citation>
	<citation>1397	6	3200</citation>
	<citation>1496	6	3200</citation>
	<citation>284	6	3200</citation>
	<citation>407	6	3200</citation>
	<citation>3199	6	3200</citation>
	<citation>3200	6	3200</citation>
	<citation>3201	6	3200</citation>
	<citation>3202	6	3200</citation>
	<citation>3203	6	3200</citation>
	<citation>3204	6	3200</citation>
	<citation>561	6	3200</citation>
	<citation>730	6	3200</citation>
	</citations>
	</document>
	<document id= '3199'>
	<title>ALGEM - An Algebraic Manipulator</title>
	<abstract>ALGEM is a package of subprograms written in Slip, FORTRAN IV and MAP 7094  II to manipulate algebraic expressions. Algem's basic algebraic operations are  additions, subtractions, multiplications, division and exponentiation. It is  capable of handling any number of single letter variables, variable exponents,  and of finding the highest common factor of two polynomials. Also included are such functions as substitution, differentiation, determining coefficients of specified variables, solving a linear equation, basic I/O routines plus other special purpose and arithmetic routines. The major innovation of Algem over  other manipulators is the assignment of types to all expressions and the use  of a standard ordering procedure.</abstract>
	<conference>CACM August, 1966</conference>
	<authors>
	<author>Gotlieb, C. C.</author>
	<author>Novak, R. J.</author>
	</authors>
	<location>CA660813 ES March 17, 1982 10:10 AM</location>
	<citations>
	<citation>1396	5	3199</citation>
	<citation>3199	5	3199</citation>
	<citation>3199	5	3199</citation>
	<citation>3199	5	3199</citation>
	<citation>964	6	3199</citation>
	<citation>1028	6	3199</citation>
	<citation>1029	6	3199</citation>
	<citation>1083	6	3199</citation>
	<citation>1132	6	3199</citation>
	<citation>1214	6	3199</citation>
	<citation>1278	6	3199</citation>
	<citation>1334	6	3199</citation>
	<citation>1365	6	3199</citation>
	<citation>1386	6	3199</citation>
	<citation>1387	6	3199</citation>
	<citation>1388	6	3199</citation>
	<citation>1392	6	3199</citation>
	<citation>1393	6	3199</citation>
	<citation>1394	6	3199</citation>
	<citation>1395	6	3199</citation>
	<citation>1396	6	3199</citation>
	<citation>1397	6	3199</citation>
	<citation>1496	6	3199</citation>
	<citation>284	6	3199</citation>
	<citation>407	6	3199</citation>
	<citation>3199	6	3199</citation>
	<citation>3200	6	3199</citation>
	<citation>3201	6	3199</citation>
	<citation>3202	6	3199</citation>
	<citation>3203	6	3199</citation>
	<citation>3204	6	3199</citation>
	<citation>561	6	3199</citation>
	<citation>730	6	3199</citation>
	</citations>
	</document>
	<document id= '3198'>
	<title>Microprogramming, Emulators and Programming Languages</title>
	<abstract>The problem we have been concerned with is that of converting language to action - or intellectual energy to mechanical energy. The medium that we use  for this purpose is language and therefore we are preoccupied with the subject of language. In the areas of language investigation we have concentrated first  on formalizing syntax and then on semantics.</abstract>
	<conference>CACM March, 1966</conference>
	<authors>
	<author>Greem, J.</author>
	</authors>
	<location>CA660318 ES March 17, 1982 10:10 AM</location>
	<citations>
	<citation>1542	5	3198</citation>
	<citation>3198	5	3198</citation>
	<citation>3198	5	3198</citation>
	<citation>3198	5	3198</citation>
	<citation>1491	6	3198</citation>
	<citation>3198	6	3198</citation>
	</citations>
	</document>
	<document id= '3197'>
	<title>Structures of Standards-Processing Organizations in the Computer Area</title>
	<abstract>In line with the ACM's policy statement [Comm. ACM 5 (Nov. 1962), 547-549], the following organizational descriptions have been provided in order to describe standardization activities pertinent to computers and information processing.</abstract>
	<conference>CACM June, 1966</conference>
	<authors>
	<author>Gorn, S.</author>
	<author>Bemer, R. W.</author>
	<author>Green, J.</author>
	</authors>
	<location>CA630626 ES March 17, 1982 10:10 AM</location>
	<citations>
	<citation>3197	5	3197</citation>
	<citation>3197	5	3197</citation>
	<citation>3197	5	3197</citation>
	<citation>689	5	3197</citation>
	<citation>217	6	3197</citation>
	<citation>323	6	3197</citation>
	<citation>3197	6	3197</citation>
	</citations>
	</document>
	<document id= '3196'>
	<title>The Reactive Typewriter Program</title>
	<abstract>84-character keyboard including alphabetical upper and lower case for good readability. If the machine is restricted to only a single case, the lower case is preferred. The reactive typewriter should be portable. the reactive  typewriter should operate over any commercially used, dial-type telephone (voice) or telegraph (Telex) line or over leased (nondial) telegraph lines interchangeably.</abstract>
	<conference>CACM January, 1963</conference>
	<authors>
	<author>Mooers, C. N.</author>
	</authors>
	<location>CA630118 ES March 17, 1982 10:10 AM</location>
	<citations>
	<citation>1071	5	3196</citation>
	<citation>3196	5	3196</citation>
	<citation>3196	5	3196</citation>
	<citation>3196	5	3196</citation>
	<citation>3196	6	3196</citation>
	</citations>
	</document>
	<document id= '3195'>
	<title>Reiteration of ACM Policy Toward Standardization</title>
	<abstract>The periodic change in officers, chairman and editors which usually follows as election occasionally results in a change in policy. In the case of this  department there is no radical change, but this is nevertheless the proper time to reiterate ans underline ACM's policy with respect to standardization in the  computer area.</abstract>
	<conference>CACM November, 1962</conference>
	<authors>
	<author>Gorn, S.</author>
	</authors>
	<location>CA621123 ES March 17, 1982 10:10 AM</location>
	<citations>
	<citation>3195	5	3195</citation>
	<citation>3195	5	3195</citation>
	<citation>3195	5	3195</citation>
	<citation>690	5	3195</citation>
	<citation>890	6	3195</citation>
	<citation>929	6	3195</citation>
	<citation>3195	6	3195</citation>
	</citations>
	</document>
	<document id= '3194'>
	<title>A Non-heuristic Program for Proving Elementary Logical Theorems</title>
	<abstract>The paper discusses problems involved in designing a device capable of distinguishing among speech events that are normally recognized as different  by native speakers of a particular language. Parallels between these problems and those of chemical analysis are pointed out.</abstract>
	<conference>CACM January, 1959</conference>
	<authors>
	<author>Dunham, B.</author>
	<author>Fridshal, R.</author>
	<author>Sward, G. L.</author>
	</authors>
	<location>CA590102 ES March 17, 1982 10:10 AM</location>
	<citations>
	<citation>204	5	3194</citation>
	<citation>3194	5	3194</citation>
	<citation>3194	5	3194</citation>
	<citation>3194	5	3194</citation>
	<citation>3194	6	3194</citation>
	</citations>
	</document>
	<document id= '3193'>
	<citations>
	<citation>3193	4	3193</citation>
	<citation>796	4	3193</citation>
	<citation>1083	5	3193</citation>
	<citation>491	5	3193</citation>
	<citation>3193	5	3193</citation>
	<citation>3193	5	3193</citation>
	<citation>3193	5	3193</citation>
	<citation>407	6	3193</citation>
	<citation>3192	6	3193</citation>
	<citation>3193	6	3193</citation>
	<citation>730	6	3193</citation>
	</citations>
	<title></title>
	<abstract>Work is in progress on a formula coding technique allowing direct entry into the computer of formulae typed on an 84 character Flexo-writer. This Flexo-writer will be modified for automatic half-line advance and retract, without carriage return, to permit completely general sub and superscripting.</abstract>
	<conference>CACM July, 1958</conference>
	<location>CA580703 ES March 17, 1982 10:10 AM</location>
	</document>
	<document id= '3192'>
	<title>The Lincoln Keyboard - a Typewriter Keyboard Designed  for Computers Input Flexibility</title>
	<abstract>A new typewriter keyboard, for direct and punched paper tape computer input will replace the usual commercial keyboard with 88 characters chosen for the  convenience  of programmers. The Lincoln Keyboard is expected to facilitate the programming of algorithmic process and should allow considerable  flexibility in assembly and utility routines.</abstract>
	<conference>CACM July, 1958</conference>
	<authors>
	<author>Vanderburgh, A.</author>
	</authors>
	<location>CA580702 ES March 17, 1982 10:10 AM</location>
	<citations>
	<citation>1083	5	3192</citation>
	<citation>3192	5	3192</citation>
	<citation>3192	5	3192</citation>
	<citation>3192	5	3192</citation>
	<citation>407	6	3192</citation>
	<citation>3192	6	3192</citation>
	<citation>3193	6	3192</citation>
	<citation>730	6	3192</citation>
	</citations>
	</document>
	<document id= '3191'>
	<title>Generating Permutations by Nested Cycling</title>
	<abstract>The purpose of this letter is two_fold: first to give due credit to the Tompkins-Paige algorithm, and second to clarify a comment by Hill, CR Review 13891 on "Programs for Permutations".</abstract>
	<conference>CACM June, 1968</conference>
	<authors>
	</authors>
	<keywords>permutations</keywords>
	<version>5.39</version>
	<location>CA680617 ES March 18, 1982 10:00 AM</location>
	<citations>
	<citation>2189	5	3191</citation>
	<citation>3191	5	3191</citation>
	<citation>3191	5	3191</citation>
	<citation>3191	5	3191</citation>
	<citation>1594	6	3191</citation>
	<citation>2087	6	3191</citation>
	<citation>3191	6	3191</citation>
	<citation>521	6	3191</citation>
	</citations>
	</document>
	<document id= '3190'>
	<title>Correction to Economies of Scale and the IBM System/360</title>
	<abstract>On page 439, a "typical" instruction mix id discussed and the timing computed as outlined in that page. Through an undetected programming error, the times and the resulting regression equation are slightly in error.</abstract>
	<conference>CACM February, 1967</conference>
	<authors>
	<author>Solomon, M.B.</author>
	</authors>
	<location>CA670214 ES March 17, 1982 10:10 AM</location>
	<citations>
	<citation>2387	5	3190</citation>
	<citation>3190	5	3190</citation>
	<citation>3190	5	3190</citation>
	<citation>3190	5	3190</citation>
	<citation>1417	6	3190</citation>
	<citation>3190	6	3190</citation>
	</citations>
	</document>
	<document id= '3189'>
	<title>An Algebraic Compiler for the FORTRAN Assembly Program</title>
	<abstract>An algebraic compiler has been written which may be added to the FORTRAN  Assembly Program. This compiler will expand all algebraic statements with the  following operations: addition, subtraction, multiplication and division. It will compile multi-level expressions in floating-point arithmetic (this is easily be revised to fixed-point).</abstract>
	<conference>CACM November, 1962</conference>
	<authors>
	<author>Stiegler, A. D.</author>
	</authors>
	<location>CA621124 ES March 17, 1982 10:10 AM</location>
	<citations>
	<citation>1788	5	3189</citation>
	<citation>3189	5	3189</citation>
	<citation>3189	5	3189</citation>
	<citation>3189	5	3189</citation>
	<citation>1006	6	3189</citation>
	<citation>1007	6	3189</citation>
	<citation>205	6	3189</citation>
	<citation>3189	6	3189</citation>
	</citations>
	</document>
	<document id= '3188'>
	<title>Semiotics and Programming Languages</title>
	<abstract>I have based my paper on semiotics and its three dimension. I should insert at this point that language has many aspects and that pragmatics, semantics and syntactics do not necessary cover all of them. One can, however, project most  aspects into the three semiotic dimension and there seems to be a strong  tendency to do so today.</abstract>
	<conference>CACM March, 1966</conference>
	<authors>
	<author>Zemanek, H.</author>
	</authors>
	<location>CA660319 ES March 17, 1982 10:10 AM</location>
	<citations>
	<citation>2087	4	3188</citation>
	<citation>2189	4	3188</citation>
	<citation>3188	4	3188</citation>
	<citation>3188	4	3188</citation>
	<citation>1594	5	3188</citation>
	<citation>1781	5	3188</citation>
	<citation>3188	5	3188</citation>
	<citation>3188	5	3188</citation>
	<citation>3188	5	3188</citation>
	<citation>612	5	3188</citation>
	<citation>123	6	3188</citation>
	<citation>196	6	3188</citation>
	<citation>919	6	3188</citation>
	<citation>990	6	3188</citation>
	<citation>1007	6	3188</citation>
	<citation>1046	6	3188</citation>
	<citation>1131	6	3188</citation>
	<citation>1139	6	3188</citation>
	<citation>1140	6	3188</citation>
	<citation>1149	6	3188</citation>
	<citation>1198	6	3188</citation>
	<citation>1215	6	3188</citation>
	<citation>1223	6	3188</citation>
	<citation>1265	6	3188</citation>
	<citation>1303	6	3188</citation>
	<citation>1323	6	3188</citation>
	<citation>1358	6	3188</citation>
	<citation>1366	6	3188</citation>
	<citation>1421	6	3188</citation>
	<citation>1460	6	3188</citation>
	<citation>1462	6	3188</citation>
	<citation>1463	6	3188</citation>
	<citation>1467	6	3188</citation>
	<citation>1468	6	3188</citation>
	<citation>1477	6	3188</citation>
	<citation>1491	6	3188</citation>
	<citation>1496	6	3188</citation>
	<citation>1531	6	3188</citation>
	<citation>1535	6	3188</citation>
	<citation>1565	6	3188</citation>
	<citation>1601	6	3188</citation>
	<citation>1602	6	3188</citation>
	<citation>1613	6	3188</citation>
	<citation>1614	6	3188</citation>
	<citation>1626	6	3188</citation>
	<citation>1641	6	3188</citation>
	<citation>1787	6	3188</citation>
	<citation>1788	6	3188</citation>
	<citation>205	6	3188</citation>
	<citation>224	6	3188</citation>
	<citation>249	6	3188</citation>
	<citation>288	6	3188</citation>
	<citation>316	6	3188</citation>
	<citation>381	6	3188</citation>
	<citation>398	6	3188</citation>
	<citation>11	6	3188</citation>
	<citation>404	6	3188</citation>
	<citation>410	6	3188</citation>
	<citation>463	6	3188</citation>
	<citation>464	6	3188</citation>
	<citation>483	6	3188</citation>
	<citation>3184	6	3188</citation>
	<citation>3188	6	3188</citation>
	<citation>584	6	3188</citation>
	<citation>600	6	3188</citation>
	<citation>680	6	3188</citation>
	<citation>691	6	3188</citation>
	<citation>763	6	3188</citation>
	<citation>799	6	3188</citation>
	</citations>
	</document>
	<document id= '3187'>
	<title>Certification of Algorithm 271 (QUICKERSORT)</title>
	<abstract>QUICKERSORT compiled and run without correction through the ALDEP translator for the CDC 1604A. Comparison of average sorting items with other recently published algorithms demonstrates QUICKERSORT's superior performance.</abstract>
	<conference>CACM May, 1966</conference>
	<authors>
	<author>Blair, C.R.</author>
	</authors>
	<location>CA660516 ES March 17, 1982 10:10 AM</location>
	<citations>
	<citation>1919	5	3187</citation>
	<citation>2679	5	3187</citation>
	<citation>3187	5	3187</citation>
	<citation>3187	5	3187</citation>
	<citation>3187	5	3187</citation>
	<citation>864	6	3187</citation>
	<citation>970	6	3187</citation>
	<citation>1175	6	3187</citation>
	<citation>1175	6	3187</citation>
	<citation>1190	6	3187</citation>
	<citation>1228	6	3187</citation>
	<citation>1969	6	3187</citation>
	<citation>1997	6	3187</citation>
	<citation>308	6	3187</citation>
	<citation>308	6	3187</citation>
	<citation>309	6	3187</citation>
	<citation>2042	6	3187</citation>
	<citation>74	6	3187</citation>
	<citation>3187	6	3187</citation>
	<citation>3187	6	3187</citation>
	<citation>507	6	3187</citation>
	<citation>716	6	3187</citation>
	<citation>783	6	3187</citation>
	</citations>
	</document>
	<document id= '3186'>
	<title>GO TO Statement Considerd Harmful</title>
	<conference>CACM March, 1968</conference>
	<authors>
	<author>Dijkstra, E. W.</author>
	</authors>
	<keywords>go to statement, jump instruction, branch instruction, conditional clause, repetitive clause, program intelligibility, program sequencing</keywords>
	<version>4.22 5.23 5.24</version>
	<location>CA680303 ES March 17, 1982 10:10 AM</location>
	<citations>
	<citation>2193	5	3186</citation>
	<citation>2326	5	3186</citation>
	<citation>2477	5	3186</citation>
	<citation>2541	5	3186</citation>
	<citation>2594	5	3186</citation>
	<citation>3004	5	3186</citation>
	<citation>3186	5	3186</citation>
	<citation>3186	5	3186</citation>
	<citation>3186	5	3186</citation>
	<citation>1303	6	3186</citation>
	<citation>1323	6	3186</citation>
	<citation>1425	6	3186</citation>
	<citation>1771	6	3186</citation>
	<citation>1834	6	3186</citation>
	<citation>2016	6	3186</citation>
	<citation>2155	6	3186</citation>
	<citation>2192	6	3186</citation>
	<citation>2204	6	3186</citation>
	<citation>2247	6	3186</citation>
	<citation>2356	6	3186</citation>
	<citation>2456	6	3186</citation>
	<citation>3186	6	3186</citation>
	<citation>3186	6	3186</citation>
	<citation>3186	6	3186</citation>
	<citation>3186	6	3186</citation>
	<citation>3186	6	3186</citation>
	<citation>3186	6	3186</citation>
	<citation>799	6	3186</citation>
	</citations>
	</document>
	<document id= '3185'>
	<title>The Humble Programmer</title>
	<abstract>We shall do a much better programming job, provided that we approach the task with a full appreciation if its tremendous difficulty, provided that we  stick to modest and elegant programming languages, provided that we respect the intrinsic limitations of the human mind and approach the task as Very Humble Programmers.</abstract>
	<conference>CACM October, 1972</conference>
	<authors>
	<author>Dijkstra, E. W.</author>
	</authors>
	<location>CA721010 ES March 18, 1982 10:00 AM</location>
	<citations>
	<citation>249	4	3185</citation>
	<citation>1139	4	3185</citation>
	<citation>438	4	3185</citation>
	<citation>3185	4	3185</citation>
	<citation>3185	4	3185</citation>
	<citation>303	5	3185</citation>
	<citation>2705	5	3185</citation>
	<citation>438	5	3185</citation>
	<citation>3101	5	3185</citation>
	<citation>3185	5	3185</citation>
	<citation>3185	5	3185</citation>
	<citation>3185	5	3185</citation>
	<citation>1908	6	3185</citation>
	<citation>2138	6	3185</citation>
	<citation>2193	6	3185</citation>
	<citation>2438	6	3185</citation>
	<citation>3185	6	3185</citation>
	<citation>3185	6	3185</citation>
	</citations>
	</document>
	<document id= '3184'>
	<title>Revised Report on the Algorithmic Language ALGOL 60</title>
	<abstract>The report gives a complete defining description of the international algorithmic language ALGOL 60. This is a language suitable for expressing  a large class of numerical processes in a form sufficiently concise for  direct automatic translation into the language of programmed automatic computers.</abstract>
	<conference>CACM January, 1963</conference>
	<authors>
	<author>Nuar, P.</author>
	</authors>
	<location>CA630117 ES March 17, 1982 10:10 AM</location>
	<citations>
	<citation>1781	4	3184</citation>
	<citation>1828	4	3184</citation>
	<citation>1854	4	3184</citation>
	<citation>1877	4	3184</citation>
	<citation>1960	4	3184</citation>
	<citation>2150	4	3184</citation>
	<citation>2150	4	3184</citation>
	<citation>2228	4	3184</citation>
	<citation>2256	4	3184</citation>
	<citation>2317	4	3184</citation>
	<citation>2317	4	3184</citation>
	<citation>2319	4	3184</citation>
	<citation>2377	4	3184</citation>
	<citation>2342	4	3184</citation>
	<citation>2342	4	3184</citation>
	<citation>2376	4	3184</citation>
	<citation>2376	4	3184</citation>
	<citation>2379	4	3184</citation>
	<citation>2424	4	3184</citation>
	<citation>2482	4	3184</citation>
	<citation>2618	4	3184</citation>
	<citation>2618	4	3184</citation>
	<citation>2632	4	3184</citation>
	<citation>2704	4	3184</citation>
	<citation>2723	4	3184</citation>
	<citation>2738	4	3184</citation>
	<citation>2740	4	3184</citation>
	<citation>2741	4	3184</citation>
	<citation>2867	4	3184</citation>
	<citation>3184	4	3184</citation>
	<citation>3184	4	3184</citation>
	<citation>3184	4	3184</citation>
	<citation>949	5	3184</citation>
	<citation>989	5	3184</citation>
	<citation>1086	5	3184</citation>
	<citation>1132	5	3184</citation>
	<citation>1198	5	3184</citation>
	<citation>1234	5	3184</citation>
	<citation>1263	5	3184</citation>
	<citation>1265	5	3184</citation>
	<citation>1270	5	3184</citation>
	<citation>1323	5	3184</citation>
	<citation>1358	5	3184</citation>
	<citation>1379	5	3184</citation>
	<citation>1380	5	3184</citation>
	<citation>1453	5	3184</citation>
	<citation>1464	5	3184</citation>
	<citation>1484	5	3184</citation>
	<citation>1491	5	3184</citation>
	<citation>1498	5	3184</citation>
	<citation>1613	5	3184</citation>
	<citation>1614	5	3184</citation>
	<citation>1749	5	3184</citation>
	<citation>1781	5	3184</citation>
	<citation>1825	5	3184</citation>
	<citation>1860	5	3184</citation>
	<citation>2083	5	3184</citation>
	<citation>2178	5	3184</citation>
	<citation>2179	5	3184</citation>
	<citation>2252	5	3184</citation>
	<citation>2325	5	3184</citation>
	<citation>2341	5	3184</citation>
	<citation>2546	5	3184</citation>
	<citation>2645	5	3184</citation>
	<citation>2652	5	3184</citation>
	<citation>2684	5	3184</citation>
	<citation>2842	5	3184</citation>
	<citation>2929	5	3184</citation>
	<citation>2934	5	3184</citation>
	<citation>557	5	3184</citation>
	<citation>3069	5	3184</citation>
	<citation>3184	5	3184</citation>
	<citation>3184	5	3184</citation>
	<citation>3184	5	3184</citation>
	<citation>669	5	3184</citation>
	<citation>679	5	3184</citation>
	<citation>691	5	3184</citation>
	<citation>761	5	3184</citation>
	<citation>1	6	3184</citation>
	<citation>823	6	3184</citation>
	<citation>123	6	3184</citation>
	<citation>145	6	3184</citation>
	<citation>196	6	3184</citation>
	<citation>196	6	3184</citation>
	<citation>196	6	3184</citation>
	<citation>196	6	3184</citation>
	<citation>196	6	3184</citation>
	<citation>919	6	3184</citation>
	<citation>944	6	3184</citation>
	<citation>947	6	3184</citation>
	<citation>987	6	3184</citation>
	<citation>988	6	3184</citation>
	<citation>989	6	3184</citation>
	<citation>989	6	3184</citation>
	<citation>990	6	3184</citation>
	<citation>990	6	3184</citation>
	<citation>1007	6	3184</citation>
	<citation>1046	6	3184</citation>
	<citation>1086	6	3184</citation>
	<citation>1131	6	3184</citation>
	<citation>1134	6	3184</citation>
	<citation>1137	6	3184</citation>
	<citation>1139	6	3184</citation>
	<citation>1140	6	3184</citation>
	<citation>1140	6	3184</citation>
	<citation>1149	6	3184</citation>
	<citation>1198	6	3184</citation>
	<citation>1215	6	3184</citation>
	<citation>1215	6	3184</citation>
	<citation>1223	6	3184</citation>
	<citation>1263	6	3184</citation>
	<citation>1265	6	3184</citation>
	<citation>1303	6	3184</citation>
	<citation>1303	6	3184</citation>
	<citation>1303	6	3184</citation>
	<citation>1303	6	3184</citation>
	<citation>1323	6	3184</citation>
	<citation>1323	6	3184</citation>
	<citation>1323	6	3184</citation>
	<citation>1358	6	3184</citation>
	<citation>1358	6	3184</citation>
	<citation>1366	6	3184</citation>
	<citation>1366	6	3184</citation>
	<citation>1389	6	3184</citation>
	<citation>1421	6	3184</citation>
	<citation>1421	6	3184</citation>
	<citation>1421	6	3184</citation>
	<citation>1453	6	3184</citation>
	<citation>1460	6	3184</citation>
	<citation>1460	6	3184</citation>
	<citation>1462	6	3184</citation>
	<citation>1463	6	3184</citation>
	<citation>1467	6	3184</citation>
	<citation>1468	6	3184</citation>
	<citation>1468	6	3184</citation>
	<citation>1466	6	3184</citation>
	<citation>1477	6	3184</citation>
	<citation>1477	6	3184</citation>
	<citation>1477	6	3184</citation>
	<citation>1477	6	3184</citation>
	<citation>1491	6	3184</citation>
	<citation>1491	6	3184</citation>
	<citation>1491	6	3184</citation>
	<citation>1496	6	3184</citation>
	<citation>1496	6	3184</citation>
	<citation>1496	6	3184</citation>
	<citation>1531	6	3184</citation>
	<citation>1535	6	3184</citation>
	<citation>1565	6	3184</citation>
	<citation>1601	6	3184</citation>
	<citation>1602	6	3184</citation>
	<citation>1613	6	3184</citation>
	<citation>1614	6	3184</citation>
	<citation>1626	6	3184</citation>
	<citation>1626	6	3184</citation>
	<citation>1641	6	3184</citation>
	<citation>1641	6	3184</citation>
	<citation>1781	6	3184</citation>
	<citation>1785	6	3184</citation>
	<citation>1786	6	3184</citation>
	<citation>1787	6	3184</citation>
	<citation>1788	6	3184</citation>
	<citation>205	6	3184</citation>
	<citation>205	6	3184</citation>
	<citation>1825	6	3184</citation>
	<citation>210	6	3184</citation>
	<citation>210	6	3184</citation>
	<citation>224	6	3184</citation>
	<citation>249	6	3184</citation>
	<citation>267	6	3184</citation>
	<citation>288	6	3184</citation>
	<citation>288	6	3184</citation>
	<citation>316	6	3184</citation>
	<citation>321	6	3184</citation>
	<citation>378	6	3184</citation>
	<citation>381	6	3184</citation>
	<citation>385	6	3184</citation>
	<citation>398	6	3184</citation>
	<citation>2015	6	3184</citation>
	<citation>2059	6	3184</citation>
	<citation>2060	6	3184</citation>
	<citation>2110	6	3184</citation>
	<citation>11	6	3184</citation>
	<citation>2126	6	3184</citation>
	<citation>2127	6	3184</citation>
	<citation>2148	6	3184</citation>
	<citation>2155	6	3184</citation>
	<citation>2192	6	3184</citation>
	<citation>21	6	3184</citation>
	<citation>400	6	3184</citation>
	<citation>402	6	3184</citation>
	<citation>404	6	3184</citation>
	<citation>404	6	3184</citation>
	<citation>404	6	3184</citation>
	<citation>404	6	3184</citation>
	<citation>404	6	3184</citation>
	<citation>407	6	3184</citation>
	<citation>410	6	3184</citation>
	<citation>410	6	3184</citation>
	<citation>437	6	3184</citation>
	<citation>463	6	3184</citation>
	<citation>464	6	3184</citation>
	<citation>464	6	3184</citation>
	<citation>483	6	3184</citation>
	<citation>483	6	3184</citation>
	<citation>3184	6	3184</citation>
	<citation>3184	6	3184</citation>
	<citation>3184	6	3184</citation>
	<citation>3184	6	3184</citation>
	<citation>3184	6	3184</citation>
	<citation>3184	6	3184</citation>
	<citation>3184	6	3184</citation>
	<citation>3184	6	3184</citation>
	<citation>3184	6	3184</citation>
	<citation>3184	6	3184</citation>
	<citation>3184	6	3184</citation>
	<citation>3184	6	3184</citation>
	<citation>3184	6	3184</citation>
	<citation>3184	6	3184</citation>
	<citation>3184	6	3184</citation>
	<citation>3184	6	3184</citation>
	<citation>3184	6	3184</citation>
	<citation>3184	6	3184</citation>
	<citation>3184	6	3184</citation>
	<citation>3184	6	3184</citation>
	<citation>3184	6	3184</citation>
	<citation>3184	6	3184</citation>
	<citation>3184	6	3184</citation>
	<citation>3184	6	3184</citation>
	<citation>3184	6	3184</citation>
	<citation>3184	6	3184</citation>
	<citation>3184	6	3184</citation>
	<citation>3184	6	3184</citation>
	<citation>3184	6	3184</citation>
	<citation>3184	6	3184</citation>
	<citation>3184	6	3184</citation>
	<citation>3184	6	3184</citation>
	<citation>3184	6	3184</citation>
	<citation>3184	6	3184</citation>
	<citation>3184	6	3184</citation>
	<citation>3184	6	3184</citation>
	<citation>3184	6	3184</citation>
	<citation>3184	6	3184</citation>
	<citation>3184	6	3184</citation>
	<citation>3184	6	3184</citation>
	<citation>3188	6	3184</citation>
	<citation>584	6	3184</citation>
	<citation>584	6	3184</citation>
	<citation>600	6	3184</citation>
	<citation>631	6	3184</citation>
	<citation>635	6	3184</citation>
	<citation>669	6	3184</citation>
	<citation>680	6	3184</citation>
	<citation>691	6	3184</citation>
	<citation>729	6	3184</citation>
	<citation>729	6	3184</citation>
	<citation>729	6	3184</citation>
	<citation>731	6	3184</citation>
	<citation>761	6	3184</citation>
	<citation>763	6	3184</citation>
	<citation>799	6	3184</citation>
	<citation>799	6	3184</citation>
	<citation>799	6	3184</citation>
	<citation>799	6	3184</citation>
	</citations>
	</document>
	<document id= '3183'>
	<title>Policy, Values, and EFT Research: Anatomy of a Research Agenda</title>
	<abstract>There is an emerging recognition that EFT systems have the potential to vastly alter the payment and fund transfer system in American society. A number of forces and actors are involved in this evolution, and the values vary significantly depending on individual and institutional  perspectives. These value conflicts are highlighted in a six-part research agenda: technological issues in EFT, EFT impacts  on people, economic impact of EFT, regulation and control of EFT, and evaluating and monitoring EFT systems.</abstract>
	<conference>CACM December, 1979</conference>
	<authors>
	<author>Kraemer, K.L.</author>
	<author>Colton, K.W.</author>
	</authors>
	<keywords>EFTs, research agenda, value conflicts, impacts on people, economic impacts, regulation and control, monitoring EFT</keywords>
	<version>2.11 2.3 3.52 3.53 3.80</version>
	<location>CA791206 DB February 25, 1980  2:10 PM</location>
	<citations>
	<citation>3142	4	3183</citation>
	<citation>3179	4	3183</citation>
	<citation>3178	4	3183</citation>
	<citation>3182	4	3183</citation>
	<citation>3183	4	3183</citation>
	<citation>3076	5	3183</citation>
	<citation>3183	5	3183</citation>
	<citation>3183	5	3183</citation>
	<citation>3183	5	3183</citation>
	</citations>
	</document>
	<document id= '3182'>
	<title>Vulnerabilities of EFTs to Intentionally Caused Losses</title>
	<abstract>The hypothesis that consumers are provided greater accuracy and freedom from error and fraud with electronic funds transfer systems (EFTs) is discussed in light of the technical capabilities and potential of the computer to protect against both accidentally and intentionally caused losses. Although the nomenclature for business crimes remains the same as for manual depository and other financial service systems - for example,  fraud, theft, embezzlement - the characteristics of the crimes are new. The changes resulting from the accelerating use of EFTs and  its continual technological advances broaden the scope of security issues to be examined.  Factors such as backup requirements,  regulatory and legislative actions, and economics give rise to the urgency for immediate research into solutions for emerging EFTs - related vulnerabilities.</abstract>
	<conference>CACM December, 1979</conference>
	<authors>
	<author>Parker, D.B.</author>
	</authors>
	<keywords>EFTs, computer abuse, crime, security, errors, losses, positions of trust, legislation</keywords>
	<version>2.11 2.3 3.52 3.80</version>
	<location>CA791205 DB February 25, 1980  1:56 PM</location>
	<citations>
	<citation>3142	4	3182</citation>
	<citation>3179	4	3182</citation>
	<citation>3178	4	3182</citation>
	<citation>3182	4	3182</citation>
	<citation>3183	4	3182</citation>
	<citation>3076	5	3182</citation>
	<citation>3178	5	3182</citation>
	<citation>3182	5	3182</citation>
	<citation>3182	5	3182</citation>
	<citation>3182	5	3182</citation>
	<citation>3076	6	3182</citation>
	<citation>3140	6	3182</citation>
	<citation>3142	6	3182</citation>
	<citation>3179	6	3182</citation>
	<citation>3180	6	3182</citation>
	<citation>3181	6	3182</citation>
	<citation>3182	6	3182</citation>
	</citations>
	</document>
	<document id= '3181'>
	<title>Public Protection and Education with EFT</title>
	<abstract>Research has revealed the existence of widespread misinformation and lack of knowledge about EFT among business and government as well as consumers.  As a result, any effort to stimulate meaningful public participation in decisions on the introduction of EFT systems will require a coordinated educational effort of considerable scale.  In addition, research has revealed  shortcomings in the present system for defining responsibilities, liabilities, and avenues of recourse.  THis article presents several possible alternatives for improving the current system, but ongoing research is also needed to assure that actions taken will be responsive to the changing environment and consumer needs.</abstract>
	<conference>CACM December, 1979</conference>
	<authors>
	<author>Long, R.H.</author>
	</authors>
	<keywords>Electronic funds transfer systems, consumer education, security and fraud, privacy, system reliability, EFT ombudsman</keywords>
	<version>2.12</version>
	<location>CA791204 DB February 25, 1980  11:33 AM</location>
	<citations>
	<citation>3178	5	3181</citation>
	<citation>3181	5	3181</citation>
	<citation>3181	5	3181</citation>
	<citation>3181	5	3181</citation>
	<citation>3076	6	3181</citation>
	<citation>3140	6	3181</citation>
	<citation>3142	6	3181</citation>
	<citation>3179	6	3181</citation>
	<citation>3180	6	3181</citation>
	<citation>3181	6	3181</citation>
	<citation>3182	6	3181</citation>
	</citations>
	</document>
	<document id= '3180'>
	<title>Costs of the Current U.S. Payments System</title>
	<abstract>Neither the banking industry nor public policy makers have good information on the comparative costs of alternative payment systems such as cash, checks, credit cards, and EFT transactions.  As a result, EFT systems and services are likely to be implemented without a valid assessment of whether they are cost-justified, lst alone justified in terms of other criteria.</abstract>
	<conference>CACM December, 1979</conference>
	<authors>
	<author>Lipis, A.H.</author>
	</authors>
	<keywords>EFT's,payment system costs, payment system volumes</keywords>
	<version>3.52</version>
	<location>CA791203 DB February 25, 1980  11:09 AM</location>
	<citations>
	<citation>3178	5	3180</citation>
	<citation>3180	5	3180</citation>
	<citation>3180	5	3180</citation>
	<citation>3180	5	3180</citation>
	<citation>3076	6	3180</citation>
	<citation>3140	6	3180</citation>
	<citation>3142	6	3180</citation>
	<citation>3179	6	3180</citation>
	<citation>3180	6	3180</citation>
	<citation>3181	6	3180</citation>
	<citation>3182	6	3180</citation>
	</citations>
	</document>
	<document id= '3179'>
	<title>Overview of the EFT Symposium</title>
	<abstract>It is increasingly recognized that large-scale technologies such as EFT have the potential for aiding in the solution of current societal problems. Yet, these technologies also generate problems.  This symposium presents selected papers from a conference that sought to discover what is currently known about EFT impacts in society and what research is needed in the future.</abstract>
	<conference>CACM December, 1979</conference>
	<authors>
	<author>Kraemer, K.L.</author>
	<author>Colton, K.W.</author>
	</authors>
	<keywords>EFT's, research agenda, conference results, public policy</keywords>
	<version>2.11 3.52 3.53 3.80</version>
	<location>CA791202 DB February 25, 1980  11:03 AM</location>
	<citations>
	<citation>2756	4	3179</citation>
	<citation>3076	4	3179</citation>
	<citation>3142	4	3179</citation>
	<citation>3179	4	3179</citation>
	<citation>3179	4	3179</citation>
	<citation>3179	4	3179</citation>
	<citation>3178	4	3179</citation>
	<citation>3182	4	3179</citation>
	<citation>3183	4	3179</citation>
	<citation>2572	5	3179</citation>
	<citation>2607	5	3179</citation>
	<citation>3076	5	3179</citation>
	<citation>3179	5	3179</citation>
	<citation>3179	5	3179</citation>
	<citation>3179	5	3179</citation>
	<citation>3178	5	3179</citation>
	<citation>3076	6	3179</citation>
	<citation>3140	6	3179</citation>
	<citation>3142	6	3179</citation>
	<citation>3179	6	3179</citation>
	<citation>3180	6	3179</citation>
	<citation>3181	6	3179</citation>
	<citation>3182	6	3179</citation>
	</citations>
	</document>
	<document id= '3178'>
	<citations>
	<citation>3142	4	3178</citation>
	<citation>3179	4	3178</citation>
	<citation>3178	4	3178</citation>
	<citation>3178	4	3178</citation>
	<citation>3178	4	3178</citation>
	<citation>3178	4	3178</citation>
	<citation>3178	4	3178</citation>
	<citation>3178	4	3178</citation>
	<citation>3178	4	3178</citation>
	<citation>3182	4	3178</citation>
	<citation>3183	4	3178</citation>
	<citation>3076	5	3178</citation>
	<citation>3140	5	3178</citation>
	<citation>3142	5	3178</citation>
	<citation>3179	5	3178</citation>
	<citation>3178	5	3178</citation>
	<citation>3178	5	3178</citation>
	<citation>3178	5	3178</citation>
	<citation>3182	5	3178</citation>
	<citation>3180	5	3178</citation>
	<citation>3181	5	3178</citation>
	</citations>
	<title>Introduction to the EFT Symposium</title>
	<conference>CACM December, 1979</conference>
	<authors>
	<author>Kling, R.</author>
	</authors>
	<location>CA791201 DB February 21, 1980  5:02 PM</location>
	</document>
	<document id= '3177'>
	<title>How to Share a Secret</title>
	<abstract>In this paper we show how to divide data D into n pieces in such a way that D is easily reconstructable from any k pieces, but even complete knowledge of k - 1 pieces reveals olutely no information about D.  This technique enables the construction of robust key management schemes for cryptographic systems that can function securely and reliably even when misfortunes destroy half the pieces and security breaches expose all but one of the remaining pieces.</abstract>
	<conference>CACM November, 1979</conference>
	<authors>
	<author>Shamir, A.</author>
	</authors>
	<keywords>Cryptography, key management, interpolation</keywords>
	<version>5.39 5.6</version>
	<location>CA791105 DB January 23, 1980  11:48 AM</location>
	<citations>
	<citation>3038	4	3177</citation>
	<citation>3111	4	3177</citation>
	<citation>3177	4	3177</citation>
	<citation>3021	5	3177</citation>
	<citation>3177	5	3177</citation>
	<citation>3177	5	3177</citation>
	<citation>3177	5	3177</citation>
	</citations>
	</document>
	<document id= '3176'>
	<title>Storing a Sparse Table</title>
	<abstract>The problem of storing and searching large sparse tables is ubiquitous in  computer science.  The standard technique for storing such tables is hashing, but hashing has poor worst-case performance.  We propose a good worst-case method for storing a static table of n entries, each an integer between 0 and N - 1.  The method requires 0(n) w words of storage and allows O(logn N) access time.  Although our method is a little complicated to use in practice, our analysis shows why a simpler algorithm used for compressing LR parsing tables works so well.</abstract>
	<conference>CACM November, 1979</conference>
	<authors>
	<author>Tarjan, R.E.</author>
	<author>Yao, A.C.C.</author>
	</authors>
	<keywords>Gaussian elimination, parsing, searching, sparse matrix, table compression, table lookup</keywords>
	<version>3.74 4.12 4.34 5.25</version>
	<location>CA791104 DB January 23, 1980  11:24 AM</location>
	<citations>
	<citation>3041	4	3176</citation>
	<citation>3126	4	3176</citation>
	<citation>3176	4	3176</citation>
	<citation>2905	5	3176</citation>
	<citation>3176	5	3176</citation>
	<citation>3176	5	3176</citation>
	<citation>3176	5	3176</citation>
	</citations>
	</document>
	<document id= '3175'>
	<title>Breaking Substitution Ciphers Using a Relaxation Algorithm</title>
	<abstract>Substitution ciphers are codes in which each letter of the alphabet has one fixed substitute, and the word divisions  do not change.  In this paper the problem of breaking substitution ciphers is represented as a probabilistic labeling problem. Every code letter is assigned probabilities of representing plain text letters.  These probabilities are updated in parallel for all code letters, using joint letter probabilities.  Iterating the updating scheme results in improved estimates that finally lead to breaking the cipher.  The method is applies successfully to two examples.</abstract>
	<conference>CACM November, 1979</conference>
	<authors>
	<author>Peleg, S.</author>
	<author>Rosenfeld, A.</author>
	</authors>
	<keywords>Cryptography, substitution ciphers, probabilistic classification, relaxation</keywords>
	<version>3.42 3.63</version>
	<location>CA791103 DB January 23, 1980  11:15 AM</location>
	<citations>
	<citation>3175	5	3175</citation>
	<citation>3175	5	3175</citation>
	<citation>3175	5	3175</citation>
	</citations>
	</document>
	<document id= '3174'>
	<title>Password Security: A Case History</title>
	<abstract>This paper describes the history of the design of the password security scheme on a remotely accessed time-sharing system. The present design was the result of countering observed attempts to penetrate the system.  The result is a compromise between extreme security and ease of use.</abstract>
	<conference>CACM November, 1979</conference>
	<authors>
	<author>Morris, R.</author>
	<author>Thompson, K.</author>
	</authors>
	<keywords>Operating systems, passwords, computer security</keywords>
	<version>2.41 4.35</version>
	<location>CA791102 DB January 18, 1980  10:03 AM</location>
	<citations>
	<citation>2626	4	3174</citation>
	<citation>2786	4	3174</citation>
	<citation>2840	4	3174</citation>
	<citation>2919	4	3174</citation>
	<citation>3017	4	3174</citation>
	<citation>3110	4	3174</citation>
	<citation>3174	4	3174</citation>
	<citation>2629	5	3174</citation>
	<citation>3174	5	3174</citation>
	<citation>3174	5	3174</citation>
	<citation>3174	5	3174</citation>
	</citations>
	</document>
	<document id= '3173'>
	<title>A Psychology of Learning BASIC</title>
	<abstract>This paper addresses the question: What does a person know following learning of BASIC programming?  Several underlying conceptual structures are identified: (1) a transaction is an event that occurs in the computer and involves some operation on some object at some location, (2) a prestatement is a set of transactions corresponding to a line of code, (3) chunks are frequently occurring  configurations of prestatements corresponding to several lines of code.</abstract>
	<conference>CACM November, 1979</conference>
	<authors>
	<author>Mayer, R.E.</author>
	</authors>
	<keywords>BASIC, Learning, instruction</keywords>
	<version>1.50 3.36 4.22</version>
	<location>CA791101 DB January 17, 1980  10:38 AM</location>
	<citations>
	<citation>3173	5	3173</citation>
	<citation>3173	5	3173</citation>
	<citation>3173	5	3173</citation>
	</citations>
	</document>
	<document id= '3172'>
	<title>An Algorithm for Planning Collision-Free Paths Among Polyhedral Obstacles</title>
	<abstract>This paper describes a collision avoidance algorithm for planning a safe path for a polyhedral object moving among known polyhedral objects.  The algorithm transforms the obstacles so that they represent the locus of forbidden positions for an arbitrary reference point on the moving object.  A trajectory of this reference point which avoids all forbidden regions is free of collisions. Trajectories are found by searching a network which indicates, for each vertex  in the transformed obstacles, which other vertices can be reached safely.</abstract>
	<conference>CACM October, 1979</conference>
	<authors>
	<author>Perez, T.</author>
	<author>Wesley, M.A.</author>
	</authors>
	<keywords>Path finding, collision-free paths, polyhedral objects, polyhedral obstacles, graph searching, growing objects</keywords>
	<version>3.15 3.64 3.66 8.1</version>
	<location>CA791005 DB January 17, 1980  10:13 AM</location>
	<citations>
	<citation>3172	4	3172</citation>
	<citation>3116	5	3172</citation>
	<citation>3172	5	3172</citation>
	<citation>3172	5	3172</citation>
	<citation>3172	5	3172</citation>
	</citations>
	</document>
	<document id= '3171'>
	<title>Line Numbers Made Cheap</title>
	<abstract>A technique is described for run-time line number administration to be used for implementations of high level languages.  Under suitable circumstances, this method requires absolutely no overhead, in either time or space, during execution of the program.</abstract>
	<conference>CACM October, 1979</conference>
	<authors>
	<author>Klint, P.</author>
	</authors>
	<keywords>Line number administration, diagnostic messages, abstract machine code</keywords>
	<version>4.12 4.13 4.20 4.42</version>
	<location>CA791004 DB January 17, 1980  9:57 AM</location>
	<citations>
	<citation>3171	5	3171</citation>
	<citation>3171	5	3171</citation>
	<citation>3171	5	3171</citation>
	</citations>
	</document>
	<document id= '3170'>
	<title>On the Proof of Correctness of a Calendar Program</title>
	<abstract>A formal specification is given for a simple calendar program, and the derivation and proof of correctness of the program are  sketched.  The specification is easy to understand, and its correctness is  manifest to humans.</abstract>
	<conference>CACM October,1979</conference>
	<authors>
	<author>Lamport, L.</author>
	</authors>
	<keywords>Program specification, program verification, inductive assertions</keywords>
	<version>5.24</version>
	<location>CA791003 DB January 16, 1980  5:02 PM</location>
	<citations>
	<citation>3170	4	3170</citation>
	<citation>3170	4	3170</citation>
	<citation>3055	5	3170</citation>
	<citation>3104	5	3170</citation>
	<citation>3170	5	3170</citation>
	<citation>3170	5	3170</citation>
	<citation>3170	5	3170</citation>
	</citations>
	</document>
	<document id= '3169'>
	<title>Note on "An Optimal Evaluation of Boolean Expressions  in an Online Query System."</title>
	<conference>CACM October, 1979</conference>
	<authors>
	<author>Gudes, E.</author>
	<author>Hoffman, A.</author>
	</authors>
	<keywords>Query, Boolean expression, optimal evaluation, information retrieval</keywords>
	<version>3.50 3.70 3.74</version>
	<location>CA791002 DB January 16, 1980  4:52 PM</location>
	<citations>
	<citation>3168	4	3169</citation>
	<citation>3169	4	3169</citation>
	<citation>2965	5	3169</citation>
	<citation>3169	5	3169</citation>
	<citation>3169	5	3169</citation>
	<citation>3169	5	3169</citation>
	</citations>
	</document>
	<document id= '3168'>
	<title>Comment on "An Optimal Evaluation of Boolean Expressions in an Online Query System."</title>
	<conference>CACM October, 1979</conference>
	<authors>
	<author>Laird, P.D.</author>
	</authors>
	<keywords>Query, Boolean expression, information retrieval, file organization</keywords>
	<version>3.53.70 3.73 3.74</version>
	<location>CA791001 DB January 16, 1980  4:50 PM</location>
	<citations>
	<citation>3168	4	3168</citation>
	<citation>3168	4	3168</citation>
	<citation>3169	4	3168</citation>
	<citation>2965	5	3168</citation>
	<citation>3002	5	3168</citation>
	<citation>3168	5	3168</citation>
	<citation>3168	5	3168</citation>
	<citation>3168	5	3168</citation>
	</citations>
	</document>
	<document id= '3167'>
	<title>Updating Mean and Variance Estimates: An Improved Method</title>
	<abstract>A method of improved efficiency is given for updating the mean and variance of weighted sampled data when an additional data value is included in the set.  Evidence is presented that the method is stable and at least as accurate as the best existing updating method.</abstract>
	<conference>CACM September, 1979</conference>
	<authors>
	<author>West, D.H.D.</author>
	</authors>
	<keywords>Mean, standard deviation, variance, updating estimates, removing data</keywords>
	<version>5.5 5.19</version>
	<location>CA790908 DB January 16, 1980  4:47 PM</location>
	<citations>
	<citation>2731	4	3167</citation>
	<citation>3159	4	3167</citation>
	<citation>3159	4	3167</citation>
	<citation>3166	4	3167</citation>
	<citation>3166	4	3167</citation>
	<citation>3167	4	3167</citation>
	<citation>3167	4	3167</citation>
	<citation>3167	4	3167</citation>
	<citation>2731	5	3167</citation>
	<citation>2799	5	3167</citation>
	<citation>3166	5	3167</citation>
	<citation>3167	5	3167</citation>
	<citation>3167	5	3167</citation>
	<citation>3167	5	3167</citation>
	<citation>1411	6	3167</citation>
	<citation>2731	6	3167</citation>
	<citation>2799	6	3167</citation>
	<citation>3159	6	3167</citation>
	<citation>3167	6	3167</citation>
	</citations>
	</document>
	<document id= '3166'>
	<title>Computing Standard Deviations: Accuracy</title>
	<abstract>Four algorithms for the numerical computation of the standard deviation of (unweighted) sampled data are analyzed.  Two of the algorithms are well-known in the statistical and computational literature; the other two are new algorithms specifically intended for automatic computation.  Our discussion is  expository, with emphasis on reaching a suitable definition of "accuracy."  Each of the four algorithms is analyzed for the conditions under which it will be accurate.  We conclude that all four algorithms will provide accurate answers for many problems, but two of the algorithms, one new, one old, are substantially more accurate on difficult problems than are the other two.</abstract>
	<conference>CACM September, 1979</conference>
	<authors>
	<author>Chan, T.F.</author>
	<author>Lewis, J.G.</author>
	</authors>
	<keywords>Mean, standard deviation, least squares, updating estimates, rounding error analysis, condition number.</keywords>
	<version>5.5 5.11 5.19</version>
	<location>CA790907 DB January 16, 1980  4:23 PM</location>
	<citations>
	<citation>1619	4	3166</citation>
	<citation>2731	4	3166</citation>
	<citation>3159	4	3166</citation>
	<citation>3159	4	3166</citation>
	<citation>3166	4	3166</citation>
	<citation>3166	4	3166</citation>
	<citation>3166	4	3166</citation>
	<citation>3166	4	3166</citation>
	<citation>3166	4	3166</citation>
	<citation>3167	4	3166</citation>
	<citation>3167	4	3166</citation>
	<citation>1411	5	3166</citation>
	<citation>2731	5	3166</citation>
	<citation>2799	5	3166</citation>
	<citation>3159	5	3166</citation>
	<citation>3166	5	3166</citation>
	<citation>3166	5	3166</citation>
	<citation>3166	5	3166</citation>
	<citation>3167	5	3166</citation>
	<citation>2731	6	3166</citation>
	<citation>2799	6	3166</citation>
	<citation>3166	6	3166</citation>
	</citations>
	</document>
	<document id= '3165'>
	<title>Approximation of Polygonal Maps by Cellular Maps</title>
	<abstract>The approximation of polygonal thematic maps by cellular maps, an important operation in geographical data processing, is analyzed.  The data organization used for representing the polygonal maps is a widely used segment-based data structure, where class labels identify the regions bordering each segment on either side. The approximation algorithm presented operates on such an organization, eliminating the need for the recognition of region boundaries. Each segment is examined only once.  The versatility of the new organization is further illustrated by the outline of algorithms for area computation and point inclusion.  The algorithm is applied to a set of soil maps converted to computer-readable form by means of a coordinate digitizer.</abstract>
	<conference>CACM September, 1979</conference>
	<authors>
	<author>Nagy, G.</author>
	<author>Wagle, S.G.</author>
	</authors>
	<keywords>Polygon maps, cellularization, gridding, geographic data structures, computational geometry, computer cartography, automated cartography</keywords>
	<version>3.14 4.34 8.2</version>
	<location>CA790906 DB January 14, 1980  12:04 PM</location>
	<citations>
	<citation>1630	4	3165</citation>
	<citation>2547	4	3165</citation>
	<citation>2987	4	3165</citation>
	<citation>3165	4	3165</citation>
	<citation>3165	4	3165</citation>
	<citation>1326	5	3165</citation>
	<citation>2987	5	3165</citation>
	<citation>3165	5	3165</citation>
	<citation>3165	5	3165</citation>
	<citation>3165	5	3165</citation>
	</citations>
	</document>
	<document id= '3164'>
	<title>Progressive Acyclic Digraphs-A Tool for Database Integrity</title>
	<abstract>A progressive acyclic digraph (PAD) algorithm accepts are requests and maintains a graph in an acyclic state.  When a request creates a cycle, nodes are, "detached" until the new are can be entered acyclically This process is important in certain areas of database implementation in which there are constraints on the permissible sequences of actions. Two PAD algorithms are presented; one uses a simple path matrix representation and the other uses a list with an "artificial gradient."  Experiments suggest that for large N the second is considerably faster, though both are asymptotically O(NR), where N is the number of nodes and R is the expected number of nodes reachable along paths from any given node.</abstract>
	<conference>CACM September, 1979</conference>
	<authors>
	<author>Hansen, W.J.</author>
	</authors>
	<keywords>List processing, data structures, topological sort, acyclic digraph, database integrity, network, deadlock</keywords>
	<version>4.34 5.32 4.33</version>
	<location>CA790905 DB January 14, 1980  11:56 AM</location>
	<citations>
	<citation>3164	4	3164</citation>
	<citation>1712	5	3164</citation>
	<citation>3164	5	3164</citation>
	<citation>3164	5	3164</citation>
	<citation>3164	5	3164</citation>
	</citations>
	</document>
	<document id= '3163'>
	<title>An Optimal Insertion Algorithm for One-Sided Height-Balanced BInary Search Trees</title>
	<abstract>An algorithm for inserting an element into a one-sided height-balanced (OSHB) binary search tree is presented.  The algorithm operates in time  O(log n), where n is the number of nodes in the tree.  This represents an improvement over the best previous ly known insertion algorithms of Hirschberg and Kosaraju, which require time O(log 2n).  Moreover, the O(log n) complexity is optimal. Earlier  results have shown that deletion in such a structure can also be performed in O(log n) time.  Thus the result of this paper gives a negative answer to the question of whether such trees should be the first examples of their kind, where deletion has a smaller time  complexity than insertion.  Furthermore, it can now be concluded that insertion, deletion, and retrieval in OSHB trees can be performed in the same time as the corresponding operations for the more general AVL trees, to within a constant factor.  However, the insertion and deletion algorithms for OSHB trees appear much more complicated than the corresponding algorithms for AVL trees.</abstract>
	<conference>CACM September, 1979</conference>
	<authors>
	<author>Zweben, S.H.</author>
	</authors>
	<keywords>Insertion, one-sided height-balanced trees, height-balanced trees, binary trees, search trees.</keywords>
	<version>3.73. 3.74 4.34 5.25 5.31</version>
	<location>CA790904 DB January 14, 1980  11:47 AM</location>
	<citations>
	<citation>2839	4	3163</citation>
	<citation>3009	4	3163</citation>
	<citation>3042	4	3163</citation>
	<citation>3042	4	3163</citation>
	<citation>3065	4	3163</citation>
	<citation>3065	4	3163</citation>
	<citation>3096	4	3163</citation>
	<citation>3096	4	3163</citation>
	<citation>3096	4	3163</citation>
	<citation>3163	4	3163</citation>
	<citation>3163	4	3163</citation>
	<citation>3163	4	3163</citation>
	<citation>3163	4	3163</citation>
	<citation>3163	4	3163</citation>
	<citation>2839	5	3163</citation>
	<citation>2889	5	3163</citation>
	<citation>3009	5	3163</citation>
	<citation>3065	5	3163</citation>
	<citation>3096	5	3163</citation>
	<citation>3163	5	3163</citation>
	<citation>3163	5	3163</citation>
	<citation>3163	5	3163</citation>
	</citations>
	</document>
	<document id= '3162'>
	<title>On Improving the Worst Case Running Time of the Boyer-Moore String Matching Algorithm</title>
	<abstract>It is shown how to modify the Boyer-Moore string matching algorithm so that its worst case running time is linear even when multiple occurrences of the  pattern are present in the text.</abstract>
	<conference>CACM September, 1979</conference>
	<authors>
	<author>Galil, Z.</author>
	</authors>
	<keywords>Computational complexity, linear time, worst case, string matching, periodicity</keywords>
	<version>3.74 4.40 5.25</version>
	<location>CA790903 DB January 14, 1980  10:27 AM</location>
	<citations>
	<citation>3162	4	3162</citation>
	<citation>2916	5	3162</citation>
	<citation>3162	5	3162</citation>
	<citation>3162	5	3162</citation>
	<citation>3162	5	3162</citation>
	</citations>
	</document>
	<document id= '3161'>
	<citations>
	<citation>3161	5	3161</citation>
	<citation>3161	5	3161</citation>
	<citation>3161	5	3161</citation>
	</citations>
	<title>An ACM Executive Committee Position on the Crisis  in Experimental Computer Science</title>
	<conference>CACM September, 1979</conference>
	<authors>
	<author>McCracken, D.D.</author>
	<author>Denning, P.J.</author>
	<author>Brandin, D.H.</author>
	</authors>
	<location>CA790902 DB January 14, 1980  10:19 AM</location>
	</document>
	<document id= '3160'>
	<title>Rejuvenating Experimental Computer Science</title>
	<abstract>This report is based on the results of an NSF sponsored workshop held in Wasington, D.C. on November 2, 1978.  The co-authors of the  report are: Gordon Bell, Digital Equipment Corporation; Bernard A. Galler, University of Michigan; Patricia Goldberg, IBM Corporation; John Hamblen, University of Missouri at Rolla; Elliot Pinson, Bell Telephone Laboratories; and Ivan Sutherland, California Institute of Technology.  Also participating in the workshop were representatives of NSF and other government agencies.  In addition to the authors, a number of other people have contributed to the contents of this report.  In preparation for the original workshop, all doctorate-granting  computer science departments in the nation were asked for comments and suggestions on the problems of experimental computer science. A version of the current report dated January 15 was circulated to these  departments and to a number of industrial and government groups for criticism. The editors and authors of this final version gratefully acknowledge the  contribution of a large number of other people at all stages in the preparation  of the report. $Note: Following this presentation of the report, there is a position paper on the crisis in experimental computer science written by the ACM Executive Committee.)</abstract>
	<conference>CACM September, 1979</conference>
	<authors>
	<author>Feldman, J.A.</author>
	<author>Sutherland, W.R.</author>
	</authors>
	<location>CA790901 DB January 14, 1980  10:05 AM</location>
	<citations>
	<citation>3160	5	3160</citation>
	<citation>3160	5	3160</citation>
	<citation>3160	5	3160</citation>
	</citations>
	</document>
	<document id= '3159'>
	<title>Further Remark on Stably Updating Mean and Standard Deviation Estimates</title>
	<conference>CACM August, 1979</conference>
	<authors>
	<author>Nelson, L.S.</author>
	</authors>
	<keywords>Mean, standard deviation</keywords>
	<version>5.5 5.19</version>
	<location>CA790805 DB January 14, 1980  9:38 AM</location>
	<citations>
	<citation>2731	4	3159</citation>
	<citation>3159	4	3159</citation>
	<citation>3159	4	3159</citation>
	<citation>3166	4	3159</citation>
	<citation>3166	4	3159</citation>
	<citation>3167	4	3159</citation>
	<citation>3167	4	3159</citation>
	<citation>2731	5	3159</citation>
	<citation>2799	5	3159</citation>
	<citation>3159	5	3159</citation>
	<citation>3159	5	3159</citation>
	<citation>3159	5	3159</citation>
	<citation>3166	5	3159</citation>
	<citation>1411	6	3159</citation>
	<citation>2731	6	3159</citation>
	<citation>2799	6	3159</citation>
	<citation>3159	6	3159</citation>
	<citation>3167	6	3159</citation>
	</citations>
	</document>
	<document id= '3158'>
	<title>Secure Personal Computing in an Insecure Network</title>
	<abstract>A method for implementing secure personal computing in a network with one or more central facilities is proposed.  The method employs a public-key encryption device and hardware keys.  Each user is responsible  for his own security and need not rely on the security of the central facility or the communication links.  A user can safely store confidential files in the central facility or transmit confidential  data to other users on the network.</abstract>
	<conference>CACM August, 1979</conference>
	<authors>
	<author>Denning, D.E.</author>
	</authors>
	<keywords>Personal computing, security, privacy, networks, public-key encryption</keywords>
	<version>2.12 6.20</version>
	<location>CA790804 DB January 14, 1980  9:26 AM</location>
	<citations>
	<citation>2840	4	3158</citation>
	<citation>2869	4	3158</citation>
	<citation>3021	4	3158</citation>
	<citation>3128	4	3158</citation>
	<citation>3158	4	3158</citation>
	<citation>3158	4	3158</citation>
	<citation>3158	4	3158</citation>
	<citation>2436	5	3158</citation>
	<citation>3038	5	3158</citation>
	<citation>3111	5	3158</citation>
	<citation>3158	5	3158</citation>
	<citation>3158	5	3158</citation>
	<citation>3158	5	3158</citation>
	</citations>
	</document>
	<document id= '3157'>
	<title>Proving Termination with Multiset Orderings</title>
	<abstract>A common tool for proving the termination of programs is the well-founded set, a set ordered in such a way as to admit no infinite descending sequences. The basic approach is to find a termination function  that maps the values of the program variables into some well-founded set, such that the value of the termination function is repeatedly reduced throughout the computation.  All too often, the termination functions required  are difficult to find and are of a complexity out of proportion to the program under consideration. Multisets (bags) over a given well-founded set S are sets that admit multiple occurrences of elements taken from S.  The given ordering on S induces an ordering on the finite multisets over S.  This multiset ordering is shown to be well-founded.  The multiset ordering enables the use of relatively simple and intuitive termination functions in otherwise difficult termination proofs.  In particular, the multiset ordering is used to prove the termination of production systems, programs defined in terms of sets of rewriting rules.</abstract>
	<conference>CACM August, 1979</conference>
	<authors>
	<author>Dershowitz, N.</author>
	<author>Manna, Z.</author>
	</authors>
	<keywords>Program correctness, program termination, program verification, well-founded orderings, well-founded sets, multisets, bags, production systems, term rewriting systems, tree replacement systems, reduction rules</keywords>
	<version>5.24 5.7</version>
	<location>CA790803 DB January 4, 1980  3:44 PM</location>
	<citations>
	<citation>3157	4	3157</citation>
	<citation>3014	5	3157</citation>
	<citation>3157	5	3157</citation>
	<citation>3157	5	3157</citation>
	<citation>3157	5	3157</citation>
	</citations>
	</document>
	<document id= '3156'>
	<title>Computing Connected Components on Parallel Computers</title>
	<abstract>We present a parallel algorithm which uses n2 processors to find the connected components of an undirected graph with n vertices in time O(log2n).  An O(log2n) time bound also can be achieved using only n$n/$log2n)) processors. The algorithm can be used to find the transitive closure of a symmetric Boolean matrix.  We assume that the processors have access to a common memory.  Simultaneous access to the same location is permitted for fetch instructions but not for store instructions.</abstract>
	<conference>CACM August, 1979</conference>
	<authors>
	<author>Hirschberg, D.S.</author>
	<author>Chandra, A.K.</author>
	<author>Sarwate, D.V.</author>
	</authors>
	<keywords>Graph theory, parallel processing, algorithms, transitive closure, connected component</keywords>
	<version>5.25 5.32 6.22</version>
	<location>CA790802 DB January 4, 1980  12:18 PM</location>
	<citations>
	<citation>3075	4	3156</citation>
	<citation>3156	4	3156</citation>
	<citation>3156	4	3156</citation>
	<citation>3156	4	3156</citation>
	<citation>2289	5	3156</citation>
	<citation>2973	5	3156</citation>
	<citation>3075	5	3156</citation>
	<citation>3156	5	3156</citation>
	<citation>3156	5	3156</citation>
	<citation>3156	5	3156</citation>
	</citations>
	</document>
	<document id= '3155'>
	<citations>
	<citation>1323	4	3155</citation>
	<citation>1358	4	3155</citation>
	<citation>1380	4	3155</citation>
	<citation>1665	4	3155</citation>
	<citation>1781	4	3155</citation>
	<citation>1787	4	3155</citation>
	<citation>1989	4	3155</citation>
	<citation>2112	4	3155</citation>
	<citation>2319	4	3155</citation>
	<citation>2480	4	3155</citation>
	<citation>2480	4	3155</citation>
	<citation>2534	4	3155</citation>
	<citation>2541	4	3155</citation>
	<citation>2594	4	3155</citation>
	<citation>2698	4	3155</citation>
	<citation>2709	4	3155</citation>
	<citation>2733	4	3155</citation>
	<citation>2738	4	3155</citation>
	<citation>2820	4	3155</citation>
	<citation>2867	4	3155</citation>
	<citation>2939	4	3155</citation>
	<citation>2972	4	3155</citation>
	<citation>3004	4	3155</citation>
	<citation>3030	4	3155</citation>
	<citation>3073	4	3155</citation>
	<citation>3148	4	3155</citation>
	<citation>3150	4	3155</citation>
	<citation>3155	4	3155</citation>
	<citation>3155	4	3155</citation>
	<citation>3155	4	3155</citation>
	<citation>3155	4	3155</citation>
	<citation>2204	5	3155</citation>
	<citation>2247	5	3155</citation>
	<citation>3073	5	3155</citation>
	<citation>3155	5	3155</citation>
	<citation>3155	5	3155</citation>
	<citation>3155	5	3155</citation>
	<citation>799	5	3155</citation>
	</citations>
	<title>The Paradigms of Programming</title>
	<conference>CACM August, 1979</conference>
	<authors>
	<author>Floyd, R.W.</author>
	</authors>
	<location>CA790801 DB January 4, 1980  11:44 AM</location>
	</document>
	<document id= '3154'>
	<title>Algorithm = Logic + Control</title>
	<abstract>An algorithm can be regarded as consisting of a logic component, which specifies the knowledge to be used in solving problems, and a control component, which determines the problem-solving strategies by means of which that knowledge is used.  The logic component determines the meaning of the algorithm whereas the control component only affects its efficiency.  The efficiency of an algorithm can often by improving the control component without changing the logic of the algorithm.  We argue that computer programs would be more often correct and more easily improved and modified if their logic and control aspects were identified and separated in the program text.</abstract>
	<conference>CACM July, 1979</conference>
	<authors>
	<author>Kowalski, R.</author>
	</authors>
	<keywords>Control language, logic programming, nonprocedural language, programming methodology, program specification, relational data structures</keywords>
	<version>3.64 4.20 4.30 5.21 5.24</version>
	<location>CA790705 DH September 24, 1979  5:08 PM</location>
	<citations>
	<citation>1989	4	3154</citation>
	<citation>2060	4	3154</citation>
	<citation>2155	4	3154</citation>
	<citation>2179	4	3154</citation>
	<citation>2406	4	3154</citation>
	<citation>2698	4	3154</citation>
	<citation>2710	4	3154</citation>
	<citation>2715	4	3154</citation>
	<citation>2716	4	3154</citation>
	<citation>2717	4	3154</citation>
	<citation>2718	4	3154</citation>
	<citation>2765	4	3154</citation>
	<citation>2817	4	3154</citation>
	<citation>2888	4	3154</citation>
	<citation>2901	4	3154</citation>
	<citation>2921	4	3154</citation>
	<citation>2957	4	3154</citation>
	<citation>2959	4	3154</citation>
	<citation>2965	4	3154</citation>
	<citation>3087	4	3154</citation>
	<citation>3154	4	3154</citation>
	<citation>3154	4	3154</citation>
	<citation>3154	4	3154</citation>
	<citation>2046	5	3154</citation>
	<citation>2110	5	3154</citation>
	<citation>3133	5	3154</citation>
	<citation>3154	5	3154</citation>
	<citation>3154	5	3154</citation>
	<citation>3154	5	3154</citation>
	<citation>3154	6	3154</citation>
	</citations>
	</document>
	<document id= '3153'>
	<title>The Control of Response Times in Multi-Class Systems by Memory Allocations</title>
	<abstract>The possibility of giving different quality of service to jobs of different classes by regulating their memory allocation is examined in the context of a paged computer system.  Two parameterized algorithms which partition the main memory between two classes of jobs are considered.  Initially, a closed system consisting of a process or and paging and file devices, with fixed numbers of jobs, is studied to determine optimal degrees of multiprogramming and the proportion of processor time devoted to each class.  Applying a decomposition approach and treating the closed system as a single server, the response times in an open system with external arrivals are studied.  The object is to investigate the effect of the memory alocation parameters on the expected response times under the two algorithms. Numerical solutions and economical lower bounds for the expected response times as functions of the control parameters are obtained.  A way of applying the results to systems with more than two job classes is indicated.</abstract>
	<conference>CACM July, 1979</conference>
	<authors>
	<author>Hine, J.H.</author>
	<author>Mitrani, I.</author>
	<author>Tsur, S.</author>
	</authors>
	<keywords>Queueing networks, paging, virtual memory, performance control</keywords>
	<version>4.32 8.1</version>
	<location>CA790704 DH August 22, 1979  3:32 PM</location>
	<citations>
	<citation>3016	4	3153</citation>
	<citation>3070	4	3153</citation>
	<citation>3153	4	3153</citation>
	<citation>3153	4	3153</citation>
	<citation>2741	5	3153</citation>
	<citation>2891	5	3153</citation>
	<citation>3153	5	3153</citation>
	<citation>3153	5	3153</citation>
	<citation>3153	5	3153</citation>
	</citations>
	</document>
	<document id= '3152'>
	<title>Storage Reorganization Techniques for Matrix Computation in a Paging Environment</title>
	<abstract>In order to multiply matrices while minimizing the number of page fetches required, it is often more efficient to reorganize the data into submatrix form and to use block multiplication  rather than to use the best known algorithms which leave the matrices stored in row-(or column-)oriented form.  An efficient method for accomplishing this reorganization is given.  This also makes possible the derivation of an asymptotically better bound for multiplication of matrices given in row-oriented form by adapting the technique of Strassen to the reorganized data.  The reorganization/block  multiplication scheme is shown to be advantageous for matrices and pages of realistic size; the Strassen adaptation is not.  The former scheme is also shown to be advantageous even if the transpose of one of the matrices is available at no additional cost.</abstract>
	<conference>CACM July, 1979</conference>
	<authors>
	<author>Fischer, P.C.</author>
	<author>Probert, R.L.</author>
	</authors>
	<keywords>Matrix multiplication, paging, virtual memory, data reorganization, pagination, transpose.</keywords>
	<version>4.34 5.14 5.25</version>
	<location>CA790703 DH August 22, 1979  2:29 PM</location>
	<citations>
	<citation>2365	4	3152</citation>
	<citation>2362	4	3152</citation>
	<citation>2582	4	3152</citation>
	<citation>3152	4	3152</citation>
	<citation>3152	4	3152</citation>
	<citation>1924	5	3152</citation>
	<citation>2365	5	3152</citation>
	<citation>3152	5	3152</citation>
	<citation>3152	5	3152</citation>
	<citation>3152	5	3152</citation>
	</citations>
	</document>
	<document id= '3151'>
	<title>An Optimal Real-Time Algorithm for Planar Convex Hulls</title>
	<abstract>An algorithm is described for the construction in real-time of the convex hull of a set of n points in the plane.   Using an appropriate data structure, the algorithm constructs the convex hull by successive updates, each taking time O(log n), thereby achieving a total processing time O(n log n).</abstract>
	<conference>CACM July, 1979</conference>
	<authors>
	<author>Preparata, F.P.</author>
	</authors>
	<keywords>Computational geometry, convex hull, planar set of points, real-time algorithms, on-line algorithms.</keywords>
	<version>4.49 5.25 5.32</version>
	<location>CA790702 DH August 22, 1979  2:07 PM</location>
	<citations>
	<citation>3151	4	3151</citation>
	<citation>2997	5	3151</citation>
	<citation>3151	5	3151</citation>
	<citation>3151	5	3151</citation>
	<citation>3151	5	3151</citation>
	</citations>
	</document>
	<document id= '3150'>
	<title>Beyond Programming Languages</title>
	<abstract>As computer technology matures, our growing ability to create large systems is  leading to basic changes in the nature of programming.  Current programming  language concepts will not be adequate for building and maintaining systems of the complexity called for by the tasks we attempt.  Just as high level languages enabled the programmer to escape from the intricacies of a machine's order code, higher level programming systems can provide the means to understand and manipulate complex systems and components.  In order to develop such systems, we need to shift our attention away from the detailed specification of algorithms, towards the description of the properties of the packages and objects with which we build.  This paper analyzes some of the shortcomings of programming languages as they now exist, and lays out some possible directions for future research.</abstract>
	<conference>CACM July, 1979</conference>
	<authors>
	<author>Winograd, T.</author>
	</authors>
	<keywords>Programming, programming languages, programming systems, systems development</keywords>
	<version>4.0 4.20 4.22 4.40</version>
	<location>CA790701 DH August 22, 1979  2:00 PM</location>
	<citations>
	<citation>2155	4	3150</citation>
	<citation>2294	4	3150</citation>
	<citation>2558	4	3150</citation>
	<citation>2837	4	3150</citation>
	<citation>2842	4	3150</citation>
	<citation>2945	4	3150</citation>
	<citation>3031	4	3150</citation>
	<citation>3077	4	3150</citation>
	<citation>3105	4	3150</citation>
	<citation>3148	4	3150</citation>
	<citation>3148	4	3150</citation>
	<citation>3150	4	3150</citation>
	<citation>3150	4	3150</citation>
	<citation>3150	4	3150</citation>
	<citation>3150	4	3150</citation>
	<citation>3150	4	3150</citation>
	<citation>3150	4	3150</citation>
	<citation>3150	4	3150</citation>
	<citation>3150	4	3150</citation>
	<citation>3150	4	3150</citation>
	<citation>3155	4	3150</citation>
	<citation>2060	5	3150</citation>
	<citation>2704	5	3150</citation>
	<citation>2842	5	3150</citation>
	<citation>2939	5	3150</citation>
	<citation>2941	5	3150</citation>
	<citation>2943	5	3150</citation>
	<citation>2940	5	3150</citation>
	<citation>3073	5	3150</citation>
	<citation>3148	5	3150</citation>
	<citation>3150	5	3150</citation>
	<citation>3150	5	3150</citation>
	<citation>3150	5	3150</citation>
	</citations>
	</document>
	<document id= '3149'>
	<title>The Cyclic Order Property of Vertices as an Aid in Scene Analysis</title>
	<abstract>A cyclic-order property is defined for bodies bounded by smooth-curved faces. The property is shown to be useful for analyzing pictures of such bodies, particularly when the line data extracted from the pictures are imperfect. This property augments previously known grammatical rules that determine the existence of three-dimensional bodies corresponding to given two-dimensional line-structure data.</abstract>
	<conference>CACM June, 1979</conference>
	<authors>
	<author>Shapira, R.</author>
	<author>Freeman, H.</author>
	</authors>
	<keywords>Scene analysis, cyclic order, artificial intelligence, three-dimensional reconstruction , picture processing, computer graphics, pattern recognition.</keywords>
	<version>3.2 3.6 8.2</version>
	<location>CA790605 DH August 22, 1979  1:36 PM</location>
	<citations>
	<citation>3149	5	3149</citation>
	<citation>3149	5	3149</citation>
	<citation>3149	5	3149</citation>
	</citations>
	</document>
	<document id= '3148'>
	<title>High Level Programming for Distributed Computing</title>
	<abstract>Programming for distributed and other loosely coupled systems is a problem of growing interest.  This paper describes an approach to distributed computing at the level of general purpose programming languages.  Based on primitive notions of module, message, and transaction key, the methodology is shown to be independent of particular languages and machines.  It appears to be useful for programming a wide range of tasks.  This is part of an ambitious program of development in advanced programming languages, and relations with other aspects of the project are also discussed.</abstract>
	<conference>CACM June, 1979</conference>
	<authors>
	<author>Feldman, J.A.</author>
	</authors>
	<keywords>Distributed computing, modules, messages, assertions</keywords>
	<version>4.22 4.32</version>
	<location>CA790604 DH August 21, 1979  4:31 PM</location>
	<citations>
	<citation>1957	4	3148</citation>
	<citation>2151	4	3148</citation>
	<citation>3031	4	3148</citation>
	<citation>3103	4	3148</citation>
	<citation>3105	4	3148</citation>
	<citation>3128	4	3148</citation>
	<citation>3148	4	3148</citation>
	<citation>3148	4	3148</citation>
	<citation>3148	4	3148</citation>
	<citation>3148	4	3148</citation>
	<citation>3148	4	3148</citation>
	<citation>3150	4	3148</citation>
	<citation>3150	4	3148</citation>
	<citation>3155	4	3148</citation>
	<citation>1860	5	3148</citation>
	<citation>2817	5	3148</citation>
	<citation>2865	5	3148</citation>
	<citation>2939	5	3148</citation>
	<citation>3073	5	3148</citation>
	<citation>3148	5	3148</citation>
	<citation>3148	5	3148</citation>
	<citation>3148	5	3148</citation>
	<citation>3150	5	3148</citation>
	<citation>2060	6	3148</citation>
	<citation>2704	6	3148</citation>
	<citation>2842	6	3148</citation>
	<citation>2939	6	3148</citation>
	<citation>2940	6	3148</citation>
	<citation>2941	6	3148</citation>
	<citation>2943	6	3148</citation>
	<citation>3073	6	3148</citation>
	<citation>3148	6	3148</citation>
	</citations>
	</document>
	<document id= '3147'>
	<title>A Model for Automating File and Program Design in Business Application Systems</title>
	<abstract>This paper discusses a model for finding an efficient implementation of a  business application system whose logical specifications have been determined in advance.  The model views file and program design as a problem of systematically coordinating the configurations of datasets and computations.  It uses a straight forward search technique to determine aggregations of computations, aggregations of datasets, device, organization, and key order for each data set, key order for  each computation, and access method  for each dataset-computation pair.  Although computational results are presented for a sample problem involving 54 computations and 49 datasets, the main point of the paper is that the underlying model works computationally an d is simple enough to be adapted to many file design situations.</abstract>
	<conference>CACM June, 1979</conference>
	<authors>
	<author>Alter, S.</author>
	</authors>
	<keywords>System design, automatic programming, search methods, system configurations, design choices</keywords>
	<version>4.12 4.22 4.6</version>
	<location>CA790603 DH August 21, 1979  4:25 PM</location>
	<citations>
	<citation>3147	4	3147</citation>
	<citation>2718	5	3147</citation>
	<citation>3147	5	3147</citation>
	<citation>3147	5	3147</citation>
	<citation>3147	5	3147</citation>
	</citations>
	</document>
	<document id= '3146'>
	<title>An Academic Program Providing Realistic Training in Software Engineering</title>
	<abstract>An academic program at Harvey Mudd College, called the Clinic program, brings projects from industry on  campus to be studied and solved by student teams.  The objective of the Clinic is to provide students, working as small teams under  careful faculty supervision, an opportunity to work on real world problems of sufficient magnitude and complexity.  Under this program, students can acquire essential skills of software engineering, such as team work, software project management, software design methodology, and communication skills, in a realistic environment. Sample software projects undertaken by the Clinic are described.  Experience so far has shown that the program is a viable transition from an academic to industrial world.</abstract>
	<conference>CACM June, 1979</conference>
	<authors>
	<author>Busenberg, S.N.</author>
	<author>Tam, W.C.</author>
	</authors>
	<keywords>Software engineering, software engineering education, software projects, student teams, software engineering skills</keywords>
	<version>1.52 4.0</version>
	<location>CA790602 DH August 21, 1979  4:04 PM</location>
	<citations>
	<citation>3146	5	3146</citation>
	<citation>3146	5	3146</citation>
	<citation>3146	5	3146</citation>
	</citations>
	</document>
	<document id= '3145'>
	<title>An Implementation of Structured Walk-Throughs in Teaching Cobol Programming</title>
	<abstract>The effectiveness of structured walk-throughs in teaching introductory Cobol programming was empirically assessed with a sample of 215 under-graduate business administration majors.  Cobol proficiency was measured by a final examination testing (a) knowledge of language rules, (b) ability to read and debug a program, and (c) the ability to write a program.  Analysis of multiple covariance was used to statistically adjust test scores for age and conditional reasoning scores. The findings provide empirical support for incorporating structured walk-throughs into the programming learning process more effectively develop student proficiency in writing Cobol programs.</abstract>
	<conference>CACM June, 1979</conference>
	<authors>
	<author>Lemos, R.S.</author>
	</authors>
	<keywords>Structured walk-throughs, Cobol programming, teaching of programming, testing programming proficiency</keywords>
	<version>3.51 1.52 2.42 4.22</version>
	<location>CA790601 DH August 21, 1979 3:19 PM</location>
	<citations>
	<citation>3145	4	3145</citation>
	<citation>2887	5	3145</citation>
	<citation>3145	5	3145</citation>
	<citation>3145	5	3145</citation>
	<citation>3145	5	3145</citation>
	</citations>
	</document>
	<document id= '3144'>
	<title>A Model for and DIscussion of Multi-Interpreter Systems</title>
	<abstract>A multi-interpreter system is a system in which programs execute by virtue of being interpreted by other programs, which themselves may either be interpreted (i.e. nested interpreters) or run directly on the host machine.  The model reveals the anatomy of interpreters and how these differ from procedures, and exhibits links to protection domains and multiprocessor architectures.</abstract>
	<conference>CACM May, 1979</conference>
	<authors>
	<author>Manthey, M.J.</author>
	</authors>
	<keywords>Interpreters, transfer-of-control, hierarchies</keywords>
	<version>4.13 3.65</version>
	<location>CA790505 DH August 21, 19791:14 PM</location>
	<citations>
	<citation>1458	4	3144</citation>
	<citation>1523	4	3144</citation>
	<citation>1603	4	3144</citation>
	<citation>1698	4	3144</citation>
	<citation>1747	4	3144</citation>
	<citation>1748	4	3144</citation>
	<citation>1854	4	3144</citation>
	<citation>1877	4	3144</citation>
	<citation>1960	4	3144</citation>
	<citation>2377	4	3144</citation>
	<citation>2378	4	3144</citation>
	<citation>2497	4	3144</citation>
	<citation>2558	4	3144</citation>
	<citation>2625	4	3144</citation>
	<citation>2626	4	3144</citation>
	<citation>2632	4	3144</citation>
	<citation>2748	4	3144</citation>
	<citation>2840	4	3144</citation>
	<citation>2865	4	3144</citation>
	<citation>2866	4	3144</citation>
	<citation>2868	4	3144</citation>
	<citation>2868	4	3144</citation>
	<citation>2870	4	3144</citation>
	<citation>2876	4	3144</citation>
	<citation>2898	4	3144</citation>
	<citation>2941	4	3144</citation>
	<citation>2972	4	3144</citation>
	<citation>3043	4	3144</citation>
	<citation>3105	4	3144</citation>
	<citation>3105	4	3144</citation>
	<citation>3105	4	3144</citation>
	<citation>3128	4	3144</citation>
	<citation>3144	4	3144</citation>
	<citation>3144	4	3144</citation>
	<citation>3144	4	3144</citation>
	<citation>3144	4	3144</citation>
	<citation>3144	4	3144</citation>
	<citation>3144	4	3144</citation>
	<citation>3144	4	3144</citation>
	<citation>1471	5	3144</citation>
	<citation>2298	5	3144</citation>
	<citation>2491	5	3144</citation>
	<citation>2597	5	3144</citation>
	<citation>2624	5	3144</citation>
	<citation>2625	5	3144</citation>
	<citation>2632	5	3144</citation>
	<citation>3144	5	3144</citation>
	<citation>3144	5	3144</citation>
	<citation>3144	5	3144</citation>
	</citations>
	</document>
	<document id= '3143'>
	<title>Reasoning About Arrays</title>
	<abstract>A variety of concepts, laws, and notations are presented which facilitate reasoning about arrays.  The basic concepts include intervals and their partitions, functional restriction, images, pointwise extension of relations, ordering, single-point variation of functions, various equivalence relations  for array values, and concatenation.  The effectiveness of these ideas is illustrated by informal descriptions of algorithms for binary search and merging, and by a short formal proof.</abstract>
	<conference>CACM May, 1979</conference>
	<authors>
	<author>Reynolds, J.C.</author>
	</authors>
	<keywords>Arrays, assertions, program proving, intervals, partitions, pointwise extension, ordering, concatenation, binary search, merging</keywords>
	<version>4.0 4.22 5.21 5.24</version>
	<location>CA790504 DH June 5, 1979  3:33 PM</location>
	<citations>
	<citation>2021	4	3143</citation>
	<citation>2222	4	3143</citation>
	<citation>2227	4	3143</citation>
	<citation>2315	4	3143</citation>
	<citation>2326	4	3143</citation>
	<citation>2356	4	3143</citation>
	<citation>2420	4	3143</citation>
	<citation>2470	4	3143</citation>
	<citation>2732	4	3143</citation>
	<citation>2865	4	3143</citation>
	<citation>2874	4	3143</citation>
	<citation>2896	4	3143</citation>
	<citation>2943	4	3143</citation>
	<citation>3014	4	3143</citation>
	<citation>3068	4	3143</citation>
	<citation>3077	4	3143</citation>
	<citation>3143	4	3143</citation>
	<citation>3143	4	3143</citation>
	<citation>1834	5	3143</citation>
	<citation>2227	5	3143</citation>
	<citation>3143	5	3143</citation>
	<citation>3143	5	3143</citation>
	<citation>3143	5	3143</citation>
	</citations>
	</document>
	<document id= '3142'>
	<title>Consumer Difficulties With Computerized Transactions:  An Empirical Investigation</title>
	<abstract>The prevalence with which errors may be encountered by the  end targets of a computerized process is assessed.  How many and what type of errors occur?  How easily are they corrected?  What is the reaction of consumers to errors-to a failure to correct them?  What can be learned by designers of large management packages from such data? Results show that with the present state of the art, approximately 40 percent of individuals (or households) having average contacts with different types of accounts experience one or more errors per year.  Eighty percent relate to billing.  Attempts to correct errors often turned out to be difficult and not always successful. There appears to be some conflict between computer-using organizations and their public.  Also the role of poor man agement packages including poor software is indicated.  While most management systems may be adequate, results of the survey raise concerns about the timeliness and the number of designs of very large linked program packages (as EFT for instance).</abstract>
	<conference>CACM May, 1979</conference>
	<authors>
	<author>Sterling, T.D.</author>
	</authors>
	<keywords>Errors, systems errors, billing errors, management systems, consumers</keywords>
	<version>2.0 2.1 2.12 2.2 3.50 3.52 3.55 4.19 4.6</version>
	<location>CA790503 DH June 5, 1979  3:21 PM</location>
	<citations>
	<citation>3142	4	3142</citation>
	<citation>3142	4	3142</citation>
	<citation>3179	4	3142</citation>
	<citation>3178	4	3142</citation>
	<citation>3182	4	3142</citation>
	<citation>3183	4	3142</citation>
	<citation>2583	5	3142</citation>
	<citation>3076	5	3142</citation>
	<citation>3142	5	3142</citation>
	<citation>3142	5	3142</citation>
	<citation>3142	5	3142</citation>
	<citation>3178	5	3142</citation>
	<citation>3076	6	3142</citation>
	<citation>3140	6	3142</citation>
	<citation>3142	6	3142</citation>
	<citation>3179	6	3142</citation>
	<citation>3180	6	3142</citation>
	<citation>3181	6	3142</citation>
	<citation>3182	6	3142</citation>
	</citations>
	</document>
	<document id= '3141'>
	<title>An Improved Algorithm for Decentralized Extrema-Finding in Circular Configurations of Processes</title>
	<abstract>This note presents an improvement to LeLann's algorithm for finding the largest (or smallest) of a set of uniquely numbered processes arranged in a circle, in which no central controller exists and the number of processes is not known a priori. This decentralized algorithm uses a technique of selective message extinction in order to achieve an average number of message passes of order (n log n) rather than O(n2).</abstract>
	<conference>CACM May, 1979</conference>
	<authors>
	<author>Chang, E.</author>
	<author>Roberts, R.</author>
	</authors>
	<keywords>Decentralized algorithms, distributed systems, operating systems</keywords>
	<version>4.32 4.35 5.25 5.32</version>
	<location>CA790502 DH June 5, 1979  2:35 PM</location>
	<citations>
	<citation>3141	5	3141</citation>
	<citation>3141	5	3141</citation>
	<citation>3141	5	3141</citation>
	</citations>
	</document>
	<document id= '3140'>
	<title>Social Processes and Proofs of Theorems and Programs</title>
	<abstract>It is argued that formal verifications of programs, no matter how obtained, will not play the same key role in the development of computer science and software engineering as proofs do in mathematics.  Furthermore the absence of continuity, the inevitability of change, and the complexity of specification of significantly many real programs make the form al verification process difficult to justify and manage.  It is felt that ease of formal verification should not dominate program language design.</abstract>
	<conference>CACM May, 1979</conference>
	<authors>
	<author>Millo, R.A.</author>
	<author>Lipton, R.J.</author>
	<author>Perlis, A.J.</author>
	</authors>
	<keywords>Formal mathematics, mathematical proofs, program verification, program specification</keywords>
	<version>2.10 4.6 5.24</version>
	<location>CA790501 DH June 5, 1979  2:23 PM</location>
	<citations>
	<citation>3140	5	3140</citation>
	<citation>3140	5	3140</citation>
	<citation>3140	5	3140</citation>
	<citation>3178	5	3140</citation>
	<citation>3076	6	3140</citation>
	<citation>3140	6	3140</citation>
	<citation>3142	6	3140</citation>
	<citation>3179	6	3140</citation>
	<citation>3180	6	3140</citation>
	<citation>3181	6	3140</citation>
	<citation>3182	6	3140</citation>
	</citations>
	</document>
	<document id= '3139'>
	<title>New Methods to Color the Vertices of a Graph</title>
	<abstract>This paper describes efficient new heuristic methods to color the vertices of a graph which rely upon the comparison of the degrees and structure of a graph.  A method is developed which is exact for bipartite graphs and is an important part of heuristic procedures to find maximal cliques in general graphs.  Finally an exact method is given which performs better than the Randall-Brown algorithm and is able to color larger graphs, and the new heuristic methods, the classical methods, and the exact method are compared.</abstract>
	<conference>CACM April, 1979</conference>
	<authors>
	<author>Brelaz, D.</author>
	</authors>
	<keywords>NP-complete, graph structure, balancing, graph coloring, scheduling, comparison of the methods</keywords>
	<version>5.25 5.32</version>
	<location>CA790405 DH June 5, 1979  2:05 PM</location>
	<citations>
	<citation>3139	5	3139</citation>
	<citation>3139	5	3139</citation>
	<citation>3139	5	3139</citation>
	</citations>
	</document>
	<document id= '3138'>
	<title>A Mathematical Programming Updating Method Using Modified Givens Transformations and Applied to LP Problems</title>
	<abstract>An efficient and numerically stable method is presented for the problem of updating an orthogonal decomposition of a matrix of column (or row) vectors. The fundamental idea is to add a column (or row) analogous to adding an additional row of data in a linear least squares problem. A column (or row) is dropped by a formal scaling with the imaginary unit,  -1, followed by least squares addition of the column (or row).  The elimination process for the procedure is successive ssive application of the Givens transformation in modified (more efficient) form.  These ideas are illustrated with an implementation of the revised simplex method.  The algorithm is a general purpose one that does not account for any particular structure or sparsity in the equations.  Some suggested computational tests for determining signs of various controlling parameters in the revised simplex algorithm are mentioned.  A simple means of constructing test cases and some sample computing times are presented.</abstract>
	<conference>CACM April, 1979</conference>
	<authors>
	<author>Hanson, R.J.</author>
	<author>Wisniewski, J.A.</author>
	</authors>
	<keywords>Linear programming, numerical linear algebra, modified Givens transformations, linear programming test cases</keywords>
	<version>5 5.4 5.41 5.1 5.14</version>
	<location>CA790404 DH May 21, 1979  2:06 PM</location>
	<citations>
	<citation>3099	4	3138</citation>
	<citation>3138	4	3138</citation>
	<citation>1313	5	3138</citation>
	<citation>3138	5	3138</citation>
	<citation>3138	5	3138</citation>
	<citation>3138	5	3138</citation>
	</citations>
	</document>
	<document id= '3137'>
	<title>A Methodology for the Design of Distributed Information Systems</title>
	<abstract>A macro model of a distributed information system in presented.  The model describes the major costs of using an information system from the perspective of the end-user.  The making evident the effect of various design and operating parameters on overall cost per transaction.  The technique is illustrated by application to the design of an interactive transaction processing system.</abstract>
	<conference>CACM April, 1979</conference>
	<authors>
	<author>Bucci, G.</author>
	<author>Streeter, D.N.</author>
	</authors>
	<keywords>Distributed processing, system design, cost minimization, distributed database, interactive computing, economic modeling, transaction processing</keywords>
	<version>4.32 4.33 6.2 8.1</version>
	<location>CA790403 DH May 21, 1979  1:25 PM</location>
	<citations>
	<citation>3137	5	3137</citation>
	<citation>3137	5	3137</citation>
	<citation>3137	5	3137</citation>
	</citations>
	</document>
	<document id= '3136'>
	<title>Price/Performance Patterns of U.S. Computer Systems</title>
	<abstract>Econometric models of the U.S. computer market have been developed to study  the relationships between system price and hardware performance.  Single measures of price/performance such as "Grosch's Law" are shown to be so over simplified as to be meaningless.  Multiple-regression models predicting system cost as a function of several hardware characteristics do, however, reveal a market dichotomy.  On one hand there exists a stable, price predictable market for larger, general purpose computer systems.  The other market is the developing one for small business computer systems, a market which is relatively unstable with low price predictability.</abstract>
	<conference>CACM April, 1979</conference>
	<authors>
	<author>Cale, E.G.</author>
	<author>Gremillion, L.L.</author>
	<author>McKenney, J.L.</author>
	</authors>
	<keywords>Price/performance, Grosch's law, U.S. computer market</keywords>
	<version>2.0 2.11 6.21</version>
	<location>CA790402 DH May 21, 1979  1:09 PM</location>
	<citations>
	<citation>3136	5	3136</citation>
	<citation>3136	5	3136</citation>
	<citation>3136	5	3136</citation>
	</citations>
	</document>
	<document id= '3135'>
	<title>Detection of Three-Dimensional Patterns of Atoms in Chemical Structures</title>
	<abstract>An algorithm for detecting occurrences of a three-dimensional pattern of objects within a larger structure is presented.  The search technique presented uses the geometric structure of the pattern to define characteristics demanded of candidates for matching. This is useful in cases where the properties of each atom, considered individually, do not adequately limit the number of sets of possible matchings. Several applications of this technique in the field of chemistry are: (1) in pharmacology: searching for a common constellation of atoms in molecules possessing similar biological activities; (2) in X-ray crystallography: fitting a structure or a structural fragment to a set of peaks in the electron-density distribution of a Fourier map; (3) in chemical documentation; retrieving from a file the structures containing specified substructures.</abstract>
	<conference>CACM April, 1979</conference>
	<authors>
	<author>Lesk, A.M.</author>
	</authors>
	<keywords>Three-dimensional pattern recognition, chemical structure search, information retrieval, crystal -structure analysis, drug analysis and design</keywords>
	<version>3.13 3.63 3.74</version>
	<location>CA790401 DH May 21, 1979  10:50 AM</location>
	<citations>
	<citation>2521	5	3135</citation>
	<citation>3135	5	3135</citation>
	<citation>3135	5	3135</citation>
	<citation>3135	5	3135</citation>
	<citation>2028	6	3135</citation>
	<citation>2031	6	3135</citation>
	<citation>3135	6	3135</citation>
	</citations>
	</document>
	<document id= '3134'>
	<title>The Use of Normal Multiplication Tables for Information Storage and Retrieval</title>
	<abstract>This paper describes a method for the organization and retrieval of attribute  based information systems, using the normal multiplication table as a directory for the information system.  Algorithms for the organization an d retrieval of information are described.  This method is particularly suitable for queries requesting a group of information items,  all of which possess a particular set of attributes (and possibly some other attributes as well).  Several examples are given; the results with respect to the number of disk accesses and disk space are compared to other common approaches.  Algorithms evaluating the appropriateness of the above approach to a given information system are described.  For a certain class of information systems, the normal multiplication table method yields far more rapid retrieval with a more economical space requirement than conventional systems.   Moreover this method incorporates an improved modification of the inverted  file technique.</abstract>
	<conference>CACM March, 1979</conference>
	<authors>
	<author>Motzkin, D.</author>
	</authors>
	<keywords>Information retrieval, inverted files, multiattribute retrieval, multilist file, normal multiplication table, queries, rapid retrieval, space economy</keywords>
	<version>3.70 3.73 3.79</version>
	<location>CA790305 DH May 21, 1979  9:46 AM</location>
	<citations>
	<citation>2140	4	3134</citation>
	<citation>2452	4	3134</citation>
	<citation>2575	4	3134</citation>
	<citation>2765	4	3134</citation>
	<citation>2901	4	3134</citation>
	<citation>2966	4	3134</citation>
	<citation>3134	4	3134</citation>
	<citation>3134	4	3134</citation>
	<citation>3134	4	3134</citation>
	<citation>3134	4	3134</citation>
	<citation>1976	5	3134</citation>
	<citation>2160	5	3134</citation>
	<citation>2524	5	3134</citation>
	<citation>2990	5	3134</citation>
	<citation>3134	5	3134</citation>
	<citation>3134	5	3134</citation>
	<citation>3134	5	3134</citation>
	</citations>
	</document>
	<document id= '3133'>
	<title>Logic and Semantic Networks</title>
	<abstract>An extended form of semantic network is defined, which can be regarded as a syntactic variant of the clausal form of logic. By virtue of its relationship with logic, the extended semantic network is provided with a precise semantics, inference rules, and a procedural interpretation.  On the other hand, by regarding semantic networks as an  abstract data structure for the representation of clauses, we provide a theorem-prover with a potentially useful indexing scheme and path-following strategy for guiding the search for a proof.</abstract>
	<conference>CACM March, 1979</conference>
	<authors>
	<author>Deliyanni, A.</author>
	<author>Kowalski, R.A.</author>
	</authors>
	<keywords>Logic, semantic networks, theorem-proving, indexing, resolution, deduction,  logic programming</keywords>
	<version>3.42 3.64 5.21</version>
	<location>CA790304 DH April 12, 1979  3:53 PM</location>
	<citations>
	<citation>3133	4	3133</citation>
	<citation>3133	5	3133</citation>
	<citation>3133	5	3133</citation>
	<citation>3133	5	3133</citation>
	<citation>3154	5	3133</citation>
	<citation>2046	6	3133</citation>
	<citation>2110	6	3133</citation>
	<citation>3133	6	3133</citation>
	</citations>
	</document>
	<document id= '3132'>
	<title>Experiments with Some Algorithms that Find Central Solutions for Pattern Classification</title>
	<abstract>In two-class pattern recognition, it is a standard technique to have an algorithm finding hyperplanes which separates the two classes in a linearly separable training set.  The traditional methods find a hyperplane which separates all points in the other, but such a hyperplane is not necessarily centered in the empty space between the two classes.  Since a central hyperplane does not favor one class or the other, it should have a lower error rate in classifying new points and is therefore better than a noncentral hyperplane.  Six algorithms for finding central hyperplanes are tested on three data sets.  Although frequently used practice, the modified relaxation algorithm is very poor.  Three algorithms which are defined in the paper are found to be quite good.</abstract>
	<conference>CACM March, 1979</conference>
	<authors>
	<author>Slagle, J.</author>
	</authors>
	<keywords>Pattern recognition, pattern classification, linear discriminants, central hyperplanes, centering, centrality criteria, dead zone, hyperplane, linearly separable, relaxation algorithm, accelerated relaxation</keywords>
	<version>3.62 3.63</version>
	<location>CA790303 DH April 12, 1979  3:20 PM</location>
	<citations>
	<citation>3132	4	3132</citation>
	<citation>2215	5	3132</citation>
	<citation>3132	5	3132</citation>
	<citation>3132	5	3132</citation>
	<citation>3132	5	3132</citation>
	</citations>
	</document>
	<document id= '3131'>
	<title>FOCUS Microcomputer Number System</title>
	<abstract>FOCUS is a number system and supporting computational algorithms especially useful for microcomputer control and other signal processing applications.  FOCUS has the wide-ranging character of floating-point numbers with a uniformity of state distributions that give FOCUS better than a twofold accuracy advantage over an equal word length floating-point system.  FOCUS computations are typically five times faster than single precision fixed-point or integer arithmetic for a mixture of operations, comparable in speed with hardware arithmetic for many applications.  Algorithms for 8-bit and 16-bit implementations of FOCUS are included.</abstract>
	<conference>CACM March, 1979</conference>
	<authors>
	<author>Edgar, A.D.</author>
	<author>Lee, S.C.</author>
	</authors>
	<keywords>Number representation, logarithmic arithmetic, computational speed, computational accuracy, microcomputer applications</keywords>
	<version>3.24 3.80 4.0 4.22 5.11</version>
	<location>CA790302 DH April 12, 1979  11:12 AM</location>
	<citations>
	<citation>3131	4	3131</citation>
	<citation>3131	4	3131</citation>
	<citation>1148	5	3131</citation>
	<citation>3131	5	3131</citation>
	<citation>3131	5	3131</citation>
	<citation>3131	5	3131</citation>
	<citation>893	5	3131</citation>
	</citations>
	</document>
	<document id= '3130'>
	<title>CURRICULUM '78 - Recommendations for the Undergraduate Program in Computer Science</title>
	<abstract>Contained in this report are the recommendations for the undergraduate degree program in Computer Science of the Curriculum Committee on Computer Science (C3S) of the Association for Computing Machinery (ACM).   The core curriculum common to all computer science undergraduate programs is presented in terms of elementary level topics and courses, and intermediate level courses. Elective courses, used to round out an undergraduate program, are then discussed, and the entire program including the computer science component and other material is presented.  Issues related to undergraduate computer science education, such as service courses, supporting areas, continuing education, facilities, staff, and articulation are presented.</abstract>
	<conference>CACM March, 1979</conference>
	<authors>
	<author>Austing, R.H.</author>
	<author>Barnes, B.H.</author>
	<author>Bonnette, D.T.</author>
	<author>Engel, G.L.</author>
	<author>Stokes, G.</author>
	</authors>
	<keywords>Computer sciences courses, computer science curriculum, computer science education, computer science undergraduate degree programs, service courses, continuing education</keywords>
	<version>1.52</version>
	<location>CA790301 DH April 12, 1979  11:02 AM</location>
	<citations>
	<citation>1720	4	3130</citation>
	<citation>1927	4	3130</citation>
	<citation>2147	4	3130</citation>
	<citation>2163	4	3130</citation>
	<citation>2345	4	3130</citation>
	<citation>2478	4	3130</citation>
	<citation>2594	4	3130</citation>
	<citation>2852	4	3130</citation>
	<citation>2899	4	3130</citation>
	<citation>3130	4	3130</citation>
	<citation>3130	4	3130</citation>
	<citation>1771	5	3130</citation>
	<citation>3003	5	3130</citation>
	<citation>3130	5	3130</citation>
	<citation>3130	5	3130</citation>
	<citation>3130	5	3130</citation>
	</citations>
	</document>
	<document id= '3129'>
	<title>Optimal Storage Allocation for Serial Files</title>
	<abstract>A computer system uses several serial files.  The files reside on a  direct-access storage device in which storage space is limited.  Records are  added to the files either by jobs in batch processing mode, or by on-line  transactions. Each transaction (or job) generates a demand vector which  designates the space required in each file for record addition. Whenever one  file runs out of space, the system must be reorganized.  This paper considers  several criteria for best allocating storage space to the files.</abstract>
	<conference>CACM February, 1979</conference>
	<authors>
	<author>Mendelson, H.</author>
	<author>Pliskin, J.S.</author>
	<author>Yechiali, U.</author>
	</authors>
	<keywords>Serial files, storage allocation, reorganization, partitioned dataset</keywords>
	<version>3.5 3.7 4.33 4.6</version>
	<location>CA790208 DH April 12, 1979  10:34 AM</location>
	<citations>
	<citation>2816	4	3129</citation>
	<citation>3129	4	3129</citation>
	<citation>3129	4	3129</citation>
	<citation>2493	5	3129</citation>
	<citation>2816	5	3129</citation>
	<citation>3129	5	3129</citation>
	<citation>3129	5	3129</citation>
	<citation>3129	5	3129</citation>
	</citations>
	</document>
	<document id= '3128'>
	<title>Synchronization with Eventcounts and Sequencers</title>
	<abstract>Synchronization of concurrent processes requires controlling the relative  ordering of events in the processes. A new synchronization mechanism is proposed, using  abstract objects called eventcounts and sequencers, that allows processes to control the ordering of events directly, rather than using mutual exclusion to protect manipulations of shared variables that control ordering of events.  Direct control of ordering seems to simplify correctness arguments and also simplifies implementation in distributed systems.  The mechanism is defined formally, and then several examples of its use are given.  The relationship of the mechanism to protection mechanisms in the system is explained; in particular, eventcounts are shown to be applicable to situations where confinement of information matters.  An implementation of eventcount s and sequencers in a system with shared memory is described.</abstract>
	<conference>CACM February, 1979</conference>
	<authors>
	<author>Reed, D.P.</author>
	<author>Kanodia, R.K.</author>
	</authors>
	<keywords>Process synchronization, interprocess communication, distributed systems, security models, mutual exclusion, semaphores</keywords>
	<version>4.30 4.32</version>
	<location>CA790207 DH April 12, 1979  10:03 AM</location>
	<citations>
	<citation>2320	4	3128</citation>
	<citation>2597	4	3128</citation>
	<citation>2700	4	3128</citation>
	<citation>2777	4	3128</citation>
	<citation>2840	4	3128</citation>
	<citation>2851	4	3128</citation>
	<citation>2865	4	3128</citation>
	<citation>2866	4	3128</citation>
	<citation>2869	4	3128</citation>
	<citation>2895	4	3128</citation>
	<citation>2898	4	3128</citation>
	<citation>2912	4	3128</citation>
	<citation>2938	4	3128</citation>
	<citation>2945	4	3128</citation>
	<citation>2946	4	3128</citation>
	<citation>2946	4	3128</citation>
	<citation>2972	4	3128</citation>
	<citation>3043	4	3128</citation>
	<citation>3128	4	3128</citation>
	<citation>3128	4	3128</citation>
	<citation>3128	4	3128</citation>
	<citation>3128	4	3128</citation>
	<citation>3128	4	3128</citation>
	<citation>3128	4	3128</citation>
	<citation>3128	4	3128</citation>
	<citation>3128	4	3128</citation>
	<citation>3128	4	3128</citation>
	<citation>3144	4	3128</citation>
	<citation>3148	4	3128</citation>
	<citation>3158	4	3128</citation>
	<citation>2150	5	3128</citation>
	<citation>2376	5	3128</citation>
	<citation>2436	5	3128</citation>
	<citation>2597	5	3128</citation>
	<citation>2865	5	3128</citation>
	<citation>2866	5	3128</citation>
	<citation>2870	5	3128</citation>
	<citation>2912	5	3128</citation>
	<citation>3082	5	3128</citation>
	<citation>3128	5	3128</citation>
	<citation>3128	5	3128</citation>
	<citation>3128	5	3128</citation>
	</citations>
	</document>
	<document id= '3127'>
	<title>Thoth, a Portable Real-Time Operating System</title>
	<abstract>Thoth isa real-time operating system which is designed to be portable over a large set of machines.  It is currently running on two minicomputers with quite different architectures.  Both the system and application programs which use it are written in a high-level language. Because the system is implemented by the same software on different hardware, it has the same interface to user programs.  Hence, application programs which use Thoth are  highly portable.  Thoth encourages structuring programs as networks of communicating processes  by providing efficient interprocess communication primitives.</abstract>
	<conference>CACM February, 1979</conference>
	<authors>
	<author>Cheriton, D.R.</author>
	<author>Malcolm, M.A.</author>
	<author>Melen, L.A.</author>
	<author>Sager, G.R.</author>
	</authors>
	<keywords>Portability, real time, operating systems, minicomputer</keywords>
	<version>3.80 4.30 4.35</version>
	<location>CA790206 DH April 12, 1979  9:10 AM</location>
	<citations>
	<citation>2319	4	3127</citation>
	<citation>2378	4	3127</citation>
	<citation>2320	4	3127</citation>
	<citation>2632	4	3127</citation>
	<citation>2738	4	3127</citation>
	<citation>2740	4	3127</citation>
	<citation>2868	4	3127</citation>
	<citation>2928	4	3127</citation>
	<citation>3127	4	3127</citation>
	<citation>3127	4	3127</citation>
	<citation>2080	5	3127</citation>
	<citation>2277	5	3127</citation>
	<citation>3127	5	3127</citation>
	<citation>3127	5	3127</citation>
	<citation>3127	5	3127</citation>
	</citations>
	</document>
	<document id= '3126'>
	<title>Comments on Perfect Hashing Functions: A Single Probe Retrieving  Method for Static Sets</title>
	<conference>CACM February, 1979</conference>
	<authors>
	<author>Anderson, M.G.</author>
	</authors>
	<keywords>Hashing, hashing methods, hash coding, direct addressing, identifier- to-address transformations, perfect hashing functions, perfect hash coding, reduction, retrieving, scatter storage, searching</keywords>
	<version>3.7 3.74 4.34</version>
	<location>CA790205 DH April 10, 1979  4:25 PM</location>
	<citations>
	<citation>3041	4	3126</citation>
	<citation>3126	4	3126</citation>
	<citation>3176	4	3126</citation>
	<citation>2905	5	3126</citation>
	<citation>3126	5	3126</citation>
	<citation>3126	5	3126</citation>
	<citation>3126	5	3126</citation>
	</citations>
	</document>
	<document id= '3125'>
	<title>Global Optimization by Suppression of Partial Redundancies</title>
	<abstract>The elimination of redundant computations and the moving of invariant computations out of loops are often done separately, with invariants  moved outward loop by loop.  We propose to do both at once and to move each expression directly to the entrance of the outermost loop in which it is invariant.  This is done by solving a more general problem, i.e. the elimination of computations performed twice on a given execution path.  Such computations are termed partially redundant.  Moreover, the algorithm does not require any graphical information or restrictions on the shape of the program graph. Testing this algorithm has shown that its execution cost is nearly linear with the size of the program, and that it leads to a smaller optimizer that requires less execution time.</abstract>
	<conference>CACM February, 1979</conference>
	<authors>
	<author>Morel, E.</author>
	<author>Renvoise, C.</author>
	</authors>
	<keywords>Optimizer, optimization, compiler, compilation, redundancy elimination, invariant  computation elimination, partial redundancy, data flow analysis, Boolean systems</keywords>
	<version>4.12 5.21 5.24</version>
	<location>CA790204 DH April 10, 1979  4:19 PM</location>
	<citations>
	<citation>3125	5	3125</citation>
	<citation>3125	5	3125</citation>
	<citation>3125	5	3125</citation>
	</citations>
	</document>
	<document id= '3124'>
	<title>Recursive Data Structures in APL</title>
	<abstract>A mathematical study of three approaches for defining nested arrays in APL is presented.  Theorems exhibiting the relationships between the definitional systems are given and illustrated through graph representations.  One of the approaches is used to define an APL array to be a recursive data structure equivalent to a tree structure in which all data is stored at the leaves as homogeneous arrays of numbers and characters.  An extension of APL is proposed that includes new primitive functions to manipulate the nesting level of arrays and new operators to assist in the construction of data-driven algorithms.</abstract>
	<conference>CACM February, 1979</conference>
	<authors>
	<author>Jenkins, M.A.</author>
	</authors>
	<keywords>Nested arrays, APL arrays, recursive data structures, trees, data-driven algorithms, theory of arrays</keywords>
	<version>4.22 5.29</version>
	<location>CA790203 DH April 10, 1979  3:41 PM</location>
	<citations>
	<citation>2060	4	3124</citation>
	<citation>2294	4	3124</citation>
	<citation>2470	4	3124</citation>
	<citation>3124	4	3124</citation>
	<citation>1469	5	3124</citation>
	<citation>3124	5	3124</citation>
	<citation>3124	5	3124</citation>
	<citation>3124	5	3124</citation>
	</citations>
	</document>
	<document id= '3123'>
	<title>Employment Characteristics of Doctoral Level Computer Scientists</title>
	<conference>CACM February, 1979</conference>
	<authors>
	<author>Fairley, R.E.</author>
	</authors>
	<keywords>Employment characteristics, manpower utilization,occupational trends</keywords>
	<version>1.5 2.1 2.2</version>
	<location>CA790202 DH April 10, 1979  2:13 PM</location>
	<citations>
	<citation>2962	4	3123</citation>
	<citation>3022	4	3123</citation>
	<citation>3122	4	3123</citation>
	<citation>3122	4	3123</citation>
	<citation>3123	4	3123</citation>
	<citation>3123	4	3123</citation>
	<citation>3123	4	3123</citation>
	<citation>3123	4	3123</citation>
	<citation>2823	5	3123</citation>
	<citation>2861	5	3123</citation>
	<citation>2962	5	3123</citation>
	<citation>3022	5	3123</citation>
	<citation>3123	5	3123</citation>
	<citation>3123	5	3123</citation>
	<citation>3123	5	3123</citation>
	</citations>
	</document>
	<document id= '3122'>
	<title>Production and Employment of Ph.D.'s in Computer Science - 1977 and 1978</title>
	<conference>CACM February, 1979</conference>
	<authors>
	<author>Taulbee, O.E.</author>
	<author>Conte, S.D.</author>
	</authors>
	<keywords>Computer science, production of Ph.D.'s, employment, students</keywords>
	<version>1.3 1.52 1.53 1.59</version>
	<location>CA790201 DH April 10, 1979  2:09 PM</location>
	<citations>
	<citation>2962	4	3122</citation>
	<citation>3122	4	3122</citation>
	<citation>3122	4	3122</citation>
	<citation>3123	4	3122</citation>
	<citation>3123	4	3122</citation>
	<citation>2861	5	3122</citation>
	<citation>2962	5	3122</citation>
	<citation>3122	5	3122</citation>
	<citation>3122	5	3122</citation>
	<citation>3122	5	3122</citation>
	</citations>
	</document>
	<document id= '3121'>
	<title>Syntactic Source to Source Transforms and Program Manipulation</title>
	<abstract>Syntactic transforms are the source to source program transformations which preserve the history of computation, and thus do not modify the execution time.  Combined with a small number of primitive semantic transforms, they provide a powerful tool for program manipulation.  A catalogue of syntactic transforms, and its use for solution of a system of program equations, is given.  Examples of derivation of more complex source to source transformations are also presented.  Two case studies illustrate the way in which syntactic  and semantic source to source transformations may be used for development of clear, simple, and reasonably efficient programs.</abstract>
	<conference>CACM January, 1979</conference>
	<authors>
	<author>Arsac, J.J.</author>
	</authors>
	<keywords>Structured programming, program transforms, control structures</keywords>
	<version>4.2 5.24 5.25</version>
	<location>CA790106 DH April 10, 1979  1:57 PM</location>
	<citations>
	<citation>1175	4	3121</citation>
	<citation>1919	4	3121</citation>
	<citation>1919	4	3121</citation>
	<citation>1969	4	3121</citation>
	<citation>1997	4	3121</citation>
	<citation>2191	4	3121</citation>
	<citation>2191	4	3121</citation>
	<citation>2388	4	3121</citation>
	<citation>2388	4	3121</citation>
	<citation>2679	4	3121</citation>
	<citation>2709	4	3121</citation>
	<citation>2783	4	3121</citation>
	<citation>2784	4	3121</citation>
	<citation>2821	4	3121</citation>
	<citation>3004	4	3121</citation>
	<citation>3054	4	3121</citation>
	<citation>3054	4	3121</citation>
	<citation>3121	4	3121</citation>
	<citation>3121	4	3121</citation>
	<citation>3121	4	3121</citation>
	<citation>3121	4	3121</citation>
	<citation>3121	4	3121</citation>
	<citation>864	4	3121</citation>
	<citation>1312	5	3121</citation>
	<citation>308	5	3121</citation>
	<citation>309	5	3121</citation>
	<citation>2456	5	3121</citation>
	<citation>2709	5	3121</citation>
	<citation>3121	5	3121</citation>
	<citation>3121	5	3121</citation>
	<citation>3121	5	3121</citation>
	</citations>
	</document>
	<document id= '3120'>
	<title>An Event-Driven Compiling Technique</title>
	<abstract>Due to the linear structure of source text, difficulties may arise in a  one-pass compilation process.  These difficulties occur when an entity cannot be processed because of a forward reference to information only obtainable from subsequent entities.  Classic solutions ask for data structures appropriate for each case.  A technique is presented here which uses instead control structures, namely events and processes.  The work of the compiler-writer becomes easier both conceptually and in practice because he can forget these problems at the outset and he avoids special processing for each problem. This technique has been applied to the construction of an Algol 68 compiler.  Three examples from that implementation are described and discussed here.</abstract>
	<conference>CACM January, 1979</conference>
	<authors>
	<author>Banatre, J.P.</author>
	<author>Routeau, J.P.</author>
	<author>Trilling, L.</author>
	</authors>
	<keywords>Compiling technique, one-pass compilation, semantic analysis, event, process, parallelism categories--4.12</keywords>
	<location>CA790105 DH April 10, 1979  12:26 PM</location>
	<citations>
	<citation>3120	5	3120</citation>
	<citation>3120	5	3120</citation>
	<citation>3120	5	3120</citation>
	</citations>
	</document>
	<document id= '3119'>
	<title>The Impact of Distributions and Disciplines on Multiple Processor Systems</title>
	<abstract>Simple queueing models are used to study the performance tradeoffs of  multiple processor systems.  Issues considered include the impact of CPU service disciplines and distributions, level of multiprogramming, multitasking, and job priorities.</abstract>
	<conference>CACM January, 1979</conference>
	<authors>
	<author>Sauer, C.H.</author>
	<author>Chandy, K.M.</author>
	</authors>
	<keywords>Multiprogramming, multiprocessing, scheduling disciplines, performance evaluation, queueing models</keywords>
	<version>4.32 4.6 6.2 8.1</version>
	<location>CA790104 DH April 10, 1979  12:10 PM</location>
	<citations>
	<citation>2571	4	3119</citation>
	<citation>2918	4	3119</citation>
	<citation>3032	4	3119</citation>
	<citation>3072	4	3119</citation>
	<citation>3119	4	3119</citation>
	<citation>3119	4	3119</citation>
	<citation>3119	4	3119</citation>
	<citation>3119	4	3119</citation>
	<citation>2245	5	3119</citation>
	<citation>2798	5	3119</citation>
	<citation>2849	5	3119</citation>
	<citation>2859	5	3119</citation>
	<citation>3119	5	3119</citation>
	<citation>3119	5	3119</citation>
	<citation>3119	5	3119</citation>
	</citations>
	</document>
	<document id= '3118'>
	<title>Permutation of Data Blocks in a Bubble Memory</title>
	<abstract>A common internal organization of bubble memories consists of a set of (minor)  loops, connected through another (major) loop.  The problem of obtaining any  give n permutation of the minor loop contents in minimum time is studied in this paper.  A lower bound to the number of steps required buy a permutation algorithm is derived, and the class of optimum algorithms is  identified.</abstract>
	<conference>CACM January, 1979</conference>
	<authors>
	<author>Bongiovanni, G.C.</author>
	<author>Luccio, F.</author>
	</authors>
	<keywords>Bubble memory, memory loops, permutation algorithm, data block shift</keywords>
	<version>4.34 5.30 6.34</version>
	<location>CA790103 DH April 10, 1979  12:04 PM</location>
	<citations>
	<citation>3118	5	3118</citation>
	<citation>3118	5	3118</citation>
	<citation>3118	5	3118</citation>
	</citations>
	</document>
	<document id= '3117'>
	<title>The Impact and Use of Computer Technology by the Police</title>
	<abstract>Over the past decade there has been a significant growth in the use of computer technology by U.S. police departments.  This growth, however, has been at a slower rate than predicted in the early 1970's.  Further, when computer applications extend beyond "routine" uses to "nonroutine" efforts, such as resource allocation or computer-aided-dispatch systems where the machine begins to become a tool for decision making, strategic planning and person/machine interaction, the results of the technology to date have been mixed.  This paper reports on case studies and surveys which provinsights  on the implementation and impact of police computer technology and the relationship of this technology to law enforcement and society.</abstract>
	<conference>CACM January, 1979</conference>
	<authors>
	<author>Colton, K.W.</author>
	</authors>
	<keywords>Computer technology, innovation, police resource allocation, police command  and control, computer aided dispatch, law enforcement, technology transfer</keywords>
	<version>2.1 2.11 2.12 2.45 3.33 3.39</version>
	<location>CA790102 DH April 10, 1979  11:32 AM</location>
	<citations>
	<citation>3117	4	3117</citation>
	<citation>3090	5	3117</citation>
	<citation>3117	5	3117</citation>
	<citation>3117	5	3117</citation>
	<citation>3117	5	3117</citation>
	</citations>
	</document>
	<document id= '3116'>
	<title>Interference Detection Among Solids and Surfaces</title>
	<abstract>In many industrial environments it is necessary to determine whether r there is interference among components.  There are many potential interference problems in products made up of assemblies of components  and in product manufacturing and testing.  Typically, drawings are used in an attempt to detect such unwanted interferences, but the two-dimensional, static drafting medium does not always show interferences among three-dimensional, moving parts.  This paper  presents a computer representation for solids and surfaces and algorithms which carry out interference checking among objects so represented.   Objects are represented as polyhedra or as piecewise planar surfaces.  Two types of interference checking are discussed: detection of intersections among objects in fixed positions and detection of collisions among objects moving along specified trajectories.</abstract>
	<conference>CACM January, 1979</conference>
	<authors>
	<author>Boyse, J.W.</author>
	</authors>
	<keywords>Interference checking, intersection detection, collision detection, solid representation, polyhedral representation, graphics, polygons, surfaces</keywords>
	<version>3.2 8.2</version>
	<location>CA790101 DH April 10, 1979  10:50 AM</location>
	<citations>
	<citation>2827	4	3116</citation>
	<citation>3116	4	3116</citation>
	<citation>2771	5	3116</citation>
	<citation>3116	5	3116</citation>
	<citation>3116	5	3116</citation>
	<citation>3116	5	3116</citation>
	<citation>3172	5	3116</citation>
	<citation>3116	6	3116</citation>
	</citations>
	</document>
	<document id= '3115'>
	<title>Orderly Enumeration of Nonsingular Binary Matrices Applied to Text Encryption</title>
	<abstract>Nonsingular binary matrices of order N, i.e., nonsingular over the field {0, 1}, and an initial  segment of the natural numbers are placed in one-to-one correspondence.  Each natural number corresponds  to two intermediate vectors.  These vectors are mapped into a nonsingular binary matrix.  Examples of  complete enumeration of all 2 x 2 and 3 x 3 nonsingular binary matrices were produced by mapping the  intermediate vectors to the matrices.  The mapping has application to the Vernam encipherment method  using pseudorandom number sequences.  A bit string formed form bytes of text of a data encryption key  can be used as a representation of a natural number.  This natural number is transformed to a nonsingular  binary matrix.  key leverage is obtained by using the matrix as a"seed" in a shift register sequence  pseudorandom number generator.</abstract>
	<conference>CACM April, 1978</conference>
	<authors>
	<author>Payne, W.H.</author>
	<author>McMillen, K.L.</author>
	</authors>
	<keywords>Binary matrices, combinatorics, combinations, nonsingular matrices, encryption, Vernam, pseudorandom  numbers, feedback shiftregister sequences, random numbers.</keywords>
	<version>3.7 5.3</version>
	<location>CA780401 DH February 27, 1979  11:05 AM</location>
	<citations>
	<citation>2269	4	3115</citation>
	<citation>2466	4	3115</citation>
	<citation>2690	4	3115</citation>
	<citation>2834	4	3115</citation>
	<citation>2834	4	3115</citation>
	<citation>2834	4	3115</citation>
	<citation>2853	4	3115</citation>
	<citation>2884	4	3115</citation>
	<citation>2908	4	3115</citation>
	<citation>3115	4	3115</citation>
	<citation>3115	4	3115</citation>
	<citation>3115	4	3115</citation>
	<citation>3115	4	3115</citation>
	<citation>3115	4	3115</citation>
	<citation>3115	4	3115</citation>
	<citation>3115	4	3115</citation>
	<citation>907	5	3115</citation>
	<citation>2045	5	3115</citation>
	<citation>2417	5	3115</citation>
	<citation>2466	5	3115</citation>
	<citation>2884	5	3115</citation>
	<citation>579	5	3115</citation>
	<citation>3115	5	3115</citation>
	<citation>3115	5	3115</citation>
	<citation>3115	5	3115</citation>
	<citation>785	5	3115</citation>
	</citations>
	</document>
	<document id= '3114'>
	<title>A Technique for Isolating Differences Between Files</title>
	<abstract>A simple algorithm is described for isolating the differences between two files.  One application  is the comparing of two versions of a source program or other file in order to display all differences.   The algorithm isolates differences in a way that corresponds closely to our intuitive notion of difference,  is easy to implement, and is computationally efficient, with time linear in the file length.  For most  applications the algorithm isolates differences similar to those isolated by the longest common subsequence.   Another application of this algorithm merges files containing independently generated changes into a  single file.  The algorithm can also be used to generate efficient encodings of a file in the form of  the differences between itself and a given "datum" file, permitting reconstruction of the original file  from the difference and datum files.</abstract>
	<conference>CACM April, 1978</conference>
	<authors>
	<author>Heckel, P.</author>
	</authors>
	<keywords>Difference isolation, word processing, text editing, program maintenance, hash coding, file compression,  bandwidth compression, longest common subsequence, file comparison, molecular evolution</keywords>
	<version>3.63 3.73 3.81 4.43</version>
	<location>CA780402 DH February 27, 1979  10:52 AM</location>
	<citations>
	<citation>2299	4	3114</citation>
	<citation>2501	4	3114</citation>
	<citation>2629	4	3114</citation>
	<citation>2915	4	3114</citation>
	<citation>2963	4	3114</citation>
	<citation>3114	4	3114</citation>
	<citation>3114	4	3114</citation>
	<citation>3114	4	3114</citation>
	<citation>1502	5	3114</citation>
	<citation>2499	5	3114</citation>
	<citation>2745	5	3114</citation>
	<citation>3114	5	3114</citation>
	<citation>3114	5	3114</citation>
	<citation>3114	5	3114</citation>
	</citations>
	</document>
	<document id= '3113'>
	<title>Optimal Conversion of Extended-Entry Decision Tables with General Cost Criteria</title>
	<abstract>A general dynamic programming algorithm for converting limited, extended, or mixed entry decision  tables to optimal decision trees is presented which can take into account rule frequencies or probabilities,  minimum time and/or space cost criteria, common action sets, compressed rules and ELSE rules, sequencing  constraints on condition tests, excludable combinations of conditions, certain ambiguities, and interrupted  rule masking.</abstract>
	<conference>CACM April, 1978</conference>
	<authors>
	<author>Lew, A.</author>
	</authors>
	<keywords>Decision table, optimal programs, dynamic programming</keywords>
	<version>3.59 4.19 4.29 4.49 5.39 5.42 8.3</version>
	<location>CA780403 DH February 26, 1979  4:37 PM</location>
	<citations>
	<citation>1684	4	3113</citation>
	<citation>2053	4	3113</citation>
	<citation>2220	4	3113</citation>
	<citation>2273	4	3113</citation>
	<citation>2453	4	3113</citation>
	<citation>2598	4	3113</citation>
	<citation>2598	4	3113</citation>
	<citation>2691	4	3113</citation>
	<citation>2726	4	3113</citation>
	<citation>2726	4	3113</citation>
	<citation>2845	4	3113</citation>
	<citation>2856	4	3113</citation>
	<citation>2856	4	3113</citation>
	<citation>3033	4	3113</citation>
	<citation>3113	4	3113</citation>
	<citation>3113	4	3113</citation>
	<citation>3113	4	3113</citation>
	<citation>3113	4	3113</citation>
	<citation>3113	4	3113</citation>
	<citation>1354	5	3113</citation>
	<citation>2263	5	3113</citation>
	<citation>2598	5	3113</citation>
	<citation>2691	5	3113</citation>
	<citation>2856	5	3113</citation>
	<citation>3113	5	3113</citation>
	<citation>3113	5	3113</citation>
	<citation>3113	5	3113</citation>
	</citations>
	</document>
	<document id= '3112'>
	<title>List Processing in Real Time on a Serial Computer</title>
	<abstract>A real-time list processing system is one in which the time required by the elementary list  operations (e.g. CONS, CAR, CDR, RPLACA, REPLACD, EQ, and ATOM in LISP) is bounded by a (small) constant.   Classical implementations of list processing systems lack this property because allocating a list cell  from the heap may cause a garbage collection, which process requires time proportional to the heap size  to finish.  A real-time list processing system is presented which continuously reclaims garbage, including  directed cycles, while linearizing and compacting the accessible cells into contiguous locations to avoid  fragmenting the free storage pool.  The program is small and requires no time-sharing interrupts, making  it suitable for microcode.  Finally, the system requires the same average time, and not more than twice  the space, of a classical implementation, and those space requirements can be reduced to approximately  classical proportions by compact list representation.  Arrays of different sizes, a program stack, and  hash linking are simple extensions to our system, and reference counting is found to be inferior for  many applications.</abstract>
	<conference>CACM April, 1978</conference>
	<authors>
	<author>Baker, H.G.</author>
	</authors>
	<keywords>Real-time, compacting,garbage collection, list processing, virtual memory, file or database management,  storage management, storage allocation, LISP, CDR-coding, reference counting.</keywords>
	<version>3.50 3.60 3.73 3.80 4.13 4.22 4.32 4.33 4.35 4.49</version>
	<location>CA780404 DH February 26,1979  4:32 PM</location>
	<citations>
	<citation>1024	4	3112</citation>
	<citation>1050	4	3112</citation>
	<citation>1051	4	3112</citation>
	<citation>1098	4	3112</citation>
	<citation>1214	4	3112</citation>
	<citation>1380	4	3112</citation>
	<citation>1388	4	3112</citation>
	<citation>1393	4	3112</citation>
	<citation>1393	4	3112</citation>
	<citation>1485	4	3112</citation>
	<citation>1487	4	3112</citation>
	<citation>1541	4	3112</citation>
	<citation>1549	4	3112</citation>
	<citation>1549	4	3112</citation>
	<citation>1570	4	3112</citation>
	<citation>1846	4	3112</citation>
	<citation>1878	4	3112</citation>
	<citation>1946	4	3112</citation>
	<citation>1957	4	3112</citation>
	<citation>1972	4	3112</citation>
	<citation>2023	4	3112</citation>
	<citation>2060	4	3112</citation>
	<citation>2156	4	3112</citation>
	<citation>2156	4	3112</citation>
	<citation>2168	4	3112</citation>
	<citation>2168	4	3112</citation>
	<citation>2218	4	3112</citation>
	<citation>2361	4	3112</citation>
	<citation>2438	4	3112</citation>
	<citation>2513	4	3112</citation>
	<citation>2625	4	3112</citation>
	<citation>2723	4	3112</citation>
	<citation>2723	4	3112</citation>
	<citation>2736	4	3112</citation>
	<citation>2736	4	3112</citation>
	<citation>2833	4	3112</citation>
	<citation>2833	4	3112</citation>
	<citation>2838	4	3112</citation>
	<citation>2845	4	3112</citation>
	<citation>2855	4	3112</citation>
	<citation>2855	4	3112</citation>
	<citation>2855	4	3112</citation>
	<citation>2857	4	3112</citation>
	<citation>2896	4	3112</citation>
	<citation>2922	4	3112</citation>
	<citation>2944	4	3112</citation>
	<citation>3039	4	3112</citation>
	<citation>3074	4	3112</citation>
	<citation>3074	4	3112</citation>
	<citation>3074	4	3112</citation>
	<citation>3081	4	3112</citation>
	<citation>3101	4	3112</citation>
	<citation>3106	4	3112</citation>
	<citation>3112	4	3112</citation>
	<citation>3112	4	3112</citation>
	<citation>3112	4	3112</citation>
	<citation>3112	4	3112</citation>
	<citation>3112	4	3112</citation>
	<citation>3112	4	3112</citation>
	<citation>3112	4	3112</citation>
	<citation>3112	4	3112</citation>
	<citation>3112	4	3112</citation>
	<citation>3112	4	3112</citation>
	<citation>627	4	3112</citation>
	<citation>106	5	3112</citation>
	<citation>1380	5	3112</citation>
	<citation>1826	5	3112</citation>
	<citation>1972	5	3112</citation>
	<citation>2438	5	3112</citation>
	<citation>2723	5	3112</citation>
	<citation>2736	5	3112</citation>
	<citation>2833	5	3112</citation>
	<citation>2838	5	3112</citation>
	<citation>3112	5	3112</citation>
	<citation>3112	5	3112</citation>
	<citation>3112	5	3112</citation>
	<citation>731	5	3112</citation>
	</citations>
	</document>
	<document id= '3111'>
	<title>Secure Communications Over Insecure Channels</title>
	<abstract>According to traditional conceptions of cryptographic security, it is necessary to transmit  a key, by secret means, before encrypted messages can be sent securely.  This paper shows that it is  possible to select a key over open communications channels in such a fashion that communications security  can be maintained.  A method is described which forces any enemy to expend an amount of work which increases  as the square of the work required of the two communicants to select the key.  The method provides a  logically new kind of protection against the passive eaves dropper.  It suggests that further research  on this topic will be highly rewarding, both in a theoretical and a practical sense.</abstract>
	<conference>CACM April, 1978</conference>
	<authors>
	<author>Merkle, R.C.</author>
	</authors>
	<keywords>Security, cryptography, cryptology, communications security, wiretap, computer network security,  passive eavesdropping, key distribution, public key cryptosystem</keywords>
	<version>3.56 3.81</version>
	<location>CA780405 DH February 26, 1979  4:18 PM</location>
	<citations>
	<citation>3038	4	3111</citation>
	<citation>3111	4	3111</citation>
	<citation>3177	4	3111</citation>
	<citation>3021	5	3111</citation>
	<citation>3111	5	3111</citation>
	<citation>3111	5	3111</citation>
	<citation>3111	5	3111</citation>
	<citation>3158	5	3111</citation>
	<citation>2436	6	3111</citation>
	<citation>3038	6	3111</citation>
	<citation>3111	6	3111</citation>
	<citation>3111	6	3111</citation>
	</citations>
	</document>
	<document id= '3110'>
	<title>Assembling Code for Machines with Span-Dependent Instructions</title>
	<abstract>Many modern computers contain instructions whose lengths depend on the distance from a given  instance of such an instruction to the operand of that instruction.  This paper considers the problem  of minimizing the lengths of programs for such machines.  An efficient solution is presented for the  case in which the operand of every such "span-dependent" instruction is either a label or an assembly-time  expression of a certain restricted form.If this restriction is relaxed by allowing these operands to  be more general assembly-time expressions, then the problem is shown to be NP-complete.</abstract>
	<conference>CACM April, 1978</conference>
	<authors>
	<author>Szymanski, T.G.</author>
	</authors>
	<keywords>Span-dependent instructions, variable-length addressing, code generation, assemblers, compilers,  NP-complete, computational complexity.</keywords>
	<version>4.11 4.12 5.25</version>
	<location>CA780406 DH February 26, 1979  3:49 PM</location>
	<citations>
	<citation>2626	4	3110</citation>
	<citation>2786	4	3110</citation>
	<citation>2840	4	3110</citation>
	<citation>2858	4	3110</citation>
	<citation>2919	4	3110</citation>
	<citation>3017	4	3110</citation>
	<citation>3110	4	3110</citation>
	<citation>3110	4	3110</citation>
	<citation>3110	4	3110</citation>
	<citation>3174	4	3110</citation>
	<citation>2194	5	3110</citation>
	<citation>2629	5	3110</citation>
	<citation>2858	5	3110</citation>
	<citation>3110	5	3110</citation>
	<citation>3110	5	3110</citation>
	<citation>3110	5	3110</citation>
	</citations>
	</document>
	<document id= '3109'>
	<title>A Data Structure for Manipulating Priority Queues</title>
	<abstract>A data structure is described which can be used for representing a collection of priority queues.   The primitive operations are insertion, deletion, union, update, and search for an item of earliest  priority.</abstract>
	<conference>CACM April, 1978</conference>
	<authors>
	<author>Vuillemin, J.</author>
	</authors>
	<keywords>Data structures, implementation of set operations,priority queues, mergeable heaps, binary trees</keywords>
	<version>4.34 5.24 5.25 5.32 8.1</version>
	<location>CA780407 DH February 26, 1979  3:39 PM</location>
	<citations>
	<citation>2844	4	3109</citation>
	<citation>2936	4	3109</citation>
	<citation>3051	4	3109</citation>
	<citation>3051	4	3109</citation>
	<citation>3064	4	3109</citation>
	<citation>3109	4	3109</citation>
	<citation>3109	4	3109</citation>
	<citation>2767	5	3109</citation>
	<citation>2844	5	3109</citation>
	<citation>3109	5	3109</citation>
	<citation>3109	5	3109</citation>
	<citation>3109	5	3109</citation>
	</citations>
	</document>
	<document id= '3108'>
	<title>Economical Encoding of Commas Between Strings</title>
	<abstract>A method for insertion of delimiters between strings without using new symbols is presented.   As the lengths of the strings increase, the extra cost, in terms of prolongation, becomes vanishingly  small compared to the lengths of the strings.</abstract>
	<conference>CACM April, 1978</conference>
	<authors>
	<author>Even, S.</author>
	<author>Rodeh, M.</author>
	</authors>
	<keywords>String transmission, delimiters, commas, encoding of the integers</keywords>
	<version>3.57 3.81 5.6</version>
	<location>CA780408 DH February 26, 1979  3:36 PM</location>
	<citations>
	<citation>3108	5	3108</citation>
	<citation>3108	5	3108</citation>
	<citation>3108	5	3108</citation>
	</citations>
	</document>
	<document id= '3107'>
	<title>Generating Beta Variates with Nonintegrel Shape Parameters</title>
	<abstract>A new rejection method is described for generating beta variates.  The method is compared with  previously published methods both theoretically and through computer timings.  It is suggested that the  method has advantages in both speed and programming simplicity over previous methods, especially for  "difficult" combinations of parameter values.</abstract>
	<conference>CACM April, 1978</conference>
	<authors>
	<author>Cheng, R.C.H.</author>
	</authors>
	<keywords>Beta variates, random numbers, simulation</keywords>
	<version>5.5 8.1</version>
	<location>CA780409 DH February 26, 1979  3:32 PM</location>
	<citations>
	<citation>2847	4	3107</citation>
	<citation>2928	4	3107</citation>
	<citation>3046	4	3107</citation>
	<citation>3098	4	3107</citation>
	<citation>3107	4	3107</citation>
	<citation>2569	5	3107</citation>
	<citation>3107	5	3107</citation>
	<citation>3107	5	3107</citation>
	<citation>3107	5	3107</citation>
	</citations>
	</document>
	<document id= '3106'>
	<title>A Fast Algorithm for Copying List Structures</title>
	<abstract>An algorithm is presented for copying an arbitrarily linked list structure into a block of  contiguous storage locations without destroying  the original list.  Apart from a fixed number of program  variables, no auxiliary storage, such as a stack, is used.  The algorithm needs no mark bits and operates  in linear time.  It is shown to be significantly faster than Fisher's algorithm, the fastest previous  linear-time algorithm for the same problem.  Its speed comes mainly from its efficient list-traversal  technique, which folds the processing stack into the structure being built, and from its classification  of list cells into nine types, which enables processing operations to be optimized for each type.</abstract>
	<conference>CACM May, 1978</conference>
	<authors>
	<author>Clark, D.W.</author>
	</authors>
	<keywords>List copying, Lisp, space complexity, constant workspace</keywords>
	<version>4.34 4.49 5.25</version>
	<location>CA780501 DH February 26, 1979  3:25 PM</location>
	<citations>
	<citation>1024	4	3106</citation>
	<citation>1051	4	3106</citation>
	<citation>1102	4	3106</citation>
	<citation>1132	4	3106</citation>
	<citation>1390	4	3106</citation>
	<citation>1486	4	3106</citation>
	<citation>1549	4	3106</citation>
	<citation>1706	4	3106</citation>
	<citation>1826	4	3106</citation>
	<citation>1869	4	3106</citation>
	<citation>1878	4	3106</citation>
	<citation>378	4	3106</citation>
	<citation>2060	4	3106</citation>
	<citation>2155	4	3106</citation>
	<citation>2156	4	3106</citation>
	<citation>2168	4	3106</citation>
	<citation>2361	4	3106</citation>
	<citation>2513	4	3106</citation>
	<citation>2513	4	3106</citation>
	<citation>2665	4	3106</citation>
	<citation>2719	4	3106</citation>
	<citation>2723	4	3106</citation>
	<citation>2723	4	3106</citation>
	<citation>2736	4	3106</citation>
	<citation>2766	4	3106</citation>
	<citation>2838	4	3106</citation>
	<citation>2842	4	3106</citation>
	<citation>2855	4	3106</citation>
	<citation>2855	4	3106</citation>
	<citation>2855	4	3106</citation>
	<citation>2855	4	3106</citation>
	<citation>2855	4	3106</citation>
	<citation>2879	4	3106</citation>
	<citation>2944	4	3106</citation>
	<citation>2954	4	3106</citation>
	<citation>2954	4	3106</citation>
	<citation>3074	4	3106</citation>
	<citation>3077	4	3106</citation>
	<citation>3080	4	3106</citation>
	<citation>3106	4	3106</citation>
	<citation>3106	4	3106</citation>
	<citation>3106	4	3106</citation>
	<citation>3106	4	3106</citation>
	<citation>3106	4	3106</citation>
	<citation>3106	4	3106</citation>
	<citation>3106	4	3106</citation>
	<citation>3106	4	3106</citation>
	<citation>3112	4	3106</citation>
	<citation>627	4	3106</citation>
	<citation>106	4	3106</citation>
	<citation>210	5	3106</citation>
	<citation>1549	5	3106</citation>
	<citation>1972	5	3106</citation>
	<citation>2665	5	3106</citation>
	<citation>2766	5	3106</citation>
	<citation>2855	5	3106</citation>
	<citation>2954	5	3106</citation>
	<citation>2998	5	3106</citation>
	<citation>3106	5	3106</citation>
	<citation>3106	5	3106</citation>
	<citation>3106	5	3106</citation>
	</citations>
	</document>
	<document id= '3105'>
	<title>A Language Extension for Expressing Constraints on Data Access</title>
	<abstract>Controlled sharing of information is needed and desirable for many applications and is supported  in operating systems by access control mechanisms.  This paper shows how to extend programming languages  to provide controlled sharing.  The extension permits expression of access constraints on shared data.   Access constraints can apply both to simple objects, and to objects that are components of larger objects,  such as bank account records in a bank's data base.  The constraints are stated declaratively, and can  be enforced by static checking similar to type checking.  The approach can be used to extend any strongly-typed  language, but is particularly suitable for extending languages that support the notion of abstract data  types.</abstract>
	<conference>CACM May, 1978</conference>
	<authors>
	<author>Jones, A.K.</author>
	</authors>
	<keywords>Programming languages, access control, data types, abstract data types, type checking, capabilities</keywords>
	<version>4.20 4.35</version>
	<location>CA780502 DH February 26, 1979  3:19 PM</location>
	<citations>
	<citation>1458	4	3105</citation>
	<citation>1523	4	3105</citation>
	<citation>1603	4	3105</citation>
	<citation>1698	4	3105</citation>
	<citation>1747	4	3105</citation>
	<citation>1748	4	3105</citation>
	<citation>1854	4	3105</citation>
	<citation>1877	4	3105</citation>
	<citation>1960	4	3105</citation>
	<citation>2377	4	3105</citation>
	<citation>2378	4	3105</citation>
	<citation>2497	4	3105</citation>
	<citation>2558	4	3105</citation>
	<citation>2625	4	3105</citation>
	<citation>2626	4	3105</citation>
	<citation>2632	4	3105</citation>
	<citation>2840	4	3105</citation>
	<citation>2868	4	3105</citation>
	<citation>2868	4	3105</citation>
	<citation>2870	4	3105</citation>
	<citation>2876	4	3105</citation>
	<citation>2941	4	3105</citation>
	<citation>3031	4	3105</citation>
	<citation>3105	4	3105</citation>
	<citation>3105	4	3105</citation>
	<citation>3105	4	3105</citation>
	<citation>3105	4	3105</citation>
	<citation>3105	4	3105</citation>
	<citation>3105	4	3105</citation>
	<citation>3144	4	3105</citation>
	<citation>3144	4	3105</citation>
	<citation>3144	4	3105</citation>
	<citation>3148	4	3105</citation>
	<citation>3150	4	3105</citation>
	<citation>1471	5	3105</citation>
	<citation>2625	5	3105</citation>
	<citation>2632	5	3105</citation>
	<citation>2868	5	3105</citation>
	<citation>2939	5	3105</citation>
	<citation>3068	5	3105</citation>
	<citation>3105	5	3105</citation>
	<citation>3105	5	3105</citation>
	<citation>3105	5	3105</citation>
	</citations>
	</document>
	<document id= '3104'>
	<title>Test Data as an Aid in Proving Program Correctness</title>
	<abstract>Proofs of program correctness tend to be long and tedious, whereas testing, though useful in  detecting errors, usually does not guarantee correctness.  This paper introduces a techniques whereby  test data can be used in proving program correctness.  In addition to simplifying the process of proving  correctness, this method simplifies the process of providing accurate specification for a program.  The  applicability of this technique to procedures and recursive programs is demonstrated.</abstract>
	<conference>CACM May, 1978</conference>
	<authors>
	<author>Geller, M.</author>
	</authors>
	<keywords>Program verification, program testing, recursive programs</keywords>
	<version>4.22 4.6 5.24</version>
	<location>CA780503 DH February 26, 1979  2:10 PM</location>
	<citations>
	<citation>2874	4	3104</citation>
	<citation>2981	4	3104</citation>
	<citation>3030	4	3104</citation>
	<citation>3077	4	3104</citation>
	<citation>3104	4	3104</citation>
	<citation>3104	4	3104</citation>
	<citation>2457	5	3104</citation>
	<citation>2683	5	3104</citation>
	<citation>3104	5	3104</citation>
	<citation>3104	5	3104</citation>
	<citation>3104	5	3104</citation>
	<citation>3170	5	3104</citation>
	<citation>3055	6	3104</citation>
	<citation>3104	6	3104</citation>
	</citations>
	</document>
	<document id= '3103'>
	<title>Automatic Data Structure Selection: An Example and Overview</title>
	<abstract>The use of several levels of abstraction has proved to be very helpful in constructing and  maintaining programs.  When programs are designed with abstract data types such as sets and lists, programmer  time can be saved by automating the process of filling in low-level implementation details.  In the past,  programming systems have provided only a single general purpose implementation for an abstract type.   Thus the programs produced using abstract types were then inefficient in space or time.  In this paper  a system for automatically choosing efficient implementations for abstract types from a library of implementations  is discussed.  This process is discussed in detail for an example program.  General issues in data structure  selection are also reviewed.</abstract>
	<conference>CACM May, 1978</conference>
	<authors>
	<author>Low, J.R.</author>
	</authors>
	<keywords>Abstract data types, automatic programming, data structures, optimizing compilers, sets, lists</keywords>
	<version>4.12 4.22 4.6</version>
	<location>CA780504 DH February 26, 1979  1:51 PM</location>
	<citations>
	<citation>1957	4	3103</citation>
	<citation>2151	4	3103</citation>
	<citation>3103	4	3103</citation>
	<citation>3103	4	3103</citation>
	<citation>3148	4	3103</citation>
	<citation>1860	5	3103</citation>
	<citation>2877	5	3103</citation>
	<citation>3103	5	3103</citation>
	<citation>3103	5	3103</citation>
	<citation>3103	5	3103</citation>
	</citations>
	</document>
	<document id= '3102'>
	<title>Incorporation of Units into Programming Languages</title>
	<abstract>The issues of how a programming language might aid in keeping track of physical units (feet,  sec, etc.) are discussed.  A method is given for the introduction of relationships among units (a watt  is volts*amps, a yard is three feet) and subsequent automatic conversion based upon these relationships.  Various proposals for syntax are considered.</abstract>
	<conference>CACM May, 1978</conference>
	<authors>
	<author>Karr, M.</author>
	<author>III, D.B.</author>
	</authors>
	<keywords>Units, language design, compiler construction, language syntax</keywords>
	<version>4.12 4.22</version>
	<location>CA780505 DH February 26, 1979  1:43 PM</location>
	<citations>
	<citation>3102	5	3102</citation>
	<citation>3102	5	3102</citation>
	<citation>3102	5	3102</citation>
	</citations>
	</document>
	<document id= '3101'>
	<title>The SL5 Procedure Mechanism</title>
	<abstract>This paper describes an integrated procedure mechanism that permits procedures to be used as  recursive functions or as coroutines.  This integration is accomplished by treating procedures and their  activation records (called environments) as data objects and by decomposing procedure invocation into  three separate components at the source-language level.  In addition, argument binding is under the control  of the programmer, permitting the definition of various methods of argument transmission in the source  language itself.  The resulting procedure mechanism,which is part of the SL5 programming language, is  well suited to goal-oriented problems and to other problems that are more readily programmed by using  coroutines. Several examples are given.</abstract>
	<conference>CACM May, 1978</conference>
	<authors>
	<author>Hanson, D.</author>
	<author>Griswold, R.E.</author>
	</authors>
	<keywords>Procedures, coroutines, programming languages, interpreters, SNOBOL 4, backtracking</keywords>
	<version>4.2 4.20 4.22 4.13</version>
	<location>CA780506 DH February 26, 1979  1:36 PM</location>
	<citations>
	<citation>2411	4	3101</citation>
	<citation>2625	4	3101</citation>
	<citation>2705	4	3101</citation>
	<citation>2709	4	3101</citation>
	<citation>2889	4	3101</citation>
	<citation>2922	4	3101</citation>
	<citation>2937	4	3101</citation>
	<citation>2989	4	3101</citation>
	<citation>3005	4	3101</citation>
	<citation>3025	4	3101</citation>
	<citation>3081	4	3101</citation>
	<citation>3101	4	3101</citation>
	<citation>3101	4	3101</citation>
	<citation>3101	4	3101</citation>
	<citation>3101	4	3101</citation>
	<citation>3112	4	3101</citation>
	<citation>2138	5	3101</citation>
	<citation>2193	5	3101</citation>
	<citation>2438	5	3101</citation>
	<citation>3101	5	3101</citation>
	<citation>3101	5	3101</citation>
	<citation>3101	5	3101</citation>
	<citation>3185	5	3101</citation>
	</citations>
	</document>
	<document id= '3100'>
	<title>An Interference Matching Technique for Inducing Abstractions</title>
	<abstract>A method for inducing knowledge by abstraction from a sequence of training examples is described.   The proposed method, interference matching, induces abstractions by finding relational properties common  to two or more exemplars.  Three tasks solved by a program that uses an interference-matching algorithm  are presented.  Several problems concerning the description of the training examples and the adequacy  of interference matching are discussed, and directions for future research are considered.</abstract>
	<conference>CACM May, 1978</conference>
	<authors>
	<author>Roth, F.</author>
	<author>McDermott, J.</author>
	</authors>
	<keywords>Rule induction, knowledge acquisition, partial matching, interference, graph matching, learning,  induction, knowledge representation, informal retrieval, abstraction, generalization, language learning,  complexity, predicate discovery.</keywords>
	<version>3.36 3.61 3.62 3.66 3.70 5.32</version>
	<location>CA780507 DH February 26, 1979  1:26 PM</location>
	<citations>
	<citation>3100	5	3100</citation>
	<citation>3100	5	3100</citation>
	<citation>3100	5	3100</citation>
	</citations>
	</document>
	<document id= '3099'>
	<title>New Sufficient Optimality Conditions for Integer Programming and their Application</title>
	<abstract>The purpose of this report is to present a new class of sufficient optimality conditions for  pure and mixed integer programming problems.  Some of the sets of sufficient conditions presented can  be thought of as generalizations of optimality conditions based on primal-dual complementarity in linear  programming.  These sufficient conditions are particularly useful for the construction of difficult integer  programming problems with known optimal solutions.  These problems may then be used to test and/or "benchmark"  integer programming codes.</abstract>
	<conference>CACM May, 1978</conference>
	<authors>
	<author>Fleisher, J.M.</author>
	<author>Meyer, R.R.</author>
	</authors>
	<keywords>Integer programming, optimality conditions, test problem construction, Kuhn-Tucker conditions,  greatest common divisor</keywords>
	<version>3.15 5.39 5.49</version>
	<location>CA780508 DH February 26, 1979  1:19 PM</location>
	<citations>
	<citation>2028	4	3099</citation>
	<citation>2521	4	3099</citation>
	<citation>3099	4	3099</citation>
	<citation>3099	4	3099</citation>
	<citation>3138	4	3099</citation>
	<citation>1313	5	3099</citation>
	<citation>2031	5	3099</citation>
	<citation>3099	5	3099</citation>
	<citation>3099	5	3099</citation>
	<citation>3099	5	3099</citation>
	</citations>
	</document>
	<document id= '3098'>
	<title>Computer Generation of Gamma Random Variables</title>
	<abstract>A new method for generating random variables from the gamma distribution with nonintegral shape  parameter a is proposed.  This method is similar to two other methods recently given by Wallace and Fishman.   It is compared with Fishman's and Ahrens and Dieter's methods.  The core storage requirements and programming  effort for this method are similar to those of Fishman's method.  The proposed method is the same as  Fishman's method for 1 &amp;lt; a &amp;lt; 2 and is faster than Fishman's method for 3 &amp;lt; a &amp;lt; 19.  Also, the proposed  method is much simpler than Ahrens and Dieter's method and is faster for a &amp;lt; 8.</abstract>
	<conference>CACM May, 1978</conference>
	<authors>
	<author>Tadikamalla, P.R.</author>
	</authors>
	<keywords>Gamma variables, rejection method, computer methods</keywords>
	<version>5.5 8.1</version>
	<location>CA780509 DH February 26, 1979  1:10 PM</location>
	<citations>
	<citation>2847	4	3098</citation>
	<citation>2928	4	3098</citation>
	<citation>3046	4	3098</citation>
	<citation>3046	4	3098</citation>
	<citation>3098	4	3098</citation>
	<citation>3098	4	3098</citation>
	<citation>3107	4	3098</citation>
	<citation>2569	5	3098</citation>
	<citation>2847	5	3098</citation>
	<citation>3046	5	3098</citation>
	<citation>3098	5	3098</citation>
	<citation>3098	5	3098</citation>
	<citation>3098	5	3098</citation>
	<citation>2569	6	3098</citation>
	<citation>2847	6	3098</citation>
	<citation>3098	6	3098</citation>
	</citations>
	</document>
	<document id= '3097'>
	<title>Optimal Shift Strategy for a Block-Transfer CCD Memory</title>
	<abstract>For the purposes of this paper, a block-transfer CCD memory is composed of serial shift registers  whose shift rate can vary, but which have a definite minimum shift rate (the refresh rate) and a definite  maximum shift rate.  The bits iin the shift registers are numbered 0 to N - 1, and blocks of N bits are  always transferred, always starting at bit 0.   What is the best shift strategy so that a block transfer  request occurring at a random time will have to wait the minimal amount of time before bit 0 can be reached?   The minimum shift rate requirement does not allow one to  simply "park" at bit 0 and wait for a transfer  request.  The optimal strategy involves shifting as slowly as possible until bit 0 is passed, then shifting  as quickly as possible until a critical boundary is reached, shortly before bit 0 comes around again.   This is called the "hurry up and wait" strategy and is well known outside the computer field.  The block-transfer  CCD memory can also be viewed as a paging drum with a variable (bounded) rotation speed.</abstract>
	<conference>CACM May,1978</conference>
	<authors>
	<author>Sites, R.L.</author>
	</authors>
	<keywords>Paging drum, charge coupled devices, shift register memory, memory hierarchy, electronic drum,  latency</keywords>
	<version>3.72 5.39 6.34 6.35</version>
	<location>CA780510 DH February 26, 1979  1:05 PM</location>
	<citations>
	<citation>2628	4	3097</citation>
	<citation>3097	4	3097</citation>
	<citation>2496	5	3097</citation>
	<citation>3097	5	3097</citation>
	<citation>3097	5	3097</citation>
	<citation>3097	5	3097</citation>
	</citations>
	</document>
	<document id= '3096'>
	<title>An Optimal Method for Deletion in One-Sided Height-Balanced Trees</title>
	<abstract>A one-sided height-balanced tree is a binary tree in which every node's right subtree has a  height which is equal to or exactly one greater than the height of its left subtree.  It has an advantage  over the more general AVL tree in that only one bit of balancing information is required (two bits are  required for the ACL tree).  It is shown that deletion of an arbitrary node of such a tree can be accomplished  in O(logn) operations, where n is the number of nodes in the tree.  Moreover the method is optimal in  the sense that its complexity cannot be reduced in order of magnitude.  This result, coupled with earlier  results by Hirschberg, indicates that, of the three basic problems of insertion, deletion, and retrieval,  only insertion is adversely affected by this modification of an AVL tree.</abstract>
	<conference>CACM June, 1978</conference>
	<authors>
	<author>Zweben, S.H.</author>
	<author>McDonald, M.A.</author>
	</authors>
	<keywords>Balanced, binary, search, trees</keywords>
	<version>3.73 3.74 4.34 5.25 5.31</version>
	<location>CA780601 DH February 26, 1979  12:48 PM</location>
	<citations>
	<citation>2839	4	3096</citation>
	<citation>3009	4	3096</citation>
	<citation>3042	4	3096</citation>
	<citation>3042	4	3096</citation>
	<citation>3065	4	3096</citation>
	<citation>3096	4	3096</citation>
	<citation>3096	4	3096</citation>
	<citation>3096	4	3096</citation>
	<citation>3163	4	3096</citation>
	<citation>3163	4	3096</citation>
	<citation>3163	4	3096</citation>
	<citation>2839	5	3096</citation>
	<citation>2889	5	3096</citation>
	<citation>3009	5	3096</citation>
	<citation>3065	5	3096</citation>
	<citation>3096	5	3096</citation>
	<citation>3096	5	3096</citation>
	<citation>3096	5	3096</citation>
	<citation>3163	5	3096</citation>
	<citation>2839	6	3096</citation>
	<citation>2839	6	3096</citation>
	<citation>2889	6	3096</citation>
	<citation>3009	6	3096</citation>
	<citation>3065	6	3096</citation>
	<citation>3096	6	3096</citation>
	<citation>3096	6	3096</citation>
	</citations>
	</document>
	<document id= '3095'>
	<title>A Selective Traversal Algorithm for Binary Search Trees</title>
	<abstract>The problem of selecting data items from a binary search tree according to a list of range  conditions is considered.  The process of visiting a minimal number of nodes to retrieve data satisfying  the range conditions is called selective traversal.  Presented in this paper is an algorithm for selective  traversal which uses a tag field for each node in the tree.  The algorithm is particularly useful and  efficient when examination of data is more time consuming than examination of a tag field.</abstract>
	<conference>CACM June, 1978</conference>
	<authors>
	<author>Driscoll, J.R.</author>
	<author>Lien, Y.E.</author>
	</authors>
	<keywords>Data retrieval, range conditions, binary search tree, tree traversal, selective traversal</keywords>
	<version>3.74 5.24 5.25</version>
	<location>CA780602 DH February 26, 1979  12:40 PM</location>
	<citations>
	<citation>3095	5	3095</citation>
	<citation>3095	5	3095</citation>
	<citation>3095	5	3095</citation>
	</citations>
	</document>
	<document id= '3094'>
	<title>Analyses of Deterministic Parsing Algorithms</title>
	<abstract>This paper describes an approach for determining the minimum, maximum, and average times to  parse sentences acceptable by a deterministic parser.  These quantities are presented in the form of  symbolic formulas, called time-formulas.  The variables in these formulas represent not only the length  of the input string but also the time to perform elementary operations such as pushing, popping, subscripting,  iterating, etc.  By binding to the  variables actual numerical values corresponding to a given compiler-machine  configuration, one can determine the execution time for that configuration.  Time-formulas are derived  by examining the grammar rules and the program representing the algorithm one wishes to analyze.  The  approach is described by using a specific grammar that defines simple arithmetic expressions.  Two deterministic parsers are analyzed: a top-down recursive descent LL(1) parser, and a bottom-up SLR(1) parser.  The  paper provides estimates for the relative efficiencies of the two parsers.  The estimates applicable  to a specific machine, the PDP-10, are presented and substantiated buy benchmarks.  Finally, the paper  illustrates the proposed approach by applying it to the analyses of parsers for a simple programming  language.</abstract>
	<conference>CACM June, 1978</conference>
	<authors>
	<author>Cohen, J.</author>
	<author>Roth, M.S.</author>
	</authors>
	<keywords>Syntactic analysis, analysis of algorithms,top-down and bottom-up parsing, relative efficiencies.</keywords>
	<version>4.12 5.23 5.24 5.25 5.7</version>
	<location>CA780603 DH February 26, 1979  12:32 PM</location>
	<citations>
	<citation>1350	4	3094</citation>
	<citation>1399	4	3094</citation>
	<citation>1659	4	3094</citation>
	<citation>1768	4	3094</citation>
	<citation>1781	4	3094</citation>
	<citation>1945	4	3094</citation>
	<citation>2110	4	3094</citation>
	<citation>2719	4	3094</citation>
	<citation>2733	4	3094</citation>
	<citation>2986	4	3094</citation>
	<citation>3093	4	3094</citation>
	<citation>3094	4	3094</citation>
	<citation>3094	4	3094</citation>
	<citation>3094	4	3094</citation>
	<citation>1265	5	3094</citation>
	<citation>2179	5	3094</citation>
	<citation>2645	5	3094</citation>
	<citation>3094	5	3094</citation>
	<citation>3094	5	3094</citation>
	<citation>3094	5	3094</citation>
	</citations>
	</document>
	<document id= '3093'>
	<title>Automatic Error Recovery for LR Parsers</title>
	<abstract>In this paper we present a scheme for detecting and recovering from syntax errors in programs.   The scheme, which is based on LR parsing, is driven by information which is directly and automatically  obtainable from the information that is already present in an LR parser.  The approach, which is patterned  after that of Levy and Graham and Rhodes, appears to provide error recovery which is both simple and  powerful.</abstract>
	<conference>CACM June, 1978</conference>
	<authors>
	<author>Mickunas, M.D.</author>
	<author>Modry, J.A.</author>
	</authors>
	<keywords>Programming languages, error correction, automatic correction, parsing, LR, syntax errors, compilers</keywords>
	<version>4.12 4.42 5.23</version>
	<location>CA780604 DH February 26, 1979  12:22 PM</location>
	<citations>
	<citation>1225	4	3093</citation>
	<citation>1350	4	3093</citation>
	<citation>1542	4	3093</citation>
	<citation>1646	4	3093</citation>
	<citation>1683	4	3093</citation>
	<citation>1693	4	3093</citation>
	<citation>1781	4	3093</citation>
	<citation>1781	4	3093</citation>
	<citation>1787	4	3093</citation>
	<citation>1836	4	3093</citation>
	<citation>1945	4	3093</citation>
	<citation>1945	4	3093</citation>
	<citation>2060	4	3093</citation>
	<citation>2061	4	3093</citation>
	<citation>2082	4	3093</citation>
	<citation>2091	4	3093</citation>
	<citation>2152	4	3093</citation>
	<citation>2179	4	3093</citation>
	<citation>2340	4	3093</citation>
	<citation>2356	4	3093</citation>
	<citation>2546	4	3093</citation>
	<citation>2603	4	3093</citation>
	<citation>2650	4	3093</citation>
	<citation>2698	4	3093</citation>
	<citation>2698	4	3093</citation>
	<citation>2708	4	3093</citation>
	<citation>2708	4	3093</citation>
	<citation>2733	4	3093</citation>
	<citation>2824	4	3093</citation>
	<citation>2982	4	3093</citation>
	<citation>2986	4	3093</citation>
	<citation>2986	4	3093</citation>
	<citation>3045	4	3093</citation>
	<citation>3093	4	3093</citation>
	<citation>3093	4	3093</citation>
	<citation>3093	4	3093</citation>
	<citation>3093	4	3093</citation>
	<citation>3094	4	3093</citation>
	<citation>1491	5	3093</citation>
	<citation>2179	5	3093</citation>
	<citation>2708	5	3093</citation>
	<citation>3093	5	3093</citation>
	<citation>3093	5	3093</citation>
	<citation>3093	5	3093</citation>
	<citation>680	5	3093</citation>
	</citations>
	</document>
	<document id= '3092'>
	<title>Characteristics of Application Software Maintenance</title>
	<abstract>Maintenance and enhancement of application software consume a major portion of the total life  cycle cost of a system.  Rough estimates of the total systems and programming resources consumed range  as high as 75-80 percent in each category.  However, the area has been given little attention in the  literature.  To analyze the problems in this area a questionnaire was developed and pretested.  It was  then submitted to 120 organizations.  Respondents totaled 69.  Responses were analyzed with the SPSS  statistical package.  The results of the analysis indicate that: (1) maintenance and enhancement do consume  much of the total resources of systems and programming groups; (2) maintenance and enhancement tend to  be viewed by management as at least somewhat more important than new application software development;  (3) in maintenance and enhancement, problems of a management orientation tend to be more significant  than those of a technical orientation; and (4) user demands for enhancements and extension constitute  the most important management problem area.</abstract>
	<conference>CACM June, 1978</conference>
	<authors>
	<author>Lientz, B.P.</author>
	<author>Swanson, E.B.</author>
	<author>Tompkins, G.E.</author>
	</authors>
	<keywords>Software maintenance, use of productivity aids, management and technical issues</keywords>
	<version>3.50 4.6</version>
	<location>CA780605 DH February 26, 1979  11:59 AM</location>
	<citations>
	<citation>3092	5	3092</citation>
	<citation>3092	5	3092</citation>
	<citation>3092	5	3092</citation>
	</citations>
	</document>
	<document id= '3091'>
	<title>Some Basic Determinants of Computer Programming Productivity</title>
	<abstract>The propose of this research was to examine the relationship between processing characteristics  of programs and experience characteristics of programmers and program development time.  The ultimate  objective was to develop a technique for predicting the amount of time necessary to create a computer  program.  The fifteen program characteristics hypothesized as being associated with an increase in programming  time required are objectively measurable from preprogramming specifications.  The five programmer characteristics  are experience-related and are also measurable before a programming task is begun.  Nine program characteristics  emerged as major influences on program development time, each associated with increased program development  time.  All five programmer characteristics were found to be related to reduced program development time.   A multiple regression  equation which contained one programmer characteristic and four program characteristics  gave evidence of good predictive power for forecasting program development time.</abstract>
	<conference>CACM June, 1978</conference>
	<authors>
	<author>Chrysler, E.</author>
	</authors>
	<keywords>Programmer performance standards, predicting program development time, program estimation techniques,  program development equation, value of programming experience, programmer evaluation, programmer scheduling,  programmer productivity, programming management, Cobol programming</keywords>
	<version>2.40 4.20</version>
	<location>CA780606 DH February 26, 1979  11:42 AM</location>
	<citations>
	<citation>3091	4	3091</citation>
	<citation>1792	5	3091</citation>
	<citation>3091	5	3091</citation>
	<citation>3091	5	3091</citation>
	<citation>3091	5	3091</citation>
	</citations>
	</document>
	<document id= '3090'>
	<title>Automated Welfare Client-Tracking and Service Integration: The Political Economy of Computing</title>
	<abstract>The impacts of an automated client-tracking system on the clients, caseworkers, administrators,  and operations of the welfare agencies that use it are reported.  The major impact of this system was  to enhance the administrative  attractiveness of the using agencies in the eyes of funders rather than  to increase their internal administrative efficiency.  This impact is a joint product of both the technical  features of the computer-based system and of the organizational demands placed upon different agencies,  administrators, and caseworkers.  It illustrates the way "successful" automated information systems fit  the political economies of the groups that use them.</abstract>
	<conference>CACM June, 1978</conference>
	<authors>
	<author>Kling, R.</author>
	</authors>
	<keywords>Social impacts of computing, organizational impacts of computing, management information systems,  sociology of computing, information systems and service integration, urban information systems</keywords>
	<version>2.11 3.53</version>
	<location>CA780607 DH February 12, 1979  11:01 AM</location>
	<citations>
	<citation>3090	5	3090</citation>
	<citation>3090	5	3090</citation>
	<citation>3090	5	3090</citation>
	<citation>3117	5	3090</citation>
	<citation>3090	6	3090</citation>
	</citations>
	</document>
	<document id= '3089'>
	<title>Performance of Rollback Recovery Systems under Intermittent Failures</title>
	<abstract>A mathematical model of a transaction-oriented system under intermittent failures is proposed.   The system is assumed to operate with a checkpointing and rollback/recovery method to ensure reliable  information processing.  The model is used to derive the principal performance measures, including availability,  response time, and the system saturation point.</abstract>
	<conference>CACM June, 1978</conference>
	<authors>
	<author>Gelenbe, E.</author>
	<author>Derochette, D.</author>
	</authors>
	<keywords>Database reliability, file systems, checkpoints, recovery procedures, checking techniques, reliability  and system performance evaluation</keywords>
	<version>3.72 3.73 4.33 4.35 4.6 5.5 8.1</version>
	<location>CA780608 DH February 9, 1979  10:26 AM</location>
	<citations>
	<citation>3089	4	3089</citation>
	<citation>2599	5	3089</citation>
	<citation>3089	5	3089</citation>
	<citation>3089	5	3089</citation>
	<citation>3089	5	3089</citation>
	</citations>
	</document>
	<document id= '3088'>
	<title>General Equations for Idealized CPU-I/O Overlap Configurations</title>
	<abstract>General equations are derived for estimating the maximum possible utilization of main storage  partitions, CPU and I/O devices under different conditions in an idealized CPU-I/O overlap model of multiprogrammed  computer systems.  The equations are directly applicable to any configuration consisting  of sets of  identical CPU's I/O processors, main storage partitions and user tasks.  Examples are provided to illustrate  the use of the equations to compute effective processing time per record and expected timesharing response  time under both balanced and unbalanced resource utilization conditions.</abstract>
	<conference>CACM June, 1978</conference>
	<authors>
	<author>Teory, T.J.</author>
	</authors>
	<keywords>Blocking, buffering, input/output, overlap, performance, resource allocation, throughput, timesharing</keywords>
	<version>3.72 4.30 4.41 8.1</version>
	<location>CA780609 DH February 8, 1979  4:35 PM</location>
	<citations>
	<citation>3088	5	3088</citation>
	<citation>3088	5	3088</citation>
	<citation>3088	5	3088</citation>
	</citations>
	</document>
	<document id= '3087'>
	<title>An English Language Question Answering System for a Large Relational Database</title>
	<abstract>By typing requests in English, casual users will be able to obtain explicit answers from a  large relational database of aircraft flight and maintenance data using a system called PLANES.  The  design and implementation of this system is described and illustrated with detailed examples of the operation  of system components and examples of overall system operation.  The language processing portion of the  system uses a number of augmented transition networks, each of which matches phrases with a specific  meaning, along with context registers (his tory keepers) and concept case frames; these are used for judging  meaningfulness of questions, generating dialogue for clarifying partially understood questions, and resolving  ellipsis and pronoun reference problems.  Other system components construct a formal query for the relational  database, and optimize the order of searching relations.  Methods are discussed for handling vague or  complex questions and for providing browsing ability.  Also included are discussions of important issues  in programming natural language systems for limited domains, and the relationship of this system to others.</abstract>
	<conference>CACM July, 1978</conference>
	<authors>
	<author>Waltz, D.L.</author>
	</authors>
	<keywords>Question answering, relational database, natural language, database front end, artificial intelligence,  dialogue, query generation, information retrieval, natural language programming</keywords>
	<version>3.42 3.60 3.69 3.74 3.79</version>
	<location>CA780701 DH February 8, 1979  4:26 PM</location>
	<citations>
	<citation>2155	4	3087</citation>
	<citation>2406	4	3087</citation>
	<citation>2581	4	3087</citation>
	<citation>2710	4	3087</citation>
	<citation>2715	4	3087</citation>
	<citation>2716	4	3087</citation>
	<citation>2717	4	3087</citation>
	<citation>2718	4	3087</citation>
	<citation>2739	4	3087</citation>
	<citation>2765	4	3087</citation>
	<citation>2795	4	3087</citation>
	<citation>2817	4	3087</citation>
	<citation>2888	4	3087</citation>
	<citation>2901	4	3087</citation>
	<citation>2921	4	3087</citation>
	<citation>2957	4	3087</citation>
	<citation>2959	4	3087</citation>
	<citation>2965	4	3087</citation>
	<citation>3087	4	3087</citation>
	<citation>3087	4	3087</citation>
	<citation>3154	4	3087</citation>
	<citation>1989	5	3087</citation>
	<citation>2046	5	3087</citation>
	<citation>3087	5	3087</citation>
	<citation>3087	5	3087</citation>
	<citation>3087	5	3087</citation>
	</citations>
	</document>
	<document id= '3086'>
	<title>On the Complexity of Computing the Measure of U[ai, bi]</title>
	<abstract>The decision tree complexity of computing the measure of the union of n (possibly overlapping)  intervals is shown to be  (n log n), even if comparisons between linear functions of the interval endpoints  are allowed.  The existence of an   (n log n) lower bound to determine whether any two of n real numbers  are within   of each other is also demonstrated.  These problems provide an excellent opportunity for  discussing the effects of the computational model on the ease of analysis and on the results produced.</abstract>
	<conference>CACM July, 1978</conference>
	<authors>
	<author>Fredman, M.L.</author>
	<author>Weide, B.</author>
	</authors>
	<keywords>Analysis of algorithms, combinatorial problems, computational complexity, computational models,  decision tree programs, lower bounds</keywords>
	<version>5.25 5.26 5.30 5.39</version>
	<location>CA780702 DH February 8, 1979  3:46 PM</location>
	<citations>
	<citation>3086	5	3086</citation>
	<citation>3086	5	3086</citation>
	<citation>3086	5	3086</citation>
	</citations>
	</document>
	<document id= '3085'>
	<title>An O(n) Algorithm for Determining a Near-Optimal Computation Order of Matrix Chain Products</title>
	<abstract>This paper discusses the computation of matrix chain products of the form M1 x M2 x ... x Mn  where Mi's are matrices.  The order in which the matrices are computed affects the number of operations.   A sufficient condition about the association of the matrices in the optimal order is presented.  An  O(n) algorithm to find an order of computation which takes less than 25 percent longer than the optimal  time Topt is also presented.  In most cases, the algorithm yields the optimal order or an order which  takes only a few percent longer than Topt (less than 1 percent on the average).</abstract>
	<conference>CACM July, 1978</conference>
	<authors>
	<author>Chin, F.Y.</author>
	</authors>
	<keywords>Approximate algorithm, heuristic algorithm, matrix multiplication, matrix chain product</keywords>
	<version>5.14</version>
	<location>CA780703 DH February 8, 1979  2:46 PM</location>
	<citations>
	<citation>3075	4	3085</citation>
	<citation>3085	4	3085</citation>
	<citation>2557	5	3085</citation>
	<citation>3085	5	3085</citation>
	<citation>3085	5	3085</citation>
	<citation>3085	5	3085</citation>
	</citations>
	</document>
	<document id= '3084'>
	<title>Interpolation Search -A Log LogN Search</title>
	<abstract>Interpolation search is a method of retrieving a desired record by key in an ordered file by  using the value of the key and the statistical distribution of the keys.  It is shown that on the average  log logN file accesses are required to retrieve a key, assuming that the N keys are uniformly distributed.   The number of extra accesses is also estimated and shown to be very low.  The same holds if the cumulative  distribution function of the keys is known.  Computational experiments confirm these results.</abstract>
	<conference>CACM July, 1978</conference>
	<authors>
	<author>Perl, Y.</author>
	<author>Itai, A.</author>
	<author>Avni, H.</author>
	</authors>
	<keywords>Average number of accesses, binary search, database, interpolation search, retrieval, searching,  uniform distribution</keywords>
	<version>4.4 4.6 5.25</version>
	<location>CA780704 DH February 7, 1979  4:50 PM</location>
	<citations>
	<citation>3084	5	3084</citation>
	<citation>3084	5	3084</citation>
	<citation>3084	5	3084</citation>
	</citations>
	</document>
	<document id= '3083'>
	<title>Pseudochaining in Hash Tables</title>
	<abstract>This paper presents pseudochaining as a new collision-resolution method.  Pseudochaining is  half way between open addressing and chaining.  It owes its name to the fact that link fields are present  in each cell of the hash table which permits "chaining" of the first overflow items in the table.  The  efficiency of the method is derived and a tradeoff analysis is given.</abstract>
	<conference>CACM July, 1978</conference>
	<authors>
	<author>Halatsis, C.</author>
	<author>Philokyprou, G.</author>
	</authors>
	<keywords>Hash code, scatter storage, open addressing, chaining, pseudochaining, collision resolution, searching,  uniform probing.</keywords>
	<version>3.7 3.73 3.74 4.9</version>
	<location>CA780705 DH February 7, 1979  4:37 PM</location>
	<citations>
	<citation>1973	4	3083</citation>
	<citation>1992	4	3083</citation>
	<citation>2138	4	3083</citation>
	<citation>2203	4	3083</citation>
	<citation>2251	4	3083</citation>
	<citation>2251	4	3083</citation>
	<citation>2282	4	3083</citation>
	<citation>2412	4	3083</citation>
	<citation>2530	4	3083</citation>
	<citation>2534	4	3083</citation>
	<citation>2537	4	3083</citation>
	<citation>2543	4	3083</citation>
	<citation>2543	4	3083</citation>
	<citation>2559	4	3083</citation>
	<citation>2559	4	3083</citation>
	<citation>2573	4	3083</citation>
	<citation>2770	4	3083</citation>
	<citation>2860	4	3083</citation>
	<citation>2991	4	3083</citation>
	<citation>3053	4	3083</citation>
	<citation>3053	4	3083</citation>
	<citation>3053	4	3083</citation>
	<citation>3083	4	3083</citation>
	<citation>3083	4	3083</citation>
	<citation>3083	4	3083</citation>
	<citation>3083	4	3083</citation>
	<citation>3083	4	3083</citation>
	<citation>1328	5	3083</citation>
	<citation>1973	5	3083</citation>
	<citation>2107	5	3083</citation>
	<citation>2543	5	3083</citation>
	<citation>2552	5	3083</citation>
	<citation>3083	5	3083</citation>
	<citation>3083	5	3083</citation>
	<citation>3083	5	3083</citation>
	</citations>
	</document>
	<document id= '3082'>
	<title>Time, Clocks, and the Ordering of Events in a Distributed System</title>
	<abstract>The concept of one event happening before another in a distributed system is examined, and is shown to define a partial ordering of the events.  A distributed algorithm is given for synchronizing  a system of logical clocks which can be used to totally order the events.  The use of the total ordering  is illustrated with a method for solving synchronization problems.  The algorithm is then specialized  for synchronizing physical clocks, and a bound is derived on how far out of synchrony the clocks can  become.</abstract>
	<conference>CACM July, 1978</conference>
	<authors>
	<author>Lamport, L.</author>
	</authors>
	<keywords>Distributed systems, computer networks, clock synchronization, multiprocess systems</keywords>
	<version>4.32 5.29</version>
	<location>CA780706 DH February 7, 1979  4:30 PM</location>
	<citations>
	<citation>3082	5	3082</citation>
	<citation>3082	5	3082</citation>
	<citation>3082	5	3082</citation>
	<citation>3128	5	3082</citation>
	<citation>2150	6	3082</citation>
	<citation>2376	6	3082</citation>
	<citation>2436	6	3082</citation>
	<citation>2597	6	3082</citation>
	<citation>2865	6	3082</citation>
	<citation>2866	6	3082</citation>
	<citation>2870	6	3082</citation>
	<citation>2912	6	3082</citation>
	<citation>3082	6	3082</citation>
	</citations>
	</document>
	<document id= '3081'>
	<title>Shallow Binding in Lisp 1.5</title>
	<abstract>Shallow binding is a scheme which allows the value of a variable to be accessed in a bounded  amount of computation.  An elegant model for shallow binding in  Lisp 1.5 is presented in which context-switching  is an environment tree transformation called rerooting.  Rerooting is completely general and reversible,  and is optional in the sense that a Lisp 1.5 interpreter will operate correctly whether or not rerooting  is invoked one very context change.   Since rerooting leaves assoc [v, a] invariant, for all variables  v and all environments a, the programmer can have access to a rerooting primitive, shallow[], which gives  him dynamic control over whether accesses are shallow or deep, and which affects only the speed of execution  of a program, not its semantics.  In addition, multiple processes can be active in the same environment  structure, so long as rerooting is an indivisible operation.  Finally, the concept of rerooting is shown  to combine the concept of shallow binding in Lisp with Dijkstra's display for Algol and hence is a general  model for shallow binding.</abstract>
	<conference>CACM July, 1978</conference>
	<authors>
	<author>Baker, H.G. Jr.</author>
	</authors>
	<keywords>Lisp 1.5, environment trees, FUNARG'S, shallow binding, deep binding, multiprogramming, Algol display</keywords>
	<version>4.13 4.22 4.32</version>
	<location>CA780707 DH February 7, 1979  4:14 PM</location>
	<citations>
	<citation>2625	4	3081</citation>
	<citation>2922	4	3081</citation>
	<citation>3081	4	3081</citation>
	<citation>3101	4	3081</citation>
	<citation>3112	4	3081</citation>
	<citation>2438	5	3081</citation>
	<citation>3081	5	3081</citation>
	<citation>3081	5	3081</citation>
	<citation>3081	5	3081</citation>
	</citations>
	</document>
	<document id= '3080'>
	<title>Proving the Correctness of Heuristically Optimized Code</title>
	<abstract>A system for proving that programs written in a high level language are correctly translated  to a low level language is described.  A primary use of the system is as a post optimization step in code  generation.  The low level language programs need not be generated by a compiler and in fact could be  hand coded.  Examples of the usefulness of such a system are given.  Some interesting results are the  ability to handle programs that implement recursion by bypassing the start of the program, and the detection  and pinpointing of a wide class of errors in the low level language programs.  The examples demonstrate  that optimization of the genre of this paper can result in substantially faster operation and the saving  of memory in terms of program and stack sizes.</abstract>
	<conference>CACM July, 1978</conference>
	<authors>
	<author>Samet, H.</author>
	</authors>
	<keywords>Compilers, correctness, code optimization, debugging, program verification, Lisp</keywords>
	<version>4.12 4.21 4.22 5.24</version>
	<location>CA780708 DH February 7, 1979  3:53 PM</location>
	<citations>
	<citation>1024	4	3080</citation>
	<citation>1051	4	3080</citation>
	<citation>1102	4	3080</citation>
	<citation>1132	4	3080</citation>
	<citation>1390	4	3080</citation>
	<citation>1486	4	3080</citation>
	<citation>1549	4	3080</citation>
	<citation>1706	4	3080</citation>
	<citation>1826	4	3080</citation>
	<citation>1878	4	3080</citation>
	<citation>378	4	3080</citation>
	<citation>2060	4	3080</citation>
	<citation>2155	4	3080</citation>
	<citation>2168	4	3080</citation>
	<citation>2719	4	3080</citation>
	<citation>2723	4	3080</citation>
	<citation>2838	4	3080</citation>
	<citation>2842	4	3080</citation>
	<citation>2855	4	3080</citation>
	<citation>2879	4	3080</citation>
	<citation>3077	4	3080</citation>
	<citation>3080	4	3080</citation>
	<citation>3080	4	3080</citation>
	<citation>3106	4	3080</citation>
	<citation>627	4	3080</citation>
	<citation>106	4	3080</citation>
	<citation>210	5	3080</citation>
	<citation>2850	5	3080</citation>
	<citation>3080	5	3080</citation>
	<citation>3080	5	3080</citation>
	<citation>3080	5	3080</citation>
	</citations>
	</document>
	<document id= '3079'>
	<title>An Algorithm for Reasoning About Equality</title>
	<abstract>A simple technique for reasoning about equalities that is fast and complete for ground formulas  with function symbols and equality is presented.  A proof of correctness is given as well.</abstract>
	<conference>CACM July, 1978</conference>
	<authors>
	<author>Shostak, R.E.</author>
	</authors>
	<keywords>Theorem proving, deduction, program verification, equality</keywords>
	<version>3.64 3.66 5.21</version>
	<location>CA780709 DH February 7, 1979  3:41 PM</location>
	<citations>
	<citation>3079	5	3079</citation>
	<citation>3079	5	3079</citation>
	<citation>3079	5	3079</citation>
	</citations>
	</document>
	<document id= '3078'>
	<title>Analysis of the Availability of Computer Systems Using Computer- Aided Algebra</title>
	<abstract>Analytical results, related to the availability of a computer system constructed of unreliable  processors, are presented in this paper.  These results are obtained by using various computer-aided  algebraic manipulation techniques.  A major purpose of this paper is to demonstrate that the difficulties  of obtaining analytical solutions to Markov processes can be considerably reduced by the application  of symbol manipulation programs.  Since many physical systems can be modeled by Markov and semi-Markov  processes, the potential range of application of these techniques is much wider than the problem of availability  analyzed here.</abstract>
	<conference>CACM July, 1978</conference>
	<authors>
	<author>Chattergy, R.</author>
	<author>Pooch, U.W.</author>
	</authors>
	<keywords>Computer-aided algebra, symbol manipulation, Markov process, reliability, redundant structures,  on-line computer system.</keywords>
	<version>3.82 5.5 5.7 8.1 8.3</version>
	<location>CA780710 DH February 7, 1979 3:37 PM</location>
	<citations>
	<citation>3078	5	3078</citation>
	<citation>3078	5	3078</citation>
	<citation>3078	5	3078</citation>
	</citations>
	</document>
	<document id= '3077'>
	<title>Can Programming Be Liberated from the von Neumann Style?  A Functional Style and Its Algebra  of Programs</title>
	<abstract>Conventional programming languages are growing ever more enormous, but not stronger.  Inherent  defects at the most basic level cause them to be both fat and weak: their primitive word-at-a-time style  of programming inherited from their common ancestor-the von Neumann computer, their close coupling off  semantics to state transitions, their division of programming into a world of expressions and a world  of statements, their inability to effectively use powerful combining forms for building new programs  from existing ones, and their lack of useful mathematical properties for reasoning about programs. An  alternative functional style of programming is founded on the use of combining forms for creating programs.   Functional programs deal with structured data, are often nonrepetitive and nonrecursive, are hierarchically  constructed, do not name their arguments, and do not require the complex machinery of procedure declarations  to become generally applicable.  Combining forms can use high level programs to build still higher level ones in a style not possible in conventional languages.  Associated with the functional style of programming  is an algebra of programs whose variables range over programs and whose operations are combining forms.   This algebra can be used to transform programs and to solve equations whose "unknowns" are programs  in much the same way one transforms equations in high school algebra.  These transformations are given  by algebraic laws and are carried out in the same language in which programs are written.  Combining  forms are chosen not only for their programming power but also for the power of their associated algebraic  laws.  General theorems of of the algebra give the detailed behavior and termination conditions for large  classes of programs.  A new class of computing systems uses the functional programming style both in  its programming language and in its state transition rules.  Unlike von Neumann languages, these systems  have semantics loosely coupled to states-only one state transition occurs per major computation.</abstract>
	<conference>CACM August, 1978</conference>
	<authors>
	<author>Backus, J.</author>
	</authors>
	<keywords>Functional programming, algebra of programs, combining forms, functional forms, programming languages,  von Neumann computers, von Neumann languages, models of computing systems, applicative computing systems,  applicative state transition systems, program transformation, program correctness, program termination,  metacomposition</keywords>
	<version>4.20 4.29 5.20 5.24 5.26</version>
	<location>CA780801 DH February 7, 1979  3:13 PM</location>
	<citations>
	<citation>1024	4	3077</citation>
	<citation>1051	4	3077</citation>
	<citation>1102	4	3077</citation>
	<citation>1132	4	3077</citation>
	<citation>1390	4	3077</citation>
	<citation>1486	4	3077</citation>
	<citation>1549	4	3077</citation>
	<citation>1706	4	3077</citation>
	<citation>1826	4	3077</citation>
	<citation>1878	4	3077</citation>
	<citation>378	4	3077</citation>
	<citation>2021	4	3077</citation>
	<citation>2060	4	3077</citation>
	<citation>2155	4	3077</citation>
	<citation>2155	4	3077</citation>
	<citation>2168	4	3077</citation>
	<citation>2222	4	3077</citation>
	<citation>2227	4	3077</citation>
	<citation>2294	4	3077</citation>
	<citation>2315	4	3077</citation>
	<citation>2326	4	3077</citation>
	<citation>2470	4	3077</citation>
	<citation>2558	4	3077</citation>
	<citation>2719	4	3077</citation>
	<citation>2723	4	3077</citation>
	<citation>2732	4	3077</citation>
	<citation>2838	4	3077</citation>
	<citation>2842	4	3077</citation>
	<citation>2842	4	3077</citation>
	<citation>2855	4	3077</citation>
	<citation>2865	4	3077</citation>
	<citation>2879	4	3077</citation>
	<citation>2896	4	3077</citation>
	<citation>2943	4	3077</citation>
	<citation>2981	4	3077</citation>
	<citation>3014	4	3077</citation>
	<citation>3030	4	3077</citation>
	<citation>3068	4	3077</citation>
	<citation>3077	4	3077</citation>
	<citation>3077	4	3077</citation>
	<citation>3077	4	3077</citation>
	<citation>3077	4	3077</citation>
	<citation>3080	4	3077</citation>
	<citation>3104	4	3077</citation>
	<citation>3106	4	3077</citation>
	<citation>3143	4	3077</citation>
	<citation>3150	4	3077</citation>
	<citation>627	4	3077</citation>
	<citation>106	4	3077</citation>
	<citation>210	5	3077</citation>
	<citation>1834	5	3077</citation>
	<citation>2060	5	3077</citation>
	<citation>2457	5	3077</citation>
	<citation>3077	5	3077</citation>
	<citation>3077	5	3077</citation>
	<citation>3077	5	3077</citation>
	</citations>
	</document>
	<document id= '3076'>
	<title>Value Conflicts and Social Choice in Electronic Funds Transfer System Developments</title>
	<abstract>During the last few years, computer-based systems which automate the transfer and recording  of debits and credits have begun to be implemented on a large scale.  These systems promise both financial  benefits for the institutions that use them and potential conveniences to their customers.  However,  they also raise significant social, legal, and technical questions that must be resolved if full scale  systems for Electronic Funds Transfer (EFT) are not to cause more problems for the larger public than  they solve.  This paper examines the incentives for EFT developments and the social problems they raise  in the context of conflicts between five different value positions that are often implicit in analyses  of proposed EFT arrangements.  These conflicts reflect the relative importance of certain problems for  specific groups.  The value positions implicit in EFT proposals help to organize analyses of market arrangements,  system reliability, and privacy of transactions.  These topics are analyzed in this article and related  to the value positions held by concerned parties.  Last, the ways in which the public can learn about  the social qualities of different EFT arrangements and the pace of EFT developments are both discussed  in the context of social choice.</abstract>
	<conference>CACM August, 1978</conference>
	<authors>
	<author>Kling, R.</author>
	</authors>
	<keywords>Electronic funds transfer systems, social impacts of computing, privacy, social choice, computer  networks, network reliability, security, social values</keywords>
	<version>2.11 2.12 2.3 3.52 3.53 3.55</version>
	<location>CA780802 DH February 7, 1979  2:25 PM</location>
	<citations>
	<citation>2756	4	3076</citation>
	<citation>3076	4	3076</citation>
	<citation>3076	4	3076</citation>
	<citation>3179	4	3076</citation>
	<citation>2607	5	3076</citation>
	<citation>2840	5	3076</citation>
	<citation>3076	5	3076</citation>
	<citation>3076	5	3076</citation>
	<citation>3076	5	3076</citation>
	<citation>3142	5	3076</citation>
	<citation>3179	5	3076</citation>
	<citation>3178	5	3076</citation>
	<citation>3182	5	3076</citation>
	<citation>3183	5	3076</citation>
	<citation>2572	6	3076</citation>
	<citation>2583	6	3076</citation>
	<citation>2607	6	3076</citation>
	<citation>3076	6	3076</citation>
	<citation>3076	6	3076</citation>
	<citation>3076	6	3076</citation>
	<citation>3076	6	3076</citation>
	<citation>3076	6	3076</citation>
	<citation>3140	6	3076</citation>
	<citation>3142	6	3076</citation>
	<citation>3179	6	3076</citation>
	<citation>3180	6	3076</citation>
	<citation>3181	6	3076</citation>
	<citation>3182	6	3076</citation>
	</citations>
	</document>
	<document id= '3075'>
	<title>Fast Parallel Sorting Algorithms</title>
	<abstract>A parallel bucket-sort algorithm is presented that requires time O(log n) and the use of n  processors.  The algorithm makes use of a technique that requires more space than the product of processors  and time.  A realistic model is used model is used in which no memory contention is permitted.  A procedure  is also presented to sort n numbers in time O(k log n) using n 1 + 1/k processors, for k an arbitrary  integer.  The model of computation for this procedure permits simultaneous fetches from the same memory  location.</abstract>
	<conference>CACM August, 1978</conference>
	<authors>
	<author>Hirschberg, D.S.</author>
	</authors>
	<keywords>Parallel processing, sorting, algorithms, bucket sort</keywords>
	<version>3.74 4.34 5.25 5.31</version>
	<location>CA780803 DH February 7, 1979  10:25 AM</location>
	<citations>
	<citation>2714	4	3075</citation>
	<citation>3075	4	3075</citation>
	<citation>3075	4	3075</citation>
	<citation>3075	4	3075</citation>
	<citation>3075	4	3075</citation>
	<citation>3085	4	3075</citation>
	<citation>3156	4	3075</citation>
	<citation>2289	5	3075</citation>
	<citation>2557	5	3075</citation>
	<citation>2664	5	3075</citation>
	<citation>2714	5	3075</citation>
	<citation>3075	5	3075</citation>
	<citation>3075	5	3075</citation>
	<citation>3075	5	3075</citation>
	<citation>3156	5	3075</citation>
	<citation>2289	6	3075</citation>
	<citation>2973	6	3075</citation>
	<citation>3075	6	3075</citation>
	</citations>
	</document>
	<document id= '3074'>
	<title>A Time- and Space- Efficient Garbage Compaction Algorithm</title>
	<abstract>Given an area of storage containing scattered, marked nodes of differing sizes, one may wish  to rearrange them into a compact mass at one end of the area while revising all pointers to marked nodes  to show their new locations.  An algorithm is described here which accomplishes this task in linear time  relative to the size of the storage area, and in a space of the order of one bit for each pointer.  The  algorithm operates by reversibly encoding the situation (that a collection of locations point to a single  location) by a linear list, emanating from the pointed-to location, passing through the pointing locations,  and terminating with the pointed-to location's transplanted contents.</abstract>
	<conference>CACM August, 1978</conference>
	<authors>
	<author>Morris, F.L.</author>
	</authors>
	<keywords>Garbage collection, compaction, compact ification, storage reclamation, storage allocation, record  structures, relocation, list processing, free storage, pointers, data structures</keywords>
	<version>4.34 4.49 5.32</version>
	<location>CA780804 DH February 7, 1979  10:16 AM</location>
	<citations>
	<citation>1972	4	3074</citation>
	<citation>1972	4	3074</citation>
	<citation>2156	4	3074</citation>
	<citation>2156	4	3074</citation>
	<citation>2168	4	3074</citation>
	<citation>2249	4	3074</citation>
	<citation>2361	4	3074</citation>
	<citation>2438	4	3074</citation>
	<citation>2513	4	3074</citation>
	<citation>2723	4	3074</citation>
	<citation>2736	4	3074</citation>
	<citation>2736	4	3074</citation>
	<citation>2736	4	3074</citation>
	<citation>2833	4	3074</citation>
	<citation>2838	4	3074</citation>
	<citation>2855	4	3074</citation>
	<citation>2855	4	3074</citation>
	<citation>2896	4	3074</citation>
	<citation>3039	4	3074</citation>
	<citation>3074	4	3074</citation>
	<citation>3074	4	3074</citation>
	<citation>3074	4	3074</citation>
	<citation>3074	4	3074</citation>
	<citation>3106	4	3074</citation>
	<citation>3112	4	3074</citation>
	<citation>3112	4	3074</citation>
	<citation>3112	4	3074</citation>
	<citation>1826	5	3074</citation>
	<citation>1853	5	3074</citation>
	<citation>1972	5	3074</citation>
	<citation>2723	5	3074</citation>
	<citation>3074	5	3074</citation>
	<citation>3074	5	3074</citation>
	<citation>3074	5	3074</citation>
	</citations>
	</document>
	<document id= '3073'>
	<title>Communicating Sequential Processes</title>
	<abstract>This paper suggests that input and output are basic primitives of programming and that parallel  composition of communicating sequential processes is a fundamental program structuring method.  When  combined with a development of Dijkstra's guarded command, these concepts are surprisingly versatile.   Their use is illustrated by sample solutions of a variety of familiar programming exercises.</abstract>
	<conference>CACM August, 1978</conference>
	<authors>
	<author>Hoare, C.A.R.</author>
	</authors>
	<keywords>Programming, programming languages, programming primitives, program structures, parallel programming,  concurrency, input, output, guarded commands, nondeterminacy, coroutines, procedures, multiple entries,  multiple exits, classes, data representations, recursion, conditional critical regions, monitors, iterative  arrays</keywords>
	<version>4.20 4.22 4.32</version>
	<location>CA780805 DH February 7, 1979  10:07 AM</location>
	<citations>
	<citation>249	4	3073</citation>
	<citation>254	4	3073</citation>
	<citation>272	4	3073</citation>
	<citation>1102	4	3073</citation>
	<citation>1109	4	3073</citation>
	<citation>1140	4	3073</citation>
	<citation>1188	4	3073</citation>
	<citation>1306	4	3073</citation>
	<citation>1323	4	3073</citation>
	<citation>1358	4	3073</citation>
	<citation>1380	4	3073</citation>
	<citation>1464	4	3073</citation>
	<citation>1491	4	3073</citation>
	<citation>1665	4	3073</citation>
	<citation>1767	4	3073</citation>
	<citation>1781	4	3073</citation>
	<citation>1781	4	3073</citation>
	<citation>1787	4	3073</citation>
	<citation>1787	4	3073</citation>
	<citation>1949	4	3073</citation>
	<citation>1989	4	3073</citation>
	<citation>321	4	3073</citation>
	<citation>2059	4	3073</citation>
	<citation>2112	4	3073</citation>
	<citation>2126	4	3073</citation>
	<citation>2534	4	3073</citation>
	<citation>2541	4	3073</citation>
	<citation>435	4	3073</citation>
	<citation>437	4	3073</citation>
	<citation>463	4	3073</citation>
	<citation>483	4	3073</citation>
	<citation>491	4	3073</citation>
	<citation>2698	4	3073</citation>
	<citation>2732	4	3073</citation>
	<citation>2733	4	3073</citation>
	<citation>2820	4	3073</citation>
	<citation>2896	4	3073</citation>
	<citation>2972	4	3073</citation>
	<citation>560	4	3073</citation>
	<citation>583	4	3073</citation>
	<citation>3037	4	3073</citation>
	<citation>3039	4	3073</citation>
	<citation>3043	4	3073</citation>
	<citation>3073	4	3073</citation>
	<citation>3073	4	3073</citation>
	<citation>3073	4	3073</citation>
	<citation>3155	4	3073</citation>
	<citation>627	4	3073</citation>
	<citation>631	4	3073</citation>
	<citation>632	4	3073</citation>
	<citation>642	4	3073</citation>
	<citation>644	4	3073</citation>
	<citation>653	4	3073</citation>
	<citation>680	4	3073</citation>
	<citation>761	4	3073</citation>
	<citation>762	4	3073</citation>
	<citation>763	4	3073</citation>
	<citation>123	4	3073</citation>
	<citation>140	4	3073</citation>
	<citation>919	4	3073</citation>
	<citation>989	4	3073</citation>
	<citation>196	5	3073</citation>
	<citation>2732	5	3073</citation>
	<citation>3073	5	3073</citation>
	<citation>3073	5	3073</citation>
	<citation>3073	5	3073</citation>
	<citation>3148	5	3073</citation>
	<citation>3150	5	3073</citation>
	<citation>3155	5	3073</citation>
	<citation>799	5	3073</citation>
	<citation>1860	6	3073</citation>
	<citation>2060	6	3073</citation>
	<citation>2204	6	3073</citation>
	<citation>2247	6	3073</citation>
	<citation>2704	6	3073</citation>
	<citation>2817	6	3073</citation>
	<citation>2842	6	3073</citation>
	<citation>2865	6	3073</citation>
	<citation>2939	6	3073</citation>
	<citation>2939	6	3073</citation>
	<citation>2940	6	3073</citation>
	<citation>2941	6	3073</citation>
	<citation>2943	6	3073</citation>
	<citation>3073	6	3073</citation>
	<citation>3073	6	3073</citation>
	<citation>3073	6	3073</citation>
	<citation>3148	6	3073</citation>
	<citation>799	6	3073</citation>
	</citations>
	</document>
	<document id= '3072'>
	<title>Feedback Coupled Resource Allocation Policies in the Multiprogramming- Multiprocessor Computer  System</title>
	<abstract>Model studies of some integrated, feedback-driven scheduling systems for multiprogrammed- multiprocessor  computer systems are presented.  The basic control variables used are the data-flow rates for the processes  executing on the CPU.  The model systems feature simulated continuous-flow and preempt-resume scheduling  of input-output activity.  Attention is given to the amount of memory resource required for effective  processing of the I/O activity (buffer space assignment).  The model studies used both distribution-driven  and trace-driven techniques.  Even relatively simple dynamic schedulers are shown to improve system performance  (as measured by user CPU time) over that given by optimal or near-optimal static schedulers imbeded  in identical system structures and workload environments.  The improvement is greatest under a heavy  I/O demand workload.</abstract>
	<conference>CACM August, 1978</conference>
	<authors>
	<author>Brice, R.S.</author>
	<author>Browne, J.C.</author>
	</authors>
	<keywords>Integrated schedulers, feedback scheduling, multiprogramming systems, I/O system scheduling</keywords>
	<version>4.32 4.35</version>
	<location>CA780806 DH February 5, 1979  4:01 PM</location>
	<citations>
	<citation>2571	4	3072</citation>
	<citation>2628	4	3072</citation>
	<citation>2891	4	3072</citation>
	<citation>2950	4	3072</citation>
	<citation>3072	4	3072</citation>
	<citation>3072	4	3072</citation>
	<citation>3072	4	3072</citation>
	<citation>3072	4	3072</citation>
	<citation>3119	4	3072</citation>
	<citation>1713	5	3072</citation>
	<citation>2219	5	3072</citation>
	<citation>2245	5	3072</citation>
	<citation>2375	5	3072</citation>
	<citation>3072	5	3072</citation>
	<citation>3072	5	3072</citation>
	<citation>3072	5	3072</citation>
	</citations>
	</document>
	<document id= '3071'>
	<title>An Algorithm Using Symbolic Techniques for the Bel-Petrov Classification of Gravitational Fields</title>
	<abstract>In this note, an algorithm is presented for the symbolic calculation of certain algebraic invariants  of the Weyl tensor which permits the determination of the Bel-Petrov types of a gravitational field.   This algorithm, although more specialized than that of D'Inverno and Russell-Clark, requires neither  the use of a special coordinate system nor the spin coefficient formalism.  The algorithm has been implemented  in FORMAC and is designed to complete the classification scheme proposed by Petrov in his book.  An appendix  contains examples illustrating the use of the algorithm.</abstract>
	<conference>CACM September, 1978</conference>
	<authors>
	<author>Harris, R.A.</author>
	<author>Zund, J.D.</author>
	</authors>
	<keywords>General relativity, Bel-Petrov types, FORMAC, symbolic manipulation, tensors</keywords>
	<version>3.11 3.15 3.17</version>
	<location>CA780901 DH February 5, 1979  3:43 PM</location>
	<citations>
	<citation>2170	4	3071</citation>
	<citation>3071	4	3071</citation>
	<citation>2165	5	3071</citation>
	<citation>3071	5	3071</citation>
	<citation>3071	5	3071</citation>
	<citation>3071	5	3071</citation>
	</citations>
	</document>
	<document id= '3070'>
	<title>Hybrid Simulation Models of Computer Systems</title>
	<abstract>This paper describes the structure and operation of a hybrid simulation model in which both  discrete-event simulation and analytic techniques are combined to produce efficient yet accurate system  models.  In an example based on a simple hypothetical computer system, discrete-event simulation is used  to model the arrival and activation of jobs, and a central-server queueing network models the use of  system processors.  The accuracy and efficiency of the hybrid technique are demonstrated by comparing  the result and computational costs of the hybrid model of the example with those of an equivalent simulation-only  model.</abstract>
	<conference>CACM September, 1978</conference>
	<authors>
	<author>Schwetman, H.D.</author>
	</authors>
	<keywords>Performance evaluation, simulation, queueing network models, central server model</keywords>
	<version>4.32 4.35 8.1</version>
	<location>CA780902 DH February 5, 1979  3:32 PM</location>
	<citations>
	<citation>2712	4	3070</citation>
	<citation>2741	4	3070</citation>
	<citation>3016	4	3070</citation>
	<citation>3059	4	3070</citation>
	<citation>3070	4	3070</citation>
	<citation>3070	4	3070</citation>
	<citation>3070	4	3070</citation>
	<citation>3070	4	3070</citation>
	<citation>3153	4	3070</citation>
	<citation>1805	5	3070</citation>
	<citation>2454	5	3070</citation>
	<citation>2741	5	3070</citation>
	<citation>2988	5	3070</citation>
	<citation>3070	5	3070</citation>
	<citation>3070	5	3070</citation>
	<citation>3070	5	3070</citation>
	</citations>
	</document>
	<document id= '3069'>
	<title>A Practical Interprocedural Data Flow Analysis Algorithm</title>
	<abstract>A new interprocedural  data flow analysis algorithm is presented and analyzed.  The algorithm  associates with each procedure in a program information about which variables may be modified, which  may be used, and which are possibly preserved by a call on the procedure, and all of its subcalls.  The  algorithm is sufficiently powerful to be used on recursive programs and to deal with the sharing of variables  which arises through reference parameters.  The algorithm is unique in that it can compute all of this  information in a single pass, not requiring a prepass to compute calling relationships or sharing patterns.   The algorithm is asymptotically optimal in time complexity.  It has been implemented and is practical  even on programs which are quite large.</abstract>
	<conference>CACM September, 1978</conference>
	<authors>
	<author>Barth, J.M.</author>
	</authors>
	<keywords>Data flow analysis, global flow analysis, optimization, side effects, relations, reference parameters,  incarnations</keywords>
	<version>4.12 4.20</version>
	<location>CA780903 DH February 5, 1979  3:07 PM</location>
	<citations>
	<citation>1086	4	3069</citation>
	<citation>1132	4	3069</citation>
	<citation>1234	4	3069</citation>
	<citation>1263	4	3069</citation>
	<citation>1265	4	3069</citation>
	<citation>1270	4	3069</citation>
	<citation>1323	4	3069</citation>
	<citation>1358	4	3069</citation>
	<citation>1379	4	3069</citation>
	<citation>1380	4	3069</citation>
	<citation>1453	4	3069</citation>
	<citation>1464	4	3069</citation>
	<citation>1484	4	3069</citation>
	<citation>1491	4	3069</citation>
	<citation>1498	4	3069</citation>
	<citation>1613	4	3069</citation>
	<citation>1614	4	3069</citation>
	<citation>1781	4	3069</citation>
	<citation>1825	4	3069</citation>
	<citation>1860	4	3069</citation>
	<citation>2083	4	3069</citation>
	<citation>2178	4	3069</citation>
	<citation>2179	4	3069</citation>
	<citation>2252	4	3069</citation>
	<citation>2325	4	3069</citation>
	<citation>2341	4	3069</citation>
	<citation>2546	4	3069</citation>
	<citation>2645	4	3069</citation>
	<citation>2652	4	3069</citation>
	<citation>2684	4	3069</citation>
	<citation>2842	4	3069</citation>
	<citation>2929	4	3069</citation>
	<citation>2934	4	3069</citation>
	<citation>3069	4	3069</citation>
	<citation>669	4	3069</citation>
	<citation>679	4	3069</citation>
	<citation>691	4	3069</citation>
	<citation>761	4	3069</citation>
	<citation>949	4	3069</citation>
	<citation>989	4	3069</citation>
	<citation>3069	5	3069</citation>
	<citation>3069	5	3069</citation>
	<citation>3069	5	3069</citation>
	<citation>3184	5	3069</citation>
	</citations>
	</document>
	<document id= '3068'>
	<title>A Model for Verification of Data Security in Operating Systems</title>
	<abstract>Program verification applied to kernel architectures forms a promising method for providing  uncircumventably secure, shared computer systems.  A precise definition of data security is developed  here in terms of a general model for operating systems.  This model is suitable as a basis for verifying  many of those properties of an operating system which are necessary to assure reliable enforcement of  security.  The application of this approach to the UCLA secure operating system is also discussed.</abstract>
	<conference>CACM September, 1978</conference>
	<authors>
	<author>Popek, G.J.</author>
	<author>Farber, D.A.</author>
	</authors>
	<keywords>Operating systems, security, protection, program verification</keywords>
	<version>4.35 5.24</version>
	<location>CA780904 DH February 5, 1979  2:40 PM</location>
	<citations>
	<citation>2021	4	3068</citation>
	<citation>2222	4	3068</citation>
	<citation>2227	4	3068</citation>
	<citation>2315	4	3068</citation>
	<citation>2326	4	3068</citation>
	<citation>2470	4	3068</citation>
	<citation>2732	4	3068</citation>
	<citation>2865	4	3068</citation>
	<citation>2896	4	3068</citation>
	<citation>2943	4	3068</citation>
	<citation>3014	4	3068</citation>
	<citation>3068	4	3068</citation>
	<citation>3068	4	3068</citation>
	<citation>3077	4	3068</citation>
	<citation>3143	4	3068</citation>
	<citation>1834	5	3068</citation>
	<citation>2869	5	3068</citation>
	<citation>3068	5	3068</citation>
	<citation>3068	5	3068</citation>
	<citation>3068	5	3068</citation>
	<citation>3105	5	3068</citation>
	<citation>1471	6	3068</citation>
	<citation>2625	6	3068</citation>
	<citation>2632	6	3068</citation>
	<citation>2868	6	3068</citation>
	<citation>2939	6	3068</citation>
	<citation>3068	6	3068</citation>
	</citations>
	</document>
	<document id= '3067'>
	<title>Generalized Working Sets for Segment Reference Strings</title>
	<abstract>The working-set concept is extended for programs that reference segments of different sizes.   The generalized working-set policy (GWS) keeps as its resident set those segments whose retention costs  do not exceed their retrieval costs.  The GWS is a model for the entire class of demand-fetching memory  policies that satisfy a resident-set inclusion property.  A generalized optimal policy (GOPT) is also  defined; at its operating points it minimizes aggregated retention and swapping costs.  Special cases  of the cost structure allow GWS and GOPT to simulate any known stack algorithm, the working set, and  VMIN.  Efficient procedures for computing demand curves showing swapping load as a function of memory  usage are developed for GWS and GOPT policies.  Empirical data from an actual system are included.</abstract>
	<conference>CACM September, 1978</conference>
	<authors>
	<author>Denning, P.J.</author>
	<author>Slutz, D.R.</author>
	</authors>
	<keywords>Database referencing, memory management, optimal memory policies, paging, program behavior, program  measurement, segmentation, working sets</keywords>
	<version>4.30 8.10</version>
	<location>CA780905 DH February 5, 1979  11:20 AM</location>
	<citations>
	<citation>1892	4	3067</citation>
	<citation>1901	4	3067</citation>
	<citation>2085	4	3067</citation>
	<citation>2095	4	3067</citation>
	<citation>2218	4	3067</citation>
	<citation>2277	4	3067</citation>
	<citation>2319	4	3067</citation>
	<citation>2329	4	3067</citation>
	<citation>2358	4	3067</citation>
	<citation>2373	4	3067</citation>
	<citation>2373	4	3067</citation>
	<citation>2374	4	3067</citation>
	<citation>2380	4	3067</citation>
	<citation>2380	4	3067</citation>
	<citation>2434	4	3067</citation>
	<citation>2499	4	3067</citation>
	<citation>2450	4	3067</citation>
	<citation>2450	4	3067</citation>
	<citation>2501	4	3067</citation>
	<citation>2582	4	3067</citation>
	<citation>2595	4	3067</citation>
	<citation>2669	4	3067</citation>
	<citation>2828	4	3067</citation>
	<citation>2863	4	3067</citation>
	<citation>2863	4	3067</citation>
	<citation>2881	4	3067</citation>
	<citation>2928	4	3067</citation>
	<citation>2996	4	3067</citation>
	<citation>2996	4	3067</citation>
	<citation>2996	4	3067</citation>
	<citation>3000	4	3067</citation>
	<citation>3006	4	3067</citation>
	<citation>3006	4	3067</citation>
	<citation>3006	4	3067</citation>
	<citation>3006	4	3067</citation>
	<citation>3067	4	3067</citation>
	<citation>3067	4	3067</citation>
	<citation>3067	4	3067</citation>
	<citation>3067	4	3067</citation>
	<citation>3067	4	3067</citation>
	<citation>3067	4	3067</citation>
	<citation>3067	4	3067</citation>
	<citation>3067	4	3067</citation>
	<citation>1751	5	3067</citation>
	<citation>2373	5	3067</citation>
	<citation>2374	5	3067</citation>
	<citation>2595	5	3067</citation>
	<citation>2682	5	3067</citation>
	<citation>2863	5	3067</citation>
	<citation>2864	5	3067</citation>
	<citation>3006	5	3067</citation>
	<citation>3067	5	3067</citation>
	<citation>3067	5	3067</citation>
	<citation>3067	5	3067</citation>
	</citations>
	</document>
	<document id= '3066'>
	<title>A Controlled Experiment in Program Testing and Code Walkthroughs/Inspections</title>
	<abstract>This paper describes an experiment in program testing, employing 59 highly experienced data  processing professionals using seven methods to test a small PL/I program.  The results show that the  popular code walk through/inspection method was as effective as other computer-based methods in finding  errors and that the most effective methods (in terms of errors found and cost) employed pairs of subjects  who tested the program independently and then pooled their findings.  The study also shows that there  is a tremendous amount of variability among subjects and that the ability to detect certain types of  errors varies from method to method.</abstract>
	<conference>CACM September, 1978</conference>
	<authors>
	<author>Myers, G.J.</author>
	</authors>
	<keywords>Software reliability, program verification, debugging, testing, code walkthroughs, code inspections,  personnel selection</keywords>
	<version>4.6</version>
	<location>CA780906 DH February 5, 1979  10:47 AM</location>
	<citations>
	<citation>3066	5	3066</citation>
	<citation>3066	5	3066</citation>
	<citation>3066	5	3066</citation>
	</citations>
	</document>
	<document id= '3065'>
	<title>Right Brother Trees</title>
	<abstract>Insertion and deletion are provided for the class of right (or one-sided) brother trees which  have O (log n) performance.  The importance of these results stems from the close relationship of right  brother trees which have an insertion algorithm operating in O (log2 n).  Further, although both insertion  and deletion can be  carried out in O (log n) time for right brother trees, it appears that the insertion  algorithm is inherently much more difficult than the deletion algorithm-the reverse of what one usually  obtains.</abstract>
	<conference>CACM September, 1978</conference>
	<authors>
	<author>Ottmann, T.T.</author>
	<author>Six, H.W.</author>
	<author>Wood, D.</author>
	</authors>
	<keywords>Dictionary problem, search trees, AVL trees, brother trees, right-balanced trees,one-sided height-balanced  trees, insertion and deletion algorithms</keywords>
	<version>3.73 3.74 5.31</version>
	<location>CA780807 DH January 29, 1979 7:08 PM</location>
	<citations>
	<citation>3009	4	3065</citation>
	<citation>3042	4	3065</citation>
	<citation>3065	4	3065</citation>
	<citation>3065	4	3065</citation>
	<citation>3096	4	3065</citation>
	<citation>3163	4	3065</citation>
	<citation>3163	4	3065</citation>
	<citation>2839	5	3065</citation>
	<citation>3065	5	3065</citation>
	<citation>3065	5	3065</citation>
	<citation>3065	5	3065</citation>
	<citation>3096	5	3065</citation>
	<citation>3163	5	3065</citation>
	<citation>2839	6	3065</citation>
	<citation>2889	6	3065</citation>
	<citation>3009	6	3065</citation>
	<citation>3065	6	3065</citation>
	<citation>3096	6	3065</citation>
	</citations>
	</document>
	<document id= '3064'>
	<title>Event Manipulation for Discrete Simulations Requiring Large Numbers of Events</title>
	<abstract>The event-manipulation system presented here consists of two major parts.  The first part addresses  the familiar problem of event scheduling efficiency when the number of scheduled events grows large.   The second part deals with the less apparent problem of providing efficiency and flexibility as scheduled  events are accessed to be executed.  Additional features and problems dealt with include the proper handling  of simultaneous events; that certain events must be created, scheduled, and executed at the same points  in simulated time; that infinite loops caused by the concatenation of such "zero-time" events are possible  and must be diagnosed; that maintaining various event counts is practical and economical; and that a  capability for handling  "time-displaceable" events is desirable and possible.</abstract>
	<conference>CACM September, 1978</conference>
	<authors>
	<author>Ulrich, E.G.</author>
	</authors>
	<keywords>Simulation, discrete systems simulation, discrete event simulation, time-flow mechanisms</keywords>
	<version>3.65 3.74 4.22 8.1</version>
	<location>CA780908 DH January 29, 1979  6:46 PM</location>
	<citations>
	<citation>2767	4	3064</citation>
	<citation>2844	4	3064</citation>
	<citation>2844	4	3064</citation>
	<citation>2936	4	3064</citation>
	<citation>2936	4	3064</citation>
	<citation>3051	4	3064</citation>
	<citation>3064	4	3064</citation>
	<citation>3064	4	3064</citation>
	<citation>3064	4	3064</citation>
	<citation>3064	4	3064</citation>
	<citation>3064	4	3064</citation>
	<citation>3109	4	3064</citation>
	<citation>1846	5	3064</citation>
	<citation>1939	5	3064</citation>
	<citation>2742	5	3064</citation>
	<citation>2767	5	3064</citation>
	<citation>2936	5	3064</citation>
	<citation>3064	5	3064</citation>
	<citation>3064	5	3064</citation>
	<citation>3064	5	3064</citation>
	</citations>
	</document>
	<document id= '3063'>
	<title>A Note on Virtual Memory Indexes</title>
	<abstract>None</abstract>
	<conference>CACM September, 1978</conference>
	<authors>
	<author>Maly, K.</author>
	</authors>
	<keywords>Index, B-tree, pages, file organization, linked representation, maintenance costs</keywords>
	<version>3.02 3.50 3.51 3.73 3.74</version>
	<location>CA780909 DH January 29, 1979  6:36 PM</location>
	<citations>
	<citation>3058	4	3063</citation>
	<citation>3063	4	3063</citation>
	<citation>2978	5	3063</citation>
	<citation>3063	5	3063</citation>
	<citation>3063	5	3063</citation>
	<citation>3063	5	3063</citation>
	</citations>
	</document>
	<document id= '3062'>
	<title>Real Time Plotting of Approximate Contour Maps</title>
	<abstract>None</abstract>
	<conference>CACM September, 1978</conference>
	<authors>
	<author>Ward, S.A.</author>
	</authors>
	<keywords>Contour map, digital plotting, graphical characters</keywords>
	<version>3.10 3.20 4.41 8.2</version>
	<location>CA780910 DH January 29, 1979  6:33 PM</location>
	<citations>
	<citation>2287	4	3062</citation>
	<citation>2547	4	3062</citation>
	<citation>3062	4	3062</citation>
	<citation>3062	4	3062</citation>
	<citation>1871	5	3062</citation>
	<citation>1925	5	3062</citation>
	<citation>3062	5	3062</citation>
	<citation>3062	5	3062</citation>
	<citation>3062	5	3062</citation>
	</citations>
	</document>
	<document id= '3061'>
	<title>Simulations of Dynamic Sequential Search Algorithms</title>
	<abstract>None</abstract>
	<conference>CACM September, 1978</conference>
	<authors>
	<author>Tenenbaum, A.</author>
	</authors>
	<keywords>Searching, list processing, sequential searching, dynamic reordering, simulation</keywords>
	<version>3.74 8.1</version>
	<location>CA780911 DH January 29, 1979  6:30 PM</location>
	<citations>
	<citation>3061	4	3061</citation>
	<citation>2885	5	3061</citation>
	<citation>3061	5	3061</citation>
	<citation>3061	5	3061</citation>
	<citation>3061	5	3061</citation>
	</citations>
	</document>
	<document id= '3060'>
	<title>Fortran 77</title>
	<abstract>There is a new standard Fortran.  The official title is "American National Standard Programming  Language Fortran, X3.9-1978," but it is more commonly referred to as "Fortran 77," since its development  was completed in 1977.  It replaces the Fortran standard designated X3.9-1966.  This paper describes  many of the features of Fortran 77 and also provides some information about how and why the standard  was developed.</abstract>
	<conference>CACM October, 1978</conference>
	<authors>
	<author>Brainerd, W.</author>
	</authors>
	<keywords>None</keywords>
	<version>None</version>
	<location>CA781001 DH January 29, 1979  6:28 PM</location>
	<citations>
	<citation>1613	4	3060</citation>
	<citation>1646	4	3060</citation>
	<citation>1900	4	3060</citation>
	<citation>1955	4	3060</citation>
	<citation>2025	4	3060</citation>
	<citation>2154	4	3060</citation>
	<citation>2154	4	3060</citation>
	<citation>2365	4	3060</citation>
	<citation>2506	4	3060</citation>
	<citation>2915	4	3060</citation>
	<citation>3060	4	3060</citation>
	<citation>3060	4	3060</citation>
	<citation>3060	4	3060</citation>
	<citation>987	5	3060</citation>
	<citation>1900	5	3060</citation>
	<citation>2154	5	3060</citation>
	<citation>3060	5	3060</citation>
	<citation>3060	5	3060</citation>
	<citation>3060	5	3060</citation>
	</citations>
	</document>
	<document id= '3059'>
	<title>Models for Parallel Processing WIthin Programs: Application to CPU:I/O and I/O:I/O Overlap</title>
	<abstract>Approximate queueing models for internal parallel processing by individual programs in a multiprogrammed  system are developed in this paper.  The solution technique is developed by network decomposition.  The  models are formulated in terms of CPU:I/O and I/O:I/O overlap and applied to the analysis of these problems.   The percentage performance improvement from CPU:I/O overlap is found to be greatest for systems which  are in approximate CPU:I/O utilization balance and for low degrees of multiprogramming.  The percentage  improvement from I/O:I/O overlap is found to be greatest for systemtems in which the I/O system is more  utilized than the CPU.</abstract>
	<conference>CACM October, 1978</conference>
	<authors>
	<author>Towsley, D.</author>
	<author>Chandy, K.M.</author>
	<author>Browne, J.C.</author>
	</authors>
	<keywords>Multiprogramming, parallel processing, queueing network models, multiprocessing of computation  and I/O</keywords>
	<version>4.32 8.1</version>
	<location>CA781002 DH January 29, 1979  6:23 PM</location>
	<citations>
	<citation>3059	4	3059</citation>
	<citation>3070	4	3059</citation>
	<citation>1685	5	3059</citation>
	<citation>2988	5	3059</citation>
	<citation>3059	5	3059</citation>
	<citation>3059	5	3059</citation>
	<citation>3059	5	3059</citation>
	<citation>3059	6	3059</citation>
	</citations>
	</document>
	<document id= '3058'>
	<title>Jump Searching: A Fast Sequential Search Technique</title>
	<abstract>When sequential file structures must be used and binary searching is not feasible, jump searching  becomes an appealing alternative.  This paper explores variants of the classic jump searching scheme  where the optimum jump size is the square root of the number of records.  Multiple level and variable  size jump strategies are explored, appropriate applications are discussed and performance is evaluated.</abstract>
	<conference>CACM October, 1978</conference>
	<authors>
	<author>Shneiderman, B.</author>
	</authors>
	<keywords>Jump searching, sequential files, file management, search strategies, database structures, index  searching</keywords>
	<version>3.74 4.34</version>
	<location>CA781003 DH January 29, 1979  6:15 PM</location>
	<citations>
	<citation>3058	4	3058</citation>
	<citation>3063	4	3058</citation>
	<citation>2978	5	3058</citation>
	<citation>3058	5	3058</citation>
	<citation>3058	5	3058</citation>
	<citation>3058	5	3058</citation>
	</citations>
	</document>
	<document id= '3057'>
	<title>Optimal His togram Matching by Monotone Gray Level Transformation</title>
	<abstract>This paper investigates the problem of optimal his togram matching using monotone gray level  transformation, which always assigns all picture points of a given gray level i to another gray level  T(i) such that if i > j, then T(i) > T(j).  The objective is to find a transformed digital picture of  a given picture such that the sum of absolute errors between the gray level his togram of the transformed  picture and that of a reference picture is minimized.  This is equivalent to placing k1 linearly ordered  objects of different sized one by one into k2 linearly ordered boxes of assorted sizes, such that the  accumulated error of space under packed or overpacked in the boxes is minimized; the placement function  is monotonic, which ensures a polynomial time solution to this problem.  A tree search algorithm for  optimal his togram matching is presented which has time complexity O(k1 x k2).  If the monotone property  is dropped, then the problem becomes NP-complete, even if it is restricted to k2 = 2.</abstract>
	<conference>CACM October, 1978</conference>
	<authors>
	<author>Chang, S.K.</author>
	<author>Wong, Y.W.</author>
	</authors>
	<keywords>Optimal his togram matching, gray level transformation, packing problem, tree searching algorithm,  picture processing</keywords>
	<version>3.24 5.25 5.42</version>
	<location>CA781004 DH January 29, 1979  6:08 PM</location>
	<citations>
	<citation>3057	5	3057</citation>
	<citation>3057	5	3057</citation>
	<citation>3057	5	3057</citation>
	</citations>
	</document>
	<document id= '3056'>
	<title>Counting Large Numbers of Events in Small Registers</title>
	<abstract>It is possible to use a small counter to keep approximate counts of large numbers.  The resulting  expected error can be rather precisely controlled.  An example is given in which 8-bit counters (bytes)  are used to keep track of as many as 130,000 events with a relative error which is substantially independent  of the number n of events.  This relative error can be expected to be 24 percent or less 95 percent of  the time (i.e.o = n/8).  The techniques could be used to advantage in multichannel counting hardware  or software used for the monitoring of experiments or processes.</abstract>
	<conference>CACM October, 1978</conference>
	<authors>
	<author>Morris, R.</author>
	</authors>
	<keywords>Counting</keywords>
	<version>5.11</version>
	<location>CA781005 DH January 29, 1979  5:52 PM</location>
	<citations>
	<citation>3056	5	3056</citation>
	<citation>3056	5	3056</citation>
	<citation>3056	5	3056</citation>
	</citations>
	</document>
	<document id= '3055'>
	<title>An Analysis of Algorithms for the Dutch National Flag Problem</title>
	<abstract>Solutions to the Dutch National Flag Problem have been given by Dijkstra [1] and Meyer [3].   Dijkstra starts with a simple program and arrives at an improved program by refinement.  Both of the  algorithms given by Dijkstra are shown to have an expected number of swaps which is 2/3N + 0(1) and that  these values differ at most by 1/3 of a swap and asymptotically by 1/4 of a swap.  The algorithm of Meyer  is shown to have expected swap complexity 5/9N.</abstract>
	<conference>CACM October, 1978</conference>
	<authors>
	<author>McMaster, C.L.</author>
	</authors>
	<keywords>Algorithmic analysis, Dutch National Flag Problem, refinement, structured programming</keywords>
	<version>4.0 5.24 5.25 5.3</version>
	<location>CA781006 DH January 29, 1979  5:47 PM</location>
	<citations>
	<citation>3055	5	3055</citation>
	<citation>3055	5	3055</citation>
	<citation>3055	5	3055</citation>
	<citation>3170	5	3055</citation>
	<citation>3055	6	3055</citation>
	<citation>3104	6	3055</citation>
	</citations>
	</document>
	<document id= '3054'>
	<title>Implementing Quicksort Programs</title>
	<abstract>This paper is a practical study of how to implement the Quicksort sorting algorithm and its  best variants on real computers, including how to apply various code optimization techniques.  A detailed  implementation combining the most effective improvements to Quicksort is given, along with a discussion  of how to implement it in assembly language.  Analytic results describing the performance of the programs  are summarized.  A variety of special situations are considered from a practical standpoint to illustrate  Quicksort's wide applicability as an internal sorting method which requires negligible extra storage.</abstract>
	<conference>CACM October, 1978</conference>
	<authors>
	<author>Sedgewick, R.</author>
	</authors>
	<keywords>Quicksort, analysis of algorithms, code optimization, sorting</keywords>
	<version>4.0 4.6 5.25 5.31 5.5</version>
	<location>CA781007 DH January 29, 1979  5:40 PM</location>
	<citations>
	<citation>1175	4	3054</citation>
	<citation>1919	4	3054</citation>
	<citation>1919	4	3054</citation>
	<citation>1919	4	3054</citation>
	<citation>1969	4	3054</citation>
	<citation>1969	4	3054</citation>
	<citation>1997	4	3054</citation>
	<citation>1997	4	3054</citation>
	<citation>2118	4	3054</citation>
	<citation>2191	4	3054</citation>
	<citation>2191	4	3054</citation>
	<citation>2216	4	3054</citation>
	<citation>2216	4	3054</citation>
	<citation>2216	4	3054</citation>
	<citation>2227	4	3054</citation>
	<citation>2319	4	3054</citation>
	<citation>2388	4	3054</citation>
	<citation>2388	4	3054</citation>
	<citation>2348	4	3054</citation>
	<citation>2582	4	3054</citation>
	<citation>2669	4	3054</citation>
	<citation>2679	4	3054</citation>
	<citation>2679	4	3054</citation>
	<citation>2679	4	3054</citation>
	<citation>2679	4	3054</citation>
	<citation>2783	4	3054</citation>
	<citation>2783	4	3054</citation>
	<citation>2784	4	3054</citation>
	<citation>3054	4	3054</citation>
	<citation>3054	4	3054</citation>
	<citation>3054	4	3054</citation>
	<citation>3054	4	3054</citation>
	<citation>3054	4	3054</citation>
	<citation>3054	4	3054</citation>
	<citation>3054	4	3054</citation>
	<citation>3054	4	3054</citation>
	<citation>3054	4	3054</citation>
	<citation>3054	4	3054</citation>
	<citation>3054	4	3054</citation>
	<citation>3054	4	3054</citation>
	<citation>3121	4	3054</citation>
	<citation>3121	4	3054</citation>
	<citation>864	4	3054</citation>
	<citation>1175	5	3054</citation>
	<citation>1880	5	3054</citation>
	<citation>1919	5	3054</citation>
	<citation>1969	5	3054</citation>
	<citation>1980	5	3054</citation>
	<citation>1997	5	3054</citation>
	<citation>307	5	3054</citation>
	<citation>308	5	3054</citation>
	<citation>309	5	3054</citation>
	<citation>2017	5	3054</citation>
	<citation>2679	5	3054</citation>
	<citation>3054	5	3054</citation>
	<citation>3054	5	3054</citation>
	<citation>3054	5	3054</citation>
	<citation>776	5	3054</citation>
	</citations>
	</document>
	<document id= '3053'>
	<title>Packed Scatter Tables</title>
	<abstract>Scatter tables for open addressing benefit from recursive entry displacements, cutoffs for  unsuccessful searches, and auxiliary cost functions.  Compared with conventional methods, the new techniques  provide substantially improved tables that resemble exact-solution optimal packings.  The displacements  are depth-limited approximations to an enumerative (exhaustive) optimization, although packing costs  remain linear-O(n)-with table size n.  The techniques are primarily suited for important fixed (but possibly  quite large) tables for which reference frequencies may be known: op-code tables,spelling dictionaries,  access arrays.  Introduction of frequency weights further improves retrievals, but the enhancement may  degrade cutoffs.</abstract>
	<conference>CACM October, 1978</conference>
	<authors>
	<author>Lyon, G.</author>
	</authors>
	<keywords>Assignment problem, backtrack programming, hashing, open addressing, recursion, scatter table rearrangements</keywords>
	<version>3.74 4.0</version>
	<location>CA781008 DH January 29, 1979  5:30 PM</location>
	<citations>
	<citation>1207	4	3053</citation>
	<citation>1208	4	3053</citation>
	<citation>1676	4	3053</citation>
	<citation>1682	4	3053</citation>
	<citation>1728	4	3053</citation>
	<citation>1860	4	3053</citation>
	<citation>1973	4	3053</citation>
	<citation>1973	4	3053</citation>
	<citation>1973	4	3053</citation>
	<citation>1992	4	3053</citation>
	<citation>2018	4	3053</citation>
	<citation>2018	4	3053</citation>
	<citation>2032	4	3053</citation>
	<citation>2033	4	3053</citation>
	<citation>2107	4	3053</citation>
	<citation>2109	4	3053</citation>
	<citation>2138	4	3053</citation>
	<citation>2203	4	3053</citation>
	<citation>2203	4	3053</citation>
	<citation>2203	4	3053</citation>
	<citation>2251	4	3053</citation>
	<citation>2251	4	3053</citation>
	<citation>2251	4	3053</citation>
	<citation>2251	4	3053</citation>
	<citation>2359	4	3053</citation>
	<citation>2412	4	3053</citation>
	<citation>2524	4	3053</citation>
	<citation>2530	4	3053</citation>
	<citation>2534	4	3053</citation>
	<citation>2537	4	3053</citation>
	<citation>2543	4	3053</citation>
	<citation>2543	4	3053</citation>
	<citation>2543	4	3053</citation>
	<citation>2543	4	3053</citation>
	<citation>2552	4	3053</citation>
	<citation>2559	4	3053</citation>
	<citation>2559	4	3053</citation>
	<citation>2559	4	3053</citation>
	<citation>2573	4	3053</citation>
	<citation>2704	4	3053</citation>
	<citation>2770	4	3053</citation>
	<citation>2770	4	3053</citation>
	<citation>2770	4	3053</citation>
	<citation>2770	4	3053</citation>
	<citation>2974	4	3053</citation>
	<citation>2991	4	3053</citation>
	<citation>2991	4	3053</citation>
	<citation>3053	4	3053</citation>
	<citation>3053	4	3053</citation>
	<citation>3053	4	3053</citation>
	<citation>3053	4	3053</citation>
	<citation>3053	4	3053</citation>
	<citation>3053	4	3053</citation>
	<citation>3053	4	3053</citation>
	<citation>3053	4	3053</citation>
	<citation>3053	4	3053</citation>
	<citation>3053	4	3053</citation>
	<citation>3053	4	3053</citation>
	<citation>3083	4	3053</citation>
	<citation>3083	4	3053</citation>
	<citation>3083	4	3053</citation>
	<citation>1329	5	3053</citation>
	<citation>1785	5	3053</citation>
	<citation>1973	5	3053</citation>
	<citation>1992	5	3053</citation>
	<citation>2107	5	3053</citation>
	<citation>2109	5	3053</citation>
	<citation>2412	5	3053</citation>
	<citation>2543	5	3053</citation>
	<citation>2673	5	3053</citation>
	<citation>2707	5	3053</citation>
	<citation>2770	5	3053</citation>
	<citation>3053	5	3053</citation>
	<citation>3053	5	3053</citation>
	<citation>3053	5	3053</citation>
	</citations>
	</document>
	<document id= '3052'>
	<title>Cold-Start vs. Warm-Start Miss Ratios</title>
	<abstract>In a two-level computer storage hierarchy, miss ratio measurements are often made from a "cold  start," that is made with the first-level  store initially empty.  For large capacities the effect on  the measured miss ratio of the misses incurred while filling the first-level store can be significant,  even for long reference strings.  Use of "warm-start" rather than "cold-start" miss ratios cast doubt  on the widespread belief that the observed "S-shape" of lifetime (reciprocal of miss ratio) versus capacity  curve indicates a property of behavior of programs that maintain a constant number of pages in main storage.   On the other hand, if cold-start miss ratios are measured as a function of capacity and measurement  length, then they are useful in studying systems in which operation of a program is periodically interrupted  by task switches.  It is shown how to obtain, under simple assumptions, the cache miss ratio for multiprogramming  from cold-start miss ratio values and how to obtain approximate cold-start miss ratios from warm-start  miss ratios.</abstract>
	<conference>CACM October, 1978</conference>
	<authors>
	<author>Easton, M.C.</author>
	<author>Fagin, R.</author>
	</authors>
	<keywords>Miss ratio, cold start, warm start, storage hierarchy, lifetime function, multiprogramming, S-shape</keywords>
	<version>3.70 4.32 9.35</version>
	<location>CA781009 DH January 29, 1979  5:16 PM</location>
	<citations>
	<citation>2374	4	3052</citation>
	<citation>2481	4	3052</citation>
	<citation>2669	4	3052</citation>
	<citation>2863	4	3052</citation>
	<citation>3016	4	3052</citation>
	<citation>3052	4	3052</citation>
	<citation>1901	5	3052</citation>
	<citation>3052	5	3052</citation>
	<citation>3052	5	3052</citation>
	<citation>3052	5	3052</citation>
	</citations>
	</document>
	<document id= '3051'>
	<title>A Comparison of Heaps and the TL Structure for the SImulation Event Set</title>
	<abstract>None</abstract>
	<conference>CACM October, 1978</conference>
	<authors>
	<author>Franta, W.R.</author>
	<author>Maly, K.</author>
	</authors>
	<keywords>Simulation,event set, heaps, TL structure</keywords>
	<version>3.34 4.22 5.5 8.1</version>
	<location>CA781010 DH January 29, 1979  11:51 AM</location>
	<citations>
	<citation>2844	4	3051</citation>
	<citation>2936	4	3051</citation>
	<citation>3051	4	3051</citation>
	<citation>3051	4	3051</citation>
	<citation>3064	4	3051</citation>
	<citation>3109	4	3051</citation>
	<citation>3109	4	3051</citation>
	<citation>2767	5	3051</citation>
	<citation>2844	5	3051</citation>
	<citation>3051	5	3051</citation>
	<citation>3051	5	3051</citation>
	<citation>3051	5	3051</citation>
	</citations>
	</document>
	<document id= '3050'>
	<title>Systems Design Education: A Gaming Approach</title>
	<abstract>One of the problems facing managers of computer installations is the problem of configuring  the computer system to meet the demands made by the mix of jobs that the computer center must service.   This paper presents a management game that allows the player to configure a computer system to meet  a hypothetical job mix is under the control of a game administrator and can be varied to simulate a variety  of real-world situations (I/O bound jobs, compute bound jobs, etc.).  The player of the game receives  a set of detailed reports on the cost of his choices and a simulated run of the center operating under  his choices.</abstract>
	<conference>CACM November, 1978</conference>
	<authors>
	<author>Lyons, N.R.</author>
	</authors>
	<keywords>System design, configuration, management game</keywords>
	<version>2.43 2.44</version>
	<location>CA781101 DH January 29, 1979  11:43 AM</location>
	<citations>
	<citation>2407	4	3050</citation>
	<citation>2852	4	3050</citation>
	<citation>2852	4	3050</citation>
	<citation>3003	4	3050</citation>
	<citation>3011	4	3050</citation>
	<citation>3050	4	3050</citation>
	<citation>3050	4	3050</citation>
	<citation>2345	5	3050</citation>
	<citation>2387	5	3050</citation>
	<citation>3050	5	3050</citation>
	<citation>3050	5	3050</citation>
	<citation>3050	5	3050</citation>
	</citations>
	</document>
	<document id= '3049'>
	<title>A Simply Extended and Modified Batch Environment Graphical System (SEMBEGS)</title>
	<abstract>SEMBEGS is a complete batch environment graphical system containing components for handling  graphical data files, for displaying the contents of these files on a variety of graphical hardware,  and for performing graphical batch input operations.  SEMBEGS is easy to extend and modify to meet the  growing needs of a large batch environment, and is even extendable to a fully interactive system.  The  paper presents the conceptual view of graphics leading to the design of SEMBEGS and outlines the major  components of the system.  The design of SEMBEGS is founded upon the basic assumption that the true aim  of computer graphics is to describe graphical entities, rather than, as commonly held, to provide graphical  input and output functional capabilities.  SEMBEGS is built around a Basic Graphical Data Management  System (BAGDAMS) which provides a common means of communicating the descriptions of graphical entities   between the various components of SEMBEGS.  BAGDAMS provides facilities for storing, retrieving, and  manipulating the descriptions of graphical entities provided by, and received by application programs, graphics packages, and graphical devices.</abstract>
	<conference>CACM November, 1978</conference>
	<authors>
	<author>Wendorf, J.W.</author>
	</authors>
	<keywords>Computer graphics, data structures, graphic display, graphic input, graphical database, device  independent graphics</keywords>
	<version>4.33 4.34 8.2</version>
	<location>CA781102 DH January 26, 1979  1:30 PM</location>
	<citations>
	<citation>3030	4	3049</citation>
	<citation>3031	4	3049</citation>
	<citation>3049	4	3049</citation>
	<citation>3049	4	3049</citation>
	<citation>3049	4	3049</citation>
	<citation>3049	4	3049</citation>
	<citation>2956	5	3049</citation>
	<citation>2957	5	3049</citation>
	<citation>2958	5	3049</citation>
	<citation>2960	5	3049</citation>
	<citation>3049	5	3049</citation>
	<citation>3049	5	3049</citation>
	<citation>3049	5	3049</citation>
	</citations>
	</document>
	<document id= '3048'>
	<title>Performance Evaluation of Highly Concurrent Computers by Deterministic Simulation</title>
	<abstract>Simulation is presented as a practical technique for performance evaluation of alternative  configurations of highly concurrent computers.  A technique is described for constructing a detailed  deterministic simulation model of a system.  In the model a control stream replaces the instruction and  data streams of the real system.  Simulation of the system model yields the timing and resource usage  statistics needed for performance evaluation, without the necessity of emulating the system.  As a case  study, the implementation of a simulator of a model of the CPU-memory subsystem of the IBM 360/91 is  described.  The results of evaluating some alternative system designs are discussed.  The experiments  reveal that, for the case study, the major bottlenecks in the system are the memory unit and the fixed  point unit.  Further, it appears that many of the sophisticated pipelining and buffering technique simplemented  in the architecture of the IBM 360/91 are of little value when high-speed (cache) memory is used, as  in the IBM 360/195.</abstract>
	<conference>CACM November, 1978</conference>
	<authors>
	<author>Kumar, B.</author>
	<author>Davidson, E.S.</author>
	</authors>
	<keywords>Performance evaluation, deterministic simulation, control stream, concurrent computers</keywords>
	<version>6.20 8.1</version>
	<location>CA781103 DH January 26, 1979  11:26 AM</location>
	<citations>
	<citation>3048	5	3048</citation>
	<citation>3048	5	3048</citation>
	<citation>3048	5	3048</citation>
	</citations>
	</document>
	<document id= '3047'>
	<title>Using Synthetic Images to Register Real Images with Surface Models</title>
	<abstract>A number of image analysis tasks can benefit from registration of the image with a model of  the surface being imaged.  Automatic navigation using visible light or radar images requires exact alignment  of such images with digital terrain models.  In addition, automatic classification of terrain, using  satellite imagery, requires such alignment to deal correctly with the effects of varying sun angle and  surface slope.  Even inspection techniques for certain industrial parts may be improved by this means.  We achieve the required alignment by matching the real image with a synthetic image obtained from a surface  model and known positions of the light sources.  The synthetic image intensity is calculated using the  reflectance map, a convenient way of describing surface reflection as a function of surface gradient.   We illustrate the technique using LANDSAT images and digital terrain models.</abstract>
	<conference>CACM November, 1978</conference>
	<authors>
	<author>Horn, B.K.P.</author>
	<author>Bachman, B.L.</author>
	</authors>
	<keywords>Image registration, synthetic images, surface models, automatic hill shading, digital terrain models,  image transformation, image matching, shaded images</keywords>
	<version>3.63 3.11 3.14 8.2 3.83</version>
	<location>CA781104 DH January 26, 1979  11:16 AM</location>
	<citations>
	<citation>2816	4	3047</citation>
	<citation>2816	4	3047</citation>
	<citation>2828	4	3047</citation>
	<citation>2827	4	3047</citation>
	<citation>2913	4	3047</citation>
	<citation>3047	4	3047</citation>
	<citation>3047	4	3047</citation>
	<citation>2751	5	3047</citation>
	<citation>2829	5	3047</citation>
	<citation>3047	5	3047</citation>
	<citation>3047	5	3047</citation>
	<citation>3047	5	3047</citation>
	</citations>
	</document>
	<document id= '3046'>
	<title>Computer Generation of Gamma Random Variables - II</title>
	<abstract>A rejection method is proposed for generating gamma variates with nonintegral shape parameter  a, a > 1. This method is similar to other methods given by Fishman, Wallace, and Tadikamalla and is faster  than these methods for a> 2.  The core storage requirements and the programming effort for the proposed  method are similar to those of Wallace's or Tadikamalla's methods.  The computational times for the proposed  method remain fairly constant for medium and large values of a and are superior to times obtained by  Ahrens and Dieter's method for all values of a.  The proposed method is simpler than Ahrens and Dieter's  method.</abstract>
	<conference>CACM November, 1978</conference>
	<authors>
	<author>Tadikamalla, P.R.</author>
	</authors>
	<keywords>Gamma variables, rejection method, computer methods</keywords>
	<version>5.5 8.1</version>
	<location>CA781105 DH January 26, 1979  11:02 AM</location>
	<citations>
	<citation>2847	4	3046</citation>
	<citation>2928	4	3046</citation>
	<citation>3046	4	3046</citation>
	<citation>3046	4	3046</citation>
	<citation>3046	4	3046</citation>
	<citation>3098	4	3046</citation>
	<citation>3098	4	3046</citation>
	<citation>3107	4	3046</citation>
	<citation>2569	5	3046</citation>
	<citation>2847	5	3046</citation>
	<citation>3046	5	3046</citation>
	<citation>3046	5	3046</citation>
	<citation>3046	5	3046</citation>
	<citation>3098	5	3046</citation>
	</citations>
	</document>
	<document id= '3045'>
	<title>A Simple Recovery-Only Procedure For SImple Precedence Parsers</title>
	<abstract>A simple method is described enabling simple precedence parsers to recover from syntax errors.   No attempt to repair errors is made, yet parsing and most semantic processing can continue.  The result  is a good "first approximation" to syntax error handling with negligible increase in parsing time, space,  and complexity of both the parser and its table generator.</abstract>
	<conference>CACM November, 1978</conference>
	<authors>
	<author>Ripley, D.G.</author>
	</authors>
	<keywords>Syntax errors, error recovery, parsing, simple precedence, compilers, debugging</keywords>
	<version>4.12 4.42 5.23</version>
	<location>CA781106 DH January 26, 1979  10:52 AM</location>
	<citations>
	<citation>1379	4	3045</citation>
	<citation>1542	4	3045</citation>
	<citation>1683	4	3045</citation>
	<citation>1693	4	3045</citation>
	<citation>1693	4	3045</citation>
	<citation>1781	4	3045</citation>
	<citation>1781	4	3045</citation>
	<citation>1787	4	3045</citation>
	<citation>1836	4	3045</citation>
	<citation>1836	4	3045</citation>
	<citation>1945	4	3045</citation>
	<citation>1945	4	3045</citation>
	<citation>2015	4	3045</citation>
	<citation>2060	4	3045</citation>
	<citation>2060	4	3045</citation>
	<citation>2061	4	3045</citation>
	<citation>2061	4	3045</citation>
	<citation>2082	4	3045</citation>
	<citation>2091	4	3045</citation>
	<citation>2091	4	3045</citation>
	<citation>2152	4	3045</citation>
	<citation>2179	4	3045</citation>
	<citation>2179	4	3045</citation>
	<citation>2340	4	3045</citation>
	<citation>2356	4	3045</citation>
	<citation>2546	4	3045</citation>
	<citation>2546	4	3045</citation>
	<citation>2603	4	3045</citation>
	<citation>2698	4	3045</citation>
	<citation>2698	4	3045</citation>
	<citation>2708	4	3045</citation>
	<citation>2708	4	3045</citation>
	<citation>2708	4	3045</citation>
	<citation>2820	4	3045</citation>
	<citation>2824	4	3045</citation>
	<citation>2971	4	3045</citation>
	<citation>2982	4	3045</citation>
	<citation>2986	4	3045</citation>
	<citation>3045	4	3045</citation>
	<citation>3045	4	3045</citation>
	<citation>3045	4	3045</citation>
	<citation>3093	4	3045</citation>
	<citation>1477	5	3045</citation>
	<citation>1491	5	3045</citation>
	<citation>2534	5	3045</citation>
	<citation>3045	5	3045</citation>
	<citation>3045	5	3045</citation>
	<citation>3045	5	3045</citation>
	</citations>
	</document>
	<document id= '3044'>
	<title>A Note on Conditional Expressions</title>
	<abstract>Evaluation of a conditional expression may succeed even when the "deciding predicate" diverges  and the alternatives are records (or nodes) whose fields have different content.</abstract>
	<conference>CACM November, 1978</conference>
	<authors>
	<author>Friedman, D.P.</author>
	<author>Wise, D.S.</author>
	</authors>
	<keywords>Parallel evaluation, suspending cons, Lisp, conditional forms, if-then-else, ambiguous function, infinite structures</keywords>
	<version>4.2 4.13 4.32 5.24</version>
	<location>CA781107 DH January 26, 1979  10:44 AM</location>
	<citations>
	<citation>1469	4	3044</citation>
	<citation>1486	4	3044</citation>
	<citation>1491	4	3044</citation>
	<citation>1781	4	3044</citation>
	<citation>2178	4	3044</citation>
	<citation>2326	4	3044</citation>
	<citation>2470	4	3044</citation>
	<citation>2684	4	3044</citation>
	<citation>3044	4	3044</citation>
	<citation>1303	5	3044</citation>
	<citation>3044	5	3044</citation>
	<citation>3044	5	3044</citation>
	<citation>3044	5	3044</citation>
	</citations>
	</document>
	<document id= '3043'>
	<title>Distributed Processes: A Concurrent Programming Concept</title>
	<abstract>A language concept for concurrent processes without common variables is introduced.  These  processes communicate and synchronize by means of procedure calls and guarded regions.  This concept  is proposed for real-time applications controlled by microcomputer networks with distributed storage.   The paper gives several examples of distributed processes and shows that they include procedures, coroutines,  classes, monitors, processes, semaphores, buffers, path expressions, and input/output as special cases.</abstract>
	<conference>CACM November, 1978</conference>
	<authors>
	<author>Hansen, P.</author>
	</authors>
	<keywords>Concurrent programming, distributed processes, microprocessor networks, nondeterminism, guarded  regions, programming languages, process communication and scheduling, sorting arrays, coroutines, classes,  monitors, processes, semaphores, buffers, path expressions, input/output</keywords>
	<version>3.8 4.2 4.22 4.32 5.24</version>
	<location>CA781108 DH January 26, 1979  10:40 AM</location>
	<citations>
	<citation>2865	4	3043</citation>
	<citation>2866	4	3043</citation>
	<citation>2896	4	3043</citation>
	<citation>2898	4	3043</citation>
	<citation>2972	4	3043</citation>
	<citation>2972	4	3043</citation>
	<citation>3037	4	3043</citation>
	<citation>3039	4	3043</citation>
	<citation>3043	4	3043</citation>
	<citation>3043	4	3043</citation>
	<citation>3073	4	3043</citation>
	<citation>3128	4	3043</citation>
	<citation>3144	4	3043</citation>
	<citation>2597	5	3043</citation>
	<citation>2732	5	3043</citation>
	<citation>3043	5	3043</citation>
	<citation>3043	5	3043</citation>
	<citation>3043	5	3043</citation>
	</citations>
	</document>
	<document id= '3042'>
	<title>Power Trees</title>
	<abstract>The new class of Pk trees is presented, where height balance is maintained for the nodes Iying  on particular paths.  The number of nodes of a Pk tree asymptotically grows as a power of the height,  in the worst case.  A procedure for node insertion is given, and the class of trees  considered is restricted  to IPk trees, which are buildable by such a procedure.  The average behavior of such trees, studied by  an extensive set of simulation runs, is close to that of AVL trees.  In particular, the family of IPO  trees whose main advantage is the reduced number of restructurings required after node insertion, is  analyzed.</abstract>
	<conference>CACM November, 1978</conference>
	<authors>
	<author>Luccio, F.</author>
	<author>Pagli, L.</author>
	</authors>
	<keywords>Binary search trees, Pk trees, IPk trees, search length, node insertion, subtree rotation</keywords>
	<version>3.73 3.74 4.34 5.25 5.31</version>
	<location>CA781109 DH January 25, 1979  4:29 PM</location>
	<citations>
	<citation>2839	4	3042</citation>
	<citation>2889	4	3042</citation>
	<citation>2968	4	3042</citation>
	<citation>3009	4	3042</citation>
	<citation>3042	4	3042</citation>
	<citation>3042	4	3042</citation>
	<citation>3042	4	3042</citation>
	<citation>3042	4	3042</citation>
	<citation>3065	4	3042</citation>
	<citation>3096	4	3042</citation>
	<citation>3096	4	3042</citation>
	<citation>3163	4	3042</citation>
	<citation>3163	4	3042</citation>
	<citation>2455	5	3042</citation>
	<citation>2839	5	3042</citation>
	<citation>2889	5	3042</citation>
	<citation>2968	5	3042</citation>
	<citation>3042	5	3042</citation>
	<citation>3042	5	3042</citation>
	<citation>3042	5	3042</citation>
	</citations>
	</document>
	<document id= '3041'>
	<title>Median Split Trees: A Fast Lookup Technique for Frequently Occuring Keys</title>
	<abstract>Split trees are a new technique for searching sets of keys with highly skewed frequency distributions.   A split tree is a binary search tree each node of which contains two key values-a node value which is  a maximally frequent key in that subtree, and a split value which partitions the remaining keys (with  respect to their lexical ordering) between the left and right subtrees.  A median split tree (MST) uses  the lexical median of a node's descendents as its split value to force the search tree to be perfectly  balanced, achieving both a space efficient representation of the tree and high search speed.  Unlike  frequency ordered binary search trees, the cost of a successful search of an MST is log n bounded and  very stable around minimal values.  Further, an MST can be built for a given key ordering and set of  frequencies in time n log n, as opposed to n2 for an optimum binary search tree.  A discussion of the  application of MST's to dictionary lookup for English is presented, and the performance obtained is contrasted  with that of other techniques.</abstract>
	<conference>CACM November, 1978</conference>
	<authors>
	<author>Sheil, B.A.</author>
	</authors>
	<keywords>Tree search, dictionary lookup, binary search, heaps, balanced trees, Zipf's Law, information retrieval</keywords>
	<version>3.74 5.25 5.39</version>
	<location>CA781110 DH January 25, 1979  9:49 AM</location>
	<citations>
	<citation>3041	4	3041</citation>
	<citation>3041	4	3041</citation>
	<citation>3126	4	3041</citation>
	<citation>3176	4	3041</citation>
	<citation>2846	5	3041</citation>
	<citation>2905	5	3041</citation>
	<citation>3041	5	3041</citation>
	<citation>3041	5	3041</citation>
	<citation>3041	5	3041</citation>
	</citations>
	</document>
	<document id= '3040'>
	<title>Synthesizing Constraint Expressions</title>
	<abstract>A constraint network representation is presented for a combinatorial search problem: finding  values for a set of variables subject to a set of constraints.  A theory of consistency levels in such  networks is formulated, which is related to problems of backtrack tree search efficiency.  An algorithm  is developed that can achieve any level of consistency desired, in order to preprocess the problem for  subsequent backtrack search, or to function as an alternative to backtrack search by explicitly determining  all solutions.</abstract>
	<conference>CACM November, 1978</conference>
	<authors>
	<author>Freuder, E.C.</author>
	</authors>
	<keywords>Backtrack, combinatorial algorithms, constraint networks, constraint satisfaction, graph coloring,  network consistency, relaxation, scene labeling, search</keywords>
	<version>3.63 3.64 5.25 5.30 5.32</version>
	<location>CA781111 DH January 22, 1979  3:43 PM</location>
	<citations>
	<citation>1504	4	3040</citation>
	<citation>3040	4	3040</citation>
	<citation>1145	5	3040</citation>
	<citation>3040	5	3040</citation>
	<citation>3040	5	3040</citation>
	<citation>3040	5	3040</citation>
	</citations>
	</document>
	<document id= '3039'>
	<title>On-the-Fly Garbage Collection: An Exercise in Cooperation</title>
	<abstract>As an example of cooperation between sequential processes with very little mutual interference  despite frequent manipulations of a large shared data space,  a technique is developed which allows nearly  all of the activity needed for garbage detection and collection to be performed by an additional processor  operating con-currently with the processor devoted to the computation proper.  Exclusion and synchronization  constraints have been kept as weak as could be achieved; the severe complexities engendered by doing  so are illustrated.</abstract>
	<conference>CACM November, 1978</conference>
	<authors>
	<author>Dijkstra, E.W.</author>
	<author>Lamport, L.</author>
	<author>Martin, A.J.</author>
	<author>Scholten, C.S.</author>
	<author>Steffens, E.F.M.</author>
	</authors>
	<keywords>Multiprocessing, fine-grained interleaving, cooperation between sequential processes with minimized  mutual exclusion, program correctness for multiprogramming tasks, garbage collection</keywords>
	<version>4.32 4.34 4.35 4.39 5.24</version>
	<location>CA781112 DH January 22, 1979  3:24 PM</location>
	<citations>
	<citation>2838	4	3039</citation>
	<citation>2896	4	3039</citation>
	<citation>2896	4	3039</citation>
	<citation>2972	4	3039</citation>
	<citation>3037	4	3039</citation>
	<citation>3039	4	3039</citation>
	<citation>3039	4	3039</citation>
	<citation>3039	4	3039</citation>
	<citation>3043	4	3039</citation>
	<citation>3073	4	3039</citation>
	<citation>3074	4	3039</citation>
	<citation>3112	4	3039</citation>
	<citation>2723	5	3039</citation>
	<citation>2732	5	3039</citation>
	<citation>2896	5	3039</citation>
	<citation>3039	5	3039</citation>
	<citation>3039	5	3039</citation>
	<citation>3039	5	3039</citation>
	</citations>
	</document>
	<document id= '3038'>
	<title>Using Encryption for Authentication in Large Networks of Computers</title>
	<abstract>Use of encryption to achieve authenticated communication in computer networks is discussed.   Example protocols are presented for the establishment of authenticated connections, for the management  of authenticated mail, and for signature verification and document integrity guarantee.  Both conventional  and public-key encryption algorithms are considered as the basis for protocols.</abstract>
	<conference>CACM December, 1978</conference>
	<authors>
	<author>Needham, R.M.</author>
	<author>Schroeder, M.D.</author>
	</authors>
	<keywords>Encryption, security, authentication, networks, protocols, public-key cryptosystems, data encryption  standard</keywords>
	<version>3.81 4.31 4.35</version>
	<location>CA781201 DH January 22, 1979  11:18 AM</location>
	<citations>
	<citation>3038	4	3038</citation>
	<citation>3111	4	3038</citation>
	<citation>3177	4	3038</citation>
	<citation>3021	5	3038</citation>
	<citation>3038	5	3038</citation>
	<citation>3038	5	3038</citation>
	<citation>3038	5	3038</citation>
	<citation>3158	5	3038</citation>
	<citation>2436	6	3038</citation>
	<citation>3038	6	3038</citation>
	<citation>3111	6	3038</citation>
	</citations>
	</document>
	<document id= '3037'>
	<title>A Linear Sieve Algorithm for Finding Prime Numbers</title>
	<abstract>A new algorithm is presented for finding all primes between 2 and n.  The algorithm executes  in time proportional to n (assuming that multiplication of integers not larger than n can be performed  in unit time).  The method has the same arithmetic complexity as the algorithm presented by Mairson [6];  however, our version is perhaps simpler and more elegant.  It is also easily extended to find the prime  factorization of all integers between 2 and n in time proportional to n.</abstract>
	<conference>CACM December, 1978</conference>
	<authors>
	<author>Gries, D.</author>
	<author>Misra, J.</author>
	</authors>
	<keywords>Primes, algorithms, data structures</keywords>
	<version>5.25 5.24 5.29</version>
	<location>CA781202 DH January 22, 1979  11:12 AM</location>
	<citations>
	<citation>2896	4	3037</citation>
	<citation>2972	4	3037</citation>
	<citation>3037	4	3037</citation>
	<citation>3037	4	3037</citation>
	<citation>3039	4	3037</citation>
	<citation>3043	4	3037</citation>
	<citation>3073	4	3037</citation>
	<citation>2732	5	3037</citation>
	<citation>2927	5	3037</citation>
	<citation>3037	5	3037</citation>
	<citation>3037	5	3037</citation>
	<citation>3037	5	3037</citation>
	</citations>
	</document>
	<document id= '3036'>
	<title>The Selection of Optimal Tab Settings</title>
	<abstract>A new generation of computer terminals allows tab settings to be selected and set by the computer.   This feature can be used to reduce the number of characters that are needed to represent a document  for transmission and printing.  In this note, an algorithm is given for selecting the optimal set of  tab stops for minimizing the number of characters transmitted.  An implementation of the algorithm has  reduced the number of characters transmitted by from 7 to 30 percent, but requires a prepass through  the document to compute a matrix used in determining the optimal set tab stops.  The use of fixed tab  stops, as a heuristic alternative, can achieve about 80 percent of optimal with no prepass.</abstract>
	<conference>CACM December, 1978</conference>
	<authors>
	<author>Peterson, J.L.</author>
	<author>Bitner, J.R.</author>
	<author>Howard, J.H.</author>
	</authors>
	<keywords>Tabs, word processing, dynamic programming</keywords>
	<version>3.9 4.4</version>
	<location>CA781203 DH January 18, 1979  4:34 PM</location>
	<citations>
	<citation>3036	5	3036</citation>
	<citation>3036	5	3036</citation>
	<citation>3036	5	3036</citation>
	</citations>
	</document>
	<document id= '3035'>
	<title>A Strategic Planning Methodology for the Computing Effort in Higher Education: An Empirical Evaluation</title>
	<abstract>The findings of a study designed to address the pressing problems associated with the strategic  planning of the computing effort in higher education are presented here.  A planning methodology was  developed and tested through implementation at a university.  Two years after the methodology was implemented,  the effectiveness of the planning methodology was assessed in terms of the improvement of the delivery  of computing services to the major institutional roles of instruction, research, and administration.   Two control institutions were employed to contrast the improvements at the test institution.  The results  of the research indicate the planning methodology significantly enhanced the delivery of computing services.</abstract>
	<conference>CACM December, 1978</conference>
	<authors>
	<author>Wetherbe, J.C.</author>
	<author>Dock, V.T.</author>
	</authors>
	<keywords>Computer management, computer budget, university computing, computer planning</keywords>
	<version>2.41 3.51</version>
	<location>CA781204 DH January 18, 1979  4:26 PM</location>
	<citations>
	<citation>2977	4	3035</citation>
	<citation>2985	4	3035</citation>
	<citation>3011	4	3035</citation>
	<citation>3035	4	3035</citation>
	<citation>2485	5	3035</citation>
	<citation>3035	5	3035</citation>
	<citation>3035	5	3035</citation>
	<citation>3035	5	3035</citation>
	</citations>
	</document>
	<document id= '3034'>
	<title>Detection of Logical Errors in Decision Table Programs</title>
	<abstract>In this paper an algorithm to detect logical errors in a limited-entry decision table and in  loop-free programs with embedded decision tables is developed.  All the conditions in the decision tables  are assumed to be inequalities or equalities relating linear expressions.  It is also assumed that actions  in a decision table are linear in variables which occur in the condition stub of the decision table (or  tables) to which control is transferred from the table.  The algorithm is based on determining whether  a set of linear inequalities has or does not have a solution.  The algorithm described in the paper is  implemented in Fortran IV.</abstract>
	<conference>CACM December, 1978</conference>
	<authors>
	<author>Ibramsha, M.</author>
	<author>Rajaraman, V.</author>
	</authors>
	<keywords>Error diagnostics, decision tables</keywords>
	<version>3.5 4.1 4.42 5.24</version>
	<location>CA781205 DH January 18, 1979  4:06 PM</location>
	<citations>
	<citation>2053	4	3034</citation>
	<citation>2221	4	3034</citation>
	<citation>2273	4	3034</citation>
	<citation>2453	4	3034</citation>
	<citation>2517	4	3034</citation>
	<citation>2517	4	3034</citation>
	<citation>2518	4	3034</citation>
	<citation>2616	4	3034</citation>
	<citation>2616	4	3034</citation>
	<citation>2856	4	3034</citation>
	<citation>3034	4	3034</citation>
	<citation>3034	4	3034</citation>
	<citation>3034	4	3034</citation>
	<citation>1684	5	3034</citation>
	<citation>2053	5	3034</citation>
	<citation>2517	5	3034</citation>
	<citation>3034	5	3034</citation>
	<citation>3034	5	3034</citation>
	<citation>3034	5	3034</citation>
	</citations>
	</document>
	<document id= '3033'>
	<title>Optimizing Decision Trees Through Heuristically Guided Search</title>
	<abstract>Optimal decision table conversion has been tackled in the literature using two approaches,  dynamic programming and branch-and-bound.  The former technique is quite effective, but its time and  space requirements are independent of how "easy" the given table is.  Furthermore, it cannot be used  to produce good, quasi optimal solutions.  The branch-and-bound technique uses a good heuristic to direct  the search, but is cluttered up by an enormous search space, since the number of solutions increases  with the number of test variables according to a double  exponential.  In this paper we suggest a heuristically  guided top-down search algorithm which, like dynamic programming, recognizes identical subproblems but  which can be used to find both optimal and quasi optimal solutions.  The heuristic search method introduced  in this paper combines the positive aspects of the above two techniques.  Compressed tables with a large  number of variables can be handled without deriving expanded tables first.</abstract>
	<conference>CACM December, 1978</conference>
	<authors>
	<author>Martelli, A.</author>
	<author>Montanari, U.</author>
	</authors>
	<keywords>Decision table, optimal decision table conversion, decision tree, heuristic search, AND/OR graphs,  dynamic programming, branch-and-bound</keywords>
	<version>3.59 3.66 5.42 8.3</version>
	<location>CA781206 DH January 18, 1979  3:56 PM</location>
	<citations>
	<citation>3033	4	3033</citation>
	<citation>3113	4	3033</citation>
	<citation>2856	5	3033</citation>
	<citation>3033	5	3033</citation>
	<citation>3033	5	3033</citation>
	<citation>3033	5	3033</citation>
	</citations>
	</document>
	<document id= '3032'>
	<title>Reverse Path Forwarding of Broadcast Packets</title>
	<abstract>A broadcast packet is for delivery to all nodes of a network.  Algorithms for accomplishing  this delivery through a store-and-forward packet switching  computer network include (1) transmission  of separately addressed packets. (2) multidestination addressing, (3) hot potato forwarding,(4) spanning  tree forwarding, and (5) source based forwarding.  To this list of algorithms we add (6) reverse path  forwarding, a broadcast routing method which exploits routing procedures and data structures already  available for packet switching.  Reverse path forwarding is a practical algorithm for broadcast routing   in store-and-forward packet switching computer networks.  The algorithm is described as being practical   because it is not optimal according to metrics developed for its analysis in this paper, and also because  it can be implemented in existing networks with less complexity than that required for the known alternatives.</abstract>
	<conference>CACM December, 1978</conference>
	<authors>
	<author>Dalal, Y.K.</author>
	<author>Metcalfe, R.M.</author>
	</authors>
	<keywords>Reverse path forwarding, broadcast packets, routing, computer networks, store-and-forward packet  switching, broadcast protocols</keywords>
	<version>3.81 4.32 5.32</version>
	<location>CA781207 DH  January 18, 1979  3:10 PM</location>
	<citations>
	<citation>3032	4	3032</citation>
	<citation>3119	4	3032</citation>
	<citation>2849	5	3032</citation>
	<citation>3032	5	3032</citation>
	<citation>3032	5	3032</citation>
	<citation>3032	5	3032</citation>
	</citations>
	</document>
	<document id= '3031'>
	<title>Abstract Data Types and Software Validation</title>
	<abstract>A data abstraction can be naturally specified using algebraic axioms.  The virtue of these  axioms is that they permit a representation-independent formal specification of a data type.  An example  is given which shows how to employ algebraic axioms at successive levels of implementation.  The  major  thrust of the paper is twofold.  First, it is shown how the use of algebraic axiomatizations can simplify  the process of proving the correctness of an implementation of an abstract data type.  Second, semi-automatic  tools are described which can be used both to automate such proofs of correctness and to derive an immediate  implementation from the axioms.  This implementation allows for limited testing of programs at design  time, before a conventional implementation is accomplished.</abstract>
	<conference>CACM December, 1978</conference>
	<authors>
	<author>Guttag, J.V.</author>
	<author>Horowitz, E.</author>
	<author>Musser, D.R.</author>
	</authors>
	<keywords>Abstract data type, correctness proof, data type, data structure, specification</keywords>
	<version>4.34 5.24</version>
	<location>CA781208 DH January 18, 1979  2:51 PM</location>
	<citations>
	<citation>3030	4	3031</citation>
	<citation>3031	4	3031</citation>
	<citation>3031	4	3031</citation>
	<citation>3049	4	3031</citation>
	<citation>3105	4	3031</citation>
	<citation>3148	4	3031</citation>
	<citation>3150	4	3031</citation>
	<citation>2939	5	3031</citation>
	<citation>2958	5	3031</citation>
	<citation>3031	5	3031</citation>
	<citation>3031	5	3031</citation>
	<citation>3031	5	3031</citation>
	</citations>
	</document>
	<document id= '3030'>
	<title>An Example of Hierarchical Design and Proof</title>
	<abstract>Hierarchical programming is being increasingly recognized as helpful in the construction of  large programs.  Users of hierarchical techniques claim or predict substantial increases in productivity  and in the reliability of the programs produced.  In this paper we describe a formal method for hierarchical  program specification, implementation, and proof.  We apply this method to a significant list processing  problem and also discuss a number of extensions to current programming languages that ease hierarchical  program design and proof.</abstract>
	<conference>CACM December, 1978</conference>
	<authors>
	<author>Spitzen, J.M.</author>
	<author>Levitt, K.N.</author>
	<author>Robinson, L.</author>
	</authors>
	<keywords>Program verification, specification, data abstraction, software modules, hierarchical structures</keywords>
	<version>4.0 4.6 5.21 5.24</version>
	<location>CA781209 DH January 16, 19794:43 PM</location>
	<citations>
	<citation>2480	4	3030</citation>
	<citation>2704	4	3030</citation>
	<citation>2723	4	3030</citation>
	<citation>2738	4	3030</citation>
	<citation>2738	4	3030</citation>
	<citation>2866	4	3030</citation>
	<citation>2867	4	3030</citation>
	<citation>2869	4	3030</citation>
	<citation>2941	4	3030</citation>
	<citation>2941	4	3030</citation>
	<citation>2956	4	3030</citation>
	<citation>2958	4	3030</citation>
	<citation>2981	4	3030</citation>
	<citation>3004	4	3030</citation>
	<citation>3004	4	3030</citation>
	<citation>3030	4	3030</citation>
	<citation>3030	4	3030</citation>
	<citation>3030	4	3030</citation>
	<citation>3030	4	3030</citation>
	<citation>3030	4	3030</citation>
	<citation>3030	4	3030</citation>
	<citation>3031	4	3030</citation>
	<citation>3049	4	3030</citation>
	<citation>3077	4	3030</citation>
	<citation>3104	4	3030</citation>
	<citation>3155	4	3030</citation>
	<citation>2247	5	3030</citation>
	<citation>2356	5	3030</citation>
	<citation>2457	5	3030</citation>
	<citation>2651	5	3030</citation>
	<citation>2958	5	3030</citation>
	<citation>2972	5	3030</citation>
	<citation>3030	5	3030</citation>
	<citation>3030	5	3030</citation>
	<citation>3030	5	3030</citation>
	</citations>
	</document>
	<document id= '3029'>
	<citations>
	<citation>3029	5	3029</citation>
	<citation>3029	5	3029</citation>
	<citation>3029	5	3029</citation>
	</citations>
	<title>Foreword to the Special Issue on Computer Architecture</title>
	<conference>CACM January, 1978</conference>
	<authors>
	</authors>
	<location>CA780101 JB March 28, 1978  5:52 PM</location>
	</document>
	<document id= '3028'>
	<title>The Manchester Mark I and Atlas: A His torical Perspective</title>
	<abstract>In 30 years of computer design at Manchester University two systems stand out: the Mark I (developed  over the period 1946-49) and the Atlas (1955-62).  This paper places each computer in its his torical  context and then describes the architecture and system software in present-day terminology.  Several  design concepts such as address-generation and store management have evolved in the progression from  Mark I to Atlas.  The wider impact of Manchester innovations in these and other areas is discussed, and  the contemporary performance of the Mark I and Atlas is evaluated.</abstract>
	<conference>CACM January, 1978</conference>
	<authors>
	<author>Lavington, S.H.</author>
	</authors>
	<keywords>architecture, index registers, paging, virtual storage, extra codes, compilers, operating systems,  Ferranti, Manchester Mark I, Atlas, ICL</keywords>
	<version>1.2 4.22 4.32 6.21 6.30</version>
	<location>CA780102 JB March 28,1978  5:50 PM</location>
	<citations>
	<citation>3028	4	3028</citation>
	<citation>3027	5	3028</citation>
	<citation>3028	5	3028</citation>
	<citation>3028	5	3028</citation>
	<citation>3028	5	3028</citation>
	<citation>3028	6	3028</citation>
	</citations>
	</document>
	<document id= '3027'>
	<title>The Development of the MU5 Computer System</title>
	<abstract>Following a brief outline of the background of the MU5 project, the aims and ideas for MU5  are discussed.  A description is then given of the instruction set, which includes a number of features  conducive to the production of efficient compiled code from high-level language source programs.  The  design of the processor is then traced from the initial ideas for an associatively addressed "name store"  to the final multistage pipeline structure involving a prediction mechanism for instruction prefetching  and a function queue for array element accessing.  An overall view of the complete MU5 complex is presented  together with a brief indication of its performance.</abstract>
	<conference>CACM January, 1978</conference>
	<authors>
	<author>Ibbett, R.N.</author>
	<author>Capon, P.C.</author>
	</authors>
	<keywords>architecture, naming, virtual storage, instruction set, descriptor, pipeline, instruction buffering,  associative storage, function queue, computer complex</keywords>
	<version>4.10 4.12 6.21 6.33</version>
	<location>CA780103 JB March 28, 1978  5:44 PM</location>
	<citations>
	<citation>3027	4	3027</citation>
	<citation>3027	5	3027</citation>
	<citation>3027	5	3027</citation>
	<citation>3027	5	3027</citation>
	<citation>3028	5	3027</citation>
	<citation>3027	6	3027</citation>
	</citations>
	</document>
	<document id= '3026'>
	<title>The Evolution of the Sperry Univac 1100 Series: A His tory, Analysis, and Projection</title>
	<abstract>The 1100 series systems are Sperry Univac's large-scale main frame computer systems.  Beginning  with the 1107 in 1962, the 1100 series has progressed through a succession of eight compatible computer  models to the latest system, the 1100/80, introduced in 1977.  The 1100 series hardware architecture  is based on a 36-bit word, ones complement structure which obtains one operand from storage and one from  a high-speed register, or two operands from high-speed registers.  The 1100 Operating System is designed  to support a symmetrical multiprocessor configuration simultaneously providing multiprogrammed batch,  timesharing, and transaction environments.</abstract>
	<conference>CACM January, 1978</conference>
	<authors>
	<author>Borgherson, B.R.</author>
	<author>Hanson, M.L.</author>
	<author>Hartley, P.A.</author>
	</authors>
	<keywords>1100 computer series, computer architecture, multiprocessing languages, data management systems,  end user facilities, executive control software</keywords>
	<version>1.3 4.0 4.20 4.30 4.32 4.33 4.35 6.0 6.21 6.30</version>
	<location>CA780104 JB March 28, 1978  5:38 PM</location>
	<citations>
	<citation>3026	5	3026</citation>
	<citation>3026	5	3026</citation>
	<citation>3026	5	3026</citation>
	</citations>
	</document>
	<document id= '3025'>
	<title>The Evolution of the DEC system 10</title>
	<abstract>The DEC system 10, also known as the PDP-10, evolved from the PDP-6 (circa 1963) over five generations  of implementations to presently include systems covering a price range of five to one.  The origin and  evolution of the hardware, operating system, and languages are described in terms of technological change,  user requirements, and user developments. The PDP-10's contributions to computing technology include:  accelerating the transition from batch oriented to time sharing computing systems; transferring hardware  technology within DEC (and elsewhere) to minicomputer design and manufacturing; supporting minicomputer  hardware and software development; and serving as a model for single user and timeshared interactive  minicomputer/microcomputer systems.</abstract>
	<conference>CACM January, 1978</conference>
	<authors>
	<author>Bell, C.G.</author>
	<author>Kotok, A.</author>
	<author>Hastings, T.N.</author>
	<author>Hill, R.</author>
	</authors>
	<keywords>computer structures, architecture, operating system, timesharing</keywords>
	<version>4.32 6.21 6.3</version>
	<location>CA780105 JB March 28, 1978  5:31 PM</location>
	<citations>
	<citation>2411	4	3025</citation>
	<citation>2709	4	3025</citation>
	<citation>2889	4	3025</citation>
	<citation>2937	4	3025</citation>
	<citation>2989	4	3025</citation>
	<citation>3005	4	3025</citation>
	<citation>3025	4	3025</citation>
	<citation>3025	4	3025</citation>
	<citation>3101	4	3025</citation>
	<citation>2138	5	3025</citation>
	<citation>2989	5	3025</citation>
	<citation>3025	5	3025</citation>
	<citation>3025	5	3025</citation>
	<citation>3025	5	3025</citation>
	</citations>
	</document>
	<document id= '3024'>
	<title>The CRAY-1 Computer System</title>
	<abstract>This paper describes the CRAY-1, discusses the evolution of its architecture, and gives an  account of some of the problems that were overcome during its manufacture.  The CRAY-1 is the only computer  to have been built to date that satisfies ERDA's Class VI requirement (a computer capable of processing  from 20 to 60 million floating point operations per second) [1].  The CRAY-1's Fortran compiler (CFT)  is designed to give the scientific user immediate access to the benefits of the CRAY-1's vector processing  architecture.  An optimizing compiler, CFT, "vectorizes" innermost DO loops.  Compatible with the ANSI  1966 Fortran Standard and with many commonly supported Fortran extensions, CFT does not require any source  program modifications or the use of additional nonstandard Fortran statements to achieve vectorization.   Thus the user's investment of hundreds of man months of effort to develop Fortran programs for other  contemporary computers is protected.</abstract>
	<conference>CACM January, 1978</conference>
	<authors>
	<author>Russell, R.M.</author>
	</authors>
	<keywords>architecture, computer systems</keywords>
	<version>1.2 6.2 6.3</version>
	<location>CA780106 JB March 28, 1978  5:24 PM</location>
	<citations>
	<citation>3024	5	3024</citation>
	<citation>3024	5	3024</citation>
	<citation>3024	5	3024</citation>
	</citations>
	</document>
	<document id= '3023'>
	<title>Architecture of the IBM System/370</title>
	<abstract>This paper discusses the design considerations for the architectural extensions that distinguish  System/370 from System/360.  It comments on some experiences with the original objectives for System/360  and on the efforts to achieve them, and it describes the reasons and objectives for extending the architecture.  It covers virtual storage, program control, data-manipulation instructions, timing facilities, multiprocessing,  debugging and monitoring, error handling, and input/output operations.  A final section tabulates some  of the important parameters of the various IBM machines which implement the architecture.</abstract>
	<conference>CACM January, 1978</conference>
	<authors>
	<author>Case, R.P.</author>
	<author>Padges, A.</author>
	</authors>
	<keywords>computer systems, architecture, instruction sets, virtual storage, error handling</keywords>
	<version>6.0 6.21</version>
	<location>CA780107 JB March 28, 1978  5:16 PM</location>
	<citations>
	<citation>3023	5	3023</citation>
	<citation>3023	5	3023</citation>
	<citation>3023	5	3023</citation>
	</citations>
	</document>
	<document id= '3022'>
	<title>Computer Science Faculties: The Current Status of Minorities and Women</title>
	<abstract>The results of a survey conducted in the fall of 1975 to determine the status of women and  minority faculty members in academic computer science are presented.  Faculty members were compared with  respect to professional background, salaries, teaching load, publication records, and research grants.   Analysis of the data indicated that the over-all verdict is one of general equality among women, minorities,  and men.</abstract>
	<conference>CACM February, 1978</conference>
	<authors>
	<author>Mamrak, S.A.</author>
	<author>Montanelli, R.G.Jr.</author>
	</authors>
	<keywords>discrimination against women, discrimination against minorities, faculty, computer science degree  programs, affirmative action, teaching loads, salaries, publications</keywords>
	<version>1.52 1.53 2.2 2.3</version>
	<location>CA780201 JB March 28, 1978  5:11 PM</location>
	<citations>
	<citation>3022	4	3022</citation>
	<citation>3123	4	3022</citation>
	<citation>2823	5	3022</citation>
	<citation>3022	5	3022</citation>
	<citation>3022	5	3022</citation>
	<citation>3022	5	3022</citation>
	<citation>3123	5	3022</citation>
	<citation>2823	6	3022</citation>
	<citation>2861	6	3022</citation>
	<citation>2962	6	3022</citation>
	<citation>3022	6	3022</citation>
	</citations>
	</document>
	<document id= '3021'>
	<title>A Method for Obtaining Digital Signatures and Public-Key Cryptosystems</title>
	<abstract>An encryption method is presented with the novel property that publicly revealing an encryption  key does not thereby reveal the corresponding decryption key.  This has two important consequences: (1)  Couriers or other secure means are not needed to transmit keys, since a message can be enciphered using  an encryption key publicly revealed by the intended recipient.  Only he can decipher the message, since  only he knows the corresponding decryption key.  (2) A message can be "signed" using a privately held  decryption key.  Anyone can verify this signature using the corresponding publicly revealed encryption  key.  Signatures cannot be forged, and a signer cannot later deny the validity of his signature.  This  has obvious applications in "electronic mail" and "electronic funds transfer" systems.  A message is  encrypted by representing it as a number M, raising M to a publicly specified power e, and then taking  the remainder when the result is divided by the publicly specified product, n, of two large secret prime  numbers p and q.  Decryption is similar;only a different, secret, power d is used, where e * d = 1 (mod(p-1)  * (q-1)).  the security of the system rests in part on the difficulty of factoring the published divisor,  n.</abstract>
	<conference>CACM February, 1978</conference>
	<authors>
	<author>Rivest, R.L.</author>
	<author>Shamir, A.</author>
	<author>Adleman, L.</author>
	</authors>
	<keywords>digital signatures, public-key cryptosystems, privacy, authentication, security, factorization,  prime number, electronic mail, message-passing, electronic funds transfer, cryptography.</keywords>
	<version>2.12 3.15 3.50 3.81 5.25</version>
	<location>CA780202 JB March 28, 1978  4:40 PM</location>
	<citations>
	<citation>3021	4	3021</citation>
	<citation>3158	4	3021</citation>
	<citation>3021	5	3021</citation>
	<citation>3021	5	3021</citation>
	<citation>3021	5	3021</citation>
	<citation>3038	5	3021</citation>
	<citation>3111	5	3021</citation>
	<citation>3177	5	3021</citation>
	<citation>3021	6	3021</citation>
	<citation>3021	6	3021</citation>
	<citation>3021	6	3021</citation>
	</citations>
	</document>
	<document id= '3020'>
	<title>Systematic Recursion Removal</title>
	<abstract>The recursion removal algorithm presented by Strong and Walker is amplified and applied to  a relatively complex PL/I program.  The aim is to demonstrate systematic recursion-removal techniques  on something more complex than Knuth's "sturdy toddler" and to obtain measurements of the cost of procedure  linkage in PL/I and the savings achievable via procedure integration in the presence of recursion.  First,  the paper describes the recursion-removal process and the example on which it will be illustrated.  Recursion  removal is then applied to the two major parts of this example and the final result of the process is  displayed.  Our performance comparison results are presented and our conclusions are briefly discussed.</abstract>
	<conference>CACM February, 1978</conference>
	<authors>
	<author>Auslander, M.A.</author>
	<author>Strong, H.R.</author>
	</authors>
	<keywords>recursion removal, recursion elimination, optimization, procedure linkage, procedure integration</keywords>
	<version>4.19 4.49 4.9 5.24</version>
	<location>CA780203 JB March 28, 1978  4:26 PM</location>
	<citations>
	<citation>3020	4	3020</citation>
	<citation>2953	5	3020</citation>
	<citation>3020	5	3020</citation>
	<citation>3020	5	3020</citation>
	<citation>3020	5	3020</citation>
	</citations>
	</document>
	<document id= '3019'>
	<citations>
	<citation>3019	5	3019</citation>
	<citation>3019	5	3019</citation>
	<citation>3019	5	3019</citation>
	</citations>
	<title>The GRE Advanced Test in Computer Science</title>
	<conference>CACM February, 1978</conference>
	<authors>
	<author>Austing, R.H.</author>
	</authors>
	<location>CA780204 JB March 28, 1978  4:19 PM</location>
	</document>
	<document id= '3018'>
	<title>Covering Edges by Cliques with Regard to Keyword Conflicts and Intersection Graphs</title>
	<abstract>Kellerman has presented a method for determining keyword conflicts and described a heuristic  algorithm which solves a certain combinatorial optimization problem in connection with this method.   This optimization problem is here shown to be equivalent to the problem of covering the edges of a graph  by complete subgraphs with the objective of minimizing the number of complete subgraphs.  A relationship  between this edge-clique-cover problem and the graph coloring problem is established which allows algorithms  for either one of these problems to be constructed from algorithm for the other.  As consequences of  this relationship, the keyword conflict problem and the edge-clique-cover problem are shown to be NP-complete,  and if P=/NP then they do not admit polynomial-time approximation algorithms which always produce solutions  within a factor less than 2 from the optimum.</abstract>
	<conference>CACM February, 1978</conference>
	<authors>
	<author>Kou, L.T.</author>
	<author>Stockmeyer, L.J.</author>
	<author>Wong, C.K.</author>
	<author>Watson, T.J.</author>
	</authors>
	<keywords>keyword conflicts, intersection graphs, node clique cover, edge clique cover, computational complexity,  NP-complete problems, polynomial-time heuristics</keywords>
	<version>4.12 5.25 5.32</version>
	<location>CA780205 JB March 28, 1978  4:18 PM</location>
	<citations>
	<citation>3018	5	3018</citation>
	<citation>3018	5	3018</citation>
	<citation>3018	5	3018</citation>
	</citations>
	</document>
	<document id= '3017'>
	<title>B-trees Re-examined</title>
	<abstract>The B-tree and its variants have, with increasing frequency, been proposed as a basic storage  structure for multiuser database applications.  Here, three potential problems which must be dealt with  in such a structure that do not arise in more traditional static directory structures are indicated.   One problem is a possible performance penalty.</abstract>
	<conference>CACM February, 1978</conference>
	<authors>
	<author>Held, G.</author>
	<author>Stonebraker, M.</author>
	</authors>
	<keywords>B-tree, directory, static directory, dynamic directory, index sequential access method</keywords>
	<version>3.70 3.73 3.74 4.33 4.34</version>
	<location>CA780206 JB March 28, 1978  3:46 PM</location>
	<citations>
	<citation>2626	4	3017</citation>
	<citation>2786	4	3017</citation>
	<citation>2840	4	3017</citation>
	<citation>2919	4	3017</citation>
	<citation>3017	4	3017</citation>
	<citation>3110	4	3017</citation>
	<citation>3174	4	3017</citation>
	<citation>2629	5	3017</citation>
	<citation>3017	5	3017</citation>
	<citation>3017	5	3017</citation>
	<citation>3017	5	3017</citation>
	</citations>
	</document>
	<document id= '3016'>
	<title>A Comparison of Numerical Techniques in Markov Modeling</title>
	<abstract>This paper presents several numerical methods which may be used to obtain the stationary probability  vectors of Markovian models.  An example of a nearly decomposable system is considered, and the results  obtained by the different methods examined.  A post mortem reveals why standard techniques often fail  to yield the correct results.  Finally, a means of estimating the error inherent in the decomposition  of certain models is presented.</abstract>
	<conference>CACM February, 1978</conference>
	<authors>
	<author>Stewart, W.J.</author>
	</authors>
	<keywords>Markov models, numerical techniques, simultaneous iteration, near-decomposability</keywords>
	<version>4.6 5.14 8.1</version>
	<location>CA780207 JB March 28, 1978  3:43 PM</location>
	<citations>
	<citation>2374	4	3016</citation>
	<citation>2481	4	3016</citation>
	<citation>2669	4	3016</citation>
	<citation>2863	4	3016</citation>
	<citation>3016	4	3016</citation>
	<citation>3016	4	3016</citation>
	<citation>3052	4	3016</citation>
	<citation>3070	4	3016</citation>
	<citation>3153	4	3016</citation>
	<citation>1901	5	3016</citation>
	<citation>2741	5	3016</citation>
	<citation>3016	5	3016</citation>
	<citation>3016	5	3016</citation>
	<citation>3016	5	3016</citation>
	</citations>
	</document>
	<document id= '3015'>
	<title>Relaxation Methods for Image Reconstruction</title>
	<abstract>The problem of recovering an image (a function of two variables) from experimentally available  integrals of its grayness over thin strips is of great importance in a large number of scientific areas.   An important version of the problem in medicine is that of obtaining the exact density distribution  within the human body from X-ray projections.One approach that has been taken to solve this problem  consists of translating the available information into a system of linear inequalities.  The size and  the sparsity of the resulting system (typically, 25,000 inequalities with fewer than 1 percent of the  coefficients nonzero) makes methods using successive relaxations computationally attractive, as compared  to other ways of solving systems of inequalities.  In this paper, it is shown that, for a consistent  system of linear inequalities, any sequence of relaxarion parameters lying strictly between 0 and 2 generates  a sequence of vectors which converges to a solution.  Under the same assumptions, for a system of linear  equations, the relaxation method converges to the minimum norm solution.  Previously proposed techniques are shown to be special cases of our procedure with different choices of relaxation parameters.  The  practical consequences for image reconstruction of the choice of the relaxation parameters are discussed.</abstract>
	<conference>CACM February, 1978</conference>
	<authors>
	<author>Herman, G.T.</author>
	<author>Lent, A.</author>
	<author>Lutz, P.H.</author>
	</authors>
	<keywords>biomedical image processing, image reconstruction, X-ray tomography, mathematical programming,  linear inequalities, relaxation techniques</keywords>
	<version>3.12 3.17 3.34 3.63 5.14 5.18 5.41</version>
	<location>CA780208 JB March 28, 1978  2:13 PM</location>
	<citations>
	<citation>3015	5	3015</citation>
	<citation>3015	5	3015</citation>
	<citation>3015	5	3015</citation>
	</citations>
	</document>
	<document id= '3014'>
	<title>Is "Sometime" Sometimes Better than "Always"? (Intermittent Assertions in Proving Program Correctness)</title>
	<abstract>This paper explores a technique for proving the correctness and termination of programs simultaneously.   This approach, the intermittent-assertion method, involves documenting the program with assertions that  must be true at some time when control passes through the corresponding point, but that need not be true  every time.  The method, introduced by Burstall, promises to provide a valuable complement to the more  conventional methods.  The intermittent-assertion method is presented with a number of examples of correctness  and termination proofs.  Some of these proofs are markedly simpler than their conventional counterparts.   On the other hand, it is shown that a proof of correctness or termination by any of the conventional  techniques can be rephrased directly as a proof using intermittent assertions.  Finally, it is shown  how the intermittent-assertion method can be applied to prove the validity of program transformations  and the correctness of continuously operating programs.</abstract>
	<conference>CACM February, 1978</conference>
	<authors>
	<author>Manna, Z.</author>
	<author>Waldinger, R.</author>
	</authors>
	<keywords>intermittent assertions, correctness of programs, termination of programs, program verification,  program transformation, continuously operating programs.</keywords>
	<version>5.24</version>
	<location>CA780209 JB March 28, 1978  2:04 PM</location>
	<citations>
	<citation>2021	4	3014</citation>
	<citation>2222	4	3014</citation>
	<citation>2227	4	3014</citation>
	<citation>2315	4	3014</citation>
	<citation>2326	4	3014</citation>
	<citation>2470	4	3014</citation>
	<citation>2732	4	3014</citation>
	<citation>2865	4	3014</citation>
	<citation>2896	4	3014</citation>
	<citation>2943	4	3014</citation>
	<citation>3014	4	3014</citation>
	<citation>3014	4	3014</citation>
	<citation>3068	4	3014</citation>
	<citation>3077	4	3014</citation>
	<citation>3143	4	3014</citation>
	<citation>1834	5	3014</citation>
	<citation>2981	5	3014</citation>
	<citation>3014	5	3014</citation>
	<citation>3014	5	3014</citation>
	<citation>3014	5	3014</citation>
	<citation>3157	5	3014</citation>
	<citation>3014	6	3014</citation>
	</citations>
	</document>
	<document id= '3013'>
	<title>Some New Methods of Detecting Step Edges in Digital Pictures</title>
	<abstract>This note describes two operators that respond to step edges, but not to ramps.  The first  is similar to the digital Laplacian, but uses the max, rather than the sum, of the x and y second differences.   The second uses the difference between the mean and median gray levels in a neighborhood.  The outputs  obtained from these operators applied to a set of test pictures are compared with each other and with  the standard digital Laplacian and gradient.  A third operator, which uses the distance between the center  and centroid of a neighborhood as an edge value, is also briefly considered; it turns out to be equivalent  to one of the standard digital approximations to the gradient.</abstract>
	<conference>CACM February,1978</conference>
	<authors>
	<author>Schachter, B.J.</author>
	<author>Rosenfeld, A.</author>
	</authors>
	<keywords>image processing, pattern recognition, edge detection</keywords>
	<version>3.63</version>
	<location>CA780210 JB March 28, 1978  1:56 PM</location>
	<citations>
	<citation>3013	5	3013</citation>
	<citation>3013	5	3013</citation>
	<citation>3013	5	3013</citation>
	</citations>
	</document>
	<document id= '3012'>
	<title>The Use of an Interactive Information Storage and Retrieval System in Medical Research</title>
	<abstract>This paper presents the results of a study of the use of an interactive computerized storage  and retrieval system.  A monitor built into the computer system provided usage data for the study.  Additional  data on user reactions were gathe red from a questionnaire.  The results show the important role played  by frequently chosen laboratory reference leaders in influencing the use of this system.  The implications  of the study for the design of similar systems are discussed.</abstract>
	<conference>CACM March, 1978</conference>
	<authors>
	<author>Lucas, H.C.Jr.</author>
	</authors>
	<keywords>implementation, system use, information storage and retrieval system</keywords>
	<version>2.10 3.50 3.72</version>
	<location>CA780301 JB March 28, 1978  1:51 PM</location>
	<citations>
	<citation>3012	5	3012</citation>
	<citation>3012	5	3012</citation>
	<citation>3012	5	3012</citation>
	</citations>
	</document>
	<document id= '3011'>
	<title>Management Utilization of Computers in American Local Governments</title>
	<abstract>Traditional concepts of management information systems (MIS) bear little relation to the information  systems currently in use by top management in most US local governments.  What exists is management-oriented  computing, involving the use of relatively unsophisticated applications.  Despite the unsophisticated  nature of these systems, management use of computing is surprisingly common, but also varied in its extent  among local governments.  Management computing is most prevalent in those governments with professional  management practices where top management is supportive of computing and tends to control computing decisions  and where department users have less control over design and implementation activities.  Finally, management  computing clearly has impacts for top managers, mostly involving improvements in decision information.</abstract>
	<conference>CACM March, 1978</conference>
	<authors>
	<author>Dutton, W.H.</author>
	<author>Kraemer, K.L.</author>
	</authors>
	<keywords>computer utilization, management information system, American local government, city government  computers, county government computers, computer impacts, management computing</keywords>
	<version>2.0 2.1 2.11 2.19 2.4 2.45 2.9 3.5 3.53</version>
	<location>CA780302 JB March 28, 1978  1:46 PM</location>
	<citations>
	<citation>2407	4	3011</citation>
	<citation>2852	4	3011</citation>
	<citation>2977	4	3011</citation>
	<citation>2985	4	3011</citation>
	<citation>3003	4	3011</citation>
	<citation>3011	4	3011</citation>
	<citation>3011	4	3011</citation>
	<citation>3011	4	3011</citation>
	<citation>3011	4	3011</citation>
	<citation>3035	4	3011</citation>
	<citation>3050	4	3011</citation>
	<citation>2075	5	3011</citation>
	<citation>2302	5	3011</citation>
	<citation>2345	5	3011</citation>
	<citation>2485	5	3011</citation>
	<citation>3011	5	3011</citation>
	<citation>3011	5	3011</citation>
	<citation>3011	5	3011</citation>
	</citations>
	</document>
	<document id= '3010'>
	<title>Value Orientation of Computer Science Students</title>
	<abstract>Technological and nontechnological value orientations are investigated with special attention  to the complexity of value structures.  Computer science students, who are closely associated with technology,  contrast with social science students, who are often technologically aloof.  This is confirmed by the  value ratings of 313 students at the University of Minnesota in 1972.  Computer science majors were found  to have a more complex value structure than social science majors.</abstract>
	<conference>CACM March, 1978</conference>
	<authors>
	<author>Anderson, R.E.</author>
	</authors>
	<keywords>values, attitudes, students, public, social effects</keywords>
	<version>2.11 2.12</version>
	<location>CA780303 JB March 28, 1978  1:21 PM</location>
	<citations>
	<citation>3010	5	3010</citation>
	<citation>3010	5	3010</citation>
	<citation>3010	5	3010</citation>
	</citations>
	</document>
	<document id= '3009'>
	<title>Insertions and Deletions In One-Sided Height-Balanced Trees</title>
	<abstract>Recently Hirschberg has established that insertions into one-sided height-balanced trees can  be done in 0(log^2N) steps.  It is proved here that deletions can also be performed in 0(log^2N) steps,  which answers the open problem posed by Hirschberg.</abstract>
	<conference>CACM March, 1978</conference>
	<authors>
	<author>Kosaraju, S.R.</author>
	</authors>
	<keywords>AVL trees, balanced trees, binary search, dynamic balancing</keywords>
	<version>3.73 3.74 4.34 5.25 5.31</version>
	<location>CA780304 JB March 28, 1978  1:12 PM</location>
	<citations>
	<citation>3009	4	3009</citation>
	<citation>3042	4	3009</citation>
	<citation>3065	4	3009</citation>
	<citation>3096	4	3009</citation>
	<citation>3163	4	3009</citation>
	<citation>2839	5	3009</citation>
	<citation>3009	5	3009</citation>
	<citation>3009	5	3009</citation>
	<citation>3009	5	3009</citation>
	<citation>3096	5	3009</citation>
	<citation>3163	5	3009</citation>
	<citation>2839	6	3009</citation>
	<citation>2839	6	3009</citation>
	<citation>2889	6	3009</citation>
	<citation>2889	6	3009</citation>
	<citation>3009	6	3009</citation>
	<citation>3009	6	3009</citation>
	<citation>3065	6	3009</citation>
	<citation>3096	6	3009</citation>
	</citations>
	</document>
	<document id= '3008'>
	<title>Preserving Average Proximity in Arrays</title>
	<abstract>Programmers and data structure designers are often forced to choose between alternative structures.   In storing these structures, preserving logical adjacencies or "proximity" is usually an important consideration.   The combinatorial problem of storing arrays as various kinds of list structures is examined.  Embeddings  of graphs are used to model the loss of proximity involved in such storage schemes, and an elementary  proof that arrays cannot be stored as linear lists with bounded loss of proximity is presented.  Average  loss of proximity is then considered, and it is shown that arrays cannot be stored as linear lists with  only bounded loss of average proximity, but can be so stored in binary trees.  The former result implies,  for instance, that row major order is an asymptotically optimal storage strategy for arrays.</abstract>
	<conference>CACM March, 1978</conference>
	<authors>
	<author>DeMillo, R.A.</author>
	<author>Eisenstat, S.C.</author>
	<author>Lipton, R.J.</author>
	</authors>
	<keywords>arrays, graph embedding, linear lists, proximity, average proximity, trees</keywords>
	<version>4.34 5.24 5.25 5.32</version>
	<location>CA780305 JB March 28, 1978  1:07 PM</location>
	<citations>
	<citation>1050	4	3008</citation>
	<citation>1102	4	3008</citation>
	<citation>378	4	3008</citation>
	<citation>3008	4	3008</citation>
	<citation>731	4	3008</citation>
	<citation>798	4	3008</citation>
	<citation>209	5	3008</citation>
	<citation>3008	5	3008</citation>
	<citation>3008	5	3008</citation>
	<citation>3008	5	3008</citation>
	</citations>
	</document>
	<document id= '3007'>
	<citations>
	<citation>3007	5	3007</citation>
	<citation>3007	5	3007</citation>
	<citation>3007	5	3007</citation>
	</citations>
	<title>Complexity of Computations (Corrigendum)</title>
	<conference>CACM March, 1978</conference>
	<authors>
	<author>Rabin, M.O.</author>
	</authors>
	<location>CA780306 JB March 28, 1978  1:02 PM</location>
	</document>
	<document id= '3006'>
	<title>Anomalies with Variable Partition Paging Algorithms</title>
	<abstract>Five types of anomalous behavior which may occur in paged virtual memory operating systems  a redefined.  One type of anomaly, for example, concerns the fact that, with certain reference strings  and paging algorithms, an increase in mean memory allocation may result in an increase in fault rate.   Two paging algorithms, are examined in terms of their anomaly potential, and reference string examples  of various anomalies are presented.  Two paging algorithm properties, the inclusion property and the  generalized inclusion property, are discussed and the anomaly implications of these properties presented.</abstract>
	<conference>CACM March, 1978</conference>
	<authors>
	<author>Franklin, M.A.</author>
	<author>Graham, G.S.</author>
	<author>Gupta, R.K.</author>
	</authors>
	<keywords>anomaly, memory management, program behavior, stack algorithms, virtual memory, working set, page  fault frequency, paging algorithms</keywords>
	<version>4.32 4.35 4.6 8.1</version>
	<location>CA780307 JB March 28,1978  1:01 PM</location>
	<citations>
	<citation>1892	4	3006</citation>
	<citation>1901	4	3006</citation>
	<citation>2022	4	3006</citation>
	<citation>2085	4	3006</citation>
	<citation>2085	4	3006</citation>
	<citation>2095	4	3006</citation>
	<citation>2218	4	3006</citation>
	<citation>2277	4	3006</citation>
	<citation>2319	4	3006</citation>
	<citation>2329	4	3006</citation>
	<citation>2358	4	3006</citation>
	<citation>2373	4	3006</citation>
	<citation>2373	4	3006</citation>
	<citation>2374	4	3006</citation>
	<citation>2380	4	3006</citation>
	<citation>2380	4	3006</citation>
	<citation>2434	4	3006</citation>
	<citation>2499	4	3006</citation>
	<citation>2450	4	3006</citation>
	<citation>2450	4	3006</citation>
	<citation>2501	4	3006</citation>
	<citation>2582	4	3006</citation>
	<citation>2595	4	3006</citation>
	<citation>2669	4	3006</citation>
	<citation>2828	4	3006</citation>
	<citation>2863	4	3006</citation>
	<citation>2881	4	3006</citation>
	<citation>2928	4	3006</citation>
	<citation>2996	4	3006</citation>
	<citation>2996	4	3006</citation>
	<citation>2996	4	3006</citation>
	<citation>3006	4	3006</citation>
	<citation>3006	4	3006</citation>
	<citation>3006	4	3006</citation>
	<citation>3006	4	3006</citation>
	<citation>3006	4	3006</citation>
	<citation>3067	4	3006</citation>
	<citation>3067	4	3006</citation>
	<citation>3067	4	3006</citation>
	<citation>3067	4	3006</citation>
	<citation>1751	5	3006</citation>
	<citation>1884	5	3006</citation>
	<citation>2373	5	3006</citation>
	<citation>2374	5	3006</citation>
	<citation>2595	5	3006</citation>
	<citation>3006	5	3006</citation>
	<citation>3006	5	3006</citation>
	<citation>3006	5	3006</citation>
	<citation>3067	5	3006</citation>
	<citation>1751	6	3006</citation>
	<citation>2374	6	3006</citation>
	<citation>2373	6	3006</citation>
	<citation>2595	6	3006</citation>
	<citation>2682	6	3006</citation>
	<citation>2863	6	3006</citation>
	<citation>2864	6	3006</citation>
	<citation>3006	6	3006</citation>
	</citations>
	</document>
	<document id= '3005'>
	<title>Implications of Structured Programming for Machine Architecture</title>
	<abstract>Based on an empirical study of more than 10,000 lines of program text written in a GOTO-less  language, a machine architecture specifically designed for structured programs is proposed.  Since assignment,  CALL, RETURN, and IF statements together account for 93 percent of all executable statements, special  care is given to ensure that these statements can be implemented efficiently.  A highly compact instruction  encoding scheme is presented, which can reduce program size by a factor of 3.  Unlike a Huffman code,  which utilizes variable length fields, this method uses only fixed length (1-byte) op code and address  fields.  The most frequent instructions consist of a single 1-byte field.  As a consequence, instruction  decoding time is minimized, and the machine is efficient with respect to both space and time.</abstract>
	<conference>CACM March, 1978</conference>
	<authors>
	<author>Tanenbaum, A.S.</author>
	</authors>
	<keywords>machine architecture, computer architecture, computer organization, instruction set design, program  characteristics</keywords>
	<version>4.12 4.22 4.9 6.21</version>
	<location>CA780308 JB March 28, 1978  12:55 PM</location>
	<citations>
	<citation>2411	4	3005</citation>
	<citation>2709	4	3005</citation>
	<citation>2889	4	3005</citation>
	<citation>2937	4	3005</citation>
	<citation>2989	4	3005</citation>
	<citation>3005	4	3005</citation>
	<citation>3025	4	3005</citation>
	<citation>3101	4	3005</citation>
	<citation>2138	5	3005</citation>
	<citation>3005	5	3005</citation>
	<citation>3005	5	3005</citation>
	<citation>3005	5	3005</citation>
	</citations>
	</document>
	<document id= '3004'>
	<title>Structured Programming in Cobol: An Approach for Application Programmers</title>
	<abstract>Techniques for designing and writing Cobol programs are presented.  Previous work in structured  programming is drawn upon and adapted.  The presentation is informal: the terminology is nonmathematical  as far as possible, no theorems are proved, and examples are used frequently.  Top-down program design  is implemented through the use of structured flowcharts, disciplined specifications, and step by step  verification.  A well-formed Cobol program is defined.  The proper use of the GO TO and other Cobol coding  practices are discussed.</abstract>
	<conference>CACM January, 1977</conference>
	<authors>
	<author>Gelder, A.</author>
	</authors>
	<keywords>structured programming, top-down, well-formed program, GO TO statement, repeat statement, flowchart,  application programming, Cobol, software reliability, program verification</keywords>
	<version>4.0 4.22 5.24</version>
	<location>CA770101 JB January 3, 1978  12:44 AM</location>
	<citations>
	<citation>2193	4	3004</citation>
	<citation>2326	4	3004</citation>
	<citation>2477	4	3004</citation>
	<citation>2480	4	3004</citation>
	<citation>2541	4	3004</citation>
	<citation>2594	4	3004</citation>
	<citation>2704	4	3004</citation>
	<citation>2709	4	3004</citation>
	<citation>2709	4	3004</citation>
	<citation>2738	4	3004</citation>
	<citation>2738	4	3004</citation>
	<citation>2802	4	3004</citation>
	<citation>2866	4	3004</citation>
	<citation>2867	4	3004</citation>
	<citation>2869	4	3004</citation>
	<citation>2941	4	3004</citation>
	<citation>2958	4	3004</citation>
	<citation>3004	4	3004</citation>
	<citation>3004	4	3004</citation>
	<citation>3004	4	3004</citation>
	<citation>3004	4	3004</citation>
	<citation>3004	4	3004</citation>
	<citation>3030	4	3004</citation>
	<citation>3030	4	3004</citation>
	<citation>3121	4	3004</citation>
	<citation>3155	4	3004</citation>
	<citation>1425	5	3004</citation>
	<citation>2247	5	3004</citation>
	<citation>2356	5	3004</citation>
	<citation>2456	5	3004</citation>
	<citation>3004	5	3004</citation>
	<citation>3004	5	3004</citation>
	<citation>3004	5	3004</citation>
	<citation>3186	5	3004</citation>
	</citations>
	</document>
	<document id= '3003'>
	<title>A Survey of the Literature in Computer Science Education Since Curriculum '68</title>
	<abstract>A bibliography of approximately two hundred references in computer science education appearing  in the literature since the publication of "Curriculum '68" is presented.  The bibliography itself is  preceded by brief descriptive materials organizing the references into the categories of survey reports,  activities of professional organizations, philosophy of programs, description of  programs, description  of courses and other materials.</abstract>
	<conference>CACM January, 1977</conference>
	<authors>
	<author>Austing, R. H.</author>
	<author>Barnes, B. H.</author>
	</authors>
	<keywords>education, computer science, curricula</keywords>
	<version>1.5</version>
	<location>CA770102 JB January 3, 1978  12:34 AM</location>
	<citations>
	<citation>1927	4	3003</citation>
	<citation>2153	4	3003</citation>
	<citation>2163	4	3003</citation>
	<citation>2407	4	3003</citation>
	<citation>2407	4	3003</citation>
	<citation>2478	4	3003</citation>
	<citation>2852	4	3003</citation>
	<citation>2852	4	3003</citation>
	<citation>2899	4	3003</citation>
	<citation>3003	4	3003</citation>
	<citation>3003	4	3003</citation>
	<citation>3003	4	3003</citation>
	<citation>3003	4	3003</citation>
	<citation>3003	4	3003</citation>
	<citation>3003	4	3003</citation>
	<citation>3003	4	3003</citation>
	<citation>3003	4	3003</citation>
	<citation>3003	4	3003</citation>
	<citation>3003	4	3003</citation>
	<citation>3003	4	3003</citation>
	<citation>3003	4	3003</citation>
	<citation>3003	4	3003</citation>
	<citation>3003	4	3003</citation>
	<citation>3003	4	3003</citation>
	<citation>3003	4	3003</citation>
	<citation>3011	4	3003</citation>
	<citation>3050	4	3003</citation>
	<citation>1659	5	3003</citation>
	<citation>1678	5	3003</citation>
	<citation>1927	5	3003</citation>
	<citation>1945	5	3003</citation>
	<citation>2097	5	3003</citation>
	<citation>2147	5	3003</citation>
	<citation>2163	5	3003</citation>
	<citation>2187	5	3003</citation>
	<citation>2329	5	3003</citation>
	<citation>2345	5	3003</citation>
	<citation>2367	5	3003</citation>
	<citation>2407	5	3003</citation>
	<citation>2478	5	3003</citation>
	<citation>2479	5	3003</citation>
	<citation>2480	5	3003</citation>
	<citation>2538	5	3003</citation>
	<citation>3003	5	3003</citation>
	<citation>3003	5	3003</citation>
	<citation>3003	5	3003</citation>
	<citation>3130	5	3003</citation>
	<citation>1771	6	3003</citation>
	<citation>3003	6	3003</citation>
	</citations>
	</document>
	<document id= '3002'>
	<title>A Record and File Partitioning Model</title>
	<abstract>One of the main objectives in the design of a file system is the reduction of storage and data  transfer costs.  This paper presents a model in which several  requests access the file system, and each  request requires information from one or more variable length data-items.  The probabilities of access  and the distribution of each data-item's length are assumed to be known, and to be mutually independent.  The file system uses one or more storage devices, and each record may be partitioned into subrecords  that are stored on different devices.  One of the subrecords is designated as the primary record; when  a request for a record is made, the primary record is first accessed, and other subrecords are accessed  only if the pertinent information is not stored in the primary record.  The model that is presented in  this paper, both as a nonlinear programming model and a mixed integer programming model, is a very general  one; several types of file systems may be derived from it by an appropriate selection of its parameters.   This model has already been used in the optimization of library routines' storage at a large scale operating  system.</abstract>
	<conference>CACM January, 1977</conference>
	<authors>
	<author>Babad, J. M.</author>
	</authors>
	<keywords>file system, file design, file partitioning, record partitioning</keywords>
	<version>3.73</version>
	<location>CA770103 JB January 3, 1978  12:28 AM</location>
	<citations>
	<citation>3002	5	3002</citation>
	<citation>3002	5	3002</citation>
	<citation>3002	5	3002</citation>
	<citation>3168	5	3002</citation>
	<citation>2965	6	3002</citation>
	<citation>3002	6	3002</citation>
	</citations>
	</document>
	<document id= '3001'>
	<title>Detection of Combined Occurrences</title>
	<abstract>In this paper it is supposed that the variables X1,...,Xn each have finite range with the variable  Xi taking on Pi possible values and that the values of the variables are changing with time.  It is supposed  further that it is desired to detect occurrences in which some subset of the variables achieve particular  values.  Finally, it is supposed that the problem involves the detection of a large number of combined  occurrences for a large number of changes of values of variables.  Two efficient solutions for this problem  are described.  Both methods have the unusual property of being faster for systems where the sum P1 + ...  + Pn is larger. The first solution is error-free and suitable for most cases.  The second solution  is slightly more elegant and allows negation as well as conjunction, but is subject to the possibility  of errors.  An error analysis is given for the second method and an empirical study is reported.</abstract>
	<conference>CACM January, 1977</conference>
	<authors>
	<author>Zobrist, A. L.</author>
	<author>Carlson, F. R. Jr.</author>
	</authors>
	<keywords>coding, hash coding, retrieval, secondary keys, pattern recognition, artificial in telligence, demons,  n-tuples, sorting, chess</keywords>
	<version>3.63 5.31</version>
	<location>CA770104JB January 3, 1978  12:15 AM</location>
	<citations>
	<citation>2532	4	3001</citation>
	<citation>2631	4	3001</citation>
	<citation>2746	4	3001</citation>
	<citation>3001	4	3001</citation>
	<citation>3001	4	3001</citation>
	<citation>2033	5	3001</citation>
	<citation>2139	5	3001</citation>
	<citation>3001	5	3001</citation>
	<citation>3001	5	3001</citation>
	<citation>3001	5	3001</citation>
	</citations>
	</document>
	<document id= '3000'>
	<title>Segment Sizes and Lifetimes in Algol 60 Programs</title>
	<abstract>The characteristics of the virtual memory requirements of a sample of Algol 60 programs have  been measured.  Distributions are presented for thesizes of memory requests and for their holding times  (lifetimes).  The results are presented in terms of Johnston's contour model and a simple abstract machine.   They provide new empirical evidence of certain aspects of the construction and behavior of real programs,  and some of their implications for the design of virtual memory systems are presented and discussed.</abstract>
	<conference>CACM January, 1977</conference>
	<authors>
	<author>Batson, A. P.</author>
	<author>Brundage, R. E.</author>
	</authors>
	<keywords>virtual memory, program behavior, segmentation, storage allocation, Algol 60, contour model</keywords>
	<version>4.22 4.34 4.45 6.21</version>
	<location>CA770105 JB January 3, 1978  12:05 AM</location>
	<citations>
	<citation>2095	4	3000</citation>
	<citation>2218	4	3000</citation>
	<citation>2218	4	3000</citation>
	<citation>2498	4	3000</citation>
	<citation>2596	4	3000</citation>
	<citation>2734	4	3000</citation>
	<citation>2734	4	3000</citation>
	<citation>2902	4	3000</citation>
	<citation>2911	4	3000</citation>
	<citation>3000	4	3000</citation>
	<citation>3000	4	3000</citation>
	<citation>3000	4	3000</citation>
	<citation>3067	4	3000</citation>
	<citation>1879	5	3000</citation>
	<citation>2095	5	3000</citation>
	<citation>2864	5	3000</citation>
	<citation>3000	5	3000</citation>
	<citation>3000	5	3000</citation>
	<citation>3000	5	3000</citation>
	</citations>
	</document>
	<document id= '2999'>
	<title>An Approach to Multidimensional Data Array Processing by Computer</title>
	<abstract>Some recent work on the development of general-purpose computer-based statistical and data  processing capabilities for handling multidimensional arrays of data is presented. Attention is first  given to some of the general problems of multidimensional table and array processing.  This is followed  by a summary of some recent developments in array processing capabilities at the World Bank, in particular,  the system identified as WRAPS(World Bank Retrieval and Array Processing System).</abstract>
	<conference>CACM February, 1977</conference>
	<authors>
	<author>Muller, M. E.</author>
	</authors>
	<keywords>array processing, table processing, statistical analysis, data retrieval, data processing, syntax  for data structures, computing techniques, time series, cross tabulation</keywords>
	<version>3.10 3.20 3.30 3.70 4.0</version>
	<location>CA770201 JB December 30, 1977  3:12 AM</location>
	<citations>
	<citation>2999	5	2999</citation>
	<citation>2999	5	2999</citation>
	<citation>2999	5	2999</citation>
	</citations>
	</document>
	<document id= '2998'>
	<title>An Empirical Study of List Structure in Lisp</title>
	<abstract>Static measurements of the list structure of five large Lisp programs are reported and analyzed  in this paper.  These measurements reveal substantial regularity, or predictability, among poin ters to  atoms and especially among poin ters to lists.  Pointers to atoms are found to obey, roughly, Zipf's law,  which governs word frequencies in natural languages; poin ters to lists usually poin t to a location physically  nearby in memory.  The use of such regularities in the space-efficient representation of list structure  is discussed.  Linearization of lists, whereby successive cdrs (or cars) are placed in consecutive memory  locations whenever possible, greatly strengthens the observed regularity of list structure.  It is shown  that under some reasonable assumptions, the entropy or information content of a car-cdr pair in the programs  measured is about 10 to 15 bits before linearization, and about 7 to 12 bits after.</abstract>
	<conference>CACM February, 1977</conference>
	<authors>
	<author>Clark, D. W.</author>
	<author>Green, C. C.</author>
	</authors>
	<keywords>list structure measurement, Lisp, list structure regularity, poin ter compression, Zipf's law, list  linearization, poin ter entropy</keywords>
	<version>3.69 4.29 4.34 4.6 5.6</version>
	<location>CA770202 JB December 30, 1977  2:55 AM</location>
	<citations>
	<citation>2855	5	2998</citation>
	<citation>2944	5	2998</citation>
	<citation>2998	5	2998</citation>
	<citation>2998	5	2998</citation>
	<citation>2998	5	2998</citation>
	<citation>3106	5	2998</citation>
	<citation>1549	6	2998</citation>
	<citation>1549	6	2998</citation>
	<citation>1826	6	2998</citation>
	<citation>210	6	2998</citation>
	<citation>210	6	2998</citation>
	<citation>1972	6	2998</citation>
	<citation>1972	6	2998</citation>
	<citation>2513	6	2998</citation>
	<citation>2665	6	2998</citation>
	<citation>2766	6	2998</citation>
	<citation>2766	6	2998</citation>
	<citation>2833	6	2998</citation>
	<citation>2833	6	2998</citation>
	<citation>2855	6	2998</citation>
	<citation>2954	6	2998</citation>
	<citation>2998	6	2998</citation>
	<citation>2998	6	2998</citation>
	<citation>2998	6	2998</citation>
	</citations>
	</document>
	<document id= '2997'>
	<title>Convex Hulls of Finite Sets of Poin ts in Two and Three Dimensions</title>
	<abstract>The convex hulls of sets of n poin ts in two and three dimensions can be determined with O(n  log n) operations.  The presented algorithms use the "divide and conquer" technique and recursively apply  a merge procedure for two nonin tersecting convex hulls.  Since any convex hull algorithm requires at  least O(n log n) operations, the time complexity of the proposed algorithms is optimal within a multiplicative  constant.</abstract>
	<conference>CACM February, 1977</conference>
	<authors>
	<author>Preparata, F. P.</author>
	<author>Hong, S. J.</author>
	</authors>
	<keywords>computational complexity, convex hull, optimal algorithms, planar set of poin ts, spatial set of  poin ts</keywords>
	<version>4.49 5.25 5.32</version>
	<location>CA770203 JB December 30, 1977  2:47 AM</location>
	<citations>
	<citation>2997	4	2997</citation>
	<citation>2737	5	2997</citation>
	<citation>2997	5	2997</citation>
	<citation>2997	5	2997</citation>
	<citation>2997	5	2997</citation>
	<citation>3151	5	2997</citation>
	<citation>2997	6	2997</citation>
	</citations>
	</document>
	<document id= '2996'>
	<title>Transient-Free Working-Set Statistics</title>
	<abstract>Transient-free average working set size and transient-free missing-page rate for a finite sample  of a reference string are defined.  Use of these statistics is appropriate if the contents of the working  set at the start of the recorded string are unknown.  If a certain stationarity condition holds, these  statistics provide unbiased estimates of expected working-set sizes, missing-page probabilities, and  in terreference distance probabilities.  Two other pairs of estimators are shown to be biased.  Expressions  for the transient-free statistics are obtained in terms of in terval statistics. Several methods of computation  are discussed, the usefulness of each depending on length of the sample, number of distinct references,  and the amount of main storage available to the computer performing the calculations.  In particular,  methods are described for handling long strings containing many distinct page names.</abstract>
	<conference>CACM February, 1977</conference>
	<authors>
	<author>Easton, M. C.</author>
	<author>Bennett, B. T.</author>
	</authors>
	<keywords>working set, estimation program behavior</keywords>
	<version>4.3 4.6 5.5</version>
	<location>CA770204 JB December 30, 1977  2:40 AM</location>
	<citations>
	<citation>1892	4	2996</citation>
	<citation>1901	4	2996</citation>
	<citation>2085	4	2996</citation>
	<citation>2095	4	2996</citation>
	<citation>2218	4	2996</citation>
	<citation>2277	4	2996</citation>
	<citation>2319	4	2996</citation>
	<citation>2329	4	2996</citation>
	<citation>2358	4	2996</citation>
	<citation>2373	4	2996</citation>
	<citation>2374	4	2996</citation>
	<citation>2380	4	2996</citation>
	<citation>2380	4	2996</citation>
	<citation>2434	4	2996</citation>
	<citation>2499	4	2996</citation>
	<citation>2450	4	2996</citation>
	<citation>2501	4	2996</citation>
	<citation>2582	4	2996</citation>
	<citation>2595	4	2996</citation>
	<citation>2669	4	2996</citation>
	<citation>2828	4	2996</citation>
	<citation>2863	4	2996</citation>
	<citation>2881	4	2996</citation>
	<citation>2928	4	2996</citation>
	<citation>2996	4	2996</citation>
	<citation>2996	4	2996</citation>
	<citation>2996	4	2996</citation>
	<citation>3006	4	2996</citation>
	<citation>3006	4	2996</citation>
	<citation>3006	4	2996</citation>
	<citation>3067	4	2996</citation>
	<citation>3067	4	2996</citation>
	<citation>3067	4	2996</citation>
	<citation>1751	5	2996</citation>
	<citation>2373	5	2996</citation>
	<citation>2595	5	2996</citation>
	<citation>2996	5	2996</citation>
	<citation>2996	5	2996</citation>
	<citation>2996	5	2996</citation>
	</citations>
	</document>
	<document id= '2995'>
	<citations>
	<citation>2995	5	2995</citation>
	<citation>2995	5	2995</citation>
	<citation>2995	5	2995</citation>
	</citations>
	<title>Decomposability, Instabilities, and Saturation in Multiprogramming Systems (Corrigendum)</title>
	<conference>CACM February, 1977</conference>
	<authors>
	<author>Courtois, P. J.</author>
	</authors>
	<location>CA770205 JB December 30, 1977  2:20 AM</location>
	</document>
	<document id= '2994'>
	<title>A Linear Algorithm for Incremental Digital Display of Circular Arcs</title>
	<abstract>Circular arcs can be drawn on an incremental display device such as a cathode ray tube, digital  plotter, or matrix prin ter using only sign testing and elementary addition and subtraction.  This paper  describes methodology for producing dot or step patterns closet to the true circle.</abstract>
	<conference>CACM February, 1977</conference>
	<authors>
	<author>Bresenham, J.</author>
	</authors>
	<keywords>graphics, circle drawing, step generation, dot generation, incremental digital plotting, raster  display, integer arithmetic, circle algorithm</keywords>
	<version>4.41 8.2</version>
	<location>CA770207 JB December 30, 1977  2:16 AM</location>
	<citations>
	<citation>2994	5	2994</citation>
	<citation>2994	5	2994</citation>
	<citation>2994	5	2994</citation>
	</citations>
	</document>
	<document id= '2993'>
	<title>Occurrences of Cycling and Other Phenomena Arising in a Class of Linear Programming Models</title>
	<abstract>An investigation into the average queue size for a certain class of queues has resulted in  the formulation of linear programming problems which are ill-conditioned in some cases.  In attempting  to solve these linear programming models, using IBM's MPS package, instances of cycling were encountered.   Small perturbations in the input data resulted in problems which did not cycle.  This fact, plus several  other observed phenomena suggest that the primary reason that cycling is not known to occur more frequently  is the round-off errors in the computations perturb the problem sufficiently to prevent cycling (or at  least to prevent indefinite cycling).  In one case maximizing and minimizing an objective function subject  to the same constrain t set was attempted, but MPS solved only one of these while giving an indication  of infeasibility for the other.</abstract>
	<conference>CACM February, 1977</conference>
	<authors>
	<author>Kotiah, T. C. T.</author>
	<author>Steinberg, D. I.</author>
	</authors>
	<keywords>linear programming, cycling, queueing models</keywords>
	<version>5.41 5.9</version>
	<location>CA770208 JB December 30, 1977  2:11 AM</location>
	<citations>
	<citation>2993	5	2993</citation>
	<citation>2993	5	2993</citation>
	<citation>2993	5	2993</citation>
	</citations>
	</document>
	<document id= '2992'>
	<title>A Numbering System for Binary Trees</title>
	<conference>CACM February, 1977</conference>
	<authors>
	<author>Knott, G. D.</author>
	</authors>
	<keywords>binary trees, permutations, binary search trees, ranking function</keywords>
	<version>3.79 5.39</version>
	<location>CA770209 JB December 30, 1977 2:04 AM</location>
	<citations>
	<citation>2992	5	2992</citation>
	<citation>2992	5	2992</citation>
	<citation>2992	5	2992</citation>
	</citations>
	</document>
	<document id= '2991'>
	<title>Improving the Access Time for Random Access Files</title>
	<abstract>Clustering in the key set is decreased by smoothing the key-to-address transformation, and  by adding shadow buckets to an open chaining file.  The keys are pre-hashed before the address division,  to remove the effect of sequential properties in the key set.  Shadow buckets in the key search sequence  reduce the effect of nonuniformity in file loading, and decrease the number of maximum probes needed  to locate a record.  The combined effects of these techniques lead to improved file performance for secondary  storage devices, as shown by empirical studies.</abstract>
	<conference>CACM March, 1977</conference>
	<authors>
	<author>Clapson, P.</author>
	</authors>
	<keywords>hashing, hashing techniques, hashing methods, hash coding, keys, key transformation, key-to-address  transformation, direct addressing, direct access, direct access method, randomizing, random access, file  addressing, file organizations, file structures, scatter storage, search method, collisions, synonyms,  clustering, information retrieval, open addressing, open chaining, buckets, bucket size, shadow buckets,  combinatorics</keywords>
	<version>3.7 3.72 3.73 3.74 4.9 5.39</version>
	<location>CA770301 JB December 30, 1977  2:00 AM</location>
	<citations>
	<citation>1676	4	2991</citation>
	<citation>1682	4	2991</citation>
	<citation>1728	4	2991</citation>
	<citation>1860	4	2991</citation>
	<citation>1973	4	2991</citation>
	<citation>1973	4	2991</citation>
	<citation>1992	4	2991</citation>
	<citation>2018	4	2991</citation>
	<citation>2032	4	2991</citation>
	<citation>2033	4	2991</citation>
	<citation>2107	4	2991</citation>
	<citation>2109	4	2991</citation>
	<citation>2138	4	2991</citation>
	<citation>2203	4	2991</citation>
	<citation>2203	4	2991</citation>
	<citation>2251	4	2991</citation>
	<citation>2251	4	2991</citation>
	<citation>2258	4	2991</citation>
	<citation>2319	4	2991</citation>
	<citation>2313	4	2991</citation>
	<citation>2359	4	2991</citation>
	<citation>2359	4	2991</citation>
	<citation>2437	4	2991</citation>
	<citation>2524	4	2991</citation>
	<citation>2530	4	2991</citation>
	<citation>2537	4	2991</citation>
	<citation>2543	4	2991</citation>
	<citation>2543	4	2991</citation>
	<citation>2552	4	2991</citation>
	<citation>2552	4	2991</citation>
	<citation>2559	4	2991</citation>
	<citation>2559	4	2991</citation>
	<citation>2573	4	2991</citation>
	<citation>2781	4	2991</citation>
	<citation>2860	4	2991</citation>
	<citation>2991	4	2991</citation>
	<citation>2991	4	2991</citation>
	<citation>2991	4	2991</citation>
	<citation>3053	4	2991</citation>
	<citation>3053	4	2991</citation>
	<citation>3083	4	2991</citation>
	<citation>1785	5	2991</citation>
	<citation>2107	5	2991</citation>
	<citation>2203	5	2991</citation>
	<citation>2991	5	2991</citation>
	<citation>2991	5	2991</citation>
	<citation>2991	5	2991</citation>
	</citations>
	</document>
	<document id= '2990'>
	<title>Effective Information Retrieval Using Term Accuracy</title>
	<abstract>The performance of information retrieval systems can be evaluated in a number of different  ways.  Much of the published evaluation work is based on measuring the retrieval performance of an average  user query.  Unfortunately, formal proofs are difficult to construct for the average case.  In the present  study, retrieval evaluation is based on optimizing the performance of a specific user query.  The concept  of query term accuracy is in troduced as the probability of occurrence of a query term in the documents  relevant to that query.  By relating term accuracy to the frequency of occurrence of the term in the  documents of a collection it is possible to give formal proofs of the effectiveness with respect to a  given user query of a number of automatic indexing systems that have been used successfully in experimental  situations.  Among these are inverse document frequency weighting, thesaurus construction, and phrase  generation.</abstract>
	<conference>CACM March, 1977</conference>
	<authors>
	<author>Yu, C. T.</author>
	<author>Salton, G.</author>
	</authors>
	<keywords>information retrieval, automatic indexing, content analysis, term accuracy, frequency weighting,  thesaurus and phrase transformations</keywords>
	<version>3.71 3.72 3.75</version>
	<location>CA770302 JB December 30, 1977  1:52 AM</location>
	<citations>
	<citation>2990	5	2990</citation>
	<citation>2990	5	2990</citation>
	<citation>2990	5	2990</citation>
	<citation>3134	5	2990</citation>
	<citation>1976	6	2990</citation>
	<citation>2160	6	2990</citation>
	<citation>2524	6	2990</citation>
	<citation>2990	6	2990</citation>
	</citations>
	</document>
	<document id= '2989'>
	<title>Empirical Evaluation of Some Features of Instruction Set Processor Architectures</title>
	<abstract>This paper presents methods for empirical evaluation of features of Instruction Set Processors  (ISPs).  ISP features are evaluated in terms of the time used or saved by having or not having the feature.   The methods are based on analysis of traces of program executions.  The concept of a register life is  in troduced, and used to answer questions like: How many registers are used simultaneously? How many would  be sufficient all of the time? Most of the time? What would the overhead be if the number of registers  were reduced? What are registers used for during their lives? The paper also discusses the problem of  detecting desirable but non-existing instructions. Other problems are briefly discussed.  Experimental  results are presented, obtained by analyzing 41 programs running on the DEC system 10 ISP.</abstract>
	<conference>CACM March, 1977</conference>
	<authors>
	<author>Lunde, A.</author>
	</authors>
	<keywords>computer architecture, program behavior, instruction sets, op code utilization, register structures,  register utilization, simultaneous register lives, instruction tracing, execution time</keywords>
	<version>6.20 6.21 6.33</version>
	<location>CA770303 JB December 30, 1977  1:00 AM</location>
	<citations>
	<citation>1653	4	2989</citation>
	<citation>2411	4	2989</citation>
	<citation>2709	4	2989</citation>
	<citation>2889	4	2989</citation>
	<citation>2937	4	2989</citation>
	<citation>2989	4	2989</citation>
	<citation>2989	4	2989</citation>
	<citation>3005	4	2989</citation>
	<citation>3025	4	2989</citation>
	<citation>3101	4	2989</citation>
	<citation>1069	5	2989</citation>
	<citation>2138	5	2989</citation>
	<citation>2989	5	2989</citation>
	<citation>2989	5	2989</citation>
	<citation>2989	5	2989</citation>
	<citation>3025	5	2989</citation>
	<citation>2138	6	2989</citation>
	<citation>2989	6	2989</citation>
	</citations>
	</document>
	<document id= '2988'>
	<title>Memory Management and Response Time</title>
	<abstract>This paper presents a computationally tractable methodology for including accurately the effects  of finite memory size and workload memory requirements in queueing network models of computer systems.   Empirical analyses and analytic studies based on applying this methodology to an actual multiaccess  in teractive system are reported.  Relations between workload variables such as memory requirement distribution  and job swap time, and performance measures such as response time and memory utilization are graphically  displayed. A multiphase, analytically soluble model is proposed as being broadly applicable to the analysis  of in teractive computer systems which use nonpaged memories.</abstract>
	<conference>CACM March, 1977</conference>
	<authors>
	<author>Brown, R. M.</author>
	<author>Browne, J. C.</author>
	<author>Chandy, K. M.</author>
	</authors>
	<keywords>memory management, system performance, queueing network models, in teractive computer systems</keywords>
	<version>4.32</version>
	<location>CA770304 JB December 30, 1977  12:51 AM</location>
	<citations>
	<citation>2988	4	2988</citation>
	<citation>1750	5	2988</citation>
	<citation>2988	5	2988</citation>
	<citation>2988	5	2988</citation>
	<citation>2988	5	2988</citation>
	<citation>3059	5	2988</citation>
	<citation>3070	5	2988</citation>
	<citation>1805	6	2988</citation>
	<citation>2454	6	2988</citation>
	<citation>2741	6	2988</citation>
	<citation>2988	6	2988</citation>
	<citation>2988	6	2988</citation>
	</citations>
	</document>
	<document id= '2987'>
	<title>Representation of Many-Sided Polygons and Polygonal Lines for Rapid Processing</title>
	<abstract>A representation for polygons and polygonal lines is described which allows sets of consecutive  sides to be collectively examined.  The set of sides are arranged in a binary tree hierarchy by inclusion.   A fast algorithm for testing the inclusion of a poin t in a many-sided polygon is given.  The speed of  the algorithm is discussed for both ideal and practical examples.  It is shown that the poin ts of intersection  of two polygonal lines can be located by what is essentially a binary tree search.  The algorithm and  a practical example are discussed.  The representation overcomes many of the disadvantages associated  with the various fixed-grid methods for representing curves and regions</abstract>
	<conference>CACM March, 1977</conference>
	<authors>
	</authors>
	<keywords>boundary line representation, cartography, computer graphics computer-searchable structures, contour  representation, geographic information processing, graphic data retrieval, in tersection of curves, line-drawing  processing, poin ts in polygons, regional boundary representation, spatial information</keywords>
	<version>3.14 3.23 3.30 3.79 8.2</version>
	<location>CA770305 JB December 30, 1977  12:44 AM</location>
	<citations>
	<citation>1630	4	2987</citation>
	<citation>1804	4	2987</citation>
	<citation>1804	4	2987</citation>
	<citation>2547	4	2987</citation>
	<citation>2987	4	2987</citation>
	<citation>2987	4	2987</citation>
	<citation>2987	4	2987</citation>
	<citation>2987	4	2987</citation>
	<citation>2987	4	2987</citation>
	<citation>2987	4	2987</citation>
	<citation>2987	4	2987</citation>
	<citation>3165	4	2987</citation>
	<citation>1326	5	2987</citation>
	<citation>1630	5	2987</citation>
	<citation>2125	5	2987</citation>
	<citation>2547	5	2987</citation>
	<citation>2633	5	2987</citation>
	<citation>2987	5	2987</citation>
	<citation>2987	5	2987</citation>
	<citation>2987	5	2987</citation>
	<citation>421	5	2987</citation>
	<citation>524	5	2987</citation>
	<citation>3165	5	2987</citation>
	<citation>1326	6	2987</citation>
	<citation>2987	6	2987</citation>
	</citations>
	</document>
	<document id= '2986'>
	<title>Operations on Sparse Relations</title>
	<abstract>Various computations on relations, Boolean matrices, or directed graphs, such as the computation  of precedence relations for a context-free grammar, can be done by a practical algorithm that is asymptotically  faster than those in common use.  For example, how to compute operator precedence or Wirth-Weber precedence  relations in O(n^2) steps is shown, as well as how to compute linear precedence functions in O(n^2) steps  is shown, as well as how to compute linear precedence functions in O(n) steps, where n is the size of  a grammer.  The heart of the algorithms is a general theorem giving sufficient conditions under which  an expression whose operands are sparse relations and whose operators are composition, transitive closure,  union, and inverse, can be computed efficiently.</abstract>
	<conference>CACM March, 1977</conference>
	<authors>
	<author>Hunt, H. B.</author>
	<author>Szymanski, T. G.</author>
	<author>Ullman, J. D.</author>
	</authors>
	<keywords>computational complexity, sparse relation, Boolean matrix, directed graph, Wirth-Weber precedence  relation, linear precedence function, SLR grammar, T-canonical precedence relation</keywords>
	<version>4.12 5.23 5.25</version>
	<location>CA770306 JB December 29, 1977  8:05 AM</location>
	<citations>
	<citation>1542	4	2986</citation>
	<citation>1683	4	2986</citation>
	<citation>1693	4	2986</citation>
	<citation>1781	4	2986</citation>
	<citation>1787	4	2986</citation>
	<citation>1836	4	2986</citation>
	<citation>1945	4	2986</citation>
	<citation>2060	4	2986</citation>
	<citation>2061	4	2986</citation>
	<citation>2082	4	2986</citation>
	<citation>2091	4	2986</citation>
	<citation>2152	4	2986</citation>
	<citation>2179	4	2986</citation>
	<citation>2221	4	2986</citation>
	<citation>2340	4	2986</citation>
	<citation>2340	4	2986</citation>
	<citation>2340	4	2986</citation>
	<citation>2356	4	2986</citation>
	<citation>2546	4	2986</citation>
	<citation>2603	4	2986</citation>
	<citation>2698	4	2986</citation>
	<citation>2708	4	2986</citation>
	<citation>2733	4	2986</citation>
	<citation>2824	4	2986</citation>
	<citation>2824	4	2986</citation>
	<citation>2824	4	2986</citation>
	<citation>2982	4	2986</citation>
	<citation>2982	4	2986</citation>
	<citation>2982	4	2986</citation>
	<citation>2986	4	2986</citation>
	<citation>2986	4	2986</citation>
	<citation>2986	4	2986</citation>
	<citation>2986	4	2986</citation>
	<citation>2986	4	2986</citation>
	<citation>3045	4	2986</citation>
	<citation>3093	4	2986</citation>
	<citation>3093	4	2986</citation>
	<citation>3094	4	2986</citation>
	<citation>1491	5	2986</citation>
	<citation>1683	5	2986</citation>
	<citation>1836	5	2986</citation>
	<citation>2179	5	2986</citation>
	<citation>2340	5	2986</citation>
	<citation>2986	5	2986</citation>
	<citation>2986	5	2986</citation>
	<citation>2986	5	2986</citation>
	</citations>
	</document>
	<document id= '2985'>
	<title>Effects of Chargeout on User/Manager Attitudes</title>
	<abstract>The relationship of in ternal pricing systems for computer services (chargeout systems) and  user management attitudes about their computer-based information systems is investigated. Evidence is  provided that the relationship conforms to a general pattern that would be expected from the hypothesis  of the four stages of EDP growth [15].  The results also indicate that the chargeout systems characteristic  of advanced EDP stage environments are associated with relatively high levels of positive user attitudes  and marked increases in EDP training for users. Both factors are important to the user/manager involvement  necessary for effective control of computer-based systems.  Development and main tenance of computer-based  systems is asserted to be a category of organizational change.  A "felt need" for the change on the part  of the user/manager is prerequisite to any change taking place.  The research methods of behavioral science  are applied to investigate the user/manager environment and the effects of chargeout.</abstract>
	<conference>CACM March, 1977</conference>
	<authors>
	<author>Nolan, R. L.</author>
	</authors>
	<keywords>computer management, computer budget, chargeout, stage hypothesis, control</keywords>
	<version>2.41 2.43 3.50</version>
	<location>CA770307 JB December 29, 1977  6:43 AM</location>
	<citations>
	<citation>2977	4	2985</citation>
	<citation>2985	4	2985</citation>
	<citation>3011	4	2985</citation>
	<citation>3035	4	2985</citation>
	<citation>2485	5	2985</citation>
	<citation>2985	5	2985</citation>
	<citation>2985	5	2985</citation>
	<citation>2985	5	2985</citation>
	</citations>
	</document>
	<document id= '2984'>
	<title>Cost/Utilization: A Measure of System Performance</title>
	<abstract>A method is presented for evaluating computer system performance in terms of a cost/utilization  factor and a measure of imbalance.  These coefficients indicate the extent to which the total system  cost is effectively utilized.  The method includes a technique for the visual representation of system  performance.</abstract>
	<conference>CACM March, 1977</conference>
	<authors>
	<author>Borovits, I.</author>
	<author>Dor, P.</author>
	</authors>
	<keywords>computer system, performance evaluation, cost/utilization, system balance</keywords>
	<version>2.44</version>
	<location>CA770308 JB December 29, 1977  6:41 AM</location>
	<citations>
	<citation>2705	4	2984</citation>
	<citation>2984	4	2984</citation>
	<citation>1908	5	2984</citation>
	<citation>2984	5	2984</citation>
	<citation>2984	5	2984</citation>
	<citation>2984	5	2984</citation>
	</citations>
	</document>
	<document id= '2983'>
	<title>A Comparison of Next-fit, First-fit, and Best-fit</title>
	<conference>CACM March, 1977</conference>
	<authors>
	<author>Bays, C.</author>
	</authors>
	<keywords>memory allocation, first-fit, best-fit, next-fit</keywords>
	<version>4.32 4.35</version>
	<location>CA770309 JB December 29, 1977  6:36 AM</location>
	<citations>
	<citation>2902	4	2983</citation>
	<citation>2911	4	2983</citation>
	<citation>2983	4	2983</citation>
	<citation>2734	5	2983</citation>
	<citation>2911	5	2983</citation>
	<citation>2983	5	2983</citation>
	<citation>2983	5	2983</citation>
	<citation>2983	5	2983</citation>
	<citation>1879	6	2983</citation>
	<citation>273	6	2983</citation>
	<citation>2435	6	2983</citation>
	<citation>2498	6	2983</citation>
	<citation>2734	6	2983</citation>
	<citation>2773	6	2983</citation>
	<citation>2983	6	2983</citation>
	</citations>
	</document>
	<document id= '2982'>
	<title>The Storage Requirement in Precedence Parsing</title>
	<conference>CACM March, 1977</conference>
	<authors>
	<author>Bertsch, E.</author>
	</authors>
	<keywords>precedence parsing, storage requirement, value table</keywords>
	<version>4.12 5.22</version>
	<location>CA770310JB December 29, 1977  6:34 AM</location>
	<citations>
	<citation>1542	4	2982</citation>
	<citation>1683	4	2982</citation>
	<citation>1693	4	2982</citation>
	<citation>1781	4	2982</citation>
	<citation>1787	4	2982</citation>
	<citation>1836	4	2982</citation>
	<citation>1945	4	2982</citation>
	<citation>2060	4	2982</citation>
	<citation>2061	4	2982</citation>
	<citation>2082	4	2982</citation>
	<citation>2091	4	2982</citation>
	<citation>2152	4	2982</citation>
	<citation>2179	4	2982</citation>
	<citation>2340	4	2982</citation>
	<citation>2340	4	2982</citation>
	<citation>2356	4	2982</citation>
	<citation>2546	4	2982</citation>
	<citation>2603	4	2982</citation>
	<citation>2698	4	2982</citation>
	<citation>2708	4	2982</citation>
	<citation>2824	4	2982</citation>
	<citation>2824	4	2982</citation>
	<citation>2982	4	2982</citation>
	<citation>2982	4	2982</citation>
	<citation>2982	4	2982</citation>
	<citation>2986	4	2982</citation>
	<citation>2986	4	2982</citation>
	<citation>2986	4	2982</citation>
	<citation>3045	4	2982</citation>
	<citation>3093	4	2982</citation>
	<citation>1491	5	2982</citation>
	<citation>1836	5	2982</citation>
	<citation>2340	5	2982</citation>
	<citation>2982	5	2982</citation>
	<citation>2982	5	2982</citation>
	<citation>2982	5	2982</citation>
	</citations>
	</document>
	<document id= '2981'>
	<title>Subgoal Induction</title>
	<abstract>A proof method, subgoal induction, is presented as an alternative or supplement to the commonly  used inductive assertion method.  Its major virtue is that it can often be used to prove a loop's correctness  directly from its input-output specification without the use of an invariant.  The relation between subgoal  induction and other commonly used induction rules is explored and, in particular, it is shown that subgoal  induction can be viewed as a specialized form of computation induction.  A set of sufficient conditions  are presented which guarantee that an input-output specification is strong enough for the induction steps  of a proof by subgoal induction to be valid.</abstract>
	<conference>CACM April, 1977</conference>
	<authors>
	<author>Morris, J. H. Jr.</author>
	<author>Wegbreit, B.</author>
	</authors>
	<keywords>program verification, proving programs correct, induction rule, computation induction, inductive  assertions, structural induction, proof rule, recursive programs, iterative programs</keywords>
	<version>4.19 4.22 5.21 5.24</version>
	<location>CA770401 JB December 29, 1977  6:31 AM</location>
	<citations>
	<citation>2981	4	2981</citation>
	<citation>3030	4	2981</citation>
	<citation>3077	4	2981</citation>
	<citation>3104	4	2981</citation>
	<citation>2457	5	2981</citation>
	<citation>2981	5	2981</citation>
	<citation>2981	5	2981</citation>
	<citation>2981	5	2981</citation>
	<citation>3014	5	2981</citation>
	<citation>1834	6	2981</citation>
	<citation>2981	6	2981</citation>
	</citations>
	</document>
	<document id= '2980'>
	<title>The Editing  of Picture Segmentations Using Local Analysis of Graphs</title>
	<abstract>A major problem in picture processing is the elimination of the large number of spurious regions  that result from an initial segmentation by region growing techniques.  Such regions have been eliminated  either on the basis of semantic information or on the basis of size and contrast.  A scheme is presented  which performs eliminations on the basis of local properties of the region adjacency graph.  The scheme  is based on definitions of graph properties which are satisfied when a spurious region is present; then  editing is equivalent to fast graph operations.  A number of examples are shown.</abstract>
	<conference>CACM April, 1977</conference>
	<authors>
	<author>Tanimoto, S. L.</author>
	<author>Pavlidis, T.</author>
	</authors>
	<keywords>picture processing, pattern recognition, segmentation, region editing</keywords>
	<version>3.63</version>
	<location>CA770402 JB December 29, 1977  6:22 AM</location>
	<citations>
	<citation>2980	4	2980</citation>
	<citation>2523	5	2980</citation>
	<citation>2980	5	2980</citation>
	<citation>2980	5	2980</citation>
	<citation>2980	5	2980</citation>
	</citations>
	</document>
	<document id= '2979'>
	<title>Studies in Machine Cognition Using The Game of Poker</title>
	<abstract>A progress report is presented of on-going research efforts concerning human decision making  under uncertainly and risk and human problem solving and learning processes on the one hand, and machine  learning, large scale programming systems, and novel programming techniques on the other.  There has  also been in terest in how humans make deductive and inductive inferences and form and optimize heuristic  rules, and how machines can reach similar results.  Although the vehicle of these investigations has  been the game of poker, a conceptual framework has been provided that should have a fairly wide range  of applicability.  The models of human judgment, choice, and decision making are incorporated in a large  scale complex program.  They represent both descriptive and normative theories of behavior. An in teractive  game environment has been recently established which, besides its usefulness for experiments in game  playing, enables humans to construct machine strategies "on-line" in a question answering, advice taking  mode.</abstract>
	<conference>CACM April, 1977</conference>
	<authors>
	<author>Findler, N. V.</author>
	</authors>
	<keywords>machine learning, game playing programs, decision making under uncertain ty and risk, automatic  forming and optimizing of heuristic rules, automatic inductive and deductive inference making, models  of game learning, poker, gambling and bluffing</keywords>
	<version>3.36 3.62 3.61 3.64 3.65 3.66</version>
	<location>CA770403 JB December 29, 1977  5:34 AM</location>
	<citations>
	<citation>2979	5	2979</citation>
	<citation>2979	5	2979</citation>
	<citation>2979	5	2979</citation>
	</citations>
	</document>
	<document id= '2978'>
	<title>Analysis of Design Alternatives for Virtual Memory Indexes</title>
	<abstract>A class of index structures for use in a virtual memory environment is described.  Design alternatives  within this class of index structures are analyzed.  These alternatives include a choice of search strategy,  whether or not pages in the index are structured, and whether or not keys are compressed.  The average  cost of retrieving entries from these indexes is expressed as a wieghted sum of the cost of a basic key  comparison and the cost of crossing a page boundary in the index structure.  Formulas for the retrieval  costs for possible combinations of design alternatives are given.  These are used in numerical case studies  which compare the retrieval costs of the alternatives.  Qualitative comparisons of the main tenance costs  (insertion, deletion, reorganization) of the design alternatives are also included.</abstract>
	<conference>CACM April, 1977</conference>
	<authors>
	<author>Maruyama, K.</author>
	<author>Smith, S. E.</author>
	</authors>
	<keywords>index, index structure, pages, virtual memory, files, retrieval, main tenance, search strategy,  key compression</keywords>
	<version>3.50 3.51 3.02 3.73 3.74</version>
	<location>CA770404 JB December 29, 1977  5:22 AM</location>
	<citations>
	<citation>2451	4	2978</citation>
	<citation>2556	4	2978</citation>
	<citation>2978	4	2978</citation>
	<citation>1935	5	2978</citation>
	<citation>2978	5	2978</citation>
	<citation>2978	5	2978</citation>
	<citation>2978	5	2978</citation>
	<citation>3058	5	2978</citation>
	<citation>3063	5	2978</citation>
	<citation>2978	6	2978</citation>
	<citation>2978	6	2978</citation>
	</citations>
	</document>
	<document id= '2977'>
	<title>The Stage Hypothesis and the S-Curve: Some Contradictory Evidence</title>
	<abstract>This paper presents the results of a study testing the s-shaped budget curve of Nolan's stage  model of computer development in an organization.  Research on the data processing budgets of California  counties fails to support the s-shaped curve or the use of budgets as a basis for a stage model.  However,  the results do not invalidate the concept of a stage model.  The analysis suggests an alternative model  of budget growth and a separation between models of budgeting growth and growth stages in the development  of the computer resource.</abstract>
	<conference>CACM April, 1977</conference>
	<authors>
	<author>Lucac, H. C. Jr.</author>
	<author>Sutton, J. A.</author>
	</authors>
	<keywords>budgets, stage theories, stage hypothesis</keywords>
	<version>3.50 3.59</version>
	<location>CA770405 JB December 29, 1977  5:12 AM</location>
	<citations>
	<citation>2977	4	2977</citation>
	<citation>2985	4	2977</citation>
	<citation>3011	4	2977</citation>
	<citation>3035	4	2977</citation>
	<citation>2485	5	2977</citation>
	<citation>2977	5	2977</citation>
	<citation>2977	5	2977</citation>
	<citation>2977	5	2977</citation>
	</citations>
	</document>
	<document id= '2976'>
	<title>Approximating Block Accesses in Database Organizations</title>
	<conference>CACM April, 1977</conference>
	<authors>
	<author>Yao, S. B.</author>
	</authors>
	<keywords>database, inverted file organization, database performance and measurement, information retrieval,  query answering</keywords>
	<version>3.70 3.72 4.33</version>
	<location>CA770406 JB December 29, 1977  5:06 AM</location>
	<citations>
	<citation>2976	4	2976</citation>
	<citation>2976	4	2976</citation>
	<citation>2976	4	2976</citation>
	<citation>2688	5	2976</citation>
	<citation>2765	5	2976</citation>
	<citation>2882	5	2976</citation>
	<citation>2976	5	2976</citation>
	<citation>2976	5	2976</citation>
	<citation>2976	5	2976</citation>
	</citations>
	</document>
	<document id= '2975'>
	<title>Remark on Uniform Insertion in Structured Data Structures</title>
	<conference>CACM April, 1977</conference>
	<authors>
	<author>Hollander, C.R.</author>
	</authors>
	<keywords>data structures, directed graphs, uniform insertion</keywords>
	<version>4.34</version>
	<location>CA770407 JB December 29, 1977  5:04 AM</location>
	<citations>
	<citation>2975	4	2975</citation>
	<citation>2594	5	2975</citation>
	<citation>2975	5	2975</citation>
	<citation>2975	5	2975</citation>
	<citation>2975	5	2975</citation>
	</citations>
	</document>
	<document id= '2974'>
	<title>Comment on Weighted Increment Linear Search for Scatter Tables</title>
	<conference>CACM April, 1977</conference>
	<authors>
	<author>Bandyopadhyay, S. K.</author>
	</authors>
	<keywords>hash address, primary clustering, index, sequence, complementary relation, search</keywords>
	<version>3.73 3.74 4.9 4.11 4.12</version>
	<location>CA770408 JB December 29, 1977  5:02 AM</location>
	<citations>
	<citation>1973	4	2974</citation>
	<citation>2018	4	2974</citation>
	<citation>2203	4	2974</citation>
	<citation>2251	4	2974</citation>
	<citation>2543	4	2974</citation>
	<citation>2770	4	2974</citation>
	<citation>2974	4	2974</citation>
	<citation>2974	4	2974</citation>
	<citation>3053	4	2974</citation>
	<citation>2109	5	2974</citation>
	<citation>2251	5	2974</citation>
	<citation>2974	5	2974</citation>
	<citation>2974	5	2974</citation>
	<citation>2974	5	2974</citation>
	</citations>
	</document>
	<document id= '2973'>
	<title>Sorting on a Mesh-Connected Parallel Computer</title>
	<abstract>Two algorithms are presented for sorting n^2 elements on an n X n mesh-connected processor  array that require O(n) routing and comparison steps.  The best previous algorithm takes time O(n log  n).  The algorithms of this paper are shown to be optimal in time within small constant factors.  Extensions  to higher-dimensional arrays are also given.</abstract>
	<conference>CACM April, 1977</conference>
	<authors>
	<author>Thompson, C. D.</author>
	<author>Kung, H. T.</author>
	</authors>
	<keywords>parallel computer, parallel sorting, parallel merge, routing and comparison steps, perfect shuffle.  processor in terconnection pattern</keywords>
	<version>4.32 5.25 5.31</version>
	<location>CA770409 JB December 29, 1977  4:58 AM</location>
	<citations>
	<citation>2973	5	2973</citation>
	<citation>2973	5	2973</citation>
	<citation>2973	5	2973</citation>
	<citation>3156	5	2973</citation>
	<citation>2289	6	2973</citation>
	<citation>2973	6	2973</citation>
	<citation>3075	6	2973</citation>
	</citations>
	</document>
	<document id= '2972'>
	<title>Proof Techniques for Hierarchically Structured Programs</title>
	<abstract>A method for describing and structuring programs that simplifies proofs of their correctness  is presented.  The method formally represents a program in terms of levels of abstraction, each level  of which can be described by a self-contained nonprocedural specification.  The proofs, like the programs,  are structured by levels.  Although only manual proofs are described in the paper, the method is also  applicable to semi-automatic and automatic proofs.  Preliminary results are encouraging, indicating that  the method can be applied to large programs, such as operating systems.</abstract>
	<conference>CACM April, 1977</conference>
	<authors>
	<author>Robinson, L.</author>
	<author>Levitt, K. N.</author>
	</authors>
	<keywords>hierarchical structure, program verification, structured programming, formal specification, abstraction,  and programming methodology</keywords>
	<version>4.0 4.29 4.9 5.24</version>
	<location>CA770410 JB December 29, 1977  4:53 AM</location>
	<citations>
	<citation>2042	4	2972</citation>
	<citation>2222	4	2972</citation>
	<citation>2319	4	2972</citation>
	<citation>2356	4	2972</citation>
	<citation>2480	4	2972</citation>
	<citation>2594	4	2972</citation>
	<citation>2679	4	2972</citation>
	<citation>2709	4	2972</citation>
	<citation>2844	4	2972</citation>
	<citation>2865	4	2972</citation>
	<citation>2866	4	2972</citation>
	<citation>2896	4	2972</citation>
	<citation>2898	4	2972</citation>
	<citation>2939	4	2972</citation>
	<citation>2972	4	2972</citation>
	<citation>2972	4	2972</citation>
	<citation>2972	4	2972</citation>
	<citation>2972	4	2972</citation>
	<citation>2972	4	2972</citation>
	<citation>3037	4	2972</citation>
	<citation>3039	4	2972</citation>
	<citation>3043	4	2972</citation>
	<citation>3043	4	2972</citation>
	<citation>3073	4	2972</citation>
	<citation>3128	4	2972</citation>
	<citation>3144	4	2972</citation>
	<citation>3155	4	2972</citation>
	<citation>970	5	2972</citation>
	<citation>2204	5	2972</citation>
	<citation>2597	5	2972</citation>
	<citation>2732	5	2972</citation>
	<citation>2738	5	2972</citation>
	<citation>2972	5	2972</citation>
	<citation>2972	5	2972</citation>
	<citation>2972	5	2972</citation>
	<citation>3030	5	2972</citation>
	<citation>2247	6	2972</citation>
	<citation>2356	6	2972</citation>
	<citation>2457	6	2972</citation>
	<citation>2651	6	2972</citation>
	<citation>2958	6	2972</citation>
	<citation>2972	6	2972</citation>
	</citations>
	</document>
	<document id= '2971'>
	<title>SP/k: A System for Teaching Computer Programming</title>
	<abstract>SP/k is a compatible subset of the PL/I  language that has been designed for teaching programming.  The features of the SP/k language were chosen to encourage structured problem solving by computers, to  make the language easy to learn and use, to eliminate confusing and redundant constructs, and to make  the language easy to compile.  The resulting language is suitable for in troducing programming concepts  used in various applications, including business data processing, scientific calculations and non-numeric  computation.  SP/k is actually a sequence of language subsets called SP/1, SP/2,...SP/8.  Each subset  in troduces new programming language constructs while retaining all the constructs of preceding subsets.  Each subset is precisely defined and can be learned or implemented without the following subsets.</abstract>
	<conference>CACM May, 1977</conference>
	<authors>
	<author>Holt, R. C.</author>
	<author>Wortman, D. B.</author>
	<author>Barnard, D. T.</author>
	<author>Cordy, J. R.</author>
	</authors>
	<keywords>programmer education, universities, community colleges, high schools, PL/I, SP/k, minicomputers,  programming language design, teaching programming, in troductory computing</keywords>
	<version>1.5 4.2 4.12 4.13</version>
	<location>CA770501 JB December 29, 1977  4:40 AM</location>
	<citations>
	<citation>2708	4	2971</citation>
	<citation>2820	4	2971</citation>
	<citation>2971	4	2971</citation>
	<citation>2971	4	2971</citation>
	<citation>2971	4	2971</citation>
	<citation>3045	4	2971</citation>
	<citation>1835	5	2971</citation>
	<citation>1974	5	2971</citation>
	<citation>2534	5	2971</citation>
	<citation>2971	5	2971</citation>
	<citation>2971	5	2971</citation>
	<citation>2971	5	2971</citation>
	</citations>
	</document>
	<document id= '2970'>
	<title>Achieving Specific Accuracy in Simulation Output Analysis</title>
	<abstract>This paper extends the use of the regenerative property of queueing systems in the analysis  of simulation output.  In particular, it describes a sequential estimation method which when used with  the regenerative property allows results to be obtained with specified statistical accuracy.  This method  includes a test to check the normality assumption on which the sequential procedure relies.  The paper  illustrates the method using the empty and idle state as the regenerative state.  A second example then  describes how using the most frequently entered state as the regenerative state reduces the chance of  making a costly error in a preliminary simulation run.  The paper also described how a variance reduction  method due to Page [9] can be used to obtain a specified accuracy with considerably fewer job completions  than are required when no variance reduction technique is applied.</abstract>
	<conference>CACM May, 1977</conference>
	<authors>
	<author>Fishman, G. S.</author>
	</authors>
	<keywords>confidence in terval, ratio estimator, regenerative property, sequential estimator, simulation,  stopping rule, variance reduction</keywords>
	<version>5.5 8.1</version>
	<location>CA770502 JB December 29, 1977  2:43 AM</location>
	<citations>
	<citation>2970	5	2970</citation>
	<citation>2970	5	2970</citation>
	<citation>2970	5	2970</citation>
	</citations>
	</document>
	<document id= '2969'>
	<title>Optimal Program and Data Locations in Computer Networks</title>
	<abstract>An optimization procedure for the allocation of program and data files in a computer network  is presented.  This algorithm takes into account the dependencies between files and programs such as  occur in real heterogeneous computer networks.  Insights into whether or not to convert programs from  one computer to another can also be gained from the model.  A search procedure for the file location  problem is described, along with an example and a possible application of the model.</abstract>
	<conference>CACM May, 1977</conference>
	<authors>
	<author>Morgan, H. L.</author>
	<author>Levin, K. D.</author>
	</authors>
	<keywords>computer networks, databases, distributed databases, optimal file location</keywords>
	<version>3.81 3.51 4.33</version>
	<location>CA770503 JB December 29, 1977  2:22 AM</location>
	<citations>
	<citation>2969	5	2969</citation>
	<citation>2969	5	2969</citation>
	<citation>2969	5	2969</citation>
	</citations>
	</document>
	<document id= '2968'>
	<title>A Comparison of Tree-Balancing Algorithms</title>
	<abstract>Several algorithms-height-balance (i.e. AVL and extensions), weight-balance (i.e. BB and WB),  and total restructuring-for building balanced binary search trees are compared.  The criteria for comparison  encompass theoretical aspects (e.g. path lengths) and implementation independent and machine/algorithm-dependent  measures (e.g. run time).  A detailed analysis of code is also presented at a level believed to be language-and  compiler-independent.  The quality of the resulting trees and the overhead spent on building them are  analyzed, and some guidelines are given for an efficient use of the methods.  If insertion and subsequent  queries are the only operations of in terest, then "pure" AVL trees present the overall best qualities.</abstract>
	<conference>CACM May, 1977</conference>
	<authors>
	<author>Baer, J. L.</author>
	<author>Schwab, B.</author>
	</authors>
	<keywords>binary search trees, AVL trees, weight-balanced trees, path length, analysis of algorithms, information  storage and retrieval</keywords>
	<version>3.7 3.72 3.74 5.31</version>
	<location>CA770504 JB December 29, 1977  2:16 AM</location>
	<citations>
	<citation>2455	4	2968</citation>
	<citation>2493	4	2968</citation>
	<citation>2889	4	2968</citation>
	<citation>2889	4	2968</citation>
	<citation>2968	4	2968</citation>
	<citation>2968	4	2968</citation>
	<citation>3042	4	2968</citation>
	<citation>2388	5	2968</citation>
	<citation>2455	5	2968</citation>
	<citation>2968	5	2968</citation>
	<citation>2968	5	2968</citation>
	<citation>2968	5	2968</citation>
	<citation>3042	5	2968</citation>
	<citation>2455	6	2968</citation>
	<citation>2839	6	2968</citation>
	<citation>2889	6	2968</citation>
	<citation>2968	6	2968</citation>
	</citations>
	</document>
	<document id= '2967'>
	<title>A Comparison of Hardware and Software Associative Memories in the Context of Computer Graphics</title>
	<abstract>The Associative Processing of Line Drawings (APLD) System utilizes a hardware associative memory  and creates, modifies, deletes, stores, and retrieves two-dimensional line drawings consisting of poin ts, lines, rectangles, and triangles. The APLD functions were duplicated on the TX-2 computer at M.I.T.'s  Lincoln Laboratory under the LEAP Language and Data Structure,  A comparison of the hardware approach  with the software simulation illustrates the advantages of the hardware associative memory in three areas:  (1) processing speed, (2) storage requirements, and (3) flexibility.  The major problem areas of hardware  associative memory technology, namely input/output and cost effectiveness, are also addressed.</abstract>
	<conference>CACM May, 1977</conference>
	<authors>
	<author>Stillman, N. J.</author>
	<author>Berra, P. B.</author>
	</authors>
	<keywords>associative memory, associative processor, content-addressable memory, graphics, information retrieval,  data structures, software evaluation, hardware evaluation, parallel processing, database management</keywords>
	<version>3.71 3.72 3.73 3.74 4.34 4.6 6.22 8.2</version>
	<location>CA770505 JB December 29, 1977  2:07 AM</location>
	<citations>
	<citation>2719	4	2967</citation>
	<citation>2967	4	2967</citation>
	<citation>2151	5	2967</citation>
	<citation>2967	5	2967</citation>
	<citation>2967	5	2967</citation>
	<citation>2967	5	2967</citation>
	</citations>
	</document>
	<document id= '2966'>
	<title>The Choice of Reference Poin ts in Best-Match File Searching</title>
	<abstract>Improvements to the exhaustive search method of best-match file searching have previously been  achieved by doing a preprocessing step involving the calculation of distances from a reference poin t.    This paper discusses the proper choice of reference poin ts and extends the previous algorithm to use  more than one reference poin t.  It is shown that reference poin ts should be located outside of data clusters.   The results of computer simulations are presented which show that large improvements can be achieved  by the proper choice and location of multiple reference poin ts.</abstract>
	<conference>CACM May, 1977</conference>
	<authors>
	<author>Shapiro, M.</author>
	</authors>
	<keywords>matching, file searching, best match, nearest-neighbor classification</keywords>
	<version>3.73 3.74</version>
	<location>CA770506 JB December 29, 1977  1:57 AM</location>
	<citations>
	<citation>2575	4	2966</citation>
	<citation>2966	4	2966</citation>
	<citation>3134	4	2966</citation>
	<citation>2524	5	2966</citation>
	<citation>2966	5	2966</citation>
	<citation>2966	5	2966</citation>
	<citation>2966	5	2966</citation>
	</citations>
	</document>
	<document id= '2965'>
	<title>An Optimal Evaluation of Boolean Expressions in an Online Query System</title>
	<conference>CACM May, 1977</conference>
	<authors>
	<author>Hanani, M. Z.</author>
	</authors>
	<keywords>query, Boolean expression, information retrieval, file organization</keywords>
	<version>3.5 3.70 3.74</version>
	<location>CA770507 JB December 29, 1977  1:51 AM</location>
	<citations>
	<citation>2155	4	2965</citation>
	<citation>2406	4	2965</citation>
	<citation>2710	4	2965</citation>
	<citation>2715	4	2965</citation>
	<citation>2716	4	2965</citation>
	<citation>2717	4	2965</citation>
	<citation>2718	4	2965</citation>
	<citation>2765	4	2965</citation>
	<citation>2765	4	2965</citation>
	<citation>2817	4	2965</citation>
	<citation>2888	4	2965</citation>
	<citation>2901	4	2965</citation>
	<citation>2957	4	2965</citation>
	<citation>2959	4	2965</citation>
	<citation>2965	4	2965</citation>
	<citation>2965	4	2965</citation>
	<citation>3087	4	2965</citation>
	<citation>3154	4	2965</citation>
	<citation>2046	5	2965</citation>
	<citation>2451	5	2965</citation>
	<citation>2965	5	2965</citation>
	<citation>2965	5	2965</citation>
	<citation>2965	5	2965</citation>
	<citation>3168	5	2965</citation>
	<citation>3169	5	2965</citation>
	<citation>2965	6	2965</citation>
	<citation>2965	6	2965</citation>
	<citation>3002	6	2965</citation>
	</citations>
	</document>
	<document id= '2964'>
	<title>An Approach to Optimal Design of Storage Parameters in Databases</title>
	<conference>CACM May, 1977</conference>
	<authors>
	<author>Milman, Y.</author>
	</authors>
	<keywords>database organization, storage parameter optimization, resident, overflow storage</keywords>
	<version>3.73 3.74</version>
	<location>CA770508 JB December 29, 1977  1:48 AM</location>
	<citations>
	<citation>2964	5	2964</citation>
	<citation>2964	5	2964</citation>
	<citation>2964	5	2964</citation>
	</citations>
	</document>
	<document id= '2963'>
	<title>A Fast Algorithm for Computing Longest Common Subsequences</title>
	<abstract>Previously published algorithms for finding the longest common subsequence of two sequences  of length n have had a best-case running time of O(n^2).  An algorithm for this problem is presented  which has a running time of O((r + n)log n), where r is the total number of ordered pairs of positions  at which the two sequences match.  Thus in the worst case the algorithm has a running time of O(n^2 log  n).  However, for those applications where most positions of one sequence match relatively few positions  in the other sequence, a running time of O(n log n) can be expected.</abstract>
	<conference>CACM May, 1977</conference>
	<authors>
	<author>Hunt, J. W.</author>
	<author>Szymanski, T. G.</author>
	</authors>
	<keywords>Longest common subsequence, efficient algorithms</keywords>
	<version>3.73 3.63 5.25</version>
	<location>CA770509 JB December 29, 1977  1:46 AM</location>
	<citations>
	<citation>2963	4	2963</citation>
	<citation>3114	4	2963</citation>
	<citation>2745	5	2963</citation>
	<citation>2963	5	2963</citation>
	<citation>2963	5	2963</citation>
	<citation>2963	5	2963</citation>
	</citations>
	</document>
	<document id= '2962'>
	<title>Production and Employment of Ph.D.'s in Computer Science-1976</title>
	<abstract>Statistics are presented on the production and employment of Ph.D.'s in computer science for  the calendar year 1975-76.  Data include profiles of graduate students and of faculty at 60 Ph.D.-producing  departments as well as a breakdown of degrees granted by specialty areas.  Significant trends are noted  and comparisons with comparable data gathered for the 1974-75 calendar year are made.</abstract>
	<conference>CACM June, 1977</conference>
	<authors>
	<author>Taulbee, O. E.</author>
	<author>Conte, S. D.</author>
	</authors>
	<keywords>computer science, production of Ph.D.'s, employment, students</keywords>
	<version>1.3 1.52 1.53 1.59</version>
	<location>CA770601 JB December 29, 1977  1:39 AM</location>
	<citations>
	<citation>2962	4	2962</citation>
	<citation>3122	4	2962</citation>
	<citation>3123	4	2962</citation>
	<citation>2861	5	2962</citation>
	<citation>2962	5	2962</citation>
	<citation>2962	5	2962</citation>
	<citation>2962	5	2962</citation>
	<citation>3123	5	2962</citation>
	<citation>3122	5	2962</citation>
	<citation>2823	6	2962</citation>
	<citation>2861	6	2962</citation>
	<citation>2861	6	2962</citation>
	<citation>2962	6	2962</citation>
	<citation>2962	6	2962</citation>
	<citation>3022	6	2962</citation>
	</citations>
	</document>
	<document id= '2961'>
	<title>Experimental Investigations of the Utility of Detailed Flowcharts in Programming</title>
	<abstract>This paper describes previous research on flowcharts and a series of controlled experiments  to test the utility of detailed flowcharts as an aid to program composition, comprehension, debugging,  and modification.  No statistically significant difference between flowchart and nonflowchart groups  has been shown, thereby calling into question the utility of detailed flowcharting.  A program of further  research is suggested.</abstract>
	<conference>CACM June, 1977</conference>
	<authors>
	<author>Shneiderman, B.</author>
	<author>Mayer, R.</author>
	<author>McKay, D.</author>
	<author>Heller, P.</author>
	</authors>
	<keywords>flowcharts, program composition, program comprehension, debugging, modification, experimental testing,  human factors</keywords>
	<version>1.5 4.0</version>
	<location>CA770602 JB December 29, 1977  1:33 AM</location>
	<citations>
	<citation>2961	4	2961</citation>
	<citation>2961	5	2961</citation>
	<citation>2961	5	2961</citation>
	<citation>2961	5	2961</citation>
	<citation>721	5	2961</citation>
	</citations>
	</document>
	<document id= '2960'>
	<citations>
	<citation>2960	5	2960</citation>
	<citation>2960	5	2960</citation>
	<citation>2960	5	2960</citation>
	<citation>3049	5	2960</citation>
	<citation>2956	6	2960</citation>
	<citation>2958	6	2960</citation>
	<citation>2957	6	2960</citation>
	<citation>2960	6	2960</citation>
	</citations>
	<title>Two Views of Data Abstraction</title>
	<conference>CACM June, 1977</conference>
	<authors>
	<author>Ledgard, H. F.</author>
	<author>Taylor, R. W.</author>
	</authors>
	<location>CA770603 JB December 29, 1977  1:28 AM</location>
	</document>
	<document id= '2959'>
	<title>The System for Business Automation (SBA): Programming Language</title>
	<abstract>The system for business automation (SBA) is a system within which application experts-nonprogrammers-can  describe and execute their applications on a computer.  The user of SBA views his application as manipulation  of information in two-dimensional pictures of tables, business forms, and reports on a display terminal.   He can gradually automate this application by giving "examples" to the system of how he manually manipulates  the information.  The Query-by-Example database language is a subset of the SBA programming language.</abstract>
	<conference>CACM June, 1977</conference>
	<authors>
	<author>Zloof, M. M.</author>
	<author>Jong, S. P.</author>
	</authors>
	<keywords>programming language, graphics, user in terface, data flow, forms flow, data abstraction, database,  query, data processing, business system specification, application programming</keywords>
	<version>3.73 3.74 4.22 4.33 4.34</version>
	<location>CA770604 JB December 29, 1977  1:25 AM</location>
	<citations>
	<citation>2155	4	2959</citation>
	<citation>2406	4	2959</citation>
	<citation>2710	4	2959</citation>
	<citation>2715	4	2959</citation>
	<citation>2716	4	2959</citation>
	<citation>2717	4	2959</citation>
	<citation>2718	4	2959</citation>
	<citation>2765	4	2959</citation>
	<citation>2817	4	2959</citation>
	<citation>2888	4	2959</citation>
	<citation>2901	4	2959</citation>
	<citation>2957	4	2959</citation>
	<citation>2959	4	2959</citation>
	<citation>2965	4	2959</citation>
	<citation>3087	4	2959</citation>
	<citation>3154	4	2959</citation>
	<citation>2046	5	2959</citation>
	<citation>2959	5	2959</citation>
	<citation>2959	5	2959</citation>
	<citation>2959	5	2959</citation>
	</citations>
	</document>
	<document id= '2958'>
	<title>Abstract Data Types and the Development of Data Structures</title>
	<abstract>Abstract data types can play a significant role in the development of software that is reliable,  efficient, and flexible.  This paper presents and discusses the application of an algebraic technique  for the specification of abstract data types.  Among the examples presented is a top-down development  of a symbol table for a block structured language; a discussion of the proof of its correctness is given.   The paper also contains a brief discussion of the problems involved in constructing algebraic specifications  that are both consistent and complete.</abstract>
	<conference>CACM June, 1977</conference>
	<authors>
	<author>Guttag, J.</author>
	</authors>
	<keywords>abstract data type, correctness proof, data type, data structure, specification, software specification</keywords>
	<version>4.34 5.24</version>
	<location>CA770605 JB December 29, 1977  1:17 AM</location>
	<citations>
	<citation>2704	4	2958</citation>
	<citation>2738	4	2958</citation>
	<citation>2866	4	2958</citation>
	<citation>2869	4	2958</citation>
	<citation>2941	4	2958</citation>
	<citation>2958	4	2958</citation>
	<citation>3004	4	2958</citation>
	<citation>3030	4	2958</citation>
	<citation>2356	5	2958</citation>
	<citation>2958	5	2958</citation>
	<citation>2958	5	2958</citation>
	<citation>2958	5	2958</citation>
	<citation>3030	5	2958</citation>
	<citation>3031	5	2958</citation>
	<citation>3049	5	2958</citation>
	<citation>2247	6	2958</citation>
	<citation>2356	6	2958</citation>
	<citation>2457	6	2958</citation>
	<citation>2651	6	2958</citation>
	<citation>2939	6	2958</citation>
	<citation>2956	6	2958</citation>
	<citation>2958	6	2958</citation>
	<citation>2958	6	2958</citation>
	<citation>2958	6	2958</citation>
	<citation>2957	6	2958</citation>
	<citation>2960	6	2958</citation>
	<citation>2972	6	2958</citation>
	</citations>
	</document>
	<document id= '2957'>
	<title>Database Abstractions: Aggregation</title>
	<abstract>Aggregation is in troduced as an abstraction which is important in conceptualizing the real  world.  Aggregation transforms a relationship between objects into a higher-level object.  A new data  type, called aggregation, is developed which, under certain criteria of "well-definedness," specifies  aggregation abstractions.  Relational databases defined as collections of aggregates are structured as  a hierarchy on n-ary relations.  To main tain well-definedness, update operations on such databases must  preserve two invariants.  Well-defined relations are distinct from relations in third normal form.  It  is shown that these notions are complementary and both are important in database design.  A top-down  methodology for database design is described which separates decisions concerning aggregate structure  from decisions concerning key identification.  It is suggested that aggregate types, and other types  which support real-world abstractions without in troducing implementation detail, should be incorporated  into programming languages.</abstract>
	<conference>CACM June, 1977</conference>
	<authors>
	<author>Smith, J. M.</author>
	<author>Smith, D. C. P.</author>
	</authors>
	<keywords>data abstraction, relational database, data type, aggregation, database design, data structure,  knowledge representation, data definition language</keywords>
	<version>3.65 3.69 3.79 4.29 4.33 4.34</version>
	<location>CA770606 JB December 29, 1977  12:33 AM</location>
	<citations>
	<citation>2155	4	2957</citation>
	<citation>2406	4	2957</citation>
	<citation>2710	4	2957</citation>
	<citation>2715	4	2957</citation>
	<citation>2716	4	2957</citation>
	<citation>2717	4	2957</citation>
	<citation>2718	4	2957</citation>
	<citation>2765	4	2957</citation>
	<citation>2817	4	2957</citation>
	<citation>2888	4	2957</citation>
	<citation>2901	4	2957</citation>
	<citation>2957	4	2957</citation>
	<citation>2959	4	2957</citation>
	<citation>2965	4	2957</citation>
	<citation>3087	4	2957</citation>
	<citation>3154	4	2957</citation>
	<citation>2046	5	2957</citation>
	<citation>2957	5	2957</citation>
	<citation>2957	5	2957</citation>
	<citation>2957	5	2957</citation>
	<citation>3049	5	2957</citation>
	<citation>2956	6	2957</citation>
	<citation>2958	6	2957</citation>
	<citation>2957	6	2957</citation>
	<citation>2960	6	2957</citation>
	</citations>
	</document>
	<document id= '2956'>
	<title>Some Ideas on Data Types in High-Level Languages</title>
	<abstract>A number of issues are explored concerning the notion that a data type is a set of values together  with a set of primitive operations on those values.  Among these are the need for a notation for iterating  over the elements of any finite set (instead of the more narrow for i:= 1 to n notation), the use of  the domain of an array as a data type, the need for a simple notation for allowing types of parameters  to be themselves parameters (but in a restrictive fashion), and resulting problems with conversion of  values from one type to another.</abstract>
	<conference>CACM June, 1977</conference>
	<authors>
	<author>Gries, D.</author>
	<author>Gehani, N.</author>
	</authors>
	<keywords>data types, generic procedures, programming languages</keywords>
	<version>4.12 4.20 4.22</version>
	<location>CA770607 JB December 28, 1977  1:27 PM</location>
	<citations>
	<citation>2167	4	2956</citation>
	<citation>2723	4	2956</citation>
	<citation>2941	4	2956</citation>
	<citation>2956	4	2956</citation>
	<citation>2956	4	2956</citation>
	<citation>3030	4	2956</citation>
	<citation>1379	5	2956</citation>
	<citation>2651	5	2956</citation>
	<citation>2956	5	2956</citation>
	<citation>2956	5	2956</citation>
	<citation>2956	5	2956</citation>
	<citation>3049	5	2956</citation>
	<citation>2956	6	2956</citation>
	<citation>2958	6	2956</citation>
	<citation>2957	6	2956</citation>
	<citation>2960	6	2956</citation>
	</citations>
	</document>
	<document id= '2955'>
	<title>Buddy Systems</title>
	<abstract>Two algorithms are presented for implementing any of a class of buddy systems for dynamic storage  allocation.  Each buddy system corresponds to a set of recurrence relations which relate the block sizes  provided to each other. Analyses of the in ternal fragmentation of the binary buddy system, the Fibonacci  buddy system, and the weighted buddy system are given. Comparative simulation results are also presented  for in ternal, external, and total fragmentation.</abstract>
	<conference>CACM June, 1977</conference>
	<authors>
	<author>Peterson, J. L.</author>
	<author>Norman, T. A.</author>
	</authors>
	<keywords>dynamic storage allocation, buddy system, fragmentation, Fibonacci buddy system, weighted buddy  system</keywords>
	<version>3.89 4.32 4.39</version>
	<location>CA770608 JB December 28, 1977  1:20 PM</location>
	<citations>
	<citation>1389	4	2955</citation>
	<citation>1552	4	2955</citation>
	<citation>2162	4	2955</citation>
	<citation>2435	4	2955</citation>
	<citation>2596	4	2955</citation>
	<citation>2596	4	2955</citation>
	<citation>2747	4	2955</citation>
	<citation>2768	4	2955</citation>
	<citation>2768	4	2955</citation>
	<citation>2773	4	2955</citation>
	<citation>2845	4	2955</citation>
	<citation>2845	4	2955</citation>
	<citation>2845	4	2955</citation>
	<citation>2902	4	2955</citation>
	<citation>2902	4	2955</citation>
	<citation>2902	4	2955</citation>
	<citation>2902	4	2955</citation>
	<citation>2911	4	2955</citation>
	<citation>2911	4	2955</citation>
	<citation>2955	4	2955</citation>
	<citation>2955	4	2955</citation>
	<citation>2955	4	2955</citation>
	<citation>2955	4	2955</citation>
	<citation>2955	4	2955</citation>
	<citation>1184	5	2955</citation>
	<citation>2435	5	2955</citation>
	<citation>2596	5	2955</citation>
	<citation>2747	5	2955</citation>
	<citation>2773	5	2955</citation>
	<citation>2955	5	2955</citation>
	<citation>2955	5	2955</citation>
	<citation>2955	5	2955</citation>
	</citations>
	</document>
	<document id= '2954'>
	<title>A Bounded Storage Algorithm for Copying Cyclic Structures</title>
	<abstract>A new algorithm is presented which copies cyclic list structures using bounded workspace and  linear time. Unlike a previous similar algorithm, this one makes no assumptions about the storage allocation  system in use and uses only operations likely to be available in a high-level language.  The distinctive  feature of this algorithm is a technique for traversing the structure twice, using the same spanning  tree in each case, first from left to right and then from right to left.</abstract>
	<conference>CACM June, 1977</conference>
	<authors>
	</authors>
	<keywords>copying, shared subtrees, cyclic structures</keywords>
	<version>4.49 5.25</version>
	<location>CA770609 JB December 28, 1977  12:56 PM</location>
	<citations>
	<citation>2766	4	2954</citation>
	<citation>2855	4	2954</citation>
	<citation>2954	4	2954</citation>
	<citation>2954	4	2954</citation>
	<citation>3106	4	2954</citation>
	<citation>3106	4	2954</citation>
	<citation>2665	5	2954</citation>
	<citation>2766	5	2954</citation>
	<citation>2954	5	2954</citation>
	<citation>2954	5	2954</citation>
	<citation>2954	5	2954</citation>
	<citation>3106	5	2954</citation>
	<citation>1549	6	2954</citation>
	<citation>210	6	2954</citation>
	<citation>1972	6	2954</citation>
	<citation>2665	6	2954</citation>
	<citation>2766	6	2954</citation>
	<citation>2855	6	2954</citation>
	<citation>2954	6	2954</citation>
	<citation>2998	6	2954</citation>
	</citations>
	</document>
	<document id= '2953'>
	<title>Notes on Recursion Elimination</title>
	<abstract>Various methods of recursion elimination are applied to the schematic recursive procedure:  proc S(x); px then N(x); S(fx); S(gx); M(x) fi.  Procedures with this general form arise in connection  with tree traversal and sorting algorithms.  Each method of recursion removal involves the use of one  or more stacks, and the solutions are compared on the basis of their running time.</abstract>
	<conference>CACM June, 1977</conference>
	<authors>
	<author>Bird, R. S.</author>
	</authors>
	<keywords>recursion elimination, optimization of programs, stacks, trees, sorting algorithms, computational  induction</keywords>
	<version>4.0 4.2 5.20 5.24 5.25 5.31</version>
	<location>CA770610 JB December 28, 1977  12:50 PM</location>
	<citations>
	<citation>2953	5	2953</citation>
	<citation>2953	5	2953</citation>
	<citation>2953	5	2953</citation>
	<citation>3020	5	2953</citation>
	<citation>2953	6	2953</citation>
	</citations>
	</document>
	<document id= '2952'>
	<title>Functions Realizable with Word-Parallel Logical and Two's-Complement Addition Instructions</title>
	<conference>CACM June, 1977</conference>
	<authors>
	<author>Warren, H. S. Jr.</author>
	</authors>
	<keywords>Boolean functions, two's-complement, sign propagation</keywords>
	<version>4.0 6.32</version>
	<location>CA770611 JB December 28, 1977  12:45 PM</location>
	<citations>
	<citation>362	4	2952</citation>
	<citation>2296	4	2952</citation>
	<citation>2952	4	2952</citation>
	<citation>2952	4	2952</citation>
	<citation>2952	4	2952</citation>
	<citation>2952	4	2952</citation>
	<citation>2952	4	2952</citation>
	<citation>2952	4	2952</citation>
	<citation>142	4	2952</citation>
	<citation>142	4	2952</citation>
	<citation>142	4	2952</citation>
	<citation>142	5	2952</citation>
	<citation>162	5	2952</citation>
	<citation>163	5	2952</citation>
	<citation>192	5	2952</citation>
	<citation>2185	5	2952</citation>
	<citation>2727	5	2952</citation>
	<citation>2952	5	2952</citation>
	<citation>2952	5	2952</citation>
	<citation>2952	5	2952</citation>
	</citations>
	</document>
	<document id= '2951'>
	<title>Dynamic Response Time Prediction for Computer Networks</title>
	<abstract>If the ultimate aim of a computing network is resource sharing, then the human component as  well as the technical component of networking must be fully investigated to achieve this goal.  This  research is a first step toward assisting the user in participating in the vast store of resources available  on a network. Analytical, simulation, and statistical performance evaluation tools are employed to investigate  the feasibility of a dynamic response time monitor that is capable of providing comparative response  time information for users wishing to process various computing applications at some network computing  node.  The research clearly reveals that sufficient system data are currently obtainable, at least for  the five diverse ARPA network systems studied in detail, to describe and predict the response time for  network time-sharing systems as it depends on some measure of system activity or load level.</abstract>
	<conference>CACM July, 1977</conference>
	<authors>
	<author>Mamrak, S. A.</author>
	</authors>
	<keywords>response time monitor, computer networks, time-sharing systems, comparative response time, ARPA  network, anlytic modeling, simulation, benchmark jobs, system measurement</keywords>
	<version>4.6 6.20 8.1</version>
	<location>CA770701 JB December 28, 1977  12:42 PM</location>
	<citations>
	<citation>2629	4	2951</citation>
	<citation>2868	4	2951</citation>
	<citation>2928	4	2951</citation>
	<citation>2951	4	2951</citation>
	<citation>2380	5	2951</citation>
	<citation>2951	5	2951</citation>
	<citation>2951	5	2951</citation>
	<citation>2951	5	2951</citation>
	</citations>
	</document>
	<document id= '2950'>
	<title>A Unifying Approach to Scheduling</title>
	<abstract>This paper presents a scheme for classifying scheduling algorithms based on an abstract model  of a scheduling system which formalizes the notion of priority.  Various classes of scheduling algorithms are defined and related to existing algorithms.  A criterion for the implementation efficiency of an  algorithm is developed and results in the definition of time-invariant algorithms, which include most  of the commonly implemented ones.  For time-invariant algorithms, the dependence of processing rates  on priorities is derived.  The abstract model provides a framework for implementing flexible schedulers  in real operating systems.  The policy-driven scheduler of Bernstein and Sharp is discussed as an example  of such an implementation</abstract>
	<conference>CACM July, 1977</conference>
	<authors>
	<author>Ruschitzka, M.</author>
	<author>Fabry, R. S.</author>
	</authors>
	<keywords>scheduling algorithms, scheduling models, priority, operating systems,processor sharing, implementation  efficiency</keywords>
	<version>4.31 4.32 4.34 4.35 8.1</version>
	<location>CA770702 JB December 28, 1977  12:32 PM</location>
	<citations>
	<citation>2950	4	2950</citation>
	<citation>3072	4	2950</citation>
	<citation>2219	5	2950</citation>
	<citation>2950	5	2950</citation>
	<citation>2950	5	2950</citation>
	<citation>2950	5	2950</citation>
	</citations>
	</document>
	<document id= '2949'>
	<title>A Correctness Proof of a Topology Information Main tenance Protocol for a Distributed Computer  Network</title>
	<abstract>In order for the nodes of a distributed computer network to communicate, each node must have  information about the network's topology.  Since nodes and links sometimes crash, a scheme is needed  to update this information.  One of the major constrain ts on such a topology information scheme is that  it may not involve a central controller.  The Topology Information Protocol that was implemented on the  MERIT Computer Network is presented and explained; this protocol is quite general and could be implemented  on any computer network.  It is based on Baran's "Hot Potato Heuristic Routing Doctrine."  A correctness  proof of this Topology Information Protocol is also presented.</abstract>
	<conference>CACM July, 1977</conference>
	<authors>
	<author>Tajibnapis, W. D.</author>
	</authors>
	<keywords>distributed computer network, correctness proofs, computer networks, distributed control, network  topology, routing problem in networks, distributed operating system, store and forward packet switching,  store and forward message switching, traffic control</keywords>
	<version>3.81 4.32</version>
	<location>CA770703 JB December 28, 1977  11:59 AM</location>
	<citations>
	<citation>2949	5	2949</citation>
	<citation>2949	5	2949</citation>
	<citation>2949	5	2949</citation>
	</citations>
	</document>
	<document id= '2948'>
	<title>A Terminal-Oriented Communication System</title>
	<abstract>This paper describes a system for full-duplex communication between a time-shared computer  and its terminals.  The system consists of a communications computer directly connected to the time-shared  system, a number of small remote computers to which the terminals are attached, and connecting medium  speed telephone lines.  It can service a large number of terminals of various types.  The overall system  design is presented along with the algorithms used to solve three specific problems: local echoing, error  detection and correction on the telephone lines, and multiplexing of character output.</abstract>
	<conference>CACM July, 1977</conference>
	<authors>
	<author>Heckel, P. G.</author>
	<author>Lampson, B. W.</author>
	</authors>
	<keywords>terminal system, error correction, multiplexing, local echoing, communication system, network</keywords>
	<version>3.81 4.31</version>
	<location>CA770704 JB December 28, 1977  11:49 AM</location>
	<citations>
	<citation>2948	5	2948</citation>
	<citation>2948	5	2948</citation>
	<citation>2948	5	2948</citation>
	</citations>
	</document>
	<document id= '2947'>
	<title>SITAR: An Interactive Text Processing System for Small Computers</title>
	<abstract>SITAR, a low-cost in teractive text handling and text analysis system for nontechnical users,  is in many ways comparable to in teractive bibliographical search and retrieval systems, but has several  additional features. It is implemented on a PDP/11 time-sharing computer invoked by a CRT with microprogrammed  editing functions.  It uses a simple command language designating a function, a file, and a search template  consisting of the textual string desired and strings delimiting the context in which the hit is to be  delivered.  Extensive experience with SITAR shows that the combined powers of simple commands, string  orientation, circular file structure, a CRT with local memory, and conversational computing produce a  system much more powerful than the sum of its parts.</abstract>
	<conference>CACM July, 1977</conference>
	<authors>
	<author>Schneider, B. R. Jr.</author>
	<author>Watts, R. M.</author>
	</authors>
	<keywords>information retrieval, text editing, minicomputers, CRTs,time sharing, bibliographic search and  retrieval, literary analysis, linguistic analysis, command languages</keywords>
	<version>3.4 3.7</version>
	<location>CA770705 JB December 28, 1977  10:20 AM</location>
	<citations>
	<citation>2947	5	2947</citation>
	<citation>2947	5	2947</citation>
	<citation>2947	5	2947</citation>
	</citations>
	</document>
	<document id= '2946'>
	<title>An Alternative to Event Queues for Synchronization in Monitors</title>
	<abstract>In the monitor concept, as proposed by Brinch Hansen and Hoare, event are used for synchronization.   This paper describes another synchronizing primitive which is nearly as expressive as the conditional  wait, but can be implemented more efficiently.  An implementation of this primitive in terms of P and  V operations is given together with a correctness proof.  Two examples are presented: the readers and  writers problem and the problem of information streams sharing a finite buffer pool.</abstract>
	<conference>CACM July, 1977</conference>
	<authors>
	<author>Kessels, J. L. W.</author>
	</authors>
	<keywords>monitor, operating system, mutual exclusion, synchronization, conditional critical region, structuring  concept</keywords>
	<version>4.31</version>
	<location>CA770706 JB December 28, 1977  10:10 AM</location>
	<citations>
	<citation>2320	4	2946</citation>
	<citation>2597	4	2946</citation>
	<citation>2777	4	2946</citation>
	<citation>2851	4	2946</citation>
	<citation>2895	4	2946</citation>
	<citation>2912	4	2946</citation>
	<citation>2938	4	2946</citation>
	<citation>2946	4	2946</citation>
	<citation>2946	4	2946</citation>
	<citation>3128	4	2946</citation>
	<citation>3128	4	2946</citation>
	<citation>2150	5	2946</citation>
	<citation>2866	5	2946</citation>
	<citation>2898	5	2946</citation>
	<citation>2946	5	2946</citation>
	<citation>2946	5	2946</citation>
	<citation>2946	5	2946</citation>
	<citation>2597	6	2946</citation>
	<citation>2946	6	2946</citation>
	</citations>
	</document>
	<document id= '2945'>
	<title>Certification of Programs for Secure Information Flow</title>
	<abstract>This paper presents a certification mechanism for verifying the secure flow of information  through a program.  Because it exploits the properties of a lattice structure among security classes,  the procedure is sufficiently simple that it can easily be included in the analysis phase of most existing  compilers.  Appropriate semantics are presented and proved correct.  An important application is the  confinement problem: The mechanism can prove that a program cannot cause supposedly nonconfidential results  to depend on confidential input data.</abstract>
	<conference>CACM July, 1977</conference>
	<authors>
	<author>Denning, D. E.</author>
	<author>Denning, P. J.</author>
	</authors>
	<keywords>protection, security, information flow, program certification, lattice, confinement, security classes</keywords>
	<version>4.3 4.35 5.24</version>
	<location>CA770707 JB December 28, 1977  8:48 AM</location>
	<citations>
	<citation>1807	4	2945</citation>
	<citation>2034	4	2945</citation>
	<citation>2290	4	2945</citation>
	<citation>2579	4	2945</citation>
	<citation>2923	4	2945</citation>
	<citation>2945	4	2945</citation>
	<citation>2945	4	2945</citation>
	<citation>2945	4	2945</citation>
	<citation>3128	4	2945</citation>
	<citation>3150	4	2945</citation>
	<citation>1947	5	2945</citation>
	<citation>2704	5	2945</citation>
	<citation>2870	5	2945</citation>
	<citation>2945	5	2945</citation>
	<citation>2945	5	2945</citation>
	<citation>2945	5	2945</citation>
	</citations>
	</document>
	<document id= '2944'>
	<title>Shifting Garbage Collection Overhead to Compile Time</title>
	<abstract>This paper discusses techniques which enable automatic storage reclamation overhead to be partially  shifted to compile time.  The paper assumes a transaction oriented collection scheme, as proposed by  Deutsch and Bobrow, the necessary features of which are summarized.  Implementing the described optimizations  requires global flow analysis to be performed on the source program.  It is shown that at compile time  certain program actions that affect the reference counts of cells can be deduced.  This information is  used to find actions that cancel when the code is executed and those that can be grouped to achieve improved  efficiency.</abstract>
	<conference>CACM July, 1977</conference>
	<authors>
	<author>Barth, J. M.</author>
	</authors>
	<keywords>garbage collection, global flow analysis, list processing, optimization, reference counts, storage  management</keywords>
	<version>3.80 4.12 4.20 4.34</version>
	<location>CA770708 JB December 28, 1977  8:38 AM</location>
	<citations>
	<citation>2855	4	2944</citation>
	<citation>2855	4	2944</citation>
	<citation>2944	4	2944</citation>
	<citation>2944	4	2944</citation>
	<citation>3106	4	2944</citation>
	<citation>3112	4	2944</citation>
	<citation>2833	5	2944</citation>
	<citation>2944	5	2944</citation>
	<citation>2944	5	2944</citation>
	<citation>2944	5	2944</citation>
	<citation>2998	5	2944</citation>
	</citations>
	</document>
	<document id= '2943'>
	<title>Lucid, a Nonprocedural Language with Iteration</title>
	<abstract>Lucid is a formal system in which programs can be written and proofs of programs carried out.   The proofs are particularly easy to follow and straightforward to produce because the statements in  a Lucid program are simply axioms from which the proof proceeds by (almost) conventional logical reasoning,  with the help of a few axioms and rules of inference for the special Lucid functions.  As a programming  language, Lucid is unconventional because, among other things, the order of statements is irrelevant  and assignment statements are equations.  Nevertheless, Lucid programs need not look much different than  iterative programs in a conventional structured programming language using assignment and conditional  statements and loops.</abstract>
	<conference>CACM July, 1977</conference>
	<authors>
	<author>Ashcrof, E. A.</author>
	<author>Wadge, W. W.</author>
	</authors>
	<keywords>program proving, formal systems, semantics, iteration, structured programming</keywords>
	<version>5.21 5.24</version>
	<location>CA770709 JB December 28, 1977  8:30 AM</location>
	<citations>
	<citation>2021	4	2943</citation>
	<citation>2222	4	2943</citation>
	<citation>2227	4	2943</citation>
	<citation>2315	4	2943</citation>
	<citation>2326	4	2943</citation>
	<citation>2470	4	2943</citation>
	<citation>2732	4	2943</citation>
	<citation>2865	4	2943</citation>
	<citation>2896	4	2943</citation>
	<citation>2943	4	2943</citation>
	<citation>3014	4	2943</citation>
	<citation>3068	4	2943</citation>
	<citation>3077	4	2943</citation>
	<citation>3143	4	2943</citation>
	<citation>1834	5	2943</citation>
	<citation>2943	5	2943</citation>
	<citation>2943	5	2943</citation>
	<citation>2943	5	2943</citation>
	<citation>3150	5	2943</citation>
	<citation>2060	6	2943</citation>
	<citation>2704	6	2943</citation>
	<citation>2842	6	2943</citation>
	<citation>2939	6	2943</citation>
	<citation>2940	6	2943</citation>
	<citation>2941	6	2943</citation>
	<citation>2943	6	2943</citation>
	<citation>3073	6	2943</citation>
	<citation>3148	6	2943</citation>
	</citations>
	</document>
	<document id= '2942'>
	<title>An Algol-Based Implementation of SNOBOL 4 Patterns</title>
	<conference>CACM July, 1977</conference>
	<authors>
	<author>Brownlee, J. N.</author>
	</authors>
	<keywords>patterns SNOBOL 4, pattern matching, string processing, pattern implementation, algorithms in Pascal</keywords>
	<version>4.29</version>
	<location>CA770710 JB December 28, 1977  8:15 AM</location>
	<citations>
	<citation>2942	5	2942</citation>
	<citation>2942	5	2942</citation>
	<citation>2942	5	2942</citation>
	</citations>
	</document>
	<document id= '2941'>
	<title>Early Experience with Mesa</title>
	<abstract>The experiences of Mesa's first users-primarily its implementers-are discussed, and some implications  for Mesa and similar programming languages are suggested. The specific topics addressed are: module structure  and its use in defining abstractions, data-structuring facilities in Mesa, an equivalence algorithm for  types and type coercions, the benefits of the type system and why it is breached occasionally, and the  difficulty of making the treatment of variant records safe.</abstract>
	<conference>CACM August, 1977</conference>
	<authors>
	<author>Geschke, C. M.</author>
	<author>Morris, J. H. Jr.</author>
	<author>Satterthwaite, E. H.</author>
	</authors>
	<keywords>programming languages, types, modules, data structures, systems programming</keywords>
	<version>4.22</version>
	<location>CA770802 JB December 28, 1977  8:07 AM</location>
	<citations>
	<citation>1458	4	2941</citation>
	<citation>1523	4	2941</citation>
	<citation>1603	4	2941</citation>
	<citation>1698	4	2941</citation>
	<citation>1747	4	2941</citation>
	<citation>1748	4	2941</citation>
	<citation>1854	4	2941</citation>
	<citation>1877	4	2941</citation>
	<citation>1960	4	2941</citation>
	<citation>2377	4	2941</citation>
	<citation>2378	4	2941</citation>
	<citation>2497	4	2941</citation>
	<citation>2558	4	2941</citation>
	<citation>2625	4	2941</citation>
	<citation>2632	4	2941</citation>
	<citation>2704	4	2941</citation>
	<citation>2723	4	2941</citation>
	<citation>2738	4	2941</citation>
	<citation>2840	4	2941</citation>
	<citation>2866	4	2941</citation>
	<citation>2868	4	2941</citation>
	<citation>2869	4	2941</citation>
	<citation>2939	4	2941</citation>
	<citation>2941	4	2941</citation>
	<citation>2941	4	2941</citation>
	<citation>2941	4	2941</citation>
	<citation>2941	4	2941</citation>
	<citation>2956	4	2941</citation>
	<citation>2958	4	2941</citation>
	<citation>3004	4	2941</citation>
	<citation>3030	4	2941</citation>
	<citation>3030	4	2941</citation>
	<citation>3105	4	2941</citation>
	<citation>3144	4	2941</citation>
	<citation>1471	5	2941</citation>
	<citation>2356	5	2941</citation>
	<citation>2558	5	2941</citation>
	<citation>2651	5	2941</citation>
	<citation>2941	5	2941</citation>
	<citation>2941	5	2941</citation>
	<citation>2941	5	2941</citation>
	<citation>3150	5	2941</citation>
	<citation>2060	6	2941</citation>
	<citation>2704	6	2941</citation>
	<citation>2842	6	2941</citation>
	<citation>2939	6	2941</citation>
	<citation>2940	6	2941</citation>
	<citation>2941	6	2941</citation>
	<citation>2943	6	2941</citation>
	<citation>3073	6	2941</citation>
	<citation>3148	6	2941</citation>
	</citations>
	</document>
	<document id= '2940'>
	<title>Abstraction and Verification in Alphard: Defining and Specifying Iteration and Generators</title>
	<abstract>The Alphard "form" provides the programmer with a great deal of control over the implementation  of abstract data types.  In this paper the abstraction techniques are extended from simple data representation  and function definition to the iteration statement, the most important poin t of interaction between data  and the control structure of the language itself.  A means of specializing Alphard's loops to operate  on abstract entities without explicit dependence on the representation of those entities is in troduced.   Specification and verification techniques that allow the properties of the generators for such iterations  to be expressed in the form of proof rules are developed.  Results are obtained that for common special  cases of these loops are essentially identical to the corresponding constructs in other languages.  A  means of showing that a generator will terminate is also provided.</abstract>
	<conference>CACM August, 1977</conference>
	<authors>
	<author>Shaw, M.</author>
	<author>Wulf, W. A.</author>
	</authors>
	<keywords>abstraction and representation, abstract data types, assertions, control specialization, correctness,  generators,invariants, iteration statements, modular decomposition, program specifications, programming  languages, programming methodology, proofs of correctness, types, verification</keywords>
	<version>4.20 5.24</version>
	<location>CA770803 JB December 28, 1977  7:59 AM</location>
	<citations>
	<citation>2940	5	2940</citation>
	<citation>2940	5	2940</citation>
	<citation>2940	5	2940</citation>
	<citation>3150	5	2940</citation>
	<citation>2060	6	2940</citation>
	<citation>2704	6	2940</citation>
	<citation>2842	6	2940</citation>
	<citation>2939	6	2940</citation>
	<citation>2940	6	2940</citation>
	<citation>2941	6	2940</citation>
	<citation>2943	6	2940</citation>
	<citation>3073	6	2940</citation>
	<citation>3148	6	2940</citation>
	</citations>
	</document>
	<document id= '2939'>
	<title>Abstraction Mechanisms in CLU</title>
	<abstract>CLU is a new programming language designed to support the use of abstractions in program construction.   Work in programming methodology has led to the realization that three kinds of abstractions-procedural,  control, and especially data abstractions-are useful in the programming process.  Of these, only the  procedural abstraction is supported well by conventional languages, through the procedure or subroutine.   CLU provides, in addition to procedures, novel linguistic mechanisms that support the use of data and  control abstractions.  This paper provides an in troduction to the abstraction mechanisms in CLU.  By  means of programming examples, the utility of the three kinds of abstractions in program construction  is illustrated, and it is shown how CLU programs may be written to use and implement abstractions.  The  CLU library, which permits incremental program development with complete type checking performed at compile  time, is also discussed.</abstract>
	<conference>CACM August, 1977</conference>
	<authors>
	<author>Liskov, B.</author>
	<author>Snyder, A.</author>
	<author>Atkinson, R.</author>
	<author>Schaffert, C.</author>
	</authors>
	<keywords>programming languages, data types, data abstractions, control abstractions, programming methodology,  separate compilation</keywords>
	<version>4.0 4.12 4.20 4.22</version>
	<location>CA770804 JB December 28, 1977  7:49 AM</location>
	<citations>
	<citation>2319	4	2939</citation>
	<citation>2480	4	2939</citation>
	<citation>2594	4	2939</citation>
	<citation>2709	4	2939</citation>
	<citation>2868	4	2939</citation>
	<citation>2939	4	2939</citation>
	<citation>2939	4	2939</citation>
	<citation>2941	4	2939</citation>
	<citation>2972	4	2939</citation>
	<citation>3155	4	2939</citation>
	<citation>2204	5	2939</citation>
	<citation>2558	5	2939</citation>
	<citation>2939	5	2939</citation>
	<citation>2939	5	2939</citation>
	<citation>2939	5	2939</citation>
	<citation>3031	5	2939</citation>
	<citation>3105	5	2939</citation>
	<citation>3148	5	2939</citation>
	<citation>3150	5	2939</citation>
	<citation>1471	6	2939</citation>
	<citation>1860	6	2939</citation>
	<citation>2060	6	2939</citation>
	<citation>2625	6	2939</citation>
	<citation>2632	6	2939</citation>
	<citation>2704	6	2939</citation>
	<citation>2817	6	2939</citation>
	<citation>2842	6	2939</citation>
	<citation>2865	6	2939</citation>
	<citation>2868	6	2939</citation>
	<citation>2939	6	2939</citation>
	<citation>2939	6	2939</citation>
	<citation>2939	6	2939</citation>
	<citation>2939	6	2939</citation>
	<citation>2940	6	2939</citation>
	<citation>2941	6	2939</citation>
	<citation>2943	6	2939</citation>
	<citation>2958	6	2939</citation>
	<citation>3068	6	2939</citation>
	<citation>3073	6	2939</citation>
	<citation>3073	6	2939</citation>
	<citation>3148	6	2939</citation>
	</citations>
	</document>
	<document id= '2938'>
	<title>Toward a Discipline of Real-Time Programming</title>
	<abstract>Programming is divided into three major categories with increasing complexity of reasoning  in program validation: sequential programming, multiprogramming, and real-time programming.  By adhering  to a strict programming discipline and by using a suitable high-level language molded after this discipline,  the complexity of reasoning about concurrency and execution time constrain ts may be drastically reduced.   This may be the only practical way to make real-time systems analytically verifiable and ultimately  reliable.  A possible discipline is outlined and expressed in terms of the language Modula.</abstract>
	<conference>CACM August, 1977</conference>
	<authors>
	<author>Wirth, N.</author>
	</authors>
	<keywords>multiprogramming, real-time programming, process synchronization, processor sharing, program validation,  Modula</keywords>
	<version>3.80 4.22</version>
	<location>CA770805 JB December 28, 19777:39 AM</location>
	<citations>
	<citation>2938	4	2938</citation>
	<citation>2946	4	2938</citation>
	<citation>3128	4	2938</citation>
	<citation>2866	5	2938</citation>
	<citation>2938	5	2938</citation>
	<citation>2938	5	2938</citation>
	<citation>2938	5	2938</citation>
	</citations>
	</document>
	<document id= '2937'>
	<title>An Experimental Evaluation of Data Type Conventions</title>
	<abstract>The language in which programs are written can have a substantial effect on the reliability  of the resulting programs.  This paper discusses an experiment that compares the programming reliability  of subjects using a statically typed language and a "typeless" language.  Analysis of the number of errors  and the number of runs containing errors shows that, at least in one environment, the use of a statically  typed language can increase programming reliability.  Detailed analysis of the errors made by the subjects  in programming solutions to reasonably small problems shows that the subjects had difficulty manipulating  the representation of data.</abstract>
	<conference>CACM August, 1977</conference>
	<authors>
	<author>Gannon, J. D.</author>
	</authors>
	<keywords>data types, experimentation, language design, redundancy, reliable software</keywords>
	<version>4.22</version>
	<location>CA770806JB December 28, 1977  7:32 AM</location>
	<citations>
	<citation>2411	4	2937</citation>
	<citation>2709	4	2937</citation>
	<citation>2889	4	2937</citation>
	<citation>2937	4	2937</citation>
	<citation>2989	4	2937</citation>
	<citation>3005	4	2937</citation>
	<citation>3025	4	2937</citation>
	<citation>3101	4	2937</citation>
	<citation>2138	5	2937</citation>
	<citation>2937	5	2937</citation>
	<citation>2937	5	2937</citation>
	<citation>2937	5	2937</citation>
	</citations>
	</document>
	<document id= '2936'>
	<title>An Efficient Data Structure for the Simulation Event Set</title>
	<abstract>Recently algorithms have been presented for the realization of event scheduling routines suitable  for general purpose discrete event simulation systems.  Several exhibited a performance superior to that  of commonly used simple linked list algorithms.  In this paper a new event scheduling algorithm is presented  which improves on two aspects of the best of the previously published algorithms.  First, the new algorithm's  performance is quite insensitive to skewed distributions, and second, its worst-case complexity is O(  n), where n is the number of events in the set.  Furthermore, tests conducted to estimate the average  complexity showed it to be nearly independent of n.</abstract>
	<conference>CACM August, 1977</conference>
	<authors>
	<author>Franta, W. R.</author>
	<author>Maly, K.</author>
	</authors>
	<keywords>simulation, time flow mechanisms, event scanning mechanisms, multilinked lists</keywords>
	<version>3.34 4.22 5.5 8.1</version>
	<location>CA770807 JB December 28, 1977  7:15 AM</location>
	<citations>
	<citation>2844	4	2936</citation>
	<citation>2844	4	2936</citation>
	<citation>2936	4	2936</citation>
	<citation>2936	4	2936</citation>
	<citation>3051	4	2936</citation>
	<citation>3064	4	2936</citation>
	<citation>3064	4	2936</citation>
	<citation>3109	4	2936</citation>
	<citation>2742	5	2936</citation>
	<citation>2767	5	2936</citation>
	<citation>2936	5	2936</citation>
	<citation>2936	5	2936</citation>
	<citation>2936	5	2936</citation>
	<citation>3064	5	2936</citation>
	<citation>1846	6	2936</citation>
	<citation>1939	6	2936</citation>
	<citation>2742	6	2936</citation>
	<citation>2767	6	2936</citation>
	<citation>2936	6	2936</citation>
	</citations>
	</document>
	<document id= '2935'>
	<citations>
	<citation>2935	5	2935</citation>
	<citation>2935	5	2935</citation>
	<citation>2935	5	2935</citation>
	</citations>
	<title>Production and Employment of Ph.D.'s in Computer Science-1976 (Corrigendum)</title>
	<conference>CACM August, 1977</conference>
	<authors>
	<author>Taulbee, O. E.</author>
	<author>Conte, S. D.</author>
	</authors>
	<location>CA770808 JB December 28, 1977  7:04 AM</location>
	</document>
	<document id= '2934'>
	<title>Comment on Computing the k Shortest Paths in a Graph</title>
	<conference>CACM August, 1977</conference>
	<authors>
	<author>Lawler, E. L.</author>
	</authors>
	<keywords>graph, network, shortest path, algorithm, ranking</keywords>
	<version>5.32</version>
	<location>CA770809 JB December 28, 1977  7:00 AM</location>
	<citations>
	<citation>1086	4	2934</citation>
	<citation>1132	4	2934</citation>
	<citation>1234	4	2934</citation>
	<citation>1263	4	2934</citation>
	<citation>1265	4	2934</citation>
	<citation>1270	4	2934</citation>
	<citation>1323	4	2934</citation>
	<citation>1358	4	2934</citation>
	<citation>1379	4	2934</citation>
	<citation>1380	4	2934</citation>
	<citation>1453	4	2934</citation>
	<citation>1464	4	2934</citation>
	<citation>1484	4	2934</citation>
	<citation>1491	4	2934</citation>
	<citation>1498	4	2934</citation>
	<citation>1613	4	2934</citation>
	<citation>1614	4	2934</citation>
	<citation>1781	4	2934</citation>
	<citation>1825	4	2934</citation>
	<citation>1860	4	2934</citation>
	<citation>2083	4	2934</citation>
	<citation>2178	4	2934</citation>
	<citation>2179	4	2934</citation>
	<citation>2252	4	2934</citation>
	<citation>2325	4	2934</citation>
	<citation>2341	4	2934</citation>
	<citation>2546	4	2934</citation>
	<citation>2645	4	2934</citation>
	<citation>2652	4	2934</citation>
	<citation>2684	4	2934</citation>
	<citation>2842	4	2934</citation>
	<citation>2929	4	2934</citation>
	<citation>2934	4	2934</citation>
	<citation>3069	4	2934</citation>
	<citation>669	4	2934</citation>
	<citation>679	4	2934</citation>
	<citation>691	4	2934</citation>
	<citation>761	4	2934</citation>
	<citation>949	4	2934</citation>
	<citation>989	4	2934</citation>
	<citation>2934	5	2934</citation>
	<citation>2934	5	2934</citation>
	<citation>2934	5	2934</citation>
	<citation>3184	5	2934</citation>
	</citations>
	</document>
	<document id= '2933'>
	<title>Another Advantage of Keyword Notation for Parameter Communication with Subprograms</title>
	<conference>CACM August, 1977</conference>
	<authors>
	<author>Francez, N.</author>
	</authors>
	<keywords>Keyword notation, positional notation, parameters, transmission, subprograms, readability, call  by value, call by reference, call by name, compile-time errors</keywords>
	<version>4.2 4.20 4.22</version>
	<location>CA770810 JB December 28, 1977  6:57 AM</location>
	<citations>
	<citation>2757	4	2933</citation>
	<citation>2933	4	2933</citation>
	<citation>2933	4	2933</citation>
	<citation>2630	5	2933</citation>
	<citation>2757	5	2933</citation>
	<citation>2933	5	2933</citation>
	<citation>2933	5	2933</citation>
	<citation>2933	5	2933</citation>
	</citations>
	</document>
	<document id= '2932'>
	<title>Complexity of Computations</title>
	<abstract>The framework for research in the theory of complexity of computations is described, emphasizing  the in terrelation between seemingly diverse problems and methods.  Illustrative examples of practical  and theoretical significance are given.  Directions for new research are discussed.</abstract>
	<conference>CACM September, 1977</conference>
	<authors>
	<author>Rabin, M. O.</author>
	</authors>
	<keywords>complexity of computations, algebraic complexity, in tractable problems, probabilistic algorithms</keywords>
	<version>5.25</version>
	<location>CA770901 JB December 28, 1977  6:54 AM</location>
	<citations>
	<citation>2932	5	2932</citation>
	<citation>2932	5	2932</citation>
	<citation>2932	5	2932</citation>
	</citations>
	</document>
	<document id= '2931'>
	<title>Logic and Programming Languages</title>
	<abstract>Logic has been long in terested in whether answers to certain questions are computable in principle,  since the outcome puts bounds on the possibilities of formalization.  More recently, precise comparisons  in the efficiency of decision methods have become available through the developments in complexity theory.   These, however, are applications to logic, and a big question is whether methods of logic have significance  in the other direction for the more applied parts of computability theory.  Programming languages offer  an obvious opportunity as their syntactic formalization is well advanced; however, the semantical theory  can hardly be said to be complete.  Though we have many examples, we have still to give wide-ranging  mathematical answers to these queries:  What is a machine?  What is a computable process?  How (or how  well) does a machine simulate a process?  Programs naturally enter in giving descriptions of processes.   The definition of the precise meaning of a program then requires us to explain what are the objects  of computation (in a way, the statics of the problem) and how they are to be transformed (the dynamics).   So far the theories of automata and of nets, though most in teresting for dynamics, have formalized only  a portion of the field, and there has been perhaps too much concentration on the finite-state and algebraic  aspects.  It would seem that the understanding of higher-level program features involves us with infinite  objects and forces us to pass through several levels of explanation to go from the conceptual ideas to  the final simulation on a real machine.  These levels can be made mathematically exact if we can find  the right abstractions to represent the necessary structures.  The experience of many independent workers  with the method of data types as lattices (or partial orderings) under an information content ordering,  and with their continuous mappings, has demonstrated the flexibility of this approach in providing definitions  and proofs, which are clean and without undue dependence on implementations.  Nevertheless much remains  to be done in showing how abstract conceptualizations can (or cannot) be actualized before we can say  we have a unified theory.</abstract>
	<conference>CACM September, 1977</conference>
	<authors>
	<author>Scott, D. S.</author>
	</authors>
	<keywords>logic, programming languages, automata, denotational semantics, a-calculus models, computability,  partial functions, approximation, function spaces</keywords>
	<version>1.2 4.20 5.21 5.24 5.27</version>
	<location>CA770902 JB December 28, 1977  6:49 AM</location>
	<citations>
	<citation>2931	5	2931</citation>
	<citation>2931	5	2931</citation>
	<citation>2931	5	2931</citation>
	</citations>
	</document>
	<document id= '2930'>
	<title>The GRE Advanced Test in Computer Science</title>
	<abstract>This report describes the Advanced Test in Computer Science which was recently in troduced in  the Graduate Record Examination Program.  The GRE program is described in general, and, the events leading  to the establishment of the Advanced Computer Science Test are discussed.  Content specifications and  their rationale are given.  A set of sample questions is included.</abstract>
	<conference>CACM September, 1977</conference>
	<authors>
	<author>Austing, R. H.</author>
	</authors>
	<keywords>education, computer science, graduate school admissions, test development examinations</keywords>
	<version>1.5</version>
	<location>CA770903 JB December 27, 1977  1:32 PM</location>
	<citations>
	<citation>2930	5	2930</citation>
	<citation>2930	5	2930</citation>
	<citation>2930	5	2930</citation>
	</citations>
	</document>
	<document id= '2929'>
	<title>An Analysis of Inline Substitution for a Structured Programming Language</title>
	<abstract>An optimization technique known as inline substitution is analyzed.  The optimization consists  of replacing a procedure invocation by a modified copy of the procedure body.  The general problem of  using inline substitution to minimize execution time subject to size constrain ts is formulated, and an  approximate algorithmic solution is proposed.  The algorithm depends on run-time statistics about the  program to be optimized.  Preliminary results for the CLU structured programming language indicate that,  in programs with a low degree of recursion, over 90 percent of all procedure calls can be eliminated,  with little increase in the size of compiled code and a small savings in execution time.  Other conclusions  based on these results are also presented.</abstract>
	<conference>CACM September, 1977</conference>
	<authors>
	<author>Scheifler, R. W.</author>
	</authors>
	<keywords>inline substitution, open coding, open compilation, program optimization, compilers, structured  programming languages, run-time statistics</keywords>
	<version>4.12</version>
	<location>CA770905 JB December 27, 1977  1:23 PM</location>
	<citations>
	<citation>1086	4	2929</citation>
	<citation>1132	4	2929</citation>
	<citation>1234	4	2929</citation>
	<citation>1263	4	2929</citation>
	<citation>1265	4	2929</citation>
	<citation>1270	4	2929</citation>
	<citation>1323	4	2929</citation>
	<citation>1358	4	2929</citation>
	<citation>1379	4	2929</citation>
	<citation>1380	4	2929</citation>
	<citation>1453	4	2929</citation>
	<citation>1464	4	2929</citation>
	<citation>1484	4	2929</citation>
	<citation>1491	4	2929</citation>
	<citation>1498	4	2929</citation>
	<citation>1613	4	2929</citation>
	<citation>1614	4	2929</citation>
	<citation>1781	4	2929</citation>
	<citation>1825	4	2929</citation>
	<citation>1860	4	2929</citation>
	<citation>2083	4	2929</citation>
	<citation>2178	4	2929</citation>
	<citation>2179	4	2929</citation>
	<citation>2252	4	2929</citation>
	<citation>2325	4	2929</citation>
	<citation>2341	4	2929</citation>
	<citation>2546	4	2929</citation>
	<citation>2645	4	2929</citation>
	<citation>2652	4	2929</citation>
	<citation>2684	4	2929</citation>
	<citation>2842	4	2929</citation>
	<citation>2929	4	2929</citation>
	<citation>2934	4	2929</citation>
	<citation>3069	4	2929</citation>
	<citation>669	4	2929</citation>
	<citation>679	4	2929</citation>
	<citation>691	4	2929</citation>
	<citation>761	4	2929</citation>
	<citation>949	4	2929</citation>
	<citation>989	4	2929</citation>
	<citation>2929	5	2929</citation>
	<citation>2929	5	2929</citation>
	<citation>2929	5	2929</citation>
	<citation>3184	5	2929</citation>
	</citations>
	</document>
	<document id= '2928'>
	<title>Hardware Estimation of a Process' Primary Memory Requirements</title>
	<abstract>A minor hardware extension to the Honeywell 6180 processor is demonstrated to allow the primary  memory requirements of a process in Multics to be approximated.  The additional hardware required for  this estimate to be computed consists of a program accessible register containing the miss rate of the  associative memory used for page table words.  This primary memory requirement estimate was employed  in an experimental version of Multics to control the level of multiprogramming in the system and to bill  for memory usage.  The resulting system's tuning parameters display configuration insensitivity, and it is conjectured that the system would also track shifts in the referencing characteristics of its workload  and keep the system in tune.</abstract>
	<conference>CACM September, 1977</conference>
	<authors>
	<author>Giffor, D. K.</author>
	</authors>
	<keywords>primary memory requirement, virtual memory, level of multiprogramming, associative memory, working  set, resource allocation, LRU stack model, referencing characteristics</keywords>
	<version>4.32 4.35 4.6 6.36</version>
	<location>CA770906 JB December 27, 1977  1:05 PM</location>
	<citations>
	<citation>1892	4	2928</citation>
	<citation>1901	4	2928</citation>
	<citation>2085	4	2928</citation>
	<citation>2095	4	2928</citation>
	<citation>2218	4	2928</citation>
	<citation>2277	4	2928</citation>
	<citation>2319	4	2928</citation>
	<citation>2329	4	2928</citation>
	<citation>2358	4	2928</citation>
	<citation>2373	4	2928</citation>
	<citation>2380	4	2928</citation>
	<citation>2434	4	2928</citation>
	<citation>2499	4	2928</citation>
	<citation>2501	4	2928</citation>
	<citation>2582	4	2928</citation>
	<citation>2629	4	2928</citation>
	<citation>2669	4	2928</citation>
	<citation>2828	4	2928</citation>
	<citation>2847	4	2928</citation>
	<citation>2863	4	2928</citation>
	<citation>2868	4	2928</citation>
	<citation>2881	4	2928</citation>
	<citation>2928	4	2928</citation>
	<citation>2928	4	2928</citation>
	<citation>2928	4	2928</citation>
	<citation>2928	4	2928</citation>
	<citation>2928	4	2928</citation>
	<citation>2951	4	2928</citation>
	<citation>2996	4	2928</citation>
	<citation>3006	4	2928</citation>
	<citation>3046	4	2928</citation>
	<citation>3067	4	2928</citation>
	<citation>3098	4	2928</citation>
	<citation>3107	4	2928</citation>
	<citation>3127	4	2928</citation>
	<citation>1751	5	2928</citation>
	<citation>2277	5	2928</citation>
	<citation>2380	5	2928</citation>
	<citation>2522	5	2928</citation>
	<citation>2569	5	2928</citation>
	<citation>2928	5	2928</citation>
	<citation>2928	5	2928</citation>
	<citation>2928	5	2928</citation>
	</citations>
	</document>
	<document id= '2927'>
	<title>Some New Upper Bounds on the Generation of Prime Numbers</title>
	<abstract>Given an integer N, what is the computational complexity of finding all the primes less than  N?  A modified sieve of Eratosthenes using doubly linked lists yields an algorithm of O(N) arithmetic  complexity.  This upper bound is shown to be equivalent to the theoretical lower bound for sieve methods  without preprocessing.  Use of preprocessing techniques involving space-time and additive-multiplicative  tradeoffs reduces this upper bound to O(N/log logN) and the bit complexity to O(N logN log log logN).   A storage requirement is described using O(N logN/log logN) bits as well.</abstract>
	<conference>CACM September, 1977</conference>
	<authors>
	<author>Mairson, H. G.</author>
	</authors>
	<keywords>computational complexity, sieve, prime number generation, number theory, linked list, preprocessing,  balancing</keywords>
	<version>5.25 5.39</version>
	<location>CA770907 JB December 27, 1977  12:55 PM</location>
	<citations>
	<citation>1841	4	2927</citation>
	<citation>1841	4	2927</citation>
	<citation>1967	4	2927</citation>
	<citation>2120	4	2927</citation>
	<citation>2120	4	2927</citation>
	<citation>2927	4	2927</citation>
	<citation>2927	4	2927</citation>
	<citation>2927	4	2927</citation>
	<citation>2927	4	2927</citation>
	<citation>2927	4	2927</citation>
	<citation>1537	5	2927</citation>
	<citation>1538	5	2927</citation>
	<citation>1539	5	2927</citation>
	<citation>1841	5	2927</citation>
	<citation>1840	5	2927</citation>
	<citation>2927	5	2927</citation>
	<citation>2927	5	2927</citation>
	<citation>2927	5	2927</citation>
	<citation>3037	5	2927</citation>
	<citation>2732	6	2927</citation>
	<citation>2927	6	2927</citation>
	</citations>
	</document>
	<document id= '2926'>
	<title>Pagination of B*-Trees with Variable-Length Records</title>
	<abstract>A strategy is presented for pagination of B*-trees with variable-length records.  If records  of each length are uniformly distributed within the file, and if a wide distribution of record lengths  exists within the file, then this strategy results in shallow trees with fast access times.  The performance  of this strategy in an application is presented, compared with that of another strategy, and analyzed.</abstract>
	<conference>CACM September, 1977</conference>
	<authors>
	<author>McCreight, E. M.</author>
	</authors>
	<keywords>B-tree, index, database, tree storage structure, searching</keywords>
	<version>3.73 4.33 4.34</version>
	<location>CA770908 JB December 27, 1977  12:46 PM</location>
	<citations>
	<citation>2926	5	2926</citation>
	<citation>2926	5	2926</citation>
	<citation>2926	5	2926</citation>
	</citations>
	</document>
	<document id= '2925'>
	<title>Optimal Surface Reconstruction from Planar Contours</title>
	<abstract>In many scientific and technical endeavors, a three-dimensional solid must be reconstructed  from serial sections, either to aid in the comprehension of the object's structure or to facilitate its  automatic manipulation and analysis.  This paper presents a general solution to the problem of constructing  a surface over a set of cross-sectional contours.  This surface, to be composed of triangular tiles,  is constructed by separately determining an optimal surface between each pair of consecutive contours.  Determining such a surface is reduced to the problem of finding certain minimum cost cycles in a directed  toroidal graph.  A new fast algorithm for finding such cycles is utilized.  Also developed is a closed-form  expression, in term of the number of contour poin ts, for an upper bound on the number of operations required  to execute the algorithm.  An illustrated example which involves the construction of a minimum area surface  describing a human head is included.</abstract>
	<conference>CACM October, 1977</conference>
	<authors>
	<author>Fuchs, H.</author>
	<author>Uselton, S. P.</author>
	</authors>
	<keywords>surface reconstruction, contour data, serial sections, three-dimensional computer graphics, minimum  cost paths, continuous tone displays</keywords>
	<version>5.25 5.32 8.2</version>
	<location>CA771001 JB December 27, 1977  12:40 PM</location>
	<citations>
	<citation>2925	5	2925</citation>
	<citation>2925	5	2925</citation>
	<citation>2925	5	2925</citation>
	</citations>
	</document>
	<document id= '2924'>
	<title>An Interactive Computer Graphics Approach to Surface Representation</title>
	<abstract>An in teractive computer graphics method has been developed for the rapid generation of arbitrary  shaped three-dimensional surfaces.  The method is a synthesis of spline theory and algorithms, an in teractive  means for man-machine communication, and software for static or dynamic graphics display.  The basic  technique employed is a modified lofting method on which sectional curves are represented by uniform  B-splines and the surface is in terpolated between sections by Cardinal splines.  Among the features of  this method are algorithms which enable in teractive modification of the B-spline representation of the  sectional curves.  At all stages of the process, the spatial information is graphically displayed to  the user.  Complex surfaces can be created by the combination of a number of shapes that have been separately  generated and automatically joined.  The system has been successfully in terfaced to a variety of analytical  routines for structural, medical and graphical applications.</abstract>
	<conference>CACM October, 1977</conference>
	<authors>
	<author>Abel, J. F.</author>
	<author>Greenberg, D. P.</author>
	</authors>
	<keywords>computer graphics, three-dimensional surface representation, splines, lofting,finite element input  methods</keywords>
	<version>3.20 3.23 3.34 8.1 8.2</version>
	<location>CA771002 JB December 27, 1977  11:53 AM</location>
	<citations>
	<citation>2924	5	2924</citation>
	<citation>2924	5	2924</citation>
	<citation>2924	5	2924</citation>
	</citations>
	</document>
	<document id= '2923'>
	<title>High-Level Data Flow Analysis</title>
	<abstract>In contrast to the predominant use of low-level in termediate text, high-level data flow analysis  deals with programs essentially at source level and exploits the control flow information implicit in  the parse tree.  The need for high-level flow analysis arises from several aspects of recent work on  advanced methods of program certification and optimization.  This paper proposes a simple general method  of high-level data flow analysis that allows free use of escape and jump statements, avoids large graphs  when compiling large programs, facilitates updating of data flow information to reflect program changes,  and derives new global information helpful in solving many familiar global flow analysis problems.  An  illustrative application to live variable analysis is presented.  Many of the graphs involved are constructed  and analyzed before any programs are compiled, thus avoiding certain costs that low-level methods incur  repeatedly at compile time.</abstract>
	<conference>CACM October, 1977</conference>
	<authors>
	<author>Rosen, B. K.</author>
	</authors>
	<keywords>data flow analysis, high-level language, control flow graph, structured programming, escapes, exits,  jumps, goto statements</keywords>
	<version>5.24 4.12 4.22</version>
	<location>CA771003 JB December 27, 1977  11:41 AM</location>
	<citations>
	<citation>1807	4	2923</citation>
	<citation>2034	4	2923</citation>
	<citation>2290	4	2923</citation>
	<citation>2579	4	2923</citation>
	<citation>2579	4	2923</citation>
	<citation>2923	4	2923</citation>
	<citation>2923	4	2923</citation>
	<citation>2945	4	2923</citation>
	<citation>1807	5	2923</citation>
	<citation>1947	5	2923</citation>
	<citation>2923	5	2923</citation>
	<citation>2923	5	2923</citation>
	<citation>2923	5	2923</citation>
	</citations>
	</document>
	<document id= '2922'>
	<title>Two-Level Control Structure for Nondeterministic Programming</title>
	<abstract>The basic ideas of nondeterministic programming are critically reconsidered to single out a  proper attitude and programming style for language allowing direct control of nondeterministic features.   The proposed attitude aims at retaining the purity of the nondeterministic formulation of search processes  on one level (the attempt level), deferring the coordination of problem solving efforts to another (the  choice level).  The feasibility of recognizing these two levels is discussed, stressing that the structure  to be managed at the choice level is a free of contexts.  The leaves are computational environments,  each holding an alternative under inspection, while the other nodes are associated with choice poin ts.   According to the proposed programming style, a generative function is associated with each choice poin t,  which expresses the desired choice strategy. The main advantage on this approach is the localization  of the search strategies: Each nonterminal node of the tree keeps track of the state of the computation  as it was when the choice poin t was last interrogated, holding at the same time the strategy to coordinate  the available alternatives.  Examples are given in term of ND-Lisp, an extension of Lisp designed and  implemented according to these guidelines.</abstract>
	<conference>CACM October, 1977</conference>
	<authors>
	<author>Montangero, C.</author>
	<author>Pacini, G.</author>
	<author>Turini, F.</author>
	</authors>
	<keywords>nondeterministic programming, artificial in telligence, control structures, backtracking, search  strategy planning, context tree</keywords>
	<version>3.64 4.22</version>
	<location>CA771004 JB December 27, 1977  11:30 AM</location>
	<citations>
	<citation>2625	4	2922</citation>
	<citation>2922	4	2922</citation>
	<citation>3081	4	2922</citation>
	<citation>3101	4	2922</citation>
	<citation>3112	4	2922</citation>
	<citation>2438	5	2922</citation>
	<citation>2922	5	2922</citation>
	<citation>2922	5	2922</citation>
	<citation>2922	5	2922</citation>
	</citations>
	</document>
	<document id= '2921'>
	<title>Regular Right Part Grammars and Their Parsers</title>
	<abstract>This paper in troduces an alternative to context-free grammars called regular right part (RRP)  grammars, which resemble PASCAL syntax diagrams.  Formally, RRP grammars have production right parts,  which are nondeterministic finite state machines (FSMs), and, as a special case, regular expressions,  since these can be converted to FSMs.  RRP grammars describe the syntax of programming languages more  concisely and more understandably than is possible with CF grammars.  Also in troduced is a class of parsers,  RRP LR(m, k) parsers, which includes the CF LR(k) parsers and provides the same advantages.  Informally,  an RRP LR(m, k) parser can determine the right end of each handle by considering at most k symbols to  the right of the handle and the left end, after the right end has been found, by considering at most  m symbols to the left of the handle.  A mechanism for determining the left end is required because there  is no bound on the length of the handle.</abstract>
	<conference>CACM October, 1977</conference>
	<authors>
	<author>LaLonde, W. R.</author>
	</authors>
	<keywords>finite state machines (automata), regular expressions, syntax diagrams,LR(k) grammars, parser construction,  parsing, programming languages, language generation, formal definition, compilers, translators, scanners</keywords>
	<version>4.2 5.21 5.23</version>
	<location>CA771005 JB December 27, 1977  11:01 AM</location>
	<citations>
	<citation>1989	4	2921</citation>
	<citation>2060	4	2921</citation>
	<citation>2179	4	2921</citation>
	<citation>2581	4	2921</citation>
	<citation>2698	4	2921</citation>
	<citation>2739	4	2921</citation>
	<citation>2795	4	2921</citation>
	<citation>2921	4	2921</citation>
	<citation>2921	4	2921</citation>
	<citation>3087	4	2921</citation>
	<citation>3154	4	2921</citation>
	<citation>1989	5	2921</citation>
	<citation>2110	5	2921</citation>
	<citation>2921	5	2921</citation>
	<citation>2921	5	2921</citation>
	<citation>2921	5	2921</citation>
	</citations>
	</document>
	<document id= '2920'>
	<title>Game Interpretation of the Deadlock Avoidance Problem</title>
	<abstract>The deadlock avoidance problem may be defined informally as the determination, from some a  priori information about the processes, resources, operating system, etc., of the "safe situations" which  may be realized without endangering the smooth running of the system.  When each process specifies its  future needs by a flowchart of need-defined steps, a global approach to the phenomenon and its in terpretation  as a game between the operating system and the processes allows formalization of risk and safety concepts.   The bipartite graph representation of this game may then be used to construct explicitly the set of safe  states and to study their properties.</abstract>
	<conference>CACM October, 1977</conference>
	<authors>
	<author>Devillers, R.</author>
	</authors>
	<keywords>operating system, multiprogramming, time-sharing, resource allocation, deadlock, in terlock, deadly  embrace, deadlock avoidance, flowchart</keywords>
	<version>4.30 4.32</version>
	<location>CA771006 JB December 27, 1977  10:50 AM</location>
	<citations>
	<citation>2228	4	2920</citation>
	<citation>2280	4	2920</citation>
	<citation>2379	4	2920</citation>
	<citation>2482	4	2920</citation>
	<citation>2740	4	2920</citation>
	<citation>2851	4	2920</citation>
	<citation>2920	4	2920</citation>
	<citation>1877	5	2920</citation>
	<citation>2920	5	2920</citation>
	<citation>2920	5	2920</citation>
	<citation>2920	5	2920</citation>
	</citations>
	</document>
	<document id= '2919'>
	<title>The Programmer's Workbench-A Machine for Software Development</title>
	<abstract>On almost all software development projects the assumption is made that the program development  function will be done on the same machine on which the eventual system will run.  It is only when this  production machine is unavailable or when its programming environment is totally inadequate that alternatives  are considered.  In this paper it is suggested that there are many other situations where it would be  advantageous to separate the program development and main tenance function onto a specialized computer  which is dedicated to that purpose.  Such a computer is here called a Programmer's Workbench.  The four  basic sections of the paper in troduce the subject,outline the general concept, discuss areas where such  an approach may prove beneficial, and describe an operational system utilizing this concept.</abstract>
	<conference>CACM October, 1977</conference>
	<authors>
	<author>Ivie, E. L.</author>
	</authors>
	<keywords>computer configurations, computer networks, software development, software engineering, software  main tenance, UNIX</keywords>
	<version>3.2 3.5 3.7 3.8 4.0</version>
	<location>CA771007 JB December 27, 1977  10:37 AM</location>
	<citations>
	<citation>2626	4	2919</citation>
	<citation>2786	4	2919</citation>
	<citation>2840	4	2919</citation>
	<citation>2919	4	2919</citation>
	<citation>2919	4	2919</citation>
	<citation>2919	4	2919</citation>
	<citation>3017	4	2919</citation>
	<citation>3110	4	2919</citation>
	<citation>3174	4	2919</citation>
	<citation>2536	5	2919</citation>
	<citation>2593	5	2919</citation>
	<citation>2629	5	2919</citation>
	<citation>2919	5	2919</citation>
	<citation>2919	5	2919</citation>
	<citation>2919	5	2919</citation>
	</citations>
	</document>
	<document id= '2918'>
	<title>Multiprocessor Memory Organization and Memory Interference</title>
	<abstract>The structure of shared memory in a multiprocessor computer system is examined with particular  attention to nonin terleaved memory.  Alternative memory organizations are compared and it is shown that  a home memory organization, in which each processor is associated with one or more memories in which  its address space is concentrated, is quite effective in reducing memory in terference.  Home memory organization  is shown to be particularly suited to certain specialized computation problems as well as to possess  advantages in terms of in terference and reliability for general purpose computation.  Results for in terleaved  memory are drawn from previous work and are used for comparison.  Trace-driven simulations are used to  verify the conclusions of the analysis.</abstract>
	<conference>CACM October, 1977</conference>
	<authors>
	<author>Smith, A. J.</author>
	</authors>
	<keywords>memory in terference, interleaving, multiprocessing, trace-driven simulation, queueing theory, shared  memory</keywords>
	<version>4.30 4.32 6.34</version>
	<location>CA771008 JB December 27, 1977  10:28 AM</location>
	<citations>
	<citation>2918	4	2918</citation>
	<citation>3119	4	2918</citation>
	<citation>2859	5	2918</citation>
	<citation>2918	5	2918</citation>
	<citation>2918	5	2918</citation>
	<citation>2918	5	2918</citation>
	</citations>
	</document>
	<document id= '2917'>
	<citations>
	<citation>2917	5	2917</citation>
	<citation>2917	5	2917</citation>
	<citation>2917	5	2917</citation>
	</citations>
	<title>SITAR: An Interactive Text Processing System for Small Computers (Corrigendum)</title>
	<conference>CACM October, 1977</conference>
	<authors>
	<author>Schneider, B. R. Jr.</author>
	<author>Watts, R. M.</author>
	</authors>
	<location>CA771009 JB December 28, 1977  5:58 AM</location>
	</document>
	<document id= '2916'>
	<title>A Fast String Searching Algorithm</title>
	<abstract>An algorithm is presented that searches for the location, "i," of the first occurrence of a  character string, "pat," in another string, "string."  During the search operation, the characters of  pat are matched starting with the last character of pat.  The information gained by starting the match  at the end of the pattern often allows the algorithm to proceed in large jumps through the text being  searched.  Thus the algorithm has the unusual property that, in most cases, not all of the first i characters  of string are inspected.  The number of characters actually inspected (on the average) decreases as a  function of the length of pat.  For a random English pattern of length 5, the algorithm will typically  inspect i/4 characters of string before finding a match at i.  Furthermore, the algorithm has been implemented  so that (on the average) fewer than i+patlen machine instructions are executed.  These conclusions are  supported with empirical evidence and a theoretical analysis of the average behavior of the algorithm.   The worst case behavior of the algorithm is linear in i+patlen, assuming the availability of array space  for tables linear in patlen plus the size of the alphabet.</abstract>
	<conference>CACM October, 1977</conference>
	<authors>
	<author>Boyer, R. S.</author>
	</authors>
	<keywords>bibliographic search, computational complexity, information retrieval, linear time bound, pattern  matching, text editing</keywords>
	<version>3.74 4.40 5.25</version>
	<location>CA771010 JB December 27, 1977  9:43 AM</location>
	<citations>
	<citation>2916	4	2916</citation>
	<citation>2746	5	2916</citation>
	<citation>2916	5	2916</citation>
	<citation>2916	5	2916</citation>
	<citation>2916	5	2916</citation>
	<citation>3162	5	2916</citation>
	<citation>2916	6	2916</citation>
	</citations>
	</document>
	<document id= '2915'>
	<title>Considerations for Future Programming Language Standards Activities</title>
	<abstract>This paper reviews the current state of programming language standards activities with respect  to the anomalies which exist between the various published and proposed standards for Fortran, Cobol,  PL/I, and Basic.  Proposals are made for the inclusion of formalisms within future standards and the  extension of the standards to include additional items such as error conditions and documentation.</abstract>
	<conference>CACM November, 1977</conference>
	<authors>
	<author>Lee, J. A. N.</author>
	</authors>
	<keywords>programming languages, standards, formalisms, formal descriptions, Fortran, Cobol, PL/I, Basic,  Vienna Definition Language (VDL)</keywords>
	<version>2.4 4.2 4.29 4.6 5.23</version>
	<location>CA771101 JB December 27, 1977  8:10 AM</location>
	<citations>
	<citation>2154	4	2915</citation>
	<citation>2299	4	2915</citation>
	<citation>2501	4	2915</citation>
	<citation>2629	4	2915</citation>
	<citation>2915	4	2915</citation>
	<citation>2915	4	2915</citation>
	<citation>3060	4	2915</citation>
	<citation>3114	4	2915</citation>
	<citation>1502	5	2915</citation>
	<citation>1900	5	2915</citation>
	<citation>2915	5	2915</citation>
	<citation>2915	5	2915</citation>
	<citation>2915	5	2915</citation>
	</citations>
	</document>
	<document id= '2914'>
	<title>Use of the LRU Stack Depth Distribution for Simulation of Paging Behavior</title>
	<abstract>Two families of probability distributions were needed for use by a virtual memory simulation  model: headway between page fault distributions, and working set size distributions.  All members of  both families can be derived from the LRU stack depth distribution.  Simple expressions for the computation  of both kinds of distributions are given.  Finally, examples are given of both families of distributions  as computed from a published stack depth distribution.</abstract>
	<conference>CACM November, 1977</conference>
	<authors>
	<author>Turner, R.</author>
	<author>Strecker, B.</author>
	</authors>
	<keywords>virtual memory, paging, LRU stack, working set, headway between page faults, computer system simulation</keywords>
	<version>4.35 4.6 8.1</version>
	<location>CA771102 JB December 27, 1977  8:04 AM</location>
	<citations>
	<citation>2914	5	2914</citation>
	<citation>2914	5	2914</citation>
	<citation>2914	5	2914</citation>
	</citations>
	</document>
	<document id= '2913'>
	<title>The Aliasing Problem in Computer-Generated Shaded Images</title>
	<abstract>Certain defects, such as jagged edges and disappearing detail, have long been an annoyance  in digitally generated shaded images.  Although increasing the resolution or defocusing the display can  attenuate them, an understanding of these defects leads to more effective methods.  This paper explains  the observed defects in terms of the aliasing phenomenon inherent in sampled signals and discusses prefiltering  as a recognized cure.  A method for evaluating filters is presented, the application of prefiltering  to hidden-surface algorithms is discussed, and an implementation of a filtering tiler is shown accompanied  by examples of its effectiveness.</abstract>
	<conference>CACM November, 1977</conference>
	<authors>
	<author>Crow, F. C.</author>
	</authors>
	<keywords>aliasing, computer graphics, convolutional filtering, hidden-surface removal, sampling</keywords>
	<version>8.2</version>
	<location>CA771103 JB December 27, 1977  7:56 AM</location>
	<citations>
	<citation>2816	4	2913</citation>
	<citation>2828	4	2913</citation>
	<citation>2827	4	2913</citation>
	<citation>2913	4	2913</citation>
	<citation>3047	4	2913</citation>
	<citation>2751	5	2913</citation>
	<citation>2913	5	2913</citation>
	<citation>2913	5	2913</citation>
	<citation>2913	5	2913</citation>
	</citations>
	</document>
	<document id= '2912'>
	<title>Concurrent Reading and Writing</title>
	<abstract>The problem of sharing data among asynchronous process is considered.  It is assumed that only  one process at a time can modify the data, but concurrent reading and writing is permitted.  Two general  theorems are proved, and some algorithms are presented to illustrate their use.  These include a solution  to the general problem in which a read is repeated if it might have obtained an incorrect result, and  two techniques for transmitting messages between processes.  These solutions do not assume any synchronizing  mechanism other than data which can be written by one process and read by other processes.</abstract>
	<conference>CACM November, 1977</conference>
	<authors>
	<author>Lamport, L.</author>
	</authors>
	<keywords>asynchronous multiprocessing, multiprocess synchronization, readers/writers problem, shared data</keywords>
	<version>4.32 5.24</version>
	<location>CA771104 JB December 27, 1977  7:47 AM</location>
	<citations>
	<citation>2320	4	2912</citation>
	<citation>2597	4	2912</citation>
	<citation>2777	4	2912</citation>
	<citation>2851	4	2912</citation>
	<citation>2895	4	2912</citation>
	<citation>2912	4	2912</citation>
	<citation>2946	4	2912</citation>
	<citation>3128	4	2912</citation>
	<citation>2150	5	2912</citation>
	<citation>2912	5	2912</citation>
	<citation>2912	5	2912</citation>
	<citation>2912	5	2912</citation>
	<citation>3128	5	2912</citation>
	<citation>2150	6	2912</citation>
	<citation>2376	6	2912</citation>
	<citation>2436	6	2912</citation>
	<citation>2597	6	2912</citation>
	<citation>2865	6	2912</citation>
	<citation>2866	6	2912</citation>
	<citation>2870	6	2912</citation>
	<citation>2912	6	2912</citation>
	<citation>3082	6	2912</citation>
	</citations>
	</document>
	<document id= '2911'>
	<title>Anomalous Behavior of the Fifty-Percent Rule in Dynamic Memory Allocation</title>
	<abstract>This paper reports simulation data showing that, in dynamic memory allocation, the average  free-to-allocated-block ratio can differ considerably and in both directions from the predictions of  the 50 percent rule.  A new derivation is given, and it is shown that previous derivations make an assumption  that may be violated frequently.  On the basis of the simulation data and the derivation, it is hypothesized  that the anomalous behavior results from the combined effects of systematic placement and the statistics  of the release process.  Additional simulations support this hypothesis.  Systematic placement, which  refers to the natural convention of always allocating storage requests against the same end of the free  block selected by the allocation strategy, tends to order blocks within contiguous groups according to  their allocation time.  The degree of anomalous behavior depends on the extent to which allocated blocks  are released in the order of their allocation.  For non-Markovian release processes, the extent of the  correlation between allocation order and release order varies approximately inversely with the coefficient  of variation of the memory residence time distribution.  The simulations show that allocation efficiency  depends strongly on the residence time distribution; efficiency decreases as the distribution's coefficient  of variation increases.  Some practical implications are briefly discussed.</abstract>
	<conference>CACM November, 1977</conference>
	<authors>
	<author>Shore, J. E.</author>
	</authors>
	<keywords>dynamic memory allocation, storage fragmentation, fifty-percent rule, first-fit, simulation</keywords>
	<version>3.73 4.32 4.34 4.35</version>
	<location>CA771105 JB December 27, 1977  7:37 AM</location>
	<citations>
	<citation>2095	4	2911</citation>
	<citation>2218	4	2911</citation>
	<citation>2498	4	2911</citation>
	<citation>2596	4	2911</citation>
	<citation>2596	4	2911</citation>
	<citation>2734	4	2911</citation>
	<citation>2747	4	2911</citation>
	<citation>2768	4	2911</citation>
	<citation>2845	4	2911</citation>
	<citation>2902	4	2911</citation>
	<citation>2902	4	2911</citation>
	<citation>2902	4	2911</citation>
	<citation>2911	4	2911</citation>
	<citation>2911	4	2911</citation>
	<citation>2911	4	2911</citation>
	<citation>2911	4	2911</citation>
	<citation>2911	4	2911</citation>
	<citation>2911	4	2911</citation>
	<citation>2911	4	2911</citation>
	<citation>2955	4	2911</citation>
	<citation>2955	4	2911</citation>
	<citation>2983	4	2911</citation>
	<citation>3000	4	2911</citation>
	<citation>972	4	2911</citation>
	<citation>273	5	2911</citation>
	<citation>1879	5	2911</citation>
	<citation>2435	5	2911</citation>
	<citation>2498	5	2911</citation>
	<citation>2734	5	2911</citation>
	<citation>2773	5	2911</citation>
	<citation>2911	5	2911</citation>
	<citation>2911	5	2911</citation>
	<citation>2911	5	2911</citation>
	<citation>2983	5	2911</citation>
	</citations>
	</document>
	<document id= '2910'>
	<title>Equivalence of Hough Curve Detection to Template Matching</title>
	<conference>CACM November, 1977</conference>
	<authors>
	<author>Stockman, G. C.</author>
	</authors>
	<keywords>picture processing, pattern recognition, curve detection, Hough transformation, template matching</keywords>
	<version>3.63 6.9</version>
	<location>CA771106 JB December 27, 1977  7:23 AM</location>
	<citations>
	<citation>2788	4	2910</citation>
	<citation>2910	4	2910</citation>
	<citation>2910	4	2910</citation>
	<citation>2400	5	2910</citation>
	<citation>2788	5	2910</citation>
	<citation>2910	5	2910</citation>
	<citation>2910	5	2910</citation>
	<citation>2910	5	2910</citation>
	</citations>
	</document>
	<document id= '2909'>
	<title>What Can We Do about the Unnecessary Diversity of Notation for Syntactic Definitions?</title>
	<conference>CACM November, 1977</conference>
	<authors>
	<author>Wirth, N.</author>
	</authors>
	<keywords>syntactic description language, extended BNF</keywords>
	<version>4.20</version>
	<location>CA771107 JB December 27, 1977  7:20 AM</location>
	<citations>
	<citation>2909	5	2909</citation>
	<citation>2909	5	2909</citation>
	<citation>2909	5	2909</citation>
	</citations>
	</document>
	<document id= '2908'>
	<title>A Note On Reflection-Free Permutation Enumeration</title>
	<conference>CACM November, 1977</conference>
	<authors>
	<author>Roy, M. K.</author>
	</authors>
	<keywords>permutations, reflection-free generation</keywords>
	<version>5.30</version>
	<location>CA771108 JB December 27, 1977  7:17 AM</location>
	<citations>
	<citation>2044	4	2908</citation>
	<citation>2189	4	2908</citation>
	<citation>2417	4	2908</citation>
	<citation>2505	4	2908</citation>
	<citation>2874	4	2908</citation>
	<citation>2908	4	2908</citation>
	<citation>2908	4	2908</citation>
	<citation>2908	4	2908</citation>
	<citation>3115	4	2908</citation>
	<citation>2505	5	2908</citation>
	<citation>2884	5	2908</citation>
	<citation>2908	5	2908</citation>
	<citation>2908	5	2908</citation>
	<citation>2908	5	2908</citation>
	<citation>521	5	2908</citation>
	</citations>
	</document>
	<document id= '2907'>
	<title>The Optimal Approach to Recursive Programs</title>
	<abstract>The classical fixed poin t approach toward recursive programs suggests choosing the "least defined  fixed poin t" as the most appropriate solution to a recursive program.  A new approach is described which  in troduction an " optimal fixed point," which, in contrast to the least defined fixed poin t, embodies the  maximal amount of valuable information embedded in the program.  The practical implications of this approach  are discussed and techniques for proving properties of optimal fixed poin t are given.  The presentation  is informal, with emphasis on examples.</abstract>
	<conference>CACM November, 1977</conference>
	<authors>
	<author>Manna, Z.</author>
	<author>Shamir, A.</author>
	</authors>
	<keywords>recursive programs, fixed poin ts, least fixedpoints, optimal fixed poin ts, proof techniques</keywords>
	<version>5.24</version>
	<location>CA771109 JB December 27, 1977  7:13 AM</location>
	<citations>
	<citation>2907	5	2907</citation>
	<citation>2907	5	2907</citation>
	<citation>2907	5	2907</citation>
	</citations>
	</document>
	<document id= '2906'>
	<title>A Very High Level Programming Language for Data Processing Applications</title>
	<abstract>Application development today is too labor-in tensive.  In recent years, very high-level languages  have been increasingly explored as a solution to this problem.  The Business Definition Language (BDL)  is such a language, one aimed at business data processing problems.  The concepts in BDL mimic those  which have evolved through the years in businesses using manual methods.  This results in three different  sublanguages or components: one for defining the business forms, one for describing the business organization,  and one for writing calculations.</abstract>
	<conference>CACM November, 1977</conference>
	<authors>
	<author>Hammer, M.</author>
	<author>owe, W. G.</author>
	<author>Kruskal, V. J.</author>
	<author>Wladawsky, I.</author>
	</authors>
	<keywords>very high level language, nonprocedural language, data flow language, business application, business  data processing, structured programming, modular programming, format specification, and design methodology</keywords>
	<version>3.50 4.22 4.32</version>
	<location>CA771110 JB December 27, 1977  7:06 AM</location>
	<citations>
	<citation>1135	4	2906</citation>
	<citation>1136	4	2906</citation>
	<citation>493	4	2906</citation>
	<citation>2710	4	2906</citation>
	<citation>2765	4	2906</citation>
	<citation>2888	4	2906</citation>
	<citation>2906	4	2906</citation>
	<citation>729	4	2906</citation>
	<citation>2906	5	2906</citation>
	<citation>2906	5	2906</citation>
	<citation>2906	5	2906</citation>
	<citation>616	5	2906</citation>
	</citations>
	</document>
	<document id= '2905'>
	<title>Perfect Hashing Functions: A Single Probe Retrieving Method for Static Sets</title>
	<abstract>A refinement of hashing which allows retrieval of an item in a static table with a single probe  is considered.  Given a set I of identifiers, two methods are presented for building, in a mechanical  way, perfect hashing functions, i.e. functions transforming the elements of I into unique addresses.   The first method, the "quotient reduction" method, is shown to be complete in the sense that for every  set I the smallest table in which the elements of I can be stored and from which they can be retrieved  by using a perfect hashing function constructed by this method can be found.  However, for nonuniformly  distributed sets, this method can give rather sparse tables.  The second method, the "remainder reduction"  method, is not complete in the above sense, but it seems to give minimal (or almost minimal) tables for  every kind of set.  The two techniques are applicable directly to small sets.  Some methods to extend  these results to larger sets are also presented.  A rough comparison with ordinary hashing is given which  shows that this method can be used conveniently in several practical applications.</abstract>
	<conference>CACM November, 1977</conference>
	<authors>
	<author>Sprugnoli, R.</author>
	</authors>
	<keywords>hashing, hashing methods, hash coding, direct addressing, identifier-to-address transformations,  perfect hashing functions, perfect hash coding, reduction, scatter storage</keywords>
	<version>3.7 3.74 4.34</version>
	<location>CA771111 JB December 27, 1977  6:45 AM</location>
	<citations>
	<citation>2905	4	2905</citation>
	<citation>2905	5	2905</citation>
	<citation>2905	5	2905</citation>
	<citation>2905	5	2905</citation>
	<citation>3041	5	2905</citation>
	<citation>3126	5	2905</citation>
	<citation>3176	5	2905</citation>
	<citation>829	5	2905</citation>
	<citation>2846	6	2905</citation>
	<citation>2905	6	2905</citation>
	<citation>2905	6	2905</citation>
	<citation>2905	6	2905</citation>
	</citations>
	</document>
	<document id= '2904'>
	<title>An Algorithm for Reduction of Operator Strength</title>
	<abstract>A simple algorithm which uses an indexed temporary table to perform reduction of operator strength  in strongly connected regions is presented.  Several extensions, including linear function test replacement,  are discussed.  These algorithms should fit well into an integrated package of local optimization algorithms.</abstract>
	<conference>CACM November, 1977</conference>
	<authors>
	<author>Cocke, J.</author>
	</authors>
	<keywords>compilers, optimization of compiled code, program analysis, operator strength reduction, test replacement,  strongly connected region</keywords>
	<version>4.12 5.24 5.32</version>
	<location>CA771112 JB December 27, 1977  6:34 AM</location>
	<citations>
	<citation>2904	5	2904</citation>
	<citation>2904	5	2904</citation>
	<citation>2904	5	2904</citation>
	</citations>
	</document>
	<document id= '2903'>
	<title>Improving Programs by the Introduction of Recursion</title>
	<abstract>A new technique of program transformation, called "recursion in troduction," is described and  applied to two algorithms which solve pattern matching problems.  By using recursion in troduction, algorithms  which manipulate a stack are first translated into recursive algorithms in which no stack operations  occur.  These algorithms are then subjected to a second transformation, a method of recursion elimination  called "tabulation," to produce programs with a very efficient running time.  In particular, it is shown  how the fast linear pattern matching algorithm of Knuth, Morris, and Pratt can be derived in a few steps  from a simple nonlinear stack algorithm.</abstract>
	<conference>CACM November, 1977</conference>
	<authors>
	<author>Bird, R. S.</author>
	</authors>
	<keywords>program transformation, optimization of programs, recursion elimination, pattern matching algorithms,  stacks, computational induction</keywords>
	<version>4.0 4.2 5.20 5.24 5.25</version>
	<location>CA771113 JB December 27, 1977  6:29 AM</location>
	<citations>
	<citation>2326	4	2903</citation>
	<citation>2457	4	2903</citation>
	<citation>2842	4	2903</citation>
	<citation>2903	4	2903</citation>
	<citation>2192	5	2903</citation>
	<citation>2903	5	2903</citation>
	<citation>2903	5	2903</citation>
	<citation>2903	5	2903</citation>
	</citations>
	</document>
	<document id= '2902'>
	<title>Dynamic Memory Allocation in Computer Simulation</title>
	<abstract>This paper investigates the performance of 35 dynamic memory allocation algorithms when used  to service simulation programs as represented by 18 test cases.  Algorithm performance was measured in terms of processing time, memory usage, and external memory fragmentation.  Algorithms main taining separate  free space lists for each size of memory block used tended to perform quite well compared with other  algorithms.  Simple algorithms operating on memory ordered lists (without any free list) performed surprisingly  well.  Algorithms employing power-of-two block sizes had favorable processing requirements but generally  unfavorable memory usage.  Algorithms employing LIFO, FIFO, or memory ordered free lists generally performed  poorly compared with others.</abstract>
	<conference>CACM November, 1977</conference>
	<authors>
	<author>Nielsen, N. R.</author>
	</authors>
	<keywords>algorithm performance,dynamic memory allocation, dynamic memory management, dynamic storage allocation,  garbage collection, list processing, memory allocation, memory management, programming techniques, simulation,  simulation memory management, simulation techniques, space allocation, storage allocation</keywords>
	<version>3.74 4.49 5.25 8.1</version>
	<location>CA771114 JB December 27, 1977  6:09 AM</location>
	<citations>
	<citation>1211	4	2902</citation>
	<citation>1211	4	2902</citation>
	<citation>1389	4	2902</citation>
	<citation>1549	4	2902</citation>
	<citation>1552	4	2902</citation>
	<citation>1906	4	2902</citation>
	<citation>2095	4	2902</citation>
	<citation>2162	4	2902</citation>
	<citation>2218	4	2902</citation>
	<citation>2435	4	2902</citation>
	<citation>2498	4	2902</citation>
	<citation>2596	4	2902</citation>
	<citation>2596	4	2902</citation>
	<citation>2596	4	2902</citation>
	<citation>2704	4	2902</citation>
	<citation>2734	4	2902</citation>
	<citation>2747	4	2902</citation>
	<citation>2768	4	2902</citation>
	<citation>2768	4	2902</citation>
	<citation>2773	4	2902</citation>
	<citation>2845	4	2902</citation>
	<citation>2845	4	2902</citation>
	<citation>2845	4	2902</citation>
	<citation>2845	4	2902</citation>
	<citation>2902	4	2902</citation>
	<citation>2902	4	2902</citation>
	<citation>2902	4	2902</citation>
	<citation>2902	4	2902</citation>
	<citation>2902	4	2902</citation>
	<citation>2902	4	2902</citation>
	<citation>2902	4	2902</citation>
	<citation>2902	4	2902</citation>
	<citation>2902	4	2902</citation>
	<citation>2902	4	2902</citation>
	<citation>2902	4	2902</citation>
	<citation>2911	4	2902</citation>
	<citation>2911	4	2902</citation>
	<citation>2911	4	2902</citation>
	<citation>2955	4	2902</citation>
	<citation>2955	4	2902</citation>
	<citation>2955	4	2902</citation>
	<citation>2955	4	2902</citation>
	<citation>2983	4	2902</citation>
	<citation>3000	4	2902</citation>
	<citation>1051	5	2902</citation>
	<citation>1062	5	2902</citation>
	<citation>1184	5	2902</citation>
	<citation>1211	5	2902</citation>
	<citation>1552	5	2902</citation>
	<citation>1879	5	2902</citation>
	<citation>2435	5	2902</citation>
	<citation>2596	5	2902</citation>
	<citation>2734	5	2902</citation>
	<citation>2747	5	2902</citation>
	<citation>2768	5	2902</citation>
	<citation>2902	5	2902</citation>
	<citation>2902	5	2902</citation>
	<citation>2902	5	2902</citation>
	</citations>
	</document>
	<document id= '2901'>
	<title>An Encoding Method for Multifield Sorting and Indexing</title>
	<abstract>Sequences of character strings with an order relation imposed between sequences are considered.   An encoding scheme is described which produces a single, order-preserving string from a sequence of  strings.  The original sequence can be recovered from the encoded string, and one sequence of strings  precedes another if and only if the encoding of the first precedes the encoding of the second.  The strings  may be variable length, without a maximum length restriction, and no symbols need be reserved for control  purposes.  Hence any symbol may occur in any string.  The scheme is useful for multifield sorting, multifield  indexing, and other applications where ordering on more than one field is important.</abstract>
	<conference>CACM November, 1977</conference>
	<authors>
	<author>Blasgen, M. W.</author>
	<author>Casey, R. G.</author>
	<author>Eswaran, K. P.</author>
	</authors>
	<keywords>Sorting multifield indexes, lexicographic order, searching, encoding</keywords>
	<version>3.74 4.19 4.33 4.40 5.31</version>
	<location>CA771115 JB December 27, 1977  5:55 AM</location>
	<citations>
	<citation>2140	4	2901</citation>
	<citation>2155	4	2901</citation>
	<citation>2406	4	2901</citation>
	<citation>2452	4	2901</citation>
	<citation>2710	4	2901</citation>
	<citation>2710	4	2901</citation>
	<citation>2715	4	2901</citation>
	<citation>2716	4	2901</citation>
	<citation>2716	4	2901</citation>
	<citation>2717	4	2901</citation>
	<citation>2718	4	2901</citation>
	<citation>2765	4	2901</citation>
	<citation>2765	4	2901</citation>
	<citation>2817	4	2901</citation>
	<citation>2888	4	2901</citation>
	<citation>2901	4	2901</citation>
	<citation>2901	4	2901</citation>
	<citation>2901	4	2901</citation>
	<citation>2957	4	2901</citation>
	<citation>2959	4	2901</citation>
	<citation>2965	4	2901</citation>
	<citation>3087	4	2901</citation>
	<citation>3134	4	2901</citation>
	<citation>3154	4	2901</citation>
	<citation>1976	5	2901</citation>
	<citation>2046	5	2901</citation>
	<citation>2715	5	2901</citation>
	<citation>2901	5	2901</citation>
	<citation>2901	5	2901</citation>
	<citation>2901	5	2901</citation>
	</citations>
	</document>
	<document id= '2900'>
	<title>Some Theorems to Aid in Solving the File Allocation Problem</title>
	<abstract>The file allocation problem-i.e. the problem of finding the optimal set of network sites at  which to locate copies of a file-is known to be, in general, polynomial complete.  Heuristics and other  aids to finding optimal, or near-optimal, solutions are therefore much needed.  In this paper we present  three theorems which can be applied a priori to indicate that certain sites should (or should not) be  included in an optimal allocation.</abstract>
	<conference>CACM November, 1977</conference>
	<authors>
	<author>Grapa, E.</author>
	<author>Belford, G. G.</author>
	</authors>
	<keywords>File allocation, computer networks, distributed data management</keywords>
	<version>4.33</version>
	<location>CA771116 JB December 27, 1977  8:45 AM</location>
	<citations>
	<citation>2900	5	2900</citation>
	<citation>2900	5	2900</citation>
	<citation>2900	5	2900</citation>
	</citations>
	</document>
	<document id= '2899'>
	<title>A Survey of Computer Science Offerings In Small Liberal Arts Colleges.</title>
	<abstract>Recent curricular development in computer science together with student in terest in pursuing  topics in computer science beyond the usual programming courses have encouraged small liberal arts colleges  to expand their offerings.  This paper summarizes the results of a survey taken to determine the type  of computer science programs being offered in these colleges.  The results indicate that over half of  these colleges either have no computer science program or offer only programming courses.</abstract>
	<conference>CACM December, 1977</conference>
	<authors>
	<author>Lopez, A. A.</author>
	<author>Raymond, R.</author>
	<author>Tardiff, R.</author>
	</authors>
	<keywords>computer science, education, curricula, small colleges</keywords>
	<version>1.5</version>
	<location>CA771201 JB December 22, 1977  5:53 PM</location>
	<citations>
	<citation>1720	4	2899</citation>
	<citation>1927	4	2899</citation>
	<citation>2147	4	2899</citation>
	<citation>2163	4	2899</citation>
	<citation>2345	4	2899</citation>
	<citation>2478	4	2899</citation>
	<citation>2594	4	2899</citation>
	<citation>2852	4	2899</citation>
	<citation>2899	4	2899</citation>
	<citation>2899	4	2899</citation>
	<citation>3003	4	2899</citation>
	<citation>3130	4	2899</citation>
	<citation>1771	5	2899</citation>
	<citation>2538	5	2899</citation>
	<citation>2899	5	2899</citation>
	<citation>2899	5	2899</citation>
	<citation>2899	5	2899</citation>
	</citations>
	</document>
	<document id= '2898'>
	<title>A Conceptual Framework for a Nonprocedural Programming Language</title>
	<abstract>A sequential programming language forces the programmer to prescribe explicitly the order in  which the operations in his program have to be executed, even if the order is not relevant to the solution  of his problem.  The requirement to indicate irrelevant sequencing can be removed if the language provides  facilities for specifying a task in a nonprocedural manner.  In general, a program specified in this  way will allow concurrent evaluation.  This paper describes a conceptual framework for a high level programming  language providing both nonprocedural and sequential facilities.  Within a program, nonprocedural and  sequential program modules may be nested freely.</abstract>
	<conference>CACM December, 1977</conference>
	<authors>
	<author>Kessels, J. L. W.</author>
	</authors>
	<keywords>parallel programming, descriptive programming, nonprocedural programming, definitional language,  data flow programming, applicative programming</keywords>
	<version>4.20</version>
	<location>CA771202 JB February 1, 1980  4:05 AM</location>
	<citations>
	<citation>2865	4	2898</citation>
	<citation>2866	4	2898</citation>
	<citation>2898	4	2898</citation>
	<citation>2898	4	2898</citation>
	<citation>2972	4	2898</citation>
	<citation>3043	4	2898</citation>
	<citation>3128	4	2898</citation>
	<citation>3144	4	2898</citation>
	<citation>2597	5	2898</citation>
	<citation>2898	5	2898</citation>
	<citation>2898	5	2898</citation>
	<citation>2898	5	2898</citation>
	<citation>2946	5	2898</citation>
	</citations>
	</document>
	<document id= '2897'>
	<title>A Case Study of a New Code Generation Technique for Compilers</title>
	<abstract>Recent developments in optimizing techniques have allowed a new design for compilers to emerge.   Such a compiler translates the parsed source code into lower level code by a sequence of steps.  Each  step expands higher level statements into blocks of lower level code and then performs optimizations  on the result.  Each statement has only one possible expansion-the task of tailoring this code to take  advantage of any special cases is done by the optimizations.  This paper provides evidence that this  strategy can indeed result in good object code.  The traditionally difficult PL/I concatenate statement  was investigated as a detailed example.  A set of fairly simple optimizations was identified which allow  the compiler to produce good code. More elaborate optimizations can further improve the object code.   For most contexts of the concatenate statement, the code produced by a compiler using the expansion-optimization  strategy described above compares favorably with the code produced by a conventional PL/I optimizing  compiler.</abstract>
	<conference>CACM December, 1977</conference>
	<authors>
	<author>Carter, J. L.</author>
	</authors>
	<keywords>compiler structure, optimizing compiler, code generation, PL/I compiler, concatenation, program  optimization, optimization techniques, data flow analysis</keywords>
	<version>4.12 4.13 4.22</version>
	<location>CA771203 JB February 1, 1980  3:54 AM</location>
	<citations>
	<citation>2897	5	2897</citation>
	<citation>2897	5	2897</citation>
	<citation>2897	5	2897</citation>
	</citations>
	</document>
	<document id= '2896'>
	<title>An Exercise in Proving Parallel Programs Correct</title>
	<abstract>A parallel program, Dijkstra's on-the-fly garbage collector, is proved correct using a proof  method developed by Owicki.  The fine degree of in terleaving in this program makes it especially difficult  to understand, and complicates the proof greatly.  Difficulties with proving such parallel programs correct  are discussed.</abstract>
	<conference>CACM December, 1977</conference>
	<authors>
	<author>Gries, D.</author>
	</authors>
	<keywords>garbage collection, multiprocessing, program correctness for multiprocessing tasks</keywords>
	<version>4.32 4.34 4.35 4.39 5.24</version>
	<location>CA771204 JB February 1, 1980  3:37 AM</location>
	<citations>
	<citation>2021	4	2896</citation>
	<citation>2222	4	2896</citation>
	<citation>2227	4	2896</citation>
	<citation>2315	4	2896</citation>
	<citation>2326	4	2896</citation>
	<citation>2470	4	2896</citation>
	<citation>2732	4	2896</citation>
	<citation>2838	4	2896</citation>
	<citation>2865	4	2896</citation>
	<citation>2896	4	2896</citation>
	<citation>2896	4	2896</citation>
	<citation>2896	4	2896</citation>
	<citation>2943	4	2896</citation>
	<citation>2972	4	2896</citation>
	<citation>3014	4	2896</citation>
	<citation>3037	4	2896</citation>
	<citation>3039	4	2896</citation>
	<citation>3039	4	2896</citation>
	<citation>3043	4	2896</citation>
	<citation>3068	4	2896</citation>
	<citation>3073	4	2896</citation>
	<citation>3074	4	2896</citation>
	<citation>3077	4	2896</citation>
	<citation>3112	4	2896</citation>
	<citation>3143	4	2896</citation>
	<citation>1834	5	2896</citation>
	<citation>2723	5	2896</citation>
	<citation>2732	5	2896</citation>
	<citation>2896	5	2896</citation>
	<citation>2896	5	2896</citation>
	<citation>2896	5	2896</citation>
	<citation>3039	5	2896</citation>
	<citation>2723	6	2896</citation>
	<citation>2732	6	2896</citation>
	<citation>2896	6	2896</citation>
	</citations>
	</document>
	<document id= '2895'>
	<title>A Language for Formal Problem Specification</title>
	<abstract>A language for specifying the in tended behavior of communicating parallel processes is described.   The specifications are constrain ts on the order in which events of a computation can occur.  The language  is used to write specifications of the readers/writers problem and the writer priority of the second  readers/writers problem.</abstract>
	<conference>CACM December, 1977</conference>
	<authors>
	<author>Greif, I.</author>
	</authors>
	<keywords>formal specifications,program correctness, parallel processing, synchronization, readers/writers  problem</keywords>
	<version>4.22 4.32 5.24</version>
	<location>CA771205 DMM December 22, 1977  12:44 PM</location>
	<citations>
	<citation>2320	4	2895</citation>
	<citation>2597	4	2895</citation>
	<citation>2777	4	2895</citation>
	<citation>2851	4	2895</citation>
	<citation>2895	4	2895</citation>
	<citation>2895	4	2895</citation>
	<citation>2912	4	2895</citation>
	<citation>2946	4	2895</citation>
	<citation>3128	4	2895</citation>
	<citation>2150	5	2895</citation>
	<citation>2618	5	2895</citation>
	<citation>2895	5	2895</citation>
	<citation>2895	5	2895</citation>
	<citation>2895	5	2895</citation>
	</citations>
	</document>
	<document id= '2894'>
	<title>A Methodology for Interactive Computer Service Measurement</title>
	<abstract>A measurement methodology applicable to in teractive computer service is described.  Its primary  purpose is to enable external, user-oriented assessment of computer performance, instead of the more  frequently used in ternal system measurement techniques.  The NBS Network Measurement System is employed  as the external measurement tool.  Example data have been collected and analyzed.  A demonstration of  the methodology, leading to a pragmatic figure-of-merit evaluation of results, is included.</abstract>
	<conference>CACM December, 1977</conference>
	<authors>
	<author>Adrams, M. D.</author>
	</authors>
	<keywords>in teractive system, computer service, measurement, performance, external measurement, methodology,  measurement model,network measurement system, measures, figure-of-merit.</keywords>
	<version>2.4 4.6 6.2</version>
	<location>CA771206 JB December 22, 1977  12:32 PM</location>
	<citations>
	<citation>2193	4	2894</citation>
	<citation>2319	4	2894</citation>
	<citation>2373	4	2894</citation>
	<citation>2894	4	2894</citation>
	<citation>2894	4	2894</citation>
	<citation>1951	5	2894</citation>
	<citation>2016	5	2894</citation>
	<citation>2894	5	2894</citation>
	<citation>2894	5	2894</citation>
	<citation>2894	5	2894</citation>
	</citations>
	</document>
	<document id= '2893'>
	<title>Computers as an Innovation in American Local Governments</title>
	<abstract>Computers and electronic data processing are a major technological innovation in the operations  of American local government. This paper establishes that there is substantial variation among the larger  local governments in the rate at which they adopt computer technology, in the level of financial support  they provide for EDP, and in the extensiveness and sophistication of their automated applications.  The  central question addressed is: What might explain the differences between governments in the extent to  which they adopt and use computers?  Hypotheses are tested for several streams of explanatory factors,  using data from more than 500 city and county governments.  The findings identify certain local government  milieus which are particularly conducive to higher levels of computer innovation.  Somewhat unexpected  findings reveal the significant impact of the distribution of control over EDP decisions and the dominant  political values within the government. Other important factors include the measured need for computer  applications and the presence of external funding support for computing.  Finally, the paper suggests  a framework for identifying the key determinants of other technological innovations.</abstract>
	<conference>CACM December, 1977</conference>
	<authors>
	<author>Danziger, J. N.</author>
	<author>Dutton, W. H.</author>
	</authors>
	<keywords>innovation, technological innovation, computer utilization, computer adoption, American local government,  city government computers, county government computers.</keywords>
	<version>2.0 2.45 2.49 2.9</version>
	<location>CA771207 JB December 22, 1977  12:17 PM</location>
	<citations>
	<citation>2893	5	2893</citation>
	<citation>2893	5	2893</citation>
	<citation>2893	5	2893</citation>
	</citations>
	</document>
	<document id= '2892'>
	<title>A Study of Line Overhead in the Arpanet</title>
	<abstract>The form, extent, and effect of the communication line overhead in the ARPANET are considered.   The source of this over head is separated into various levels of protocol hierarchy and the characteristics  of each level are summarized.  Then the line efficiency for various models of system use is studied.   Some measurements of line efficiency for the ARPANET are presented and by extrapolation these measurements  are used to anticipate overhead in a heavily loaded network. Similar results are derived for a recently  proposed network protocol and compared with those for the current system.</abstract>
	<conference>CACM January, 1976</conference>
	<authors>
	<author>Kleinrock, L.</author>
	<author>Naylor, W. E.</author>
	<author>Opderbeck, H.</author>
	</authors>
	<keywords>ARPANET, computer communication networks, interprocess communication, measurement, packet switching,  performance evaluation and efficiency, resource sharing</keywords>
	<version>3.81 4.39 4.6 4.9</version>
	<location>CA760101 JB January 5, 1978  10:49 AM</location>
	<citations>
	<citation>2892	5	2892</citation>
	<citation>2892	5	2892</citation>
	<citation>2892	5	2892</citation>
	</citations>
	</document>
	<document id= '2891'>
	<title>An Anomaly in Disk Scheduling: A Comparison of FCFS and SSTF Seek Scheduling Using an Empirical  Model for Disk Accesses</title>
	<abstract>A model for disk accesses based on published measurements is developed.  The model is used  to show that under highly probable conditions, FCFS seek scheduling is superior to SSTF scheduling in  the sense of having a lower mean queue length.  A simple example of an arrival sequence illustration  this anomaly is presented.</abstract>
	<conference>CACM January, 1976</conference>
	<authors>
	<author>Wilhelm, N. C.</author>
	</authors>
	<keywords>disks, disk scheduling, seek scheduling</keywords>
	<version>3.72 4.35 4.41 4.6 6.35</version>
	<location>CA760102 JB January 5, 1978  10:42 AM</location>
	<citations>
	<citation>2628	4	2891</citation>
	<citation>2891	4	2891</citation>
	<citation>2891	4	2891</citation>
	<citation>3072	4	2891</citation>
	<citation>2375	5	2891</citation>
	<citation>2628	5	2891</citation>
	<citation>2891	5	2891</citation>
	<citation>2891	5	2891</citation>
	<citation>2891	5	2891</citation>
	<citation>3153	5	2891</citation>
	<citation>2741	6	2891</citation>
	<citation>2891	6	2891</citation>
	</citations>
	</document>
	<document id= '2890'>
	<title>On Quadratic Adaptive Routing Algorithms</title>
	<abstract>Two analytic models of a store-and-forward communications network are constructed, one to find  the optimal message routing and the other to illustrate the equilibrium (stationary state) maintained  by an adaptive routing algorithm.  These models show that adaptive routing does not satisfy the necessary  conditions for an optimal routing,  Adaptive routing tends to overuse the direct path and underuse alternate  routes because it does not consider the impact of its current routing decision on the future state of  the network.  The form of the optimality conditions suggests that a modification of the adaptive algorithm  will result in optimality.  The modification requires the substitution of a quadratic bias term instead  of a linear one in the routing table maintained at each network node.  Simulation results are presented  which confirm the theoretical analysis for a simple network.</abstract>
	<conference>CACM January, 1976</conference>
	<authors>
	<author>Agnew, C. E.</author>
	</authors>
	<keywords>routing algorithms, adaptive routing, quadratic routing, alternate routing, store-and-forward network,  distributed network, computer network, message switching</keywords>
	<version>3.81 8.0 8.1 8.3</version>
	<location>CA760103 JB January 5, 1978  10:37 AM</location>
	<citations>
	<citation>2890	5	2890</citation>
	<citation>2890	5	2890</citation>
	<citation>2890	5	2890</citation>
	</citations>
	</document>
	<document id= '2889'>
	<title>Performance of Height-Balanced Trees</title>
	<abstract>This paper presents the results of simulations that investigate the performance of height-balanced  (HB[k]) trees.  It is shown that the only statistic of HB[1] trees (AVL trees) that is a function of  the size of the tree is the time to search for an item in the tree.  For sufficiently large trees, the  execution times of all procedures for maintaining HB[1] trees are independent of the size of the tree.   In particular, an average of .465 restructures are required per insertion, with an average of 2.78 nodes  revisited to restore the HB[1] property; an average of  .214 restructures are required per deletion, with  an average of 1.91 nodes revisited to restore the HB[1] property.  Moreover,the execution times of procedures  for maintaining HB[k] trees, for k>1, are also independent of the size of the tree except for the average  number of nodes revisited on a delete operation in order to restore the HB[k] property on trace back.   The cost of maintaining HB[k] trees drops sharply as the allowable imbalance (k) increases.  Both analytical  and experimental results that show the cost of maintaining HB[k] trees as a function of k are discussed.</abstract>
	<conference>CACM January, 1976</conference>
	<authors>
	<author>Karlton, P. L.</author>
	<author>Fuller, S. H.</author>
	<author>Scroggs, R. E.</author>
	<author>Kaehler, E. B.</author>
	</authors>
	<keywords>HB[k] trees, balanced trees, AVL trees, information storage and retrieval, searching</keywords>
	<version>3.7 3.72 3.74 4.49 5.39</version>
	<location>CA760104 JB January 5, 1978  10:27 AM</location>
	<citations>
	<citation>2411	4	2889</citation>
	<citation>2455	4	2889</citation>
	<citation>2493	4	2889</citation>
	<citation>2709	4	2889</citation>
	<citation>2889	4	2889</citation>
	<citation>2889	4	2889</citation>
	<citation>2889	4	2889</citation>
	<citation>2937	4	2889</citation>
	<citation>2968	4	2889</citation>
	<citation>2968	4	2889</citation>
	<citation>2989	4	2889</citation>
	<citation>3005	4	2889</citation>
	<citation>3025	4	2889</citation>
	<citation>3042	4	2889</citation>
	<citation>3101	4	2889</citation>
	<citation>2138	5	2889</citation>
	<citation>2388	5	2889</citation>
	<citation>2455	5	2889</citation>
	<citation>2839	5	2889</citation>
	<citation>2889	5	2889</citation>
	<citation>2889	5	2889</citation>
	<citation>2889	5	2889</citation>
	<citation>3042	5	2889</citation>
	<citation>3096	5	2889</citation>
	<citation>3163	5	2889</citation>
	<citation>2455	6	2889</citation>
	<citation>2839	6	2889</citation>
	<citation>2839	6	2889</citation>
	<citation>2839	6	2889</citation>
	<citation>2889	6	2889</citation>
	<citation>2889	6	2889</citation>
	<citation>2889	6	2889</citation>
	<citation>2889	6	2889</citation>
	<citation>2968	6	2889</citation>
	<citation>3009	6	2889</citation>
	<citation>3009	6	2889</citation>
	<citation>3065	6	2889</citation>
	<citation>3096	6	2889</citation>
	</citations>
	</document>
	<document id= '2888'>
	<title>Information Reference Coding</title>
	<abstract>Items in business systems have to be identified by reference codes, which can later be used  as data codes and file keys in an associated data processing system.  In business systems associated  with large collections of integrated files (database) it is vital to assign codes in a methodical way  so as to control future extension and changes while maintaining correct program action. The principles  of methodical coding are discussed, and the way in which logical connections between data items must  be reflected in the reference code framework is shown through a set-theoretic information model.</abstract>
	<conference>CACM January, 1976</conference>
	<authors>
	<author>Florentin, J. J.</author>
	</authors>
	<keywords>data, file, reference code, systems analysis, information modeling, database</keywords>
	<version>3.50</version>
	<location>CA760105 JB January 5, 1978  10:11 AM</location>
	<citations>
	<citation>1135	4	2888</citation>
	<citation>1136	4	2888</citation>
	<citation>2155	4	2888</citation>
	<citation>2406	4	2888</citation>
	<citation>493	4	2888</citation>
	<citation>2710	4	2888</citation>
	<citation>2710	4	2888</citation>
	<citation>2715	4	2888</citation>
	<citation>2716	4	2888</citation>
	<citation>2717	4	2888</citation>
	<citation>2718	4	2888</citation>
	<citation>2765	4	2888</citation>
	<citation>2765	4	2888</citation>
	<citation>2817	4	2888</citation>
	<citation>2888	4	2888</citation>
	<citation>2888	4	2888</citation>
	<citation>2901	4	2888</citation>
	<citation>2906	4	2888</citation>
	<citation>2957	4	2888</citation>
	<citation>2959	4	2888</citation>
	<citation>2965	4	2888</citation>
	<citation>3087	4	2888</citation>
	<citation>3154	4	2888</citation>
	<citation>729	4	2888</citation>
	<citation>2046	5	2888</citation>
	<citation>2888	5	2888</citation>
	<citation>2888	5	2888</citation>
	<citation>2888	5	2888</citation>
	<citation>616	5	2888</citation>
	</citations>
	</document>
	<document id= '2887'>
	<title>A Study of Errors, Error-Proneness, and Error Diagnosis in Cobol</title>
	<abstract>This paper provides data on Cobol error frequency for correction of errors in student-oriented  compilers, improvement of teaching, and changes in programming language.  Cobol was studied because of  economic importance, widespread usage, possible error-including design, and lack of research.  The types  of errors were identified in a pilot study; then, using the 132 error types found, 1,777 errors were  classified in 1,4000 runs of 73 Cobol students.  Error density was high: 20 percent of the types contained  80 percent of the total frequency, which implies high potential effectiveness for software based correction  of Cobol.  Surprisingly, only four high-frequency errors were error-prone, which implies minimal error  inducing design. 80 percent of Cobol misspellings were classifiable in the four error categories of previous  researchers, which implies that Cobol misspellings are correctable by existent algorithms.  Reserved  word usage was not error-prone, which implies minimal interference with usage of reserved words.  Over  80 percent of error diagnosis was found to be inaccurate.  Such feedback is not optimal for users, particularly  for the learning user of Cobol.</abstract>
	<conference>CACM January, 1976</conference>
	<authors>
	<author>Litecky, C. R.</author>
	<author>Davis, G. B.</author>
	</authors>
	<keywords>errors in programming, error correction, Cobol, programming language errors, error analysis, diagnostics,  error-proneness, error frequency, spelling errors, syntactic errors, learning of programming, teaching  of programming</keywords>
	<version>4.22 4.2 4.6</version>
	<location>CA760106 JB January 5, 1978  10:06 AM</location>
	<citations>
	<citation>2534	4	2887</citation>
	<citation>2556	4	2887</citation>
	<citation>2650	4	2887</citation>
	<citation>2708	4	2887</citation>
	<citation>2887	4	2887</citation>
	<citation>2887	4	2887</citation>
	<citation>1646	5	2887</citation>
	<citation>2111	5	2887</citation>
	<citation>2887	5	2887</citation>
	<citation>2887	5	2887</citation>
	<citation>2887	5	2887</citation>
	<citation>3145	5	2887</citation>
	<citation>2887	6	2887</citation>
	</citations>
	</document>
	<document id= '2886'>
	<title>Semantic Evaluation from Left to Right</title>
	<abstract>This paper describes attribute grammars and their use for the definition of programming languages  and compilers; a formal definition of attribute grammars and a discussion of some of its important aspects  are included. The paper concentrates on the evaluation of semantic attributes in a few passes from left  to right over the derivation tree of a program.  A condition for an attribute grammar is given which  assures that the semantics of any program can be evaluated in a single pass over the derivation tree,  and an algorithm is discussed which decides how many passes from left to right are in general necessary,  given the attribute grammar. These notions are explained in terms of an example grammar which describes  the scope rules of Algol 60.  Practical questions, such as the relative efficiency of different evaluation  schemes, and the ease of adapting the attribute grammar of a given programming language to the left-to-right  evaluation scheme are discussed.</abstract>
	<conference>CACM February, 1976</conference>
	<authors>
	<author>Bochmann, G. V.</author>
	</authors>
	<keywords>attribute grammars, semantics of programming languages, semantic attributes, left-to-right parsing,  multipass compilers, semantic evaluation, semantic conditions</keywords>
	<version>4.10 4.20 5.23 5.24</version>
	<location>CA760201 JB January 5, 1978  9:54 AM</location>
	<citations>
	<citation>2886	4	2886</citation>
	<citation>2301	5	2886</citation>
	<citation>2703	5	2886</citation>
	<citation>2886	5	2886</citation>
	<citation>2886	5	2886</citation>
	<citation>2886	5	2886</citation>
	<citation>2886	6	2886</citation>
	</citations>
	</document>
	<document id= '2885'>
	<title>On Self-Organizing Sequential Search Heuristics</title>
	<abstract>This paper examines a class of heuristics for maintaining a sequential list in approximately  optimal order with respect to the average time required to search for a specified element, assuming that  each element is searched for with a fixed probability independent of previous searches performed.  The  "move to front" and "transposition" heuristics are shown to be optimal to within a constant factor, and  the transposition rule is shown to be the more efficient of the two. Empirical evidence suggests that  transposition is in fact optimal for any distribution of search probabilities.</abstract>
	<conference>CACM February, 1976</conference>
	<authors>
	<author>Rivest, R.</author>
	</authors>
	<keywords>searching, self-organizing, list-processing, heuristics</keywords>
	<version>3.74 5.25</version>
	<location>CA760202 JB January 5, 1978  9:44 AM</location>
	<citations>
	<citation>2885	5	2885</citation>
	<citation>2885	5	2885</citation>
	<citation>2885	5	2885</citation>
	<citation>3061	5	2885</citation>
	<citation>2885	6	2885</citation>
	</citations>
	</document>
	<document id= '2884'>
	<title>Permutation Enumeration: Four New Permutation Algorithms</title>
	<abstract>Classical permutation enumeration algorithms encounter special cases requiring additional computation  every nth permutation when generating the n! permutations on n marks.  Four new algorithms have the attribute  that special cases occur every n(n-1)permutations.  Two of the algorithms produce the next permutation  with a single exchange of two marks.  The other two algorithms infrequently exchange more than two marks,  but the rules for generating the next permutation are very simple.  Performance tests which have counted  execution of assignment statements, comparisons, arithmetic operations, and subscripted array references  have shown superiority of the new algorithms compared to Boothroyd's implementation of M. B. Well's algorithm  and Ehrlich's implementation of the Johnson-Trotter algorithm.</abstract>
	<conference>CACM February, 1976</conference>
	<authors>
	<author>Ives, F. M.</author>
	</authors>
	<keywords>permutations, loop-free algorithms</keywords>
	<version>5.30</version>
	<location>CA760203 JB January 5, 1978  9:33 AM</location>
	<citations>
	<citation>2834	4	2884</citation>
	<citation>2884	4	2884</citation>
	<citation>3115	4	2884</citation>
	<citation>2417	5	2884</citation>
	<citation>2884	5	2884</citation>
	<citation>2884	5	2884</citation>
	<citation>2884	5	2884</citation>
	<citation>2908	5	2884</citation>
	<citation>3115	5	2884</citation>
	<citation>907	6	2884</citation>
	<citation>2045	6	2884</citation>
	<citation>2417	6	2884</citation>
	<citation>2466	6	2884</citation>
	<citation>2505	6	2884</citation>
	<citation>2884	6	2884</citation>
	<citation>2884	6	2884</citation>
	<citation>521	6	2884</citation>
	<citation>579	6	2884</citation>
	<citation>785	6	2884</citation>
	</citations>
	</document>
	<document id= '2883'>
	<title>An Application of Heuristic Search Methods to Edge and Contour Detection</title>
	<abstract>This paper presents a method for detecting edges and contours in noisy pictures.  The properties  of an edge are embedded in a figure of merit and the edge detection problem becomes the problem of minimizing  the given figure of merit.  This problem can be represented as a shortest path problem on a graph and  can be solved using well-known graph search algorithms.  The relations between this representation of  the minimization problem and a dynamic programming approach are discussed, showing that the graph search  method can lead to substantial improvements in computing time.  Moreover, if heuristic search methods  are used, the computing time will depend on the amount of noise in the picture.  Some experimental results  are given; these show how various information about the shape of the contour of an object can be embedded in the figure of merit, thus allowing the extraction of contours from noisy picture and the separation  of touching objects.</abstract>
	<conference>CACM February, 1976</conference>
	<authors>
	<author>Martelli, A.</author>
	</authors>
	<keywords>picture processing, pattern recognition, edge detection, contour detection, contour following,  optimization problems, dynamic programming, shortest path, heuristic search methods, problem solving  methods</keywords>
	<version>3.63 3.64 3.66 5.42</version>
	<location>CA760204 JB January 5, 1978  9:30 AM</location>
	<citations>
	<citation>2883	4	2883</citation>
	<citation>2195	5	2883</citation>
	<citation>2883	5	2883</citation>
	<citation>2883	5	2883</citation>
	<citation>2883	5	2883</citation>
	</citations>
	</document>
	<document id= '2882'>
	<title>A Stochastic Evaluation Model for Database Organization in Data Retrieval Systems</title>
	<abstract>Experimental work in the valuation of large scale data retrieval systems has been scarce due  to its difficulty and prohibitive cost. This paper discusses a simulation model of a data retrieval  system which has the effect of significantly reducing the cost of experimentation and enabling research  never attempted before.  The model is designed to estimate the retrieval workload of alternative data  retrieval systems.  These data retrieval systems can be organized under several database organizations,  including inverted list, threaded list, and cellular list organizations and hybrid combinations of these  systems.  Effectiveness of the methodology is demonstrated by using the model to study the effect of  database organizations in data retrieval systems.  In particular, the impact of query complexity is analyzed.</abstract>
	<conference>CACM February, 1976</conference>
	<authors>
	<author>Siler, K. F.</author>
	</authors>
	<keywords>database architecture, database performance and evaluation, invented list, threaded list, cellular  list, information retrieval, database organizations, query complexity, stochastic model, Monte Carlo  simulation</keywords>
	<version>3.70 3.71 3.72 3.73 3.74 3.79</version>
	<location>CA760205 JB January 5, 1978  9:20 AM</location>
	<citations>
	<citation>1050	4	2882</citation>
	<citation>1549	4	2882</citation>
	<citation>2452	4	2882</citation>
	<citation>2723	4	2882</citation>
	<citation>2765	4	2882</citation>
	<citation>2882	4	2882</citation>
	<citation>2882	4	2882</citation>
	<citation>2882	4	2882</citation>
	<citation>731	4	2882</citation>
	<citation>793	4	2882</citation>
	<citation>2198	5	2882</citation>
	<citation>2452	5	2882</citation>
	<citation>2882	5	2882</citation>
	<citation>2882	5	2882</citation>
	<citation>2882	5	2882</citation>
	<citation>2976	5	2882</citation>
	<citation>627	5	2882</citation>
	<citation>2688	6	2882</citation>
	<citation>2765	6	2882</citation>
	<citation>2882	6	2882</citation>
	</citations>
	</document>
	<document id= '2881'>
	<title>A Counterintuitive Example of Computer Paging</title>
	<abstract>A counterexample is exhibited to a natural conjecture concerning the optimal way to group records  into pages in the independent reference model of computer paging (an organization is said to be optimal  if the "least recently used" miss ratio is minimized).</abstract>
	<conference>CACM February, 1976</conference>
	<authors>
	<author>Fagin, R.</author>
	</authors>
	<keywords>least recently used, most likely together, independent reference model, storage organization, record  allocation</keywords>
	<version>3.70 3.73 4.0 5.30</version>
	<location>CA760206 JB January 5, 1978  8:53 AM</location>
	<citations>
	<citation>1892	4	2881</citation>
	<citation>1901	4	2881</citation>
	<citation>2085	4	2881</citation>
	<citation>2095	4	2881</citation>
	<citation>2218	4	2881</citation>
	<citation>2277	4	2881</citation>
	<citation>2319	4	2881</citation>
	<citation>2329	4	2881</citation>
	<citation>2358	4	2881</citation>
	<citation>2373	4	2881</citation>
	<citation>2380	4	2881</citation>
	<citation>2434	4	2881</citation>
	<citation>2499	4	2881</citation>
	<citation>2501	4	2881</citation>
	<citation>2582	4	2881</citation>
	<citation>2669	4	2881</citation>
	<citation>2828	4	2881</citation>
	<citation>2863	4	2881</citation>
	<citation>2881	4	2881</citation>
	<citation>2928	4	2881</citation>
	<citation>2996	4	2881</citation>
	<citation>3006	4	2881</citation>
	<citation>3067	4	2881</citation>
	<citation>1751	5	2881</citation>
	<citation>2881	5	2881</citation>
	<citation>2881	5	2881</citation>
	<citation>2881	5	2881</citation>
	</citations>
	</document>
	<document id= '2880'>
	<title>A Fast Division Technique for Constant Divisors</title>
	<abstract>A fast algorithm for division by constant divisors is presented.  The method has proved very  useful implemented as microcode ona binary machine, and can be adapted directly into hardware.  The  mathematical foundations of the algorithm are presented as well as some performance measures.</abstract>
	<conference>CACM February, 1976</conference>
	<authors>
	<author>Artzy, E.</author>
	<author>Hinds, J. A.</author>
	<author>Saal, H. J.</author>
	</authors>
	<keywords>constant divisors, division algorithms, bit addressable memory, microprogram</keywords>
	<version>4.13 4.49 6.32</version>
	<location>CA760207 JB January 5, 1978  8:48 AM</location>
	<citations>
	<citation>2880	5	2880</citation>
	<citation>2880	5	2880</citation>
	<citation>2880	5	2880</citation>
	</citations>
	</document>
	<document id= '2879'>
	<title>Computer Science as Empirical Inquiry: Symbols and Search</title>
	<conference>CACM March, 1976</conference>
	<authors>
	<author>Newell, A.</author>
	<author>Simon, H. A.</author>
	</authors>
	<keywords>symbols, search, science, computer science, empirical, Turing, artificial intelligence, intelligence,  list processing, cognition, heuristics, problem solving</keywords>
	<version>1.0 2.1 3.3 3.6 5.7</version>
	<location>CA760301 JB January 5, 1978  8:39 AM</location>
	<citations>
	<citation>1024	4	2879</citation>
	<citation>1051	4	2879</citation>
	<citation>1102	4	2879</citation>
	<citation>1132	4	2879</citation>
	<citation>1390	4	2879</citation>
	<citation>1486	4	2879</citation>
	<citation>1549	4	2879</citation>
	<citation>1706	4	2879</citation>
	<citation>1826	4	2879</citation>
	<citation>1878	4	2879</citation>
	<citation>378	4	2879</citation>
	<citation>2060	4	2879</citation>
	<citation>2155	4	2879</citation>
	<citation>2168	4	2879</citation>
	<citation>2719	4	2879</citation>
	<citation>2723	4	2879</citation>
	<citation>2838	4	2879</citation>
	<citation>2842	4	2879</citation>
	<citation>2855	4	2879</citation>
	<citation>2879	4	2879</citation>
	<citation>3077	4	2879</citation>
	<citation>3080	4	2879</citation>
	<citation>3106	4	2879</citation>
	<citation>627	4	2879</citation>
	<citation>106	4	2879</citation>
	<citation>210	5	2879</citation>
	<citation>2879	5	2879</citation>
	<citation>2879	5	2879</citation>
	<citation>2879	5	2879</citation>
	</citations>
	</document>
	<document id= '2878'>
	<title>Joining Policies in a Multipriority Multiclass Batch Computer System</title>
	<abstract>Consider a multipriority batch computer system which users from several different classes may  join, its toll, service, and waiting charges.  Such a system is formulated here as a semi-Markov decision  process, in which the aim of arriving users is to minimize their expected loss.  The optimal joining  policy is one of arriving users who may join the system at some of its queues is a control limit policy,  with a single control number for any possible queue and the user's class; a newly arriving user will  join a queue that is not filled up to the control number corresponding to this queue and the user's class.   In this paper control numbers, as well as lower and upper bounds for the control numbers and the capacities  of the system's queues, are derived.</abstract>
	<conference>CACM March, 1976</conference>
	<authors>
	<author>Babad, J. M.</author>
	<author>Modiano, M. M.</author>
	</authors>
	<keywords>priority queues, semi-Markov process, price scheduling, operating system</keywords>
	<version>4.39 8.3</version>
	<location>CA760302 DMM January 9, 1978  2:14 PM</location>
	<citations>
	<citation>2878	5	2878</citation>
	<citation>2878	5	2878</citation>
	<citation>2878	5	2878</citation>
	</citations>
	</document>
	<document id= '2877'>
	<title>A Program Data Flow Analysis Procedure</title>
	<abstract>The global data relationships in a program can be exposed and codified by the static analysis  methods described in this paper.  A procedure is given which determines all the definitions which can possibly "reach" each node of the control flow graph of the program and all the definitions that are  "live" on each edge of the graph.  The procedure uses an "interval" ordered edge listing data structure  and handles reducible and irreducible graphs indistinguishably.</abstract>
	<conference>CACM March, 1976</conference>
	<authors>
	<author>Allen, J. E.</author>
	<author>Cocke, J.</author>
	</authors>
	<keywords>program optimization, data flow analysis, flow graphs, algorithms, compilers</keywords>
	<version>4.12 5.24</version>
	<location>CA760303 JB January 5, 1978  8:33 AM</location>
	<citations>
	<citation>2877	5	2877</citation>
	<citation>2877	5	2877</citation>
	<citation>2877	5	2877</citation>
	<citation>3103	5	2877</citation>
	<citation>1860	6	2877</citation>
	<citation>2877	6	2877</citation>
	</citations>
	</document>
	<document id= '2876'>
	<title>Intentional Resolution of Privacy Protection in Database Systems</title>
	<abstract>Traditionally, privacy protection in database systems is understood to be the control over  what information a given user can get from a database.  This paper is concerned with another, independent,  dimension of privacy protection, the control over what a user is allowed to do with a piece of information  supplied to him by the database.  The ability to condition the supply of information on its intended  use is called here "intentional resolution" of privacy protection.  The practical importance of intentional  resolution is demonstrated by several examples, and its realization is discussed.  It is shown that intentional  resolution can be achieved, but that it involves a radical change from the traditional approach to the  process of user-database interaction.  In particular, it appears to be necessary for the database to  impose a certain amount of control over the internal behavior of users' programs which interact with  it.  A model for user-database interaction which admits such a control is developed.</abstract>
	<conference>CACM March, 1976</conference>
	<authors>
	<author>Minsky, N.</author>
	</authors>
	<keywords>protection in database, protection in programming languages, privacy, security, intentional resolution  of privacy, interaction with databases</keywords>
	<version>3.50 3.70 4.20 4.30</version>
	<location>CA760304 JB January 4, 1978  4:44 PM</location>
	<citations>
	<citation>2785	4	2876</citation>
	<citation>2868	4	2876</citation>
	<citation>2870	4	2876</citation>
	<citation>2876	4	2876</citation>
	<citation>2876	4	2876</citation>
	<citation>3105	4	2876</citation>
	<citation>3144	4	2876</citation>
	<citation>2632	5	2876</citation>
	<citation>2685	5	2876</citation>
	<citation>2876	5	2876</citation>
	<citation>2876	5	2876</citation>
	<citation>2876	5	2876</citation>
	</citations>
	</document>
	<document id= '2875'>
	<title>Development of an International System for Legal Protection of Computer Programs</title>
	<conference>CACM April, 1976</conference>
	<authors>
	<author>Smoot, O. R.</author>
	</authors>
	<keywords>copyright of software, patenting of software, legal protection of software</keywords>
	<version>2.3 4.5</version>
	<location>CA760401 JB January 4, 1978  4:42 PM</location>
	<citations>
	<citation>2875	5	2875</citation>
	<citation>2875	5	2875</citation>
	<citation>2875	5	2875</citation>
	</citations>
	</document>
	<document id= '2874'>
	<title>A Comparative Evaluation of Versions of BASIC</title>
	<abstract>From its inception, The BASIC language has grown in terms of its usage, scope of usage, and  its features.  This article compares ten of the current versions of BASIC with each other, with two earlier  versions, and with the proposed standard for minimal BASIC. The comparison is arranged by the features  of the versions and by computational comparison of computation and times and processing costs.</abstract>
	<conference>CACM April, 1976</conference>
	<authors>
	<author>Lientz, B. P.</author>
	</authors>
	<keywords>BASIC, interpretive language summary</keywords>
	<version>4.20 4.6</version>
	<location>CA760402 JB January 4, 1978  4:34 PM</location>
	<citations>
	<citation>2044	4	2874</citation>
	<citation>2189	4	2874</citation>
	<citation>2356	4	2874</citation>
	<citation>2417	4	2874</citation>
	<citation>2420	4	2874</citation>
	<citation>2505	4	2874</citation>
	<citation>2874	4	2874</citation>
	<citation>2874	4	2874</citation>
	<citation>2874	4	2874</citation>
	<citation>2874	4	2874</citation>
	<citation>2874	4	2874</citation>
	<citation>2874	4	2874</citation>
	<citation>2908	4	2874</citation>
	<citation>3104	4	2874</citation>
	<citation>3143	4	2874</citation>
	<citation>1682	5	2874</citation>
	<citation>2227	5	2874</citation>
	<citation>2317	5	2874</citation>
	<citation>2683	5	2874</citation>
	<citation>2871	5	2874</citation>
	<citation>2874	5	2874</citation>
	<citation>2874	5	2874</citation>
	<citation>2874	5	2874</citation>
	<citation>521	5	2874</citation>
	</citations>
	</document>
	<document id= '2873'>
	<title>LG: A Language for Analytic Geometry</title>
	<abstract>A conversational programming language for analytic geometry is described, together with some  aspects of its implementation.  The language allows the flexible definition of geometric objects and  elements, computes their parameters, and displays the results. It also provides the capability of specifying  a geometric figure via a collection of parameters and displaying various loci corresponding to these  parameters. A third characteristic consists of the possibility of using this language to design other  user oriented languages.  LG has been specifically designed for use by nonprogrammers; it is easy to  learn and very close to the natural language used in geometry.</abstract>
	<conference>CACM April, 1976</conference>
	<authors>
	<author>Raymond, J.</author>
	</authors>
	<keywords>interactive programming, problem oriented languages, computer graphics, interpreters, analytic  geometry</keywords>
	<version>3.20 4.13 4.22 4.9</version>
	<location>CA760403 JB January 4, 1978  4:26 PM</location>
	<citations>
	<citation>2873	5	2873</citation>
	<citation>2873	5	2873</citation>
	<citation>2873	5	2873</citation>
	</citations>
	</document>
	<document id= '2872'>
	<citations>
	<citation>2872	5	2872</citation>
	<citation>2872	5	2872</citation>
	<citation>2872	5	2872</citation>
	</citations>
	<title>A Counterintuitive Example of Computer Paging (Corrigendum)</title>
	<conference>CACM April, 1976</conference>
	<authors>
	<author>Fagin, R.</author>
	</authors>
	<location>CA760404 JB January 4, 1978  4:19 PM</location>
	</document>
	<document id= '2871'>
	<title>Logical Analysis of Programs</title>
	<abstract>Most present systems for verification of computer programs are incomplete in that intermediate  inductive assertions must be provided manually by the user, termination is not proven, and incorrect  programs are not treated.  As a unified solution to these problems, this paper suggests conducting a  logical analysis of programs by using invariants which express what is actually occurring in the program.   The first part of the paper is devoted to techniques for the automatic generation of invariants.  The  second part provides criteria for using the invariants to check simultaneously for correctness (including  termination) or incorrectness.  A third part examines the implications of the approach for the automatic  diagnosis and correction of logical errors.</abstract>
	<conference>CACM April, 1976</conference>
	<authors>
	<author>Katz, S.</author>
	<author>Manna, Z.</author>
	</authors>
	<keywords>logical analysis, invariants, program verification, correctness, incorrectness, termination, automatic  debugging</keywords>
	<version>3.66 4.42 5.24</version>
	<location>CA760405 JB January 4, 1978  4:15 PM</location>
	<citations>
	<citation>2871	5	2871</citation>
	<citation>2871	5	2871</citation>
	<citation>2871	5	2871</citation>
	<citation>2874	5	2871</citation>
	<citation>1682	6	2871</citation>
	<citation>2227	6	2871</citation>
	<citation>2317	6	2871</citation>
	<citation>2683	6	2871</citation>
	<citation>2871	6	2871</citation>
	<citation>521	6	2871</citation>
	</citations>
	</document>
	<document id= '2870'>
	<title>A Lattice Model of Secure Information Flow</title>
	<abstract>This paper investigates mechanisms that guarantee secure information flow in a computer system.  These mechanisms are examined within a mathematical framework suitable for formulating the requirements  of secure information flow among security classes. The central component of the model is a lattice structure  derived from the security classes and justified by the semantics of information flow.  The lattice properties  permit concise formulations of the security requirements of different existing systems and facilitate  the construction of mechanisms that enforce security.  The model provides a unifying view of all systems  that restrict information flow, enables a classification of them according to security objectives, and  suggests some new approaches.  It also leads to the construction of automatic program certification mechanisms  for verifying the secure flow of information through a program.</abstract>
	<conference>CACM May, 1976</conference>
	<authors>
	<author>Denning, D. E.</author>
	</authors>
	<keywords>protection, security, information flow, security class, lattice, program certification</keywords>
	<version>4.35</version>
	<location>CA760501 JB January 4, 1978  4:10 PM</location>
	<citations>
	<citation>2436	4	2870</citation>
	<citation>2626	4	2870</citation>
	<citation>2868	4	2870</citation>
	<citation>2868	4	2870</citation>
	<citation>2870	4	2870</citation>
	<citation>2870	4	2870</citation>
	<citation>2870	4	2870</citation>
	<citation>2876	4	2870</citation>
	<citation>3105	4	2870</citation>
	<citation>3144	4	2870</citation>
	<citation>953	5	2870</citation>
	<citation>2377	5	2870</citation>
	<citation>2632	5	2870</citation>
	<citation>2870	5	2870</citation>
	<citation>2870	5	2870</citation>
	<citation>2870	5	2870</citation>
	<citation>2945	5	2870</citation>
	<citation>3128	5	2870</citation>
	<citation>1947	6	2870</citation>
	<citation>2150	6	2870</citation>
	<citation>2376	6	2870</citation>
	<citation>2436	6	2870</citation>
	<citation>2597	6	2870</citation>
	<citation>2704	6	2870</citation>
	<citation>2865	6	2870</citation>
	<citation>2866	6	2870</citation>
	<citation>2870	6	2870</citation>
	<citation>2870	6	2870</citation>
	<citation>2912	6	2870</citation>
	<citation>3082	6	2870</citation>
	</citations>
	</document>
	<document id= '2869'>
	<title>Security Kernel Validation in Practice</title>
	<abstract>A security kernel is a software and hardware mechanism that enforces access controls within  a computer system. The correctness of a security kernel on a PDP-11/45 is being proved.  This paper describes  the technique used to carry out the first step of the proof: validating a formal specification of the  program with respect to a axioms for a secure system.</abstract>
	<conference>CACM May, 1976</conference>
	<authors>
	<author>Millen, J. K.</author>
	</authors>
	<keywords>validation, verification, correctness, security kernel, formal specification, protection</keywords>
	<version>4.35 4.6 5.24</version>
	<location>CA760502 JB January 4,1978  4:01 PM</location>
	<citations>
	<citation>2704	4	2869</citation>
	<citation>2738	4	2869</citation>
	<citation>2840	4	2869</citation>
	<citation>2866	4	2869</citation>
	<citation>2869	4	2869</citation>
	<citation>2869	4	2869</citation>
	<citation>2941	4	2869</citation>
	<citation>2958	4	2869</citation>
	<citation>3004	4	2869</citation>
	<citation>3030	4	2869</citation>
	<citation>3128	4	2869</citation>
	<citation>3158	4	2869</citation>
	<citation>2356	5	2869</citation>
	<citation>2436	5	2869</citation>
	<citation>2869	5	2869</citation>
	<citation>2869	5	2869</citation>
	<citation>2869	5	2869</citation>
	<citation>3068	5	2869</citation>
	<citation>1834	6	2869</citation>
	<citation>2869	6	2869</citation>
	</citations>
	</document>
	<document id= '2868'>
	<title>Reflections on an Operating System Design</title>
	<abstract>The main features of a general purpose multiaccess operating system developed for the CDC 6400  at Berkeley are presented, and its good and bad points are discussed as they appear in retrospect.  Distinctive  features of the design were the use of capabilities for protection, and the organization of the system  into a sequence of layers, each building on the facilities provided by earlier ones and protecting itself  from the malfunctions of later ones. There were serious problems in maintaining the protection between  layers when levels were added to the memory hierarchy; these problems are discussed and a new solution  is described.</abstract>
	<conference>CACM May, 1976</conference>
	<authors>
	<author>Lampson, B. W.</author>
	<author>Sturgis, H. E.</author>
	</authors>
	<keywords>operating system, protection, capabilities, layering domains, memory hierarchy, faults</keywords>
	<version>4.35</version>
	<location>CA760503 JB January 4, 1978  3:57 PM</location>
	<citations>
	<citation>2319	4	2868</citation>
	<citation>2378	4	2868</citation>
	<citation>2320	4	2868</citation>
	<citation>2436	4	2868</citation>
	<citation>2626	4	2868</citation>
	<citation>2626	4	2868</citation>
	<citation>2629	4	2868</citation>
	<citation>2632	4	2868</citation>
	<citation>2738	4	2868</citation>
	<citation>2740	4	2868</citation>
	<citation>2868	4	2868</citation>
	<citation>2868	4	2868</citation>
	<citation>2868	4	2868</citation>
	<citation>2868	4	2868</citation>
	<citation>2868	4	2868</citation>
	<citation>2868	4	2868</citation>
	<citation>2870	4	2868</citation>
	<citation>2870	4	2868</citation>
	<citation>2876	4	2868</citation>
	<citation>2928	4	2868</citation>
	<citation>2939	4	2868</citation>
	<citation>2941	4	2868</citation>
	<citation>2951	4	2868</citation>
	<citation>3105	4	2868</citation>
	<citation>3105	4	2868</citation>
	<citation>3127	4	2868</citation>
	<citation>3144	4	2868</citation>
	<citation>3144	4	2868</citation>
	<citation>2080	5	2868</citation>
	<citation>2377	5	2868</citation>
	<citation>2380	5	2868</citation>
	<citation>2558	5	2868</citation>
	<citation>2625	5	2868</citation>
	<citation>2632	5	2868</citation>
	<citation>2868	5	2868</citation>
	<citation>2868	5	2868</citation>
	<citation>2868	5	2868</citation>
	<citation>3105	5	2868</citation>
	<citation>1471	6	2868</citation>
	<citation>2625	6	2868</citation>
	<citation>2632	6	2868</citation>
	<citation>2868	6	2868</citation>
	<citation>2939	6	2868</citation>
	<citation>3068	6	2868</citation>
	</citations>
	</document>
	<document id= '2867'>
	<title>Modularization and Hierarchy in a Family of Operating Systems</title>
	<abstract>This paper describes the design philosophy used in the construction of a family of operating  systems. It is shown that the concepts of module and level do not coincide in a hierarchy of functions.   Family members can share much software as a result of the implementation of run-time modules at the  lowest system level.</abstract>
	<conference>CACM May, 1976</conference>
	<authors>
	<author>Flon, L.</author>
	<author>Cooprider, L.</author>
	</authors>
	<keywords>incremental machine design, module, data type, address space, virtual memory</keywords>
	<version>4.0 4.30 4.35</version>
	<location>CA760504 JB January 4, 1978  3:33 PM</location>
	<citations>
	<citation>1828	4	2867</citation>
	<citation>1854	4	2867</citation>
	<citation>1877	4	2867</citation>
	<citation>1960	4	2867</citation>
	<citation>2150	4	2867</citation>
	<citation>2317	4	2867</citation>
	<citation>2319	4	2867</citation>
	<citation>2377	4	2867</citation>
	<citation>2342	4	2867</citation>
	<citation>2376	4	2867</citation>
	<citation>2379	4	2867</citation>
	<citation>2424	4	2867</citation>
	<citation>2482	4	2867</citation>
	<citation>2480	4	2867</citation>
	<citation>2618	4	2867</citation>
	<citation>2632	4	2867</citation>
	<citation>2704	4	2867</citation>
	<citation>2704	4	2867</citation>
	<citation>2723	4	2867</citation>
	<citation>2738	4	2867</citation>
	<citation>2738	4	2867</citation>
	<citation>2740	4	2867</citation>
	<citation>2741	4	2867</citation>
	<citation>2867	4	2867</citation>
	<citation>2867	4	2867</citation>
	<citation>2867	4	2867</citation>
	<citation>3004	4	2867</citation>
	<citation>3030	4	2867</citation>
	<citation>3155	4	2867</citation>
	<citation>3184	4	2867</citation>
	<citation>1749	5	2867</citation>
	<citation>2247	5	2867</citation>
	<citation>2379	5	2867</citation>
	<citation>2867	5	2867</citation>
	<citation>2867	5	2867</citation>
	<citation>2867	5	2867</citation>
	</citations>
	</document>
	<document id= '2866'>
	<title>Proving Monitors</title>
	<abstract>Interesting scheduling and sequential properties of monitors can be proved by using state variables  which record the monitor's history and by defining extended proof rules for their wait and signal operations.   These two techniques are defined, discussed, and applied to examples to prove properties such as freedom  from indefinitely repeated overtaking or unnecessary waiting upper bounds on queue lengths, and historical  behavior.</abstract>
	<conference>CACM May, 1976</conference>
	<authors>
	<author>Howard, J.H.</author>
	</authors>
	<keywords>monitors, correctness, proof rules, historical variables, concurrency, scheduling, bounded buffer,  semaphores, alarm clock, disk head</keywords>
	<version>4.32 4.35 5.24</version>
	<location>CA760505 JB January 4, 1978  3:28 PM</location>
	<citations>
	<citation>2704	4	2866</citation>
	<citation>2738	4	2866</citation>
	<citation>2865	4	2866</citation>
	<citation>2866	4	2866</citation>
	<citation>2866	4	2866</citation>
	<citation>2866	4	2866</citation>
	<citation>2869	4	2866</citation>
	<citation>2898	4	2866</citation>
	<citation>2941	4	2866</citation>
	<citation>2958	4	2866</citation>
	<citation>2972	4	2866</citation>
	<citation>3004	4	2866</citation>
	<citation>3030	4	2866</citation>
	<citation>3043	4	2866</citation>
	<citation>3128	4	2866</citation>
	<citation>3144	4	2866</citation>
	<citation>2356	5	2866</citation>
	<citation>2597	5	2866</citation>
	<citation>2796	5	2866</citation>
	<citation>2866	5	2866</citation>
	<citation>2866	5	2866</citation>
	<citation>2866	5	2866</citation>
	<citation>2938	5	2866</citation>
	<citation>2946	5	2866</citation>
	<citation>3128	5	2866</citation>
	<citation>2150	6	2866</citation>
	<citation>2150	6	2866</citation>
	<citation>2376	6	2866</citation>
	<citation>2436	6	2866</citation>
	<citation>2597	6	2866</citation>
	<citation>2865	6	2866</citation>
	<citation>2866	6	2866</citation>
	<citation>2866	6	2866</citation>
	<citation>2866	6	2866</citation>
	<citation>2870	6	2866</citation>
	<citation>2912	6	2866</citation>
	<citation>3082	6	2866</citation>
	</citations>
	</document>
	<document id= '2865'>
	<title>Verifying Properties of Parallel Programs: An Axiomatic Approach</title>
	<abstract>An axiomatic method for proving a number of properties of parallel programs is presented.   Hoare has given a set of axioms for partial correctness, but they are not strong enough in most cases.   This paper defines a more powerful deductive system which is in some sense complete for partial correctness.   A crucial axiom provides for the use of auxiliary variables, which are added to a parallel program as  an aid to proving it correct.  The information in a partial correctness proof can be used to prove such  properties as mutual exclusion, freedom from deadlock, and program termination.  Techniques for verifying  these properties are presented and illustrated by application to the dining philosophers problem.</abstract>
	<conference>CACM May, 1976</conference>
	<authors>
	<author>Owicki, S.</author>
	<author>Gries, D.</author>
	</authors>
	<keywords>structured multiprogramming correctness proofs, program verification, concurrent processes, synchronization,  mutual exclusion, deadlock</keywords>
	<version>4.32 4.35 5.21 5.24</version>
	<location>CA760506 JB January 4, 1978  3:23 PM</location>
	<citations>
	<citation>2021	4	2865</citation>
	<citation>2222	4	2865</citation>
	<citation>2227	4	2865</citation>
	<citation>2315	4	2865</citation>
	<citation>2326	4	2865</citation>
	<citation>2470	4	2865</citation>
	<citation>2732	4	2865</citation>
	<citation>2865	4	2865</citation>
	<citation>2865	4	2865</citation>
	<citation>2866	4	2865</citation>
	<citation>2896	4	2865</citation>
	<citation>2898	4	2865</citation>
	<citation>2943	4	2865</citation>
	<citation>2972	4	2865</citation>
	<citation>3014	4	2865</citation>
	<citation>3043	4	2865</citation>
	<citation>3068	4	2865</citation>
	<citation>3077	4	2865</citation>
	<citation>3128	4	2865</citation>
	<citation>3143	4	2865</citation>
	<citation>3144	4	2865</citation>
	<citation>1834	5	2865</citation>
	<citation>2597	5	2865</citation>
	<citation>2865	5	2865</citation>
	<citation>2865	5	2865</citation>
	<citation>2865	5	2865</citation>
	<citation>3128	5	2865</citation>
	<citation>3148	5	2865</citation>
	<citation>1860	6	2865</citation>
	<citation>2150	6	2865</citation>
	<citation>2376	6	2865</citation>
	<citation>2436	6	2865</citation>
	<citation>2597	6	2865</citation>
	<citation>2817	6	2865</citation>
	<citation>2865	6	2865</citation>
	<citation>2865	6	2865</citation>
	<citation>2866	6	2865</citation>
	<citation>2870	6	2865</citation>
	<citation>2912	6	2865</citation>
	<citation>2939	6	2865</citation>
	<citation>3073	6	2865</citation>
	<citation>3082	6	2865</citation>
	</citations>
	</document>
	<document id= '2864'>
	<title>Characteristics of Program Localities</title>
	<abstract>The term "locality" has been used to denote that subset of a program's segments which are referenced  during a particular phase of its execution.  A program's behavior can be characterized in terms of its  residence in localities of various sizes and lifetimes, and the transitions between these localities.   In this paper the concept of a locality is made more explicit through a formal definition of what constitutes  a phase of localized reference behavior, and by a corresponding mechanism for the detection of localities  in actual reference strings.  This definition provides for the existence of a hierarchy of localities  at any given time, and the reasonableness of the definition is supported by examples taken from actual  programs.  Empirical data from a sample of production Algol 60 programs is used to display distributions  of locality sizes and lifetimes, and these results are discussed in terms of their implications for the  modeling of program behavior and memory management in virtual memory systems.</abstract>
	<conference>CACM May, 1976</conference>
	<authors>
	<author>Madison, A. W.</author>
	<author>Batson, A. P.</author>
	</authors>
	<keywords>program behavior, memory management, locality</keywords>
	<version>4.22 4.35 4.6 4.9 6.21</version>
	<location>CA760507 JB January 4, 1978  3:15 PM</location>
	<citations>
	<citation>2864	5	2864</citation>
	<citation>2864	5	2864</citation>
	<citation>2864	5	2864</citation>
	<citation>3000	5	2864</citation>
	<citation>3067	5	2864</citation>
	<citation>1751	6	2864</citation>
	<citation>1879	6	2864</citation>
	<citation>2095	6	2864</citation>
	<citation>2374	6	2864</citation>
	<citation>2373	6	2864</citation>
	<citation>2595	6	2864</citation>
	<citation>2682	6	2864</citation>
	<citation>2863	6	2864</citation>
	<citation>2864	6	2864</citation>
	<citation>2864	6	2864</citation>
	<citation>3006	6	2864</citation>
	</citations>
	</document>
	<document id= '2863'>
	<title>VMIN-An Optimal Variable-Space Page Replacement Algorithm</title>
	<abstract>A criterion for comparing variable space page replacement algorithms is presented.  An optimum  page replacement algorithm, called VMIN, is described and shown to be optimum with respect to this criterion.  The results of simulating VMIN, Denning's working set, and the page partitioning replacement algorithms  on five virtual memory programs are presented to demonstrate the improvement possible over the known  realizable variable space algorithms.</abstract>
	<conference>CACM May, 1976</conference>
	<authors>
	<author>Prieve, B. G.</author>
	<author>Fabry, R. S.</author>
	</authors>
	<keywords>demand paging, performance measurement, multilevel memory systems, virtual memory, working set,  page replacement algorithms, optimal page replacement</keywords>
	<version>4.30 4.32</version>
	<location>CA760508 JB January 4, 1978  3:06 PM</location>
	<citations>
	<citation>1892	4	2863</citation>
	<citation>1892	4	2863</citation>
	<citation>1901	4	2863</citation>
	<citation>1924	4	2863</citation>
	<citation>2085	4	2863</citation>
	<citation>2095	4	2863</citation>
	<citation>2095	4	2863</citation>
	<citation>2218	4	2863</citation>
	<citation>2218	4	2863</citation>
	<citation>2277	4	2863</citation>
	<citation>2297	4	2863</citation>
	<citation>2319	4	2863</citation>
	<citation>2329	4	2863</citation>
	<citation>2358	4	2863</citation>
	<citation>2373	4	2863</citation>
	<citation>2374	4	2863</citation>
	<citation>2374	4	2863</citation>
	<citation>2380	4	2863</citation>
	<citation>2434	4	2863</citation>
	<citation>2499	4	2863</citation>
	<citation>2481	4	2863</citation>
	<citation>2501	4	2863</citation>
	<citation>2526	4	2863</citation>
	<citation>2582	4	2863</citation>
	<citation>2667	4	2863</citation>
	<citation>2668	4	2863</citation>
	<citation>2669	4	2863</citation>
	<citation>2669	4	2863</citation>
	<citation>2828	4	2863</citation>
	<citation>2862	4	2863</citation>
	<citation>2863	4	2863</citation>
	<citation>2863	4	2863</citation>
	<citation>2863	4	2863</citation>
	<citation>2863	4	2863</citation>
	<citation>2881	4	2863</citation>
	<citation>2928	4	2863</citation>
	<citation>2996	4	2863</citation>
	<citation>3006	4	2863</citation>
	<citation>3016	4	2863</citation>
	<citation>3052	4	2863</citation>
	<citation>3067	4	2863</citation>
	<citation>3067	4	2863</citation>
	<citation>1728	5	2863</citation>
	<citation>1751	5	2863</citation>
	<citation>1901	5	2863</citation>
	<citation>2863	5	2863</citation>
	<citation>2863	5	2863</citation>
	<citation>2863	5	2863</citation>
	<citation>2863	5	2863</citation>
	<citation>3067	5	2863</citation>
	<citation>1728	6	2863</citation>
	<citation>1751	6	2863</citation>
	<citation>1751	6	2863</citation>
	<citation>1901	6	2863</citation>
	<citation>2374	6	2863</citation>
	<citation>2373	6	2863</citation>
	<citation>2595	6	2863</citation>
	<citation>2682	6	2863</citation>
	<citation>2863	6	2863</citation>
	<citation>2863	6	2863</citation>
	<citation>2864	6	2863</citation>
	<citation>3006	6	2863</citation>
	</citations>
	</document>
	<document id= '2862'>
	<title>Analysis of the PFF Replacement Algorithm via a Semi-Markov Model</title>
	<abstract>An analytical model is presented to estimate the performance of the Page Fault Frequency (PFF)  replacement algorithm.  In this model, program behavior is represented by the LRU stack distance model  and the PFF replacement algorithm is represented by a semi-Markov model.  Using these models, such parameters  as the inter-page-fault interval distribution, the probability of the number of distinct pages being  referenced during an inter-page-fault interval, etc. are able to be analytically determined.  Using these  models to evaluate these parameter values permits study of the performance of the replacement algorithm  by simulating the page fault events rather than every page reference event.  This significantly reduces  the required computation time in estimating the performance of the PFF algorithm.</abstract>
	<conference>CACM May, 1976</conference>
	<authors>
	<author>Chu, W. W.</author>
	<author>Opderbeck, H.</author>
	</authors>
	<keywords>PFF replacement algorithm, semi-Markov model, simulation of replacement algorithm</keywords>
	<version>4.31 4.32</version>
	<location>CA760509 JB January 4, 1978  2:59 PM</location>
	<citations>
	<citation>1892	4	2862</citation>
	<citation>1924	4	2862</citation>
	<citation>2095	4	2862</citation>
	<citation>2218	4	2862</citation>
	<citation>2297	4	2862</citation>
	<citation>2374	4	2862</citation>
	<citation>2526	4	2862</citation>
	<citation>2667	4	2862</citation>
	<citation>2668	4	2862</citation>
	<citation>2862	4	2862</citation>
	<citation>2863	4	2862</citation>
	<citation>1728	5	2862</citation>
	<citation>2862	5	2862</citation>
	<citation>2862	5	2862</citation>
	<citation>2862	5	2862</citation>
	</citations>
	</document>
	<document id= '2861'>
	<citations>
	<citation>2861	5	2861</citation>
	<citation>2861	5	2861</citation>
	<citation>2861	5	2861</citation>
	<citation>2962	5	2861</citation>
	<citation>3123	5	2861</citation>
	<citation>3122	5	2861</citation>
	<citation>2823	6	2861</citation>
	<citation>2861	6	2861</citation>
	<citation>2861	6	2861</citation>
	<citation>2861	6	2861</citation>
	<citation>2962	6	2861</citation>
	<citation>2962	6	2861</citation>
	<citation>3022	6	2861</citation>
	</citations>
	<title>Production and Employment of Ph.D.'s in Computer Science</title>
	<conference>CACM June, 1976</conference>
	<authors>
	<author>Taulbee, O. E.</author>
	<author>Conte, S. D.</author>
	</authors>
	<location>CA760601 JB January 4, 1978  2:51 PM</location>
	</document>
	<document id= '2860'>
	<title>A Practitioner's Guide To Addressing Algorithms</title>
	<abstract>This paper consolidates a number of popular rules of thumb which have been suggested for the design of record addressing algorithms, and discusses the applicability of these rules to large commercial  databases.  Guidelines for selecting identifier transformations, overflow techniques, loading factors,  bucket sizes, and loading order and considered.  Particular attention is focused on the reasonableness  of common heuristics for determining primary or secondary bucket sizes. A mathematical model which explicitly  considers storage device characteristics and time/space cost tradeoffs is used to analyze the effect  of design parameters on overall system costs.  A specific design example is presented and solved.</abstract>
	<conference>CACM June, 1976</conference>
	<authors>
	<author>Severance, D.</author>
	<author>Duhne, R.</author>
	</authors>
	<keywords>data management, file retrieval, searching, addressing techniques, hashing functions, synonym resolution,  loading factor, bucket size, heuristic design, rules of thumb</keywords>
	<version>3.50 3.72 3.74 4.33 4.34 4.41 8.1</version>
	<location>CA760602 JB January 4, 1978  2:47 PM</location>
	<citations>
	<citation>1785	4	2860</citation>
	<citation>2203	4	2860</citation>
	<citation>2258	4	2860</citation>
	<citation>2282	4	2860</citation>
	<citation>2319	4	2860</citation>
	<citation>2313	4	2860</citation>
	<citation>2359	4	2860</citation>
	<citation>2437	4	2860</citation>
	<citation>2552	4	2860</citation>
	<citation>2781	4	2860</citation>
	<citation>2860	4	2860</citation>
	<citation>2860	4	2860</citation>
	<citation>2860	4	2860</citation>
	<citation>2991	4	2860</citation>
	<citation>3083	4	2860</citation>
	<citation>911	4	2860</citation>
	<citation>1328	5	2860</citation>
	<citation>2203	5	2860</citation>
	<citation>2860	5	2860</citation>
	<citation>2860	5	2860</citation>
	<citation>2860	5	2860</citation>
	<citation>492	5	2860</citation>
	</citations>
	</document>
	<document id= '2859'>
	<title>Interference in Multiprocessor Computer Systems with Interleaved Memory</title>
	<abstract>This paper analyzes the memory interference caused by several processors simultaneously using  several memory modules.  Exect results are computed for a simple model of such a system.   The limiting  value is derived for the relative degree of memory interference as the system size increases.  The model  of the limiting behavior of the system yields approximate results for the simple model and also suggests  that the results are valid for a much larger class of models, including those more nearly like real systems  that the simple model are tested against some measurements of program behavior and simulations of systems  using memory references from real programs.  The model results provide a good indication of the performance  that should be expected from real system of this type.</abstract>
	<conference>CACM June, 1976</conference>
	<authors>
	<author>Baskett, F.</author>
	<author>Smith, A. J.</author>
	</authors>
	<keywords>memory, memory interference, multiprocessing, interleaved memory, trace driven simulation</keywords>
	<version>4.32 6.21 6.34 8.1</version>
	<location>CA760603 JB January 4, 1978  2:19 PM</location>
	<citations>
	<citation>1668	4	2859</citation>
	<citation>1669	4	2859</citation>
	<citation>1679	4	2859</citation>
	<citation>1728	4	2859</citation>
	<citation>2859	4	2859</citation>
	<citation>2859	4	2859</citation>
	<citation>1525	5	2859</citation>
	<citation>1676	5	2859</citation>
	<citation>2859	5	2859</citation>
	<citation>2859	5	2859</citation>
	<citation>2859	5	2859</citation>
	<citation>2918	5	2859</citation>
	<citation>3119	5	2859</citation>
	<citation>2245	6	2859</citation>
	<citation>2798	6	2859</citation>
	<citation>2849	6	2859</citation>
	<citation>2859	6	2859</citation>
	<citation>2859	6	2859</citation>
	</citations>
	</document>
	<document id= '2858'>
	<title>A Process for the Determination of Addresses in Variable Length Addressing</title>
	<abstract>An algorithm is presented for the assignment of instruction addresses and formats under the  following conditions: (1) the length of the instruction varies as a function of the distance of the instruction  from its target; (2) there exists an optimality criterion which implies some preferential choices subject  to the addressing constraints.  This may be, for example, achieving the smallest number of long instructions,  in which case the total code length is minimized, or minimizing the assigned address of a specified point  in the program.  The algorithm is suitable for arbitrary program structure and a choice of optimization  criteria.</abstract>
	<conference>CACM June, 1976</conference>
	<authors>
	<author>Frieder, G.</author>
	<author>Saal, H. J.</author>
	</authors>
	<keywords>variable length addressing, assembler, paging</keywords>
	<version>4.11 4.12</version>
	<location>CA760604 JB January 4, 1978  2:09 PM</location>
	<citations>
	<citation>2858	4	2858</citation>
	<citation>3110	4	2858</citation>
	<citation>2194	5	2858</citation>
	<citation>2858	5	2858</citation>
	<citation>2858	5	2858</citation>
	<citation>2858	5	2858</citation>
	<citation>3110	5	2858</citation>
	<citation>2194	6	2858</citation>
	<citation>2629	6	2858</citation>
	<citation>2858	6	2858</citation>
	</citations>
	</document>
	<document id= '2857'>
	<title>Referencing Lists by an Edge</title>
	<abstract>An edge reference into a list structure is a pair of pointers to adjacent nodes.  Such a reference  often requires little additional space, but its use can yield efficient algorithms. For instance, a circular  link between the ends of a list is redundant if the list is always referenced by that edge, and list traversal  is easier when that link is null.  Edge references also allow threading of nonrecursive lists, can replace  some header cells, and enhance the famous exclusive-or-trick to double-link lists</abstract>
	<conference>CACM June, 1976</conference>
	<authors>
	<author>Wise, D. S.</author>
	</authors>
	<keywords>list processing, circular, doubly linked, overlapping sublist, header cell, pointer, cursor</keywords>
	<version>3.73 4.10 4.22</version>
	<location>CA760605 JB January 4, 1978  2:00 PM</location>
	<citations>
	<citation>1024	4	2857</citation>
	<citation>1051	4	2857</citation>
	<citation>1098	4	2857</citation>
	<citation>1214	4	2857</citation>
	<citation>1380	4	2857</citation>
	<citation>1388	4	2857</citation>
	<citation>1393	4	2857</citation>
	<citation>1396	4	2857</citation>
	<citation>1485	4	2857</citation>
	<citation>1487	4	2857</citation>
	<citation>1549	4	2857</citation>
	<citation>1570	4	2857</citation>
	<citation>1878	4	2857</citation>
	<citation>1946	4	2857</citation>
	<citation>1946	4	2857</citation>
	<citation>1957	4	2857</citation>
	<citation>2167	4	2857</citation>
	<citation>2168	4	2857</citation>
	<citation>2723	4	2857</citation>
	<citation>2857	4	2857</citation>
	<citation>2857	4	2857</citation>
	<citation>3112	4	2857</citation>
	<citation>1393	5	2857</citation>
	<citation>2857	5	2857</citation>
	<citation>2857	5	2857</citation>
	<citation>2857	5	2857</citation>
	<citation>731	5	2857</citation>
	</citations>
	</document>
	<document id= '2856'>
	<title>The Synthetic Approach to Decision Table Conversion</title>
	<abstract>Previous approaches to the problem of automatically converting decision tables to computer  programs have been based on decomposition.  At any stage, one condition is selected for testing, and  two smaller problems (decision tables with one less condition) are created.  An optimal program (with  respect to average execution time or storage space, for example) is located only through implicit enumeration  of all possible decision trees using a technique such as branch-and-bound.  The new approach described  in this paper uses dynamic programming to synthesize an optimal decision tree from which a program can  be created.  Using this approach, the efficiency of creating an optimal program is increased substantially,  permitting generation of optimal programs for decision tables with as many as ten to twelve conditions.</abstract>
	<conference>CACM June, 1976</conference>
	<authors>
	<author>Schumacher, H.</author>
	<author>Sevcik, K. C.</author>
	</authors>
	<keywords>decision tables, decision trees, dynamic programming, optimal programs</keywords>
	<version>3.50 4.12 5.30 8.3</version>
	<location>CA760606 JB January 4, 1978  1:50 PM</location>
	<citations>
	<citation>1354	4	2856</citation>
	<citation>1354	4	2856</citation>
	<citation>1488	4	2856</citation>
	<citation>1684	4	2856</citation>
	<citation>2053	4	2856</citation>
	<citation>2053	4	2856</citation>
	<citation>2053	4	2856</citation>
	<citation>2220	4	2856</citation>
	<citation>2220	4	2856</citation>
	<citation>2220	4	2856</citation>
	<citation>2221	4	2856</citation>
	<citation>2273	4	2856</citation>
	<citation>2273	4	2856</citation>
	<citation>2273	4	2856</citation>
	<citation>2273	4	2856</citation>
	<citation>2273	4	2856</citation>
	<citation>2453	4	2856</citation>
	<citation>2453	4	2856</citation>
	<citation>2453	4	2856</citation>
	<citation>2453	4	2856</citation>
	<citation>2517	4	2856</citation>
	<citation>2598	4	2856</citation>
	<citation>2598	4	2856</citation>
	<citation>2598	4	2856</citation>
	<citation>2726	4	2856</citation>
	<citation>2726	4	2856</citation>
	<citation>2726	4	2856</citation>
	<citation>2726	4	2856</citation>
	<citation>2845	4	2856</citation>
	<citation>2856	4	2856</citation>
	<citation>2856	4	2856</citation>
	<citation>2856	4	2856</citation>
	<citation>2856	4	2856</citation>
	<citation>2856	4	2856</citation>
	<citation>2856	4	2856</citation>
	<citation>2856	4	2856</citation>
	<citation>3034	4	2856</citation>
	<citation>3113	4	2856</citation>
	<citation>3113	4	2856</citation>
	<citation>1172	5	2856</citation>
	<citation>1327	5	2856</citation>
	<citation>1354	5	2856</citation>
	<citation>2053	5	2856</citation>
	<citation>2220	5	2856</citation>
	<citation>2453	5	2856</citation>
	<citation>2598	5	2856</citation>
	<citation>2856	5	2856</citation>
	<citation>2856	5	2856</citation>
	<citation>2856	5	2856</citation>
	<citation>3033	5	2856</citation>
	<citation>3113	5	2856</citation>
	<citation>1354	6	2856</citation>
	<citation>2263	6	2856</citation>
	<citation>2598	6	2856</citation>
	<citation>2691	6	2856</citation>
	<citation>2856	6	2856</citation>
	<citation>2856	6	2856</citation>
	</citations>
	</document>
	<document id= '2855'>
	<title>An Efficient List-Moving Algorithm Using Constant Workspace</title>
	<abstract>An efficient algorithm is presented for moving arbitrary list structures, using no storage  (apart from program variables) other than that required to hold the original list and the copy.  The  original list is destroyed as it is moved.  No mark bits are necessary, but pointers to the copy must  be distinguishable from pointers to the original.  The algorithm is superior in execution speed to previous  algorithms for the same problem.  Some variations and extensions of the algorithm are discussed.</abstract>
	<conference>CACM June, 1976</conference>
	<authors>
	<author>Clark, D. W.</author>
	</authors>
	<keywords>list moving, list copying, LISP, space complexity, constant workspace</keywords>
	<version>4.34 4.49 5.25</version>
	<location>CA760607 JB January 4, 1978  1:43 PM</location>
	<citations>
	<citation>1024	4	2855</citation>
	<citation>1051	4	2855</citation>
	<citation>1102	4	2855</citation>
	<citation>1132	4	2855</citation>
	<citation>1390	4	2855</citation>
	<citation>1486	4	2855</citation>
	<citation>1549	4	2855</citation>
	<citation>1706	4	2855</citation>
	<citation>1826	4	2855</citation>
	<citation>1869	4	2855</citation>
	<citation>1878	4	2855</citation>
	<citation>1972	4	2855</citation>
	<citation>378	4	2855</citation>
	<citation>2060	4	2855</citation>
	<citation>2155	4	2855</citation>
	<citation>2156	4	2855</citation>
	<citation>2156	4	2855</citation>
	<citation>2168	4	2855</citation>
	<citation>2168	4	2855</citation>
	<citation>2361	4	2855</citation>
	<citation>2438	4	2855</citation>
	<citation>2513	4	2855</citation>
	<citation>2513	4	2855</citation>
	<citation>2665	4	2855</citation>
	<citation>2719	4	2855</citation>
	<citation>2723	4	2855</citation>
	<citation>2723	4	2855</citation>
	<citation>2723	4	2855</citation>
	<citation>2736	4	2855</citation>
	<citation>2736	4	2855</citation>
	<citation>2833	4	2855</citation>
	<citation>2838	4	2855</citation>
	<citation>2842	4	2855</citation>
	<citation>2855	4	2855</citation>
	<citation>2855	4	2855</citation>
	<citation>2855	4	2855</citation>
	<citation>2855	4	2855</citation>
	<citation>2855	4	2855</citation>
	<citation>2855	4	2855</citation>
	<citation>2855	4	2855</citation>
	<citation>2855	4	2855</citation>
	<citation>2879	4	2855</citation>
	<citation>2944	4	2855</citation>
	<citation>2944	4	2855</citation>
	<citation>2954	4	2855</citation>
	<citation>3074	4	2855</citation>
	<citation>3074	4	2855</citation>
	<citation>3077	4	2855</citation>
	<citation>3080	4	2855</citation>
	<citation>3106	4	2855</citation>
	<citation>3106	4	2855</citation>
	<citation>3106	4	2855</citation>
	<citation>3106	4	2855</citation>
	<citation>3106	4	2855</citation>
	<citation>3112	4	2855</citation>
	<citation>3112	4	2855</citation>
	<citation>3112	4	2855</citation>
	<citation>627	4	2855</citation>
	<citation>106	4	2855</citation>
	<citation>210	5	2855</citation>
	<citation>1549	5	2855</citation>
	<citation>1826	5	2855</citation>
	<citation>1972	5	2855</citation>
	<citation>2513	5	2855</citation>
	<citation>2766	5	2855</citation>
	<citation>2833	5	2855</citation>
	<citation>2855	5	2855</citation>
	<citation>2855	5	2855</citation>
	<citation>2855	5	2855</citation>
	<citation>2998	5	2855</citation>
	<citation>3106	5	2855</citation>
	<citation>1549	6	2855</citation>
	<citation>210	6	2855</citation>
	<citation>1972	6	2855</citation>
	<citation>2665	6	2855</citation>
	<citation>2766	6	2855</citation>
	<citation>2855	6	2855</citation>
	<citation>2954	6	2855</citation>
	<citation>2998	6	2855</citation>
	</citations>
	</document>
	<document id= '2854'>
	<citations>
	<citation>2854	5	2854</citation>
	<citation>2854	5	2854</citation>
	<citation>2854	5	2854</citation>
	</citations>
	<title>Multiprocessing Compactifying Garbage Collection (Corrigendum)</title>
	<conference>CACM June, 1976</conference>
	<authors>
	<author>Steele, G. L. Jr.</author>
	</authors>
	<location>CA760608 JB January 4, 1978  1:36 PM</location>
	</document>
	<document id= '2853'>
	<title>A Numbering System for Permutations of Combinations</title>
	<conference>CACM June, 1976</conference>
	<authors>
	<author>Knott, G. D.</author>
	</authors>
	<keywords>combinatorics,coding systems, storage mapping functions</keywords>
	<version>4.9 5.30</version>
	<location>CA760609 JB January 4, 1978  1:33 PM</location>
	<citations>
	<citation>2690	4	2853</citation>
	<citation>2853	4	2853</citation>
	<citation>2853	4	2853</citation>
	<citation>3115	4	2853</citation>
	<citation>2690	5	2853</citation>
	<citation>2853	5	2853</citation>
	<citation>2853	5	2853</citation>
	<citation>2853	5	2853</citation>
	<citation>579	5	2853</citation>
	</citations>
	</document>
	<document id= '2852'>
	<title>The Technology of Computer Center Management: A Proposed Course for Graduate Professional Programs  in Computer Science or in Information Systems</title>
	<abstract>McFarlan and Nolan have made a strong case for adding a course on information systems administration  to the 13 courses proposed by the ACM Curriculum Committee on Computer Education for Management for Graduate  Professional Programs in Information Systems.  This paper is a report on a course entitled, "The Technology  of Computer Center Management," which has been offered at Purdue for the past four years.  The course  is suitable either for graduate professional programs in information systems or for graduate professional  programs in computer science.</abstract>
	<conference>CACM July, 1976</conference>
	<authors>
	<author>Conte, S. D.</author>
	<author>Halstead, M. H.</author>
	</authors>
	<keywords>education, information systems administration, computer center management, computer system performance</keywords>
	<version>1.52 2.4 3.51 4.6</version>
	<location>CA760701 JB January 4, 1978  1:31 PM</location>
	<citations>
	<citation>1653	4	2852</citation>
	<citation>1720	4	2852</citation>
	<citation>1927	4	2852</citation>
	<citation>2147	4	2852</citation>
	<citation>2163	4	2852</citation>
	<citation>2345	4	2852</citation>
	<citation>2387	4	2852</citation>
	<citation>2407	4	2852</citation>
	<citation>2478	4	2852</citation>
	<citation>2594	4	2852</citation>
	<citation>2852	4	2852</citation>
	<citation>2852	4	2852</citation>
	<citation>2852	4	2852</citation>
	<citation>2852	4	2852</citation>
	<citation>2852	4	2852</citation>
	<citation>2899	4	2852</citation>
	<citation>3003	4	2852</citation>
	<citation>3003	4	2852</citation>
	<citation>3011	4	2852</citation>
	<citation>3050	4	2852</citation>
	<citation>3050	4	2852</citation>
	<citation>3130	4	2852</citation>
	<citation>1417	5	2852</citation>
	<citation>1771	5	2852</citation>
	<citation>2345	5	2852</citation>
	<citation>2387	5	2852</citation>
	<citation>2479	5	2852</citation>
	<citation>2852	5	2852</citation>
	<citation>2852	5	2852</citation>
	<citation>2852	5	2852</citation>
	</citations>
	</document>
	<document id= '2851'>
	<title>Formal Verification of Parallel Programs</title>
	<abstract>Two formal models for parallel computation are presented: an abstract conceptual model and  a parallel-program model.  The former model does not distinguish between control and data states.  The  latter model includes the capability for the representation of an infinite set of control states by allowing  there to be arbitrarily many instruction pointers (or processes) executing the program.  An induction  principle is presented which treats the control and data state sets on the same ground.  Through the  use of "place variables," it is observed that certain correctness conditions can be expressed without  enumeration of the set of all possible control states.  Examples are presented in which the induction  principle is used to demonstrate proofs of mutual exclusion.  It is shown that assertions-oriented proof  methods are special cases of the induction principle. A special case of the assertions method, which  is called parallel place assertions, is shown to be incomplete.  A formalization of "deadlock" is then  presented. The concept of a "norm" is introduced, which yields an extension, to the deadlock problem,  of Floyd's technique for proving termination.  Also discussed is an extension of the program model which  allows each process to have its own local variables and permits shared global variables.  Correctness  of certain forms of implementation is also discussed.  An Appendix is included which relates this work  to previous work on the satisfiability of certain logical formulas.</abstract>
	<conference>CACM July, 1976</conference>
	<authors>
	<author>Keller, R. M.</author>
	</authors>
	<keywords>parallel program, correctness, verification, assertions, deadlock, mutual exclusion, Petrinet</keywords>
	<version>4.6 5.2 6.9 8.1</version>
	<location>CA760702 JB January 4, 1978  1:20 PM</location>
	<citations>
	<citation>2228	4	2851</citation>
	<citation>2280	4	2851</citation>
	<citation>2379	4	2851</citation>
	<citation>2320	4	2851</citation>
	<citation>2482	4	2851</citation>
	<citation>2597	4	2851</citation>
	<citation>2740	4	2851</citation>
	<citation>2777	4	2851</citation>
	<citation>2851	4	2851</citation>
	<citation>2851	4	2851</citation>
	<citation>2895	4	2851</citation>
	<citation>2912	4	2851</citation>
	<citation>2920	4	2851</citation>
	<citation>2946	4	2851</citation>
	<citation>3128	4	2851</citation>
	<citation>1877	5	2851</citation>
	<citation>2150	5	2851</citation>
	<citation>2851	5	2851</citation>
	<citation>2851	5	2851</citation>
	<citation>2851	5	2851</citation>
	</citations>
	</document>
	<document id= '2850'>
	<title>Symbolic Execution and Program Testing</title>
	<abstract>This paper describes the symbolic execution of programs.  Instead of supplying the normal inputs  to a program (e.g. numbers) one supplies symbols representing arbitrary values.  The execution proceeds  as in a normal execution except that values may be symbolic formulas over the input symbols.  The difficult,  yet interesting issues arise during the symbolic execution of conditional branch type statements.  A  particular system called EFFIGY which provides symbolic execution for program testing and debugging is  also described.  It interpretively executes programs written in a simple PL/I style programming language.   It includes many standard debugging features, the ability to manage and to prove things about symbolic  expressions, a simple program testing manager, and a program verifier.  A brief discussion of the relationship  between symbolic execution and program proving is also included.</abstract>
	<conference>CACM July, 1976</conference>
	<authors>
	<author>King, J. C.</author>
	</authors>
	<keywords>symbolic execution, program testing, program debugging, program proving, program verification,  symbolic interpretation</keywords>
	<version>4.13 5.21 5.24</version>
	<location>CA760703 JB January 4, 1978  12:59 PM</location>
	<citations>
	<citation>2850	5	2850</citation>
	<citation>2850	5	2850</citation>
	<citation>2850	5	2850</citation>
	<citation>3080	5	2850</citation>
	<citation>210	6	2850</citation>
	<citation>2850	6	2850</citation>
	</citations>
	</document>
	<document id= '2849'>
	<title>Ethernet: Distributed Packet Switching for Local Computer Networks</title>
	<abstract>Ethernet is a branching broadcast communication system for carrying digital data packets among  locally distributed computing stations. The packet transport mechanism provided by Ethernet has been  used to build systems which can be viewed as either local computer networks or loosely coupled multiprocessors.   An Ethernet's shared communication facility, its Ether, is a passive broadcast medium with no central  control.  Coordination of access to the Ether for packet broadcasts is distributed among the contending  transmitting stations using controlled statistical arbitration.  Switching of packets to their destinations  on the Ether is distributed among the receiving stations using packet address recognition.  Design principles  and implementation are described, based on experience with an operating Ethernet of 100 nodes along a  kilometer of coaxial cable.  A model for estimating performance under heavy loads and a packet protocol  for error controlled communication are included for completeness.</abstract>
	<conference>CACM July, 1976</conference>
	<authors>
	<author>Metcalfe, R. M.</author>
	<author>Boggs, D. R.</author>
	</authors>
	<keywords>computer networks, packet switching, multiprocessing, distributed control, distributed computing,  broadcast communication, statistical arbitration</keywords>
	<version>3.81 4.32 6.35</version>
	<location>CA760704 JB January 4, 1978  12:49 PM</location>
	<citations>
	<citation>2849	4	2849</citation>
	<citation>2371	5	2849</citation>
	<citation>2849	5	2849</citation>
	<citation>2849	5	2849</citation>
	<citation>2849	5	2849</citation>
	<citation>3032	5	2849</citation>
	<citation>3119	5	2849</citation>
	<citation>2245	6	2849</citation>
	<citation>2798	6	2849</citation>
	<citation>2849	6	2849</citation>
	<citation>2849	6	2849</citation>
	<citation>2859	6	2849</citation>
	</citations>
	</document>
	<document id= '2848'>
	<title>Synthesis of Decision Rules</title>
	<abstract>Decision tables can be used as an effective tool during an interview to record the logic of  processes to be automated.  The result of such an interview is not a structure of complete decision tables  but rather sets of decision rules.  The purpose of this paper is to provide a procedure for synthesizing  the decision rules and thus provide an aid in developing a structure of complete decision tables.</abstract>
	<conference>CACM July, 1976</conference>
	<authors>
	<author>Cheng, C.</author>
	<author>Rabin, J.</author>
	</authors>
	<keywords>decision rules, decision tables, logical tables, logical design, system design, specification language</keywords>
	<version>3.50 4.33</version>
	<location>CA760705 JB January 4, 1978  12:39 PM</location>
	<citations>
	<citation>2848	5	2848</citation>
	<citation>2848	5	2848</citation>
	<citation>2848	5	2848</citation>
	</citations>
	</document>
	<document id= '2847'>
	<title>Sampling from the Gamma Distribution on a Computer</title>
	<abstract>This paper describes a method of generating gamma variates that appears to be less costly than  Wallace's recently suggested method.  For large shape parameter (a); the cost of computation is proportional  to (a), whereas Wallace's method is proportional to (a).  Experimentation by Robinson and Lewis indicates  that for small (a) the method suggested here also dominates methods recently suggested by Dieter and  Ahrens, albeit those methods dominate for large (a).  The method suggested here uses the rejection technique.</abstract>
	<conference>CACM July, 1976</conference>
	<authors>
	<author>Fishman, G. S.</author>
	</authors>
	<keywords>gamma variates, reflection method, sampling</keywords>
	<version>5.5 8.1 8.3</version>
	<location>CA760706 JB January 4, 1978  12:34 PM</location>
	<citations>
	<citation>2847	4	2847</citation>
	<citation>2928	4	2847</citation>
	<citation>3046	4	2847</citation>
	<citation>3098	4	2847</citation>
	<citation>3107	4	2847</citation>
	<citation>2569	5	2847</citation>
	<citation>2847	5	2847</citation>
	<citation>2847	5	2847</citation>
	<citation>2847	5	2847</citation>
	<citation>3046	5	2847</citation>
	<citation>3098	5	2847</citation>
	<citation>2569	6	2847</citation>
	<citation>2569	6	2847</citation>
	<citation>2847	6	2847</citation>
	<citation>2847	6	2847</citation>
	<citation>3098	6	2847</citation>
	</citations>
	</document>
	<document id= '2846'>
	<title>Compressed Tries</title>
	<abstract>This paper presents a new data structure, called a compressed trie or C-trie, to be used in  information retrieval systems.  It has the same underlying m-ary tree structure as a trie, where m is  a parameter of the trie, but whereas the fields of the nodes in a trie have to be large enough to hold  a key or at least a pointer, the fields in a C-trie are only one bit long.  In the analysis part of the  paper it will be shown that for a collection of n keys the retrieval time, measured in terms of bit inspections  of one key, is of the order logm(n) and the storage requirement of the order n*(m+log2 n) bits.  This  improvement in storage requirements and retrieval time is achieved at the cost of decreasing the flexibility  of the structure, and therefore updating costs are increased.  First the C-trie is analyzed as a data  structure, and then several methods of its use for relatively static databases are discussed.</abstract>
	<conference>CACM July, 1976</conference>
	<authors>
	<author>Maly, K.</author>
	</authors>
	<keywords>data structure, database, m-ary tree, trie, retrieval time, storage requirement, keys</keywords>
	<version>3.70 3.74 3.75</version>
	<location>CA760707 JB January 4, 1978  12:26 PM</location>
	<citations>
	<citation>2846	4	2846</citation>
	<citation>849	4	2846</citation>
	<citation>944	4	2846</citation>
	<citation>155	5	2846</citation>
	<citation>2846	5	2846</citation>
	<citation>2846	5	2846</citation>
	<citation>2846	5	2846</citation>
	<citation>3041	5	2846</citation>
	<citation>2846	6	2846</citation>
	<citation>2905	6	2846</citation>
	</citations>
	</document>
	<document id= '2845'>
	<title>A Buddy System Variation for Disk Storage Allocation</title>
	<abstract>A generalization of the buddy system for storage allocation is described. The set of permitted  block sizes {SIZE(i)}, i=0,n, must satisfy the condition SIZE(i)=SIZE(i-1)+SIZE(i-k(i)) where k may be  any meaningful integral-valued function.  This makes it possible to force logical storage blocks to coincide  with physical storage blocks, such as tracks and cylinders.</abstract>
	<conference>CACM July, 1976</conference>
	<authors>
	<author>Burton, W.</author>
	</authors>
	<keywords>buddy system, dynamic storage allocation</keywords>
	<version>3.89 4.32 4.39</version>
	<location>CA760708 JB January 4, 1978  11:24 AM</location>
	<citations>
	<citation>1389	4	2845</citation>
	<citation>1552	4	2845</citation>
	<citation>2162	4	2845</citation>
	<citation>2435	4	2845</citation>
	<citation>2596	4	2845</citation>
	<citation>2596	4	2845</citation>
	<citation>2747	4	2845</citation>
	<citation>2768	4	2845</citation>
	<citation>2768	4	2845</citation>
	<citation>2773	4	2845</citation>
	<citation>2833	4	2845</citation>
	<citation>2845	4	2845</citation>
	<citation>2845	4	2845</citation>
	<citation>2845	4	2845</citation>
	<citation>2845	4	2845</citation>
	<citation>2845	4	2845</citation>
	<citation>2845	4	2845</citation>
	<citation>2856	4	2845</citation>
	<citation>2902	4	2845</citation>
	<citation>2902	4	2845</citation>
	<citation>2902	4	2845</citation>
	<citation>2902	4	2845</citation>
	<citation>2911	4	2845</citation>
	<citation>2955	4	2845</citation>
	<citation>2955	4	2845</citation>
	<citation>2955	4	2845</citation>
	<citation>3112	4	2845</citation>
	<citation>3113	4	2845</citation>
	<citation>1184	5	2845</citation>
	<citation>2435	5	2845</citation>
	<citation>2598	5	2845</citation>
	<citation>2736	5	2845</citation>
	<citation>2747	5	2845</citation>
	<citation>2768	5	2845</citation>
	<citation>2845	5	2845</citation>
	<citation>2845	5	2845</citation>
	<citation>2845	5	2845</citation>
	</citations>
	</document>
	<document id= '2844'>
	<title>Heaps Applied to Event Driven Mechanisms</title>
	<conference>CACM July, 1976</conference>
	<authors>
	<author>Gonnet, G. H.</author>
	</authors>
	<keywords>discrete event simulation, event-scanning mechanisms, priority queues, heaps</keywords>
	<version>4.34 8.1</version>
	<location>CA760709 JB January 4, 1978  11:05 AM</location>
	<citations>
	<citation>2042	4	2844</citation>
	<citation>2222	4	2844</citation>
	<citation>2356	4	2844</citation>
	<citation>2679	4	2844</citation>
	<citation>2757	4	2844</citation>
	<citation>2844	4	2844</citation>
	<citation>2844	4	2844</citation>
	<citation>2844	4	2844</citation>
	<citation>2844	4	2844</citation>
	<citation>2936	4	2844</citation>
	<citation>2936	4	2844</citation>
	<citation>2972	4	2844</citation>
	<citation>3051	4	2844</citation>
	<citation>3064	4	2844</citation>
	<citation>3064	4	2844</citation>
	<citation>3109	4	2844</citation>
	<citation>970	5	2844</citation>
	<citation>1059	5	2844</citation>
	<citation>2742	5	2844</citation>
	<citation>2767	5	2844</citation>
	<citation>2844	5	2844</citation>
	<citation>2844	5	2844</citation>
	<citation>2844	5	2844</citation>
	<citation>3051	5	2844</citation>
	<citation>3109	5	2844</citation>
	<citation>2767	6	2844</citation>
	<citation>2767	6	2844</citation>
	<citation>2844	6	2844</citation>
	<citation>2844	6	2844</citation>
	</citations>
	</document>
	<document id= '2843'>
	<title>Tools and Philosophy for Software Education</title>
	<abstract>This paper describes a set of tools and a philosophy for teaching software that have been found  very useful in course at MIT over the past seven years.  The tools include programs such as simulators,  graders, compilers, and monitor.  These allow the instructor to augment the basic concepts with relevant,  exciting, and economical student project activities.</abstract>
	<conference>CACM August, 1976</conference>
	<authors>
	<author>Donovan, J. J.</author>
	</authors>
	<keywords>software education, simulators, grading programs, student assignments</keywords>
	<version>1.5 4.0</version>
	<location>CA760801 JB January 4, 1978  10:39 AM</location>
	<citations>
	<citation>2843	5	2843</citation>
	<citation>2843	5	2843</citation>
	<citation>2843	5	2843</citation>
	</citations>
	</document>
	<document id= '2842'>
	<title>The Denotational Semantics of Programming Languages</title>
	<abstract>This paper is a tutorial introduction to the theory of programming language semantics developed  by D. Scott and C. Strachey.  The application of the theory to formal language specification is demonstrated  and other applications are surveyed. The first language considered, LOOP, is very elementary and its  definition merely introduces the notation and methodology of the approach.  Then the semantic concepts of environments, stores, and continuations are introduced to model classes of programming language features  and the underlying mathematical theory of computation due to Scott is motivated and outlined.  Finally,  the paper presents a formal definition of the language GEDANKEN.</abstract>
	<conference>CACM August, 1976</conference>
	<authors>
	<author>Tennent, R. D.</author>
	</authors>
	<keywords>semantics, programming language, applicative, imperative, environment, store, continuation, theory  of computation, higher-order function, recursive definition, LOOP, GEDANKEN</keywords>
	<version>4.22 5.24</version>
	<location>CA760802 JB January 4, 1978  10:33 AM</location>
	<citations>
	<citation>1024	4	2842</citation>
	<citation>1051	4	2842</citation>
	<citation>1086	4	2842</citation>
	<citation>1102	4	2842</citation>
	<citation>1132	4	2842</citation>
	<citation>1132	4	2842</citation>
	<citation>1234	4	2842</citation>
	<citation>1263	4	2842</citation>
	<citation>1265	4	2842</citation>
	<citation>1270	4	2842</citation>
	<citation>1323	4	2842</citation>
	<citation>1358	4	2842</citation>
	<citation>1379	4	2842</citation>
	<citation>1380	4	2842</citation>
	<citation>1390	4	2842</citation>
	<citation>1453	4	2842</citation>
	<citation>1464	4	2842</citation>
	<citation>1484	4	2842</citation>
	<citation>1486	4	2842</citation>
	<citation>1491	4	2842</citation>
	<citation>1498	4	2842</citation>
	<citation>1549	4	2842</citation>
	<citation>1613	4	2842</citation>
	<citation>1614	4	2842</citation>
	<citation>1706	4	2842</citation>
	<citation>1781	4	2842</citation>
	<citation>1825	4	2842</citation>
	<citation>1826	4	2842</citation>
	<citation>1860	4	2842</citation>
	<citation>1878	4	2842</citation>
	<citation>378	4	2842</citation>
	<citation>2060	4	2842</citation>
	<citation>2083	4	2842</citation>
	<citation>2155	4	2842</citation>
	<citation>2155	4	2842</citation>
	<citation>2168	4	2842</citation>
	<citation>2178	4	2842</citation>
	<citation>2179	4	2842</citation>
	<citation>2252	4	2842</citation>
	<citation>2294	4	2842</citation>
	<citation>2314	4	2842</citation>
	<citation>2317	4	2842</citation>
	<citation>2325	4	2842</citation>
	<citation>2326	4	2842</citation>
	<citation>2341	4	2842</citation>
	<citation>2457	4	2842</citation>
	<citation>2546	4	2842</citation>
	<citation>2558	4	2842</citation>
	<citation>2645	4	2842</citation>
	<citation>2652	4	2842</citation>
	<citation>2684	4	2842</citation>
	<citation>2719	4	2842</citation>
	<citation>2723	4	2842</citation>
	<citation>2838	4	2842</citation>
	<citation>2842	4	2842</citation>
	<citation>2842	4	2842</citation>
	<citation>2842	4	2842</citation>
	<citation>2842	4	2842</citation>
	<citation>2842	4	2842</citation>
	<citation>2855	4	2842</citation>
	<citation>2879	4	2842</citation>
	<citation>2903	4	2842</citation>
	<citation>2929	4	2842</citation>
	<citation>2934	4	2842</citation>
	<citation>3069	4	2842</citation>
	<citation>3077	4	2842</citation>
	<citation>3077	4	2842</citation>
	<citation>3080	4	2842</citation>
	<citation>3106	4	2842</citation>
	<citation>3150	4	2842</citation>
	<citation>627	4	2842</citation>
	<citation>669	4	2842</citation>
	<citation>679	4	2842</citation>
	<citation>691	4	2842</citation>
	<citation>761	4	2842</citation>
	<citation>106	4	2842</citation>
	<citation>949	4	2842</citation>
	<citation>989	4	2842</citation>
	<citation>210	5	2842</citation>
	<citation>2060	5	2842</citation>
	<citation>2148	5	2842</citation>
	<citation>2192	5	2842</citation>
	<citation>2837	5	2842</citation>
	<citation>2842	5	2842</citation>
	<citation>2842	5	2842</citation>
	<citation>2842	5	2842</citation>
	<citation>3150	5	2842</citation>
	<citation>3184	5	2842</citation>
	<citation>2060	6	2842</citation>
	<citation>2704	6	2842</citation>
	<citation>2784	6	2842</citation>
	<citation>2842	6	2842</citation>
	<citation>2842	6	2842</citation>
	<citation>2939	6	2842</citation>
	<citation>2940	6	2842</citation>
	<citation>2941	6	2842</citation>
	<citation>2943	6	2842</citation>
	<citation>3073	6	2842</citation>
	<citation>3148	6	2842</citation>
	</citations>
	</document>
	<document id= '2841'>
	<title>Designing Surfaces in 3-D</title>
	<abstract>An experimental system for computer-aided design of free-form surfaces in three dimensions  is described. The surfaces are represented in the system as parametric basis splines. The principal features  of the system are: (1) the surfaces are rendered as isoparametric line drawings on a head-mounted display,  and they are designed with the aid of a three-dimensional "wand," which allows 3-D movements of the points  controlling the shapes of the surfaces, (2) all of the interactions with the surfaces are in real-time,  and (3) the mathematical formulations used assume no knowledge of them by the user of the system.  Also  examined are some of the features that should be part of a practical 3-D system for designing space-forms.</abstract>
	<conference>CACM August, 1976</conference>
	<authors>
	<author>Clark, J. H.</author>
	</authors>
	<keywords>real-time graphics, computer-aided design, picture processing, B-splines, 3-D displays</keywords>
	<version>3.80 6.22 8.2</version>
	<location>CA760803 JB January 4, 1978  10:25 AM</location>
	<citations>
	<citation>2828	5	2841</citation>
	<citation>2841	5	2841</citation>
	<citation>2841	5	2841</citation>
	<citation>2841	5	2841</citation>
	<citation>1751	6	2841</citation>
	<citation>2004	6	2841</citation>
	<citation>2751	6	2841</citation>
	<citation>2841	6	2841</citation>
	</citations>
	</document>
	<document id= '2840'>
	<title>Protection in Operating Systems</title>
	<abstract>A model of protection mechanisms in computing systems is presented and its appropriateness  is argued.  The "safety" problem for protection systems under this model is to determine in a given situation  whether a subject can acquire a particular right to an object.   In restricted cases, it can be shown  that this problem is decidable, i.e. there is an algorithm to determine whether a system in a particular  configuration is safe.  In general, and under surprisingly weak assumptions, it cannot be decided if  a situation is safe. Various implications of this fact are discussed.</abstract>
	<conference>CACM August, 1976</conference>
	<authors>
	<author>Harrison, M. A.</author>
	<author>Ruzzo, W. L.</author>
	<author>Ullman, J. D.</author>
	</authors>
	<keywords>protection, protection system, operating system, decidability, Turing machine</keywords>
	<version>4.30 4.31 5.24</version>
	<location>CA760804 JB January 4, 1978  10:12 AM</location>
	<citations>
	<citation>1458	4	2840</citation>
	<citation>1523	4	2840</citation>
	<citation>1603	4	2840</citation>
	<citation>1698	4	2840</citation>
	<citation>1747	4	2840</citation>
	<citation>1748	4	2840</citation>
	<citation>1753	4	2840</citation>
	<citation>1854	4	2840</citation>
	<citation>1877	4	2840</citation>
	<citation>1960	4	2840</citation>
	<citation>2358	4	2840</citation>
	<citation>2377	4	2840</citation>
	<citation>2377	4	2840</citation>
	<citation>2378	4	2840</citation>
	<citation>2372	4	2840</citation>
	<citation>2497	4	2840</citation>
	<citation>2558	4	2840</citation>
	<citation>2625	4	2840</citation>
	<citation>2626	4	2840</citation>
	<citation>2626	4	2840</citation>
	<citation>2632	4	2840</citation>
	<citation>2786	4	2840</citation>
	<citation>2840	4	2840</citation>
	<citation>2840	4	2840</citation>
	<citation>2840	4	2840</citation>
	<citation>2840	4	2840</citation>
	<citation>2840	4	2840</citation>
	<citation>2869	4	2840</citation>
	<citation>2919	4	2840</citation>
	<citation>2941	4	2840</citation>
	<citation>3017	4	2840</citation>
	<citation>3105	4	2840</citation>
	<citation>3110	4	2840</citation>
	<citation>3128	4	2840</citation>
	<citation>3144	4	2840</citation>
	<citation>3158	4	2840</citation>
	<citation>3174	4	2840</citation>
	<citation>1471	5	2840</citation>
	<citation>1746	5	2840</citation>
	<citation>2436	5	2840</citation>
	<citation>2626	5	2840</citation>
	<citation>2629	5	2840</citation>
	<citation>2840	5	2840</citation>
	<citation>2840	5	2840</citation>
	<citation>2840	5	2840</citation>
	<citation>3076	5	2840</citation>
	<citation>2607	6	2840</citation>
	<citation>2840	6	2840</citation>
	</citations>
	</document>
	<document id= '2839'>
	<title>An Insertion Technique for One-Sided Height-Balanced Trees</title>
	<abstract>A restriction on height-balanced binary trees is presented.  It is seen that this restriction  reduces the extra memory requirements by half (from two extra bits per node to one) and maintains fast  search capabilities at a cost of increased time requirements for inserting new nodes.</abstract>
	<conference>CACM August, 1976</conference>
	<authors>
	<author>Hirschberg, D. S.</author>
	</authors>
	<keywords>balanced, binary, search, trees</keywords>
	<version>3.73 3.74 4.34 5.25 5.31</version>
	<location>CA760805 JB January 4, 1978  10:04 AM</location>
	<citations>
	<citation>2839	4	2839</citation>
	<citation>3042	4	2839</citation>
	<citation>3096	4	2839</citation>
	<citation>3163	4	2839</citation>
	<citation>2839	5	2839</citation>
	<citation>2839	5	2839</citation>
	<citation>2839	5	2839</citation>
	<citation>2889	5	2839</citation>
	<citation>3009	5	2839</citation>
	<citation>3042	5	2839</citation>
	<citation>3065	5	2839</citation>
	<citation>3096	5	2839</citation>
	<citation>3163	5	2839</citation>
	<citation>2455	6	2839</citation>
	<citation>2839	6	2839</citation>
	<citation>2839	6	2839</citation>
	<citation>2839	6	2839</citation>
	<citation>2839	6	2839</citation>
	<citation>2839	6	2839</citation>
	<citation>2889	6	2839</citation>
	<citation>2889	6	2839</citation>
	<citation>2889	6	2839</citation>
	<citation>2968	6	2839</citation>
	<citation>3009	6	2839</citation>
	<citation>3009	6	2839</citation>
	<citation>3065	6	2839</citation>
	<citation>3096	6	2839</citation>
	<citation>3096	6	2839</citation>
	</citations>
	</document>
	<document id= '2838'>
	<title>Analysis of an Algorithm for Real Time Garbage Collection</title>
	<abstract>A real time garbage collection system avoids suspending the operations of a list processor  for the long times that garbage collection normally requires by performing garbage collection on a second  processor in parallel with list processing operations, or on a single processor time-shared with them.   Algorithms for recovering discarded list structures in this manner are presented and analyzed to determine  sufficient conditions under which the list processor never needs to wait on the collector.  These techniques  are shown to require at most twice as much processing power as regular garbage collectors, if they are  used efficiently.  The average behavior of the program is shown to be very nearly equal to the worst-case  performance, so that the sufficient conditions are also suitable for measuring the typical behavior of  the algorithm.</abstract>
	<conference>CACM September, 1976</conference>
	<authors>
	<author>Wadler, P. L.</author>
	</authors>
	<keywords>garbage collection, storage reclamation, list processing, Lisp, time-sharing, multiprocessing,  parallel processing, real time, data structures, analysis of algorithms</keywords>
	<version>3.69 3.89 4.19 4.29 4.32 4.34 4.9 5.25</version>
	<location>CA760901 JB January 4, 1978  9:57 AM</location>
	<citations>
	<citation>1024	4	2838</citation>
	<citation>1051	4	2838</citation>
	<citation>1102	4	2838</citation>
	<citation>1132	4	2838</citation>
	<citation>1390	4	2838</citation>
	<citation>1486	4	2838</citation>
	<citation>1549	4	2838</citation>
	<citation>1706	4	2838</citation>
	<citation>1826	4	2838</citation>
	<citation>1878	4	2838</citation>
	<citation>378	4	2838</citation>
	<citation>2060	4	2838</citation>
	<citation>2155	4	2838</citation>
	<citation>2168	4	2838</citation>
	<citation>2719	4	2838</citation>
	<citation>2723	4	2838</citation>
	<citation>2838	4	2838</citation>
	<citation>2838	4	2838</citation>
	<citation>2842	4	2838</citation>
	<citation>2855	4	2838</citation>
	<citation>2879	4	2838</citation>
	<citation>2896	4	2838</citation>
	<citation>3039	4	2838</citation>
	<citation>3074	4	2838</citation>
	<citation>3077	4	2838</citation>
	<citation>3080	4	2838</citation>
	<citation>3106	4	2838</citation>
	<citation>3112	4	2838</citation>
	<citation>627	4	2838</citation>
	<citation>106	4	2838</citation>
	<citation>210	5	2838</citation>
	<citation>2723	5	2838</citation>
	<citation>2838	5	2838</citation>
	<citation>2838	5	2838</citation>
	<citation>2838	5	2838</citation>
	<citation>3112	5	2838</citation>
	<citation>106	6	2838</citation>
	<citation>1380	6	2838</citation>
	<citation>1826	6	2838</citation>
	<citation>1972	6	2838</citation>
	<citation>2438	6	2838</citation>
	<citation>2723	6	2838</citation>
	<citation>2736	6	2838</citation>
	<citation>2833	6	2838</citation>
	<citation>2838	6	2838</citation>
	<citation>731	6	2838</citation>
	</citations>
	</document>
	<document id= '2837'>
	<title>New Upper Bounds for Selection</title>
	<abstract>The worst-case minimum number of comparisons complexity Vi(n) of the i-th selection problem  is considered.  A new upper bound for Vi(n) improves the bound given by the standard Hadian-Sobel algorithm  by a generalization of the Kirkpatrick-Hadian-Sobel algorithm, and extends Kirkpatrick's method to a  much wider range of application.  This generalization compares favorably with a recent algorithm by Hyafil.</abstract>
	<conference>CACM September, 1976</conference>
	<authors>
	<author>Yap, C. K.</author>
	</authors>
	<keywords>selection problem, algorithms, comparison problems, concrete computational complexity, upper bounds,  worst-case analysis</keywords>
	<version>5.25 5.31</version>
	<location>CA760902 JB January 4, 1978  9:48 AM</location>
	<citations>
	<citation>2837	4	2837</citation>
	<citation>2837	4	2837</citation>
	<citation>3150	4	2837</citation>
	<citation>2784	5	2837</citation>
	<citation>2837	5	2837</citation>
	<citation>2837	5	2837</citation>
	<citation>2837	5	2837</citation>
	<citation>2842	5	2837</citation>
	</citations>
	</document>
	<document id= '2836'>
	<title>Weighted Derivation Trees</title>
	<abstract>The nodes of a weighted derivation tree are associated with weighting functions over the vocabulary  of a context-free grammar.  An algorithm is presented for constructing the optimal derivation tree having  the same structure as a given weighted derivation tree.  In addition, the correctness of the algorithm  is established.  The method may be applied to problems involving probabilistic parsing or combinatorial  optimization.</abstract>
	<conference>CACM September, 1976</conference>
	<authors>
	<author>Loui, M. C.</author>
	</authors>
	<keywords>derivation tree, parse tree, probabilistic grammar, structural ambiguity, combinatorial optimization</keywords>
	<version>5.23 5.49</version>
	<location>CA760903 JB January 4, 1978  9:41 AM</location>
	<citations>
	<citation>2836	5	2836</citation>
	<citation>2836	5	2836</citation>
	<citation>2836	5	2836</citation>
	</citations>
	</document>
	<document id= '2835'>
	<title>Recursion Analysis for Compiler Optimization</title>
	<abstract>A relatively simple method for the detection of recursive use of procedures is presented for  use in compiler optimization.  Implementation considerations are discussed, and a modification of the  algorithm is given to further improve optimization.  This analysis can also be used to determine what  possible subset of values could be assumed by variables which can only take on a relatively small discrete  set of values.  The most common are parameters of variables assuming values of label, procedure, or Pascal's  enumerated type.</abstract>
	<conference>CACM September, 1976</conference>
	<authors>
	<author>Walter, K. G.</author>
	</authors>
	<keywords>recursion, compiler optimization</keywords>
	<version>4.12</version>
	<location>CA760904 JB January 4, 1978  9:36 AM</location>
	<citations>
	<citation>2835	5	2835</citation>
	<citation>2835	5	2835</citation>
	<citation>2835	5	2835</citation>
	</citations>
	</document>
	<document id= '2834'>
	<title>Efficient Generation of the Binary Reflected Gray Code and Its Applications</title>
	<abstract>Algorithms are presented to generate the n-bit binary reflected Gray code and codewords of  fixed weight in that code.  Both algorithms are efficient in that the time required to generate the next  element from the current one is constant.  Applications to the generation of the combinations of n things taken k at a time, the compositions of integers, and the permutations of a multiset are discussed.</abstract>
	<conference>CACM September, 1976</conference>
	<authors>
	<author>Bitner, J. R.</author>
	<author>Ehrlich, G.</author>
	<author>Reingold, E. M.</author>
	</authors>
	<keywords>Gray code, combinations, subsets, compositions, combinatorial computing</keywords>
	<version>5.39</version>
	<location>CA760905 JB January 4, 1978  9:14 AM</location>
	<citations>
	<citation>2466	4	2834</citation>
	<citation>2834	4	2834</citation>
	<citation>2834	4	2834</citation>
	<citation>2834	4	2834</citation>
	<citation>2834	4	2834</citation>
	<citation>2884	4	2834</citation>
	<citation>3115	4	2834</citation>
	<citation>3115	4	2834</citation>
	<citation>3115	4	2834</citation>
	<citation>969	5	2834</citation>
	<citation>2045	5	2834</citation>
	<citation>2417	5	2834</citation>
	<citation>2466	5	2834</citation>
	<citation>2834	5	2834</citation>
	<citation>2834	5	2834</citation>
	<citation>2834	5	2834</citation>
	</citations>
	</document>
	<document id= '2833'>
	<title>An Efficient, Incremental, Automatic Garbage Collector</title>
	<abstract>This paper describes a new way of solving the storage reclamation problem for a system such  as Lisp that allocates storage automatically from a heap, and does not require the programmer to give  any indication that particular items are no longer useful or accessible.  A reference count scheme for  reclaiming non-self-referential structures, and a linearizing, compacting, copying scheme to reorganize  all storage at the users discretion are proposed.  The algorithms are designed to work well in systems  which use multiple levels of storage, and large virtual address space.  They depend on the fact that  most cells are referenced exactly once, and that reference counts need only be accurate when storage  is about to be reclaimed.  A transaction file stores changes to reference counts, and a multiple reference  table stores the count for items which are referenced more than once.</abstract>
	<conference>CACM September, 1976</conference>
	<authors>
	<author>Deutsch, L. P.</author>
	<author>Bobrow, D. G.</author>
	</authors>
	<keywords>storage management, garbage collection, Lisp</keywords>
	<version>4.19</version>
	<location>CA760906 JB January 4, 1978  8:58 AM</location>
	<citations>
	<citation>1708	4	2833</citation>
	<citation>1781	4	2833</citation>
	<citation>1826	4	2833</citation>
	<citation>1860	4	2833</citation>
	<citation>1972	4	2833</citation>
	<citation>2156	4	2833</citation>
	<citation>2156	4	2833</citation>
	<citation>2168	4	2833</citation>
	<citation>2168	4	2833</citation>
	<citation>2249	4	2833</citation>
	<citation>2314	4	2833</citation>
	<citation>2438	4	2833</citation>
	<citation>2719	4	2833</citation>
	<citation>2723	4	2833</citation>
	<citation>2736	4	2833</citation>
	<citation>2736	4	2833</citation>
	<citation>2833	4	2833</citation>
	<citation>2833	4	2833</citation>
	<citation>2833	4	2833</citation>
	<citation>2845	4	2833</citation>
	<citation>2855	4	2833</citation>
	<citation>3074	4	2833</citation>
	<citation>3112	4	2833</citation>
	<citation>3112	4	2833</citation>
	<citation>1626	5	2833</citation>
	<citation>1826	5	2833</citation>
	<citation>2736	5	2833</citation>
	<citation>2833	5	2833</citation>
	<citation>2833	5	2833</citation>
	<citation>2833	5	2833</citation>
	<citation>2855	5	2833</citation>
	<citation>2944	5	2833</citation>
	<citation>3112	5	2833</citation>
	<citation>106	6	2833</citation>
	<citation>1380	6	2833</citation>
	<citation>1549	6	2833</citation>
	<citation>1826	6	2833</citation>
	<citation>1826	6	2833</citation>
	<citation>210	6	2833</citation>
	<citation>1972	6	2833</citation>
	<citation>1972	6	2833</citation>
	<citation>2438	6	2833</citation>
	<citation>2513	6	2833</citation>
	<citation>2723	6	2833</citation>
	<citation>2736	6	2833</citation>
	<citation>2766	6	2833</citation>
	<citation>2833	6	2833</citation>
	<citation>2833	6	2833</citation>
	<citation>2833	6	2833</citation>
	<citation>2838	6	2833</citation>
	<citation>2998	6	2833</citation>
	<citation>2998	6	2833</citation>
	<citation>731	6	2833</citation>
	</citations>
	</document>
	<document id= '2832'>
	<title>Faster Retrieval from Context Trees (Corrigendum)</title>
	<abstract>Context trees provide a convenient way of storing data which is to be viewed as a hierarchy  of contexts.  This note presents an algorithm which improves on previous context tree retrieval algorithms.  It is based on the observation that in typical uses context changes are infrequent relative to retrievals,  so that data can be cached to speed up retrieval.  A retrieval is started from the position of the previous  retrieval and auxiliary structures are built up to make the search rapid.  Algorithms for addition and  deletion of data and for garbage collection are outlined.</abstract>
	<conference>CACM September, 1976</conference>
	<authors>
	<author>Wegbreit, B.</author>
	</authors>
	<keywords>context trees, frame problem, variable bindings, data structures</keywords>
	<version>3.69 3.74 4.10</version>
	<location>CA760907 JB January 4, 1978  8:49 AM</location>
	<citations>
	<citation>2832	5	2832</citation>
	<citation>2832	5	2832</citation>
	<citation>2832	5	2832</citation>
	</citations>
	</document>
	<document id= '2831'>
	<citations>
	<citation>2831	5	2831</citation>
	<citation>2831	5	2831</citation>
	<citation>2831	5	2831</citation>
	</citations>
	<title>Analysis of the PFF Replacement Algorithm via a Semi-Markov Model (Corrigendum)</title>
	<conference>CACM September, 1976</conference>
	<authors>
	<author>Chu, W. W.</author>
	<author>Opderbeck, H.</author>
	</authors>
	<location>CA760908 DMM February 1, 1978  9:54 AM</location>
	</document>
	<document id= '2830'>
	<citations>
	<citation>2830	5	2830</citation>
	<citation>2830	5	2830</citation>
	<citation>2830	5	2830</citation>
	</citations>
	<title>A Practitioner's Guide to Addressing Algorithms (Corrigendum)</title>
	<conference>CACM September, 1976</conference>
	<authors>
	<author>Severance, D. G.</author>
	<author>Duhne, R. A.</author>
	</authors>
	<location>CA760909 JB January 4, 1978  8:43 AM</location>
	</document>
	<document id= '2829'>
	<title>Texture and Reflection in Computer Generated Images</title>
	<abstract>In 1974 Catmull developed a new algorithm for rendering images of bivariate surface patches.   This paper describes extensions of this algorithm in the areas of texture simulation and lighting models.   The parameterization of a patch defines a coordinate system which is used as a key for mapping patterns  onto the surface.  The intensity of the pattern at each picture element is computed as a weighted average  of regions of the pattern definition function. The shape and size of this weighting function are chosen  using digital signal processing theory.  The patch rendering algorithm allows accurate computation of  the surface normal to the patch at each picture element, permitting the simulation of the mirror reflections.   The amount of light coming from a given direction is modeled in a similar manner to the texture mapping  and then added to the intensity obtained from the texture mapping.  Several examples of images synthesized  using these new techniques are included.</abstract>
	<conference>CACM October, 1976</conference>
	<authors>
	<author>Blinn, J. F.</author>
	<author>Newell, M. E.</author>
	</authors>
	<keywords>computer graphics, graphic display, shading, hidden surface removal</keywords>
	<version>3.41 5.12 5.15 8.2</version>
	<location>CA761002 JB January 4, 1978  8:36 AM</location>
	<citations>
	<citation>2816	5	2829</citation>
	<citation>2829	5	2829</citation>
	<citation>2829	5	2829</citation>
	<citation>2829	5	2829</citation>
	<citation>3047	5	2829</citation>
	<citation>2493	6	2829</citation>
	<citation>2751	6	2829</citation>
	<citation>2751	6	2829</citation>
	<citation>2829	6	2829</citation>
	<citation>2829	6	2829</citation>
	</citations>
	</document>
	<document id= '2828'>
	<title>Hierarchical Geometric Models for Visible Surface Algorithms</title>
	<abstract>The geometric structure inherent in the definition of the shapes of three-dimensional objects  and environments is used not just to define their relative motion and placement, but also to assist in  solving many other problems of systems for producing pictures by computer.  By using an extension of  traditional structure information, or a geometric hierarchy, five significant improvements to current  techniques are possible.  First, the range of complexity of an environment is greatly increased while  the visible complexity of any given scene is kept within a fixed upper limit.  Second, a meaningful way  is provided to vary the amount of detail presented in a scene.  Third, "clipping" becomes a very fast  logarithmic search for the resolvable parts of the environment within the field of view.  Fourth, frame  to frame coherence and clipping define a graphical "working set," or fraction of the total structure  that should be present in primary store for immediate access by the visible surface algorithm.  Finally,  the geometric structure suggests a recursive descent, visible surface algorithm in which the computation  time potentially grows linearly with the visible complexity of the scene.</abstract>
	<conference>CACM October, 1976</conference>
	<authors>
	<author>Clark, J. H.</author>
	</authors>
	<keywords>visible surface algorithms, hidden surface algorithms, hierarchical data structures, geometric  models</keywords>
	<version>5.31 8.2</version>
	<location>CA761003 JB January 3, 1978  4:42 PM</location>
	<citations>
	<citation>1892	4	2828</citation>
	<citation>1901	4	2828</citation>
	<citation>2085	4	2828</citation>
	<citation>2095	4	2828</citation>
	<citation>2218	4	2828</citation>
	<citation>2277	4	2828</citation>
	<citation>2319	4	2828</citation>
	<citation>2329	4	2828</citation>
	<citation>2358	4	2828</citation>
	<citation>2373	4	2828</citation>
	<citation>2380	4	2828</citation>
	<citation>2434	4	2828</citation>
	<citation>2499	4	2828</citation>
	<citation>2501	4	2828</citation>
	<citation>2582	4	2828</citation>
	<citation>2669	4	2828</citation>
	<citation>2674	4	2828</citation>
	<citation>2687	4	2828</citation>
	<citation>2816	4	2828</citation>
	<citation>2828	4	2828</citation>
	<citation>2828	4	2828</citation>
	<citation>2828	4	2828</citation>
	<citation>2828	4	2828</citation>
	<citation>2827	4	2828</citation>
	<citation>2863	4	2828</citation>
	<citation>2881	4	2828</citation>
	<citation>2913	4	2828</citation>
	<citation>2928	4	2828</citation>
	<citation>2996	4	2828</citation>
	<citation>3006	4	2828</citation>
	<citation>3047	4	2828</citation>
	<citation>3067	4	2828</citation>
	<citation>1751	5	2828</citation>
	<citation>2004	5	2828</citation>
	<citation>2751	5	2828</citation>
	<citation>2828	5	2828</citation>
	<citation>2828	5	2828</citation>
	<citation>2828	5	2828</citation>
	<citation>2841	5	2828</citation>
	</citations>
	</document>
	<document id= '2827'>
	<title>A Parametric Algorithm for Drawing Pictures of Solid Objects Composed of Quadric Surfaces</title>
	<abstract>An algorithm for drawing pictures of three-dimensional objects, with surfaces made up of patches  of quadric surfaces, is described.  The emphasis of this algorithm is on calculating the intersections  of quadric surfaces. A parameterization scheme is used.  Each quadric surface intersection curve (QSIC)  is represented as a set of coefficients and parameter limits.  Each value of the parameter represents  at most two points, and these may easily be distinguished.  This scheme can find the coordinates of points  of even quartic (fourth-order) intersection curves, using equations of no more than second order.  Methods  of parameterization for each type of OSIC are discussed, as well as surface bounding and hidden surface  removal.</abstract>
	<conference>CACM October, 1976</conference>
	<authors>
	<author>Levin, J.</author>
	</authors>
	<keywords>computer graphics, hidden surface removal, quadric surface intersection curves</keywords>
	<version>3.41 5.12 5.13 5.19 8.2</version>
	<location>CA761004 JB January 3, 1978  4:32 PM</location>
	<citations>
	<citation>2816	4	2827</citation>
	<citation>2828	4	2827</citation>
	<citation>2827	4	2827</citation>
	<citation>2827	4	2827</citation>
	<citation>2913	4	2827</citation>
	<citation>3047	4	2827</citation>
	<citation>3116	4	2827</citation>
	<citation>2751	5	2827</citation>
	<citation>2771	5	2827</citation>
	<citation>2827	5	2827</citation>
	<citation>2827	5	2827</citation>
	<citation>2827	5	2827</citation>
	</citations>
	</document>
	<document id= '2826'>
	<title>Interactive Skeleton Techniques for Enhancing Motion Dynamics in Key Frame Animation</title>
	<abstract>A significant increase in the capability for controlling motion dynamics in key frame animation  is achieved through skeleton control.  This technique allows an animator to develop a complex motion  sequence by animating a stick figure representation of an image.  This control sequence is then used  to drive an image sequence through the same movement.  The simplicity of the stick figure image encourages  a high level of interaction during the design stage.  Its compatibility with the basic key frame animation  technique permits skeleton control to be applied selectively to only those components of a composite  image sequence that require enhancement.</abstract>
	<conference>CACM October, 1976</conference>
	<authors>
	<author>Burtnyk, N.</author>
	<author>Wein, M.</author>
	</authors>
	<keywords>interactive graphics, computer generated animation, key frame animation, interactive skeleton control,  stick figure animation</keywords>
	<version>3.41 3.49 4.9 8.2</version>
	<location>CA761005 JB January 3, 1978  4:24 PM</location>
	<citations>
	<citation>2826	5	2826</citation>
	<citation>2826	5	2826</citation>
	<citation>2826	5	2826</citation>
	</citations>
	</document>
	<document id= '2825'>
	<title>The BMD and BMDP Series of Statistical Computer Programs</title>
	<conference>CACM October, 1976</conference>
	<authors>
	<author>Frane, J. W.</author>
	</authors>
	<keywords>analysis of variance, cluster analysis, contingency tables, data analysis, discriminant analysis,  factor analysis, graphics, outliers, regression, time series, transformations</keywords>
	<version>1.3 3.3 4.0 5.5</version>
	<location>CA761006 JB January 3, 1978  4:18 PM</location>
	<citations>
	<citation>2825	4	2825</citation>
	<citation>2419	5	2825</citation>
	<citation>2825	5	2825</citation>
	<citation>2825	5	2825</citation>
	<citation>2825	5	2825</citation>
	</citations>
	</document>
	<document id= '2824'>
	<title>An Improvement to Martin's Algorithm for Computation of Linear Precedence Functions</title>
	<conference>CACM October, 1976</conference>
	<authors>
	<author>Kien, C.</author>
	<author>Hoffmann, H. J.</author>
	<author>Muth, D.</author>
	</authors>
	<keywords>syntax analysis, precedence functions, Boolean matrices</keywords>
	<version>4.12</version>
	<location>CA761007 JB January 3, 1978  4:13 PM</location>
	<citations>
	<citation>1542	4	2824</citation>
	<citation>1683	4	2824</citation>
	<citation>1693	4	2824</citation>
	<citation>1781	4	2824</citation>
	<citation>1787	4	2824</citation>
	<citation>1836	4	2824</citation>
	<citation>1945	4	2824</citation>
	<citation>2060	4	2824</citation>
	<citation>2061	4	2824</citation>
	<citation>2082	4	2824</citation>
	<citation>2091	4	2824</citation>
	<citation>2152	4	2824</citation>
	<citation>2179	4	2824</citation>
	<citation>2221	4	2824</citation>
	<citation>2340	4	2824</citation>
	<citation>2340	4	2824</citation>
	<citation>2356	4	2824</citation>
	<citation>2546	4	2824</citation>
	<citation>2603	4	2824</citation>
	<citation>2698	4	2824</citation>
	<citation>2708	4	2824</citation>
	<citation>2824	4	2824</citation>
	<citation>2824	4	2824</citation>
	<citation>2824	4	2824</citation>
	<citation>2982	4	2824</citation>
	<citation>2982	4	2824</citation>
	<citation>2986	4	2824</citation>
	<citation>2986	4	2824</citation>
	<citation>2986	4	2824</citation>
	<citation>3045	4	2824</citation>
	<citation>3093	4	2824</citation>
	<citation>1491	5	2824</citation>
	<citation>1683	5	2824</citation>
	<citation>2340	5	2824</citation>
	<citation>2824	5	2824</citation>
	<citation>2824	5	2824</citation>
	<citation>2824	5	2824</citation>
	</citations>
	</document>
	<document id= '2823'>
	<title>The Status of Women and Minorities in Academic Computer Science</title>
	<abstract>The results of a survey concerning women and minority students and faculty in computer science  during the years 1971 to 1975 are presented.  Analysis of the data indicated that effective affirmative  action programs for recruitment into graduate degree programs are needed to enlarge the number of women  and minorities qualified for later employment in computer science.  Also, possible discrimination in  employment of women and minority graduate students was revealed.</abstract>
	<conference>CACM October, 1976</conference>
	<authors>
	<author>Montanelli, R. G. Jr.</author>
	<author>Mamrak, S. A.</author>
	</authors>
	<keywords>discrimination against women, discrimination against minorities, graduate students, undergraduate  students, academic employment, faculty, computer science degree programs, affirmative action, Title VII,  Title IX</keywords>
	<version>1.52 1.53 2.2 2.3</version>
	<location>CA761008 JB January 3, 1978  4:10 PM</location>
	<citations>
	<citation>2823	4	2823</citation>
	<citation>2735	5	2823</citation>
	<citation>2823	5	2823</citation>
	<citation>2823	5	2823</citation>
	<citation>2823	5	2823</citation>
	<citation>3022	5	2823</citation>
	<citation>3123	5	2823</citation>
	<citation>2823	6	2823</citation>
	<citation>2823	6	2823</citation>
	<citation>2861	6	2823</citation>
	<citation>2962	6	2823</citation>
	<citation>3022	6	2823</citation>
	</citations>
	</document>
	<document id= '2822'>
	<title>Homilies for Humble Standards</title>
	<abstract>Copyright 1976, Association for Computing Machinery, Inc. General permission to republish,  but not for profit, all or part of this material is granted provided that ACM's copyright notice is given  and that reference is made to the publication, to its data of issue, and to the fact that reprinting  privileges were granted by permission of the Association for Computing Machinery.</abstract>
	<conference>CACM November, 1976</conference>
	<authors>
	<author>Ross, D. T.</author>
	</authors>
	<keywords>standards, CASE Standards criteria for standards, standardization</keywords>
	<version>1.3 2.1 2.3</version>
	<location>CA761101 JB January 3, 1978  3:47 PM</location>
	<citations>
	<citation>2822	5	2822</citation>
	<citation>2822	5	2822</citation>
	<citation>2822	5	2822</citation>
	</citations>
	</document>
	<document id= '2821'>
	<title>Cobol Under Control</title>
	<abstract>A sample set of Cobol programming standards is offered.  These standards constrain code to  be developed in a "structured" form for both data and control structures.  They do not require syntax  beyond the existing Cobol language and in fact utilize a typical limited subset of the 1974 ANS Cobol  standard.  These standards have proved extremely valuable in practice and have reduced the cost and time  to produce and maintain large software systems that have been deployed in live multiple customer environments.</abstract>
	<conference>CACM November, 1976</conference>
	<authors>
	<author>Ledgard, H. F.</author>
	<author>Cave, W. C.</author>
	</authors>
	<keywords>Cobol, structured programming,software development, program standards</keywords>
	<version>3.5 4.22 4.43</version>
	<location>CA761102 JB January 3, 1978  3:43 PM</location>
	<citations>
	<citation>2821	4	2821</citation>
	<citation>3121	4	2821</citation>
	<citation>2709	5	2821</citation>
	<citation>2821	5	2821</citation>
	<citation>2821	5	2821</citation>
	<citation>2821	5	2821</citation>
	</citations>
	</document>
	<document id= '2820'>
	<title>The Design and Implementation of a Table Driven, Interactive Diagnostic Programming System</title>
	<abstract>CAPS is a highly interactive diagnostic compiler/interpreter that allows beginning programmers  to prepare, debug, and execute fairly simple programs at a graphics display terminal.  Complete syntax  checking and most semantic analysis is performed as the program is entered and as it is subsequently edited.  Analysis is performed character by character.  The most remarkable feature of CAPS is its ability  to automatically diagnose errors both at compile time and at run time.  Errors are not automatically  corrected.  Instead, CAPS interacts with the student to help him find the cause of his error.  Most components  of CAPS are table driven, both to reduce the space needed for implementation and to increase the flexibility  of the multilingual system.  Over 500 students have used CAPS to learn Fortran, PL/I, or Cobolin conjunction  with a computer assisted course on introductory computer science.</abstract>
	<conference>CACM November, 1976</conference>
	<authors>
	<author>Wilcox, T. R.</author>
	<author>Davis, A. M.</author>
	<author>Tindall, M. H.</author>
	</authors>
	<keywords>interactive programming, table driven compilers, error correction, interpreters, debugging, computer  assisted instruction, computer science education</keywords>
	<version>1.5 4.12 4.13 4.42 8.2</version>
	<location>CA761103 JB January 3, 1978  3:37 PM</location>
	<citations>
	<citation>1323	4	2820</citation>
	<citation>1358	4	2820</citation>
	<citation>1380	4	2820</citation>
	<citation>1665	4	2820</citation>
	<citation>1781	4	2820</citation>
	<citation>1787	4	2820</citation>
	<citation>1989	4	2820</citation>
	<citation>2112	4	2820</citation>
	<citation>2534	4	2820</citation>
	<citation>2541	4	2820</citation>
	<citation>2698	4	2820</citation>
	<citation>2708	4	2820</citation>
	<citation>2733	4	2820</citation>
	<citation>2820	4	2820</citation>
	<citation>2820	4	2820</citation>
	<citation>2971	4	2820</citation>
	<citation>3045	4	2820</citation>
	<citation>3073	4	2820</citation>
	<citation>3155	4	2820</citation>
	<citation>2534	5	2820</citation>
	<citation>2820	5	2820</citation>
	<citation>2820	5	2820</citation>
	<citation>2820	5	2820</citation>
	<citation>799	5	2820</citation>
	</citations>
	</document>
	<document id= '2819'>
	<title>Experiments in Text File Compression</title>
	<abstract>A system for the compression of data files, viewed as strings of characters, is presented.   The method is general, and applies equally well to English, to PL/I, or to digital data.  The system  consists of an encoder, an analysis program, and a decoder.   Two algorithms for encoding a string differ  slightly from earlier proposals.  The analysis program attempts to find an optimal set of codes for representing  substrings of the file.  Four new algorithms for this operation are described and compared.  Various  parameters in the algorithms are optimized to obtain a high degree of compression for sample texts.</abstract>
	<conference>CACM November, 1976</conference>
	<authors>
	<author>Rubin, F.</author>
	</authors>
	<keywords>text compression, data file compaction, Huffman codes, N-gram encoding, comparison of algorithms</keywords>
	<version>3.7 3.73 4.33</version>
	<location>CA761104 JB January 3, 1978  3:26 PM</location>
	<citations>
	<citation>2530	4	2819</citation>
	<citation>2623	4	2819</citation>
	<citation>2819	4	2819</citation>
	<citation>2537	5	2819</citation>
	<citation>2819	5	2819</citation>
	<citation>2819	5	2819</citation>
	<citation>2819	5	2819</citation>
	</citations>
	</document>
	<document id= '2818'>
	<citations>
	<citation>2818	5	2818</citation>
	<citation>2818	5	2818</citation>
	<citation>2818	5	2818</citation>
	</citations>
	<title>Interference in Multiprocessor Computer Systems with Interleaved Memory (Corrigendum)</title>
	<conference>CACM November, 1976</conference>
	<authors>
	<author>Baskett, F.</author>
	<author>Smith, A. J.</author>
	</authors>
	<location>CA761105 JB January 3, 1978  3:18 PM</location>
	</document>
	<document id= '2817'>
	<title>The Notions of Consistency and Predicate Locks in a Database System</title>
	<abstract>In database systems, users access shared data under the assumption that the data satisfies  certain consistency constraints.  This paper defines the concepts of transaction, consistency and schedule  and shows that consistency requires that a transaction cannot request new locks after releasing a lock.   Then it is argued that a transaction needs to lock a logical rather than a physical subset of the database.   These subsets may be specified by predicates.  An implementation of predicate locks which satisfies  the consistency condition is suggested.</abstract>
	<conference>CACM November, 1976</conference>
	<authors>
	<author>Eswarran, K.</author>
	<author>Gray, J.</author>
	<author>Lorie, R.</author>
	<author>Traiger, I. L.</author>
	</authors>
	<keywords>consistency, lock, database, concurrency, transaction</keywords>
	<version>4.32 4.33</version>
	<location>CA761106 JB January 3, 1978  3:14 PM</location>
	<citations>
	<citation>2155	4	2817</citation>
	<citation>2406	4	2817</citation>
	<citation>2710	4	2817</citation>
	<citation>2715	4	2817</citation>
	<citation>2716	4	2817</citation>
	<citation>2717	4	2817</citation>
	<citation>2718	4	2817</citation>
	<citation>2765	4	2817</citation>
	<citation>2817	4	2817</citation>
	<citation>2888	4	2817</citation>
	<citation>2901	4	2817</citation>
	<citation>2957	4	2817</citation>
	<citation>2959	4	2817</citation>
	<citation>2965	4	2817</citation>
	<citation>3087	4	2817</citation>
	<citation>3154	4	2817</citation>
	<citation>2046	5	2817</citation>
	<citation>2817	5	2817</citation>
	<citation>2817	5	2817</citation>
	<citation>2817	5	2817</citation>
	<citation>3148	5	2817</citation>
	<citation>1860	6	2817</citation>
	<citation>2817	6	2817</citation>
	<citation>2865	6	2817</citation>
	<citation>2939	6	2817</citation>
	<citation>3073	6	2817</citation>
	</citations>
	</document>
	<document id= '2816'>
	<title>Optimal Reorganization of Distributed Space Disk Files</title>
	<abstract>In most database organizations, the cost of accessing the database will increase due to structural  changes caused by updates and insertions.  By reorganizing the database,the access costs can be reduced.   A basic problem is to establish the proper tradeoff between performance, storage costs, and reorganization  costs.  This paper considers the optimum points at which to reorganize a database.  A disk file organization  which allows for distributed free space is described.  A cost function describing the excess costs due  to physical disorganization is defined, and this function is minimized to obtain the optimum reorganization  points.  Numerical examples based on the characteristics of existing disk storage devices are given.</abstract>
	<conference>CACM November, 1976</conference>
	<authors>
	<author>Maruyama, K.</author>
	<author>Smith, S. E.</author>
	</authors>
	<keywords>disk file, free space,retrieval, insertion, deterioration, reorganization</keywords>
	<version>3.70 3.73</version>
	<location>CA761107 JB January 3, 1978  2:59 PM</location>
	<citations>
	<citation>2816	4	2816</citation>
	<citation>2816	4	2816</citation>
	<citation>2816	4	2816</citation>
	<citation>2828	4	2816</citation>
	<citation>2827	4	2816</citation>
	<citation>2913	4	2816</citation>
	<citation>3047	4	2816</citation>
	<citation>3047	4	2816</citation>
	<citation>3129	4	2816</citation>
	<citation>2493	5	2816</citation>
	<citation>2751	5	2816</citation>
	<citation>2816	5	2816</citation>
	<citation>2816	5	2816</citation>
	<citation>2816	5	2816</citation>
	<citation>2829	5	2816</citation>
	<citation>3129	5	2816</citation>
	<citation>2493	6	2816</citation>
	<citation>2816	6	2816</citation>
	</citations>
	</document>
	<document id= '2815'>
	<title>High-Level Binding with Low-Level Linkers</title>
	<abstract>An easy to implement scheme is described by which a compiler can enforce agreement between  complex data types in separately compiled modules.  The scheme is designed to work with any existing  link editor or linking loader, no matter how deficient.  Obscure run-time errors caused by inconsistent  usages are forestalled by static errors detected at linking time.</abstract>
	<conference>CACM November, 1976</conference>
	<authors>
	<author>Hamlet, R. G.</author>
	</authors>
	<keywords>separate compilation, binding, linking, strong typing</keywords>
	<version>4.10 4.22</version>
	<location>CA761108 JB January 3, 1978  2:44 PM</location>
	<citations>
	<citation>2815	5	2815</citation>
	<citation>2815	5	2815</citation>
	<citation>2815	5	2815</citation>
	</citations>
	</document>
	<document id= '2814'>
	<citations>
	<citation>2814	5	2814</citation>
	<citation>2814	5	2814</citation>
	<citation>2814	5	2814</citation>
	</citations>
	<title>Roster of Programming Languages for 1974-75</title>
	<conference>CACM December, 1976</conference>
	<authors>
	<author>Sammet, J. E.</author>
	</authors>
	<location>CA761201 JB January 3, 1978  2:38 PM</location>
	</document>
	<document id= '2813'>
	<title>The Computer Science and Engineering Research Study (COSERS)</title>
	<abstract>The Computer Science and Engineering Research Study (COSERS) is briefly described.  The motivation,  organization, and schedule for this NSF supported study are given.  For possible further reference, the  subject area panel chairmen and the members of the Steering Committee are identified.</abstract>
	<conference>CACM December, 1976</conference>
	<authors>
	<author>Arden, B.</author>
	</authors>
	<keywords>computer science research, computer engineering research, national research study</keywords>
	<version>1.0 1.52</version>
	<location>CA761202 JB January 3, 1978  2:35 PM</location>
	<citations>
	<citation>2813	5	2813</citation>
	<citation>2813	5	2813</citation>
	<citation>2813	5	2813</citation>
	</citations>
	</document>
	<document id= '2812'>
	<title>Computer-Aided Analysis and Design of Information Systems</title>
	<abstract>This paper describes the use of computer-aided analysis for the design and development of an  integrated financial management system by the Navy Material Command Support Activity (NMCSA).  Computer-aided  analysis consists of a set of procedures and computer programs specifically designed to aid in the process  of applications software design, computer selection and performance evaluation.  There are four major  components: Problem Statement Language, Problem Statement Analyzer, Generator of Alternative Designs,  and Performance Evaluator. The statement of requirements was written in ADS (Accurately Defined Systems)  and analyzed by a Problem Statement Analyzer for ADS.  The ADS problem definition was supplemented with  additional information in order to create a complete problem definition.  The analyzed problem statement  was translated to the form necessary for use by the SODA (Systems Optimization and Design Algorithm) program for the generation of alternative specifications of program modules and logical database structures.</abstract>
	<conference>CACM December, 1976</conference>
	<authors>
	<author>Nunamaker, J. F. Jr.</author>
	<author>Konsynski, B. R. Jr.</author>
	<author>Ho, T.</author>
	<author>Singer, C.</author>
	</authors>
	<keywords>computer-aided analysis, information systems, logical system design, problem statement language,  problem statement analyzer, physical system design, accurately defined systems, systems optimization  and design algorithm</keywords>
	<version>2.44 3.50 4.33 4.9 8.1</version>
	<location>CA761203 JB January 3, 1978  2:31 PM</location>
	<citations>
	<citation>2812	5	2812</citation>
	<citation>2812	5	2812</citation>
	<citation>2812	5	2812</citation>
	</citations>
	</document>
	<document id= '2811'>
	<title>Structural Pattern Recognition Of Carotid Pulse Waves Using A General Waveform Parsing System</title>
	<abstract>A general waveform parsing system with application to structural pattern recognition of carotid  pulse waves is described.  The carotid arterial pulse wave is of medical importance because of variation  in its structure induced by arterial aging and cardiovascular disease.  The syntax-driven waveform analysis  system has been applied with good results to these pulse waves to detect and measure structural variations.   The waveform parsing system is modeled on a compiler-compiler system and allows the user to enter application  specific information as data.  It is thus general enough to be applicable to other waveforms.</abstract>
	<conference>CACM December, 1976</conference>
	<authors>
	<author>Stockman, G.</author>
	<author>Kanal, L.</author>
	<author>Kyle, M. C.</author>
	</authors>
	<keywords>structural pattern recognition, parsing, waveform analysis, pulse waves</keywords>
	<version>3.12 3.34 3.63 4.12</version>
	<location>CA761204 JB January 3, 1978  1:43 PM</location>
	<citations>
	<citation>2811	5	2811</citation>
	<citation>2811	5	2811</citation>
	<citation>2811	5	2811</citation>
	</citations>
	</document>
	<document id= '2810'>
	<title>Professionalism in the Computing Field</title>
	<abstract>The term professional means different things to different people; nevertheless, there are certain  general technical and social standards normally associated with a professional.  Further, the term is  more generally applied to the practitioner rather than to the researcher.  But within the rather broad  definition specified, the computing practitioner is, as yet, not regarded as a professional.  Each of  the four types of institutions-academic, industry, government, and the professional society- that educate, employ, regulate, and mold the practitioner contributes to the "nonprofessional" status of the computing  practitioner.  The roles of these institutions are examined, various shortcomings are noted, and recommended  changes are suggested.  In the last analysis, professional status is not bestowed; it is earned.  However,  universities and industry, specifically, can make certain  improvements to help the computing practitioner  achieve professional status.</abstract>
	<conference>CACM January, 1975</conference>
	<authors>
	<author>Finerman, A.</author>
	</authors>
	<keywords>professional aspects, educational programs, industry attitudes, professional societies, licensing  and certification</keywords>
	<version>1.50 2.10 2.2</version>
	<location>CA750101 JB January 12, 1978  11:05 AM</location>
	<citations>
	<citation>2810	5	2810</citation>
	<citation>2810	5	2810</citation>
	<citation>2810	5	2810</citation>
	</citations>
	</document>
	<document id= '2809'>
	<title>Positivity and Norms</title>
	<abstract>Following some lines of joint work with A. S. Householder, the character and use of algebraic  methods in the theory of norms is demonstrated.  New results concerning norms with values in an Archimedian  vector lattice (not necessarily being totally ordered) are given, in particular for the generalization  of order unit norms, L-norms and M-norms.  An example of application to operator norms is given concerning  contraction properties of positive operators.</abstract>
	<conference>CACM January, 1975</conference>
	<authors>
	<author>Bauer, F. L.</author>
	</authors>
	<keywords>matrices, norms, positivity, numerical range, positivity cones, vector lattice,absolute, monotonic</keywords>
	<version>5.11 5.14</version>
	<location>CA750102 JB January 12, 1978  10:56 AM</location>
	<citations>
	<citation>2809	5	2809</citation>
	<citation>2809	5	2809</citation>
	<citation>2809	5	2809</citation>
	</citations>
	</document>
	<document id= '2808'>
	<title>The Lemniscate Constants</title>
	<abstract>The lemniscate constants, and indeed some of the methods used for actually computing them,  have played an enormous part in the development of mathematics.  An account is given here of some of  the methods used-most of the derivations can be made by elementary methods.  This material can be used  for teaching purposes, and there is much relevant and interesting historical material.  The acceleration  methods developed for the purpose of evaluating these constants are useful in other problems.</abstract>
	<conference>CACM January, 1975</conference>
	<authors>
	<author>Todd, J.</author>
	</authors>
	<keywords>lemniscate, acceleration, elliptic functions, Euler transformation</keywords>
	<version>1.2 5.0</version>
	<location>CA750103 JB January 12, 1978  10:51 AM</location>
	<citations>
	<citation>2808	5	2808</citation>
	<citation>2808	5	2808</citation>
	<citation>2808	5	2808</citation>
	</citations>
	</document>
	<document id= '2807'>
	<title>On the Stability of Gauss-Jordan Elimination with Pivoting</title>
	<abstract>The stability of the Gauss-Jordan algorithm with partial pivoting for the solution of general  systems of linear equations is commonly regarded as suspect.  It is shown that in many respects suspicions  are unfounded, and in general the absolute error in the solution is strictly comparable with that corresponding  to Gaussian elimination with partial pivoting plus back substitution.  However, when A is ill conditioned,  the residual corresponding to the Gauss-Jordan solution will often be much greater than that corresponding  to the Gaussian elimination solution.</abstract>
	<conference>CACM January, 1975</conference>
	<authors>
	<author>Peters, G.</author>
	<author>Wilkinson, J. H.</author>
	</authors>
	<keywords>Gauss-Jordan algorithm, Gaussian elimination, back-substitution, backward error analysis, bounds  for error in solution, bound for residual</keywords>
	<version>5.11 5.14</version>
	<location>CA750104 JB January 12, 1978  10:44 AM</location>
	<citations>
	<citation>2807	5	2807</citation>
	<citation>2807	5	2807</citation>
	<citation>2807	5	2807</citation>
	</citations>
	</document>
	<document id= '2806'>
	<title>Two Hadamard Numbers for Matrices</title>
	<abstract>A discussion is given of two functions of the entries of a square matrix, both related to Hadamard's  determinant theorem, which have some merits as alternatives to norm-bound "condition numbers."  One (for  linear systems) is known; the other (for eigen systems) seems to be new.</abstract>
	<conference>CACM January, 1975</conference>
	<authors>
	<author>Birkhoff, G.</author>
	</authors>
	<keywords>matrices, eigenvalues, norms, condition numbers, error analysis, Gram-Schmidt orthogonalization</keywords>
	<version>5.11 5.14</version>
	<location>CA750105 JB January 12, 1978  10:37 AM</location>
	<citations>
	<citation>2806	5	2806</citation>
	<citation>2806	5	2806</citation>
	<citation>2806	5	2806</citation>
	</citations>
	</document>
	<document id= '2805'>
	<title>Perturbations of Eigenvalues of Non-normal Matrices</title>
	<abstract>The problem considered is to give bounds for finite perturbations of simple and multiple eigenvalues  of nonnormal matrices, where these bounds are in terms of the eigenvalues, the departure from normality,  and the Frobenius norm of the perturbation matrix, but not in terms of the eigen system.  The bounds which  are derived are shown to be almost attainable for any set of matrices.</abstract>
	<conference>CACM January, 1975</conference>
	<authors>
	<author>Sluis, A.</author>
	</authors>
	<keywords>perturbation of eigenvalues, non-normal matrices, departure from normality, Gershgorin circles</keywords>
	<version>5.14</version>
	<location>CA750106 JB January 12, 1978  10:31 AM</location>
	<citations>
	<citation>2805	5	2805</citation>
	<citation>2805	5	2805</citation>
	<citation>2805	5	2805</citation>
	</citations>
	</document>
	<document id= '2804'>
	<title>Elementary Divisors of Tensor Products</title>
	<abstract>The elementary divisors of a tensor product of linear transformations have been known for 40  years.  This paper provides a short, easily accessible proof of these results, and points out an interesting  combinatorial consequence of the proof.</abstract>
	<conference>CACM January, 1975</conference>
	<authors>
	<author>Marcus, M.</author>
	<author>Robinson, H.</author>
	</authors>
	<keywords>elementary divisors, tensor products, linear transformations</keywords>
	<version>5.14</version>
	<location>CA750107 JB January 12, 1978  10:13 AM</location>
	<citations>
	<citation>2804	5	2804</citation>
	<citation>2804	5	2804</citation>
	<citation>2804	5	2804</citation>
	</citations>
	</document>
	<document id= '2803'>
	<title>Pseudoinverses and Conjugate Gradients</title>
	<abstract>This paper is devoted to the study of connections between pseudoinverses of matrices and conjugate  gradients and conjugate direction routines.</abstract>
	<conference>CACM January, 1975</conference>
	<authors>
	<author>Hestenes, M. R.</author>
	</authors>
	<keywords>pseudoinverse, conjugate gradients, hermitian matrix, minimization</keywords>
	<version>5.14</version>
	<location>CA750108 JB January 12, 1978  10:08 AM</location>
	<citations>
	<citation>2803	5	2803</citation>
	<citation>2803	5	2803</citation>
	<citation>2803	5	2803</citation>
	</citations>
	</document>
	<document id= '2802'>
	<title>The New Math of Computer Programming</title>
	<abstract>Structured programming has proved to be an important methodology for systematic program design  and development.  Structured programs are identified as compound function expressions in the algebra  of functions. The algebraic properties of these function expressions permit the reformulation (expansion  as well as reduction) of a nested subexpression independently of its environment, thus modeling what  is known as stepwise program refinement as well as program execution.  Finally, structured programming  is characterized in terms of the selection and solution of certain elementary equations defined in the  algebra of functions.  These solutions can be given in general formulas, each involving a single parameter,  which display the entire freedom available in creating correct structured programs.</abstract>
	<conference>CACM January, 1975</conference>
	<authors>
	<author>Mills, H. D.</author>
	</authors>
	<keywords>structured programming, algebra of functions, stepwise refinement, program correctness</keywords>
	<version>4.6 5.21 5.24</version>
	<location>CA750109 JB January 12, 1978  9:50 AM</location>
	<citations>
	<citation>2709	4	2802</citation>
	<citation>2802	4	2802</citation>
	<citation>3004	4	2802</citation>
	<citation>1425	5	2802</citation>
	<citation>2802	5	2802</citation>
	<citation>2802	5	2802</citation>
	<citation>2802	5	2802</citation>
	</citations>
	</document>
	<document id= '2801'>
	<title>Storage-Efficient Representation of Decimal Data</title>
	<abstract>Usually n decimal digits are represented by 4n bits in computers.  Actually, two BCD digits  can be compressed optimally and reversibly into 7 bits, and three digits into 10 bits, by a very simple  algorithm based on the fixed-length combination of two variable field-length encodings.  In over half  of the cases the compressed code results from the conventional BCD code by simple removal of redundant  0 bits.  A long decimal message can be subdivided into three-digit blocks, and separately compressed;  the result differs from the asymptotic minimum length by only 0.34 percent.  The hardware requirement  is small, and the mappings can be done manually.</abstract>
	<conference>CACM January, 1975</conference>
	<authors>
	<author>Chen, T.</author>
	<author>Ho, I. T.</author>
	</authors>
	<keywords>binary-coded decimal digits, decimal data storage</keywords>
	<version>6.32 6.34</version>
	<location>CA750110 JB January 12, 1978  9:42 AM</location>
	<citations>
	<citation>2729	5	2801</citation>
	<citation>2801	5	2801</citation>
	<citation>2801	5	2801</citation>
	<citation>2801	5	2801</citation>
	<citation>2288	6	2801</citation>
	<citation>2801	6	2801</citation>
	</citations>
	</document>
	<document id= '2800'>
	<title>Connections Between Accuracy and Stability Properties of Linear Multistep Formulas</title>
	<abstract>This paper is concerned with stability and accuracy of families of linear k-step formulas depending  on parameters, with particular emphasis on the numerical solution of stiff ordinary differential equations.   An upper bound, p=k, is derived for the order of accuracy of A(inf)-stable formulas.  Three criteria  are given for A(0)-stability.  It is shown that (1) for p=k, k arbitrary, A(inf)-stability implies certain  necessary conditions for A(0)-stability and for strict stability (meaning that the extraneous roots of  p(psi) satisfy |psi|&amp;lt;1); (2) for p=k=2,3,4,and 5, A(inf)-stability (for k=5 together with another constraint)  implies strict stability; and (3) for certain one-parameter classes of formulas with p=k=3,4,and/or 5,  A(inf)-stability implies A(0)-stability.</abstract>
	<conference>CACM January, 1975</conference>
	<authors>
	<author>Liniger, W.</author>
	</authors>
	<keywords>stiff equations, parametrized linear multistep formulas, order of accuracy, A(0)-stability, A(inf)-stability,  strict stability</keywords>
	<version>5.17</version>
	<location>CA750111 JB January 12, 1978  9:26 AM</location>
	<citations>
	<citation>2800	5	2800</citation>
	<citation>2800	5	2800</citation>
	<citation>2800	5	2800</citation>
	</citations>
	</document>
	<document id= '2799'>
	<title>Stably Updating Mean and Standard Deviation of Data</title>
	<abstract>By considering the (sample) mean of a set of data as a fit to this data by a constant function,  a computational method is given based on a matrix formulation and Givens transformations. The (sample)  mean and standard deviation can be updated as data accumulates.  The procedure is numerically stable  and does not require storage of the data.  Methods for dealing with weighted data and data removal are  presented.  When updating the mean and square of the standard deviation, the process requires no square  roots.</abstract>
	<conference>CACM January, 1975</conference>
	<authors>
	<author>Hanson, R. J.</author>
	</authors>
	<keywords>mean, standard deviation, least squares, Givens transformation, updating estimates, removing data</keywords>
	<version>5.5 5.19</version>
	<location>CA750112 JB January 12, 1978  9:05 AM</location>
	<citations>
	<citation>2731	5	2799</citation>
	<citation>2799	5	2799</citation>
	<citation>2799	5	2799</citation>
	<citation>2799	5	2799</citation>
	<citation>3159	5	2799</citation>
	<citation>3166	5	2799</citation>
	<citation>3167	5	2799</citation>
	<citation>1411	6	2799</citation>
	<citation>2731	6	2799</citation>
	<citation>2731	6	2799</citation>
	<citation>2731	6	2799</citation>
	<citation>2799	6	2799</citation>
	<citation>2799	6	2799</citation>
	<citation>2799	6	2799</citation>
	<citation>2799	6	2799</citation>
	<citation>3159	6	2799</citation>
	<citation>3167	6	2799</citation>
	<citation>3166	6	2799</citation>
	</citations>
	</document>
	<document id= '2798'>
	<title>Analysis of Interleaved Memory Systems Using Blockage Buffers</title>
	<abstract>A model of interleaved memory systems is presented, and the analysis of the model by Monte  Carlo simulation is discussed.  The simulations investigate the performance of various system structures,  i.e. schemes for sending instruction and data requests to the memory system.  Performance is measured  by determining the distribution of the number of memory modules in operation during a memory cycle.   An important observation from these investigations is that separately grouping instruction and data requests  for memory can substantially increase the average number of memory modules in operation during a memory  cycle.  Results of the simulations and an analytical study are displayed for various system structures.</abstract>
	<conference>CACM February, 1975</conference>
	<authors>
	<author>Burnett, G. J.</author>
	<author>Coffman, E. G. Jr.</author>
	</authors>
	<keywords>interleaved memory systems, modular memory systems, memory performance analysis, blockage buffer,  conflict buffer, simulation, Monte Carolo simulation</keywords>
	<version>5.5 6.34</version>
	<location>CA750201 JB January 12,1978  8:54 AM</location>
	<citations>
	<citation>2798	5	2798</citation>
	<citation>2798	5	2798</citation>
	<citation>2798	5	2798</citation>
	<citation>3119	5	2798</citation>
	<citation>2245	6	2798</citation>
	<citation>2798	6	2798</citation>
	<citation>2849	6	2798</citation>
	<citation>2859	6	2798</citation>
	</citations>
	</document>
	<document id= '2797'>
	<citations>
	<citation>2797	5	2797</citation>
	<citation>2797	5	2797</citation>
	<citation>2797	5	2797</citation>
	</citations>
	<title>A First Order Approximation to the Optimal Checkpoint Interval (Corrigendum)</title>
	<conference>CACM February, 1975</conference>
	<authors>
	<author>Young, J. W.</author>
	</authors>
	<location>CA750202 JB January 12, 1978  8:47 AM</location>
	</document>
	<document id= '2796'>
	<citations>
	<citation>2796	5	2796</citation>
	<citation>2796	5	2796</citation>
	<citation>2796	5	2796</citation>
	<citation>2866	5	2796</citation>
	<citation>2356	6	2796</citation>
	<citation>2597	6	2796</citation>
	<citation>2796	6	2796</citation>
	</citations>
	<title>Monitors: An Operating System Structuring Concept (Corrigendum)</title>
	<conference>CACM February, 1975</conference>
	<authors>
	<author>Hoare, C. A. R.</author>
	</authors>
	<location>CA750203 JB January 12, 1978  8:45 AM</location>
	</document>
	<document id= '2795'>
	<title>Sentence Paraphrasing from a Conceptual Base</title>
	<abstract>A model of natural language based on an underlying language-free representation of meaning  is described.  A program based on this model is able to produce sentence paraphrases which demonstrate  understanding with respect to a given context.  This generator operates in conjunction with a natural  language analyzer and a combined memory and inference model.  In generating sentences from meaning structures,  the program employs both the information retrieval and deduction capabilities of the memory model.  The  model encompasses several diverse classes of linguistic knowledge, which include: (1) executable tests  of conceptual properties stored in discrimination nets; (2) information relating conceptual to syntactic  roles, stored in a word-sense dictionary, and (3) surface grammatical knowledge, stored in a formal grammar.</abstract>
	<conference>CACM February, 1975</conference>
	<authors>
	<author>Goldman, N. M.</author>
	</authors>
	<keywords>artificial intelligence, natural language processing, language generation, models of cognitive  processes, semantic representation</keywords>
	<version>3.42 3.60 3.65</version>
	<location>CA750204 JB January 12, 1978  8:43 AM</location>
	<citations>
	<citation>1885	4	2795</citation>
	<citation>2581	4	2795</citation>
	<citation>2739	4	2795</citation>
	<citation>2795	4	2795</citation>
	<citation>2795	4	2795</citation>
	<citation>2795	4	2795</citation>
	<citation>2921	4	2795</citation>
	<citation>3087	4	2795</citation>
	<citation>1928	5	2795</citation>
	<citation>1989	5	2795</citation>
	<citation>2274	5	2795</citation>
	<citation>2795	5	2795</citation>
	<citation>2795	5	2795</citation>
	<citation>2795	5	2795</citation>
	</citations>
	</document>
	<document id= '2794'>
	<title>State-Space, Problem-Reduction, and Theorem Proving-Some Relationships</title>
	<abstract>This paper suggests a bidirectional relationship between state-space and problem-reduction  representations. It presents a formalism based on multiple-input and multiple-output operators which  provides a basis for viewing the two types of representations in this manner.  A representation of the  language recognition problem which is based on the Cocke parsing algorithm is used as an illustration.   A method for representing problems in first-order logic in such a way that the inference system employed  by a resolution-based theorem prover determines whether the set of clauses is interpreted in the state-spacer  mode or in the problem-reduction mode is presented.  The analogous concepts in problem-reduction and  theorem proving, and the terminology used to refer to them, are noted.  The relationship between problem-reduction,  input resolution, and linear resolution is discussed.</abstract>
	<conference>CACM February, 1975</conference>
	<authors>
	<author>VanderBrug, G. J.</author>
	<author>Minker, J.</author>
	</authors>
	<keywords>artificial intelligence, state-space representation, problem-reduction representation, theorem  proving, language recognition</keywords>
	<version>3.64</version>
	<location>CA750205 JB January 12, 1978  8:27 AM</location>
	<citations>
	<citation>2794	5	2794</citation>
	<citation>2794	5	2794</citation>
	<citation>2794	5	2794</citation>
	</citations>
	</document>
	<document id= '2793'>
	<citations>
	<citation>2467	4	2793</citation>
	<citation>2793	4	2793</citation>
	<citation>1606	5	2793</citation>
	<citation>2793	5	2793</citation>
	<citation>2793	5	2793</citation>
	<citation>2793	5	2793</citation>
	</citations>
	<title>Chi-Square Quantiles (Algorithm C451)</title>
	<conference>CACM February, 1975</conference>
	<authors>
	</authors>
	<location>CA750206 JB January 10, 1978  9:40 AM</location>
	</document>
	<document id= '2792'>
	<citations>
	<citation>2647	4	2792</citation>
	<citation>2792	4	2792</citation>
	<citation>2792	4	2792</citation>
	<citation>2267	5	2792</citation>
	<citation>2647	5	2792</citation>
	<citation>2792	5	2792</citation>
	<citation>2792	5	2792</citation>
	<citation>2792	5	2792</citation>
	</citations>
	<title>Jacobi Polynomials (Algorithm R332)</title>
	<conference>CACM February, 1975</conference>
	<authors>
	<author>Skovgaard, O.</author>
	</authors>
	<location>CA750207 JB January 10, 1978  9:32 AM</location>
	</document>
	<document id= '2791'>
	<citations>
	<citation>2791	5	2791</citation>
	<citation>2791	5	2791</citation>
	<citation>2791	5	2791</citation>
	</citations>
	<title>Exact Probabilities for R x C Contingency Tables (Algorithm R434)</title>
	<conference>CACM February, 1975</conference>
	<authors>
	<author>Hancock, T. W.</author>
	</authors>
	<location>CA750208 JB January 12, 1978  2:55 PM</location>
	</document>
	<document id= '2790'>
	<citations>
	<citation>2790	5	2790</citation>
	<citation>2790	5	2790</citation>
	<citation>2790	5	2790</citation>
	</citations>
	<title>The Elementary Circuits of a Graph (Algorithm R459)</title>
	<conference>CACM February, 1975</conference>
	<authors>
	<author>Syslo, M. M.</author>
	</authors>
	<location>CA750209 JB January 12, 1978  2:54 PM</location>
	</document>
	<document id= '2789'>
	<citations>
	<citation>2789	5	2789</citation>
	<citation>2789	5	2789</citation>
	<citation>2789	5	2789</citation>
	</citations>
	<title>A Minimal Spanning Tree Clustering Method (Algorithm R479)</title>
	<conference>CACM February, 1975</conference>
	<authors>
	<author>Magnuski, H. S.</author>
	</authors>
	<location>CA750210 JB January 12, 1978  2:52 PM</location>
	</document>
	<document id= '2788'>
	<title>Finding Circles by an Array of Accumulators</title>
	<conference>CACM February, 1975</conference>
	<authors>
	<author>Kimme, C.</author>
	<author>Balard, D.</author>
	<author>Sklansky, J.</author>
	</authors>
	<keywords>picture processing, pattern recognition, curve detection,line fitting</keywords>
	<version>3.63</version>
	<location>CA750211 JB January 10, 1978  9:15 AM</location>
	<citations>
	<citation>2788	4	2788</citation>
	<citation>2910	4	2788</citation>
	<citation>2400	5	2788</citation>
	<citation>2788	5	2788</citation>
	<citation>2788	5	2788</citation>
	<citation>2788	5	2788</citation>
	<citation>2910	5	2788</citation>
	<citation>2400	6	2788</citation>
	<citation>2788	6	2788</citation>
	</citations>
	</document>
	<document id= '2787'>
	<title>Matrix Reduction-An Efficient Method</title>
	<abstract>The paper describes an efficient method for reduction of the binary matrices which arise in  some school time-tabling problems.  It is a development of that described by John Lions.  It has been  generalized and adapted to fit into the complete timetabling process; to use a more compact data representation  and more efficient processing techniques; to take fuller advantage of possible available previous knowledge  about the matrix.  And it is designed as a structured program, which can readily be coded by the reader  in the high level or low level programming language of his choice.  Practical tests of the method have  shown it to be a good basis for a realistic timetabling algorithm.</abstract>
	<conference>CACM March, 1975</conference>
	<authors>
	<author>Johnston, H. C.</author>
	<author>Hoare, C. A. R.</author>
	</authors>
	<keywords>binary matrices, matrix reduction, tight set, school timetable construction, structured programming</keywords>
	<version>3.51 4.9 5.39</version>
	<location>CA750301 JB January 10, 1978  9:03 AM</location>
	<citations>
	<citation>1367	4	2787</citation>
	<citation>2619	4	2787</citation>
	<citation>2772	4	2787</citation>
	<citation>2772	4	2787</citation>
	<citation>2787	4	2787</citation>
	<citation>2787	4	2787</citation>
	<citation>1116	5	2787</citation>
	<citation>1429	5	2787</citation>
	<citation>2787	5	2787</citation>
	<citation>2787	5	2787</citation>
	<citation>2787	5	2787</citation>
	</citations>
	</document>
	<document id= '2786'>
	<title>A System for Typesetting Mathematics</title>
	<abstract>This paper describes the design and implementation of a system for typesetting mathematics.   The language has been designed to be easy to learn and to use by people (for example, secretaries and  mathematical typists) who know neither mathematics nor typesetting.  Experience indicates that the language  can be learned in an hour or so, for it has few rules and fewer exceptions.  For typical expressions,  the size and font changes, positioning, line drawing, and the like necessary to print according to mathematical  conventions are all done automatically.  For example, the input sum from i=o to infinity x sub i=pi over  2 produces (formula).  The syntax of the language is specified by a small context-free grammar; a compiler-compiler  is used to make a compiler that translates this language into typesetting commands.  Output maybe produced  on either a phototypesetter or on a terminal with forward and reverse half-line motions.  The system  interfaces directly with text formatting programs, so mixtures of text and mathematics may be handled  simply.  This paper was typeset by the authors using the system described</abstract>
	<conference>CACM March, 1975</conference>
	<authors>
	<author>Kernighan, B. W.</author>
	<author>Cherry, L. L.</author>
	</authors>
	<keywords>typesetting, photocomposition,compiler-compiler, graphics, printing, text processing.</keywords>
	<version>4.12 4.22 8.2</version>
	<location>CA750302 JB January 10, 1978  8:56 AM</location>
	<citations>
	<citation>2626	4	2786</citation>
	<citation>2786	4	2786</citation>
	<citation>2840	4	2786</citation>
	<citation>2919	4	2786</citation>
	<citation>3017	4	2786</citation>
	<citation>3110	4	2786</citation>
	<citation>3174	4	2786</citation>
	<citation>2629	5	2786</citation>
	<citation>2733	5	2786</citation>
	<citation>2746	5	2786</citation>
	<citation>2786	5	2786</citation>
	<citation>2786	5	2786</citation>
	<citation>2786	5	2786</citation>
	<citation>1665	6	2786</citation>
	<citation>1739	6	2786</citation>
	<citation>1781	6	2786</citation>
	<citation>2139	6	2786</citation>
	<citation>2179	6	2786</citation>
	<citation>2423	6	2786</citation>
	<citation>2545	6	2786</citation>
	<citation>2786	6	2786</citation>
	<citation>2786	6	2786</citation>
	<citation>799	6	2786</citation>
	</citations>
	</document>
	<document id= '2785'>
	<title>Glypnir-A Programming Language for Illiac IV</title>
	<abstract>GLYPNIR is one of the earliest existing languages designed for programming the Illiac IV computer.  The syntax of the language is based on ALGOL 60, but has been extended to allow the programmer explicitly  to specify the parallelism of his algorithm in terms of 64-word vectors.  This paper describes the characteristics,  goals and philosophy of the language, and discusses some of the problems associated with parallel computer  architectures.</abstract>
	<conference>CACM March, 1975</conference>
	<authors>
	<author>Lawrie, D. H.</author>
	<author>Layman, T.</author>
	<author>Baer, D.</author>
	<author>Randal, J. M.</author>
	</authors>
	<keywords>GLYPNIR, Illiac IV, Programming language, parallel computation, parallel architecture</keywords>
	<version>4.2 4.21 4.22</version>
	<location>CA750303JB January 9, 1978  4:57 PM</location>
	<citations>
	<citation>2785	4	2785</citation>
	<citation>2785	4	2785</citation>
	<citation>2876	4	2785</citation>
	<citation>2433	5	2785</citation>
	<citation>2685	5	2785</citation>
	<citation>2785	5	2785</citation>
	<citation>2785	5	2785</citation>
	<citation>2785	5	2785</citation>
	</citations>
	</document>
	<document id= '2784'>
	<title>Expected Time Bounds for Selection</title>
	<abstract>A new selection algorithm is presented which is shown to be very efficient on the average,  both theoretically and practically.  The number of comparisons used to select the ith smallest of n numbers  is n+min(i,n-i)+o(n).  A lower bound within 9 percent of the above formula is also derived.</abstract>
	<conference>CACM March, 1975</conference>
	<authors>
	<author>Floyd, R. W.</author>
	<author>Rivest, R. L.</author>
	</authors>
	<keywords>selection, computational complexity, medians, tournaments, quantiles</keywords>
	<version>5.30 5.39</version>
	<location>CA750304 JB January 9, 1978  4:52 PM</location>
	<citations>
	<citation>1919	4	2784</citation>
	<citation>2191	4	2784</citation>
	<citation>2388	4	2784</citation>
	<citation>2783	4	2784</citation>
	<citation>2784	4	2784</citation>
	<citation>2784	4	2784</citation>
	<citation>2784	4	2784</citation>
	<citation>3054	4	2784</citation>
	<citation>3121	4	2784</citation>
	<citation>864	4	2784</citation>
	<citation>1729	5	2784</citation>
	<citation>309	5	2784</citation>
	<citation>2783	5	2784</citation>
	<citation>2784	5	2784</citation>
	<citation>2784	5	2784</citation>
	<citation>2784	5	2784</citation>
	<citation>2837	5	2784</citation>
	<citation>2784	6	2784</citation>
	<citation>2842	6	2784</citation>
	</citations>
	</document>
	<document id= '2783'>
	<title>The Algorithm SELECT-for Finding the ith Smallest of n Elements [M1] (Algorithm 489)</title>
	<conference>CACM March, 1975</conference>
	<authors>
	<author>Floyd, R. W.</author>
	<author>Rivest, R. L.</author>
	</authors>
	<keywords>selection, medians, quantiles</keywords>
	<version>5.30 5.39</version>
	<location>CA750305 JB January 9, 1978  4:43 PM</location>
	<citations>
	<citation>1919	4	2783</citation>
	<citation>2191	4	2783</citation>
	<citation>2227	4	2783</citation>
	<citation>2388	4	2783</citation>
	<citation>2783	4	2783</citation>
	<citation>2783	4	2783</citation>
	<citation>2784	4	2783</citation>
	<citation>3054	4	2783</citation>
	<citation>3054	4	2783</citation>
	<citation>3121	4	2783</citation>
	<citation>864	4	2783</citation>
	<citation>307	5	2783</citation>
	<citation>309	5	2783</citation>
	<citation>2783	5	2783</citation>
	<citation>2783	5	2783</citation>
	<citation>2783	5	2783</citation>
	<citation>2784	5	2783</citation>
	<citation>1729	6	2783</citation>
	<citation>309	6	2783</citation>
	<citation>2783	6	2783</citation>
	</citations>
	</document>
	<document id= '2782'>
	<title>A Reply to Gentleman and Marovich</title>
	<conference>CACM March, 1975</conference>
	<authors>
	<author>Karp, R. A.</author>
	</authors>
	<keywords>high-level languages, philosophy of language design</keywords>
	<version>4.22 5.19</version>
	<location>CA750306 JB January 9, 1978  4:38 PM</location>
	<citations>
	<citation>2782	5	2782</citation>
	<citation>2782	5	2782</citation>
	<citation>2782	5	2782</citation>
	</citations>
	</document>
	<document id= '2781'>
	<title>The Algorithm Sequential Access Method: An Alternative to Index Sequential</title>
	<conference>CACM March, 1975</conference>
	<authors>
	<author>Whitt, J. D.</author>
	<author>Sullenberger, A. G.</author>
	</authors>
	<keywords>keys, direct access method, sequential access method, randomizing information retrieval</keywords>
	<version>3.7</version>
	<location>CA750307 JB January 9, 1978  4:37 PM</location>
	<citations>
	<citation>2258	4	2781</citation>
	<citation>2319	4	2781</citation>
	<citation>2313	4	2781</citation>
	<citation>2359	4	2781</citation>
	<citation>2437	4	2781</citation>
	<citation>2552	4	2781</citation>
	<citation>2781	4	2781</citation>
	<citation>2860	4	2781</citation>
	<citation>2991	4	2781</citation>
	<citation>2203	5	2781</citation>
	<citation>2781	5	2781</citation>
	<citation>2781	5	2781</citation>
	<citation>2781	5	2781</citation>
	</citations>
	</document>
	<document id= '2780'>
	<title>On Computing Certain Elements of the Inverse of a Sparse Matrix</title>
	<abstract>A recursive algorithm for computing the inverse of a matrix from the LU factors based on relationships  in Takahashi, et al., is examined.  The formulas for the algorithm are given; the dependency relationships  are derived; the computational costs are developed; and some general comments on application and stability  are made.</abstract>
	<conference>CACM March, 1975</conference>
	<authors>
	<author>Erisman, E. M.</author>
	<author>Tinney, W. F.</author>
	</authors>
	<keywords>sparse matrices, triangular factorization, elements of inverse, tridiagonal matrix, sensitivities</keywords>
	<version>3.24 5.14</version>
	<location>CA750308 JB January 9, 1978  4:34 PM</location>
	<citations>
	<citation>2780	5	2780</citation>
	<citation>2780	5	2780</citation>
	<citation>2780	5	2780</citation>
	</citations>
	</document>
	<document id= '2779'>
	<title>Discrete Least Squares Polynomial Fits</title>
	<abstract>The recurrence relation between orthogonal polynomials is widely used for discrete least squares  data fitting.  A variant of the classical algorithm which has better numerical properties is presented  and the reason for its improved performance is explained.</abstract>
	<conference>CACM March, 1975</conference>
	<authors>
	<author>Shampine, L. F.</author>
	</authors>
	<keywords>orthogonal polynomials, data fitting, least squares, recurrence relation between orthogonal polynomials,  residual</keywords>
	<version>5.11 5.13</version>
	<location>CA750309 JB January 9, 1978  4:29 PM</location>
	<citations>
	<citation>2779	5	2779</citation>
	<citation>2779	5	2779</citation>
	<citation>2779	5	2779</citation>
	</citations>
	</document>
	<document id= '2778'>
	<citations>
	<citation>2778	5	2778</citation>
	<citation>2778	5	2778</citation>
	<citation>2778	5	2778</citation>
	</citations>
	<title>Perturbations of Eigenvalues of Non-normal Matrices (Corrigendum)</title>
	<conference>CACM March, 1975</conference>
	<authors>
	<author>Sluis, A.</author>
	</authors>
	<location>CA750310 JB January 9, 1978  4:26 PM</location>
	</document>
	<document id= '2777'>
	<title>On a Solution to the Cigarette Smoker's Problem (Without Conditional Statements)</title>
	<abstract>This report discusses a problem first introduced by Patil, who has claimed that the cigarette  smoker's problem cannot be solved using the P and V operations introduced by Dijkstra unless conditional  statements are used.  An examination of Patil's proof shows that he has established this claim only under  strong restrictions on the use of P and V.  These restrictions eliminate programming techniques used  by Dijkstra and others since the first introduction of the semaphore concept.  This paper contains a  solution to the problem.  It also discusses the need for the generalized operators suggested by Patil.</abstract>
	<conference>CACM March, 1975</conference>
	<authors>
	<author>Parnas, D. L.</author>
	</authors>
	<keywords>operating systems, co-operating processes,process synchronization primitives</keywords>
	<version>4.3</version>
	<location>CA750311 JB January 9, 1978  4:24 PM</location>
	<citations>
	<citation>2320	4	2777</citation>
	<citation>2597	4	2777</citation>
	<citation>2777	4	2777</citation>
	<citation>2851	4	2777</citation>
	<citation>2895	4	2777</citation>
	<citation>2912	4	2777</citation>
	<citation>2946	4	2777</citation>
	<citation>3128	4	2777</citation>
	<citation>2150	5	2777</citation>
	<citation>2738	5	2777</citation>
	<citation>2777	5	2777</citation>
	<citation>2777	5	2777</citation>
	<citation>2777	5	2777</citation>
	<citation>1749	6	2777</citation>
	<citation>2080	6	2777</citation>
	<citation>2247	6	2777</citation>
	<citation>2356	6	2777</citation>
	<citation>2777	6	2777</citation>
	</citations>
	</document>
	<document id= '2776'>
	<title>Computer Networks in Higher Education: Socio-Economic-Political Factors</title>
	<abstract>This study presents the results of a nationwide survey of computer networks in higher education  conducted during 1971-73.  Five major and 18 minor networks were identified.  The five major networks  included: the ARPA Net, the California State College network, the University of Iowa/Iowa State University  network, the Michigan Educational Research Information Triad, Inc., and the Triangle Universities Computation  Center network in North Carolina. In-depth studies were conducted of the latter two nets.  Based on the  experiences of these operating networks, a number of factors are identified for consideration in developing  networks.  Finally, recommendations are advanced regarding the development of networks in higher education  in the future.</abstract>
	<conference>CACM April, 1975</conference>
	<authors>
	<author>Chambers, J. A.</author>
	<author>Poore, R. V.</author>
	</authors>
	<keywords>networks, higher education</keywords>
	<version>1.3 2.45</version>
	<location>CA750401 JB January 9, 1978  4:17 PM</location>
	<citations>
	<citation>2776	5	2776</citation>
	<citation>2776	5	2776</citation>
	<citation>2776	5	2776</citation>
	</citations>
	</document>
	<document id= '2775'>
	<title>The Dilogarithm Function of a Real Argument [S22] (Algorithm 490)</title>
	<conference>CACM April, 1975</conference>
	<authors>
	<author>Ginsberg, E. S.</author>
	<author>Zaborowski, D.</author>
	</authors>
	<keywords>dilogarithm</keywords>
	<version>5.12</version>
	<location>CA750402 JB January 9, 1978  4:09 PM</location>
	<citations>
	<citation>2775	5	2775</citation>
	<citation>2775	5	2775</citation>
	<citation>2775	5	2775</citation>
	</citations>
	</document>
	<document id= '2774'>
	<citations>
	<citation>2774	5	2774</citation>
	<citation>2774	5	2774</citation>
	<citation>2774	5	2774</citation>
	</citations>
	<title>Remark on Algorithm 475</title>
	<conference>CACM April, 1975</conference>
	<authors>
	<author>Frederick, L. W.</author>
	</authors>
	<location>CA750403 JB January 9, 1978  4:07 PM</location>
	</document>
	<document id= '2773'>
	<citations>
	<citation>2773	4	2773</citation>
	<citation>2845	4	2773</citation>
	<citation>2902	4	2773</citation>
	<citation>2955	4	2773</citation>
	<citation>2747	5	2773</citation>
	<citation>2773	5	2773</citation>
	<citation>2773	5	2773</citation>
	<citation>2773	5	2773</citation>
	<citation>2911	5	2773</citation>
	<citation>2955	5	2773</citation>
	<citation>1184	6	2773</citation>
	<citation>1879	6	2773</citation>
	<citation>273	6	2773</citation>
	<citation>2435	6	2773</citation>
	<citation>2435	6	2773</citation>
	<citation>2498	6	2773</citation>
	<citation>2596	6	2773</citation>
	<citation>2734	6	2773</citation>
	<citation>2747	6	2773</citation>
	<citation>2773	6	2773</citation>
	<citation>2773	6	2773</citation>
	<citation>2983	6	2773</citation>
	</citations>
	<title>A Weighted Buddy Method for Dynamic Storage Allocation (Corrigendum)</title>
	<conference>CACM April, 1975</conference>
	<authors>
	<author>Shen, K. K.</author>
	<author>Peterson, J. L.</author>
	</authors>
	<location>CA750404 JB January 9, 1978  4:06 PM</location>
	</document>
	<document id= '2772'>
	<title>On Maintenance of the Opportunity List for Class-Teacher Timetable Problems</title>
	<abstract>One of the principal components of procedures for the solution of class-teacher timetable problems  is that for maintenance of the opportunity list.  Opportunity list maintenance methods are based on necessary  conditions for the existence of a solution. A general framework for necessary conditions, together with  four specific sets of necessary conditions, is given.</abstract>
	<conference>CACM April, 1975</conference>
	<authors>
	<author>Smith, G.</author>
	</authors>
	<keywords>combinatorial, necessary conditions, opportunity list, schedule,school timetable, timetable</keywords>
	<version>3.51 5.39</version>
	<location>CA750405 JB January 9, 1978  4:03 PM</location>
	<citations>
	<citation>1367	4	2772</citation>
	<citation>2619	4	2772</citation>
	<citation>2772	4	2772</citation>
	<citation>2772	4	2772</citation>
	<citation>2787	4	2772</citation>
	<citation>2787	4	2772</citation>
	<citation>1116	5	2772</citation>
	<citation>1429	5	2772</citation>
	<citation>2772	5	2772</citation>
	<citation>2772	5	2772</citation>
	<citation>2772	5	2772</citation>
	</citations>
	</document>
	<document id= '2771'>
	<title>The Synthesis of Solids Bounded by Many Faces</title>
	<abstract>A technique is presented which allows a class of solid objects to be synthesized and stored  using a computer.  Synthesis begins with primitive solids like a cube, wedge, or cylinder.  Any solid  can be moved, scaled, or rotated.  Solids may also be added together or subtracted.  Two algorithms to  perform addition are described.  For practical designers, the technique has the advantage that operations  are concise, readily composed, and are given in terms of easily imagined solids.Quite short sequences  of operations suffice to build up complex solids bounded by many faces.</abstract>
	<conference>CACM April, 1975</conference>
	<authors>
	<author>Braid, I. C.</author>
	</authors>
	<keywords>computational geometry, computer-aided design, graphics, machined components, polyhedra, shape  synthesis, three-dimensional modeling</keywords>
	<version>3.2 8.2</version>
	<location>CA750406 JB January 9, 1978  3:59 PM</location>
	<citations>
	<citation>2771	5	2771</citation>
	<citation>2771	5	2771</citation>
	<citation>2771	5	2771</citation>
	<citation>2827	5	2771</citation>
	<citation>3116	5	2771</citation>
	<citation>2751	6	2771</citation>
	<citation>2771	6	2771</citation>
	<citation>2771	6	2771</citation>
	</citations>
	</document>
	<document id= '2770'>
	<title>The Quadratic Hash Method When the Table Size Is Not a Prime Number</title>
	<abstract>Previous work on quadratic hash methods is limited mainly to the case where the table size  is a prime number.  Here, certain results are derived for composite numbers.  It is shown that all composite  numbers containing at least the square of one of the component primes have full-period integer-coefficient  quadratic hash functions.</abstract>
	<conference>CACM April, 1975</conference>
	<authors>
	<author>Batagelj, V.</author>
	</authors>
	<keywords>quadratic search, hash code, scatter storage, table size</keywords>
	<version>3.74 4.10</version>
	<location>CA750407 JB January 9, 1978  3:54 PM</location>
	<citations>
	<citation>1860	4	2770</citation>
	<citation>1973	4	2770</citation>
	<citation>1973	4	2770</citation>
	<citation>1992	4	2770</citation>
	<citation>2018	4	2770</citation>
	<citation>2018	4	2770</citation>
	<citation>2033	4	2770</citation>
	<citation>2060	4	2770</citation>
	<citation>2107	4	2770</citation>
	<citation>2109	4	2770</citation>
	<citation>2203	4	2770</citation>
	<citation>2203	4	2770</citation>
	<citation>2251	4	2770</citation>
	<citation>2251	4	2770</citation>
	<citation>2251	4	2770</citation>
	<citation>2251	4	2770</citation>
	<citation>2534	4	2770</citation>
	<citation>2543	4	2770</citation>
	<citation>2543	4	2770</citation>
	<citation>2543	4	2770</citation>
	<citation>2559	4	2770</citation>
	<citation>2573	4	2770</citation>
	<citation>2573	4	2770</citation>
	<citation>2704	4	2770</citation>
	<citation>2770	4	2770</citation>
	<citation>2770	4	2770</citation>
	<citation>2770	4	2770</citation>
	<citation>2770	4	2770</citation>
	<citation>2770	4	2770</citation>
	<citation>2770	4	2770</citation>
	<citation>2770	4	2770</citation>
	<citation>2974	4	2770</citation>
	<citation>3053	4	2770</citation>
	<citation>3053	4	2770</citation>
	<citation>3053	4	2770</citation>
	<citation>3053	4	2770</citation>
	<citation>3083	4	2770</citation>
	<citation>1786	5	2770</citation>
	<citation>1869	5	2770</citation>
	<citation>1973	5	2770</citation>
	<citation>1992	5	2770</citation>
	<citation>2018	5	2770</citation>
	<citation>2109	5	2770</citation>
	<citation>2673	5	2770</citation>
	<citation>2770	5	2770</citation>
	<citation>2770	5	2770</citation>
	<citation>2770	5	2770</citation>
	<citation>3053	5	2770</citation>
	<citation>1329	6	2770</citation>
	<citation>1785	6	2770</citation>
	<citation>1973	6	2770</citation>
	<citation>1992	6	2770</citation>
	<citation>2107	6	2770</citation>
	<citation>2109	6	2770</citation>
	<citation>2412	6	2770</citation>
	<citation>2543	6	2770</citation>
	<citation>2673	6	2770</citation>
	<citation>2707	6	2770</citation>
	<citation>2770	6	2770</citation>
	</citations>
	</document>
	<document id= '2769'>
	<title>A Modification of Warshall's Algorithm for the Transitive Closure of Binary Relations</title>
	<abstract>An algorithm is given for computing the transitive closure of a binary relation that is represented  by a Boolean matrix. The algorithm is similar to Warshall's although it executes faster for sparse matrices on most computers, particularly in a paging environment.</abstract>
	<conference>CACM April, 1975</conference>
	<authors>
	<author>Warren, H. S. Jr.</author>
	</authors>
	<keywords>Warshall's algorithm, transitive closure, reachability matrix, directed graph, digraph, Boolean  matrix, binary relation</keywords>
	<version>5.30 5.32</version>
	<location>CA750408 JB January 9, 1978  3:49 PM</location>
	<citations>
	<citation>1151	4	2769</citation>
	<citation>1265	4	2769</citation>
	<citation>2769	4	2769</citation>
	<citation>2769	5	2769</citation>
	<citation>2769	5	2769</citation>
	<citation>2769	5	2769</citation>
	<citation>635	5	2769</citation>
	</citations>
	</document>
	<document id= '2768'>
	<title>An Algorithm for Locating Adjacent Storage Blocks in the Buddy System</title>
	<abstract>A simple scheme for the determination of the location of a block of storage relative to other  blocks is described.  This scheme is applicable to the buddy type storage allocation systems.</abstract>
	<conference>CACM April, 1975</conference>
	<authors>
	<author>Hinds, J. A.</author>
	</authors>
	<keywords>dynamic storage allocation, buddy system, generalized Fibonacci sequences</keywords>
	<version>3.89 4.32 4.39</version>
	<location>CA750409 JB January 9, 1978  3:46 PM</location>
	<citations>
	<citation>1389	4	2768</citation>
	<citation>1552	4	2768</citation>
	<citation>2162	4	2768</citation>
	<citation>2435	4	2768</citation>
	<citation>2596	4	2768</citation>
	<citation>2596	4	2768</citation>
	<citation>2747	4	2768</citation>
	<citation>2768	4	2768</citation>
	<citation>2768	4	2768</citation>
	<citation>2845	4	2768</citation>
	<citation>2845	4	2768</citation>
	<citation>2902	4	2768</citation>
	<citation>2902	4	2768</citation>
	<citation>2911	4	2768</citation>
	<citation>2955	4	2768</citation>
	<citation>2955	4	2768</citation>
	<citation>1184	5	2768</citation>
	<citation>2435	5	2768</citation>
	<citation>2768	5	2768</citation>
	<citation>2768	5	2768</citation>
	<citation>2768	5	2768</citation>
	<citation>2845	5	2768</citation>
	<citation>2902	5	2768</citation>
	<citation>1051	6	2768</citation>
	<citation>1062	6	2768</citation>
	<citation>1184	6	2768</citation>
	<citation>1184	6	2768</citation>
	<citation>1211	6	2768</citation>
	<citation>1552	6	2768</citation>
	<citation>1879	6	2768</citation>
	<citation>2435	6	2768</citation>
	<citation>2435	6	2768</citation>
	<citation>2596	6	2768</citation>
	<citation>2598	6	2768</citation>
	<citation>2734	6	2768</citation>
	<citation>2736	6	2768</citation>
	<citation>2747	6	2768</citation>
	<citation>2747	6	2768</citation>
	<citation>2768	6	2768</citation>
	<citation>2768	6	2768</citation>
	</citations>
	</document>
	<document id= '2767'>
	<title>A Comparison of Simulation Event List Algorithms</title>
	<abstract>Four algorithms are considered which can be used to schedule events in a general purpose discrete  simulation system.  Two of the algorithms are new, one is based on an end-order tree structure for event  notices, and another uses an indexed linear list. The algorithms are tested with a set of typical stochastic  scheduling distributions especially chosen to show the advantages and limitations of the algorithms.   The end-order tree algorithm is shown to be an advantageous, immediate replacement for the algorithm  in use with current simulation languages.  The most promising algorithm uses the indexed list concept.   It will require an adaptive routine before it can be employed in general purpose simulators,but its  performance is such that further study would be fruitful.</abstract>
	<conference>CACM April, 1975</conference>
	<authors>
	<author>Vaucher, J. G.</author>
	<author>Duval, P.</author>
	</authors>
	<keywords>simulation, time flow mechanisms, event list algorithm, simulation, time flow mechanisms, event  list algorithm, simulation executive, event scheduling routine, discrete system simulation, sorting</keywords>
	<version>3.74 4.22 8.1</version>
	<location>CA750410 JB January 9, 1978  3:43 PM</location>
	<citations>
	<citation>2767	4	2767</citation>
	<citation>3064	4	2767</citation>
	<citation>1939	5	2767</citation>
	<citation>2767	5	2767</citation>
	<citation>2767	5	2767</citation>
	<citation>2767	5	2767</citation>
	<citation>2844	5	2767</citation>
	<citation>2936	5	2767</citation>
	<citation>3051	5	2767</citation>
	<citation>3064	5	2767</citation>
	<citation>3109	5	2767</citation>
	<citation>970	6	2767</citation>
	<citation>1059	6	2767</citation>
	<citation>1846	6	2767</citation>
	<citation>1939	6	2767</citation>
	<citation>2742	6	2767</citation>
	<citation>2742	6	2767</citation>
	<citation>2742	6	2767</citation>
	<citation>2767	6	2767</citation>
	<citation>2767	6	2767</citation>
	<citation>2767	6	2767</citation>
	<citation>2767	6	2767</citation>
	<citation>2767	6	2767</citation>
	<citation>2844	6	2767</citation>
	<citation>2844	6	2767</citation>
	<citation>2936	6	2767</citation>
	</citations>
	</document>
	<document id= '2766'>
	<title>Copying Cyclic List Structures in Linear Time Using Bounded Workspace</title>
	<abstract>A bounded workspace copying algorithm for arbitrary list structures is given.  This algorithm  operates in linear time and does not require tag bits.  The best previous bounded workspace copying algorithms  achieved n^2 time without tag bits and n log n time with one tag.  The only restriction on the algorithm  given here is that the copy must be placed into a contiguous section of memory.  The method is applicable  to fixed or variable size nodes.</abstract>
	<conference>CACM May, 1975</conference>
	<authors>
	<author>Fisher, D. A.</author>
	</authors>
	<keywords>list processing, copying, linear time, space complexity</keywords>
	<version>4.49 5.25</version>
	<location>CA750501 JB January 9, 1978  3:22 PM</location>
	<citations>
	<citation>2766	4	2766</citation>
	<citation>2954	4	2766</citation>
	<citation>3106	4	2766</citation>
	<citation>2665	5	2766</citation>
	<citation>2766	5	2766</citation>
	<citation>2766	5	2766</citation>
	<citation>2766	5	2766</citation>
	<citation>2855	5	2766</citation>
	<citation>2954	5	2766</citation>
	<citation>3106	5	2766</citation>
	<citation>1549	6	2766</citation>
	<citation>1549	6	2766</citation>
	<citation>1826	6	2766</citation>
	<citation>210	6	2766</citation>
	<citation>210	6	2766</citation>
	<citation>1972	6	2766</citation>
	<citation>1972	6	2766</citation>
	<citation>2513	6	2766</citation>
	<citation>2665	6	2766</citation>
	<citation>2665	6	2766</citation>
	<citation>2766	6	2766</citation>
	<citation>2766	6	2766</citation>
	<citation>2766	6	2766</citation>
	<citation>2833	6	2766</citation>
	<citation>2855	6	2766</citation>
	<citation>2954	6	2766</citation>
	<citation>2998	6	2766</citation>
	<citation>2998	6	2766</citation>
	</citations>
	</document>
	<document id= '2765'>
	<title>Analysis and performance of Inverted Data Base Structures</title>
	<abstract>The need to envision and architecture data base systems in a hierarchical level by level framework  is stressed. The inverted data base (file) organization is then analyzed, considering implementation  oriented aspects.  The inverted directory is viewed realistically as another large data base which itself  is subjected to inversion.  Formulations are derived to estimate average access time (read only) and  storage requirements, formalizing the interaction of data base content characteristics, logical complexity  of queries, and machine timing and blocking specifications identified as having a first-order effect  on performance.  The formulations presented are necessary to be used in conjunction with any index selection  criteria to determine the optimum set of index keys.</abstract>
	<conference>CACM May, 1975</conference>
	<authors>
	<author>Cardenas, A. F.</author>
	</authors>
	<keywords>data base architecture, inverted file organization, data base performance and measurement, secondary  index organization, information storage and retrieval, query answering</keywords>
	<version>3.70 3.71 3.72 3.74 3.79 4.0</version>
	<location>CA750502 JB January 9, 1978  3:15 PM</location>
	<citations>
	<citation>1135	4	2765</citation>
	<citation>1136	4	2765</citation>
	<citation>2140	4	2765</citation>
	<citation>2155	4	2765</citation>
	<citation>2257	4	2765</citation>
	<citation>2360	4	2765</citation>
	<citation>2406	4	2765</citation>
	<citation>2451	4	2765</citation>
	<citation>2452	4	2765</citation>
	<citation>2452	4	2765</citation>
	<citation>2556	4	2765</citation>
	<citation>493	4	2765</citation>
	<citation>2710	4	2765</citation>
	<citation>2710	4	2765</citation>
	<citation>2715	4	2765</citation>
	<citation>2716	4	2765</citation>
	<citation>2717	4	2765</citation>
	<citation>2718	4	2765</citation>
	<citation>2765	4	2765</citation>
	<citation>2765	4	2765</citation>
	<citation>2765	4	2765</citation>
	<citation>2765	4	2765</citation>
	<citation>2765	4	2765</citation>
	<citation>2765	4	2765</citation>
	<citation>2817	4	2765</citation>
	<citation>2882	4	2765</citation>
	<citation>2888	4	2765</citation>
	<citation>2888	4	2765</citation>
	<citation>2901	4	2765</citation>
	<citation>2901	4	2765</citation>
	<citation>2906	4	2765</citation>
	<citation>2957	4	2765</citation>
	<citation>2959	4	2765</citation>
	<citation>2965	4	2765</citation>
	<citation>2965	4	2765</citation>
	<citation>3087	4	2765</citation>
	<citation>3134	4	2765</citation>
	<citation>3154	4	2765</citation>
	<citation>729	4	2765</citation>
	<citation>1936	5	2765</citation>
	<citation>1976	5	2765</citation>
	<citation>2046	5	2765</citation>
	<citation>2451	5	2765</citation>
	<citation>2452	5	2765</citation>
	<citation>2765	5	2765</citation>
	<citation>2765	5	2765</citation>
	<citation>2765	5	2765</citation>
	<citation>2976	5	2765</citation>
	<citation>616	5	2765</citation>
	<citation>2688	6	2765</citation>
	<citation>2765	6	2765</citation>
	<citation>2882	6	2765</citation>
	</citations>
	</document>
	<document id= '2764'>
	<title>An Intelligent Analyzer and Understander of English</title>
	<abstract>The paper describes a working analysis and generation program for natural language, which handles  paragraph length input.  Its core is a system of preferential choice between deep semantic patterns,  based on what we call "semantic density."  The system is contrasted: (1) with syntax oriented linguistic  approaches, and (2) with theorem proving approaches to the understanding problem.</abstract>
	<conference>CACM May, 1975</conference>
	<authors>
	<author>Wilks, Y.</author>
	</authors>
	<keywords>artificial intelligence, computational linguistics, template, paraplate, stereotype, machine translation,  understanding, natural language processing, semantic preference, semantic density</keywords>
	<version>3.36 3.42 3.63</version>
	<location>CA750503 JB January 9, 1978  3:00 PM</location>
	<citations>
	<citation>2764	5	2764</citation>
	<citation>2764	5	2764</citation>
	<citation>2764	5	2764</citation>
	</citations>
	</document>
	<document id= '2763'>
	<title>Basic Cycle Generation [H] (Algorithm 491)</title>
	<conference>CACM May, 1975</conference>
	<authors>
	<author>Gibbs, N. E.</author>
	</authors>
	<keywords>Graph, basic cycles,fundamental cycle, spanning tree, vertex adjacency matrix</keywords>
	<version>5.32 3.24</version>
	<location>CA750504 JB January 9, 1978  2:39 PM</location>
	<citations>
	<citation>1961	4	2763</citation>
	<citation>2177	4	2763</citation>
	<citation>2763	4	2763</citation>
	<citation>1847	5	2763</citation>
	<citation>2763	5	2763</citation>
	<citation>2763	5	2763</citation>
	<citation>2763	5	2763</citation>
	</citations>
	</document>
	<document id= '2762'>
	<citations>
	<citation>2762	4	2762</citation>
	<citation>2521	5	2762</citation>
	<citation>2762	5	2762</citation>
	<citation>2762	5	2762</citation>
	<citation>2762	5	2762</citation>
	</citations>
	<title>Ten Subroutines for the Manipulation of Chebyshev Series (Algorithm R446, C446)</title>
	<conference>CACM May, 1975</conference>
	<authors>
	<author>Piessens, R.</author>
	<author>Mertens, I.</author>
	</authors>
	<location>CA750505 JB January 9, 1978  2:37 PM</location>
	</document>
	<document id= '2761'>
	<citations>
	<citation>2761	5	2761</citation>
	<citation>2761	5	2761</citation>
	<citation>2761	5	2761</citation>
	</citations>
	<title>Visible Surface Plotting Program (Algorithm R475)</title>
	<conference>CACM May, 1975</conference>
	<authors>
	<author>Mashburn, R. G.</author>
	</authors>
	<location>CA750506 JB January 9, 1978  2:35 PM</location>
	</document>
	<document id= '2760'>
	<citations>
	<citation>2760	5	2760</citation>
	<citation>2760	5	2760</citation>
	<citation>2760	5	2760</citation>
	</citations>
	<title>Visible Surface Plotting Program (Algorithm R475)</title>
	<conference>CACM May, 1975</conference>
	<authors>
	<author>Doran, C. J.</author>
	</authors>
	<location>CA750507 JB January 9, 1978 2 2:33 PM</location>
	</document>
	<document id= '2759'>
	<citations>
	<citation>2759	4	2759</citation>
	<citation>2642	5	2759</citation>
	<citation>2759	5	2759</citation>
	<citation>2759	5	2759</citation>
	<citation>2759	5	2759</citation>
	</citations>
	<title>Solution of an Overdetermined System of Equations in the L1 Norm (Algorithm R478)</title>
	<conference>CACM May, 1975</conference>
	<authors>
	<author>Fritsch, F. N.</author>
	<author>Hindmarsh, A. C.</author>
	</authors>
	<location>CA750508 JB January 9, 1978  2:32 PM</location>
	</document>
	<document id= '2758'>
	<title>A Note on the LU Factorization of a Symmetric Matrix</title>
	<conference>CACM May, 1975</conference>
	<authors>
	<author>Evans, D. J.</author>
	<author>Hatzopoulos, M.</author>
	</authors>
	<keywords>symmetric matrices, factorization, test matrices, matrix inversion, separable systems</keywords>
	<version>5.14</version>
	<location>CA750509 JB January 9, 1978  2:26 PM</location>
	<citations>
	<citation>2758	5	2758</citation>
	<citation>2758	5	2758</citation>
	<citation>2758	5	2758</citation>
	</citations>
	</document>
	<document id= '2757'>
	<title>More on kth Shortest Paths</title>
	<conference>CACM May, 1975</conference>
	<authors>
	<author>Fox, B.L.</author>
	</authors>
	<keywords>networks, kth shortest paths</keywords>
	<version>5.32</version>
	<location>CA750510 JB January 9, 1978  2:24 PM</location>
	<citations>
	<citation>2757	4	2757</citation>
	<citation>2757	4	2757</citation>
	<citation>2844	4	2757</citation>
	<citation>2933	4	2757</citation>
	<citation>1059	5	2757</citation>
	<citation>2630	5	2757</citation>
	<citation>2757	5	2757</citation>
	<citation>2757	5	2757</citation>
	<citation>2757	5	2757</citation>
	<citation>2933	5	2757</citation>
	<citation>2630	6	2757</citation>
	<citation>2757	6	2757</citation>
	</citations>
	</document>
	<document id= '2756'>
	<title>A Problem-List of Public Policy Issues Concerning Computers and Health Care</title>
	<conference>CACM May, 1975</conference>
	<authors>
	<author>Wasserman, A. I.</author>
	</authors>
	<keywords>economic and social implications, the public and computing, medicine and health care</keywords>
	<version>2.11 2.12 3.34</version>
	<location>CA750511 JB January 9, 1978  2:22 PM</location>
	<citations>
	<citation>2756	4	2756</citation>
	<citation>3076	4	2756</citation>
	<citation>3179	4	2756</citation>
	<citation>2607	5	2756</citation>
	<citation>2756	5	2756</citation>
	<citation>2756	5	2756</citation>
	<citation>2756	5	2756</citation>
	</citations>
	</document>
	<document id= '2755'>
	<citations>
	<citation>2755	5	2755</citation>
	<citation>2755	5	2755</citation>
	<citation>2755	5	2755</citation>
	</citations>
	<title>The New Math of Computer Programming (Corrigendum)</title>
	<conference>CACM May, 1975</conference>
	<authors>
	<author>Mills, H. D.</author>
	</authors>
	<location>CA750512 JB January 9, 1978  2:20 PM</location>
	</document>
	<document id= '2754'>
	<title>A Syntactic Algorithm for Peak Detection in Waveforms with Applications to Cardiography</title>
	<abstract>Peaks in a digitized waveform are detected by an algorithm incorporating piecewise linear approximation  and tabular parsing techniques.  Several parameters serve to identify the waveform context enabling accurate  measurement of peak amplitude, duration, and shape.  The algorithm is of sufficient speed to allow on-line  real-time processing.  An example of its application is demonstrated on an electrocardiogram.</abstract>
	<conference>CACM May, 1975</conference>
	<authors>
	<author>Horowitz, S. L.</author>
	</authors>
	<keywords>peak detection, digitized waveform, piecewise linear approximation, context-free grammar, bottom-up  parsing, electrocardiogram.</keywords>
	<version>3.12 3.24 3.34 3.63 4.19 5.13 5.23</version>
	<location>CA750513 JB January 9, 1978  2:18 PM</location>
	<citations>
	<citation>2754	5	2754</citation>
	<citation>2754	5	2754</citation>
	<citation>2754	5	2754</citation>
	</citations>
	</document>
	<document id= '2753'>
	<title>A Heuristic Problem Solving Design System for Equipment or Furniture Layouts</title>
	<abstract>The Designer Problem Solver (DPS) demonstrates that the computer can perform simple design  tasks.  In particular, it designs furniture and equipment layouts.  This task was chosen because it is  simple, well defined, and characteristic of many design tasks in architecture, engineering, urban planning,  and natural resource management.  These space planning tasks usually involve manipulating two-dimensional  representations of objects to create feasible or optimal solutions for problems involving topological  and metric spatial constraints.  The paper describes extensive tests performed on the program.  DPS is  a heuristic problem solver with a planning phase prefixed to it.  It uses the planning process to give  it a sense of direction, diagnostic procedures to locate difficulties, and remedial actions to recover  from difficulties.  It uses a convex polygon representation to accurately describe the objects and the  layout.  This representation allows topological and metric constraints to be tested and the design to  be easily updated.  DPS has been applied to 50 problems.  While it is slow and limited in scope, the  ideas behind it are general.  It demonstrates the need for selectivity in controlling search and the  methods used to achieve it: task-specific information, planning, diagnostic procedures, remedial actions,  and selective alternative generators.</abstract>
	<conference>CACM May, 1975</conference>
	<authors>
	<author>Pfefferkorn, C. E.</author>
	</authors>
	<keywords>artificial intelligence, computer-aided design, design synthesis, diagnostic search, heuristics,  planning, problem solving, representations, search strategies, space planning, spatial representations</keywords>
	<version>3.20 3.25 3.64 3.66</version>
	<location>CA750514 JB January 9, 1978  2:10 PM</location>
	<citations>
	<citation>1531	4	2753</citation>
	<citation>2707	4	2753</citation>
	<citation>2753	4	2753</citation>
	<citation>1185	5	2753</citation>
	<citation>2753	5	2753</citation>
	<citation>2753	5	2753</citation>
	<citation>2753	5	2753</citation>
	</citations>
	</document>
	<document id= '2752'>
	<title>Generation of All the Cycles of a Graph from a Set of Basic Cycles [H] (Algorithm 492)</title>
	<conference>CACM June 1975</conference>
	<authors>
	<author>Gibbs, N. E.</author>
	</authors>
	<keywords>basic cycle, cycle, graph</keywords>
	<version>5.32 3.24</version>
	<location>CA750601 JB January 9, 1978  1:55 PM</location>
	<citations>
	<citation>2752	5	2752</citation>
	<citation>2752	5	2752</citation>
	<citation>2752	5	2752</citation>
	</citations>
	</document>
	<document id= '2751'>
	<title>Illumination for Computer Generated Pictures</title>
	<abstract>The quality of computer generated images of three-dimensional scenes depends on the shading  technique used to paint the objects on the cathode-ray tube screen.  The shading algorithm itself depends  in part on the method for modeling the object, which also determines the hidden surface algorithm.  The  various methods of object modeling, shading, and hidden surface removal are thus strongly interconnected.   Several shading techniques corresponding to different methods of object modeling and the related hidden  surface algorithms are presented here.  Human visual perception and the fundamental laws of optics are  considered in the development of a shading rule that provides better quality and increased realism in  generated images.</abstract>
	<conference>CACM June, 1975</conference>
	<authors>
	<author>Phong, B. T.</author>
	</authors>
	<keywords>computer graphics, graphic display, hidden surface removal.</keywords>
	<version>3.26 3.41 8.2</version>
	<location>CA750602 JB January 9, 1978  1:46 PM</location>
	<citations>
	<citation>2751	5	2751</citation>
	<citation>2751	5	2751</citation>
	<citation>2751	5	2751</citation>
	<citation>2816	5	2751</citation>
	<citation>2827	5	2751</citation>
	<citation>2828	5	2751</citation>
	<citation>2913	5	2751</citation>
	<citation>3047	5	2751</citation>
	<citation>1751	6	2751</citation>
	<citation>2004	6	2751</citation>
	<citation>2493	6	2751</citation>
	<citation>2751	6	2751</citation>
	<citation>2751	6	2751</citation>
	<citation>2751	6	2751</citation>
	<citation>2751	6	2751</citation>
	<citation>2751	6	2751</citation>
	<citation>2771	6	2751</citation>
	<citation>2829	6	2751</citation>
	<citation>2829	6	2751</citation>
	<citation>2841	6	2751</citation>
	</citations>
	</document>
	<document id= '2750'>
	<title>A Cost Oriented Algorithm for Data Set Allocation in Storage Hierarchies</title>
	<abstract>Data set allocation in today's multilevel storage systems is usually based on qualitative,  ad hoc decisions.  While it would be desirable to obtain an optimal solution to this allocation problem,  it is clear that the number of parameters involved makes it intractable to straight-forward solution.   In such a situation, we must find a set of assumptions which simplify the problem greatly, but which  still provide a basis for considering all significant cost elements. This paper presents such a first,  quantitative allocation step.  It considers many of the significant detailed costs of system utilization,  data storage, data staging, and data migration.  Although many avenues of further improvement are available,  the present algorithm seems to be usefully accurate. As such, it can aid in quantifying the problems  of data set allocation, storage system configuration, and new device designs.</abstract>
	<conference>CACM June, 1975</conference>
	<authors>
	<author>Lum, V. Y.</author>
	<author>Senko, M.</author>
	<author>Wang, C. P.</author>
	<author>Ling, H.</author>
	</authors>
	<keywords>data set allocation, hierarchical storage, storage system configuration, data staging, data migration,  storage allocation analysis</keywords>
	<version>3.5 3.9 6.2</version>
	<location>CA750603 JB January 9, 1978  1:31 PM</location>
	<citations>
	<citation>2750	5	2750</citation>
	<citation>2750	5	2750</citation>
	<citation>2750	5	2750</citation>
	</citations>
	</document>
	<document id= '2749'>
	<title>Significant Event Simulation</title>
	<abstract>This paper compares a new method of simulation organization, called the significant event method,  with an old one, called the clock pulse method, using as examples two automobile traffic models.  The  significant event method is found to be more efficient than the clock pulse method at low levels of system  interaction and less efficient at high levels.  A simple mathematical model for the trade-off in the  relative running time of the two methods is developed.  The model aids in choosing between the two simulation  methods for a particular experiment.  It is concluded that the significant event method can be of value  in the simulation of some systems when computational efficiency is of sufficient importance.</abstract>
	<conference>CACM June, 1975</conference>
	<authors>
	<author>Babich, A. F.</author>
	<author>Grason, J.</author>
	<author>Parnas, D. L.</author>
	</authors>
	<keywords>simulation organization, event simulation, clock pulse simulation, significant event simulation.</keywords>
	<version>8.1</version>
	<location>CA750604 JB January 9, 1978  1:20 PM</location>
	<citations>
	<citation>2749	5	2749</citation>
	<citation>2749	5	2749</citation>
	<citation>2749	5	2749</citation>
	</citations>
	</document>
	<document id= '2748'>
	<title>Indirect Threaded Code</title>
	<abstract>An efficient arrangement for interpretive code is described.  It is related to Bell's notion  of threaded code but requires less space and is more amenable to machine independent implementations.</abstract>
	<conference>CACM June, 1975</conference>
	<authors>
	<author>Dewar, R. B. K.</author>
	</authors>
	<keywords>threaded code, SNOBOL4, interpretors, code generation</keywords>
	<version>4.12 4.13</version>
	<location>CA750605 JB January 9, 1978  1:11 PM</location>
	<citations>
	<citation>2748	4	2748</citation>
	<citation>3144	4	2748</citation>
	<citation>2491	5	2748</citation>
	<citation>2748	5	2748</citation>
	<citation>2748	5	2748</citation>
	<citation>2748	5	2748</citation>
	</citations>
	</document>
	<document id= '2747'>
	<title>A Simplified Recombination Scheme for the Fibonacci Buddy System</title>
	<abstract>A simplified recombination scheme for the Fibonacci buddy system which requires neither tables  nor repetitive calculations and uses only two additional bits per buffer is presented.</abstract>
	<conference>CACM June, 1975</conference>
	<authors>
	<author>Cranston, B.</author>
	<author>Thomas, R.</author>
	</authors>
	<keywords>Fibonacci buddy system, dynamic storage allocation, buddy system</keywords>
	<version>3.89 4.32 4.39</version>
	<location>CA750606 JB January 9, 1978  1:07 PM</location>
	<citations>
	<citation>2596	4	2747</citation>
	<citation>2747	4	2747</citation>
	<citation>2768	4	2747</citation>
	<citation>2845	4	2747</citation>
	<citation>2902	4	2747</citation>
	<citation>2911	4	2747</citation>
	<citation>2955	4	2747</citation>
	<citation>2435	5	2747</citation>
	<citation>2747	5	2747</citation>
	<citation>2747	5	2747</citation>
	<citation>2747	5	2747</citation>
	<citation>2773	5	2747</citation>
	<citation>2845	5	2747</citation>
	<citation>2902	5	2747</citation>
	<citation>2955	5	2747</citation>
	<citation>1051	6	2747</citation>
	<citation>1062	6	2747</citation>
	<citation>1184	6	2747</citation>
	<citation>1184	6	2747</citation>
	<citation>1184	6	2747</citation>
	<citation>1211	6	2747</citation>
	<citation>1552	6	2747</citation>
	<citation>1879	6	2747</citation>
	<citation>2435	6	2747</citation>
	<citation>2435	6	2747</citation>
	<citation>2435	6	2747</citation>
	<citation>2596	6	2747</citation>
	<citation>2596	6	2747</citation>
	<citation>2598	6	2747</citation>
	<citation>2734	6	2747</citation>
	<citation>2736	6	2747</citation>
	<citation>2747	6	2747</citation>
	<citation>2747	6	2747</citation>
	<citation>2747	6	2747</citation>
	<citation>2747	6	2747</citation>
	<citation>2768	6	2747</citation>
	<citation>2768	6	2747</citation>
	<citation>2773	6	2747</citation>
	</citations>
	</document>
	<document id= '2746'>
	<title>Efficient String Matching: An Aid to Bibliographic Search</title>
	<abstract>This paper describes a simple, efficient algorithm to locate all occurrences of any of a finite  number of keywords in a string of text.  The algorithm consists of constructing a finite state pattern  matching machine from the keywords and then using the pattern matching machine to process the text string  in a single pass.  Construction of the pattern matching machine takes time proportional to the sum of  the lengths of the keywords.  The number of state transitions made by the pattern matching machine in  processing the text string is independent of the number of keywords.  The algorithm has been used to  improve the speed of a library bibliographic search program by a factor of 5 to 10.</abstract>
	<conference>CACM June, 1975</conference>
	<authors>
	<author>Aho, A. V.</author>
	<author>Corasick, M. J.</author>
	</authors>
	<keywords>keywords and phrases, string pattern matching, bibliographic search, information retrieval, text-editing,  finite state machines, computational complexity.</keywords>
	<version>3.74 3.71 5.22 5.25</version>
	<location>CA750607 JB January 9, 1978  1:03 PM</location>
	<citations>
	<citation>2532	4	2746</citation>
	<citation>2545	4	2746</citation>
	<citation>2631	4	2746</citation>
	<citation>2733	4	2746</citation>
	<citation>2746	4	2746</citation>
	<citation>2746	4	2746</citation>
	<citation>2746	4	2746</citation>
	<citation>2746	4	2746</citation>
	<citation>2746	4	2746</citation>
	<citation>3001	4	2746</citation>
	<citation>1665	5	2746</citation>
	<citation>1739	5	2746</citation>
	<citation>2139	5	2746</citation>
	<citation>2545	5	2746</citation>
	<citation>2746	5	2746</citation>
	<citation>2746	5	2746</citation>
	<citation>2746	5	2746</citation>
	<citation>2786	5	2746</citation>
	<citation>2916	5	2746</citation>
	<citation>2746	6	2746</citation>
	</citations>
	</document>
	<document id= '2745'>
	<title>A Linear Space Algorithm for Computing Maximal Common Subsequences</title>
	<abstract>The problem of finding a longest common subsequence of two strings has been solved in quadratic  time and space.  An algorithm is presented which will solve this problem in quadratic time and in linear  space.</abstract>
	<conference>CACM June, 1975</conference>
	<authors>
	<author>Hirschberg, D. S.</author>
	</authors>
	<keywords>subsequence, longest common subsequence, string correction, editing</keywords>
	<version>3.63 3.73 3.79 4.22 5.25</version>
	<location>CA750608 JB January 9, 1978  12:56 PM</location>
	<citations>
	<citation>2745	5	2745</citation>
	<citation>2745	5	2745</citation>
	<citation>2745	5	2745</citation>
	<citation>2963	5	2745</citation>
	<citation>3114	5	2745</citation>
	<citation>1502	6	2745</citation>
	<citation>2499	6	2745</citation>
	<citation>2745	6	2745</citation>
	<citation>2745	6	2745</citation>
	</citations>
	</document>
	<document id= '2744'>
	<title>Addition in an Arbitrary Base Without Radix Conversion</title>
	<abstract>This paper presents a generalization of an old programming technique; using it,one may add  and subtract numbers represented in any radix, including a mixed radix, and stored one digit per byte  in bytes of sufficient size.  Radix conversion is unnecessary, no looping is required, and numbers may  even be stored in a display (I/O) format.  Applications to Cobol, MIX, and hexadecimal sums are discussed.</abstract>
	<conference>CACM June, 1975</conference>
	<authors>
	<author>Soule, S.</author>
	</authors>
	<keywords>addition, subtraction, decimal arithmetic, arbitrary radix arithmetic, radix conversion, MIX arithmetic,  Cobol display arithmetic, mixed radix arithmetic</keywords>
	<version>4.49 4.9 5.9</version>
	<location>CA750609 JB January 9, 1978  12:52 PM</location>
	<citations>
	<citation>2744	5	2744</citation>
	<citation>2744	5	2744</citation>
	<citation>2744	5	2744</citation>
	</citations>
	</document>
	<document id= '2743'>
	<title>Sorting X + Y</title>
	<conference>CACM June, 1975</conference>
	<authors>
	<author>Harper, L. H.</author>
	<author>Payne, T. H.</author>
	<author>Savage, J. E.</author>
	<author>Straus, E.</author>
	</authors>
	<keywords>merge sorting, computational complexity, data modeling, computing models, binary comparisons</keywords>
	<version>5.25 5.31</version>
	<location>CA750610 JB January 9, 1978  12:45 PM</location>
	<citations>
	<citation>2743	5	2743</citation>
	<citation>2743	5	2743</citation>
	<citation>2743	5	2743</citation>
	</citations>
	</document>
	<document id= '2742'>
	<title>Improved Event-Scanning Mechanisms for Discrete Event Simulation</title>
	<abstract>Simulation models of large, complex "real-world" applications have occasionally earned the  reputation of eating up hours of computer time.  This problem may be attributed in part to difficulties  such as slow stochastic convergence.  However, an additional problem lies in the fact that a significant  amount of bookkeeping time is required to keep future events in their proper sequence.  This paper presents  a method for significantly reducing the time spent scanning future event lists in discrete event simulations.   There models are presented, all of which improve in effectiveness as the events-list scan problem becomes  more burdensome.</abstract>
	<conference>CACM June, 1975</conference>
	<authors>
	<author>Wyman, F. P.</author>
	</authors>
	<keywords>discrete event simulation, simulation, event scanning mechanisms</keywords>
	<version>4.34 5.5 8.1</version>
	<location>CA750611 JB January 9, 1978  12:43 PM</location>
	<citations>
	<citation>2742	5	2742</citation>
	<citation>2742	5	2742</citation>
	<citation>2742	5	2742</citation>
	<citation>2844	5	2742</citation>
	<citation>2936	5	2742</citation>
	<citation>3064	5	2742</citation>
	<citation>970	6	2742</citation>
	<citation>1059	6	2742</citation>
	<citation>1846	6	2742</citation>
	<citation>1939	6	2742</citation>
	<citation>2742	6	2742</citation>
	<citation>2742	6	2742</citation>
	<citation>2742	6	2742</citation>
	<citation>2767	6	2742</citation>
	<citation>2767	6	2742</citation>
	<citation>2767	6	2742</citation>
	<citation>2936	6	2742</citation>
	</citations>
	</document>
	<document id= '2741'>
	<title>Decomposability, Instabilities, and Saturation in Multiprogramming Systems</title>
	<abstract>A step-by-step approach to model the dynamic behavior and evaluate the performance of computing  systems is proposed.  It is based on a technique of variable aggregation and the concept of nearly decomposable  system, both borrowed from Econometrics.  This approach is taken in order to identify in multiprogramming  paging systems (i) unstable regimes of operations and (ii) critical computing loads which bring the system  into states of saturation.  This analysis leads to a more complete definition of the circumstances in  which "thrashing" can set in.</abstract>
	<conference>CACM July, 1975</conference>
	<authors>
	<author>Courtois, P. J.</author>
	</authors>
	<keywords>multiprogramming, paging, performance evaluation, saturation, instabilities, thrashing, aggregation,  system levels, hierarchy,networks of queues</keywords>
	<version>4.31 4.32 8.1 8.2</version>
	<location>CA750701 JB January 9, 1978  10:39 AM</location>
	<citations>
	<citation>1828	4	2741</citation>
	<citation>1854	4	2741</citation>
	<citation>1877	4	2741</citation>
	<citation>1892	4	2741</citation>
	<citation>1960	4	2741</citation>
	<citation>2068	4	2741</citation>
	<citation>2150	4	2741</citation>
	<citation>2317	4	2741</citation>
	<citation>2319	4	2741</citation>
	<citation>2377	4	2741</citation>
	<citation>2342	4	2741</citation>
	<citation>2376	4	2741</citation>
	<citation>2379	4	2741</citation>
	<citation>2424	4	2741</citation>
	<citation>2482	4	2741</citation>
	<citation>2618	4	2741</citation>
	<citation>2632	4	2741</citation>
	<citation>2704	4	2741</citation>
	<citation>2712	4	2741</citation>
	<citation>2723	4	2741</citation>
	<citation>2738	4	2741</citation>
	<citation>2740	4	2741</citation>
	<citation>2741	4	2741</citation>
	<citation>2741	4	2741</citation>
	<citation>2741	4	2741</citation>
	<citation>2867	4	2741</citation>
	<citation>3070	4	2741</citation>
	<citation>3184	4	2741</citation>
	<citation>1526	5	2741</citation>
	<citation>1749	5	2741</citation>
	<citation>2454	5	2741</citation>
	<citation>2741	5	2741</citation>
	<citation>2741	5	2741</citation>
	<citation>2741	5	2741</citation>
	<citation>3016	5	2741</citation>
	<citation>3070	5	2741</citation>
	<citation>3153	5	2741</citation>
	<citation>1805	6	2741</citation>
	<citation>1901	6	2741</citation>
	<citation>2454	6	2741</citation>
	<citation>2741	6	2741</citation>
	<citation>2741	6	2741</citation>
	<citation>2741	6	2741</citation>
	<citation>2891	6	2741</citation>
	<citation>2988	6	2741</citation>
	</citations>
	</document>
	<document id= '2740'>
	<title>A Large Semaphore Based Operating System</title>
	<abstract>The paper describes the internal structure of a large operating system as a set of cooperating  sequential processes.  The processes synchronize by means of semaphores and extended semaphores (queue  semaphores).  The number of parallel processes is carefully justified, and the various semaphore constructions  are explained.  The system is proved to be free of "deadly embrace" (deadlock).  The design principle  is an alternative to Dijkstra's hierarchical structuring of operating systems.  The project management  and the performance are discussed, too.  The operating system is the first large one using the RC 4000  multiprogramming system.</abstract>
	<conference>CACM July, 1975</conference>
	<authors>
	<author>Lauesen, S.</author>
	</authors>
	<keywords>cooperating processes, operating system, semaphores, semaphore applications, queue semaphores,  deadlock, deadly embrace, hierarchical structuring, multiprogramming, operating system structure, asynchronous  structuring, buffering, parallel processes, synchronizing primitives, reentrant code, RC 4000, project  management, time schedule, debugging, project planning, project scheduling, reliability, program proving,  coroutines, correctness, program maintenance, software paging</keywords>
	<version>4.30 4.31 4.32 4.42 4.43 5.24</version>
	<location>CA750702 JB January 9, 1978  10:32 AM</location>
	<citations>
	<citation>1828	4	2740</citation>
	<citation>1854	4	2740</citation>
	<citation>1877	4	2740</citation>
	<citation>1960	4	2740</citation>
	<citation>2150	4	2740</citation>
	<citation>2228	4	2740</citation>
	<citation>2280	4	2740</citation>
	<citation>2317	4	2740</citation>
	<citation>2319	4	2740</citation>
	<citation>2319	4	2740</citation>
	<citation>2377	4	2740</citation>
	<citation>2378	4	2740</citation>
	<citation>2342	4	2740</citation>
	<citation>2376	4	2740</citation>
	<citation>2379	4	2740</citation>
	<citation>2379	4	2740</citation>
	<citation>2320	4	2740</citation>
	<citation>2424	4	2740</citation>
	<citation>2482	4	2740</citation>
	<citation>2482	4	2740</citation>
	<citation>2618	4	2740</citation>
	<citation>2632	4	2740</citation>
	<citation>2632	4	2740</citation>
	<citation>2704	4	2740</citation>
	<citation>2723	4	2740</citation>
	<citation>2738	4	2740</citation>
	<citation>2738	4	2740</citation>
	<citation>2740	4	2740</citation>
	<citation>2740	4	2740</citation>
	<citation>2740	4	2740</citation>
	<citation>2741	4	2740</citation>
	<citation>2851	4	2740</citation>
	<citation>2867	4	2740</citation>
	<citation>2868	4	2740</citation>
	<citation>2920	4	2740</citation>
	<citation>3127	4	2740</citation>
	<citation>3184	4	2740</citation>
	<citation>1749	5	2740</citation>
	<citation>1877	5	2740</citation>
	<citation>2080	5	2740</citation>
	<citation>2740	5	2740</citation>
	<citation>2740	5	2740</citation>
	<citation>2740	5	2740</citation>
	</citations>
	</document>
	<document id= '2739'>
	<title>The Restriction Language for Computer Grammars of Natural Language</title>
	<abstract>Over the past few years, a number of systems for the computer analysis of natural language  sentences have been based on augmented context-free grammars: a context-free grammar which defines a  set of parse trees for a sentence, plus a group of restrictions to which a tree must conform in order  to be a valid sentence analysis.  As the coverage of the grammar is increased, an efficient representation  becomes essential for further development.  This paper presents a programming language designed specifically  for the compact and perspicuous statement of restrictions of a natural language grammar.  It is based  on ten years' experience parsing text sentences with the comprehensive English grammar of the N.Y.U.  Linguistic String Project, and embodies in its syntax and routines the relations which were found to  be useful and adequate for computerized natural language analysis.  The language is used in the current  implementation of the Linguistic String Parser.</abstract>
	<conference>CACM July 1975</conference>
	<authors>
	<author>Sager, N.</author>
	<author>Grishman, R.</author>
	</authors>
	<keywords>natural language, parsing, grammar, programming languages</keywords>
	<version>3.42 3.79 4.22</version>
	<location>CA750703 JB January 9, 1978  10:17 AM</location>
	<citations>
	<citation>2581	4	2739</citation>
	<citation>2739	4	2739</citation>
	<citation>2795	4	2739</citation>
	<citation>2921	4	2739</citation>
	<citation>3087	4	2739</citation>
	<citation>1989	5	2739</citation>
	<citation>2739	5	2739</citation>
	<citation>2739	5	2739</citation>
	<citation>2739	5	2739</citation>
	</citations>
	</document>
	<document id= '2738'>
	<title>Use of the Concept of Transparency in the Design of Hierarchically Structured Systems</title>
	<abstract>This paper deals with the design of hierarchically structured programming systems.  It develops  a method for evaluating the cost of requiring programmers to work with an abstraction of a real machine.   A number of examples from hardware and software are given as illustrations of the method.</abstract>
	<conference>CACM July, 1975</conference>
	<authors>
	<author>Parnas, D. L.</author>
	<author>Siewiorek, D. P.</author>
	</authors>
	<keywords>hierarchical systems, bottom up design, levels of abstraction, synchronization primitives</keywords>
	<version>4.20 4.30 6.1 6.20</version>
	<location>CA750704 DMM January 31, 1978  3:46 PM</location>
	<citations>
	<citation>1828	4	2738</citation>
	<citation>1854	4	2738</citation>
	<citation>1877	4	2738</citation>
	<citation>1960	4	2738</citation>
	<citation>2150	4	2738</citation>
	<citation>2317	4	2738</citation>
	<citation>2319	4	2738</citation>
	<citation>2319	4	2738</citation>
	<citation>2377	4	2738</citation>
	<citation>2378	4	2738</citation>
	<citation>2342	4	2738</citation>
	<citation>2376	4	2738</citation>
	<citation>2379	4	2738</citation>
	<citation>2320	4	2738</citation>
	<citation>2424	4	2738</citation>
	<citation>2482	4	2738</citation>
	<citation>2480	4	2738</citation>
	<citation>2618	4	2738</citation>
	<citation>2632	4	2738</citation>
	<citation>2632	4	2738</citation>
	<citation>2704	4	2738</citation>
	<citation>2704	4	2738</citation>
	<citation>2723	4	2738</citation>
	<citation>2738	4	2738</citation>
	<citation>2738	4	2738</citation>
	<citation>2738	4	2738</citation>
	<citation>2738	4	2738</citation>
	<citation>2738	4	2738</citation>
	<citation>2740	4	2738</citation>
	<citation>2740	4	2738</citation>
	<citation>2741	4	2738</citation>
	<citation>2866	4	2738</citation>
	<citation>2867	4	2738</citation>
	<citation>2867	4	2738</citation>
	<citation>2868	4	2738</citation>
	<citation>2869	4	2738</citation>
	<citation>2941	4	2738</citation>
	<citation>2958	4	2738</citation>
	<citation>3004	4	2738</citation>
	<citation>3004	4	2738</citation>
	<citation>3030	4	2738</citation>
	<citation>3030	4	2738</citation>
	<citation>3127	4	2738</citation>
	<citation>3155	4	2738</citation>
	<citation>3184	4	2738</citation>
	<citation>1749	5	2738</citation>
	<citation>2080	5	2738</citation>
	<citation>2247	5	2738</citation>
	<citation>2356	5	2738</citation>
	<citation>2738	5	2738</citation>
	<citation>2738	5	2738</citation>
	<citation>2738	5	2738</citation>
	<citation>2777	5	2738</citation>
	<citation>2972	5	2738</citation>
	<citation>970	6	2738</citation>
	<citation>2204	6	2738</citation>
	<citation>2597	6	2738</citation>
	<citation>2732	6	2738</citation>
	<citation>2738	6	2738</citation>
	</citations>
	</document>
	<document id= '2737'>
	<title>Determining the Minimum-Area Encasing Rectangle for an Arbitrary Closed Curve</title>
	<abstract>This paper describes a method for finding the rectangle of minimum area in which a given arbitrary  plane curve can be contained.  The method is of interest in certain packing and optimum layout problems.   It consists of first determining the minimal-perimeter convex polygon that encloses the given curve  and then selecting the rectangle of minimum area capable of containing this polygon.  Three theorems  are introduced to show that one side of the minimum-area rectangle must be colinear with an edge of the  enclosed polygon and that the minimum-area encasing rectangle for the convex polygon is also the minimum-area  rectangle for the curve.</abstract>
	<conference>CACM July, 1975</conference>
	<authors>
	<author>Freeman, H.</author>
	<author>Shapira, R.</author>
	</authors>
	<keywords>enclosed curve, optimum layout, optimum packing, minimum-area encasing rectangle</keywords>
	<version>5.19 5.49</version>
	<location>CA750705 JB January 9, 1978  10:08 AM</location>
	<citations>
	<citation>2737	5	2737</citation>
	<citation>2737	5	2737</citation>
	<citation>2737	5	2737</citation>
	<citation>2997	5	2737</citation>
	<citation>2737	6	2737</citation>
	</citations>
	</document>
	<document id= '2736'>
	<title>A Note on Hash Linking</title>
	<conference>CACM July, 1975</conference>
	<authors>
	<author>Bobrow, D. G.</author>
	</authors>
	<keywords>hash search, address space extension, implicit pointers, monitor conditions</keywords>
	<version>3.7 3.73 4.1</version>
	<location>CA750706 JB January 9, 1978 9:59 AM</location>
	<citations>
	<citation>1708	4	2736</citation>
	<citation>1781	4	2736</citation>
	<citation>1826	4	2736</citation>
	<citation>1860	4	2736</citation>
	<citation>1972	4	2736</citation>
	<citation>1972	4	2736</citation>
	<citation>2156	4	2736</citation>
	<citation>2156	4	2736</citation>
	<citation>2156	4	2736</citation>
	<citation>2168	4	2736</citation>
	<citation>2168	4	2736</citation>
	<citation>2249	4	2736</citation>
	<citation>2249	4	2736</citation>
	<citation>2314	4	2736</citation>
	<citation>2361	4	2736</citation>
	<citation>2438	4	2736</citation>
	<citation>2513	4	2736</citation>
	<citation>2719	4	2736</citation>
	<citation>2723	4	2736</citation>
	<citation>2736	4	2736</citation>
	<citation>2736	4	2736</citation>
	<citation>2736	4	2736</citation>
	<citation>2736	4	2736</citation>
	<citation>2833	4	2736</citation>
	<citation>2833	4	2736</citation>
	<citation>2855	4	2736</citation>
	<citation>2855	4	2736</citation>
	<citation>3074	4	2736</citation>
	<citation>3074	4	2736</citation>
	<citation>3074	4	2736</citation>
	<citation>3106	4	2736</citation>
	<citation>3112	4	2736</citation>
	<citation>3112	4	2736</citation>
	<citation>1626	5	2736</citation>
	<citation>1826	5	2736</citation>
	<citation>1853	5	2736</citation>
	<citation>1972	5	2736</citation>
	<citation>2736	5	2736</citation>
	<citation>2736	5	2736</citation>
	<citation>2736	5	2736</citation>
	<citation>2833	5	2736</citation>
	<citation>2845	5	2736</citation>
	<citation>3112	5	2736</citation>
	<citation>106	6	2736</citation>
	<citation>1184	6	2736</citation>
	<citation>1380	6	2736</citation>
	<citation>1626	6	2736</citation>
	<citation>1826	6	2736</citation>
	<citation>1826	6	2736</citation>
	<citation>1972	6	2736</citation>
	<citation>2435	6	2736</citation>
	<citation>2438	6	2736</citation>
	<citation>2598	6	2736</citation>
	<citation>2723	6	2736</citation>
	<citation>2736	6	2736</citation>
	<citation>2736	6	2736</citation>
	<citation>2736	6	2736</citation>
	<citation>2747	6	2736</citation>
	<citation>2768	6	2736</citation>
	<citation>2833	6	2736</citation>
	<citation>2838	6	2736</citation>
	<citation>731	6	2736</citation>
	</citations>
	</document>
	<document id= '2735'>
	<title>Discrimination in the Employment of Women in the Computer Industry</title>
	<conference>CACM July, 1975</conference>
	<authors>
	<author>Weber, R. E.</author>
	<author>Gilchrist, B.</author>
	</authors>
	<keywords>discrimination against women, salaries, employment, programmers, systems analysis, keypunch operators,  machine operators</keywords>
	<version>2.40 2.41 2.42</version>
	<location>CA750707 JB January 9, 1978  9:55 AM</location>
	<citations>
	<citation>2735	5	2735</citation>
	<citation>2735	5	2735</citation>
	<citation>2735	5	2735</citation>
	<citation>2823	5	2735</citation>
	<citation>2735	6	2735</citation>
	</citations>
	</document>
	<document id= '2734'>
	<title>On the External Storage Fragmentation Produced by First-Fit and Best-Fit Allocation Strategies</title>
	<abstract>Published comparisons of the external fragmentation produced by first-fit and best-fit memory  allocation have not been consistent.  Through simulation, a series of experiments were performed in order  to obtain better data on the relative performance of first-fit and best-fit and a better understanding  of the reasons underlying observed differences. The time-memory-product efficiencies of first-fit and  best-fit were generally within 1 to 3 percent of each other.  Except for small populations, the size  of the request population had little effect on allocation efficiency.  For exponential and hyperexponential  distributions of requests, first-fit outperformed best-fit; but for normal and uniform distributions,  and for exponential distributions distorted in various ways, best-fit outperformed first-fit.  It is  hypothesized that when first-fit outperforms best-fit, it does so because first-fit, by preferentially  allocating toward one end of memory, encourages large blocks to grow at the other end.  Sufficient contiguous  space is thereby more likely to be available for relatively large requests.  Results of simulation experiments  supported this hypothesis and showed that the relative performance of first-fit and best-fit depends  on the frequency of request.  When the coefficient of variation of the request distribution is greater  than or approximately equal to unity, first-fit outperformed best-fit.</abstract>
	<conference>CACM August, 1975</conference>
	<authors>
	<author>Shore, J. E.</author>
	</authors>
	<keywords>storage fragmentation, dynamic memory allocation, first-fit, best-fit</keywords>
	<version>3.73 4.32 4.35</version>
	<location>CA750801 JB January 9, 1978  9:41 AM</location>
	<citations>
	<citation>2095	4	2734</citation>
	<citation>2218	4	2734</citation>
	<citation>2218	4	2734</citation>
	<citation>2498	4	2734</citation>
	<citation>2596	4	2734</citation>
	<citation>2734	4	2734</citation>
	<citation>2734	4	2734</citation>
	<citation>2902	4	2734</citation>
	<citation>2911	4	2734</citation>
	<citation>3000	4	2734</citation>
	<citation>3000	4	2734</citation>
	<citation>1879	5	2734</citation>
	<citation>2095	5	2734</citation>
	<citation>2734	5	2734</citation>
	<citation>2734	5	2734</citation>
	<citation>2734	5	2734</citation>
	<citation>2902	5	2734</citation>
	<citation>2911	5	2734</citation>
	<citation>2983	5	2734</citation>
	<citation>1051	6	2734</citation>
	<citation>1062	6	2734</citation>
	<citation>1184	6	2734</citation>
	<citation>1211	6	2734</citation>
	<citation>1552	6	2734</citation>
	<citation>1879	6	2734</citation>
	<citation>1879	6	2734</citation>
	<citation>273	6	2734</citation>
	<citation>2435	6	2734</citation>
	<citation>2435	6	2734</citation>
	<citation>2498	6	2734</citation>
	<citation>2596	6	2734</citation>
	<citation>2734	6	2734</citation>
	<citation>2734	6	2734</citation>
	<citation>2734	6	2734</citation>
	<citation>2747	6	2734</citation>
	<citation>2768	6	2734</citation>
	<citation>2773	6	2734</citation>
	<citation>2983	6	2734</citation>
	</citations>
	</document>
	<document id= '2733'>
	<title>Deterministic Parsing of Ambiguous Grammars</title>
	<abstract>Methods of describing the syntax of programming languages in ways that are more flexible and  natural than conventional BNF descriptions are considered.  These methods involve the use of ambiguous  context-free grammars together with rules to resolve syntactic ambiguities.  It is shown how efficient  LR and LL parsers can be constructed directly from certain classes of these specifications.</abstract>
	<conference>CACM August, 1975</conference>
	<authors>
	<author>Aho, A. V.</author>
	<author>Johnson, S. C.</author>
	<author>Ullman, J. D.</author>
	</authors>
	<keywords>programming language specification, parser generation, translator writing systems, syntax analysis,  LR parsing, LL parsing, ambiguous grammars</keywords>
	<version>4.12 4.22 5.23</version>
	<location>CA750802 JB January 9, 1978  9:28 AM</location>
	<citations>
	<citation>1323	4	2733</citation>
	<citation>1358	4	2733</citation>
	<citation>1380	4	2733</citation>
	<citation>1665	4	2733</citation>
	<citation>1665	4	2733</citation>
	<citation>1768	4	2733</citation>
	<citation>1781	4	2733</citation>
	<citation>1787	4	2733</citation>
	<citation>1787	4	2733</citation>
	<citation>1824	4	2733</citation>
	<citation>1825	4	2733</citation>
	<citation>1836	4	2733</citation>
	<citation>1861	4	2733</citation>
	<citation>1989	4	2733</citation>
	<citation>2015	4	2733</citation>
	<citation>2110	4	2733</citation>
	<citation>2112	4	2733</citation>
	<citation>2127	4	2733</citation>
	<citation>2187	4	2733</citation>
	<citation>2317	4	2733</citation>
	<citation>2534	4	2733</citation>
	<citation>2541	4	2733</citation>
	<citation>2545	4	2733</citation>
	<citation>2698	4	2733</citation>
	<citation>2698	4	2733</citation>
	<citation>2733	4	2733</citation>
	<citation>2733	4	2733</citation>
	<citation>2733	4	2733</citation>
	<citation>2733	4	2733</citation>
	<citation>2733	4	2733</citation>
	<citation>2746	4	2733</citation>
	<citation>2820	4	2733</citation>
	<citation>2986	4	2733</citation>
	<citation>3073	4	2733</citation>
	<citation>3093	4	2733</citation>
	<citation>3094	4	2733</citation>
	<citation>3155	4	2733</citation>
	<citation>1781	5	2733</citation>
	<citation>2179	5	2733</citation>
	<citation>2423	5	2733</citation>
	<citation>2733	5	2733</citation>
	<citation>2733	5	2733</citation>
	<citation>2733	5	2733</citation>
	<citation>2786	5	2733</citation>
	<citation>799	5	2733</citation>
	</citations>
	</document>
	<document id= '2732'>
	<title>Guarded Commands, Nondeterminacy and Formal Derivation of Programs</title>
	<abstract>So-called "guarded commands" are introduced as a building block for alternative and repetitive  constructs that allow nondeterministic program components for which at least the activity evoked, but  possible even the final state, is not necessarily uniquely determined by the initial state.  For the  formal derivation of programs expressed in terms of these constructs, a calculus will be shown.</abstract>
	<conference>CACM August, 1975</conference>
	<authors>
	<author>Dijkstra, E. W.</author>
	</authors>
	<keywords>programming languages, sequencing primitives, program semantics, programming language semantics,  nondeterminacy, case-construction, repetition, termination, correctness proof, derivation of programs,  programming methodology</keywords>
	<version>4.20 4.22</version>
	<location>CA750803 JB January 6, 1978  4:46 PM</location>
	<citations>
	<citation>249	4	2732</citation>
	<citation>254	4	2732</citation>
	<citation>272	4	2732</citation>
	<citation>1102	4	2732</citation>
	<citation>1109	4	2732</citation>
	<citation>1140	4	2732</citation>
	<citation>1188	4	2732</citation>
	<citation>1306	4	2732</citation>
	<citation>1464	4	2732</citation>
	<citation>1491	4	2732</citation>
	<citation>1767	4	2732</citation>
	<citation>1781	4	2732</citation>
	<citation>1787	4	2732</citation>
	<citation>1949	4	2732</citation>
	<citation>321	4	2732</citation>
	<citation>2021	4	2732</citation>
	<citation>2059	4	2732</citation>
	<citation>2126	4	2732</citation>
	<citation>2222	4	2732</citation>
	<citation>2227	4	2732</citation>
	<citation>2315	4	2732</citation>
	<citation>2326	4	2732</citation>
	<citation>2470	4	2732</citation>
	<citation>435	4	2732</citation>
	<citation>437	4	2732</citation>
	<citation>463	4	2732</citation>
	<citation>483	4	2732</citation>
	<citation>491	4	2732</citation>
	<citation>2732	4	2732</citation>
	<citation>2732	4	2732</citation>
	<citation>2865	4	2732</citation>
	<citation>2896	4	2732</citation>
	<citation>2943	4	2732</citation>
	<citation>560	4	2732</citation>
	<citation>583	4	2732</citation>
	<citation>3014	4	2732</citation>
	<citation>3068	4	2732</citation>
	<citation>3073	4	2732</citation>
	<citation>3077	4	2732</citation>
	<citation>3143	4	2732</citation>
	<citation>627	4	2732</citation>
	<citation>631	4	2732</citation>
	<citation>632	4	2732</citation>
	<citation>642	4	2732</citation>
	<citation>644	4	2732</citation>
	<citation>653	4	2732</citation>
	<citation>680	4	2732</citation>
	<citation>761	4	2732</citation>
	<citation>762	4	2732</citation>
	<citation>763	4	2732</citation>
	<citation>123	4	2732</citation>
	<citation>140	4	2732</citation>
	<citation>919	4	2732</citation>
	<citation>989	4	2732</citation>
	<citation>196	5	2732</citation>
	<citation>1834	5	2732</citation>
	<citation>2732	5	2732</citation>
	<citation>2732	5	2732</citation>
	<citation>2732	5	2732</citation>
	<citation>2896	5	2732</citation>
	<citation>2972	5	2732</citation>
	<citation>3037	5	2732</citation>
	<citation>3039	5	2732</citation>
	<citation>3043	5	2732</citation>
	<citation>3073	5	2732</citation>
	<citation>196	6	2732</citation>
	<citation>970	6	2732</citation>
	<citation>1834	6	2732</citation>
	<citation>2204	6	2732</citation>
	<citation>2597	6	2732</citation>
	<citation>2597	6	2732</citation>
	<citation>2723	6	2732</citation>
	<citation>2723	6	2732</citation>
	<citation>2732	6	2732</citation>
	<citation>2732	6	2732</citation>
	<citation>2732	6	2732</citation>
	<citation>2732	6	2732</citation>
	<citation>2732	6	2732</citation>
	<citation>2732	6	2732</citation>
	<citation>2738	6	2732</citation>
	<citation>2896	6	2732</citation>
	<citation>2927	6	2732</citation>
	<citation>799	6	2732</citation>
	</citations>
	</document>
	<document id= '2731'>
	<title>Remark on Stably Updating Mean and Standard Deviation of Data</title>
	<conference>CACM August, 1975</conference>
	<authors>
	<author>Cotton, I. W.</author>
	</authors>
	<keywords>mean, standard deviation</keywords>
	<version>5.5 5.19</version>
	<location>CA750804 JB January 6, 1978  4:40 PM</location>
	<citations>
	<citation>2731	4	2731</citation>
	<citation>3159	4	2731</citation>
	<citation>3166	4	2731</citation>
	<citation>3167	4	2731</citation>
	<citation>2731	5	2731</citation>
	<citation>2731	5	2731</citation>
	<citation>2731	5	2731</citation>
	<citation>2799	5	2731</citation>
	<citation>3159	5	2731</citation>
	<citation>3166	5	2731</citation>
	<citation>3167	5	2731</citation>
	<citation>1411	6	2731</citation>
	<citation>2731	6	2731</citation>
	<citation>2731	6	2731</citation>
	<citation>2731	6	2731</citation>
	<citation>2799	6	2731</citation>
	<citation>2799	6	2731</citation>
	<citation>2799	6	2731</citation>
	<citation>3159	6	2731</citation>
	<citation>3167	6	2731</citation>
	<citation>3166	6	2731</citation>
	</citations>
	</document>
	<document id= '2730'>
	<title>Interactive Consulting via Natural Language</title>
	<abstract>Interactive programming systems often contain help commands to give the programmer on-line  instruction regarding the use of the various systems commands.  It is argued that it would be relatively  easy to make these help commands significantly more helpful by having them accept requests in natural  language.  As a demonstration, Weizenbaum's ELIZA program has been provided with a script that turns  it into a natural language system consultant.</abstract>
	<conference>CACM August, 1975</conference>
	<authors>
	<author>Sharo, S. C.</author>
	<author>Kwasny, S. C.</author>
	</authors>
	<keywords>interactive programming, time-sharing systems, natural language processing, computer assisted instruction</keywords>
	<version>3.32 3.42 3.79 4.49</version>
	<location>CA750805 DMM January 30, 1978  4:13 PM</location>
	<citations>
	<citation>1400	4	2730</citation>
	<citation>1553	4	2730</citation>
	<citation>1945	4	2730</citation>
	<citation>2127	4	2730</citation>
	<citation>2396	4	2730</citation>
	<citation>2730	4	2730</citation>
	<citation>1487	5	2730</citation>
	<citation>2730	5	2730</citation>
	<citation>2730	5	2730</citation>
	<citation>2730	5	2730</citation>
	</citations>
	</document>
	<document id= '2729'>
	<title>Comments on a Paper by T. C. Chen and I. T. Ho</title>
	<conference>CACM August, 1975</conference>
	<authors>
	<author>Smith, A. J.</author>
	</authors>
	<keywords>binary coded decimal digits, decimal data storage, data compression, Huffman codes, variable length  codes</keywords>
	<version>6.32 6.34</version>
	<location>CA750806 JB January 6, 1978  4:37 PM</location>
	<citations>
	<citation>2729	4	2729</citation>
	<citation>2729	4	2729</citation>
	<citation>2288	5	2729</citation>
	<citation>2729	5	2729</citation>
	<citation>2729	5	2729</citation>
	<citation>2729	5	2729</citation>
	<citation>2801	5	2729</citation>
	</citations>
	</document>
	<document id= '2728'>
	<title>Consecutive Storage of Relevant Records with Redundancy</title>
	<abstract>This paper studies the properties of a new class of file organizations (CRWR) where records  relevant to every query are stored in consecutive storage locations but the organizations contain redundancy.  Some theorems which provide tools for reducing redundancy in CRWR organizations have been also developed.  Redundancies obtained by the application of these theorems are compared with that of query-inverted file  organizations.  Some CRWR organization with minimum redundancy have also been developed for queries which  specify sets of keys.</abstract>
	<conference>CACM August, 1975</conference>
	<authors>
	<author>Ghosh, S. P.</author>
	</authors>
	<keywords>consecutive, retrieval, storage, file, records, query, redundancy, key</keywords>
	<version>3.70 3.73 3.74</version>
	<location>CA750807 JB January 6, 1978  4:34 PM</location>
	<citations>
	<citation>2728	5	2728</citation>
	<citation>2728	5	2728</citation>
	<citation>2728	5	2728</citation>
	</citations>
	</document>
	<document id= '2727'>
	<title>Multiple Byte Processing with Full-Word Instructions</title>
	<abstract>A method is described which allows parallel processing of packed data items using only ordinary  full-word computer instructions, even though the processing requires operations whose execution is contingent  upon the value of a datum.  It provides a useful technique for processing small data items such as alphanumeric  characters.</abstract>
	<conference>CACM August, 1975</conference>
	<authors>
	<author>Lamport, L.</author>
	</authors>
	<keywords>byte processing, character processing, packed data</keywords>
	<version>4.9</version>
	<location>CA750808 JB January 6, 1978  4:21 PM</location>
	<citations>
	<citation>2727	5	2727</citation>
	<citation>2727	5	2727</citation>
	<citation>2727	5	2727</citation>
	<citation>2952	5	2727</citation>
	<citation>142	6	2727</citation>
	<citation>162	6	2727</citation>
	<citation>163	6	2727</citation>
	<citation>192	6	2727</citation>
	<citation>2185	6	2727</citation>
	<citation>2727	6	2727</citation>
	</citations>
	</document>
	<document id= '2726'>
	<title>Combining Decision Rules in a Decision Table</title>
	<abstract>The techniques for minimizing logic circuits are applied to the simplification of decision  tables by the combining of decision rules. This method is logically equivalent to the Quien-McCluskey  method for finding prime implicants.  If some of the decision rules implied in the ELSE Rule occur with  low frequency, then the ELSE Rule can be used to further simplify the decision table.  Several objectives  merit consideration in optimizing a decision table:(1) reducing machine execution time; (2) reducing  preprocessing time; (3) reducing required machine memory; (4) reducing the number of decision rules.   (This often improves the clarity of the decision table to a human reader.)  It will be shown that objectives  (3) and (4) can be furthered with the above methods.  Objective (1) is also attained if overspecified  decision rules are not combined.  Objective (2) must be compared against the potential benefits of objectives  (1), (3), and (4) in deciding whether to use the above methods.</abstract>
	<conference>CACM August, 1975</conference>
	<authors>
	<author>Shwayder, K.</author>
	</authors>
	<keywords>the Quine-McCluskey method, prime implicants, minimization, maximization, logic circuit, boolean  method, coding, decision tables, flowcharting, sorting</keywords>
	<version>3.5 3.74 4.12 5.31 5.6</version>
	<location>CA750809 JB January 6, 1978  3:53 PM</location>
	<citations>
	<citation>1354	4	2726</citation>
	<citation>1354	4	2726</citation>
	<citation>1488	4	2726</citation>
	<citation>1548	4	2726</citation>
	<citation>1548	4	2726</citation>
	<citation>1684	4	2726</citation>
	<citation>2053	4	2726</citation>
	<citation>2053	4	2726</citation>
	<citation>2053	4	2726</citation>
	<citation>2220	4	2726</citation>
	<citation>2220	4	2726</citation>
	<citation>2220	4	2726</citation>
	<citation>2220	4	2726</citation>
	<citation>2220	4	2726</citation>
	<citation>2273	4	2726</citation>
	<citation>2273	4	2726</citation>
	<citation>2273	4	2726</citation>
	<citation>2273	4	2726</citation>
	<citation>2453	4	2726</citation>
	<citation>2453	4	2726</citation>
	<citation>2453	4	2726</citation>
	<citation>2492	4	2726</citation>
	<citation>2517	4	2726</citation>
	<citation>2518	4	2726</citation>
	<citation>2598	4	2726</citation>
	<citation>2598	4	2726</citation>
	<citation>2598	4	2726</citation>
	<citation>2598	4	2726</citation>
	<citation>2616	4	2726</citation>
	<citation>2691	4	2726</citation>
	<citation>2726	4	2726</citation>
	<citation>2726	4	2726</citation>
	<citation>2726	4	2726</citation>
	<citation>2726	4	2726</citation>
	<citation>2726	4	2726</citation>
	<citation>2726	4	2726</citation>
	<citation>2726	4	2726</citation>
	<citation>2726	4	2726</citation>
	<citation>2726	4	2726</citation>
	<citation>2856	4	2726</citation>
	<citation>2856	4	2726</citation>
	<citation>2856	4	2726</citation>
	<citation>2856	4	2726</citation>
	<citation>3113	4	2726</citation>
	<citation>3113	4	2726</citation>
	<citation>1172	5	2726</citation>
	<citation>1327	5	2726</citation>
	<citation>1354	5	2726</citation>
	<citation>1488	5	2726</citation>
	<citation>1489	5	2726</citation>
	<citation>1548	5	2726</citation>
	<citation>2220	5	2726</citation>
	<citation>2221	5	2726</citation>
	<citation>2263	5	2726</citation>
	<citation>2726	5	2726</citation>
	<citation>2726	5	2726</citation>
	<citation>2726	5	2726</citation>
	</citations>
	</document>
	<document id= '2725'>
	<citations>
	<citation>2725	5	2725</citation>
	<citation>2725	5	2725</citation>
	<citation>2725	5	2725</citation>
	</citations>
	<title>A Comparison of Simulation Event List Algorithms (Corrigendum)</title>
	<conference>CACM August, 1975</conference>
	<authors>
	<author>Vaucher, J. C.</author>
	<author>Duval, P.</author>
	</authors>
	<location>CA750810 JB January 6, 1978  3:43 PM</location>
	</document>
	<document id= '2724'>
	<citations>
	<citation>2724	5	2724</citation>
	<citation>2724	5	2724</citation>
	<citation>2724	5	2724</citation>
	</citations>
	<title>The Lemniscate Constants (Corrigendum)</title>
	<conference>CACM August, 1975</conference>
	<authors>
	<author>Todd, J.</author>
	</authors>
	<location>CA750811 JB January 6, 1978  3:44 PM</location>
	</document>
	<document id= '2723'>
	<title>Multiprocessing Compactifying Garbage Collection</title>
	<abstract>Algorithms for a multiprocessing compactifying garbage collector are presented and discussed.   The simple case of two processors, one performing LISP-like list operations and the other performing  garbage collection continuously, is thoroughly examined. The necessary capabilities of each processor  are defined, as well as interprocessor communication and interlocks. Complete procedures for garbage  collection and for standard list processing primitives are presented and thoroughly explained.  Particular  attention is given to the problems of marking and relocating list cells while another processor may be  operating on them.  The primary aim throughout is to allow the list processor to run unimpeded while  the other processor reclaims list storage.  The more complex cases involving several list processors  and one or more garbage collection processors are also briefly discussed.</abstract>
	<conference>CACM September, 1975</conference>
	<authors>
	<author>Steele, G. L. Jr.</author>
	</authors>
	<keywords>garbage collection, storage reclamation, reclaimer, storage allocation, multiprocessing, synchronization,  semaphores, parallel processing, compactification, relocation, LISP, list processing, free storage, pointers,  data structures, gc processor</keywords>
	<version>4.19 4.32 4.40 4.49 4.9</version>
	<location>CA750901 JB January 6, 1978  3:39 PM</location>
	<citations>
	<citation>1024	4	2723</citation>
	<citation>1024	4	2723</citation>
	<citation>1050	4	2723</citation>
	<citation>1051	4	2723</citation>
	<citation>1051	4	2723</citation>
	<citation>1098	4	2723</citation>
	<citation>1102	4	2723</citation>
	<citation>1132	4	2723</citation>
	<citation>1214	4	2723</citation>
	<citation>1380	4	2723</citation>
	<citation>1388	4	2723</citation>
	<citation>1390	4	2723</citation>
	<citation>1393	4	2723</citation>
	<citation>1485	4	2723</citation>
	<citation>1486	4	2723</citation>
	<citation>1487	4	2723</citation>
	<citation>1549	4	2723</citation>
	<citation>1549	4	2723</citation>
	<citation>1549	4	2723</citation>
	<citation>1570	4	2723</citation>
	<citation>1706	4	2723</citation>
	<citation>1826	4	2723</citation>
	<citation>1828	4	2723</citation>
	<citation>1854	4	2723</citation>
	<citation>1869	4	2723</citation>
	<citation>1877	4	2723</citation>
	<citation>1878	4	2723</citation>
	<citation>1878	4	2723</citation>
	<citation>1946	4	2723</citation>
	<citation>1957	4	2723</citation>
	<citation>1960	4	2723</citation>
	<citation>1972	4	2723</citation>
	<citation>378	4	2723</citation>
	<citation>2060	4	2723</citation>
	<citation>2150	4	2723</citation>
	<citation>2155	4	2723</citation>
	<citation>2156	4	2723</citation>
	<citation>2168	4	2723</citation>
	<citation>2168	4	2723</citation>
	<citation>2168	4	2723</citation>
	<citation>2317	4	2723</citation>
	<citation>2319	4	2723</citation>
	<citation>2377	4	2723</citation>
	<citation>2342	4	2723</citation>
	<citation>2376	4	2723</citation>
	<citation>2379	4	2723</citation>
	<citation>2424	4	2723</citation>
	<citation>2438	4	2723</citation>
	<citation>2482	4	2723</citation>
	<citation>2513	4	2723</citation>
	<citation>2618	4	2723</citation>
	<citation>2632	4	2723</citation>
	<citation>2665	4	2723</citation>
	<citation>2704	4	2723</citation>
	<citation>2719	4	2723</citation>
	<citation>2723	4	2723</citation>
	<citation>2723	4	2723</citation>
	<citation>2723	4	2723</citation>
	<citation>2723	4	2723</citation>
	<citation>2723	4	2723</citation>
	<citation>2723	4	2723</citation>
	<citation>2723	4	2723</citation>
	<citation>2736	4	2723</citation>
	<citation>2738	4	2723</citation>
	<citation>2740	4	2723</citation>
	<citation>2741	4	2723</citation>
	<citation>2833	4	2723</citation>
	<citation>2838	4	2723</citation>
	<citation>2842	4	2723</citation>
	<citation>2855	4	2723</citation>
	<citation>2855	4	2723</citation>
	<citation>2855	4	2723</citation>
	<citation>2857	4	2723</citation>
	<citation>2867	4	2723</citation>
	<citation>2879	4	2723</citation>
	<citation>2882	4	2723</citation>
	<citation>2941	4	2723</citation>
	<citation>2956	4	2723</citation>
	<citation>3030	4	2723</citation>
	<citation>3074	4	2723</citation>
	<citation>3077	4	2723</citation>
	<citation>3080	4	2723</citation>
	<citation>3106	4	2723</citation>
	<citation>3106	4	2723</citation>
	<citation>3112	4	2723</citation>
	<citation>3112	4	2723</citation>
	<citation>3184	4	2723</citation>
	<citation>627	4	2723</citation>
	<citation>731	4	2723</citation>
	<citation>793	4	2723</citation>
	<citation>106	4	2723</citation>
	<citation>210	5	2723</citation>
	<citation>1549	5	2723</citation>
	<citation>1749	5	2723</citation>
	<citation>1826	5	2723</citation>
	<citation>2651	5	2723</citation>
	<citation>2723	5	2723</citation>
	<citation>2723	5	2723</citation>
	<citation>2723	5	2723</citation>
	<citation>2838	5	2723</citation>
	<citation>2896	5	2723</citation>
	<citation>3039	5	2723</citation>
	<citation>3074	5	2723</citation>
	<citation>3112	5	2723</citation>
	<citation>627	5	2723</citation>
	<citation>731	5	2723</citation>
	<citation>106	6	2723</citation>
	<citation>1380	6	2723</citation>
	<citation>1826	6	2723</citation>
	<citation>1826	6	2723</citation>
	<citation>210	6	2723</citation>
	<citation>1834	6	2723</citation>
	<citation>1853	6	2723</citation>
	<citation>1972	6	2723</citation>
	<citation>1972	6	2723</citation>
	<citation>2438	6	2723</citation>
	<citation>2723	6	2723</citation>
	<citation>2723	6	2723</citation>
	<citation>2723	6	2723</citation>
	<citation>2723	6	2723</citation>
	<citation>2723	6	2723</citation>
	<citation>2732	6	2723</citation>
	<citation>2732	6	2723</citation>
	<citation>2736	6	2723</citation>
	<citation>2833	6	2723</citation>
	<citation>2838	6	2723</citation>
	<citation>2896	6	2723</citation>
	<citation>731	6	2723</citation>
	</citations>
	</document>
	<document id= '2722'>
	<title>Multidimensional Binary Search Trees Used for Associative Searching</title>
	<abstract>This paper develops the multidimensional binary search tree (or k-d tree, where k is the dimensionality  of the search space) as a data structure for storage of information to be retrieved by associative searches.  The k-d tree is defined and examples are given. It is shown to be quite in its storage requirements.   A significant advantage of this structure is that a single data structure can handle many types of queries  very efficiently.  Various utility algorithms are developed; their proven average running times in an  n record file are: insertion, O (log n); deletion of the root, O (n^(k-1)/k); deletion of a random node,  O (log n); and optimization (guarantees logarithmic performance of searches), O (n log n).  Search algorithms  are given for partial match queries with t keys specified [proven maximum running time of O (n^(k-t)/k)]  and for nearest neighbor queries [empirically observed average running time of O (log n).]  These performances  far surpass the best currently known algorithms for these tasks.  An algorithm is presented to handle  any general intersection query. The main focus of this paper theoretical.  It is felt, however, that  k-d trees could be quite useful in many applications, and examples of potential uses are given.</abstract>
	<conference>CACM September, 1975</conference>
	<authors>
	<author>Bently, J. L.</author>
	</authors>
	<keywords>associative retrieval, binary search trees, key, attribute, information retrieval system, nearest  neighbor queries, partial match queries, intersection queries, binary tree insertion</keywords>
	<version>3.63 3.70 3.74 4.49</version>
	<location>CA750902 JB January 6, 1978  3:22 PM</location>
	<citations>
	<citation>2722	5	2722</citation>
	<citation>2722	5	2722</citation>
	<citation>2722	5	2722</citation>
	</citations>
	</document>
	<document id= '2721'>
	<title>The Digital Simulation of River Plankton Population Dynamics</title>
	<abstract>This paper deals with the development of a mathematical model for and the digital simulation  in Fortran IV of phytoplankton and zooplankton population densities in a river using previously developed  rate expressions.  In order to study the relationships between the ecological mechanisms involved, the  simulation parameters were varied illustrating the response of the ecosystem to different conditions,  including those corresponding to certain types of chemical and thermal pollution.  As an investigation  of the accuracy of the simulation methods, a simulation of the actual population dynamics of Asterionella  in the Columbia River was made based on approximations of conditions in that river. Although not totally  accurate, the simulation was found to predict the general annual pattern of plankton growth fairly well  and, specifically, revealed the importance of the annual velocity cycle in determining such patterns.   In addition, the study demonstrates the usefulness of digital simulations in the examinations of certain  aquatic ecosystems, as well as in environmental planning involving such examinations.</abstract>
	<conference>CACM September, 1975</conference>
	<authors>
	<author>Claudson, R. M.</author>
	</authors>
	<keywords>digital simulation, mathematical modeling, plankton population dynamics, phytoplankton, zooplankton,  river ecosystems, ecological mechanisms, environmental simulation, modeling ecosystems, pollution, environmental  impact, environmental planning</keywords>
	<version>3.12 3.19</version>
	<location>CA750903 JB January 6, 1978  2:55 PM</location>
	<citations>
	<citation>2721	5	2721</citation>
	<citation>2721	5	2721</citation>
	<citation>2721	5	2721</citation>
	</citations>
	</document>
	<document id= '2720'>
	<title>Optimal Balancing of I/O Requests to Disks</title>
	<abstract>Determining a policy for efficient allocation and utilization of a set of disk drives with  differing operational characteristics is examined using analytical techniques.  Using standard queueing  theory, each disk drive is characterized by a queueing model with service time of a disk drive represented  by the probability density function of the sum of two uniform distributions. Total response time of the  set of disk models is then minimized under varying load conditions. The results indicate that faster  devices should have higher utilization factors and that the number of different device types utilized  tends to decrease with decreasing load.  Specific examples using 2314 and 3330 combinations are examined.</abstract>
	<conference>CACM September, 1975</conference>
	<authors>
	<author>Piepmeier, W. F.</author>
	</authors>
	<keywords>disk drive hierarchies, system evaluation, input/output, modeling, queueing theory, balancing,  scheduling, device assignment</keywords>
	<version>2.44 4.35 5.15 5.5 6.35 8.1 8.3</version>
	<location>CA750904 JB January 6, 1978  2:42 PM</location>
	<citations>
	<citation>2720	5	2720</citation>
	<citation>2720	5	2720</citation>
	<citation>2720	5	2720</citation>
	</citations>
	</document>
	<document id= '2719'>
	<title>Mechanical Program Analysis</title>
	<abstract>One means of analyzing program performance is by deriving closed-form expressions for their  execution behavior.  This paper discusses the mechanization of such analysis, and describes a system,  Metric, which is able to analyze simple Lisp programs and produce, for example, closed-form expressions for their running time expressed in terms of size of input.  This paper presents the reasons for mechanizing  program analysis, describes the operation of Metric, explains its implementation, and discusses its limitations.</abstract>
	<conference>CACM September, 1975</conference>
	<authors>
	<author>Wegbreit, B.</author>
	</authors>
	<keywords>analysis of programs, performance analysis, execution time, execution behavior, difference equations,  generating functions, list processing, Lisp, algebraic manipulation, programming languages, analysis  of algorithms</keywords>
	<version>3.69 4.22 5.24 5.25</version>
	<location>CA750905 JB January 6, 1978  2:11 PM</location>
	<citations>
	<citation>1024	4	2719</citation>
	<citation>1051	4	2719</citation>
	<citation>1102	4	2719</citation>
	<citation>1132	4	2719</citation>
	<citation>1390	4	2719</citation>
	<citation>1486	4	2719</citation>
	<citation>1549	4	2719</citation>
	<citation>1706	4	2719</citation>
	<citation>1708	4	2719</citation>
	<citation>1781	4	2719</citation>
	<citation>1826	4	2719</citation>
	<citation>1826	4	2719</citation>
	<citation>1860	4	2719</citation>
	<citation>1878	4	2719</citation>
	<citation>378	4	2719</citation>
	<citation>2060	4	2719</citation>
	<citation>2155	4	2719</citation>
	<citation>2156	4	2719</citation>
	<citation>2168	4	2719</citation>
	<citation>2168	4	2719</citation>
	<citation>2164	4	2719</citation>
	<citation>2170	4	2719</citation>
	<citation>2249	4	2719</citation>
	<citation>2314	4	2719</citation>
	<citation>2323	4	2719</citation>
	<citation>2657	4	2719</citation>
	<citation>2719	4	2719</citation>
	<citation>2719	4	2719</citation>
	<citation>2719	4	2719</citation>
	<citation>2719	4	2719</citation>
	<citation>2719	4	2719</citation>
	<citation>2719	4	2719</citation>
	<citation>2719	4	2719</citation>
	<citation>2723	4	2719</citation>
	<citation>2736	4	2719</citation>
	<citation>2833	4	2719</citation>
	<citation>2838	4	2719</citation>
	<citation>2842	4	2719</citation>
	<citation>2855	4	2719</citation>
	<citation>2879	4	2719</citation>
	<citation>2967	4	2719</citation>
	<citation>3077	4	2719</citation>
	<citation>3080	4	2719</citation>
	<citation>3094	4	2719</citation>
	<citation>3106	4	2719</citation>
	<citation>627	4	2719</citation>
	<citation>106	4	2719</citation>
	<citation>210	5	2719</citation>
	<citation>1626	5	2719</citation>
	<citation>2151	5	2719</citation>
	<citation>2167	5	2719</citation>
	<citation>2210	5	2719</citation>
	<citation>2645	5	2719</citation>
	<citation>2657	5	2719</citation>
	<citation>2719	5	2719</citation>
	<citation>2719	5	2719</citation>
	<citation>2719	5	2719</citation>
	</citations>
	</document>
	<document id= '2718'>
	<title>A Preliminary System for the Design of DBTG Data Structures</title>
	<abstract>The functional approach to database design is introduced.  In this approach the goal of design  is to derive a data structure which is capable of supporting a set of anticipated queries rather than  a structure which "models the business" in some other way. An operational computer program is described  which utilizers the functional approach to design data structures conforming to the Data Base Task Group  specifications.  The automatic programming technology utilized by this program, although typically used  to generate procedure, is here used to generate declaratives.</abstract>
	<conference>CACM October, 1975</conference>
	<authors>
	<author>Gerritsen, R.</author>
	</authors>
	<keywords>network model of databases, Data Base Task Group, database design, data structure, automatic programming,  translation, nonprocedural languages</keywords>
	<version>3.5 3.64 3.7 4.2 5.23</version>
	<location>CA751001 JB January 6, 1978  2:02 PM</location>
	<citations>
	<citation>2155	4	2718</citation>
	<citation>2406	4	2718</citation>
	<citation>2710	4	2718</citation>
	<citation>2715	4	2718</citation>
	<citation>2716	4	2718</citation>
	<citation>2717	4	2718</citation>
	<citation>2718	4	2718</citation>
	<citation>2765	4	2718</citation>
	<citation>2817	4	2718</citation>
	<citation>2888	4	2718</citation>
	<citation>2901	4	2718</citation>
	<citation>2957	4	2718</citation>
	<citation>2959	4	2718</citation>
	<citation>2965	4	2718</citation>
	<citation>3087	4	2718</citation>
	<citation>3154	4	2718</citation>
	<citation>2046	5	2718</citation>
	<citation>2718	5	2718</citation>
	<citation>2718	5	2718</citation>
	<citation>2718	5	2718</citation>
	<citation>3147	5	2718</citation>
	<citation>2718	6	2718</citation>
	</citations>
	</document>
	<document id= '2717'>
	<title>CONVERT: A High Level Translation Definition Language for Data Conversion</title>
	<abstract>This paper describes a high level and nonprocedural translation definition language, CONVERT,  which provides very powerful and highly flexible data restructuring capabilities. Its design is based  on the simple underlying concept of a form which enables the users to visualize the translation processes,  and thus makes data translation a much simpler task.  "CONVERT" has been chosen for conveying the purpose  of the language and should not be confused with any other language or program bearing the same name.</abstract>
	<conference>CACM October, 1975</conference>
	<authors>
	<author>Shu, N. C.</author>
	<author>Housel, B. C.</author>
	<author>Lum, V. Y.</author>
	</authors>
	<keywords>data conversion, data restructuring, data translation, database reorganization, translation definition,  utility program, programming languages, nonprocedural languages</keywords>
	<version>3.50 3.75 4.29 4.4 4.9</version>
	<location>CA751002 JB January 6, 1978  1:45 PM</location>
	<citations>
	<citation>2155	4	2717</citation>
	<citation>2406	4	2717</citation>
	<citation>2710	4	2717</citation>
	<citation>2715	4	2717</citation>
	<citation>2716	4	2717</citation>
	<citation>2717	4	2717</citation>
	<citation>2717	4	2717</citation>
	<citation>2718	4	2717</citation>
	<citation>2765	4	2717</citation>
	<citation>2817	4	2717</citation>
	<citation>2888	4	2717</citation>
	<citation>2901	4	2717</citation>
	<citation>2957	4	2717</citation>
	<citation>2959	4	2717</citation>
	<citation>2965	4	2717</citation>
	<citation>3087	4	2717</citation>
	<citation>3154	4	2717</citation>
	<citation>2046	5	2717</citation>
	<citation>2406	5	2717</citation>
	<citation>2717	5	2717</citation>
	<citation>2717	5	2717</citation>
	<citation>2717	5	2717</citation>
	</citations>
	</document>
	<document id= '2716'>
	<title>Optimizing the Performance of a Relational Algebra Database Interface</title>
	<abstract>An approach for implementing a "smart" interface to support a relational view of data is proposed.   The basic idea is to employ automatic programming techniques so that the interface analyzes and efficiently  refines the high level query specification supplied by the user.  A relational algebra interface, called  SQUIRAL, which was designed using this approach, is described in detail. SQUIRAL seeks to minimize query  response time and space utilization by: (1) performing global query optimization, (2) exploiting disjoint  and pipelined concurrency, (3) coordinating sort orders in temporary relations, (4) employing directory  analysis, and (5) maintaining locality in page references.  Algorithms for implementing the operators  of E. F. Codd's relational algebra are presented, and a methodology for composing them to optimize the  performance of a particular user query is described.</abstract>
	<conference>CACM October, 1975</conference>
	<authors>
	<author>Smith, J. M.</author>
	<author>Chang, P.</author>
	</authors>
	<keywords>relational database, database optimization, inverted file, automatic programming, query language,  data manipulation language, very high level language</keywords>
	<version>3.70 4.13 4.33</version>
	<location>CA751003 JB January 6, 1978  11:19 AM</location>
	<citations>
	<citation>2155	4	2716</citation>
	<citation>2406	4	2716</citation>
	<citation>2710	4	2716</citation>
	<citation>2710	4	2716</citation>
	<citation>2715	4	2716</citation>
	<citation>2716	4	2716</citation>
	<citation>2716	4	2716</citation>
	<citation>2717	4	2716</citation>
	<citation>2718	4	2716</citation>
	<citation>2765	4	2716</citation>
	<citation>2817	4	2716</citation>
	<citation>2888	4	2716</citation>
	<citation>2901	4	2716</citation>
	<citation>2901	4	2716</citation>
	<citation>2957	4	2716</citation>
	<citation>2959	4	2716</citation>
	<citation>2965	4	2716</citation>
	<citation>3087	4	2716</citation>
	<citation>3154	4	2716</citation>
	<citation>2046	5	2716</citation>
	<citation>2715	5	2716</citation>
	<citation>2716	5	2716</citation>
	<citation>2716	5	2716</citation>
	<citation>2716	5	2716</citation>
	</citations>
	</document>
	<document id= '2715'>
	<title>Implementation of a Structured English Query Language</title>
	<abstract>The relational model of data, the XRM Relational Memory System, and the SEQUEL language have  been covered in previous papers and are reviewed.  SEQUEL is a relational data sublanguages intended  for the ad hoc interactive problem solving by non-computer specialists.  A version of SEQUEL that has  been implemented in a prototype interpreter is described.  The interpreter is designed to minimize the  data accessing operations required to respond to an arbitrary query.  The optimization algorithms designed  for this purpose are described.</abstract>
	<conference>CACM October, 1975</conference>
	<authors>
	<author>Astrahan, M. M.</author>
	</authors>
	<keywords>relational model, query language, nonprocedural language, database, data structure, data organization</keywords>
	<version>3.74 3.75 4.22 4.33 4.34</version>
	<location>CA751004 JB January 6, 1978  11:02 AM</location>
	<citations>
	<citation>2155	4	2715</citation>
	<citation>2406	4	2715</citation>
	<citation>2710	4	2715</citation>
	<citation>2715	4	2715</citation>
	<citation>2716	4	2715</citation>
	<citation>2717	4	2715</citation>
	<citation>2718	4	2715</citation>
	<citation>2765	4	2715</citation>
	<citation>2817	4	2715</citation>
	<citation>2888	4	2715</citation>
	<citation>2901	4	2715</citation>
	<citation>2957	4	2715</citation>
	<citation>2959	4	2715</citation>
	<citation>2965	4	2715</citation>
	<citation>3087	4	2715</citation>
	<citation>3154	4	2715</citation>
	<citation>2046	5	2715</citation>
	<citation>2710	5	2715</citation>
	<citation>2715	5	2715</citation>
	<citation>2715	5	2715</citation>
	<citation>2715	5	2715</citation>
	<citation>2716	5	2715</citation>
	<citation>2901	5	2715</citation>
	<citation>1515	6	2715</citation>
	<citation>1976	6	2715</citation>
	<citation>2046	6	2715</citation>
	<citation>2046	6	2715</citation>
	<citation>2046	6	2715</citation>
	<citation>2715	6	2715</citation>
	<citation>2715	6	2715</citation>
	<citation>2715	6	2715</citation>
	<citation>616	6	2715</citation>
	</citations>
	</document>
	<document id= '2714'>
	<title>Merging with Parallel Processors</title>
	<abstract>Consider two linearly ordered sets A, B, |A|=m, |B|=n, m&amp;lt;=n, and p, p&amp;lt;=m, parallel processors  working synchronously.  The paper presents an algorithm for merging A and B with the p parallel processors,  which requires at most 2[log2 (2m+1)]+[3m/p] + [m/p][log2 (n/m)] steps.  If n = (2^B)m (B an integer),  the algorithm requires at most 2[log2 (m+1)] + [m/p](2+B) steps.  In the case where m and n are of the  same order of magnitude, i.e. n=km with k being a constant, the algorithm requires 2[log2 (m+1)] + [m/p](3+k)  steps.  These performances compare very favorably with the previous best parallel merging algorithm,  Batcher's algorithm, which requires n/p + ((m+n)/2p)log2 m steps in the general case and km/p + ((k+1)/2)(m/p)log2  m in the special case where n=km.</abstract>
	<conference>CACM October, 1975</conference>
	<authors>
	<author>Gavril, F.</author>
	</authors>
	<keywords>parallel processing, parallel merging, parallel binary insertion</keywords>
	<version>5.31</version>
	<location>CA751005 JB January 6, 1978  10:50 AM</location>
	<citations>
	<citation>2714	4	2714</citation>
	<citation>3075	4	2714</citation>
	<citation>2664	5	2714</citation>
	<citation>2714	5	2714</citation>
	<citation>2714	5	2714</citation>
	<citation>2714	5	2714</citation>
	<citation>3075	5	2714</citation>
	<citation>2289	6	2714</citation>
	<citation>2557	6	2714</citation>
	<citation>2664	6	2714</citation>
	<citation>2714	6	2714</citation>
	</citations>
	</document>
	<document id= '2713'>
	<citations>
	<citation>2713	5	2713</citation>
	<citation>2713	5	2713</citation>
	<citation>2713	5	2713</citation>
	</citations>
	<title>Remark on Stably Updating Mean and Standard Deviation of Data (Corrigendum)</title>
	<conference>CACM October, 1975</conference>
	<authors>
	<author>Cotton, I.</author>
	</authors>
	<location>CA751006 JB January 6, 1978  10:38 AM</location>
	</document>
	<document id= '2712'>
	<title>Horner's Rule for the Evaluation of General Closed Queueing Networks</title>
	<abstract>The solution of separable closed queueing networks requires the evaluation of homogeneous multinomial  expressions.  The number of terms in those expressions grows combinatorially with the size of the network  such that a direct summation may become impractical.  An algorithm is given which does not show a combinatorial  operation count.  The algorithm is based on a generalization of Horner's rule for polynomials.  It is  also shown how mean queue size and throughput an be obtained at negligible extra cost once the normalization  constant is evaluated.</abstract>
	<conference>CACM October, 1975</conference>
	<authors>
	<author>Reiser, M.</author>
	<author>Kobayashi, H.</author>
	</authors>
	<keywords>Queueing networks, queueing theory Horner's rule, evaluation of multinomial sums, load-dependent  service rate</keywords>
	<version>5.12 5.5 8.1 8.3</version>
	<location>CA751007 JB January 6, 1978  10:35 AM</location>
	<citations>
	<citation>2712	4	2712</citation>
	<citation>2741	4	2712</citation>
	<citation>3070	4	2712</citation>
	<citation>2454	5	2712</citation>
	<citation>2712	5	2712</citation>
	<citation>2712	5	2712</citation>
	<citation>2712	5	2712</citation>
	</citations>
	</document>
	<document id= '2711'>
	<title>A Vector Space Model for Automatic Indexing</title>
	<abstract>In a document retrieval, or other pattern matching environment where stored entities (documents)  are compared with each other or with incoming patterns (search requests), it appears that the best indexing  (property) space is one where each entity lies as far away from the others as possible; in these circumstances  the value of an indexing system may be expressible as a function of the density of the object space;  in particular, retrieval performance may correlate inversely with space density.  An approach based on  space density computations is used to choose an optimum indexing vocabulary for a collection of documents.   Typical evaluation results are shown, demonstrating the usefulness of the model.</abstract>
	<conference>CACM November, 1975</conference>
	<authors>
	<author>Salton, G.</author>
	<author>Wong, A.</author>
	<author>Yang, C. S.</author>
	</authors>
	<keywords>automatic information retrieval, automatic indexing, content analysis, document space</keywords>
	<version>3.71 3.73 3.74 3.75</version>
	<location>CA751101 JB January 6, 1978  10:14 AM</location>
	<citations>
	<citation>2711	5	2711</citation>
	<citation>2711	5	2711</citation>
	<citation>2711	5	2711</citation>
	</citations>
	</document>
	<document id= '2710'>
	<title>Specifying Queries as Relational Expressions: The SQUARE Data Sublanguage</title>
	<abstract>This paper presents a data sublanguage called SQUARE, intended for use in ad hoc, interactive  problem solving by non-computer specialists. SQUARE is based on the relational model of data, and is  shown to be relationally complete; however, it avoids the quantifiers and bound variables required by  languages based on the relational calculus.  Facilities for query, insertion, deletion, and update on  tabular data bases are described.  A syntax is given, and suggestions are made for alternative syntaxes,  including a syntax based on English key words for users with limited mathematical background.</abstract>
	<conference>CACM November, 1975</conference>
	<authors>
	<author>Boyce, R.</author>
	<author>Chamberlin, D. D.</author>
	<author>King, W. F.</author>
	</authors>
	<keywords>database, data sublanguages, relations, query languages, casual user, relational data model, tabular  data, interactive problem solving, nonprocedural languages, relational completeness</keywords>
	<version>3.50 3.70 4.20</version>
	<location>CA751102 JB January 6, 1978  10:04 AM</location>
	<citations>
	<citation>1135	4	2710</citation>
	<citation>1136	4	2710</citation>
	<citation>2046	4	2710</citation>
	<citation>2155	4	2710</citation>
	<citation>2406	4	2710</citation>
	<citation>493	4	2710</citation>
	<citation>2710	4	2710</citation>
	<citation>2710	4	2710</citation>
	<citation>2710	4	2710</citation>
	<citation>2710	4	2710</citation>
	<citation>2715	4	2710</citation>
	<citation>2716	4	2710</citation>
	<citation>2716	4	2710</citation>
	<citation>2717	4	2710</citation>
	<citation>2718	4	2710</citation>
	<citation>2765	4	2710</citation>
	<citation>2765	4	2710</citation>
	<citation>2817	4	2710</citation>
	<citation>2888	4	2710</citation>
	<citation>2888	4	2710</citation>
	<citation>2901	4	2710</citation>
	<citation>2901	4	2710</citation>
	<citation>2906	4	2710</citation>
	<citation>2957	4	2710</citation>
	<citation>2959	4	2710</citation>
	<citation>2965	4	2710</citation>
	<citation>3087	4	2710</citation>
	<citation>3154	4	2710</citation>
	<citation>729	4	2710</citation>
	<citation>1515	5	2710</citation>
	<citation>2046	5	2710</citation>
	<citation>2710	5	2710</citation>
	<citation>2710	5	2710</citation>
	<citation>2710	5	2710</citation>
	<citation>2715	5	2710</citation>
	<citation>616	5	2710</citation>
	</citations>
	</document>
	<document id= '2709'>
	<title>A Genealogy of Control Structures</title>
	<abstract>The issue of program control structures has had a history of heated controversy.  To put this  issue on a solid footing, this paper reviews numerous theoretical results on control structures and explores  their practical implications.  The classic result of Bohm and Jacopini on the theoretical completeness  of if-then-else and while-do is discussed. Several recent ideas on control structures are then explored.   These include a review of various other control structures, results on time/space limitations, and theorems  relating the relative power of control structures under notions of equivalence.  In conclusion, the impact  of theoretical results on the practicing programmer and the importance of one-in, one-out control structures  as operational abstractions are discussed.  It is argued further that there is insufficient evidence  to warrant more than if-then-else, while-do, and their variants.</abstract>
	<conference>CACM November, 1975</conference>
	<authors>
	<author>Ledgard, H. F.</author>
	<author>Marcotty, M.</author>
	</authors>
	<keywords>structured programming, control structures, goto statements, language design, PASCAL</keywords>
	<version>4.2 5.24</version>
	<location>CA751103 JB January 6, 1978  9:53 AM</location>
	<citations>
	<citation>2319	4	2709</citation>
	<citation>2411	4	2709</citation>
	<citation>2480	4	2709</citation>
	<citation>2574	4	2709</citation>
	<citation>2594	4	2709</citation>
	<citation>2709	4	2709</citation>
	<citation>2709	4	2709</citation>
	<citation>2709	4	2709</citation>
	<citation>2709	4	2709</citation>
	<citation>2709	4	2709</citation>
	<citation>2802	4	2709</citation>
	<citation>2889	4	2709</citation>
	<citation>2937	4	2709</citation>
	<citation>2939	4	2709</citation>
	<citation>2972	4	2709</citation>
	<citation>2989	4	2709</citation>
	<citation>3004	4	2709</citation>
	<citation>3004	4	2709</citation>
	<citation>3005	4	2709</citation>
	<citation>3025	4	2709</citation>
	<citation>3101	4	2709</citation>
	<citation>3121	4	2709</citation>
	<citation>3155	4	2709</citation>
	<citation>1425	5	2709</citation>
	<citation>2138	5	2709</citation>
	<citation>2204	5	2709</citation>
	<citation>2456	5	2709</citation>
	<citation>2477	5	2709</citation>
	<citation>2709	5	2709</citation>
	<citation>2709	5	2709</citation>
	<citation>2709	5	2709</citation>
	<citation>2821	5	2709</citation>
	<citation>3121	5	2709</citation>
	<citation>1312	6	2709</citation>
	<citation>308	6	2709</citation>
	<citation>309	6	2709</citation>
	<citation>2456	6	2709</citation>
	<citation>2709	6	2709</citation>
	<citation>2709	6	2709</citation>
	</citations>
	</document>
	<document id= '2708'>
	<title>Practical Syntactic Error Recovery</title>
	<abstract>This paper describes a recovery scheme for syntax errors which provides automatically-generated  high quality recovery with good diagnostic information at relatively low cost. Previous recovery techniques  are summarized and empirical comparisons are made.  Suggestions for further research on this topic conclude  the paper.</abstract>
	<conference>CACM November, 1975</conference>
	<authors>
	<author>Graham, S. L.</author>
	<author>Rhodes, S. P.</author>
	</authors>
	<keywords>syntax errors, error recovery, error correction, parsing, simple precedence, compilers, debugging</keywords>
	<version>4.12 4.42 5.23</version>
	<location>CA751104 JB January 6, 1978  9:42 AM</location>
	<citations>
	<citation>1225	4	2708</citation>
	<citation>1350	4	2708</citation>
	<citation>1379	4	2708</citation>
	<citation>1542	4	2708</citation>
	<citation>1646	4	2708</citation>
	<citation>1683	4	2708</citation>
	<citation>1693	4	2708</citation>
	<citation>1693	4	2708</citation>
	<citation>1781	4	2708</citation>
	<citation>1781	4	2708</citation>
	<citation>1781	4	2708</citation>
	<citation>1781	4	2708</citation>
	<citation>1787	4	2708</citation>
	<citation>1836	4	2708</citation>
	<citation>1836	4	2708</citation>
	<citation>1945	4	2708</citation>
	<citation>1945	4	2708</citation>
	<citation>1945	4	2708</citation>
	<citation>2015	4	2708</citation>
	<citation>2060	4	2708</citation>
	<citation>2060	4	2708</citation>
	<citation>2061	4	2708</citation>
	<citation>2061	4	2708</citation>
	<citation>2082	4	2708</citation>
	<citation>2091	4	2708</citation>
	<citation>2091	4	2708</citation>
	<citation>2152	4	2708</citation>
	<citation>2179	4	2708</citation>
	<citation>2179	4	2708</citation>
	<citation>2340	4	2708</citation>
	<citation>2356	4	2708</citation>
	<citation>2534	4	2708</citation>
	<citation>2534	4	2708</citation>
	<citation>2546	4	2708</citation>
	<citation>2546	4	2708</citation>
	<citation>2556	4	2708</citation>
	<citation>2603	4	2708</citation>
	<citation>2650	4	2708</citation>
	<citation>2650	4	2708</citation>
	<citation>2698	4	2708</citation>
	<citation>2698	4	2708</citation>
	<citation>2698	4	2708</citation>
	<citation>2698	4	2708</citation>
	<citation>2708	4	2708</citation>
	<citation>2708	4	2708</citation>
	<citation>2708	4	2708</citation>
	<citation>2708	4	2708</citation>
	<citation>2708	4	2708</citation>
	<citation>2708	4	2708</citation>
	<citation>2708	4	2708</citation>
	<citation>2820	4	2708</citation>
	<citation>2824	4	2708</citation>
	<citation>2887	4	2708</citation>
	<citation>2971	4	2708</citation>
	<citation>2982	4	2708</citation>
	<citation>2986	4	2708</citation>
	<citation>3045	4	2708</citation>
	<citation>3045	4	2708</citation>
	<citation>3045	4	2708</citation>
	<citation>3093	4	2708</citation>
	<citation>3093	4	2708</citation>
	<citation>1477	5	2708</citation>
	<citation>1491	5	2708</citation>
	<citation>1787	5	2708</citation>
	<citation>2111	5	2708</citation>
	<citation>2534	5	2708</citation>
	<citation>2556	5	2708</citation>
	<citation>2708	5	2708</citation>
	<citation>2708	5	2708</citation>
	<citation>2708	5	2708</citation>
	<citation>3093	5	2708</citation>
	<citation>680	5	2708</citation>
	<citation>1491	6	2708</citation>
	<citation>2179	6	2708</citation>
	<citation>2708	6	2708</citation>
	<citation>680	6	2708</citation>
	</citations>
	</document>
	<document id= '2707'>
	<title>Backtrack Programming Techniques</title>
	<abstract>The purpose of this paper is twofold.  First, a brief exposition of the general backtrack technique  and its history is given.  Second, it is shown how the use of macros can considerably shorten the computation  time in many cases.  In particular, this technique has allowed the solution of two previously open combinatorial  problems, the computation of new terms in a well-known series, and the substantial reduction in computation  time for the solution to another combinatorial problem.</abstract>
	<conference>CACM November, 1975</conference>
	<authors>
	<author>Bitner, J. R.</author>
	<author>Reingold, E. M.</author>
	</authors>
	<keywords>backtrack, depth-first search, exhaustive search, macros, combinatorial computing, non-attacking  queen's problem, difference-preserving codes, pentominoes, tiling problems, squaring the square</keywords>
	<version>5.30</version>
	<location>CA751105 JB January 6, 1978  9:03 AM</location>
	<citations>
	<citation>1531	4	2707</citation>
	<citation>2707	4	2707</citation>
	<citation>2753	4	2707</citation>
	<citation>1185	5	2707</citation>
	<citation>2707	5	2707</citation>
	<citation>2707	5	2707</citation>
	<citation>2707	5	2707</citation>
	<citation>3053	5	2707</citation>
	<citation>1329	6	2707</citation>
	<citation>1785	6	2707</citation>
	<citation>1973	6	2707</citation>
	<citation>1992	6	2707</citation>
	<citation>2107	6	2707</citation>
	<citation>2109	6	2707</citation>
	<citation>2412	6	2707</citation>
	<citation>2543	6	2707</citation>
	<citation>2673	6	2707</citation>
	<citation>2707	6	2707</citation>
	<citation>2770	6	2707</citation>
	</citations>
	</document>
	<document id= '2706'>
	<title>A Note on the Set Basis Problem Related to the Compaction of Character Sets</title>
	<abstract>This note discusses the reduction of the set basis problem to the clique cover problem.</abstract>
	<conference>CACM November, 1975</conference>
	<authors>
	<author>Kou, L. T.</author>
	<author>Wong, C. K.</author>
	</authors>
	<keywords>compaction of character sets, set basis, set covering, computational complexity, polynomial completeness,  clique cover</keywords>
	<version>4.9 5.25 5.39</version>
	<location>CA751106 JB January 6, 1978  8:55 AM</location>
	<citations>
	<citation>2706	4	2706</citation>
	<citation>2643	5	2706</citation>
	<citation>2706	5	2706</citation>
	<citation>2706	5	2706</citation>
	<citation>2706	5	2706</citation>
	</citations>
	</document>
	<document id= '2705'>
	<title>Programming Languages, Natural Languages, and Mathematics</title>
	<abstract>Some social aspects of programming are illuminated through analogies with similar aspects of  mathematics and natural languages.  The split between pure and applied mathematics is found similarly  in programming. The development of natural languages toward flexion less, word-order based language types  speaks for programming language design based on general, abstract constructs.  By analogy with incidents  of the history of artificial, auxiliary languages it is suggested that Fortran and Cobol will remain  dominant for a long time to come.  The most promising avenues for further work of wide influence are  seen to be high quality program literature (i.e. programs) of general utility and studies of questions  related to program style.</abstract>
	<conference>CACM December, 1975</conference>
	<authors>
	<author>Naur, P.</author>
	</authors>
	<keywords>analogies related to social aspects,pure and applied mathematics, language quality, language development,  artificial auxiliary languages, literature, style, descriptive and prescriptive attitudes</keywords>
	<version>4.20</version>
	<location>CA751202 JB January 6, 1978  8:30 AM</location>
	<citations>
	<citation>2705	4	2705</citation>
	<citation>2705	4	2705</citation>
	<citation>2984	4	2705</citation>
	<citation>3101	4	2705</citation>
	<citation>1908	5	2705</citation>
	<citation>2705	5	2705</citation>
	<citation>2705	5	2705</citation>
	<citation>2705	5	2705</citation>
	<citation>3185	5	2705</citation>
	</citations>
	</document>
	<document id= '2704'>
	<title>Exception Handling: Issues and a Proposed Notation</title>
	<abstract>This paper defines exception conditions, discusses the requirements exception handling language  features must satisfy, and proposes some new language features for dealing with exceptions in an orderly  and reliable way.  The proposed language features serve to highlight exception handling issues by showing  how deficiencies in current approaches can be remedied.</abstract>
	<conference>CACM December, 1975</conference>
	<authors>
	<author>Goodenough, J. B.</author>
	</authors>
	<keywords>multilevel exit, goto statement, error conditions, structured programming, ON conditions, programming  languages</keywords>
	<version>4.22</version>
	<location>CA751203 JB January 5, 1978  4:47 PM</location>
	<citations>
	<citation>1397	4	2704</citation>
	<citation>1828	4	2704</citation>
	<citation>1854	4	2704</citation>
	<citation>1877	4	2704</citation>
	<citation>1960	4	2704</citation>
	<citation>2150	4	2704</citation>
	<citation>2317	4	2704</citation>
	<citation>2319	4	2704</citation>
	<citation>2377	4	2704</citation>
	<citation>2342	4	2704</citation>
	<citation>2376	4	2704</citation>
	<citation>2379	4	2704</citation>
	<citation>2424	4	2704</citation>
	<citation>2482	4	2704</citation>
	<citation>2618	4	2704</citation>
	<citation>2632	4	2704</citation>
	<citation>2704	4	2704</citation>
	<citation>2704	4	2704</citation>
	<citation>2704	4	2704</citation>
	<citation>2704	4	2704</citation>
	<citation>2704	4	2704</citation>
	<citation>2704	4	2704</citation>
	<citation>2723	4	2704</citation>
	<citation>2738	4	2704</citation>
	<citation>2738	4	2704</citation>
	<citation>2740	4	2704</citation>
	<citation>2741	4	2704</citation>
	<citation>2770	4	2704</citation>
	<citation>2866	4	2704</citation>
	<citation>2867	4	2704</citation>
	<citation>2867	4	2704</citation>
	<citation>2869	4	2704</citation>
	<citation>2902	4	2704</citation>
	<citation>2941	4	2704</citation>
	<citation>2958	4	2704</citation>
	<citation>3004	4	2704</citation>
	<citation>3030	4	2704</citation>
	<citation>3053	4	2704</citation>
	<citation>3184	4	2704</citation>
	<citation>1247	5	2704</citation>
	<citation>1552	5	2704</citation>
	<citation>1749	5	2704</citation>
	<citation>2356	5	2704</citation>
	<citation>2379	5	2704</citation>
	<citation>2673	5	2704</citation>
	<citation>2704	5	2704</citation>
	<citation>2704	5	2704</citation>
	<citation>2704	5	2704</citation>
	<citation>2945	5	2704</citation>
	<citation>3150	5	2704</citation>
	<citation>1947	6	2704</citation>
	<citation>2060	6	2704</citation>
	<citation>2704	6	2704</citation>
	<citation>2704	6	2704</citation>
	<citation>2842	6	2704</citation>
	<citation>2870	6	2704</citation>
	<citation>2939	6	2704</citation>
	<citation>2940	6	2704</citation>
	<citation>2941	6	2704</citation>
	<citation>2943	6	2704</citation>
	<citation>3073	6	2704</citation>
	<citation>3148	6	2704</citation>
	</citations>
	</document>
	<document id= '2703'>
	<title>The Intrinsically Exponential Complexity of the Circularity Problem for Attribute Grammars</title>
	<abstract>Attribute grammars are an extension of context-free grammars devised by Knuth as a mechanism  for including the semantics of a context-free language with the syntax of the language.  The circularity  problem for a grammar is to determine whether the semantics for all possible sentences (programs) in  fact will be well defined.  It is proved that this problem is, in general, computationally intractable.   Specifically, it is shown that any deterministic algorithm which solves the problem must for infinitely  many cases use an exponential amount of time.An improved version of Knuth's circularity testing algorithm  is also given, which actually solves the problem within exponential time.</abstract>
	<conference>CACM December, 1975</conference>
	<authors>
	<author>Jazayeri, M.</author>
	<author>Ogden, W. F.</author>
	<author>Rounds, W. C.</author>
	</authors>
	<keywords>attribute grammars, circularity problem, context-free grammars, computational complexity, exponential  time, semantics</keywords>
	<version>4.12 5.25</version>
	<location>CA751204 JB January 5, 1978 4:38 PM</location>
	<citations>
	<citation>2703	4	2703</citation>
	<citation>2703	5	2703</citation>
	<citation>2703	5	2703</citation>
	<citation>2703	5	2703</citation>
	<citation>2886	5	2703</citation>
	</citations>
	</document>
	<document id= '2702'>
	<title>On the Complexity of LR(k) Testing</title>
	<abstract>The problem of determining whether an arbitrary context-free grammar is a member of some easily  parsed subclass of grammars such as the LR(k) grammars is considered.  The time complexity of this problem  is analyzed both when k is considered to be a fixed integer and when k is considered to be a parameter  of the test.  In the first case, it is shown that for every k there exists an O(n(k+2)) algorithm for  testing the LR(k) property, where n is the size of the grammar in question.  On the other hand, if both  k and the subject grammar are problem parameters, then the complexity of the problem depends very strongly  on the representation chosen for k.  More specifically, it is shown that this problem is NP-complete  when k is expressed in unary.  When k is expressed in binary the problem is complete for nondeterministic  exponential time.  These results carry over to many other parameterized classes of grammars, such as  the LL(k), strong LL(k), SLR(k), LC(k), and strong LC(k) grammars.</abstract>
	<conference>CACM December, 1975</conference>
	<authors>
	<author>Hunt, H. B.</author>
	<author>Szymanski, T. G.</author>
	<author>Ullman, J. D.</author>
	</authors>
	<keywords>computational complexity, context-free grammars, parsing, LR(k) grammars, NP-complete problems</keywords>
	<version>4.12 5.23 5.25</version>
	<location>CA751205 JB January 5, 1978  4:28 PM</location>
	<citations>
	<citation>2702	5	2702</citation>
	<citation>2702	5	2702</citation>
	<citation>2702	5	2702</citation>
	</citations>
	</document>
	<document id= '2701'>
	<title>A Fast and Usually Linear Algorithm for Global Flow Analysis (Abstract only--Complete paper JACM  23,1 January, 1976)</title>
	<abstract>A new algorithm for global flow analysis on reducible graphs is presented. The algorithm is  shown to treat a very general class of function spaces.  For a graph of e edges, the algorithm has a  worst case time bound of O(e log e) function operations.  It is also shown that in programming terms,  the number of operations is proportional to e plus the number of exits from program loops.  Consequently  a restriction to one-entry one-exit control structures linearity.  The algorithm can be extended to yet  larger classes of function spaces and graphs by relaxing the time bound.  Examples are given of code  improvement problems which can be solved using the algorithm.</abstract>
	<conference>CACM December, 1975</conference>
	<authors>
	<author>Graham, S. L.</author>
	<author>Wegman, M.</author>
	</authors>
	<keywords>global flow analysis, data flow, code optimization, common subexpression elimination, live-dead  analysis, information propagation, flow graph, reducibility, go-to-less programming, depth-first search,  path compression</keywords>
	<version>4.12 5.24 5.25 5.32</version>
	<location>CA751206 JB January 5, 1978  4:08 PM</location>
	<citations>
	<citation>2701	5	2701</citation>
	<citation>2701	5	2701</citation>
	<citation>2701	5	2701</citation>
	</citations>
	</document>
	<document id= '2700'>
	<title>Reduction: A Method of Proving Properties of Parallel Programs</title>
	<abstract>When proving that a parallel program has a given property it is often convenient to assume  that a statement is indivisible, i.e. that the statement cannot be interleaved with the rest of the program.   Here sufficient conditions are obtained to show that the assumption that a statement is indivisible  can be relaxed and still preserve properties such as halting.  Thus correctness proofs of a parallel  system can often be greatly simplified.</abstract>
	<conference>CACM December, 1975</conference>
	<authors>
	<author>Lipton, R. J.</author>
	</authors>
	<keywords>deadlock free, reduction, interruptible, indivisible, parallel program, semaphore, verification  method, process, computation sequence</keywords>
	<version>4.32 4.35 5.24</version>
	<location>CA751207 JB January 5, 1978  3:59 PM</location>
	<citations>
	<citation>2700	4	2700</citation>
	<citation>3128	4	2700</citation>
	<citation>2376	5	2700</citation>
	<citation>2700	5	2700</citation>
	<citation>2700	5	2700</citation>
	<citation>2700	5	2700</citation>
	</citations>
	</document>
	<document id= '2699'>
	<title>Automatic Data Structure Choice in a Language of Very High Level</title>
	<abstract>SETL is a set-theoretically oriented language of very high level whose repertoire of semantic  objects includes finite sets, ordered n-tuples, and sets of ordered n-tuples usable as mappings.  This  paper describes the structure of an optimizer for this language.  Among other methods of interest, the  optimizer uses techniques which allow relations of inclusion and membership to be established, the domains  and ranges of (tabulated) mappings to be estimated from above and below, and the single-valuedness of  (tabulated) mappings to be proved.  Once facts of this kind have been established, automatic choice of  data structures becomes possible. The methods employed are based upon, and extend, known techniques of  data flow analysis.</abstract>
	<conference>CACM December, 1975</conference>
	<authors>
	<author>Schwartz, J. T.</author>
	</authors>
	<keywords>program optimization, automatic programming, high-level languages, set-theoretic languages, data  structure choice</keywords>
	<version>4.12 4.20 4.22</version>
	<location>CA751208 JB January 5, 1978  3:53 PM</location>
	<citations>
	<citation>2699	5	2699</citation>
	<citation>2699	5	2699</citation>
	<citation>2699	5	2699</citation>
	</citations>
	</document>
	<document id= '2698'>
	<title>Syntax-Directed Least-Errors Analysis for Context-Free Languages: A Practical Approach</title>
	<abstract>A least-errors recognizer is developed informally using the well-known recognizer of Earley,  along with elements of Bellman's dynamic programming.  The analyzer takes a general class of context-free  grammars as drivers, and any finite string as input.  Recognition consists of a least-errors count for  a corrected version of the input relative to the driver grammar. The algorithm design emphasizes practical  aspects which help in programming it.</abstract>
	<conference>CACM January, 1974</conference>
	<authors>
	<author>Lyon, G.</author>
	</authors>
	<keywords>arbitrary input strings, context-free grammars, parsing, dynamic programming, stored subanalyses,  separability, state merging, least-errors correction</keywords>
	<version>4.12 5.23 5.42</version>
	<location>CA740101 JB January 18, 1978   2:57 PM</location>
	<citations>
	<citation>1225	4	2698</citation>
	<citation>1323	4	2698</citation>
	<citation>1350	4	2698</citation>
	<citation>1358	4	2698</citation>
	<citation>1379	4	2698</citation>
	<citation>1380	4	2698</citation>
	<citation>1542	4	2698</citation>
	<citation>1646	4	2698</citation>
	<citation>1665	4	2698</citation>
	<citation>1665	4	2698</citation>
	<citation>1683	4	2698</citation>
	<citation>1693	4	2698</citation>
	<citation>1693	4	2698</citation>
	<citation>1768	4	2698</citation>
	<citation>1781	4	2698</citation>
	<citation>1781	4	2698</citation>
	<citation>1781	4	2698</citation>
	<citation>1781	4	2698</citation>
	<citation>1787	4	2698</citation>
	<citation>1787	4	2698</citation>
	<citation>1787	4	2698</citation>
	<citation>1824	4	2698</citation>
	<citation>1825	4	2698</citation>
	<citation>1836	4	2698</citation>
	<citation>1836	4	2698</citation>
	<citation>1836	4	2698</citation>
	<citation>1861	4	2698</citation>
	<citation>1945	4	2698</citation>
	<citation>1945	4	2698</citation>
	<citation>1945	4	2698</citation>
	<citation>1989	4	2698</citation>
	<citation>1989	4	2698</citation>
	<citation>2015	4	2698</citation>
	<citation>2015	4	2698</citation>
	<citation>2060	4	2698</citation>
	<citation>2060	4	2698</citation>
	<citation>2060	4	2698</citation>
	<citation>2061	4	2698</citation>
	<citation>2061	4	2698</citation>
	<citation>2082	4	2698</citation>
	<citation>2091	4	2698</citation>
	<citation>2091	4	2698</citation>
	<citation>2110	4	2698</citation>
	<citation>2112	4	2698</citation>
	<citation>2127	4	2698</citation>
	<citation>2152	4	2698</citation>
	<citation>2179	4	2698</citation>
	<citation>2179	4	2698</citation>
	<citation>2179	4	2698</citation>
	<citation>2187	4	2698</citation>
	<citation>2317	4	2698</citation>
	<citation>2340	4	2698</citation>
	<citation>2356	4	2698</citation>
	<citation>2534	4	2698</citation>
	<citation>2541	4	2698</citation>
	<citation>2545	4	2698</citation>
	<citation>2546	4	2698</citation>
	<citation>2546	4	2698</citation>
	<citation>2603	4	2698</citation>
	<citation>2650	4	2698</citation>
	<citation>2698	4	2698</citation>
	<citation>2698	4	2698</citation>
	<citation>2698	4	2698</citation>
	<citation>2698	4	2698</citation>
	<citation>2698	4	2698</citation>
	<citation>2698	4	2698</citation>
	<citation>2698	4	2698</citation>
	<citation>2708	4	2698</citation>
	<citation>2708	4	2698</citation>
	<citation>2708	4	2698</citation>
	<citation>2708	4	2698</citation>
	<citation>2733	4	2698</citation>
	<citation>2733	4	2698</citation>
	<citation>2820	4	2698</citation>
	<citation>2824	4	2698</citation>
	<citation>2921	4	2698</citation>
	<citation>2982	4	2698</citation>
	<citation>2986	4	2698</citation>
	<citation>3045	4	2698</citation>
	<citation>3045	4	2698</citation>
	<citation>3073	4	2698</citation>
	<citation>3093	4	2698</citation>
	<citation>3093	4	2698</citation>
	<citation>3155	4	2698</citation>
	<citation>3154	4	2698</citation>
	<citation>1477	5	2698</citation>
	<citation>1491	5	2698</citation>
	<citation>1781	5	2698</citation>
	<citation>2110	5	2698</citation>
	<citation>2556	5	2698</citation>
	<citation>2698	5	2698</citation>
	<citation>2698	5	2698</citation>
	<citation>2698	5	2698</citation>
	<citation>680	5	2698</citation>
	<citation>799	5	2698</citation>
	</citations>
	</document>
	<document id= '2697'>
	<title>A Fast Method for Solving a Class of Tridiagonal Linear Systems</title>
	<abstract>The solution of linear systems having real, symmetric, diagonally dominant,tridiagonal coefficient  matrices with constant diagonals is considered.  It is proved that the diagonals of the LU decomposition  converges when floating-point precision.  It is also proved that the computed LU decomposition converges  when floating-point arithmetic is used and that the limits of the LU diagonals using floating point are  roughly within machine precision of the limits using real arithmetic.  This fact is exploited to reduce  the number of floating-point operations required to solve a linear system from 8n-7 to 5n+2k-3, where  k is much less than n, the order of the matrix.  If the elements of the subdiagonals and superdiagonals  are 1, then only 4n+2k-3 operations are needed.  The entire LU decomposition takes k words of storage,  and considerable savings in array subscripting are achieved.  Upper and lower bounds on k are obtained  in terms of the ratio of the coefficient matrix diagonal constants and parameters of the floating-point  number system.  Various generalizations of these results are discussed.</abstract>
	<conference>CACM January, 1974</conference>
	<authors>
	<author>Malcolm, M. A.</author>
	<author>Palmer, J.</author>
	</authors>
	<keywords>numerical linear algebra, linear systems, Toeplitz matrices, tridiagonal matrices</keywords>
	<version>5 5.1 5.11 5.14 5.17</version>
	<location>CA740102 JB January 18, 1978  2:50 PM</location>
	<citations>
	<citation>2697	5	2697</citation>
	<citation>2697	5	2697</citation>
	<citation>2697	5	2697</citation>
	</citations>
	</document>
	<document id= '2696'>
	<title>A Method of Bivariate Interpolation and Smooth Surface Fitting Based on Local Procedures</title>
	<abstract>A method is designed for interpolating values given at points of a rectangular grid in a plane  by a smooth bivariate function z=z(x,Y).  The interpolating function is a bicubic polynomial in each  cell of the rectangular grid.  Emphasis is an avoiding excessive undulation between given grid points.  The proposed method is an extension of the method of univariate interpolation developed earlier by the  author and is likewise based on local procedures.</abstract>
	<conference>CACM January, 1974</conference>
	<authors>
	<author>Akima, H.</author>
	</authors>
	<keywords>bivariate interpolation, interpolation, partial derivative, polynomial, smooth surface fitting</keywords>
	<version>5.13</version>
	<location>CA740103 JB January 18, 1978  2:38 PM</location>
	<citations>
	<citation>2693	4	2696</citation>
	<citation>2696	4	2696</citation>
	<citation>2696	4	2696</citation>
	<citation>2270	5	2696</citation>
	<citation>2693	5	2696</citation>
	<citation>2696	5	2696</citation>
	<citation>2696	5	2696</citation>
	<citation>2696	5	2696</citation>
	<citation>988	6	2696</citation>
	<citation>2270	6	2696</citation>
	<citation>2696	6	2696</citation>
	</citations>
	</document>
	<document id= '2695'>
	<title>Tridiagonalization by Permutations</title>
	<abstract>Tridiagonalizing a matrix by similarity transformations is an important computational tool  in numerical linear algebra. Consider the class of sparse matrices which can be tridiagonalized using  only row and corresponding column permutations.  The advantages of using such a transformation include  the absence of round-off errors and improved computation time when compared with standard transformations.   A graph theoretic algorithm which examines an arbitrary n x n matrix and determines whether or not it  can be permuted into tridiagonal form is given.  The algorithm requires no arithmetic while the number  of comparisons, the number of assignments, and the number of increments are linear in n.  This compares  very favorably with standard transformation methods.  If the matrix is permutable into tridiagonal form,  the algorithm gives the explicit tridiagonal form.  Otherwise, early rejection will occur.</abstract>
	<conference>CACM January, 1974</conference>
	<authors>
	<author>Gibbs, N. E.</author>
	<author>Poole, W. G. Jr.</author>
	</authors>
	<keywords>tridiagonal matrix, permutation, algorithm, eigenvalues, graph, bandwidth, sparse matrix</keywords>
	<version>5.14 5.32</version>
	<location>CA740104 JB January 18, 1978  2:31 PM</location>
	<citations>
	<citation>2695	5	2695</citation>
	<citation>2695	5	2695</citation>
	<citation>2695	5	2695</citation>
	</citations>
	</document>
	<document id= '2694'>
	<title>Computation of Legendre Series Coefficients [C6] (Algorithm A473)</title>
	<conference>CACM January, 1974</conference>
	<authors>
	<author>Piessens, R.</author>
	</authors>
	<keywords>Legendre series, Chebyshev series</keywords>
	<version>5.13</version>
	<location>CA740105 JB January 18, 1978  2:21 PM</location>
	<citations>
	<citation>2694	4	2694</citation>
	<citation>1478	5	2694</citation>
	<citation>2694	5	2694</citation>
	<citation>2694	5	2694</citation>
	<citation>2694	5	2694</citation>
	</citations>
	</document>
	<document id= '2693'>
	<title>Bivariate Interpolation and Smooth Surface Fitting Based on Local Procedures [E2] (Algorithm  A474)</title>
	<conference>CACM January, 1974</conference>
	<authors>
	<author>Akima, H.</author>
	</authors>
	<keywords>bivariate interpolation, interpolation, partial derivative, polynomial, smooth surface fitting</keywords>
	<version>5.13</version>
	<location>CA740106 JB January 18, 1978  2:07 PM</location>
	<citations>
	<citation>1845	4	2693</citation>
	<citation>1900	4	2693</citation>
	<citation>2083	4	2693</citation>
	<citation>2154	4	2693</citation>
	<citation>2270	4	2693</citation>
	<citation>2693	4	2693</citation>
	<citation>2693	4	2693</citation>
	<citation>2693	4	2693</citation>
	<citation>2696	4	2693</citation>
	<citation>988	5	2693</citation>
	<citation>2270	5	2693</citation>
	<citation>2693	5	2693</citation>
	<citation>2693	5	2693</citation>
	<citation>2693	5	2693</citation>
	<citation>2696	5	2693</citation>
	<citation>2270	6	2693</citation>
	<citation>2693	6	2693</citation>
	</citations>
	</document>
	<document id= '2692'>
	<title>Reentrant Polygon Clipping</title>
	<abstract>A new family of clipping algorithms is described.  These algorithms are able to clip polygons  against irregular convex plane-faced volumes in three dimensions, removing the parts of the polygon which  lie outside the volume.  In two dimensions the algorithms permit clipping against irregular convex windows.   Polygons to be clipped are represented as an ordered sequence of vertices without repetition of first  and last, in marked contrast to representation as a collection of edges as was heretofore the common  procedure.  Output polygons have an identical format, with new vertices introduced in sequence to describe  any newly-cut edge or edges.  The algorithms easily handle the particularly difficult problem of detecting  that a new vertex may be required at a corner of the clipping window.  The algorithms described achieve  considerable simplicity by clipping separately against each clipping plane or window boundary.  Code  capable of clipping the polygon against a single boundary is reentered to clip against subsequent boundaries.   Each such reentrant stage of clipping need store only two vertex values and may begin its processing  as soon as the first output vertex from the proceeding stage is ready.  Because the same code is reentered  for clipping against subsequent boundaries, clipping against very complex window shapes is practical.   For perspective applications in three dimentions, a six-plane truncated pyramid is chosen as the clipping  volume.  The two additional planes parallel to the projection screen serve to limit the range of depth  preserved through the projection.  A perspective projection method which provides for arbitrary view  angles and depth of field in spite of simple fixed clipping planes is described.  This method is ideal  for subsequent hidden-surface computations.</abstract>
	<conference>CACM January, 1974</conference>
	<authors>
	<author>Sutherland, I. E.</author>
	<author>Hodgman, G. W.</author>
	</authors>
	<keywords>computer graphics, hidden-surface, clipping</keywords>
	<version>5.31 6.32 6.35</version>
	<location>CA740107 JB January 18, 1978  2:04 PM</location>
	<citations>
	<citation>2004	4	2692</citation>
	<citation>2687	4	2692</citation>
	<citation>2692	4	2692</citation>
	<citation>1915	5	2692</citation>
	<citation>2692	5	2692</citation>
	<citation>2692	5	2692</citation>
	<citation>2692	5	2692</citation>
	</citations>
	</document>
	<document id= '2691'>
	<title>Comments on the Algorithms of Verhelst for the Conversion of Limited-Entry Decision Tables to  Flowcharts</title>
	<conference>CACM January, 1974</conference>
	<authors>
	<author>King, P. J. H.</author>
	<author>Johnson, R. G.</author>
	</authors>
	<keywords>decision table, flowcharting, preprocessor, optimal programs, search</keywords>
	<version>3.50 3.59 4.19 4.29 4.49 5.31</version>
	<location>CA740108 JB January 18, 1978  1:45 PM</location>
	<citations>
	<citation>2598	4	2691</citation>
	<citation>2691	4	2691</citation>
	<citation>2726	4	2691</citation>
	<citation>3113	4	2691</citation>
	<citation>2263	5	2691</citation>
	<citation>2598	5	2691</citation>
	<citation>2691	5	2691</citation>
	<citation>2691	5	2691</citation>
	<citation>2691	5	2691</citation>
	<citation>3113	5	2691</citation>
	<citation>1172	6	2691</citation>
	<citation>1354	6	2691</citation>
	<citation>1548	6	2691</citation>
	<citation>2220	6	2691</citation>
	<citation>2263	6	2691</citation>
	<citation>2263	6	2691</citation>
	<citation>2453	6	2691</citation>
	<citation>2598	6	2691</citation>
	<citation>2691	6	2691</citation>
	<citation>2691	6	2691</citation>
	<citation>2856	6	2691</citation>
	</citations>
	</document>
	<document id= '2690'>
	<title>A Numbering Systems for Combinations</title>
	<conference>CACM January, 1974</conference>
	<authors>
	<author>Knott, G. D.</author>
	</authors>
	<keywords>combinatorics, coding system, storage mapping function</keywords>
	<version>4.9 5.30</version>
	<location>CA740109 JB January 18, 1978  1:42 PM</location>
	<citations>
	<citation>2690	4	2690</citation>
	<citation>2690	4	2690</citation>
	<citation>2853	4	2690</citation>
	<citation>3115	4	2690</citation>
	<citation>203	5	2690</citation>
	<citation>2690	5	2690</citation>
	<citation>2690	5	2690</citation>
	<citation>2690	5	2690</citation>
	<citation>2853	5	2690</citation>
	<citation>579	5	2690</citation>
	<citation>2690	6	2690</citation>
	<citation>579	6	2690</citation>
	</citations>
	</document>
	<document id= '2689'>
	<title>A CRT Report Generating System</title>
	<conference>CACM January, 1974</conference>
	<authors>
	<author>Lucas, H. C. Jr.</author>
	</authors>
	<keywords>report generation, automated systems design, data processing, management</keywords>
	<version>3.50 4.12 4.22</version>
	<location>CA740110 JB January 18, 1978  1:40 PM</location>
	<citations>
	<citation>2689	5	2689</citation>
	<citation>2689	5	2689</citation>
	<citation>2689	5	2689</citation>
	</citations>
	</document>
	<document id= '2688'>
	<title>Attribute Based File Organization in a Paged Memory Environment</title>
	<abstract>The high cost of page accessing implies a need for more careful data organization in a paged  memory than is typical of most inverted file and similar approaches to multi-key retrieval.  This article  analyses that cost and proposes a method called multiple key hashing which attempts to minimize it.   Since this approach is not always preferable to inversion, a combined method is described.  The exact  specifications of this combination for a file with given data and traffic characteristics is formulated  as a mathematical program.  The proposed heuristic solution to this program can often improve on a simple  inversion technique by a factor of 2 or 3.</abstract>
	<conference>CACM February,1974</conference>
	<authors>
	<author>Rothnie, J. B. Jr.</author>
	<author>Lozano, T.</author>
	</authors>
	<keywords>file organization, paging, retrieval algorithm, inverted file, multiple key hashing</keywords>
	<version>3.70 3.73 3.74 3.79</version>
	<location>CA740201 JB January 18, 1978  1:37 PM</location>
	<citations>
	<citation>2160	4	2688</citation>
	<citation>2688	4	2688</citation>
	<citation>2114	5	2688</citation>
	<citation>2688	5	2688</citation>
	<citation>2688	5	2688</citation>
	<citation>2688	5	2688</citation>
	<citation>2976	5	2688</citation>
	<citation>2688	6	2688</citation>
	<citation>2765	6	2688</citation>
	<citation>2882	6	2688</citation>
	</citations>
	</document>
	<document id= '2687'>
	<title>A Cell Organized Raster Display for Line Drawings</title>
	<abstract>Raster scan computer graphics displays with "real time" character generators have previously  been limited to alphanumeric characters.  A display is described which extends the capabilities of this  organization to include general graphics.  The feasibility of such a display is shown by deriving the  minimum number of patterns required in the read only memory of the character generator to synthesize  an arbitrary line.  The synthesis process does not compromise picture quality since the resulting dot  patterns are identical with those of a conventional raster display.  Furthermore, the time constraints  of a raster display are shown to be satisfied for a typical design for very complex line drawings.</abstract>
	<conference>CACM February, 1974</conference>
	<authors>
	<author>Jordan, B. W. Jr.</author>
	<author>Barrett, R. C.</author>
	</authors>
	<keywords>graphics, raster display, line drawing, discrete image, dot generation, matrix displays</keywords>
	<version>4.41 6.35 8.2</version>
	<location>CA740202 JB January 18, 1978  1:28 PM</location>
	<citations>
	<citation>1891	4	2687</citation>
	<citation>2004	4	2687</citation>
	<citation>2211	4	2687</citation>
	<citation>2421	4	2687</citation>
	<citation>2674	4	2687</citation>
	<citation>2674	4	2687</citation>
	<citation>2687	4	2687</citation>
	<citation>2687	4	2687</citation>
	<citation>2687	4	2687</citation>
	<citation>2692	4	2687</citation>
	<citation>2828	4	2687</citation>
	<citation>1741	5	2687</citation>
	<citation>1915	5	2687</citation>
	<citation>2004	5	2687</citation>
	<citation>2674	5	2687</citation>
	<citation>2687	5	2687</citation>
	<citation>2687	5	2687</citation>
	<citation>2687	5	2687</citation>
	<citation>1741	6	2687</citation>
	<citation>2004	6	2687</citation>
	<citation>2421	6	2687</citation>
	<citation>2687	6	2687</citation>
	</citations>
	</document>
	<document id= '2686'>
	<title>An Approximate Method for Generating Asymmetric Random Variables</title>
	<abstract>Tukey's lambda distribution is generalized to provide an algorithm for generating values of  unimodal asymmetric random variables.  This algorithm has the same advantages as the symmetric random  variable generator previously given by the authors, except that the addition of another parameter complicates the problem of finding the parameter values to fit a distribution.</abstract>
	<conference>CACM February, 1974</conference>
	<authors>
	<author>Ramberg, J. S.</author>
	</authors>
	<keywords>simulation, Monte Carlo, probability, statistics, approximations, random variables, random numbers,  moments, distribution</keywords>
	<version>5.5 8.1</version>
	<location>CA740203 JB January 18, 1978  1:19 PM</location>
	<citations>
	<citation>2686	4	2686</citation>
	<citation>2261	5	2686</citation>
	<citation>2686	5	2686</citation>
	<citation>2686	5	2686</citation>
	<citation>2686	5	2686</citation>
	</citations>
	</document>
	<document id= '2685'>
	<title>The Parallel Execution of DO Loops</title>
	<abstract>Methods are developed for the parallel execution of different iterations of a DO loop.  Both  asynchronous multiprocessor computers and array computers are considered.  Practical application to the  design of compilers for such computers is discussed.</abstract>
	<conference>CACM February, 1974</conference>
	<authors>
	<author>Lamport, L.</author>
	</authors>
	<keywords>parallel computing, multiprocessor computers, array computers, vector computers, loops</keywords>
	<version>4.12 5.24</version>
	<location>CA740204 JB January 18, 1978  1:14 PM</location>
	<citations>
	<citation>2685	5	2685</citation>
	<citation>2685	5	2685</citation>
	<citation>2685	5	2685</citation>
	<citation>2785	5	2685</citation>
	<citation>2876	5	2685</citation>
	<citation>2433	6	2685</citation>
	<citation>2632	6	2685</citation>
	<citation>2685	6	2685</citation>
	<citation>2685	6	2685</citation>
	</citations>
	</document>
	<document id= '2684'>
	<title>Production Systems: or Can We Do Better than BNF?</title>
	<abstract>Since the development of BNF, the definition of the syntax of programming languages has been  almost universally associated with context-free requirements.  Yet numerous interesting and difficult  issues in syntax stem from the context-sensitive requirements, notably the compatibility between the  declaration of an identifier and its uses, the correspondence between actual and formal parameters, and  issues arising from block structure.  This paper explores the use of a formal notation called Production  Systems in providing a readable and complete formal definition of syntax.  As a practical illustration,  a small but significant subset of PL/I is considered.  A more detailed presentation, as well as the application  to define abstract syntax and translations between languages, is given in a previous paper by the author.</abstract>
	<conference>CACM February, 1974</conference>
	<authors>
	<author>Ledgard, H. F.</author>
	</authors>
	<keywords>syntax, translation, context-sensitive grammars, compilers, formal definition, PL/I standards</keywords>
	<version>4.2 5.21 5.23</version>
	<location>CA740205 JB January 18, 1978  1:07 PM</location>
	<citations>
	<citation>1086	4	2684</citation>
	<citation>1132	4	2684</citation>
	<citation>1234	4	2684</citation>
	<citation>1263	4	2684</citation>
	<citation>1265	4	2684</citation>
	<citation>1270	4	2684</citation>
	<citation>1323	4	2684</citation>
	<citation>1358	4	2684</citation>
	<citation>1379	4	2684</citation>
	<citation>1380	4	2684</citation>
	<citation>1453	4	2684</citation>
	<citation>1464	4	2684</citation>
	<citation>1469	4	2684</citation>
	<citation>1484	4	2684</citation>
	<citation>1486	4	2684</citation>
	<citation>1491	4	2684</citation>
	<citation>1491	4	2684</citation>
	<citation>1498	4	2684</citation>
	<citation>1613	4	2684</citation>
	<citation>1614	4	2684</citation>
	<citation>1781	4	2684</citation>
	<citation>1781	4	2684</citation>
	<citation>1781	4	2684</citation>
	<citation>1825	4	2684</citation>
	<citation>1860	4	2684</citation>
	<citation>2083	4	2684</citation>
	<citation>2178	4	2684</citation>
	<citation>2178	4	2684</citation>
	<citation>2178	4	2684</citation>
	<citation>2179	4	2684</citation>
	<citation>2252	4	2684</citation>
	<citation>2325	4	2684</citation>
	<citation>2326	4	2684</citation>
	<citation>2326	4	2684</citation>
	<citation>2341	4	2684</citation>
	<citation>2470	4	2684</citation>
	<citation>2546	4	2684</citation>
	<citation>2645	4	2684</citation>
	<citation>2652	4	2684</citation>
	<citation>2684	4	2684</citation>
	<citation>2684	4	2684</citation>
	<citation>2684	4	2684</citation>
	<citation>2842	4	2684</citation>
	<citation>2929	4	2684</citation>
	<citation>2934	4	2684</citation>
	<citation>3044	4	2684</citation>
	<citation>3069	4	2684</citation>
	<citation>669	4	2684</citation>
	<citation>679	4	2684</citation>
	<citation>691	4	2684</citation>
	<citation>761	4	2684</citation>
	<citation>949	4	2684</citation>
	<citation>989	4	2684</citation>
	<citation>1303	5	2684</citation>
	<citation>1323	5	2684</citation>
	<citation>2684	5	2684</citation>
	<citation>2684	5	2684</citation>
	<citation>2684	5	2684</citation>
	<citation>3184	5	2684</citation>
	</citations>
	</document>
	<document id= '2683'>
	<title>The Synthesis of Loop Predicates</title>
	<abstract>Current methods for mechanical program verification require a complete predicate specification  on each loop.  Because this is tedious and error prone, producing a program with complete, correct predicates  is reasonably difficult and would be facilitated by machine assistance.  This paper discusses techniques  for mechanically synthesizing loop predicates.  Two classes of techniques are considered: (1) heuristic  methods which derive loop predicates from boundary conditions and/or partially specified inductive assertions:  (2) extraction methods which use input predicates and appropriate weak interpretations to obtain certain  classes of loop predicates by an evaluation on the weak interpretation.</abstract>
	<conference>CACM March, 1974</conference>
	<authors>
	<author>Wegbreit, B.</author>
	</authors>
	<keywords>program verification, loop predicates, inductive assertions, synthesis of loop predicates, weak  interpretations, well-founded sets, property extraction, theorem proving</keywords>
	<version>3.64 4.19 4.22 5.24</version>
	<location>CA740206 JB January 18, 1978  12:55 PM</location>
	<citations>
	<citation>2683	5	2683</citation>
	<citation>2683	5	2683</citation>
	<citation>2683	5	2683</citation>
	<citation>2874	5	2683</citation>
	<citation>3104	5	2683</citation>
	<citation>1682	6	2683</citation>
	<citation>2227	6	2683</citation>
	<citation>2317	6	2683</citation>
	<citation>2457	6	2683</citation>
	<citation>2683	6	2683</citation>
	<citation>2683	6	2683</citation>
	<citation>2871	6	2683</citation>
	<citation>521	6	2683</citation>
	</citations>
	</document>
	<document id= '2682'>
	<title>On the Construction of a Representative Synthetic Workload</title>
	<abstract>A general method of constructing a drive workload representative of a real workload is described.  The real workload is characterized by its demands on the various system resources.  These characteristics  of the real workload are obtained from the system accounting data. The characteristics of the drive workload  are determined by matching the joint probability density of the real workload with that of the drive  workload.  The drive workload is realized by using a synthetic program in which the characteristics can  be varied by varying the appropriate parameters. Calibration experiments are conducted to determine expressions  relating the synthetic program parameters with the workload characteristics.  The general method is applied  to the case of two variables, cpu seconds and number of I/O activities; and synthetic workload with 88  jobs is constructed to represent a month's workload consisting of about 6000 jobs.</abstract>
	<conference>CACM March, 1974</conference>
	<authors>
	<author>Sreenivasan, K.</author>
	<author>Kleinman, A. J.</author>
	</authors>
	<keywords>benchmarks, calibration, drive workload, input to simulation, probability distribution, representative  workload, synthetic workload, workload characteristics</keywords>
	<version>5.5 5.9 8.1</version>
	<location>CA740301 JB January 18, 1978  12:46 PM</location>
	<citations>
	<citation>2682	5	2682</citation>
	<citation>2682	5	2682</citation>
	<citation>2682	5	2682</citation>
	<citation>3067	5	2682</citation>
	<citation>1751	6	2682</citation>
	<citation>2374	6	2682</citation>
	<citation>2373	6	2682</citation>
	<citation>2595	6	2682</citation>
	<citation>2682	6	2682</citation>
	<citation>2863	6	2682</citation>
	<citation>2864	6	2682</citation>
	<citation>3006	6	2682</citation>
	</citations>
	</document>
	<document id= '2681'>
	<title>Dynamic Memory Repacking</title>
	<abstract>A probabilistic model of a multiprogramming system is exercised in order to determine the conditions  under which the dynamic repacking of main memory is beneficial.  An expression is derived for the maximum  interference that a repacking process may introduce before the original performance of the system is  degraded.  Alternative approaches to repacking are discussed, and the operating conditions that lead  to improved system throughput through repacking are delineated.</abstract>
	<conference>CACM March, 1974</conference>
	<authors>
	<author>Balkovich, E.</author>
	<author>Chiu, W.</author>
	<author>Presser, L.</author>
	<author>Wood, R.</author>
	</authors>
	<keywords>dynamic memory repacking, memory compaction,storage fragmentation, multiprogramming system model,  probabilistic model, central processor productivity, resource utilization, system throughput</keywords>
	<version>4.32 5.5 6.20</version>
	<location>CA740302 JB January 18, 1978  12:37 PM</location>
	<citations>
	<citation>2681	4	2681</citation>
	<citation>2218	5	2681</citation>
	<citation>2681	5	2681</citation>
	<citation>2681	5	2681</citation>
	<citation>2681	5	2681</citation>
	</citations>
	</document>
	<document id= '2680'>
	<title>Optimal Space Allocation on Disk Storage Devices</title>
	<abstract>When the amount of space required for file storage exceeds the amount which can be kept on-line,  decisions must be made as to which files are to be permanently resident and which mountable.  These decisions  will affect the number of mount requests issued to the operators.  This is often a bottleneck in a computing  facility, and reducing the number of mounts thus decreases turnaround time.  An optimization model for  the assignment of files to disk packs, and packs to either resident or nonresident status is presented.   Heuristics are suggested for those cases in which it is inefficient to compute the actual optimum.</abstract>
	<conference>CACM March, 1974</conference>
	<authors>
	<author>Morgan, H. L.</author>
	</authors>
	<keywords>disk analysis, disk optimization, disk files,file systems, file scheduling, space allocation,  memory hierarchy</keywords>
	<version>3.72 3.73 4.39</version>
	<location>CA740303 JB January 18, 1978  12:32 PM</location>
	<citations>
	<citation>2680	5	2680</citation>
	<citation>2680	5	2680</citation>
	<citation>2680	5	2680</citation>
	</citations>
	</document>
	<document id= '2679'>
	<title>Some Performance Tests of "quicksort" and Descendants</title>
	<abstract>Detailed performance evaluations are presented for six ACM algorithms: quicksort (No. 64),  Shellsort (No. 201), stringsort (No. 207), "TREESORT3" (No. 245), quickersort (No. 271), and qsort (No.  402).  Algorithms 271 and 402 are refinements of algorithm 64, and all three are discussed in some detail.   The evidence given here demonstrates that qsort (No. 402) requires many more comparisons than its author  claims.  Of all these algorithms, quickersort requires the fewest comparisons to sort random arrays.</abstract>
	<conference>CACM March, 1974</conference>
	<authors>
	<author>Loeser, R.</author>
	</authors>
	<keywords>sorting, in-place sorting, sorting efficiency, sorting performance tests, quicksort, quickersort,  qsort, Shellsort, stringsort, TREESORT3,utility sort algorithm, general-purpose sort algorithm, sorting  algorithm documentation</keywords>
	<version>4.49 5.31</version>
	<location>CA740304 JB January 18, 1978  11:26 AM</location>
	<citations>
	<citation>1175	4	2679</citation>
	<citation>1663	4	2679</citation>
	<citation>1919	4	2679</citation>
	<citation>1919	4	2679</citation>
	<citation>1919	4	2679</citation>
	<citation>1969	4	2679</citation>
	<citation>1969	4	2679</citation>
	<citation>1997	4	2679</citation>
	<citation>1997	4	2679</citation>
	<citation>2042	4	2679</citation>
	<citation>2042	4	2679</citation>
	<citation>2118	4	2679</citation>
	<citation>2191	4	2679</citation>
	<citation>2195	4	2679</citation>
	<citation>2216	4	2679</citation>
	<citation>2216	4	2679</citation>
	<citation>2222	4	2679</citation>
	<citation>2222	4	2679</citation>
	<citation>2356	4	2679</citation>
	<citation>2388	4	2679</citation>
	<citation>2348	4	2679</citation>
	<citation>2679	4	2679</citation>
	<citation>2679	4	2679</citation>
	<citation>2679	4	2679</citation>
	<citation>2679	4	2679</citation>
	<citation>2679	4	2679</citation>
	<citation>2679	4	2679</citation>
	<citation>2679	4	2679</citation>
	<citation>2679	4	2679</citation>
	<citation>2679	4	2679</citation>
	<citation>2679	4	2679</citation>
	<citation>2679	4	2679</citation>
	<citation>2679	4	2679</citation>
	<citation>2844	4	2679</citation>
	<citation>2972	4	2679</citation>
	<citation>3054	4	2679</citation>
	<citation>3054	4	2679</citation>
	<citation>3054	4	2679</citation>
	<citation>3054	4	2679</citation>
	<citation>3121	4	2679</citation>
	<citation>970	5	2679</citation>
	<citation>1175	5	2679</citation>
	<citation>1190	5	2679</citation>
	<citation>1228	5	2679</citation>
	<citation>1969	5	2679</citation>
	<citation>1997	5	2679</citation>
	<citation>308	5	2679</citation>
	<citation>2042	5	2679</citation>
	<citation>2679	5	2679</citation>
	<citation>2679	5	2679</citation>
	<citation>2679	5	2679</citation>
	<citation>507	5	2679</citation>
	<citation>3054	5	2679</citation>
	<citation>3187	5	2679</citation>
	<citation>716	5	2679</citation>
	<citation>783	5	2679</citation>
	<citation>1175	6	2679</citation>
	<citation>1880	6	2679</citation>
	<citation>1919	6	2679</citation>
	<citation>1969	6	2679</citation>
	<citation>1980	6	2679</citation>
	<citation>1997	6	2679</citation>
	<citation>307	6	2679</citation>
	<citation>308	6	2679</citation>
	<citation>309	6	2679</citation>
	<citation>2017	6	2679</citation>
	<citation>2679	6	2679</citation>
	<citation>776	6	2679</citation>
	</citations>
	</document>
	<document id= '2678'>
	<title>Visible Surface Plotting Program [J6] (Algorithm A475)</title>
	<conference>CACM March, 1974</conference>
	<authors>
	<author>Wright, T.</author>
	</authors>
	<keywords>hidden line problem, computer graphics, contour surface</keywords>
	<version>3.65 4.41 8.2</version>
	<location>CA740305 JB January 18, 1978  11:18 AM</location>
	<citations>
	<citation>2678	5	2678</citation>
	<citation>2678	5	2678</citation>
	<citation>2678	5	2678</citation>
	</citations>
	</document>
	<document id= '2677'>
	<citations>
	<citation>2668	5	2677</citation>
	<citation>2677	5	2677</citation>
	<citation>2677	5	2677</citation>
	<citation>2677	5	2677</citation>
	<citation>1604	6	2677</citation>
	<citation>1728	6	2677</citation>
	<citation>1761	6	2677</citation>
	<citation>1827	6	2677</citation>
	<citation>2677	6	2677</citation>
	</citations>
	<title>Incomplete Beta Ratio (Algorithm R179)</title>
	<conference>CACM March, 1974</conference>
	<authors>
	<author>Bosten, N. E.</author>
	<author>Battiste, E. L.</author>
	</authors>
	<location>CA740306 JB January 18, 1978  11:13 AM</location>
	</document>
	<document id= '2676'>
	<citations>
	<citation>2676	5	2676</citation>
	<citation>2676	5	2676</citation>
	<citation>2676	5	2676</citation>
	</citations>
	<title>Zeros of a Complex Polynomial (Algorithm R419)</title>
	<conference>CACM March, 1973</conference>
	<authors>
	<author>Withers, D. H.</author>
	</authors>
	<location>CA740307 JB January 18, 1978  11:11 AM</location>
	</document>
	<document id= '2675'>
	<citations>
	<citation>2675	5	2675</citation>
	<citation>2675	5	2675</citation>
	<citation>2675	5	2675</citation>
	</citations>
	<title>A Computer Routine for Quadratic and Linear Programming Problems (Algorithm R431)</title>
	<conference>CACM March, 1974</conference>
	<authors>
	<author>Ravindran, A.</author>
	</authors>
	<location>CA740308 JB January 18, 1978  11:10 AM</location>
	</document>
	<document id= '2674'>
	<title>Scan Conversion Algorithms for a Cell Organized Raster Display</title>
	<abstract>Raster scan computer graphics with "real time" character generators have previously been limited  to alphanumeric characters.  A display has been described which extends the capabilities of this organization  to include general graphics.  Two fundamentally different scan conversion algorithms which have been  developed to support this display are presented.  One is most suitable to non-interactive applications  and the other to interactive applications.  The algorithms were implemented in Fortran on the CDC 6400  computer.  Results obtained from the implementations show that the noninteractive algorithms can significantly  reduce display file storage requirements at little cost in execution time over that of a conventional  raster display.  The interactive algorithm can improve response time and reduce storage requirements.</abstract>
	<conference>CACM March, 1974</conference>
	<authors>
	<author>Barrett, R. C.</author>
	<author>Fordan, B. W. Jr.</author>
	</authors>
	<keywords>graphics, scan conversion, raster display, line drawing, discrete image, dot generation, matrix displays</keywords>
	<version>4.41 6.35 8.2</version>
	<location>CA740309 JB January 18, 1978  11:08 AM</location>
	<citations>
	<citation>1891	4	2674</citation>
	<citation>2211	4	2674</citation>
	<citation>2421	4	2674</citation>
	<citation>2674	4	2674</citation>
	<citation>2674	4	2674</citation>
	<citation>2674	4	2674</citation>
	<citation>2674	4	2674</citation>
	<citation>2687	4	2674</citation>
	<citation>2687	4	2674</citation>
	<citation>2828	4	2674</citation>
	<citation>1741	5	2674</citation>
	<citation>2004	5	2674</citation>
	<citation>2421	5	2674</citation>
	<citation>2674	5	2674</citation>
	<citation>2674	5	2674</citation>
	<citation>2674	5	2674</citation>
	<citation>2687	5	2674</citation>
	</citations>
	</document>
	<document id= '2673'>
	<title>Quadratic Search for Hash Tables of Size p^n</title>
	<conference>CACM March, 1974</conference>
	<authors>
	<author>Ackerman, A. F.</author>
	</authors>
	<keywords>hashing, quadratic search</keywords>
	<version>4.10</version>
	<location>CA740310 JB January 18, 1978  10:58 AM</location>
	<citations>
	<citation>2673	5	2673</citation>
	<citation>2673	5	2673</citation>
	<citation>2673	5	2673</citation>
	<citation>2704	5	2673</citation>
	<citation>2770	5	2673</citation>
	<citation>3053	5	2673</citation>
	<citation>1247	6	2673</citation>
	<citation>1329	6	2673</citation>
	<citation>1552	6	2673</citation>
	<citation>1749	6	2673</citation>
	<citation>1785	6	2673</citation>
	<citation>1786	6	2673</citation>
	<citation>1869	6	2673</citation>
	<citation>1973	6	2673</citation>
	<citation>1973	6	2673</citation>
	<citation>1992	6	2673</citation>
	<citation>1992	6	2673</citation>
	<citation>2018	6	2673</citation>
	<citation>2107	6	2673</citation>
	<citation>2109	6	2673</citation>
	<citation>2109	6	2673</citation>
	<citation>2356	6	2673</citation>
	<citation>2379	6	2673</citation>
	<citation>2412	6	2673</citation>
	<citation>2543	6	2673</citation>
	<citation>2673	6	2673</citation>
	<citation>2673	6	2673</citation>
	<citation>2673	6	2673</citation>
	<citation>2707	6	2673</citation>
	<citation>2770	6	2673</citation>
	</citations>
	</document>
	<document id= '2672'>
	<title>Emotional Content Considered Dangerous</title>
	<conference>CACM March, 1974</conference>
	<authors>
	<author>Smoliar, S. W.</author>
	</authors>
	<keywords>artificial intelligence, heuristic programming, models of cognitive processes, computer music, computer  composition, music theory</keywords>
	<version>3.44 3.65</version>
	<location>CA740311 JB January 18, 1978  10:56 AM</location>
	<citations>
	<citation>2672	5	2672</citation>
	<citation>2672	5	2672</citation>
	<citation>2672	5	2672</citation>
	</citations>
	</document>
	<document id= '2671'>
	<title>A Note on a Combinatorial Problem of Burnett and Coffman</title>
	<conference>CACM March, 1974</conference>
	<authors>
	<author>Stone, H. S.</author>
	</authors>
	<keywords>memories, interleaving, derangements, rencontres, combinatorial analysis</keywords>
	<version>5.39 6.34</version>
	<location>CA740312 JB January 18, 1978  10:54 AM</location>
	<citations>
	<citation>2671	5	2671</citation>
	<citation>2671	5	2671</citation>
	<citation>2671	5	2671</citation>
	</citations>
	</document>
	<document id= '2670'>
	<title>Efficient Implementation of a Variable Projection Algorithm for Nonlinear Least Squares Problems</title>
	<abstract>Nonlinear least squares frequently arise for which the variables to be solved for can be separated  into a linear and a nonlinear part.  A variable projection algorithm has been developed recently which  is designed to take advantage of the structure of a problem whose variables separate in this way.  This  paper gives a slightly more efficient and slightly more general version of this algorithm than has appeared  earlier.</abstract>
	<conference>CACM March, 1974</conference>
	<authors>
	<author>Krogh, F. T.</author>
	</authors>
	<keywords>nonlinear least squares, parameter estimation, variable projection</keywords>
	<version>5.14 5.15</version>
	<location>CA740313 JB January 18, 1978  10:49 AM</location>
	<citations>
	<citation>2670	5	2670</citation>
	<citation>2670	5	2670</citation>
	<citation>2670	5	2670</citation>
	</citations>
	</document>
	<document id= '2669'>
	<title>A Simple Linear Model of Demand Paging Performance</title>
	<abstract>Predicting the performance of a proposed automatically managed multilevel memory system requires  a model of the patterns by which programs refer to the information stored in the memory.  Some recent  experimental measurements on the Multics virtual memory suggest that, for rough approximations, a remarkably  simple program reference model will suffice.  The simple model combines the effect of the information  reference pattern with the effect of the automatic management algorithm to produce a single, composite  statement: the mean number of memory references between paging exceptions increases linearly with the  size of the paging memory.  The resulting model is easy to manipulate, and is applicable to such diverse  problems as choosing an optimum size for a paging memory, arranging for reproducible memory usage charges,  and estimating the amount of core memory sharing.</abstract>
	<conference>CACM April, 1974</conference>
	<authors>
	<author>Saltzer, J. H.</author>
	</authors>
	<keywords>paging, demand paging, memory models, program models, performance measurement, multilevel memory  systems, virtual memory, associative memory, memory usage accounting, Multics</keywords>
	<version>3.79 4.30 4.32</version>
	<location>CA740401 JB January 18, 1978  10:41 AM</location>
	<citations>
	<citation>1892	4	2669</citation>
	<citation>1901	4	2669</citation>
	<citation>2085	4	2669</citation>
	<citation>2095	4	2669</citation>
	<citation>2218	4	2669</citation>
	<citation>2277	4	2669</citation>
	<citation>2319	4	2669</citation>
	<citation>2319	4	2669</citation>
	<citation>2329	4	2669</citation>
	<citation>2358	4	2669</citation>
	<citation>2377	4	2669</citation>
	<citation>2373	4	2669</citation>
	<citation>2374	4	2669</citation>
	<citation>2380	4	2669</citation>
	<citation>2434	4	2669</citation>
	<citation>2499	4	2669</citation>
	<citation>2481	4	2669</citation>
	<citation>2501	4	2669</citation>
	<citation>2582	4	2669</citation>
	<citation>2582	4	2669</citation>
	<citation>2625	4	2669</citation>
	<citation>2626	4	2669</citation>
	<citation>2669	4	2669</citation>
	<citation>2669	4	2669</citation>
	<citation>2669	4	2669</citation>
	<citation>2669	4	2669</citation>
	<citation>2828	4	2669</citation>
	<citation>2863	4	2669</citation>
	<citation>2863	4	2669</citation>
	<citation>2881	4	2669</citation>
	<citation>2928	4	2669</citation>
	<citation>2996	4	2669</citation>
	<citation>3006	4	2669</citation>
	<citation>3016	4	2669</citation>
	<citation>3052	4	2669</citation>
	<citation>3054	4	2669</citation>
	<citation>3067	4	2669</citation>
	<citation>1751	5	2669</citation>
	<citation>1901	5	2669</citation>
	<citation>2017	5	2669</citation>
	<citation>2358	5	2669</citation>
	<citation>2669	5	2669</citation>
	<citation>2669	5	2669</citation>
	<citation>2669	5	2669</citation>
	</citations>
	</document>
	<document id= '2668'>
	<title>Computation of Page Fault Probability from Program Transition Diagram</title>
	<abstract>An algorithm is given for calculating page fault probability in a virtual memory system operating  under demand paging with various memory sizes and replacement rules.  A first order Markov model of program  behavior is assumed, and a representation of the system based on memory states, control states, and memory  substates is presented.  The algorithm is general in the sense that the page fault probabilities can  be calculated for nonpredictive replacement rules applied to any program represented by a one-step Markov  chain.  A detailed example is given to illustrate the algorithm for Random and Least Recently Used (LRU)  replacement rules.</abstract>
	<conference>CACM April, 1974</conference>
	<authors>
	<author>Franklin, M. A.</author>
	<author>Gupta, R. K.</author>
	</authors>
	<keywords>virtual memory, demand paging, replacement rule, program model, program behavior, Markov model,  page fault, page fault probability</keywords>
	<version>4.30 6.20</version>
	<location>CA740402 JB January 18, 1978  10:31 AM</location>
	<citations>
	<citation>1533	4	2668</citation>
	<citation>1892	4	2668</citation>
	<citation>1924	4	2668</citation>
	<citation>1951	4	2668</citation>
	<citation>2095	4	2668</citation>
	<citation>2218	4	2668</citation>
	<citation>2297	4	2668</citation>
	<citation>2374	4	2668</citation>
	<citation>2526	4	2668</citation>
	<citation>2667	4	2668</citation>
	<citation>2667	4	2668</citation>
	<citation>2667	4	2668</citation>
	<citation>2668	4	2668</citation>
	<citation>2668	4	2668</citation>
	<citation>2668	4	2668</citation>
	<citation>2668	4	2668</citation>
	<citation>2668	4	2668</citation>
	<citation>2862	4	2668</citation>
	<citation>2863	4	2668</citation>
	<citation>1604	5	2668</citation>
	<citation>1728	5	2668</citation>
	<citation>1761	5	2668</citation>
	<citation>1827	5	2668</citation>
	<citation>2668	5	2668</citation>
	<citation>2668	5	2668</citation>
	<citation>2668	5	2668</citation>
	<citation>2677	5	2668</citation>
	</citations>
	</document>
	<document id= '2667'>
	<title>Execution Characteristics of Programs in a Page-on-Demand System</title>
	<abstract>Data are presented which show the execution characteristics of two types of commonly used programs  in a large-scale, time-shared computer system.  A software monitoring facility built into the supervisor  was used for data collection during normal system operation.  These data were analyzed, and results of  this analysis are presented for a Fortran compiler and an interactive line file editor.  Probability  distribution functions and other data are given for such things as CPU intervals, I/O intervals, and  the number of such intervals during execution.  Empirical distributions are compared with simple theoretical  distributions (exponential, hyperexponential, and geometric).  Other data show paging characteristics  of tasks as a function of the number of pages those tasks have in core.</abstract>
	<conference>CACM April, 1974</conference>
	<authors>
	<author>Boyse, J. W.</author>
	</authors>
	<keywords>program behavior, virtual memory, paging, demand paging, software monitor, program execution characteristics,  compiler execution behavior, editor execution behavior</keywords>
	<version>4.12 4.19 4.32 4.39 4.9 8.1</version>
	<location>CA740403 JB January 18, 1978  10:12 AM</location>
	<citations>
	<citation>1533	4	2667</citation>
	<citation>1892	4	2667</citation>
	<citation>1924	4	2667</citation>
	<citation>1951	4	2667</citation>
	<citation>2095	4	2667</citation>
	<citation>2218	4	2667</citation>
	<citation>2297	4	2667</citation>
	<citation>2374	4	2667</citation>
	<citation>2526	4	2667</citation>
	<citation>2667	4	2667</citation>
	<citation>2667	4	2667</citation>
	<citation>2667	4	2667</citation>
	<citation>2668	4	2667</citation>
	<citation>2668	4	2667</citation>
	<citation>2668	4	2667</citation>
	<citation>2862	4	2667</citation>
	<citation>2863	4	2667</citation>
	<citation>1604	5	2667</citation>
	<citation>1728	5	2667</citation>
	<citation>1827	5	2667</citation>
	<citation>2667	5	2667</citation>
	<citation>2667	5	2667</citation>
	<citation>2667	5	2667</citation>
	</citations>
	</document>
	<document id= '2666'>
	<title>On Lions' Counter Example for Gotlieb's Method for the Construction of School Timetables</title>
	<abstract>The timetable problem is an essentially discrete problem. Although the discrete problem may  have no feasible solution, there may exist a solution to the equivalent continuous problem.  An example  is given, for which the nondiscrete solution can be interpreted as a set of timetables, differing from  week to week, which together satisfy the long-term requirements of the timetable problem.</abstract>
	<conference>CACM April, 1974</conference>
	<authors>
	<author>Smith, G.</author>
	<author>Sefton, I. M.</author>
	</authors>
	<keywords>combinatorial, multi-index problem, necessary conditions, schedule, school timetable, timetable</keywords>
	<version>3.51 5.39</version>
	<location>CA740404 JB January 18, 1978  10:02 AM</location>
	<citations>
	<citation>2666	5	2666</citation>
	<citation>2666	5	2666</citation>
	<citation>2666	5	2666</citation>
	</citations>
	</document>
	<document id= '2665'>
	<title>Copying List Structures Using Bounded Workspace</title>
	<abstract>Two new algorithms are presented for list structure copying using bounded workspace.  The first,  of primarily theoretical interest, shows that without cell tag bits the task can be performed in time  n^2.  The second algorithm, assuming one tag bit in each cell, delivers attractive practical speed.   Any noncyclic structure is copied in linear speed, while cyclic structures are copied in average time  less than nlogn.  No foreknowledge of cycle absence is necessary to achieve linear speed.  A variation  of the second algorithm solves an open problem concerning list structure marking.  That result demonstrates  that marking can be done in average time nlogn without the aid of supplemental tag bits or stacks.</abstract>
	<conference>CACM April, 1974</conference>
	<authors>
	<author>Lindstrom, G.</author>
	</authors>
	<keywords>list processing, copying, marking, space complexity</keywords>
	<version>4.34 5.25</version>
	<location>CA740405 JB January 18, 1978  9:55 AM</location>
	<citations>
	<citation>1869	4	2665</citation>
	<citation>2513	4	2665</citation>
	<citation>2665	4	2665</citation>
	<citation>2665	4	2665</citation>
	<citation>2723	4	2665</citation>
	<citation>2855	4	2665</citation>
	<citation>3106	4	2665</citation>
	<citation>1383	5	2665</citation>
	<citation>1549	5	2665</citation>
	<citation>2665	5	2665</citation>
	<citation>2665	5	2665</citation>
	<citation>2665	5	2665</citation>
	<citation>2766	5	2665</citation>
	<citation>2954	5	2665</citation>
	<citation>3106	5	2665</citation>
	<citation>1549	6	2665</citation>
	<citation>210	6	2665</citation>
	<citation>1972	6	2665</citation>
	<citation>2665	6	2665</citation>
	<citation>2665	6	2665</citation>
	<citation>2665	6	2665</citation>
	<citation>2766	6	2665</citation>
	<citation>2766	6	2665</citation>
	<citation>2855	6	2665</citation>
	<citation>2954	6	2665</citation>
	<citation>2998	6	2665</citation>
	</citations>
	</document>
	<document id= '2664'>
	<title>Parallelism in Tape-Sorting</title>
	<abstract>Two methods for employing parallelism in tape-sorting are presented.  Method A is the natural  way to use parallelism. Method B is new.  Both approximately achieve the goal of reducing the processing  time by a divisor which is the number of processors.</abstract>
	<conference>CACM April, 1974</conference>
	<authors>
	<author>Even, S.</author>
	</authors>
	<keywords>tape sorting, parallelism, external sorting, queues, stacks</keywords>
	<version>5.31 6.22</version>
	<location>CA740406 JB January 18, 1978  9:44 AM</location>
	<citations>
	<citation>2664	5	2664</citation>
	<citation>2664	5	2664</citation>
	<citation>2664	5	2664</citation>
	<citation>2714	5	2664</citation>
	<citation>3075	5	2664</citation>
	<citation>2289	6	2664</citation>
	<citation>2557	6	2664</citation>
	<citation>2664	6	2664</citation>
	<citation>2664	6	2664</citation>
	<citation>2714	6	2664</citation>
	</citations>
	</document>
	<document id= '2663'>
	<title>A Study of Computer Use in a Graduate School of Business</title>
	<conference>CACM April, 1974</conference>
	<authors>
	<author>Lucas, H. C. Jr.</author>
	<author>Montgomery, D. B.</author>
	<author>Larreche, J. C.</author>
	</authors>
	<keywords>education, management, business schools</keywords>
	<version>1.50 1.52</version>
	<location>CA740407 JB January 18, 1978  9:35 AM</location>
	<citations>
	<citation>2663	5	2663</citation>
	<citation>2663	5	2663</citation>
	<citation>2663	5	2663</citation>
	</citations>
	</document>
	<document id= '2662'>
	<title>Graduate Education: The Ph.D. Glut: Response and Rebuttal</title>
	<conference>CACM April, 1974</conference>
	<authors>
	<author>Freeman, P.</author>
	<author>Malcolm, M. A.</author>
	<author>Payne, W. H.</author>
	</authors>
	<keywords>graduate education, Ph.D. production, accreditation</keywords>
	<version>1.5 2.2 2.3</version>
	<location>CA740408 JB February 1, 1978  10:40 AM</location>
	<citations>
	<citation>2662	4	2662</citation>
	<citation>2531	5	2662</citation>
	<citation>2662	5	2662</citation>
	<citation>2662	5	2662</citation>
	<citation>2662	5	2662</citation>
	</citations>
	</document>
	<document id= '2661'>
	<title>Ideal Teaching Machines-A Solution to the Pedagogic Language Problem</title>
	<conference>CACM April, 1974</conference>
	<authors>
	<author>Sterling, T. D.</author>
	<author>Pollack, S. V.</author>
	</authors>
	<keywords>education, programming languages, simulators</keywords>
	<version>1.52 4.2</version>
	<location>CA740409 JB February 1, 1978  10:38 AM</location>
	<citations>
	<citation>2661	5	2661</citation>
	<citation>2661	5	2661</citation>
	<citation>2661	5	2661</citation>
	</citations>
	</document>
	<document id= '2660'>
	<title>Addendum to M. L. Patrick Paper</title>
	<conference>CACM April, 1974</conference>
	<authors>
	<author>Simmons, G. C.</author>
	</authors>
	<keywords>parallelism, polynomial root finding, real zeros</keywords>
	<version>5.15</version>
	<location>CA740410 JB February 1, 1978  10:36 AM</location>
	<citations>
	<citation>2660	4	2660</citation>
	<citation>2266	5	2660</citation>
	<citation>2660	5	2660</citation>
	<citation>2660	5	2660</citation>
	<citation>2660	5	2660</citation>
	</citations>
	</document>
	<document id= '2659'>
	<title>Some Remarks on Lookup of Structured Variables</title>
	<conference>CACM April, 1974</conference>
	<authors>
	<author>Abrahams, P. W.</author>
	</authors>
	<keywords>PL/1, symbol table, structured variables, qualified references, compilers</keywords>
	<version>4.12 4.22</version>
	<location>CA740411 JB February 1, 1978  10:34 AM</location>
	<citations>
	<citation>2659	4	2659</citation>
	<citation>2449	5	2659</citation>
	<citation>2659	5	2659</citation>
	<citation>2659	5	2659</citation>
	<citation>2659	5	2659</citation>
	</citations>
	</document>
	<document id= '2658'>
	<title>An Alternative Approach to Mutual Recursion in Algol 60 Using Restricted Compilers</title>
	<conference>CACM April, 1974</conference>
	<authors>
	<author>Balfour, A.</author>
	</authors>
	<keywords>Algol 60, mutual recursion, compiler restrictions</keywords>
	<version>4.12 4.22</version>
	<location>CA740412 JB February 1, 1978  10:32 AM</location>
	<citations>
	<citation>2658	4	2658</citation>
	<citation>2551	5	2658</citation>
	<citation>2658	5	2658</citation>
	<citation>2658	5	2658</citation>
	<citation>2658	5	2658</citation>
	</citations>
	</document>
	<document id= '2657'>
	<title>An Improved Program-Synthesizing Algorithm and Its Correctness</title>
	<abstract>An improved program-synthesizing algorithm based on the algorithm proposed by Waldinger and  Lee in 1969 is given.  In the old algorithm, the program-synthesizing problem is translated into a theorem-proving  problem, and a program is obtained by analyzing a proof.  For the improved algorithm, the analysis is  not necessary, and a program is obtained as soon as the proof is completed.  This is achieved by using  a modified variable tracing mechanism invented by Green in 1969.  The correctness of the improved algorithm  is also proved; i.e. the program thus obtained always satisfies the specification.</abstract>
	<conference>CACM April, 1974</conference>
	<authors>
	<author>Lee, R. C. T.</author>
	<author>Chang, C. L.</author>
	<author>Waldinger, R. J.</author>
	</authors>
	<keywords>program-synthesizing algorithms, theorem proving, consequence finding, primitive resolutions</keywords>
	<version>3.60 3.64 4.20 4.42 5.21 5.22 5.24</version>
	<location>CA740413 JB January 18, 1978  9:32 AM</location>
	<citations>
	<citation>2657	4	2657</citation>
	<citation>2719	4	2657</citation>
	<citation>2210	5	2657</citation>
	<citation>2657	5	2657</citation>
	<citation>2657	5	2657</citation>
	<citation>2657	5	2657</citation>
	<citation>2719	5	2657</citation>
	<citation>1626	6	2657</citation>
	<citation>210	6	2657</citation>
	<citation>2151	6	2657</citation>
	<citation>2167	6	2657</citation>
	<citation>2210	6	2657</citation>
	<citation>2645	6	2657</citation>
	<citation>2657	6	2657</citation>
	</citations>
	</document>
	<document id= '2656'>
	<title>Scalar- and Planar- Valued Curve Fitting Using Splines Under Tension</title>
	<abstract>The spline under tension was introduced by Schweikert in an attempt to imitate cubic splines  but avoid the spurious critical points they induce.  The defining equations are presented here, together  with an efficient method for determining the necessary parameters and computing the resultant spline.   The standard scalar-valued curve fitting problem is discussed, as well as the fitting of open and closed  curves in the plane.  The use of these curves and the importance of the tension in the fitting of contour  lines are mentioned as application.</abstract>
	<conference>CACM April, 1974</conference>
	<authors>
	<author>Cline, A. K.</author>
	</authors>
	<keywords>interpolation, splines, contouring, curve fitting</keywords>
	<version>5.13 8.2</version>
	<location>CA740414 JB January 18, 1978  9:23 AM</location>
	<citations>
	<citation>2656	4	2656</citation>
	<citation>2655	5	2656</citation>
	<citation>2656	5	2656</citation>
	<citation>2656	5	2656</citation>
	<citation>2656	5	2656</citation>
	<citation>2656	6	2656</citation>
	</citations>
	</document>
	<document id= '2655'>
	<title>Six Subprograms for Curve Fitting Using Splines Under Tension [E2] (Algorithm A476)</title>
	<conference>CACM April, 1974</conference>
	<authors>
	<author>Cline, A. K.</author>
	</authors>
	<keywords>interpolation, splines, contouring, curve fitting</keywords>
	<version>5.13 8.2</version>
	<location>CA740415 JB January 17, 1978  4:48 PM</location>
	<citations>
	<citation>2655	4	2655</citation>
	<citation>2655	5	2655</citation>
	<citation>2655	5	2655</citation>
	<citation>2655	5	2655</citation>
	<citation>2656	5	2655</citation>
	<citation>2655	6	2655</citation>
	</citations>
	</document>
	<document id= '2654'>
	<title>Generator of Set-Partitions to Exactly R Subsets [G7] (Algorithm A477)</title>
	<conference>CACM April, 1974</conference>
	<authors>
	<author>Ehrich, G.</author>
	</authors>
	<keywords>partitions, subset generation, permutations</keywords>
	<version>5.39</version>
	<location>CA740416 JB January 17, 1978  4:46 PM</location>
	<citations>
	<citation>2653	4	2654</citation>
	<citation>2654	4	2654</citation>
	<citation>1955	5	2654</citation>
	<citation>2654	5	2654</citation>
	<citation>2654	5	2654</citation>
	<citation>2654	5	2654</citation>
	</citations>
	</document>
	<document id= '2653'>
	<citations>
	<citation>2653	4	2653</citation>
	<citation>2654	4	2653</citation>
	<citation>1955	5	2653</citation>
	<citation>2653	5	2653</citation>
	<citation>2653	5	2653</citation>
	<citation>2653	5	2653</citation>
	</citations>
	<title>Solution of the Transcendental Equation w*exp(x)=x (Algorithm R443)</title>
	<conference>CACM April, 1974</conference>
	<authors>
	<author>Einarsson, B.</author>
	</authors>
	<location>CA740417 JB January 17, 1978  4:44 PM</location>
	</document>
	<document id= '2652'>
	<title>Reduction of Compilation Costs Through Language Contraction</title>
	<abstract>Programming languages tailored to particular groups of users can often be constructed by removing unwanted features from a general purpose language.  This paper describes the use of simulation techniques  to predict the savings in compilation cost achievable by such an approach.  The results suggest a function  which describes the effect of changes in the power of a language on the compilation cost of an algorithm  expressed in that language: when features not actually used by the algorithm are removed from the language,  the cost of compiling the algorithm decreases moderately, but when features that are needed are removed,  the compilation cost increases sharply.</abstract>
	<conference>CACM May, 1974</conference>
	<authors>
	<author>Shaw, M.</author>
	</authors>
	<keywords>design of programming languages, language contraction, compiler design, compilation cost, Algol</keywords>
	<version>4.12 4.20</version>
	<location>CA740501 JB January 17, 1978  4:39 PM</location>
	<citations>
	<citation>1086	4	2652</citation>
	<citation>1132	4	2652</citation>
	<citation>1234	4	2652</citation>
	<citation>1263	4	2652</citation>
	<citation>1265	4	2652</citation>
	<citation>1270	4	2652</citation>
	<citation>1323	4	2652</citation>
	<citation>1358	4	2652</citation>
	<citation>1379	4	2652</citation>
	<citation>1380	4	2652</citation>
	<citation>1453	4	2652</citation>
	<citation>1464	4	2652</citation>
	<citation>1484	4	2652</citation>
	<citation>1491	4	2652</citation>
	<citation>1498	4	2652</citation>
	<citation>1613	4	2652</citation>
	<citation>1614	4	2652</citation>
	<citation>1781	4	2652</citation>
	<citation>1825	4	2652</citation>
	<citation>1860	4	2652</citation>
	<citation>2083	4	2652</citation>
	<citation>2178	4	2652</citation>
	<citation>2179	4	2652</citation>
	<citation>2252	4	2652</citation>
	<citation>2325	4	2652</citation>
	<citation>2341	4	2652</citation>
	<citation>2546	4	2652</citation>
	<citation>2645	4	2652</citation>
	<citation>2652	4	2652</citation>
	<citation>2684	4	2652</citation>
	<citation>2842	4	2652</citation>
	<citation>2929	4	2652</citation>
	<citation>2934	4	2652</citation>
	<citation>3069	4	2652</citation>
	<citation>669	4	2652</citation>
	<citation>679	4	2652</citation>
	<citation>691	4	2652</citation>
	<citation>761	4	2652</citation>
	<citation>949	4	2652</citation>
	<citation>989	4	2652</citation>
	<citation>2652	5	2652</citation>
	<citation>2652	5	2652</citation>
	<citation>2652	5	2652</citation>
	<citation>3184	5	2652</citation>
	</citations>
	</document>
	<document id= '2651'>
	<title>The Treatment of Data Types in EL1</title>
	<abstract>In constructing a general purpose programming language, a key issue is providing a sufficient  set of data types and associated operations in a manner that permits both natural problem-oriented notation  and efficient implementation.  The EL1 language contains a number of features specifically designed to  simultaneously satisfy both requirements.  The resulting treatment of data types includes provision for  programmer-defined data types data types and generic routines, programmer control over type conversion,  and very flexible data type behavior, in a context that allows efficient compiled code and compact data  representation.</abstract>
	<conference>CACM May, 1974</conference>
	<authors>
	<author>Wegbreit, B.</author>
	</authors>
	<keywords>data types, modes, mode unions, type conversion, coercion, generic functions, extensible languages,  data type definition, data description language, compilation</keywords>
	<version>4.12 4.13 4.22</version>
	<location>CA740502 JB January 17, 1978  4:32 PM</location>
	<citations>
	<citation>2651	5	2651</citation>
	<citation>2651	5	2651</citation>
	<citation>2651	5	2651</citation>
	<citation>2723	5	2651</citation>
	<citation>2941	5	2651</citation>
	<citation>2956	5	2651</citation>
	<citation>3030	5	2651</citation>
	<citation>1379	6	2651</citation>
	<citation>1471	6	2651</citation>
	<citation>1549	6	2651</citation>
	<citation>1749	6	2651</citation>
	<citation>1826	6	2651</citation>
	<citation>210	6	2651</citation>
	<citation>2247	6	2651</citation>
	<citation>2356	6	2651</citation>
	<citation>2356	6	2651</citation>
	<citation>2457	6	2651</citation>
	<citation>2558	6	2651</citation>
	<citation>2651	6	2651</citation>
	<citation>2651	6	2651</citation>
	<citation>2651	6	2651</citation>
	<citation>2651	6	2651</citation>
	<citation>2958	6	2651</citation>
	<citation>2972	6	2651</citation>
	<citation>627	6	2651</citation>
	<citation>731	6	2651</citation>
	</citations>
	</document>
	<document id= '2650'>
	<title>Order-n Correction for Regular Languages</title>
	<abstract>A method is presented for calculating a string B, belonging to a given regular language L,  which is "nearest" (in number of edit operations) to a given input string a.  B is viewed as a reasonable  "correction" for the possibly erroneous string a, where a was originally intended to be a string of L.   The calculation of B by the method presented requires time proportional to |a|, the number of characters  in a.  The method should find applications in information retrieval, artificial intelligence, and spelling  correction systems.</abstract>
	<conference>CACM May, 1974</conference>
	<authors>
	<author>Wagner, R. A.</author>
	</authors>
	<keywords>error correction, regular languages, regular events, finite state automata, compiler error recovery,  spelling correction, string best match problem, correction, corrector, errors, nondeterministic finite-state  automata</keywords>
	<version>4.12 4.20 5.22 5.23 5.42</version>
	<location>CA740503 JB January 17, 1978  4:26 PM</location>
	<citations>
	<citation>1179	4	2650</citation>
	<citation>1225	4	2650</citation>
	<citation>1288	4	2650</citation>
	<citation>1350	4	2650</citation>
	<citation>1544	4	2650</citation>
	<citation>1646	4	2650</citation>
	<citation>1646	4	2650</citation>
	<citation>1781	4	2650</citation>
	<citation>1846	4	2650</citation>
	<citation>1945	4	2650</citation>
	<citation>2111	4	2650</citation>
	<citation>2534	4	2650</citation>
	<citation>2534	4	2650</citation>
	<citation>2556	4	2650</citation>
	<citation>2556	4	2650</citation>
	<citation>2630	4	2650</citation>
	<citation>2650	4	2650</citation>
	<citation>2650	4	2650</citation>
	<citation>2650	4	2650</citation>
	<citation>2650	4	2650</citation>
	<citation>2698	4	2650</citation>
	<citation>2708	4	2650</citation>
	<citation>2708	4	2650</citation>
	<citation>2887	4	2650</citation>
	<citation>3093	4	2650</citation>
	<citation>2111	5	2650</citation>
	<citation>2650	5	2650</citation>
	<citation>2650	5	2650</citation>
	<citation>2650	5	2650</citation>
	<citation>576	5	2650</citation>
	<citation>680	5	2650</citation>
	<citation>830	5	2650</citation>
	</citations>
	</document>
	<document id= '2649'>
	<title>On the Distributions of Significant Digits and Roundoff Errors</title>
	<abstract>Generalized logarithmic law is derived for the distribution of the first t significant digits  of a random digital integer.  This result is then used to determine the distribution of the roundoff  errors in floating-point operations, which is a mixture of uniform and reciprocal distributions.</abstract>
	<conference>CACM May, 1974</conference>
	<authors>
	<author>Tsao, N.</author>
	</authors>
	<keywords>significant digits, floating-point operations, roundoff errors, uniform distribution, reciprocal  distribution, variance, mean valve</keywords>
	<version>5.10 5.11</version>
	<location>CA740504 JB January 17, 1978  4:12 PM</location>
	<citations>
	<citation>2649	5	2649</citation>
	<citation>2649	5	2649</citation>
	<citation>2649	5	2649</citation>
	</citations>
	</document>
	<document id= '2648'>
	<title>A Design for a Number Theory Package with an Optimized Trial Division routine</title>
	<abstract>A number theory package is described which uses doubly linked list structures for storing multiprecise  integers.  The package has been coded in IBM's Basic Assembly Language and makes heavy use of the macro  language and conditional assembly.  An optimally coded trial division routine is also described which  can be used to determine the unique factorization of large integers.</abstract>
	<conference>CACM May, 1974</conference>
	<authors>
	<author>Wunderlich, M. C.</author>
	<author>Selfridge, J. L.</author>
	</authors>
	<keywords>number theory package, trial division, multiprecise arithmetic, factorization, doubly linked lists,  pseudoprime</keywords>
	<version>3.15</version>
	<location>CA740505 JB January 17, 1978  4:09 PM</location>
	<citations>
	<citation>2648	5	2648</citation>
	<citation>2648	5	2648</citation>
	<citation>2648	5	2648</citation>
	</citations>
	</document>
	<document id= '2647'>
	<title>More on Algorithms that Reveal Properties of Floating Point Arithmetic Units</title>
	<conference>CACM May, 1974</conference>
	<authors>
	<author>Gentleman, W. M.</author>
	<author>Marovich, S. B.</author>
	</authors>
	<keywords>floating-point arithmetic, high-level languages, philosophy of language design</keywords>
	<version>4.9 5.19</version>
	<location>CA740506 JB January 17, 1978  4:04 PM</location>
	<citations>
	<citation>2647	4	2647</citation>
	<citation>2792	4	2647</citation>
	<citation>2267	5	2647</citation>
	<citation>2647	5	2647</citation>
	<citation>2647	5	2647</citation>
	<citation>2647	5	2647</citation>
	<citation>2792	5	2647</citation>
	<citation>2267	6	2647</citation>
	<citation>2647	6	2647</citation>
	</citations>
	</document>
	<document id= '2646'>
	<title>A Model for Masking Rotational Latency by Dynamic Disk Allocation</title>
	<abstract>This paper presents the background and algorithms for masking the rotational latency of a disk  or drum.  It discusses the anticipatory input and output of blocks of data to buffer and primary memories  for a mono-programmed computer system.  A basic permutation algorithm and several variations are given.    Because of the anticipatory nature of the I/O scheduling, these algorithms are restricted to classes  of programs with predictable behavior.  While the methods are not restricted to numerical computations,  matrix and partial differential equation methods are typical examples of their use.  It is shown that  latency may be masked using a small amount of buffer memory.  The methods discussed are independent of  the overall size of the data base being considered.</abstract>
	<conference>CACM May, 1974</conference>
	<authors>
	<author>Gold, D. E.</author>
	<author>Kuck, D. J.</author>
	</authors>
	<keywords>buffer memory, memory hierarchy, permutation algorithm, rotational latency, staging, storage allocation</keywords>
	<version>4.41 6.20</version>
	<location>CA740507 JB January 17, 1978  3:59 PM</location>
	<citations>
	<citation>2646	5	2646</citation>
	<citation>2646	5	2646</citation>
	<citation>2646	5	2646</citation>
	</citations>
	</document>
	<document id= '2645'>
	<title>Two Languages for Estimating Program Efficiency</title>
	<abstract>Two languages enabling their users to estimate the efficiency of computer programs are presented.   The program whose efficiency one wishes to estimate is written in the first language, a go-to-less programming  language which includes most of the features of Algol 60.  The second language consists of interactive  commands enabling its users to provide additional information about the program written in the first  language and to output results estimating its efficiency.  Processors for the two languages are also  described.  The first processor is a syntax-directed translator which compiles a program into a symbolic  formula representing the execution time for that program.  The sound processor is a set of procedures  for that program.  The second processor is a set of procedures for algebraic manipulation which can be  called by the user to operate on the formula produced by the first processor.  Examples of the usage  of the two languages are included.  The limitations of the present system, its relation to Knuth's work  on the analysis of algorithms, and some of the directions for further research are also discussed.</abstract>
	<conference>CACM June, 1974</conference>
	<authors>
	<author>CCohen, J.</author>
	<author>Zuckerman, C.</author>
	</authors>
	<keywords>programming languages, syntax-directed translation, symbolic manipulation, program efficiency,  analysis of algorithms</keywords>
	<version>4.12 4.20 5.24 5.25</version>
	<location>CA740601 JB January 17, 1978  3:48 PM</location>
	<citations>
	<citation>1086	4	2645</citation>
	<citation>1132	4	2645</citation>
	<citation>1234	4	2645</citation>
	<citation>1263	4	2645</citation>
	<citation>1265	4	2645</citation>
	<citation>1270	4	2645</citation>
	<citation>1323	4	2645</citation>
	<citation>1358	4	2645</citation>
	<citation>1379	4	2645</citation>
	<citation>1380	4	2645</citation>
	<citation>1453	4	2645</citation>
	<citation>1464	4	2645</citation>
	<citation>1484	4	2645</citation>
	<citation>1491	4	2645</citation>
	<citation>1498	4	2645</citation>
	<citation>1613	4	2645</citation>
	<citation>1614	4	2645</citation>
	<citation>1781	4	2645</citation>
	<citation>1825	4	2645</citation>
	<citation>1860	4	2645</citation>
	<citation>2083	4	2645</citation>
	<citation>2178	4	2645</citation>
	<citation>2179	4	2645</citation>
	<citation>2252	4	2645</citation>
	<citation>2325	4	2645</citation>
	<citation>2341	4	2645</citation>
	<citation>2546	4	2645</citation>
	<citation>2645	4	2645</citation>
	<citation>2652	4	2645</citation>
	<citation>2684	4	2645</citation>
	<citation>2842	4	2645</citation>
	<citation>2929	4	2645</citation>
	<citation>2934	4	2645</citation>
	<citation>3069	4	2645</citation>
	<citation>669	4	2645</citation>
	<citation>679	4	2645</citation>
	<citation>691	4	2645</citation>
	<citation>761	4	2645</citation>
	<citation>949	4	2645</citation>
	<citation>989	4	2645</citation>
	<citation>2645	5	2645</citation>
	<citation>2645	5	2645</citation>
	<citation>2645	5	2645</citation>
	<citation>2719	5	2645</citation>
	<citation>3094	5	2645</citation>
	<citation>3184	5	2645</citation>
	<citation>1265	6	2645</citation>
	<citation>1626	6	2645</citation>
	<citation>210	6	2645</citation>
	<citation>2151	6	2645</citation>
	<citation>2167	6	2645</citation>
	<citation>2179	6	2645</citation>
	<citation>2210	6	2645</citation>
	<citation>2645	6	2645</citation>
	<citation>2645	6	2645</citation>
	<citation>2657	6	2645</citation>
	</citations>
	</document>
	<document id= '2644'>
	<title>A Theorem-Proving Language for Experimentation</title>
	<abstract>Because of the large number of strategies and inference rules presently under consideration  in automated theorem proving, there is a need for developing a language especially oriented toward automated  theorem proving.  This paper discusses some of the features and instructions of this language.  The use  of this language permits easy extension of automated theorem-proving programs to include new strategies  and/or new inference rules.  Such extend ability will permit general experimentation with the various  alternative systems.</abstract>
	<conference>CACM June, 1974</conference>
	<authors>
	<author>Henschen, L.</author>
	<author>Overbeek, R.</author>
	<author>Wos, L.</author>
	</authors>
	<keywords>theorem proving, resolution, factoring, paramodulation, programming languages</keywords>
	<version>3.60 4.22 5.21</version>
	<location>CA740602 JB January 17, 1978  3:37 PM</location>
	<citations>
	<citation>2644	5	2644</citation>
	<citation>2644	5	2644</citation>
	<citation>2644	5	2644</citation>
	</citations>
	</document>
	<document id= '2643'>
	<title>The Minimization of Spatially-Multiplexed Character Sets</title>
	<abstract>The paper describes a technique for compacting character sets in a digital computer while retaining  fast access to individual bits.  It considers the problem of minimizing the storage needed to contain  such tables.  Reduction techniques are developed, and the problem is shown to reduce to a covering problem.</abstract>
	<conference>CACM June, 1974</conference>
	<authors>
	<author>Gimpel, J. F.</author>
	</authors>
	<keywords>parsing, lexical analysis,scanning, string processing, spatial multiplexing</keywords>
	<version>4.9</version>
	<location>CA740603 JB January 17, 1978  3:31 PM</location>
	<citations>
	<citation>2643	5	2643</citation>
	<citation>2643	5	2643</citation>
	<citation>2643	5	2643</citation>
	<citation>2706	5	2643</citation>
	<citation>2643	6	2643</citation>
	</citations>
	</document>
	<document id= '2642'>
	<title>Solution of an Overdetermined System of Equations in the L1 Norm [F4] (Algorithm A478)</title>
	<conference>CACM June, 1974</conference>
	<authors>
	<author>Barrodale, I.</author>
	<author>Roberts, F. D. K.</author>
	</authors>
	<keywords>L1 approximation, L1 norm, overdetermined system of equations, linear programming, simplex method</keywords>
	<version>5.13 5.41</version>
	<location>CA740604 JB January 17, 1978  3:25 PM</location>
	<citations>
	<citation>2642	5	2642</citation>
	<citation>2642	5	2642</citation>
	<citation>2642	5	2642</citation>
	<citation>2759	5	2642</citation>
	<citation>2642	6	2642</citation>
	</citations>
	</document>
	<document id= '2641'>
	<title>A Minimal Spanning Tree clustering Method [Z] (Algorithm A479)</title>
	<conference>CACM June, 1974</conference>
	<authors>
	<author>Page, R. L.</author>
	</authors>
	<keywords>clustering, pattern recognition, feature selection, minimal spanning trees</keywords>
	<version>3.63 5.39 5.5</version>
	<location>CA740605 JB January 17, 1978  3:06 PM</location>
	<citations>
	<citation>2641	4	2641</citation>
	<citation>2363	5	2641</citation>
	<citation>2641	5	2641</citation>
	<citation>2641	5	2641</citation>
	<citation>2641	5	2641</citation>
	</citations>
	</document>
	<document id= '2640'>
	<citations>
	<citation>2350	4	2640</citation>
	<citation>2354	4	2640</citation>
	<citation>2640	4	2640</citation>
	<citation>2355	5	2640</citation>
	<citation>2640	5	2640</citation>
	<citation>2640	5	2640</citation>
	<citation>2640	5	2640</citation>
	</citations>
	<title>Modified Havie Integration (Algorithm R400)</title>
	<conference>CACM June, 1974</conference>
	<authors>
	<author>Piessens, R.</author>
	</authors>
	<location>CA740606 JB January 17, 1978  3:04 PM</location>
	</document>
	<document id= '2639'>
	<citations>
	<citation>2639	5	2639</citation>
	<citation>2639	5	2639</citation>
	<citation>2639	5	2639</citation>
	</citations>
	<title>Calculation of Fourier Integrals (Algorithm R418)</title>
	<conference>CACM June, 1974</conference>
	<authors>
	<author>Piessens, R.</author>
	</authors>
	<location>CA740607 JB January 17, 1978  3:01 PM</location>
	</document>
	<document id= '2638'>
	<citations>
	<citation>2638	5	2638</citation>
	<citation>2638	5	2638</citation>
	<citation>2638	5	2638</citation>
	</citations>
	<title>Hidden-Line Plotting Program (Algorithm R420)</title>
	<conference>CACM June, 1974</conference>
	<authors>
	<author>Gaither, B.</author>
	</authors>
	<location>CA740608 JB January 17, 1978  3:00 PM</location>
	</document>
	<document id= '2637'>
	<citations>
	<citation>2637	5	2637</citation>
	<citation>2637	5	2637</citation>
	<citation>2637	5	2637</citation>
	</citations>
	<title>Hidden-Line Plotting Program (Algorithm R420)</title>
	<conference>CACM June, 1974</conference>
	<authors>
	<author>Ellis, T. M. R.</author>
	</authors>
	<location>CA740609 JB January 17, 1978  2:59 PM</location>
	</document>
	<document id= '2636'>
	<citations>
	<citation>2636	5	2636</citation>
	<citation>2636	5	2636</citation>
	<citation>2636	5	2636</citation>
	</citations>
	<title>Generation of Random Correlated Normal Variables (Algorithm R425)</title>
	<conference>CACM June, 1974</conference>
	<authors>
	<author>Page, R. L.</author>
	</authors>
	<location>CA740610 JB January 17, 1978  2:57 PM</location>
	</document>
	<document id= '2635'>
	<citations>
	<citation>2635	5	2635</citation>
	<citation>2635	5	2635</citation>
	<citation>2635	5	2635</citation>
	</citations>
	<title>Exact Probabilities for R X C Contingency Tables (Algorithm R434)</title>
	<conference>CACM June, 1974</conference>
	<authors>
	<author>Boulton, D. M.</author>
	</authors>
	<location>CA740611 JB January 17, 1978  2:56 PM</location>
	</document>
	<document id= '2634'>
	<title>An Evaluation of Statistical Software in the Social Sciences</title>
	<abstract>Several hundred college and university computer installations now offer various types of statistical  packages for general use.  Among those most widely available are OSIRIS, SPSS, BMD, DATA-TEXT, and TSAR.   In order to provide users with a basis for selection and use, tests were made for each of these systems,  and the results are summarized as to cost and performance.</abstract>
	<conference>CACM June, 1974</conference>
	<authors>
	<author>Slysz, W. D.</author>
	</authors>
	<keywords>statistical computation, statistical software, descriptive statistics, bivariate tables, Pearson  correlation, regression, factor analysis, one-way analysis of variance</keywords>
	<version>1.3 3.30 4.19 4.22 4.49 5.5</version>
	<location>CA740612 JB January 17, 1978  2:54 PM</location>
	<citations>
	<citation>2634	5	2634</citation>
	<citation>2634	5	2634</citation>
	<citation>2634	5	2634</citation>
	</citations>
	</document>
	<document id= '2633'>
	<title>Compact Representation of Contour Plots for Phone Line Transmission</title>
	<abstract>Methods for the compact representation of contour plots are described and tested.  These are  intended to reduce the cost of transmitting contour plots over phone lines.  We feel some of these methods  could be used to transmit contour plots over voice grade phone lines.</abstract>
	<conference>CACM June, 1974</conference>
	<authors>
	<author>Adams, J.</author>
	<author>Gary, J.</author>
	</authors>
	<keywords>contour plotting, data transmission, remote terminal, data compaction</keywords>
	<version>4.41 5.13</version>
	<location>CA740613 JB January 17, 1978  2:48 PM</location>
	<citations>
	<citation>2633	4	2633</citation>
	<citation>2633	5	2633</citation>
	<citation>2633	5	2633</citation>
	<citation>2633	5	2633</citation>
	<citation>2987	5	2633</citation>
	<citation>699	5	2633</citation>
	<citation>1326	6	2633</citation>
	<citation>1630	6	2633</citation>
	<citation>2125	6	2633</citation>
	<citation>2547	6	2633</citation>
	<citation>2633	6	2633</citation>
	<citation>421	6	2633</citation>
	<citation>524	6	2633</citation>
	</citations>
	</document>
	<document id= '2632'>
	<title>HYDRA: The Kernel of a Multiprocessor Operating System</title>
	<abstract>This paper describes the design philosophy of HYDRA-the kernel of an operating system for C.mmp,  the Carnegie-Mellon Multi-Mini-Processor.  This philosophy is realized through the introduction of a  generalized notion of "resource", both physical and virtual, called an "object".  Mechanisms are presented  for dealing with objects, including the creation of new types, specification of new operations applicable  to a given type, sharing, and protection of any reference to a given object against improper application  of any of the operations defined with respect to that type of object.  The mechanisms provide a coherent  basis for extension of the system in two directions: the introduction of new facilities, and the creation  of highly secure systems.</abstract>
	<conference>CACM June, 1974</conference>
	<authors>
	<author>Wulf, W.</author>
	<author>Cohen, E.</author>
	<author>Corwin, W.</author>
	<author>Jones, A.</author>
	<author>Levin, R.</author>
	<author>Pierson, C.</author>
	<author>Pollack, F.</author>
	</authors>
	<keywords>operating system, kernel, nucleus, protection, security</keywords>
	<version>4.3 6.2</version>
	<location>CA740614 JB January 17, 1978  2:40 PM</location>
	<citations>
	<citation>1458	4	2632</citation>
	<citation>1523	4	2632</citation>
	<citation>1603	4	2632</citation>
	<citation>1698	4	2632</citation>
	<citation>1747	4	2632</citation>
	<citation>1748	4	2632</citation>
	<citation>1828	4	2632</citation>
	<citation>1854	4	2632</citation>
	<citation>1854	4	2632</citation>
	<citation>1877	4	2632</citation>
	<citation>1877	4	2632</citation>
	<citation>1960	4	2632</citation>
	<citation>1960	4	2632</citation>
	<citation>2150	4	2632</citation>
	<citation>2317	4	2632</citation>
	<citation>2319	4	2632</citation>
	<citation>2319	4	2632</citation>
	<citation>2377	4	2632</citation>
	<citation>2377	4	2632</citation>
	<citation>2378	4	2632</citation>
	<citation>2378	4	2632</citation>
	<citation>2342	4	2632</citation>
	<citation>2376	4	2632</citation>
	<citation>2379	4	2632</citation>
	<citation>2320	4	2632</citation>
	<citation>2424	4	2632</citation>
	<citation>2482	4	2632</citation>
	<citation>2497	4	2632</citation>
	<citation>2558	4	2632</citation>
	<citation>2618	4	2632</citation>
	<citation>2625	4	2632</citation>
	<citation>2632	4	2632</citation>
	<citation>2632	4	2632</citation>
	<citation>2632	4	2632</citation>
	<citation>2704	4	2632</citation>
	<citation>2723	4	2632</citation>
	<citation>2738	4	2632</citation>
	<citation>2738	4	2632</citation>
	<citation>2740	4	2632</citation>
	<citation>2740	4	2632</citation>
	<citation>2741	4	2632</citation>
	<citation>2840	4	2632</citation>
	<citation>2867	4	2632</citation>
	<citation>2868	4	2632</citation>
	<citation>2941	4	2632</citation>
	<citation>3105	4	2632</citation>
	<citation>3127	4	2632</citation>
	<citation>3144	4	2632</citation>
	<citation>3184	4	2632</citation>
	<citation>1471	5	2632</citation>
	<citation>1749	5	2632</citation>
	<citation>2080	5	2632</citation>
	<citation>2632	5	2632</citation>
	<citation>2632	5	2632</citation>
	<citation>2632	5	2632</citation>
	<citation>2868	5	2632</citation>
	<citation>2870	5	2632</citation>
	<citation>2876	5	2632</citation>
	<citation>3105	5	2632</citation>
	<citation>3144	5	2632</citation>
	<citation>953	6	2632</citation>
	<citation>1471	6	2632</citation>
	<citation>1471	6	2632</citation>
	<citation>2080	6	2632</citation>
	<citation>2298	6	2632</citation>
	<citation>2377	6	2632</citation>
	<citation>2377	6	2632</citation>
	<citation>2380	6	2632</citation>
	<citation>2491	6	2632</citation>
	<citation>2558	6	2632</citation>
	<citation>2597	6	2632</citation>
	<citation>2624	6	2632</citation>
	<citation>2625	6	2632</citation>
	<citation>2625	6	2632</citation>
	<citation>2625	6	2632</citation>
	<citation>2632	6	2632</citation>
	<citation>2632	6	2632</citation>
	<citation>2632	6	2632</citation>
	<citation>2632	6	2632</citation>
	<citation>2632	6	2632</citation>
	<citation>2685	6	2632</citation>
	<citation>2868	6	2632</citation>
	<citation>2939	6	2632</citation>
	<citation>3068	6	2632</citation>
	</citations>
	</document>
	<document id= '2631'>
	<title>An Information-Theoretic Approach to Text Searching in Direct Access Systems</title>
	<abstract>Using direct access computer files of bibliographic information, an attempt is made to overcome  one of the problems often associated with information retrieval, namely, the maintenance and use of large  dictionaries, the greater part of which is used only infrequently.  A novel method is presented, which  maps the hyperbolic frequency distribution.  This is more suited to implementation on storage devices.   This method treats text as a string of characters rather than words bounded by spaces, and chooses subsets  of strings such that their frequencies of occurrence are more even than those of word types.  The members  of this subset are then used as index keys for retrieval. The rectangular distribution of key frequencies  results in a much simplified file organization and promises considerable cost advantages.</abstract>
	<conference>CACM June, 1974</conference>
	<authors>
	<author>Barton, I. J.</author>
	<author>Creasey, S. E.</author>
	<author>Lynch, M. F.</author>
	<author>Snell, M. J.</author>
	</authors>
	<keywords>text searching, information theory, file organization, direct access, information retrieval, character  string, bit vector</keywords>
	<version>3.42 3.70 3.73 3.74 5.6</version>
	<location>CA740615 JB January 17, 1978  2:07 PM</location>
	<citations>
	<citation>2532	4	2631</citation>
	<citation>2631	4	2631</citation>
	<citation>2631	4	2631</citation>
	<citation>2746	4	2631</citation>
	<citation>3001	4	2631</citation>
	<citation>2139	5	2631</citation>
	<citation>2532	5	2631</citation>
	<citation>2631	5	2631</citation>
	<citation>2631	5	2631</citation>
	<citation>2631	5	2631</citation>
	</citations>
	</document>
	<document id= '2630'>
	<title>On Computing Sets of Shortest Paths in a Graph</title>
	<abstract>Two algorithms are presented that construct the k shortest paths between every pair of vertices  in a directed graph.  These algorithms generalize the Floyd algorithm and the Dantzig algorithm for finding  the shortest path between every pair of vertices in a directed graph.</abstract>
	<conference>CACM June, 1974</conference>
	<authors>
	<author>Minieka, E.</author>
	</authors>
	<keywords>graph, network, shortest path, algorithm</keywords>
	<version>5.32</version>
	<location>CA740616 JB January 17, 1978  1:55 PM</location>
	<citations>
	<citation>1846	4	2630</citation>
	<citation>2630	4	2630</citation>
	<citation>2650	4	2630</citation>
	<citation>2630	5	2630</citation>
	<citation>2630	5	2630</citation>
	<citation>2630	5	2630</citation>
	<citation>2757	5	2630</citation>
	<citation>2933	5	2630</citation>
	<citation>576	5	2630</citation>
	<citation>1059	6	2630</citation>
	<citation>2630	6	2630</citation>
	<citation>2630	6	2630</citation>
	<citation>2757	6	2630</citation>
	</citations>
	</document>
	<document id= '2629'>
	<title>The UNIX Time-Sharing system</title>
	<abstract>UNIX is a general-purpose, multi-user, interactive operating system for the Digital Equipment  Corporation PDP-11/40 and 11/45 computers.  It offers a number of features seldom found even in larger  operating systems, including: (1) a hierarchical file system incorporating demountable volumes; (2) compatible  file, device, and inter-process I/O; (3) the ability to initiate asynchronous processes; (4) system command  language selectable on a per-user basis; and (5) over 100 subsystems including a dozen languages.This  paper discusses the nature and implementation of the file system and of the user command interface.</abstract>
	<conference>CACM July, 1974</conference>
	<authors>
	<author>Ritchie, D. M.</author>
	<author>Thompson, K.</author>
	</authors>
	<keywords>time-sharing, operating system, file system, command language, PDP-11</keywords>
	<version>4.30 4.32</version>
	<location>CA740702 JB January 17, 1978  1:40 PM</location>
	<citations>
	<citation>2299	4	2629</citation>
	<citation>2501	4	2629</citation>
	<citation>2629	4	2629</citation>
	<citation>2629	4	2629</citation>
	<citation>2868	4	2629</citation>
	<citation>2915	4	2629</citation>
	<citation>2928	4	2629</citation>
	<citation>2951	4	2629</citation>
	<citation>3114	4	2629</citation>
	<citation>1502	5	2629</citation>
	<citation>2380	5	2629</citation>
	<citation>2626	5	2629</citation>
	<citation>2629	5	2629</citation>
	<citation>2629	5	2629</citation>
	<citation>2629	5	2629</citation>
	<citation>2786	5	2629</citation>
	<citation>2840	5	2629</citation>
	<citation>2919	5	2629</citation>
	<citation>3017	5	2629</citation>
	<citation>3110	5	2629</citation>
	<citation>3174	5	2629</citation>
	<citation>1471	6	2629</citation>
	<citation>1746	6	2629</citation>
	<citation>1746	6	2629</citation>
	<citation>2194	6	2629</citation>
	<citation>2358	6	2629</citation>
	<citation>2377	6	2629</citation>
	<citation>2436	6	2629</citation>
	<citation>2536	6	2629</citation>
	<citation>2593	6	2629</citation>
	<citation>2625	6	2629</citation>
	<citation>2626	6	2629</citation>
	<citation>2629	6	2629</citation>
	<citation>2629	6	2629</citation>
	<citation>2629	6	2629</citation>
	<citation>2629	6	2629</citation>
	<citation>2629	6	2629</citation>
	<citation>2629	6	2629</citation>
	<citation>2629	6	2629</citation>
	<citation>2858	6	2629</citation>
	</citations>
	</document>
	<document id= '2628'>
	<title>Minimal-Total-Processing Time Drum and Disk Scheduling Disciplines</title>
	<abstract>This article investigates the application of minimal-total-processing-time (MTPT) scheduling  disciplines to rotating storage units when random arrival of requests is allowed.  Fixed-head drum and  moving-head drum and moving-head disk storage units are considered, and emphasis is placed on the relative  merits of the MTPT scheduling discipline with respect to the shortest-latency-time-first (SLTF) scheduling  discipline.  The results of the simulation studies presented show that neither scheduling discipline  is unconditionally superior to the other.  For most fixed-head drum applications, the SLTF discipline  is preferable to MTPT, but for intra-cylinder disk scheduling the MTPT discipline offers a distinct advantage  over the SLTF discipline.  The computational requirements of an algorithm that implements the MTPT scheduling  discipline are shown to be comparable to SLTF algorithms. In both cases, the sorting procedure is the  most time-consuming phase of the algorithm.</abstract>
	<conference>CACM July, 1974</conference>
	<authors>
	<author>Fuller, S. H.</author>
	</authors>
	<keywords>drum scheduling, disk scheduling, shortest-latency-time-first (SLTF), minimal-total-processing-time  (MTPT), rotating storage units</keywords>
	<version>4.31 4.41 6.34 6.35</version>
	<location>CA740703 JB January 17, 1978  1:07 PM</location>
	<citations>
	<citation>2628	4	2628</citation>
	<citation>2628	4	2628</citation>
	<citation>2891	4	2628</citation>
	<citation>3072	4	2628</citation>
	<citation>3097	4	2628</citation>
	<citation>2375	5	2628</citation>
	<citation>2496	5	2628</citation>
	<citation>2628	5	2628</citation>
	<citation>2628	5	2628</citation>
	<citation>2628	5	2628</citation>
	<citation>2891	5	2628</citation>
	<citation>2375	6	2628</citation>
	<citation>2628	6	2628</citation>
	</citations>
	</document>
	<document id= '2627'>
	<title>Scheduling Independent Tasks to Reduce Mean Finishing Time</title>
	<abstract>Sequencing to minimize mean finishing time (or mean time in system) is not only desirable to  the user, but it also tends to minimize at each point in time the storage required to hold incomplete  tasks.  In this paper a deterministic model of independent tasks is introduced and new results are derived  which extend and generalize the algorithms known for minimizing mean finishing time.  In addition to  presenting and analyzing new algorithms it is shown that the most general mean-finishing-time problem  for independent tasks is polynomial complete, and hence unlikely to admit of a non-enumerative solution</abstract>
	<conference>CACM July, 1974</conference>
	<authors>
	<author>Bruno, J.</author>
	<author>Coffman, E. G. Jr.</author>
	<author>Sethi, R.</author>
	</authors>
	<keywords>minimizing mean finishing time, minimizing mean flow time, sequencing algorithms, optimal scheduling  algorithms, deterministic scheduling models</keywords>
	<version>4.32 5.39</version>
	<location>CA740704 JB January 17, 1978  12:56 PM</location>
	<citations>
	<citation>2627	5	2627</citation>
	<citation>2627	5	2627</citation>
	<citation>2627	5	2627</citation>
	</citations>
	</document>
	<document id= '2626'>
	<title>Protection and the Control of Information Sharing in Multics</title>
	<abstract>The design of mechanisms to control the sharing of information in the Multics system is described.   Five design principles help provide insight into the tradeoffs among different possible designs.  The  key mechanisms described include access control lists, hierarchical control of access specifications,  identification and authentication of users, and primary memory protection.  The paper ends with a discussion  of several known weaknesses in the current protection mechanism design.</abstract>
	<conference>CACM July, 1974</conference>
	<authors>
	<author>Saltzer, J. H.</author>
	</authors>
	<keywords>Multics, protection, security, privacy, access control, authentication, computer utilities, time-sharing  systems, proprietary programs, protected subsystems, virtual memory, descriptors</keywords>
	<version>3.70 4.30 6.2</version>
	<location>CA740705 JB January 17, 1978  12:49 PM</location>
	<citations>
	<citation>1753	4	2626</citation>
	<citation>2358	4	2626</citation>
	<citation>2377	4	2626</citation>
	<citation>2377	4	2626</citation>
	<citation>2372	4	2626</citation>
	<citation>2436	4	2626</citation>
	<citation>2625	4	2626</citation>
	<citation>2626	4	2626</citation>
	<citation>2626	4	2626</citation>
	<citation>2626	4	2626</citation>
	<citation>2626	4	2626</citation>
	<citation>2626	4	2626</citation>
	<citation>2669	4	2626</citation>
	<citation>2786	4	2626</citation>
	<citation>2840	4	2626</citation>
	<citation>2840	4	2626</citation>
	<citation>2868	4	2626</citation>
	<citation>2868	4	2626</citation>
	<citation>2870	4	2626</citation>
	<citation>2919	4	2626</citation>
	<citation>3017	4	2626</citation>
	<citation>3105	4	2626</citation>
	<citation>3110	4	2626</citation>
	<citation>3144	4	2626</citation>
	<citation>3174	4	2626</citation>
	<citation>1746	5	2626</citation>
	<citation>2358	5	2626</citation>
	<citation>2377	5	2626</citation>
	<citation>2625	5	2626</citation>
	<citation>2626	5	2626</citation>
	<citation>2626	5	2626</citation>
	<citation>2626	5	2626</citation>
	<citation>2629	5	2626</citation>
	<citation>2840	5	2626</citation>
	<citation>1471	6	2626</citation>
	<citation>1746	6	2626</citation>
	<citation>2436	6	2626</citation>
	<citation>2626	6	2626</citation>
	<citation>2629	6	2626</citation>
	</citations>
	</document>
	<document id= '2625'>
	<title>Capability-Based Addressing</title>
	<abstract>Various addressing schemes making use of segment tables are examined.  The inadequacies of  these schemes when dealing with shared addresses are explained. These inadequacies are traced to the  lack of an efficient absolute address for objects in these systems.  The direct use of a capability as  an address is shown to overcome these difficulties because it provides the needed absolute address.   Implementation of capability-based addressing is discussed.  It is predicted that the use of tags to  identify capabilities will dominate.  A hardware address translation scheme which never requires the  modification of the representation of capabilities is suggested. The scheme uses a main memory hash table  for obtaining a segment's location in main memory given its unique code.  The hash table is avoided for recently accessed segments by means of a set of associative registers.  A computer using capability-based  addressing may be substantially superior to present systems on the basis of protection, simplicity of  programming conventions, and efficient implementation.</abstract>
	<conference>CACM July, 1974</conference>
	<authors>
	<author>Fabry, R. S.</author>
	</authors>
	<keywords>addressing, capabilities, addressing hardware, protection, protection hardware, shared addresses,  information sharing, operating systems, computer utility, segmentation, tagged architecture</keywords>
	<version>4.30 4.32 4.34 6.21</version>
	<location>CA740706 JB January 17, 1978  12:39 PM</location>
	<citations>
	<citation>1458	4	2625</citation>
	<citation>1523	4	2625</citation>
	<citation>1603	4	2625</citation>
	<citation>1698	4	2625</citation>
	<citation>1747	4	2625</citation>
	<citation>1748	4	2625</citation>
	<citation>1854	4	2625</citation>
	<citation>1877	4	2625</citation>
	<citation>1960	4	2625</citation>
	<citation>2317	4	2625</citation>
	<citation>2358	4	2625</citation>
	<citation>2377	4	2625</citation>
	<citation>2377	4	2625</citation>
	<citation>2378	4	2625</citation>
	<citation>2497	4	2625</citation>
	<citation>2558	4	2625</citation>
	<citation>2625	4	2625</citation>
	<citation>2625	4	2625</citation>
	<citation>2625	4	2625</citation>
	<citation>2625	4	2625</citation>
	<citation>2626	4	2625</citation>
	<citation>2632	4	2625</citation>
	<citation>2669	4	2625</citation>
	<citation>2840	4	2625</citation>
	<citation>2922	4	2625</citation>
	<citation>2941	4	2625</citation>
	<citation>3081	4	2625</citation>
	<citation>3101	4	2625</citation>
	<citation>3105	4	2625</citation>
	<citation>3112	4	2625</citation>
	<citation>3144	4	2625</citation>
	<citation>1471	5	2625</citation>
	<citation>1753	5	2625</citation>
	<citation>2358	5	2625</citation>
	<citation>2438	5	2625</citation>
	<citation>2625	5	2625</citation>
	<citation>2625	5	2625</citation>
	<citation>2625	5	2625</citation>
	<citation>2626	5	2625</citation>
	<citation>2868	5	2625</citation>
	<citation>3105	5	2625</citation>
	<citation>3144	5	2625</citation>
	<citation>1471	6	2625</citation>
	<citation>1471	6	2625</citation>
	<citation>1746	6	2625</citation>
	<citation>2080	6	2625</citation>
	<citation>2298	6	2625</citation>
	<citation>2358	6	2625</citation>
	<citation>2377	6	2625</citation>
	<citation>2377	6	2625</citation>
	<citation>2380	6	2625</citation>
	<citation>2491	6	2625</citation>
	<citation>2558	6	2625</citation>
	<citation>2597	6	2625</citation>
	<citation>2624	6	2625</citation>
	<citation>2625	6	2625</citation>
	<citation>2625	6	2625</citation>
	<citation>2625	6	2625</citation>
	<citation>2625	6	2625</citation>
	<citation>2629	6	2625</citation>
	<citation>2632	6	2625</citation>
	<citation>2632	6	2625</citation>
	<citation>2632	6	2625</citation>
	<citation>2868	6	2625</citation>
	<citation>2939	6	2625</citation>
	<citation>3068	6	2625</citation>
	</citations>
	</document>
	<document id= '2624'>
	<title>Formal Requirements for Virtualizable Third Generation Architectures</title>
	<abstract>Virtual machine systems have been implemented on a limited number of third generation computer  systems, e.g. CP-67 on the IBM 360/67.  From previous empirical studies, it is known that certain third  generation computer systems, e.g. the DEC PDP-10, cannot support a virtual machine system.  In this paper,  model of a third-generation-like computer system is developed.  Formal techniques are used to derive  precise sufficient conditions to test whether such an architecture can support virtual machines.</abstract>
	<conference>CACM July, 1974</conference>
	<authors>
	<author>Popek, G. J.</author>
	<author>Goldberg, R. P.</author>
	</authors>
	<keywords>operating system, third generation architecture, sensitive instruction, formal requirements, abstract  model, proof, virtual machine, virtual memory, hypervisor, virtual machine monitor</keywords>
	<version>4.32 4.35 5.21 5.22</version>
	<location>CA740707 JB January 17, 1978  11:19 AM</location>
	<citations>
	<citation>2624	5	2624</citation>
	<citation>2624	5	2624</citation>
	<citation>2624	5	2624</citation>
	<citation>3144	5	2624</citation>
	<citation>1471	6	2624</citation>
	<citation>2298	6	2624</citation>
	<citation>2491	6	2624</citation>
	<citation>2597	6	2624</citation>
	<citation>2624	6	2624</citation>
	<citation>2625	6	2624</citation>
	<citation>2632	6	2624</citation>
	</citations>
	</document>
	<document id= '2623'>
	<title>A New Technique for Compression and Storage of Data</title>
	<abstract>The widespread tendency toward storage of large programs and blocks off text has produced a  need for efficient methods of compressing and storing data.  This paper describes techniques that can,  in most cases, decrease storage size by a factor of from two to four.  The techniques involve special  handling of leading and trailing blanks, and the encoding of other symbols in groups of fixed size as  unique fixed point numbers.  The efficiency of the system is considered and pertinent statistics are  given and compared with statistics for other information coding techniques.</abstract>
	<conference>CACM August, 1974</conference>
	<authors>
	<author>Hahn, B.</author>
	</authors>
	<keywords>file maintenance, information retrieval, utility programs, text compression, coding techniques,  data storage, data management</keywords>
	<version>3.70 3.73 4.49</version>
	<location>CA740801 JB January 17, 1978  10:25 AM</location>
	<citations>
	<citation>2530	4	2623</citation>
	<citation>2623	4	2623</citation>
	<citation>2623	4	2623</citation>
	<citation>2819	4	2623</citation>
	<citation>2501	5	2623</citation>
	<citation>2537	5	2623</citation>
	<citation>2623	5	2623</citation>
	<citation>2623	5	2623</citation>
	<citation>2623	5	2623</citation>
	</citations>
	</document>
	<document id= '2622'>
	<title>A User Authentication Scheme Not Requiring Secrecy in the Computer</title>
	<abstract>In many computer operating systems a user authenticates himself by entering a secret password  known solely to himself and the system.  The system compares this password with one recorded in a Password  Table which is available to only the authentication program.  The integrity of the system depends on  keeping the table secret.  In this paper a password scheme is presented which does not require secrecy  in the computer.    All aspects of the system, including all relevant code and data bases, may be known  by anyone attempting to intrude.  The scheme is based on using a function H which the would-be intruder  is unable to invert.  This function is applied to the user's password and the result compared to a table  entry, a match being interpreted as authentication of the user.  The intruder may know all about H and  have access to the table, but he can penetrate the system only if he can invert H to determine an input  that produces a given output.  This paper discusses issues surrounding selection of a suitable H.  Two  different plausible arguments are given that penetration would be exceedingly difficult, and it is then  argued that more rigorous results are unlikely.  Finally, some human engineering problems relating to  the scheme are discussed.</abstract>
	<conference>CACM August, 1974</conference>
	<authors>
	<author>Evans, A. Jr.</author>
	<author>Kantrowitz, W.</author>
	<author>Weiss, E.</author>
	</authors>
	<keywords>operating system security, security, authentication, passwords, one-way encryption, cryptology</keywords>
	<version>4.39 5.39</version>
	<location>CA740802 JB January 17, 1978  10:19 AM</location>
	<citations>
	<citation>2622	5	2622</citation>
	<citation>2622	5	2622</citation>
	<citation>2622	5	2622</citation>
	</citations>
	</document>
	<document id= '2621'>
	<title>A High Security Log-in Procedure</title>
	<abstract>The protection of time sharing systems from unauthorized users is often achieved by the use  of passwords.  By using one-way ciphers to code the passwords, the risks involved with storing the passwords  in the computer can be avoided.  We discuss the selection of a suitable one-way cipher and suggest that  for this purpose polynomials over a prime modulus are superior to one-way ciphers derived from Sannon  codes.</abstract>
	<conference>CACM August, 1974</conference>
	<authors>
	<author>Purdy, G. B.</author>
	</authors>
	<keywords>operating systems, time sharing systems, security, cryptography</keywords>
	<version>4.35</version>
	<location>CA740803 JB January 17, 1978  10:10 AM</location>
	<citations>
	<citation>2621	5	2621</citation>
	<citation>2621	5	2621</citation>
	<citation>2621	5	2621</citation>
	</citations>
	</document>
	<document id= '2620'>
	<title>Execution Time Requirements for Encipherment Programs</title>
	<abstract>Although encipherment has often been discussed as a means to protect computer data, its costs  are not well established.  Five experiments were conducted to measure the cpu time on a CDC 6400 required  by additive ciphers programmed both in assembly language and in Fortran: a "null transformation" to measure  the time to move data without encipherment; encipherment with one-word key; encipherment with a 125-word  key; double key encipherment; and encipherment using a pseudo random key.  The results were analyzed  for consistency over 100 runs, and the effects of constant and intermittent errors were considered.   Timing rates for assembly language encipherment ranged from 498,800 characters per second for a pseudo  random key cipher to 2,092,000 characters per second for a constant one-word key cipher.  The latter  is almost equivalent to the rate required simply to move data without encipherment.  Fortran tests required  over four times as much cpu time.  This paper introduces the idea on enciphering time coefficient the  ratio of enciphering time to the time taken to fetch and store data without encipherment.</abstract>
	<conference>CACM August, 1974</conference>
	<authors>
	<author>Friedman, T. D.</author>
	<author>offman, L. J.</author>
	</authors>
	<keywords>encipherment, ciphers, security, privacy transformations, protection, cryptography, cryptology</keywords>
	<version>2.12 2.43 3.70 3.81 4.32 4.39</version>
	<location>CA740804 JB January 17, 1978  10:05 AM</location>
	<citations>
	<citation>2620	5	2620</citation>
	<citation>2620	5	2620</citation>
	<citation>2620	5	2620</citation>
	</citations>
	</document>
	<document id= '2619'>
	<title>Graph Coloring Conditions for the Existence of Solutions to the Timetable Problem</title>
	<abstract>A necessary and sufficient condition is presented for the existence of a solution to the Gotlieb  class-teacher timetable problem.  Several relationships are established between the class-teacher timetable  problem and graphs with preconditions.  These preconditions place additional restrictions on the coloration  of a graph.  The preconditions correspond to the unavailability constraints and preassigned meetings  in the class-teacher timetable problem.  Using some recent results that convert graphs with preconditions  to graphs without them, it is shown that the existence of a coloration of a graph is the required necessary  and sufficient condition.</abstract>
	<conference>CACM August, 1974</conference>
	<authors>
	<author>Neufeld, G. A.</author>
	<author>Tartar, J.</author>
	</authors>
	<keywords>graphs, coloration, preassignment, prevention of assignment, class-teacher timetables</keywords>
	<version>3.9 5.30 5.32 5.59</version>
	<location>CA740805 JB January 17, 1978  9:55 AM</location>
	<citations>
	<citation>1355	4	2619</citation>
	<citation>2619	4	2619</citation>
	<citation>2619	4	2619</citation>
	<citation>2772	4	2619</citation>
	<citation>2787	4	2619</citation>
	<citation>1419	5	2619</citation>
	<citation>1429	5	2619</citation>
	<citation>2619	5	2619</citation>
	<citation>2619	5	2619</citation>
	<citation>2619	5	2619</citation>
	</citations>
	</document>
	<document id= '2618'>
	<title>A New Solution of Dijkstra's Concurrent Programming Problem</title>
	<abstract>A simple solution to the mutual exclusion problem is presented which allows the system to continue  to operate despite the failure of any individual component.</abstract>
	<conference>CACM August, 1974</conference>
	<authors>
	<author>Lamport, L.</author>
	</authors>
	<keywords>critical section, concurrent programming, multiprocessing, semaphores</keywords>
	<version>4.32</version>
	<location>CA740806 JB January 17, 1978  9:48 AM</location>
	<citations>
	<citation>1781	4	2618</citation>
	<citation>1828	4	2618</citation>
	<citation>1854	4	2618</citation>
	<citation>1877	4	2618</citation>
	<citation>1960	4	2618</citation>
	<citation>2150	4	2618</citation>
	<citation>2150	4	2618</citation>
	<citation>2150	4	2618</citation>
	<citation>2228	4	2618</citation>
	<citation>2228	4	2618</citation>
	<citation>2256	4	2618</citation>
	<citation>2256	4	2618</citation>
	<citation>2317	4	2618</citation>
	<citation>2317	4	2618</citation>
	<citation>2319	4	2618</citation>
	<citation>2377	4	2618</citation>
	<citation>2342	4	2618</citation>
	<citation>2342	4	2618</citation>
	<citation>2342	4	2618</citation>
	<citation>2376	4	2618</citation>
	<citation>2376	4	2618</citation>
	<citation>2379	4	2618</citation>
	<citation>2424	4	2618</citation>
	<citation>2482	4	2618</citation>
	<citation>2618	4	2618</citation>
	<citation>2618	4	2618</citation>
	<citation>2618	4	2618</citation>
	<citation>2618	4	2618</citation>
	<citation>2632	4	2618</citation>
	<citation>2704	4	2618</citation>
	<citation>2723	4	2618</citation>
	<citation>2738	4	2618</citation>
	<citation>2740	4	2618</citation>
	<citation>2741	4	2618</citation>
	<citation>2867	4	2618</citation>
	<citation>3184	4	2618</citation>
	<citation>3184	4	2618</citation>
	<citation>1198	5	2618</citation>
	<citation>1338	5	2618</citation>
	<citation>1749	5	2618</citation>
	<citation>2256	5	2618</citation>
	<citation>2618	5	2618</citation>
	<citation>2618	5	2618</citation>
	<citation>2618	5	2618</citation>
	<citation>2895	5	2618</citation>
	<citation>2150	6	2618</citation>
	<citation>2618	6	2618</citation>
	</citations>
	</document>
	<document id= '2617'>
	<citations>
	<citation>2617	5	2617</citation>
	<citation>2617	5	2617</citation>
	<citation>2617	5	2617</citation>
	</citations>
	<title>A Note on Subexpression Ordering in the Evaluation of Arithmetic Expressions</title>
	<conference>CACM August, 1974</conference>
	<authors>
	<author>Denning, P. J.</author>
	<author>Graham, G. S.</author>
	</authors>
	<location>CA740807 JB January 17, 1978  9:44 AM</location>
	</document>
	<document id= '2616'>
	<title>On the Conversion of Programs to Decision Tables: Method and Objectives</title>
	<abstract>The problems of converting programs to decision tables are investigated.  Objectives of these  conversions are mainly program debugging and optimization in practice.  Extensions to the theory of computation  and computability are suggested.</abstract>
	<conference>CACM August, 1974</conference>
	<authors>
	<author>Cavouras, J. C.</author>
	</authors>
	<keywords>decision tables, program optimization, debugging, semantics, theory of programming, systems analysis</keywords>
	<version>4.19 4.42 4.43 5.21 5.29</version>
	<location>CA740808 JB January 17, 1978  9:43 AM</location>
	<citations>
	<citation>2053	4	2616</citation>
	<citation>2220	4	2616</citation>
	<citation>2492	4	2616</citation>
	<citation>2517	4	2616</citation>
	<citation>2518	4	2616</citation>
	<citation>2518	4	2616</citation>
	<citation>2598	4	2616</citation>
	<citation>2616	4	2616</citation>
	<citation>2616	4	2616</citation>
	<citation>2616	4	2616</citation>
	<citation>2616	4	2616</citation>
	<citation>2726	4	2616</citation>
	<citation>3034	4	2616</citation>
	<citation>3034	4	2616</citation>
	<citation>795	4	2616</citation>
	<citation>931	5	2616</citation>
	<citation>1548	5	2616</citation>
	<citation>1684	5	2616</citation>
	<citation>2517	5	2616</citation>
	<citation>2616	5	2616</citation>
	<citation>2616	5	2616</citation>
	<citation>2616	5	2616</citation>
	</citations>
	</document>
	<document id= '2615'>
	<title>Procedures for computing Smoothing and Interpolating Natural Splines [E1] (Algorithm A480)</title>
	<conference>CACM August, 1974</conference>
	<authors>
	<author>Lyche, T.</author>
	<author>Schumaker, L. L.</author>
	</authors>
	<keywords>approximation, interpolation, spline, natural spline, spline smoothing</keywords>
	<version>5.13</version>
	<location>CA740809 JB January 17, 1978  9:40 AM</location>
	<citations>
	<citation>2615	5	2615</citation>
	<citation>2615	5	2615</citation>
	<citation>2615	5	2615</citation>
	</citations>
	</document>
	<document id= '2614'>
	<title>Arrow to Precedence Network Transformation [H] (Algorithm A481)</title>
	<conference>CACM August, 1974</conference>
	<authors>
	<author>Crandall, K. C.</author>
	</authors>
	<keywords>critical path, networks, precedence networks</keywords>
	<version>3.23 5.40</version>
	<location>CA740810 JB January 17, 1978  9:37 AM</location>
	<citations>
	<citation>2614	5	2614</citation>
	<citation>2614	5	2614</citation>
	<citation>2614	5	2614</citation>
	</citations>
	</document>
	<document id= '2613'>
	<title>Transitivity Sets [G7] (Algorithm A482)</title>
	<conference>CACM August, 1974</conference>
	<authors>
	<author>McKay, J.</author>
	<author>Regener, E.</author>
	</authors>
	<keywords>transitivity, sets</keywords>
	<version>5.39</version>
	<location>CA740811 JB January 17, 1978  9:35 AM</location>
	<citations>
	<citation>2613	5	2613</citation>
	<citation>2613	5	2613</citation>
	<citation>2613	5	2613</citation>
	</citations>
	</document>
	<document id= '2612'>
	<citations>
	<citation>2587	5	2612</citation>
	<citation>2588	5	2612</citation>
	<citation>2612	5	2612</citation>
	<citation>2612	5	2612</citation>
	<citation>2612	5	2612</citation>
	<citation>2612	6	2612</citation>
	<citation>2612	6	2612</citation>
	</citations>
	<title>Rosenbrock Function Minimization (Algorithm R450)</title>
	<conference>CACM August, 1974</conference>
	<authors>
	<author>Bultheel, A.</author>
	</authors>
	<location>CA740812 JB January 17, 1978  9:33 AM</location>
	</document>
	<document id= '2611'>
	<citations>
	<citation>2611	5	2611</citation>
	<citation>2611	5	2611</citation>
	<citation>2611	5	2611</citation>
	</citations>
	<title>The Complex Method for Constrained Optimization (Algorithm R454)</title>
	<conference>CACM August, 1974</conference>
	<authors>
	<author>Shere, K. D.</author>
	</authors>
	<location>CA740813 JB January 17, 1978  9:28 AM</location>
	</document>
	<document id= '2610'>
	<title>Gauss Harmonic Interpolation Formulas</title>
	<abstract>Let R be an open, bounded, simply connected region in the (x,y)-plane and let (x*,y*) be a  point in R.  Assuming R is starlike with respect to (x*,y*), we discuss a method for computing Gauss  harmonic interpolation formulas for R and the point (x*,y*).  Such formulas approximate a harmonic function  at (x*,y*) in terms of a linear combination of its values at certain selected points on the boundary  of R.  Such formulas are useful for approximating the solution of the Dirichlet problem for R.</abstract>
	<conference>CACM August, 1974</conference>
	<authors>
	<author>Stroud, A. H.</author>
	</authors>
	<keywords>interpolation, quadrature, harmonic interpolation, harmonic quadrature, Dirichlet problem</keywords>
	<version>5.13 5.16 5.17</version>
	<location>CA740814 JB January 17, 1978  9:23 AM</location>
	<citations>
	<citation>2610	5	2610</citation>
	<citation>2610	5	2610</citation>
	<citation>2610	5	2610</citation>
	</citations>
	</document>
	<document id= '2609'>
	<title>Interpolation with Rounded Ramp Functions</title>
	<abstract>A new interpolation function is introduced.  It has infinitely many continuous derivatives  and is a composition of ramp functions with smoothed bends called Rounded Ramp Functions.  How the interpolation  function can be extended to more than one variable is shown.  An efficient Fortran program is given by  which the interpolation function can be obtained for a given point set.</abstract>
	<conference>CACM August, 1974</conference>
	<authors>
	<author>Lagerlof, R. O. E.</author>
	</authors>
	<keywords>interpolation, approximation, smooth interpolation, multi variable interpolation, interpolation  function, approximation function, spline-like function</keywords>
	<version>5.13</version>
	<location>CA740815 JB January 17, 1978  9:18 AM</location>
	<citations>
	<citation>2609	5	2609</citation>
	<citation>2609	5	2609</citation>
	<citation>2609	5	2609</citation>
	</citations>
	</document>
	<document id= '2608'>
	<title>Recurrence Relations for the Fresnel Integral and Similar Integrals</title>
	<conference>CACM August,1974</conference>
	<authors>
	<author>Acton, F. S.</author>
	</authors>
	<keywords>recurrence relations, Fresnel integral, exponential integral</keywords>
	<version>5.12</version>
	<location>CA740816 JB January 17, 1978  9:14 AM</location>
	<citations>
	<citation>2608	5	2608</citation>
	<citation>2608	5	2608</citation>
	<citation>2608	5	2608</citation>
	</citations>
	</document>
	<document id= '2607'>
	<title>A Problem-List of Issues Concerning Computers and Public Policy</title>
	<conference>CACM September, 1974</conference>
	<authors>
	</authors>
	<keywords>economic and sociological effects, the public and computers</keywords>
	<version>2.11 2.12</version>
	<location>CA740901 JB January 17, 1978  9:08 AM</location>
	<citations>
	<citation>2607	5	2607</citation>
	<citation>2607	5	2607</citation>
	<citation>2607	5	2607</citation>
	<citation>2756	5	2607</citation>
	<citation>3076	5	2607</citation>
	<citation>3179	5	2607</citation>
	<citation>2572	6	2607</citation>
	<citation>2607	6	2607</citation>
	<citation>2607	6	2607</citation>
	<citation>2607	6	2607</citation>
	<citation>2840	6	2607</citation>
	<citation>3076	6	2607</citation>
	</citations>
	</document>
	<document id= '2606'>
	<title>A New Integration Algorithm for Ordinary Differential Equations Based on Continued Fraction Approximations</title>
	<abstract>A new integration algorithm is found, and an implementation is compared with other programmed  algorithms.  The new algorithm is a step-by-step procedure for solving the initial value problem in ordinary  differential equations.  It is designed to approximate poles of small integer order in the solutions  of the differential equations by continued fractions obtained by manipulating the sums of truncated Taylor  series expansions.  The new method is compared with Gragg-Bulirsh-Stoer, and the Taylor series method.   The Taylor series method and the new method are shown to be superior in speed and accuracy, while the  new method is shown to be most superior when the solution is required near a singularity.  The new method  can finally be seen to pass automatically through singularities where all the other methods which are  discussed will have failed.</abstract>
	<conference>CACM September, 1974</conference>
	<authors>
	<author>Willers, I. M.</author>
	</authors>
	<keywords>ordinary differential equations, initial value problem, integration, Taylor series, singularities,  continued fractions, program comparison</keywords>
	<version>5.17</version>
	<location>CA740902 JB January 17, 1978  9:06 AM</location>
	<citations>
	<citation>2606	5	2606</citation>
	<citation>2606	5	2606</citation>
	<citation>2606	5	2606</citation>
	</citations>
	</document>
	<document id= '2605'>
	<title>A Precise Numerical Analysis Program</title>
	<abstract>A description is given of a program for computing the solution to a small number of standard  numerical analysis problems to any specified accuracy, up to a limit of 2000 correct decimal places.   Each computed number is bounded in an interval with a multiple precision midpoint.  Arithmetic operations  involving these numbers are executed according to interval arithmetic concepts, with non-significant  digits automatically discarded.  Details are supplied of problem specification and problem computation.</abstract>
	<conference>CACM September, 1974</conference>
	<authors>
	<author>Aberth, O.</author>
	</authors>
	<keywords>interval arithmetic, multiple precision, list structure, error control</keywords>
	<version>4.49 5.10 5.11 5.12 5.14 5.19</version>
	<location>CA740903 JB January 17, 1978  9:01 AM</location>
	<citations>
	<citation>1258	4	2605</citation>
	<citation>1292	4	2605</citation>
	<citation>1497	4	2605</citation>
	<citation>1975	4	2605</citation>
	<citation>2555	4	2605</citation>
	<citation>2605	4	2605</citation>
	<citation>2605	4	2605</citation>
	<citation>1026	5	2605</citation>
	<citation>2286	5	2605</citation>
	<citation>2605	5	2605</citation>
	<citation>2605	5	2605</citation>
	<citation>2605	5	2605</citation>
	</citations>
	</document>
	<document id= '2604'>
	<title>An Interactive Graphic Display for Region Partitioning by Linear Programming</title>
	<abstract>Using linear programming, an interactive graphic display system has been implemented to solve  the region design problem of partitioning a region into N nonoverlapping subregions in such a way that  their areas are in specified proportions and that the total cost of servicing them is a minimum.  In  a conversational manner, a user can easily obtain different partitionings by specifying and modifying  the boundary, the service centers' locations, the area proportions, and the cost functions.  Examples  are included.</abstract>
	<conference>CACM September, 1974</conference>
	<authors>
	<author>Cheung, T.</author>
	</authors>
	<keywords>interactive graphic display, region partitioning, area specification, linear programming</keywords>
	<version>5.41 8.2 8.3</version>
	<location>CA740904 JB January 17, 1978  8:56 AM</location>
	<citations>
	<citation>2604	4	2604</citation>
	<citation>1977	5	2604</citation>
	<citation>2604	5	2604</citation>
	<citation>2604	5	2604</citation>
	<citation>2604	5	2604</citation>
	</citations>
	</document>
	<document id= '2603'>
	<title>The Equivalence of Reducing Transition Languages and Deterministic Languages</title>
	<abstract>The class of reducing transition languages introduced by Eickel, Paul, Bauer, and Samelson  was shown by Morris to be a proper superclass of the simple precedence languages.  In this paper this  result is extended, showing that, in fact, the first class is equivalent to the class of deterministic  context free languages.</abstract>
	<conference>CACM September, 1974</conference>
	<authors>
	<author>Schkolnick, M.</author>
	</authors>
	<keywords>reducing transition languages, syntax controlled generators, deterministic context-free grammars</keywords>
	<version>4.12 5.23</version>
	<location>CA740905 JB January 17, 1978  8:52 AM</location>
	<citations>
	<citation>1215	4	2603</citation>
	<citation>1542	4	2603</citation>
	<citation>1683	4	2603</citation>
	<citation>1693	4	2603</citation>
	<citation>1781	4	2603</citation>
	<citation>1781	4	2603</citation>
	<citation>1787	4	2603</citation>
	<citation>1787	4	2603</citation>
	<citation>1836	4	2603</citation>
	<citation>1945	4	2603</citation>
	<citation>1945	4	2603</citation>
	<citation>2060	4	2603</citation>
	<citation>2061	4	2603</citation>
	<citation>2082	4	2603</citation>
	<citation>2091	4	2603</citation>
	<citation>2152	4	2603</citation>
	<citation>2179	4	2603</citation>
	<citation>2340	4	2603</citation>
	<citation>2356	4	2603</citation>
	<citation>2546	4	2603</citation>
	<citation>2603	4	2603</citation>
	<citation>2603	4	2603</citation>
	<citation>2698	4	2603</citation>
	<citation>2708	4	2603</citation>
	<citation>2824	4	2603</citation>
	<citation>2982	4	2603</citation>
	<citation>2986	4	2603</citation>
	<citation>3045	4	2603</citation>
	<citation>3093	4	2603</citation>
	<citation>1491	5	2603</citation>
	<citation>2603	5	2603</citation>
	<citation>2603	5	2603</citation>
	<citation>2603	5	2603</citation>
	<citation>763	5	2603</citation>
	</citations>
	</document>
	<document id= '2602'>
	<title>Masked Three-Dimensional Plot Program with Rotations [J6] (Algorithm A483)</title>
	<conference>CACM September, 1974</conference>
	<authors>
	<author>Watkins, S. L.</author>
	</authors>
	<keywords>plotting, three-dimensional plotting</keywords>
	<version>4.41</version>
	<location>CA740906 JB January 17, 1978  8:49 AM</location>
	<citations>
	<citation>2602	5	2602</citation>
	<citation>2602	5	2602</citation>
	<citation>2602	5	2602</citation>
	</citations>
	</document>
	<document id= '2601'>
	<title>Evaluation of the Modified Bessel Functions K0(Z) and K1(Z) for Complex Arguments [S17] (Algorithm  A484)</title>
	<conference>CACM September, 1974</conference>
	<authors>
	<author>Burrell, K. H.</author>
	</authors>
	<keywords>Bessel functions, Hankel functions, modified Bessel functions, Gauss-Hermite quadrature</keywords>
	<version>5.12</version>
	<location>CA740907 JB January 17, 1978  8:47 AM</location>
	<citations>
	<citation>2601	5	2601</citation>
	<citation>2601	5	2601</citation>
	<citation>2601	5	2601</citation>
	</citations>
	</document>
	<document id= '2600'>
	<title>Computation of g-Splines via a Factorization Method [E2] (Algorithm A485)</title>
	<conference>CACM September, 1974</conference>
	<authors>
	<author>Eidson, H. D.</author>
	<author>Schumaker, L. L.</author>
	</authors>
	<keywords>approximation, spline approximation</keywords>
	<version>5.13</version>
	<location>CA740908 JB January 17, 1978  8:44 AM</location>
	<citations>
	<citation>2600	5	2600</citation>
	<citation>2600	5	2600</citation>
	<citation>2600	5	2600</citation>
	</citations>
	</document>
	<document id= '2599'>
	<title>First Order Approximation to the Optimum Checkpoint Interval</title>
	<conference>CACM September, 1974</conference>
	<authors>
	<author>Young, J. W.</author>
	</authors>
	<keywords>checkpoint, job failure, operations, programming checkpoint, random failure, operations, programming</keywords>
	<version>2.43 4.0</version>
	<location>CA740909 JB January 17, 1978  8:42 AM</location>
	<citations>
	<citation>2599	5	2599</citation>
	<citation>2599	5	2599</citation>
	<citation>2599	5	2599</citation>
	<citation>3089	5	2599</citation>
	<citation>2599	6	2599</citation>
	</citations>
	</document>
	<document id= '2598'>
	<title>Extending the Information Theory Approach to Converting Limited-Entry Decision Tables to Computer  Programs</title>
	<abstract>This paper modifies an earlier algorithm for converting decision tables into flowcharts which  minimize subsequent execution time when compiled into a computer program.  The algorithms considered  in this paper perform limited search and, accordingly, do not necessarily result in globally optimal  solutions.  However, the greater search effort needed to obtain a globally optimal solution for complex  decision tables is usually not justified by sufficient savings in execution time.  There is an analogy  between the problem of converting decision tables into efficient flowcharts and the well-understood problem  in information theory of noiseless coding.  The results of the noiseless coding literature are used to  explore the limitations of algorithms used to solve the decision table problem.  The analogy between  the two problems is also used to develop improvements to the information algorithm in extending the depth  of search under certain conditions and in proposing additional conditions to be added to the decision  table.  Finally, the information algorithm is compared with an algorithm proposed in a recent paper by  Verhelst.</abstract>
	<conference>CACM September, 1974</conference>
	<authors>
	<author>Shwayder, K.</author>
	</authors>
	<keywords>coding, decision tables, flowcharting, information theory, noiseless channel, sorting</keywords>
	<version>3.50 5.31</version>
	<location>CA740910 JB January 17, 1978  8:40 AM</location>
	<citations>
	<citation>1354	4	2598</citation>
	<citation>2053	4	2598</citation>
	<citation>2220	4	2598</citation>
	<citation>2220	4	2598</citation>
	<citation>2273	4	2598</citation>
	<citation>2273	4	2598</citation>
	<citation>2453	4	2598</citation>
	<citation>2453	4	2598</citation>
	<citation>2492	4	2598</citation>
	<citation>2518	4	2598</citation>
	<citation>2598	4	2598</citation>
	<citation>2598	4	2598</citation>
	<citation>2598	4	2598</citation>
	<citation>2598	4	2598</citation>
	<citation>2598	4	2598</citation>
	<citation>2598	4	2598</citation>
	<citation>2616	4	2598</citation>
	<citation>2691	4	2598</citation>
	<citation>2726	4	2598</citation>
	<citation>2726	4	2598</citation>
	<citation>2726	4	2598</citation>
	<citation>2726	4	2598</citation>
	<citation>2856	4	2598</citation>
	<citation>2856	4	2598</citation>
	<citation>2856	4	2598</citation>
	<citation>3113	4	2598</citation>
	<citation>3113	4	2598</citation>
	<citation>1172	5	2598</citation>
	<citation>1548	5	2598</citation>
	<citation>2220	5	2598</citation>
	<citation>2263	5	2598</citation>
	<citation>2453	5	2598</citation>
	<citation>2598	5	2598</citation>
	<citation>2598	5	2598</citation>
	<citation>2598	5	2598</citation>
	<citation>2691	5	2598</citation>
	<citation>2845	5	2598</citation>
	<citation>2856	5	2598</citation>
	<citation>3113	5	2598</citation>
	<citation>1172	6	2598</citation>
	<citation>1184	6	2598</citation>
	<citation>1327	6	2598</citation>
	<citation>1354	6	2598</citation>
	<citation>1354	6	2598</citation>
	<citation>2053	6	2598</citation>
	<citation>2220	6	2598</citation>
	<citation>2263	6	2598</citation>
	<citation>2435	6	2598</citation>
	<citation>2453	6	2598</citation>
	<citation>2598	6	2598</citation>
	<citation>2598	6	2598</citation>
	<citation>2598	6	2598</citation>
	<citation>2691	6	2598</citation>
	<citation>2736	6	2598</citation>
	<citation>2747	6	2598</citation>
	<citation>2768	6	2598</citation>
	<citation>2856	6	2598</citation>
	</citations>
	</document>
	<document id= '2597'>
	<title>Monitors: An Operating System Structuring Concept</title>
	<abstract>This paper develops Brinch-Hansen's concept of a monitor as a method of structuring an operating  system.  It introduces a form of synchronization, describes a possible method of implementation in terms  of semaphores and gives a suitable proof rule.  Illustrative examples include a single resource scheduler,  a bounded buffer, an alarm clock, a buffer pool, a disk head optimizer, and a version of the problem  of readers and writers.</abstract>
	<conference>CACM October, 1974</conference>
	<authors>
	<author>Hoare, C. A. R.</author>
	</authors>
	<keywords>monitors, operating systems, scheduling, mutual exclusion, synchronization, system implementation  languages, structured multiprogramming</keywords>
	<version>4.31 4.22</version>
	<location>CA741001 JB January 16, 1978  1:23 PM</location>
	<citations>
	<citation>2320	4	2597</citation>
	<citation>2597	4	2597</citation>
	<citation>2597	4	2597</citation>
	<citation>2777	4	2597</citation>
	<citation>2851	4	2597</citation>
	<citation>2895	4	2597</citation>
	<citation>2912	4	2597</citation>
	<citation>2946	4	2597</citation>
	<citation>3128	4	2597</citation>
	<citation>2150	5	2597</citation>
	<citation>2320	5	2597</citation>
	<citation>2597	5	2597</citation>
	<citation>2597	5	2597</citation>
	<citation>2597	5	2597</citation>
	<citation>2865	5	2597</citation>
	<citation>2866	5	2597</citation>
	<citation>2898	5	2597</citation>
	<citation>2972	5	2597</citation>
	<citation>3043	5	2597</citation>
	<citation>3128	5	2597</citation>
	<citation>3144	5	2597</citation>
	<citation>970	6	2597</citation>
	<citation>1471	6	2597</citation>
	<citation>1834	6	2597</citation>
	<citation>2150	6	2597</citation>
	<citation>2204	6	2597</citation>
	<citation>2298	6	2597</citation>
	<citation>2356	6	2597</citation>
	<citation>2376	6	2597</citation>
	<citation>2436	6	2597</citation>
	<citation>2491	6	2597</citation>
	<citation>2597	6	2597</citation>
	<citation>2597	6	2597</citation>
	<citation>2597	6	2597</citation>
	<citation>2597	6	2597</citation>
	<citation>2597	6	2597</citation>
	<citation>2597	6	2597</citation>
	<citation>2597	6	2597</citation>
	<citation>2624	6	2597</citation>
	<citation>2625	6	2597</citation>
	<citation>2632	6	2597</citation>
	<citation>2732	6	2597</citation>
	<citation>2732	6	2597</citation>
	<citation>2738	6	2597</citation>
	<citation>2796	6	2597</citation>
	<citation>2865	6	2597</citation>
	<citation>2866	6	2597</citation>
	<citation>2870	6	2597</citation>
	<citation>2912	6	2597</citation>
	<citation>2946	6	2597</citation>
	<citation>3082	6	2597</citation>
	</citations>
	</document>
	<document id= '2596'>
	<title>A Weighted Buddy Method for Dynamic Storage Allocation</title>
	<abstract>An extension of the buddy method, called the weighted buddy method, for dynamic storage allocation  is presented.  The weighted buddy method allows block sizes of 2^k and 3(2^k), whereas the original buddy  method allowed only block sizes of 2^k. This extension is achieved at an additional cost of only two  bits per block.  Simulation results are presented which compare this method with the buddy method.  These  results indicate that for a uniform request distribution, the buddy system has less total memory fragmentation  than the weighted buddy algorithm.  However, the total fragmentation is smaller for the weighted buddy  method when the requests are for exponentially distributed block sizes.</abstract>
	<conference>CACM October, 1974</conference>
	<authors>
	<author>Shen, K. K.</author>
	<author>Peterson, J. L.</author>
	</authors>
	<keywords>weighted buddy algorithm, buddy systems, memory allocation, dynamic storage allocation</keywords>
	<version>3.89 4.32 4.39</version>
	<location>CA741002 JB January 16, 1978  1:07 PM</location>
	<citations>
	<citation>1389	4	2596</citation>
	<citation>1552	4	2596</citation>
	<citation>2095	4	2596</citation>
	<citation>2162	4	2596</citation>
	<citation>2218	4	2596</citation>
	<citation>2435	4	2596</citation>
	<citation>2498	4	2596</citation>
	<citation>2596	4	2596</citation>
	<citation>2596	4	2596</citation>
	<citation>2596	4	2596</citation>
	<citation>2734	4	2596</citation>
	<citation>2747	4	2596</citation>
	<citation>2768	4	2596</citation>
	<citation>2768	4	2596</citation>
	<citation>2845	4	2596</citation>
	<citation>2845	4	2596</citation>
	<citation>2902	4	2596</citation>
	<citation>2902	4	2596</citation>
	<citation>2902	4	2596</citation>
	<citation>2911	4	2596</citation>
	<citation>2911	4	2596</citation>
	<citation>2955	4	2596</citation>
	<citation>2955	4	2596</citation>
	<citation>3000	4	2596</citation>
	<citation>1184	5	2596</citation>
	<citation>1879	5	2596</citation>
	<citation>2435	5	2596</citation>
	<citation>2596	5	2596</citation>
	<citation>2596	5	2596</citation>
	<citation>2596	5	2596</citation>
	<citation>2902	5	2596</citation>
	<citation>2955	5	2596</citation>
	<citation>1051	6	2596</citation>
	<citation>1062	6	2596</citation>
	<citation>1184	6	2596</citation>
	<citation>1184	6	2596</citation>
	<citation>1211	6	2596</citation>
	<citation>1552	6	2596</citation>
	<citation>1879	6	2596</citation>
	<citation>2435	6	2596</citation>
	<citation>2435	6	2596</citation>
	<citation>2596	6	2596</citation>
	<citation>2596	6	2596</citation>
	<citation>2734	6	2596</citation>
	<citation>2747	6	2596</citation>
	<citation>2747	6	2596</citation>
	<citation>2768	6	2596</citation>
	<citation>2773	6	2596</citation>
	</citations>
	</document>
	<document id= '2595'>
	<title>A Note on the Calculation Working Set Size</title>
	<abstract>Finite-length reference string of arbitrary structure are considered, and an exact expression  for average working set size in terms of "corrected" interreference interval statistics is derived.   An example is discussed; upper and lower bounds are obtained; and the average working set size function  is shown to be efficiently obtained for a set of page sizes, in a single pass of the reference string.   This work follows the developments of a paper by Denning and Schwartz, who consider infinite-length  reference strings which satisfy certain statistical properties and who derive an expression relating  the asymptotic average working set size to the asymptotic missing page rate function under working set  replacement.</abstract>
	<conference>CACM October, 1974</conference>
	<authors>
	<author>Slutz, D. R.</author>
	<author>Traiger, I. L.</author>
	</authors>
	<keywords>working-set model, paging, program behavior</keywords>
	<version>4.3</version>
	<location>CA741003 JB January 16, 1978  12:56 PM</location>
	<citations>
	<citation>2374	4	2595</citation>
	<citation>2380	4	2595</citation>
	<citation>2450	4	2595</citation>
	<citation>2595	4	2595</citation>
	<citation>2996	4	2595</citation>
	<citation>3006	4	2595</citation>
	<citation>3067	4	2595</citation>
	<citation>2373	5	2595</citation>
	<citation>2595	5	2595</citation>
	<citation>2595	5	2595</citation>
	<citation>2595	5	2595</citation>
	<citation>2996	5	2595</citation>
	<citation>3006	5	2595</citation>
	<citation>3067	5	2595</citation>
	<citation>1751	6	2595</citation>
	<citation>1751	6	2595</citation>
	<citation>1751	6	2595</citation>
	<citation>1884	6	2595</citation>
	<citation>2374	6	2595</citation>
	<citation>2374	6	2595</citation>
	<citation>2373	6	2595</citation>
	<citation>2373	6	2595</citation>
	<citation>2373	6	2595</citation>
	<citation>2595	6	2595</citation>
	<citation>2595	6	2595</citation>
	<citation>2595	6	2595</citation>
	<citation>2682	6	2595</citation>
	<citation>2863	6	2595</citation>
	<citation>2864	6	2595</citation>
	<citation>3006	6	2595</citation>
	</citations>
	</document>
	<document id= '2594'>
	<title>Structured Data Structures</title>
	<abstract>Programming systems which permit arbitrary linked list structures enable the user to create  complicated structures without sufficient protection.  Deletions can result in unreachable data elements,  and there is no guarantee that additions will be performed properly.  To remedy this situation, this  paper proposes a gauge which provides for the creation of a restricted class of data structures but ensures  the correctness of the program.  This is accomplished by an explicit structure declaration facility,  a restriction on the permissible operations, and execution-time checks.</abstract>
	<conference>CACM October, 1974</conference>
	<authors>
	<author>Shneiderman, B.</author>
	<author>Scheuermann, P.</author>
	</authors>
	<keywords>structured programming, data structures, data base management system</keywords>
	<version>3.50 3.51 3.72 3.73 3.79 4.20 4.22</version>
	<location>CA741004 JB January 16, 1978  12:46 PM</location>
	<citations>
	<citation>1720	4	2594</citation>
	<citation>1927	4	2594</citation>
	<citation>2147	4	2594</citation>
	<citation>2163	4	2594</citation>
	<citation>2193	4	2594</citation>
	<citation>2252	4	2594</citation>
	<citation>2319	4	2594</citation>
	<citation>2326	4	2594</citation>
	<citation>2345	4	2594</citation>
	<citation>2478	4	2594</citation>
	<citation>2477	4	2594</citation>
	<citation>2480	4	2594</citation>
	<citation>2541	4	2594</citation>
	<citation>2594	4	2594</citation>
	<citation>2594	4	2594</citation>
	<citation>2594	4	2594</citation>
	<citation>2594	4	2594</citation>
	<citation>2709	4	2594</citation>
	<citation>2852	4	2594</citation>
	<citation>2899	4	2594</citation>
	<citation>2939	4	2594</citation>
	<citation>2972	4	2594</citation>
	<citation>3004	4	2594</citation>
	<citation>3130	4	2594</citation>
	<citation>3155	4	2594</citation>
	<citation>1771	5	2594</citation>
	<citation>2155	5	2594</citation>
	<citation>2204	5	2594</citation>
	<citation>2594	5	2594</citation>
	<citation>2594	5	2594</citation>
	<citation>2594	5	2594</citation>
	<citation>2975	5	2594</citation>
	<citation>3186	5	2594</citation>
	<citation>2594	6	2594</citation>
	</citations>
	</document>
	<document id= '2593'>
	<title>A Back-end Computer for Data Base Management</title>
	<abstract>It is proposed that the data base management function be placed on a dedicated back-end computer  which accepts commands (in a relatively high level language such as the CODASYL Data Base Task Group,  April 1971 Report) from a host computer, accesses the data base on secondary storage, and returns results.   The advantages of such a configuration are discussed.  An experimental implementation, called the experimental  Data Management System, XDMS, is described and certain conclusions about the back-end approach are drawn  from this implementation.</abstract>
	<conference>CACM October, 1974</conference>
	<authors>
	<author>Canaday, R. H.</author>
	<author>Harrison, R. D.</author>
	<author>Ivie, E. L.</author>
	<author>Ryder, J. L.</author>
	<author>Wehr, L. A.</author>
	</authors>
	<keywords>data base management, information retrieval, computer configurations, computer networks, Data Base  Task Group Language, data base protection, data base portability, back-end computer</keywords>
	<version>3.79 4.22 4.33 4.35</version>
	<location>CA741005 JB January 16,1978  12:35 PM</location>
	<citations>
	<citation>2593	5	2593</citation>
	<citation>2593	5	2593</citation>
	<citation>2593	5	2593</citation>
	<citation>2919	5	2593</citation>
	<citation>2536	6	2593</citation>
	<citation>2593	6	2593</citation>
	<citation>2629	6	2593</citation>
	</citations>
	</document>
	<document id= '2592'>
	<title>On Generation of Test Problems for Linear Programming Codes</title>
	<abstract>Users of linear programming computer codes have realized the necessity of evaluating the capacity,  effectiveness, and accuracy of the solutions provided by such codes.  Large scale linear programming  codes at most installations are assumed to be generating correct solutions without ever having been "bench-marked"  by test problems with known solutions.  The reason for this failure to adequately test the codes is that  rarely are there large problems with known solutions readily available.  This paper presents a theoretical  justification and an illustrative implementation of a method for generating linear programming test problems  with known solutions.  The method permits the generation of test problems that are of arbitrary size  and have a wide range of numerical characteristics.</abstract>
	<conference>CACM October, 1974</conference>
	<authors>
	<author>Charnes, A.</author>
	<author>Raike, W. M.</author>
	<author>Stutz, J. D.</author>
	<author>Walters, A. S.</author>
	</authors>
	<keywords>linear programming, test problem generation, LP program evaluation, LP program validation</keywords>
	<version>5.41</version>
	<location>CA741006 JB January 16, 1978  12:28 PM</location>
	<citations>
	<citation>2592	5	2592</citation>
	<citation>2592	5	2592</citation>
	<citation>2592	5	2592</citation>
	</citations>
	</document>
	<document id= '2591'>
	<title>Numerical Inversion of Laplace Transform (Algorithm A486)</title>
	<conference>CACM October, 1974</conference>
	<authors>
	<author>Veillon, F.</author>
	</authors>
	<keywords>Laplace transform inversion</keywords>
	<version>5.16</version>
	<location>CA741007 JB January 16, 1978 11:17 AM</location>
	<citations>
	<citation>2591	4	2591</citation>
	<citation>2124	5	2591</citation>
	<citation>2591	5	2591</citation>
	<citation>2591	5	2591</citation>
	<citation>2591	5	2591</citation>
	</citations>
	</document>
	<document id= '2590'>
	<citations>
	<citation>2590	4	2590</citation>
	<citation>2590	5	2590</citation>
	<citation>2590	5	2590</citation>
	<citation>2590	5	2590</citation>
	<citation>888	5	2590</citation>
	</citations>
	<title>Hypergeometric (Algorithm C191)</title>
	<conference>CACM October, 1974</conference>
	<authors>
	<author>Kopelaar, H.</author>
	</authors>
	<location>CA741008 JB January 16, 1978  11:14 AM</location>
	</document>
	<document id= '2589'>
	<citations>
	<citation>2589	4	2589</citation>
	<citation>1353	5	2589</citation>
	<citation>2589	5	2589</citation>
	<citation>2589	5	2589</citation>
	<citation>2589	5	2589</citation>
	</citations>
	<title>A Computer Routine for Quadratic and Linear Programming Problems (Algorithm R431)</title>
	<conference>CACM October, 1974</conference>
	<authors>
	<author>Proll, L. G.</author>
	</authors>
	<location>CA741009 JB January 16, 1978  11:10 AM</location>
	</document>
	<document id= '2588'>
	<citations>
	<citation>2587	4	2588</citation>
	<citation>2588	4	2588</citation>
	<citation>2588	5	2588</citation>
	<citation>2588	5	2588</citation>
	<citation>2588	5	2588</citation>
	<citation>2612	5	2588</citation>
	</citations>
	<title>Rosenbrock Function Minimization (Algorithm R450)</title>
	<conference>CACM October, 1974</conference>
	<authors>
	<author>Klemes, J.</author>
	<author>Klemsa, J.</author>
	</authors>
	<location>CA741010 JB January 16, 1978  11:09 AM</location>
	</document>
	<document id= '2587'>
	<citations>
	<citation>2587	4	2587</citation>
	<citation>2588	4	2587</citation>
	<citation>2587	5	2587</citation>
	<citation>2587	5	2587</citation>
	<citation>2587	5	2587</citation>
	<citation>2612	5	2587</citation>
	</citations>
	<title>On the Construction of a Representative Synthetic Workload (Errata)</title>
	<conference>CACM October, 1974</conference>
	<authors>
	<author>Sreenivarsan, K.</author>
	<author>Kleinman, A. J.</author>
	</authors>
	<location>CA741011 JB January 16, 1978  11:07 AM</location>
	</document>
	<document id= '2586'>
	<citations>
	<citation>2586	5	2586</citation>
	<citation>2586	5	2586</citation>
	<citation>2586	5	2586</citation>
	</citations>
	<title>Adapting Optimal Code Generation for Arithmetic Expressions to the Instruction Sets Available  on Present-Day Computers (Errata)</title>
	<conference>CACM October, 1974</conference>
	<authors>
	<author>Stockhausen, P. F.</author>
	</authors>
	<location>CA741012 JB January 16, 1978  11:05 AM</location>
	</document>
	<document id= '2585'>
	<citations>
	<citation>2585	5	2585</citation>
	<citation>2585	5	2585</citation>
	<citation>2585	5	2585</citation>
	</citations>
	<title>Efficient Implementation of a Variable Projection Algorithm for Nonlinear Least Squares Problems  (Errata)</title>
	<conference>CACM October 1974</conference>
	<authors>
	<author>Krogh, F. T.</author>
	</authors>
	<location>CA741013 JB January 16, 1978  11:02 AM</location>
	</document>
	<document id= '2584'>
	<title>Enumerating Full-Time Programmers</title>
	<abstract>Data from the 1970 Census and the Department of Labor's Area Wage Surveys are used to derive  estimates of the number of full-time programmers employed during the years 1969 through 1973.  The 1973  figure of 180,000 is considerably less than suggested in earlier reports.  It is recommended that educational  administrators consider whether the many courses aimed at training programmers are justified on a vocational  basis.</abstract>
	<conference>CACM October, 1974</conference>
	<authors>
	<author>Gilchrist, B.</author>
	<author>Weber, R. E.</author>
	</authors>
	<keywords>programmer, employment, 1970 Census, Area Wage Survey</keywords>
	<version>1.50 2.2 2.42</version>
	<location>CA741014 JB January 16, 1978  11:00 AM</location>
	<citations>
	<citation>2584	5	2584</citation>
	<citation>2584	5	2584</citation>
	<citation>2584	5	2584</citation>
	</citations>
	</document>
	<document id= '2583'>
	<title>Guidelines for Humanizing Computerized Information Systems: A Report from Stanley House</title>
	<conference>CACM November, 1974</conference>
	<authors>
	<author>Sterling, T. D.</author>
	</authors>
	<keywords>humanization, social implication, management, information systems, regulations, social and behavioral  sciences, philosophy</keywords>
	<version>1.5 2 3.3 3.4 3.5</version>
	<location>CA741101 JB January 16, 1978  10:53 AM</location>
	<citations>
	<citation>2583	5	2583</citation>
	<citation>2583	5	2583</citation>
	<citation>2583	5	2583</citation>
	<citation>3142	5	2583</citation>
	<citation>2583	6	2583</citation>
	<citation>3076	6	2583</citation>
	</citations>
	</document>
	<document id= '2582'>
	<title>Improving Locality by Critical Working Sets</title>
	<abstract>A new approach to program locality improvement via restructuring is described.  The method  is particularly suited to those systems where primary memory is managed according to a working set strategy.   It is based on the concept of critical working set, a working set which does not contain the next memory  reference.  The data the method operates upon are extracted from a trace of the program to be restructured.   It is shown that, except in some special cases, the method is not optimum.  However, the experimental  results obtained by using the method to restructure an interactive text editor and the file system module  of an operating system have shown its substantial superiority over the other methods proposed in the  literature.</abstract>
	<conference>CACM November, 1974</conference>
	<authors>
	<author>Ferrari, D.</author>
	</authors>
	<keywords>program restructuring, program segmentation, locality improvement, memory hierarchies, virtual  memory, multiprogramming, restructuring techniques, static restructuring, dynamic restructuring, working  set strategy, critical working set</keywords>
	<version>4.32 4.39 4.43 4.49 4.9</version>
	<location>CA741102 JB January 16, 1978  10:50 AM</location>
	<citations>
	<citation>1892	4	2582</citation>
	<citation>1901	4	2582</citation>
	<citation>2085	4	2582</citation>
	<citation>2095	4	2582</citation>
	<citation>2218	4	2582</citation>
	<citation>2277	4	2582</citation>
	<citation>2319	4	2582</citation>
	<citation>2319	4	2582</citation>
	<citation>2329	4	2582</citation>
	<citation>2358	4	2582</citation>
	<citation>2365	4	2582</citation>
	<citation>2373	4	2582</citation>
	<citation>2380	4	2582</citation>
	<citation>2434	4	2582</citation>
	<citation>2499	4	2582</citation>
	<citation>2501	4	2582</citation>
	<citation>2582	4	2582</citation>
	<citation>2582	4	2582</citation>
	<citation>2582	4	2582</citation>
	<citation>2582	4	2582</citation>
	<citation>2669	4	2582</citation>
	<citation>2669	4	2582</citation>
	<citation>2828	4	2582</citation>
	<citation>2863	4	2582</citation>
	<citation>2881	4	2582</citation>
	<citation>2928	4	2582</citation>
	<citation>2996	4	2582</citation>
	<citation>3006	4	2582</citation>
	<citation>3054	4	2582</citation>
	<citation>3067	4	2582</citation>
	<citation>3152	4	2582</citation>
	<citation>1751	5	2582</citation>
	<citation>1924	5	2582</citation>
	<citation>2017	5	2582</citation>
	<citation>2130	5	2582</citation>
	<citation>2582	5	2582</citation>
	<citation>2582	5	2582</citation>
	<citation>2582	5	2582</citation>
	</citations>
	</document>
	<document id= '2581'>
	<title>A Locally-Organized Parser for Spoken Input</title>
	<abstract>This paper describes LPARS, a locally-organized parsing system, designed for use in a continuous  speech recognizer.  LPARS processes a string of phonemes which contains ambiguity and error. The system  is locally-organized in the sense that it builds local parse structures from reliable word candidates  recognized anywhere in an input utterance.  These local structures are used as "islands of reliability"  to guide the search for more highly garbled words which might complete the utterance.</abstract>
	<conference>CACM November, 1974</conference>
	<authors>
	<author>Miller, P. L.</author>
	</authors>
	<keywords>parsing, speech recognition, speech understanding, augmented transition network, local parsing</keywords>
	<version>3.42 3.65 3.69</version>
	<location>CA741103 JB January 16, 1978  10:41 AM</location>
	<citations>
	<citation>2581	4	2581</citation>
	<citation>2739	4	2581</citation>
	<citation>2795	4	2581</citation>
	<citation>2921	4	2581</citation>
	<citation>3087	4	2581</citation>
	<citation>1989	5	2581</citation>
	<citation>2581	5	2581</citation>
	<citation>2581	5	2581</citation>
	<citation>2581	5	2581</citation>
	</citations>
	</document>
	<document id= '2580'>
	<title>A Method for Composing Simple Traditional Music by Computer</title>
	<abstract>A method is described for composing musical rounds by computer.  This method uses some music  theory plus additional heuristics.  Fundamental to the method is a set of productions together with sets  of applicability rules and weight rules which operate on the productions deciding when and to what extent  they are available for use.  Several rounds generated by the computer implementation of the method are  presented.  Generally, the resultant music sounds mediocre to the professional although usually pleasing  to the layman.  It appears that full-blown music theory is not needed for rounds--all the hardware required  for structural levels is not necessary for these pieces.  The author has tried to address both musicians  and computer scientists.</abstract>
	<conference>CACM November, 1974</conference>
	<authors>
	<author>Rader, G. M.</author>
	</authors>
	<keywords>artificial intelligence, heuristic programming, models of cognitive processes, computer music,  computer composition, music theory, formal languages, probabilistic grammars</keywords>
	<version>3.44 3.65 5.23</version>
	<location>CA741104 JB January 16, 1978  10:35 AM</location>
	<citations>
	<citation>2580	5	2580</citation>
	<citation>2580	5	2580</citation>
	<citation>2580	5	2580</citation>
	</citations>
	</document>
	<document id= '2579'>
	<title>Register Allocation Via Usage Counts</title>
	<abstract>This paper introduces the notion of usage counts, shows how usage counts can be developed by  algorithms that eliminate redundant computations, and describes how usage counts can provide the basis  for register allocation.  The paper compares register allocation based on usage counts to other commonly  used register allocation techniques, and presents evidence which shows that the usage count technique  is significantly better than these other techniques.</abstract>
	<conference>CACM November, 1974</conference>
	<authors>
	<author>Freiburghouse, R. A.</author>
	</authors>
	<keywords>optimization, redundant computations, common subexpressions, register allocation, compilers, programming  languages, virtual memory, demand paging</keywords>
	<version>4.12 4.2 4.39</version>
	<location>CA741105 JB January 16, 1978  10:24 AM</location>
	<citations>
	<citation>1781	4	2579</citation>
	<citation>1807	4	2579</citation>
	<citation>2034	4	2579</citation>
	<citation>2290	4	2579</citation>
	<citation>2579	4	2579</citation>
	<citation>2579	4	2579</citation>
	<citation>2579	4	2579</citation>
	<citation>2923	4	2579</citation>
	<citation>2923	4	2579</citation>
	<citation>2945	4	2579</citation>
	<citation>1535	5	2579</citation>
	<citation>1807	5	2579</citation>
	<citation>1947	5	2579</citation>
	<citation>2579	5	2579</citation>
	<citation>2579	5	2579</citation>
	<citation>2579	5	2579</citation>
	</citations>
	</document>
	<document id= '2578'>
	<title>Self-stabilizing Systems in Spite of Distributed Control</title>
	<conference>CACM November, 1974</conference>
	<authors>
	<author>Dijkstra, E. W.</author>
	</authors>
	<keywords>multiprocessing, networks, self-stabilization, synchronization, mutual exclusion, robustness, sharing,  error recovery, distributed control, harmonious cooperation, self-repair</keywords>
	<version>4.32</version>
	<location>CA741106 JB January 16,1978  10:18 AM</location>
	<citations>
	<citation>2578	5	2578</citation>
	<citation>2578	5	2578</citation>
	<citation>2578	5	2578</citation>
	</citations>
	</document>
	<document id= '2577'>
	<title>An On-Site Data Management System Application in Field Archaeology</title>
	<conference>CACM November, 1974</conference>
	<authors>
	<author>Brown, J. A.</author>
	<author>Werner, B.</author>
	</authors>
	<keywords>APL-PLUS, archaeology, Koster prehistoric site data management, retrieval systems</keywords>
	<version>3.36 3.70 3.73 3.89</version>
	<location>CA741107 JB January 16, 1978  10:15 AM</location>
	<citations>
	<citation>2577	5	2577</citation>
	<citation>2577	5	2577</citation>
	<citation>2577	5	2577</citation>
	</citations>
	</document>
	<document id= '2576'>
	<title>A Simple Technique for Representing Strings in Fortran IV</title>
	<conference>CACM November, 1974</conference>
	<authors>
	<author>Hanson, D. R.</author>
	</authors>
	<keywords>string processing, Fortran IV, string representation,structured programming, data structures</keywords>
	<version>3.70 4.0 4.19 4.9</version>
	<location>CA741108 JB January 16, 1978  10:12 AM</location>
	<citations>
	<citation>2576	5	2576</citation>
	<citation>2576	5	2576</citation>
	<citation>2576	5	2576</citation>
	</citations>
	</document>
	<document id= '2575'>
	<title>The Best-Match Problem in Document Retrieval</title>
	<conference>CACM November, 1974</conference>
	<authors>
	<author>Rijsbergen, C. J.</author>
	</authors>
	<keywords>document retrieval, best match, clustering, file searching, matching, dissimilarity, hierarchy,  classification</keywords>
	<version>3.73 3.74 3.79 5.30</version>
	<location>CA741109 JB January 16, 1978  10:09 AM</location>
	<citations>
	<citation>2575	4	2575</citation>
	<citation>2966	4	2575</citation>
	<citation>3134	4	2575</citation>
	<citation>2524	5	2575</citation>
	<citation>2575	5	2575</citation>
	<citation>2575	5	2575</citation>
	<citation>2575	5	2575</citation>
	</citations>
	</document>
	<document id= '2574'>
	<title>Multiple Exists from a Loop Using Neither GO TO nor Labels</title>
	<conference>CACM November, 1974</conference>
	<authors>
	<author>Evans, R. V.</author>
	</authors>
	<keywords>goto free programming, control structures, multiple exists from loops, exit statement</keywords>
	<version>4.20 4.22</version>
	<location>CA741110 JB January 16, 1978  10:07 AM</location>
	<citations>
	<citation>2574	4	2574</citation>
	<citation>2709	4	2574</citation>
	<citation>2477	5	2574</citation>
	<citation>2574	5	2574</citation>
	<citation>2574	5	2574</citation>
	<citation>2574	5	2574</citation>
	</citations>
	</document>
	<document id= '2573'>
	<citations>
	<citation>1860	4	2573</citation>
	<citation>1973	4	2573</citation>
	<citation>1973	4	2573</citation>
	<citation>1992	4	2573</citation>
	<citation>1992	4	2573</citation>
	<citation>2018	4	2573</citation>
	<citation>2033	4	2573</citation>
	<citation>2107	4	2573</citation>
	<citation>2109	4	2573</citation>
	<citation>2138	4	2573</citation>
	<citation>2203	4	2573</citation>
	<citation>2203	4	2573</citation>
	<citation>2251	4	2573</citation>
	<citation>2251	4	2573</citation>
	<citation>2251	4	2573</citation>
	<citation>2530	4	2573</citation>
	<citation>2537	4	2573</citation>
	<citation>2543	4	2573</citation>
	<citation>2543	4	2573</citation>
	<citation>2559	4	2573</citation>
	<citation>2573	4	2573</citation>
	<citation>2573	4	2573</citation>
	<citation>2573	4	2573</citation>
	<citation>2770	4	2573</citation>
	<citation>2770	4	2573</citation>
	<citation>2991	4	2573</citation>
	<citation>3053	4	2573</citation>
	<citation>3083	4	2573</citation>
	<citation>1786	5	2573</citation>
	<citation>2018	5	2573</citation>
	<citation>2107	5	2573</citation>
	<citation>2573	5	2573</citation>
	<citation>2573	5	2573</citation>
	<citation>2573	5	2573</citation>
	</citations>
	<title>Computer Programming as an Art</title>
	<conference>CACM December, 1974</conference>
	<authors>
	<author>Knuth, D. E.</author>
	</authors>
	<location>CA741201 JB January 16, 1978  10:04 AM</location>
	</document>
	<document id= '2572'>
	<title>Arguments for a Moratorium on the Construction of a Community Information Utility</title>
	<abstract>In this article the author urges a prudent and decentralized approach to the question of the  design and desirability of computerized community information utilities.  Before accepting the inevitability  and desirability of this or any technology, we should: (1) be sure of the feasibility (internally and  externally) of what is proposed; (2) project and perhaps wait for changes in complementary techniques;  (3) evaluate current and projected supplementary techniques; (4) establish the existence of demand for  what is proposed; (5) take steps to involve a representative group of ultimate users in systems design,  and (6) carefully think through possible side effects on man and his world view.  Current proposals for  community information utilities are examined in this framework, and the conclusion is drawn that society  is not yet in a position to justify either the construction of an information utility in a prototype  community or the acceptance of a policy in favor of its widespread implementation.</abstract>
	<conference>CACM December, 1974</conference>
	<authors>
	<author>Press, L. I.</author>
	</authors>
	<keywords>community information utilities, social implications, public policy</keywords>
	<version>2.1 2.3</version>
	<location>CA741202 JB January 16, 1978  10:02 AM</location>
	<citations>
	<citation>2572	5	2572</citation>
	<citation>2572	5	2572</citation>
	<citation>2572	5	2572</citation>
	<citation>3179	5	2572</citation>
	<citation>2572	6	2572</citation>
	<citation>2607	6	2572</citation>
	<citation>3076	6	2572</citation>
	</citations>
	</document>
	<document id= '2571'>
	<title>An Analytic Model of the Hasp Execution Task Monitor</title>
	<abstract>The HASP Execution Task Monitor periodically rearranges the OS/360 dispatching chain to give  tasks preemptive execution priority in inverse order to that of their cpu utilization history.  The effect  is to keep the I/O bound tasks active and to prevent cpu bound tasks from locking out other tasks.  This  paper develops a simple model of the Execution Task Monitor and employs it to study the effectiveness  of the monitor in improving system performance.  A modified strategy monitor control is investigated  for the case of task execution in a memory hierarchy of varying speeds.</abstract>
	<conference>CACM December, 1974</conference>
	<authors>
	<author>Strauss, J. C.</author>
	</authors>
	<keywords>Hasp, OS/360, dispatching, scheduling, modeling, performance evaluation</keywords>
	<version>4.32 8.1</version>
	<location>CA741203 JB January 16, 1978  9:51 AM</location>
	<citations>
	<citation>2571	4	2571</citation>
	<citation>3072	4	2571</citation>
	<citation>3119	4	2571</citation>
	<citation>2245	5	2571</citation>
	<citation>2571	5	2571</citation>
	<citation>2571	5	2571</citation>
	<citation>2571	5	2571</citation>
	</citations>
	</document>
	<document id= '2570'>
	<title>A Comparison of List Schedules for Parallel Processing Systems</title>
	<abstract>The problem of scheduling two or more processors to minimize the execution time of a program  which consists of a set of partially ordered tasks is studied.  Cases where task execution times are  deterministic and others in which execution times are random variables are analyzed.  It is shown that  different algorithms suggested in the literature vary significantly in execution time and that the B-schedule  of Coffman and Graham is near-optimal.  A dynamic programming solution for the case in which execution  times are random variables is presented.</abstract>
	<conference>CACM December, 1974</conference>
	<authors>
	<author>Adam, T. L.</author>
	<author>Chandy, K. M.</author>
	<author>Dickson, J. R.</author>
	</authors>
	<keywords>parallel processing, precedence graphs, scheduling, list scheduling, optimization, dynamic programming</keywords>
	<version>4.3 4.32 4.34 4.35 5.3 5.32 5.4 5.42 8.1</version>
	<location>CA741204 JB January 16, 1978  9:42 AM</location>
	<citations>
	<citation>2570	5	2570</citation>
	<citation>2570	5	2570</citation>
	<citation>2570	5	2570</citation>
	</citations>
	</document>
	<document id= '2569'>
	<title>Computer Generation of Gamma Random Variates with Non-integral Shape Parameters</title>
	<abstract>When the shape parameter, a, is integral, generating gamma random variables with a digital  computer is straightforward.  There is no simple method for generating gamma random variates with non-integral  shape parameters.  A common procedure is to approximately generate such random variables by use of the  so-called probability switch method.  Another procedure, which is exact, is due to Johnk.  This paper  presents a rejection method for exactly generating gamma random variables when a is greater than 1.   The efficiency of the rejection method is shown to be better than the efficiency of Johnk's method.   The paper concludes that when a is non-integral the following mix of procedures yields the best combination  of accuracy and efficiency: (1) when a is less than 1, use Johnk's method; (2) when 1 is less than a  and a is less than 5, use the rejection method; (3) when a is greater than 5, use the probability switch  method.</abstract>
	<conference>CACM December,1974</conference>
	<authors>
	<author>Wallace, N. D.</author>
	</authors>
	<keywords>simulation, gamma random variables, probability distribution, random numbers</keywords>
	<version>5.5 8.1</version>
	<location>CA741205 JB January 16, 1978  9:35 AM</location>
	<citations>
	<citation>2569	5	2569</citation>
	<citation>2569	5	2569</citation>
	<citation>2569	5	2569</citation>
	<citation>2847	5	2569</citation>
	<citation>2928	5	2569</citation>
	<citation>3046	5	2569</citation>
	<citation>3098	5	2569</citation>
	<citation>3107	5	2569</citation>
	<citation>1751	6	2569</citation>
	<citation>2277	6	2569</citation>
	<citation>2380	6	2569</citation>
	<citation>2522	6	2569</citation>
	<citation>2569	6	2569</citation>
	<citation>2569	6	2569</citation>
	<citation>2569	6	2569</citation>
	<citation>2569	6	2569</citation>
	<citation>2569	6	2569</citation>
	<citation>2847	6	2569</citation>
	<citation>2847	6	2569</citation>
	<citation>3098	6	2569</citation>
	</citations>
	</document>
	<document id= '2568'>
	<title>A Graph Formulation of a School Scheduling Algorithm</title>
	<abstract>The problem classically titled "The Examination Schedule Problem" takes various forms in the  literature.  Most of these formulations can be presented in the terminology of classical Network Theory.   One such formulation is:  Given a nondirected network, partition its nodes into a minimal number of  subsets such that no two members of the same subset are connected by anarc.  An obvious lower limit  to this number is the size of the largest strongly connected subgraph.  Kirchgassner proved that an upper  limit is this size plus one.  One logical extension of the previous work is the introduction of variable  length examinations where W(I) is the number of periods for exam I.  The object of this paper is to generalize  the definition of largest strongly connected subgraph to include the weighting of nodes, to present an  approximate algorithm which usually finds the largest strongly connected subgraph, and to discuss the  application of this algorithm to the solution of school scheduling and exam scheduling problems.</abstract>
	<conference>CACM December, 1974</conference>
	<authors>
	<author>Salazar, A.</author>
	<author>Oakford, R. V.</author>
	</authors>
	<keywords>scheduling, school scheduling, examination scheduling, nondirected network, graph, subgraph, strongly  connected subgraph</keywords>
	<version>3.51 3.52</version>
	<location>CA741206 JB January 13, 1978  4:37 PM</location>
	<citations>
	<citation>2568	5	2568</citation>
	<citation>2568	5	2568</citation>
	<citation>2568	5	2568</citation>
	</citations>
	</document>
	<document id= '2567'>
	<title>An Exponential Method for the Solution of Systems of Ordinary Differential Equations</title>
	<abstract>An explicit, coupled, single-step method for the numerical solution of initial value problems  for systems of ordinary differential equations is presented.  The method was designed to be general purpose  in nature but to be especially efficient when dealing with stiff systems of differential equations.   It is, in general, second order except for the case of a linear system with constant coefficients and  linear forcing terms; in that case, the method is third order.  It has been implemented and put to routine  usage in biological applications-where stiffness frequently appears-with favorable results.  When compared  to a standard fourth order Runge-Kutta implementation, computation time required by this method has ranged  from comparable for certain nonstiff problems to better than two orders of magnitude faster for some  highly stiff systems.</abstract>
	<conference>CACM December, 1974</conference>
	<authors>
	<author>Chu, S. C.</author>
	<author>Berman, M.</author>
	</authors>
	<keywords>numerical solution, ordinary differential equations, initial value problems, stiff systems</keywords>
	<version>5.17</version>
	<location>CA741207 JB January 13, 1978  4:20 PM</location>
	<citations>
	<citation>2567	4	2567</citation>
	<citation>2567	4	2567</citation>
	<citation>2268	5	2567</citation>
	<citation>2567	5	2567</citation>
	<citation>2567	5	2567</citation>
	<citation>2567	5	2567</citation>
	<citation>755	5	2567</citation>
	</citations>
	</document>
	<document id= '2566'>
	<title>Exact Cumulative Distribution of the Kolmogorov-Smirnov Statistic for Small Samples (Algorithm  A487)</title>
	<conference>CACM December, 1974</conference>
	<authors>
	<author>Pomeranz, J.</author>
	</authors>
	<keywords>Kolmogorov-Smirnov test, K-S statistic, goodness-of-fit testing</keywords>
	<version>8.1 5.5</version>
	<location>CA741208 JB January 13, 1978  4:08 PM</location>
	<citations>
	<citation>2566	5	2566</citation>
	<citation>2566	5	2566</citation>
	<citation>2566	5	2566</citation>
	</citations>
	</document>
	<document id= '2565'>
	<title>A Gaussian Pseudo-Random Number Generator (Algorithm 488)</title>
	<conference>CACM December, 1974</conference>
	<authors>
	<author>Brent, R. P.</author>
	</authors>
	<keywords>random numbers, pseudo-random numbers, Gaussian distribution, normal distribution</keywords>
	<version>5.39 5.5</version>
	<location>CA741209 JB January 13, 1978  3:57 PM</location>
	<citations>
	<citation>2349	4	2565</citation>
	<citation>2565	4	2565</citation>
	<citation>2565	4	2565</citation>
	<citation>1716	5	2565</citation>
	<citation>2276	5	2565</citation>
	<citation>2565	5	2565</citation>
	<citation>2565	5	2565</citation>
	<citation>2565	5	2565</citation>
	</citations>
	</document>
	<document id= '2564'>
	<citations>
	<citation>2564	5	2564</citation>
	<citation>2564	5	2564</citation>
	<citation>2564	5	2564</citation>
	</citations>
	<title>Hidden-Line Plotting Program (Algorithm R420)</title>
	<conference>CACM December, 1974</conference>
	<authors>
	<author>Ellis, T. M. R.</author>
	</authors>
	<location>CA741210 JB January 13, 1978  3:45 PM</location>
	</document>
	<document id= '2563'>
	<citations>
	<citation>2563	4	2563</citation>
	<citation>2348	5	2563</citation>
	<citation>2563	5	2563</citation>
	<citation>2563	5	2563</citation>
	<citation>2563	5	2563</citation>
	</citations>
	<title>Merge Sort Algorithm (R426)</title>
	<conference>CACM December, 1974</conference>
	<authors>
	<author>Bron, C.</author>
	</authors>
	<location>CA741211 JB January 13, 1978  3:43 PM</location>
	</document>
	<document id= '2562'>
	<citations>
	<citation>2562	5	2562</citation>
	<citation>2562	5	2562</citation>
	<citation>2562	5	2562</citation>
	</citations>
	<title>Routing Problem (Algorithm R456)</title>
	<conference>CACM December, 1974</conference>
	<authors>
	<author>Tesch, G.</author>
	</authors>
	<location>CA741212 JB January 13, 1978  3:42 PM</location>
	</document>
	<document id= '2561'>
	<title>A Heuristic Approach to Inductive Inference in Fact Retrieval Systems</title>
	<abstract>Heuristic procedures are presented which have been developed to perform inferences by generalizing  from available information.  The procedures make use of a similarity structure which is imposed on the  data base using nonnumerical clustering algorithms.  They are implemented in a model fact retrieval system  which uses a formal query language and a property-list data structure.  A program of experiments is described  wherein the procedures are used with test data bases which are altered by deleting part of the data and  by purposely introducing false data.  It is found that the system can infer the correct response under  a variety of conditions involving incomplete and inconsistent data.</abstract>
	<conference>CACM December, 1974</conference>
	<authors>
	<author>Skinner, C. W.</author>
	</authors>
	<keywords>inference, inductive inference, clustering, fact retrieval, heuristics</keywords>
	<version>3.61 3.71 3.79</version>
	<location>CA741213 JB January 13, 1978  3:40 PM</location>
	<citations>
	<citation>2178	4	2561</citation>
	<citation>2396	4	2561</citation>
	<citation>2561	4	2561</citation>
	<citation>2127	5	2561</citation>
	<citation>2561	5	2561</citation>
	<citation>2561	5	2561</citation>
	<citation>2561	5	2561</citation>
	</citations>
	</document>
	<document id= '2560'>
	<title>A Queuing Model of a Multiprogrammed Computer with a Two-Level Storage System</title>
	<abstract>The results are presented of an analysis of a probabilistic model of a multiprogrammed computer  system with a two-level storage system in which there is sequential dependency of accesses between the  devices.  Expressions are obtained for the long-run probability that both the CPU and each of the storage  devices are busy.  Some numerical results are given which quantify the gains in CPU utilization obtainable  by multiprogramming in the presence of this type of storage system.</abstract>
	<conference>CACM January, 1973</conference>
	<authors>
	<author>Shedler, G. S.</author>
	</authors>
	<keywords>multiprogrammed computer system, storage system, hierarchical index sets</keywords>
	<version>4.32</version>
	<location>CA730101 JB January 24, 1978  4:55 PM</location>
	<citations>
	<citation>2560	5	2560</citation>
	<citation>2560	5	2560</citation>
	<citation>2560	5	2560</citation>
	</citations>
	</document>
	<document id= '2559'>
	<title>The Reallocation of Hash-Coded Tables</title>
	<abstract>When the space allocation for a hash-coded table is altered, the table entries must be rescattered  over the new space.  A technique for accomplishing this rescattering is presented.  The technique is  independent of both the length of the table and the hashing function used, and can be utilized in conjunction  with a linear reallocation of the table being rescattered.  Moreover, it can be used to eliminate previously  flagged deletions from any hash-coded table, or to change from one hashing method to another.  The efficiency  of the technique is discussed and theoretical statistics are given.</abstract>
	<conference>CACM January, 1973</conference>
	<authors>
	<author>Bays, C.</author>
	</authors>
	<keywords>reallocation, dynamic storage, hash code, scatter storage, deletions</keywords>
	<version>3.7 3.73 3.74 4.9</version>
	<location>CA730102 JB January 24, 1978  4:50 PM</location>
	<citations>
	<citation>1676	4	2559</citation>
	<citation>1682	4	2559</citation>
	<citation>1728	4	2559</citation>
	<citation>1860	4	2559</citation>
	<citation>1973	4	2559</citation>
	<citation>1973	4	2559</citation>
	<citation>1992	4	2559</citation>
	<citation>2018	4	2559</citation>
	<citation>2032	4	2559</citation>
	<citation>2033	4	2559</citation>
	<citation>2107	4	2559</citation>
	<citation>2109	4	2559</citation>
	<citation>2138	4	2559</citation>
	<citation>2203	4	2559</citation>
	<citation>2203	4	2559</citation>
	<citation>2251	4	2559</citation>
	<citation>2251	4	2559</citation>
	<citation>2251	4	2559</citation>
	<citation>2359	4	2559</citation>
	<citation>2524	4	2559</citation>
	<citation>2530	4	2559</citation>
	<citation>2534	4	2559</citation>
	<citation>2537	4	2559</citation>
	<citation>2543	4	2559</citation>
	<citation>2543	4	2559</citation>
	<citation>2543	4	2559</citation>
	<citation>2552	4	2559</citation>
	<citation>2559	4	2559</citation>
	<citation>2559	4	2559</citation>
	<citation>2559	4	2559</citation>
	<citation>2573	4	2559</citation>
	<citation>2770	4	2559</citation>
	<citation>2991	4	2559</citation>
	<citation>2991	4	2559</citation>
	<citation>3053	4	2559</citation>
	<citation>3053	4	2559</citation>
	<citation>3053	4	2559</citation>
	<citation>3083	4	2559</citation>
	<citation>3083	4	2559</citation>
	<citation>1785	5	2559</citation>
	<citation>1973	5	2559</citation>
	<citation>2107	5	2559</citation>
	<citation>2559	5	2559</citation>
	<citation>2559	5	2559</citation>
	<citation>2559	5	2559</citation>
	</citations>
	</document>
	<document id= '2558'>
	<title>Protection in Programming Languages</title>
	<abstract>Linguistic mechanisms which can be used to protect one subprogram from another's malfunctioning  are described.  Function-producing functions and various type-tagging schemes are considered.  An attempt  is made to distinguish between access limitation and authentication.</abstract>
	<conference>CACM January, 1973</conference>
	<authors>
	<author>Morris, J. H. Jr.</author>
	</authors>
	<keywords>protection, types, environments,trademarks, seals, access keys, access control authentication,  secrecy</keywords>
	<version>4.2 4.3</version>
	<location>CA730103JB January 24, 1978  4:45 PM</location>
	<citations>
	<citation>1458	4	2558</citation>
	<citation>1523	4	2558</citation>
	<citation>1603	4	2558</citation>
	<citation>1698	4	2558</citation>
	<citation>1747	4	2558</citation>
	<citation>1748	4	2558</citation>
	<citation>1854	4	2558</citation>
	<citation>1877	4	2558</citation>
	<citation>1960	4	2558</citation>
	<citation>2155	4	2558</citation>
	<citation>2294	4	2558</citation>
	<citation>2377	4	2558</citation>
	<citation>2378	4	2558</citation>
	<citation>2497	4	2558</citation>
	<citation>2558	4	2558</citation>
	<citation>2558	4	2558</citation>
	<citation>2625	4	2558</citation>
	<citation>2632	4	2558</citation>
	<citation>2840	4	2558</citation>
	<citation>2842	4	2558</citation>
	<citation>2941	4	2558</citation>
	<citation>3077	4	2558</citation>
	<citation>3105	4	2558</citation>
	<citation>3144	4	2558</citation>
	<citation>3150	4	2558</citation>
	<citation>1471	5	2558</citation>
	<citation>2060	5	2558</citation>
	<citation>2558	5	2558</citation>
	<citation>2558	5	2558</citation>
	<citation>2558	5	2558</citation>
	<citation>2868	5	2558</citation>
	<citation>2939	5	2558</citation>
	<citation>2941	5	2558</citation>
	<citation>1471	6	2558</citation>
	<citation>2080	6	2558</citation>
	<citation>2204	6	2558</citation>
	<citation>2356	6	2558</citation>
	<citation>2377	6	2558</citation>
	<citation>2380	6	2558</citation>
	<citation>2558	6	2558</citation>
	<citation>2558	6	2558</citation>
	<citation>2558	6	2558</citation>
	<citation>2625	6	2558</citation>
	<citation>2632	6	2558</citation>
	<citation>2651	6	2558</citation>
	</citations>
	</document>
	<document id= '2557'>
	<title>On the Time Required for a Sequence of Matrix Products</title>
	<abstract>This paper discusses the multiplication of conformable sequences of row vectors, column vectors,  and square matrices.  The minimum time required to evaluate such products on ordinary serial computers  as well as parallel computers is discussed.  Algorithms are presented which properly parse such matrix  sequences subject to the constraints of the machine organization.</abstract>
	<conference>CACM January, 1973</conference>
	<authors>
	<author>Muraoka, Y.</author>
	<author>Kuck, D. J.</author>
	</authors>
	<keywords>matrix expressions, matrix multiplication, operation minimization, parallel machine, time minimization</keywords>
	<version>4.22 5.14</version>
	<location>CA730104 JB January 24, 1978  4:41 PM</location>
	<citations>
	<citation>1614	4	2557</citation>
	<citation>2253	4	2557</citation>
	<citation>2557	4	2557</citation>
	<citation>2557	5	2557</citation>
	<citation>2557	5	2557</citation>
	<citation>2557	5	2557</citation>
	<citation>437	5	2557</citation>
	<citation>3075	5	2557</citation>
	<citation>3085	5	2557</citation>
	<citation>2289	6	2557</citation>
	<citation>2557	6	2557</citation>
	<citation>2557	6	2557</citation>
	<citation>2664	6	2557</citation>
	<citation>2714	6	2557</citation>
	</citations>
	</document>
	<document id= '2556'>
	<title>Adaptive Correction of Program Statements</title>
	<abstract>A method of analyzing statements in a programming language which can tolerate a considerable  inaccuracy in their specification is proposed. This method involves principles at present mainly confined  to studies in the area of artificial intelligence such as feature extraction, approximate tree matching,  and strategy improvement by feedback from the matching process.  A pilot program incorporating the principles  is described and preliminary operating results are presented.  A final section surveys further principles  which are currently being investigated.</abstract>
	<conference>CACM January, 1973</conference>
	<authors>
	<author>James, E. B.</author>
	<author>Partridge, D. P.</author>
	</authors>
	<keywords>adaptive, linguistic pattern matching, automatic parsing, approximate match, compiler, program  statement analysis, syntax analysis</keywords>
	<version>3.62 3.63 3.65</version>
	<location>CA730105 JB January 24, 1978  4:38 PM</location>
	<citations>
	<citation>1179	4	2556</citation>
	<citation>1288	4	2556</citation>
	<citation>1544	4	2556</citation>
	<citation>1646	4	2556</citation>
	<citation>2111	4	2556</citation>
	<citation>2257	4	2556</citation>
	<citation>2360	4	2556</citation>
	<citation>2451	4	2556</citation>
	<citation>2451	4	2556</citation>
	<citation>2452	4	2556</citation>
	<citation>2534	4	2556</citation>
	<citation>2534	4	2556</citation>
	<citation>2556	4	2556</citation>
	<citation>2556	4	2556</citation>
	<citation>2556	4	2556</citation>
	<citation>2556	4	2556</citation>
	<citation>2650	4	2556</citation>
	<citation>2650	4	2556</citation>
	<citation>2708	4	2556</citation>
	<citation>2765	4	2556</citation>
	<citation>2887	4	2556</citation>
	<citation>2978	4	2556</citation>
	<citation>1935	5	2556</citation>
	<citation>1936	5	2556</citation>
	<citation>2111	5	2556</citation>
	<citation>2556	5	2556</citation>
	<citation>2556	5	2556</citation>
	<citation>2556	5	2556</citation>
	<citation>2698	5	2556</citation>
	<citation>2708	5	2556</citation>
	<citation>830	5	2556</citation>
	<citation>1477	6	2556</citation>
	<citation>1477	6	2556</citation>
	<citation>1491	6	2556</citation>
	<citation>1491	6	2556</citation>
	<citation>1781	6	2556</citation>
	<citation>1787	6	2556</citation>
	<citation>2110	6	2556</citation>
	<citation>2111	6	2556</citation>
	<citation>2534	6	2556</citation>
	<citation>2556	6	2556</citation>
	<citation>2556	6	2556</citation>
	<citation>680	6	2556</citation>
	<citation>680	6	2556</citation>
	<citation>799	6	2556</citation>
	</citations>
	</document>
	<document id= '2555'>
	<title>Variable-Precision Exponentiation</title>
	<abstract>A previous paper presented an efficient algorithm, called the Recomputation Algorithm, for  evaluating a rational expression to within any desired tolerance on a computer which performs variable-precision  arithmetic operations.  The Recomputation Algorithm can be applied to expressions involving any variable-precision  operations having O(10^(-p) + SUM{|Ei|}) error bounds, where p denotes the operation's precision and  Ei denotes the error in the operation's ith argument.  This paper presents an efficient variable-precision  exponential operation with an error bound of the above order.  Other operations such as log, sin, and  cos, which have simple series expansions, can be handled similarly.</abstract>
	<conference>CACM January, 1973</conference>
	<authors>
	<author>Richman, P. L.</author>
	</authors>
	<keywords>variable-precision, exponential function, error analysis, interval arithmetic</keywords>
	<version>5.11</version>
	<location>CA730106 JB January 24, 1978  4:32 PM</location>
	<citations>
	<citation>2555	4	2555</citation>
	<citation>2605	4	2555</citation>
	<citation>2286	5	2555</citation>
	<citation>2555	5	2555</citation>
	<citation>2555	5	2555</citation>
	<citation>2555	5	2555</citation>
	</citations>
	</document>
	<document id= '2554'>
	<title>Reduction of a Band-Symmetric Generalized Eigenvalue Problem</title>
	<abstract>An algorithm is described for reducing the generalized eigenvalue problem Ax = lambda Bx to  an ordinary problem, in case A and B are symmetric band matrices with B positive definite.  If n is the  order of the matrix and m the bandwidth, the matrices A and B are partitioned into m-by-m blocks; and  the algorithm is described in terms of these blocks.  The algorithm reduces the generalized problem to  an ordinary eigenvalue problem for a symmetric band matrix C whose bandwidth is the same as A and B.   The algorithm is similar to those of Rutishauser and Schwartz for the reduction of symmetric matrices  to band form.  The calculation C requires order mn^2 operation.  The round-off error in the calculation  of C is of the same order as the sum of the errors at each of the n/m steps of the algorithm, the latter  errors being largely determined by the condition of B with respect to inversion.</abstract>
	<conference>CACM January, 1973</conference>
	<authors>
	<author>Crawford, C. R.</author>
	</authors>
	<keywords>generalized eigenvalues, symmetric band matrices</keywords>
	<version>5.14</version>
	<location>CA730107 JB January 24, 1978  4:26 PM</location>
	<citations>
	<citation>2554	5	2554</citation>
	<citation>2554	5	2554</citation>
	<citation>2554	5	2554</citation>
	</citations>
	</document>
	<document id= '2553'>
	<title>The Practical Aspect of Computer Science Education-Discussion</title>
	<conference>CACM January, 1973</conference>
	<authors>
	<author>Blount, S. E.</author>
	</authors>
	<keywords>education, computer engineering, computer science curriculum, systems design</keywords>
	<version>1.52 6.0</version>
	<location>CA730108 JB January 24, 1978  4:09 PM</location>
	<citations>
	<citation>2553	5	2553</citation>
	<citation>2553	5	2553</citation>
	<citation>2553	5	2553</citation>
	</citations>
	</document>
	<document id= '2552'>
	<title>A Note on When To Chain Overflow Items Within a Direct-Access Table</title>
	<conference>CACM January, 1973</conference>
	<authors>
	<author>Bays, C.</author>
	</authors>
	<keywords>hash code, open hash, chaining, information retrieval, collision</keywords>
	<version>3.7 4.9</version>
	<location>CA730109 JB January 24, 1978  4:07 PM</location>
	<citations>
	<citation>1271	4	2552</citation>
	<citation>1676	4	2552</citation>
	<citation>1682	4	2552</citation>
	<citation>1728	4	2552</citation>
	<citation>1785	4	2552</citation>
	<citation>1785	4	2552</citation>
	<citation>1860	4	2552</citation>
	<citation>1973	4	2552</citation>
	<citation>2018	4	2552</citation>
	<citation>2032	4	2552</citation>
	<citation>2033	4	2552</citation>
	<citation>2107	4	2552</citation>
	<citation>2109	4	2552</citation>
	<citation>2203	4	2552</citation>
	<citation>2203	4	2552</citation>
	<citation>2251	4	2552</citation>
	<citation>2258	4	2552</citation>
	<citation>2319	4	2552</citation>
	<citation>2313	4	2552</citation>
	<citation>2359	4	2552</citation>
	<citation>2359	4	2552</citation>
	<citation>2437	4	2552</citation>
	<citation>2524	4	2552</citation>
	<citation>2543	4	2552</citation>
	<citation>2543	4	2552</citation>
	<citation>2552	4	2552</citation>
	<citation>2552	4	2552</citation>
	<citation>2552	4	2552</citation>
	<citation>2552	4	2552</citation>
	<citation>2559	4	2552</citation>
	<citation>2781	4	2552</citation>
	<citation>2860	4	2552</citation>
	<citation>2991	4	2552</citation>
	<citation>2991	4	2552</citation>
	<citation>3053	4	2552</citation>
	<citation>911	4	2552</citation>
	<citation>911	5	2552</citation>
	<citation>1785	5	2552</citation>
	<citation>332	5	2552</citation>
	<citation>2203	5	2552</citation>
	<citation>2552	5	2552</citation>
	<citation>2552	5	2552</citation>
	<citation>2552	5	2552</citation>
	<citation>3083	5	2552</citation>
	<citation>1328	6	2552</citation>
	<citation>1973	6	2552</citation>
	<citation>2107	6	2552</citation>
	<citation>2543	6	2552</citation>
	<citation>2552	6	2552</citation>
	</citations>
	</document>
	<document id= '2551'>
	<title>Mutual Recursion in Algol 60 Using Restricted Compilers</title>
	<conference>CACM January, 1973</conference>
	<authors>
	</authors>
	<keywords>Algol 60, mutual recursion, compiler restrictions</keywords>
	<version>4.12 4.22</version>
	<location>CA730110 JB January 24, 1978  3:46 PM</location>
	<citations>
	<citation>2551	5	2551</citation>
	<citation>2551	5	2551</citation>
	<citation>2551	5	2551</citation>
	<citation>2658	5	2551</citation>
	<citation>2551	6	2551</citation>
	</citations>
	</document>
	<document id= '2550'>
	<title>A Multidimensional Monte Carlo Quadrature with Adaptive Stratified Sampling [D1] (Algorithm A440)</title>
	<conference>CACM January, 1973</conference>
	<authors>
	<author>Gallaher, L. J.</author>
	</authors>
	<keywords>Monte Carloquadrature, stratified sampling, adaptive quadrature, sequential stratification</keywords>
	<version>5.16 5.5</version>
	<location>CA730111 JB January 24, 1978  3:44 PM</location>
	<citations>
	<citation>1352	4	2550</citation>
	<citation>2048	4	2550</citation>
	<citation>2074	4	2550</citation>
	<citation>2093	4	2550</citation>
	<citation>2093	4	2550</citation>
	<citation>2415	4	2550</citation>
	<citation>2550	4	2550</citation>
	<citation>2550	4	2550</citation>
	<citation>2550	4	2550</citation>
	<citation>1573	5	2550</citation>
	<citation>2074	5	2550</citation>
	<citation>2550	5	2550</citation>
	<citation>2550	5	2550</citation>
	<citation>2550	5	2550</citation>
	<citation>429	5	2550</citation>
	</citations>
	</document>
	<document id= '2549'>
	<title>Random Deviates from the Dipole Distribution [G5] (Algorithm A441)</title>
	<conference>CACM January, 1973</conference>
	<authors>
	<author>Knop, R. E.</author>
	</authors>
	<keywords>random number, probability density, probability distribution, Dipole distribution, Cauchy distribution,  simulation, Monte Carlo</keywords>
	<version>3.17 5.5</version>
	<location>CA730112 JB January 24, 1978  3:42 PM</location>
	<citations>
	<citation>2549	5	2549</citation>
	<citation>2549	5	2549</citation>
	<citation>2549	5	2549</citation>
	</citations>
	</document>
	<document id= '2548'>
	<title>Normal Deviate [S14] (Algorithm A442)</title>
	<conference>CACM January, 1973</conference>
	<authors>
	<author>Hill, G. W.</author>
	<author>Davis, A. W.</author>
	</authors>
	<keywords>normal distribution inverse, probit transform, Taylor series approximation</keywords>
	<version>5.12 5.5</version>
	<location>CA730113 JB January 24, 1978  3:39 PM</location>
	<citations>
	<citation>1157	4	2548</citation>
	<citation>1779	4	2548</citation>
	<citation>1920	4	2548</citation>
	<citation>1944	4	2548</citation>
	<citation>1987	4	2548</citation>
	<citation>2548	4	2548</citation>
	<citation>2548	5	2548</citation>
	<citation>2548	5	2548</citation>
	<citation>2548	5	2548</citation>
	<citation>714	5	2548</citation>
	</citations>
	</document>
	<document id= '2547'>
	<title>Representation of Contours ad Regions for Efficient Computer Search</title>
	<abstract>A novel computer-searchable representation for the three basic pictorial features, contour  maps, region coverage, and line structures, is described.  The representation, which has practical storage  requirements, provides a rapid mean of searching large files for data associated with geometric position  as well as with attribute value.  An application of this representation to handling terrain information  illustrates its utility.  The algebraic properties of the data structure make it computationally easy  to determine whether a point lies within a closed boundary; compute the area contained by a closed boundary;  generate the closed boundary representing the union or intersection of two closed boundaries; and determine  the neighboring boundaries to a point and the minimum distances between them and the point.</abstract>
	<conference>CACM February, 1973</conference>
	<authors>
	<author>Merrill, R. D.</author>
	</authors>
	<keywords>contour map representation, region boundary representation, computer-search-able structure, graphic  data retrieval, graphic language, two-dimensional patterns, computer graphics, graphic display</keywords>
	<version>3.21 3.23 3.79 6.35</version>
	<location>CA730201 JB January 24, 1978  3:30 PM</location>
	<citations>
	<citation>1630	4	2547</citation>
	<citation>2287	4	2547</citation>
	<citation>2547	4	2547</citation>
	<citation>2547	4	2547</citation>
	<citation>2987	4	2547</citation>
	<citation>3062	4	2547</citation>
	<citation>3165	4	2547</citation>
	<citation>1326	5	2547</citation>
	<citation>1925	5	2547</citation>
	<citation>2547	5	2547</citation>
	<citation>2547	5	2547</citation>
	<citation>2547	5	2547</citation>
	<citation>2987	5	2547</citation>
	<citation>1326	6	2547</citation>
	<citation>1630	6	2547</citation>
	<citation>2125	6	2547</citation>
	<citation>2547	6	2547</citation>
	<citation>2633	6	2547</citation>
	<citation>421	6	2547</citation>
	<citation>524	6	2547</citation>
	</citations>
	</document>
	<document id= '2546'>
	<title>The Use of Grammatical Inference for Designing Programming Languages</title>
	<abstract>Both in designing a new programming language and in extending an existing language, the designer  is faced with the problem of deriving a "natural" grammar for the language.  We are proposing an interactive  approach to the grammar design problem wherein the designer presents a sample of sentences and structures  as input to a grammatical inference algorithm.  The algorithm then constructs a grammar which is a reasonable  generalization of the examples submitted by the designer.  The implementation is presently restricted  to a subclass of operator precedence grammars, but a second algorithm is outlined which applies to a  larger class of context-free grammars.</abstract>
	<conference>CACM February, 1973</conference>
	<authors>
	<author>Reghizzi, S.</author>
	<author>Melkanoff, M. A.</author>
	<author>Lichten, L.</author>
	</authors>
	<keywords>grammar design, language definition, inference, identification in the limit, extensible languages</keywords>
	<version>3.61 4.2 5.23</version>
	<location>CA730202 JB January 24, 1978  3:20 PM</location>
	<citations>
	<citation>1046	4	2546</citation>
	<citation>1086	4	2546</citation>
	<citation>1105	4	2546</citation>
	<citation>1132	4	2546</citation>
	<citation>1139	4	2546</citation>
	<citation>1140	4	2546</citation>
	<citation>1234	4	2546</citation>
	<citation>1234	4	2546</citation>
	<citation>1263	4	2546</citation>
	<citation>1263	4	2546</citation>
	<citation>1265	4	2546</citation>
	<citation>1265	4	2546</citation>
	<citation>1270	4	2546</citation>
	<citation>1323	4	2546</citation>
	<citation>1358	4	2546</citation>
	<citation>1379	4	2546</citation>
	<citation>1379	4	2546</citation>
	<citation>1380	4	2546</citation>
	<citation>1453	4	2546</citation>
	<citation>1464	4	2546</citation>
	<citation>1484	4	2546</citation>
	<citation>1491	4	2546</citation>
	<citation>1496	4	2546</citation>
	<citation>1498	4	2546</citation>
	<citation>1542	4	2546</citation>
	<citation>1613	4	2546</citation>
	<citation>1614	4	2546</citation>
	<citation>1683	4	2546</citation>
	<citation>1693	4	2546</citation>
	<citation>1693	4	2546</citation>
	<citation>1781	4	2546</citation>
	<citation>1781	4	2546</citation>
	<citation>1781	4	2546</citation>
	<citation>1781	4	2546</citation>
	<citation>1787	4	2546</citation>
	<citation>1824	4	2546</citation>
	<citation>1825	4	2546</citation>
	<citation>1836	4	2546</citation>
	<citation>1836	4	2546</citation>
	<citation>1860	4	2546</citation>
	<citation>1945	4	2546</citation>
	<citation>1945	4	2546</citation>
	<citation>2015	4	2546</citation>
	<citation>2060	4	2546</citation>
	<citation>2060	4	2546</citation>
	<citation>2061	4	2546</citation>
	<citation>2061	4	2546</citation>
	<citation>2083	4	2546</citation>
	<citation>2082	4	2546</citation>
	<citation>2091	4	2546</citation>
	<citation>2091	4	2546</citation>
	<citation>2126	4	2546</citation>
	<citation>2152	4	2546</citation>
	<citation>2178	4	2546</citation>
	<citation>2179	4	2546</citation>
	<citation>2179	4	2546</citation>
	<citation>2179	4	2546</citation>
	<citation>2252	4	2546</citation>
	<citation>2317	4	2546</citation>
	<citation>2325	4	2546</citation>
	<citation>2341	4	2546</citation>
	<citation>2340	4	2546</citation>
	<citation>2356	4	2546</citation>
	<citation>2546	4	2546</citation>
	<citation>2546	4	2546</citation>
	<citation>2546	4	2546</citation>
	<citation>2546	4	2546</citation>
	<citation>2546	4	2546</citation>
	<citation>464	4	2546</citation>
	<citation>2603	4	2546</citation>
	<citation>2645	4	2546</citation>
	<citation>2652	4	2546</citation>
	<citation>2684	4	2546</citation>
	<citation>2698	4	2546</citation>
	<citation>2698	4	2546</citation>
	<citation>2708	4	2546</citation>
	<citation>2708	4	2546</citation>
	<citation>2824	4	2546</citation>
	<citation>2842	4	2546</citation>
	<citation>2929	4	2546</citation>
	<citation>2934	4	2546</citation>
	<citation>2982	4	2546</citation>
	<citation>2986	4	2546</citation>
	<citation>584	4	2546</citation>
	<citation>3045	4	2546</citation>
	<citation>3045	4	2546</citation>
	<citation>3069	4	2546</citation>
	<citation>3093	4	2546</citation>
	<citation>631	4	2546</citation>
	<citation>653	4	2546</citation>
	<citation>669	4	2546</citation>
	<citation>679	4	2546</citation>
	<citation>680	4	2546</citation>
	<citation>691	4	2546</citation>
	<citation>761	4	2546</citation>
	<citation>763	4	2546</citation>
	<citation>795	4	2546</citation>
	<citation>799	4	2546</citation>
	<citation>945	4	2546</citation>
	<citation>949	4	2546</citation>
	<citation>989	4	2546</citation>
	<citation>1477	5	2546</citation>
	<citation>1491	5	2546</citation>
	<citation>2126	5	2546</citation>
	<citation>2546	5	2546</citation>
	<citation>2546	5	2546</citation>
	<citation>2546	5	2546</citation>
	<citation>404	5	2546</citation>
	<citation>3184	5	2546</citation>
	</citations>
	</document>
	<document id= '2545'>
	<title>A Theory of Discrete Patterns and Their Implementation in SNOBOL4</title>
	<abstract>The notion of a discrete pattern is formalized and certain properties deduced.  A pattern is  shown to be a generalization of a formal language.  Algorithms for implementing the kinds of patterns  in SNOBOL4 are given.  The general approach is to create, in-so-far as possible, a bottom-up parse from  a top-down specification.</abstract>
	<conference>CACM February, 1973</conference>
	<authors>
	<author>Gimpel, J. F.</author>
	</authors>
	<keywords>patterns, SNOBOL4, pattern theory, parsing, pattern matching, string processing, pattern implementation</keywords>
	<version>4.29 5.39</version>
	<location>CA730203 JB January 24, 1978  3:13 PM</location>
	<citations>
	<citation>1665	4	2545</citation>
	<citation>1768	4	2545</citation>
	<citation>1787	4	2545</citation>
	<citation>1824	4	2545</citation>
	<citation>1825	4	2545</citation>
	<citation>1836	4	2545</citation>
	<citation>1861	4	2545</citation>
	<citation>2015	4	2545</citation>
	<citation>2110	4	2545</citation>
	<citation>2127	4	2545</citation>
	<citation>2187	4	2545</citation>
	<citation>2317	4	2545</citation>
	<citation>2545	4	2545</citation>
	<citation>2545	4	2545</citation>
	<citation>2545	4	2545</citation>
	<citation>2698	4	2545</citation>
	<citation>2733	4	2545</citation>
	<citation>2746	4	2545</citation>
	<citation>1739	5	2545</citation>
	<citation>1781	5	2545</citation>
	<citation>2341	5	2545</citation>
	<citation>2545	5	2545</citation>
	<citation>2545	5	2545</citation>
	<citation>2545	5	2545</citation>
	<citation>2746	5	2545</citation>
	<citation>1665	6	2545</citation>
	<citation>1739	6	2545</citation>
	<citation>2139	6	2545</citation>
	<citation>2545	6	2545</citation>
	<citation>2786	6	2545</citation>
	</citations>
	</document>
	<document id= '2544'>
	<title>Automatic Error bounds for Simple Zeros of Analytic Functions</title>
	<abstract>The Cauchy-Ostrowski theorem on convergence of Newton iterates for an analytic function in  one variable is extended to include computational errors using complex interval arithmetic. Several numerical  examples are given for polynomials with real and complex roots and one example for the Bessel function  of the first kind.</abstract>
	<conference>CACM February, 1973</conference>
	<authors>
	<author>Rokne, J.</author>
	</authors>
	<keywords>real intervals, complex intervals, real interval arithmetic, complex interval arithmetic, Newton's  method, Cauchy-Ostrowski theorem, zeros of polynomials, zeros of Bessel functions</keywords>
	<version>5.11 5.12 5.15</version>
	<location>CA730204 JB January 24, 1978  2:51 PM</location>
	<citations>
	<citation>1524	4	2544</citation>
	<citation>1931	4	2544</citation>
	<citation>2214	4	2544</citation>
	<citation>2544	4	2544</citation>
	<citation>2544	4	2544</citation>
	<citation>2544	4	2544</citation>
	<citation>1524	5	2544</citation>
	<citation>311	5	2544</citation>
	<citation>2214	5	2544</citation>
	<citation>2544	5	2544</citation>
	<citation>2544	5	2544</citation>
	<citation>2544	5	2544</citation>
	</citations>
	</document>
	<document id= '2543'>
	<title>Reducing the Retrieval Time of Scatter Storage Techniques</title>
	<abstract>A new method for entering and retrieving information in a hash table is described.  The method  is intended to be efficient if most entries are looked up several times.  The expected number of probes  to look up an entry, predicted theoretically and verified by Monte Carlo experiments, is considerably  less than for other comparable methods if the table is nearly full.  An example of a possible Fortran  implementation is given.</abstract>
	<conference>CACM February, 1973</conference>
	<authors>
	<author>Brent, R. P.</author>
	</authors>
	<keywords>address calculation, content addressing, file searching, hash addressing, hash code, linear probing,  linear quotient method, scatter storage, searching, symbol table</keywords>
	<version>3.7 3.73 3.74 4.1 4.9</version>
	<location>CA730205 JB January 24, 1978  2:12 PM</location>
	<citations>
	<citation>1271	4	2543</citation>
	<citation>1676	4	2543</citation>
	<citation>1682	4	2543</citation>
	<citation>1728	4	2543</citation>
	<citation>1785	4	2543</citation>
	<citation>1860	4	2543</citation>
	<citation>1860	4	2543</citation>
	<citation>1973	4	2543</citation>
	<citation>1973	4	2543</citation>
	<citation>1973	4	2543</citation>
	<citation>1973	4	2543</citation>
	<citation>1992	4	2543</citation>
	<citation>1992	4	2543</citation>
	<citation>2018	4	2543</citation>
	<citation>2018	4	2543</citation>
	<citation>2018	4	2543</citation>
	<citation>2032	4	2543</citation>
	<citation>2033	4	2543</citation>
	<citation>2033	4	2543</citation>
	<citation>2107	4	2543</citation>
	<citation>2107	4	2543</citation>
	<citation>2109	4	2543</citation>
	<citation>2109	4	2543</citation>
	<citation>2138	4	2543</citation>
	<citation>2203	4	2543</citation>
	<citation>2203	4	2543</citation>
	<citation>2203	4	2543</citation>
	<citation>2203	4	2543</citation>
	<citation>2251	4	2543</citation>
	<citation>2251	4	2543</citation>
	<citation>2251	4	2543</citation>
	<citation>2251	4	2543</citation>
	<citation>2251	4	2543</citation>
	<citation>2359	4	2543</citation>
	<citation>2524	4	2543</citation>
	<citation>2530	4	2543</citation>
	<citation>2534	4	2543</citation>
	<citation>2537	4	2543</citation>
	<citation>2543	4	2543</citation>
	<citation>2543	4	2543</citation>
	<citation>2543	4	2543</citation>
	<citation>2543	4	2543</citation>
	<citation>2543	4	2543</citation>
	<citation>2543	4	2543</citation>
	<citation>2552	4	2543</citation>
	<citation>2552	4	2543</citation>
	<citation>2559	4	2543</citation>
	<citation>2559	4	2543</citation>
	<citation>2559	4	2543</citation>
	<citation>2573	4	2543</citation>
	<citation>2573	4	2543</citation>
	<citation>2770	4	2543</citation>
	<citation>2770	4	2543</citation>
	<citation>2770	4	2543</citation>
	<citation>2974	4	2543</citation>
	<citation>2991	4	2543</citation>
	<citation>2991	4	2543</citation>
	<citation>3053	4	2543</citation>
	<citation>3053	4	2543</citation>
	<citation>3053	4	2543</citation>
	<citation>3053	4	2543</citation>
	<citation>3083	4	2543</citation>
	<citation>3083	4	2543</citation>
	<citation>911	4	2543</citation>
	<citation>1785	5	2543</citation>
	<citation>1786	5	2543</citation>
	<citation>1973	5	2543</citation>
	<citation>332	5	2543</citation>
	<citation>2107	5	2543</citation>
	<citation>2109	5	2543</citation>
	<citation>2412	5	2543</citation>
	<citation>2543	5	2543</citation>
	<citation>2543	5	2543</citation>
	<citation>2543	5	2543</citation>
	<citation>3053	5	2543</citation>
	<citation>3083	5	2543</citation>
	<citation>1328	6	2543</citation>
	<citation>1329	6	2543</citation>
	<citation>1785	6	2543</citation>
	<citation>1973	6	2543</citation>
	<citation>1973	6	2543</citation>
	<citation>1992	6	2543</citation>
	<citation>2107	6	2543</citation>
	<citation>2107	6	2543</citation>
	<citation>2109	6	2543</citation>
	<citation>2412	6	2543</citation>
	<citation>2543	6	2543</citation>
	<citation>2543	6	2543</citation>
	<citation>2543	6	2543</citation>
	<citation>2552	6	2543</citation>
	<citation>2673	6	2543</citation>
	<citation>2707	6	2543</citation>
	<citation>2770	6	2543</citation>
	</citations>
	</document>
	<document id= '2542'>
	<title>A Software Design and Evaluation System</title>
	<abstract>A critical failure of current software system design and implementation methodology is that  the performance of a proposed design is not evaluated before it is actually implemented.  In this paper  the reasons for this failure are explored, and a new methodology which overcomes many of the difficulties  is proposed.  A system which integrates performance evaluation with design and implementation is described.   This system is based on a simple, high level language which is used to describe the evolving system  at all stages of its development.  The source language description is used as direct input to performance  analysis and simulation routines.  Using the performance information obtained from these routines as  feedback, the problems which adversely affect performance are detected early enough so that they can  be corrected without costly major reimplementation of the proposed system.</abstract>
	<conference>CACM February, 1973</conference>
	<authors>
	<author>Graham, R. M.</author>
	<author>Clancy, G. J. Jr.</author>
	<author>DeVaney, D. B.</author>
	</authors>
	<keywords>operating system development, language processing software evaluation, compilers, system programming,  supervisory systems, debugging, program maintenance, modeling, system integration, simulation</keywords>
	<version>4.0 4.12 4.22 4.30 4.42 4.43 8.1</version>
	<location>CA730206 JB January 24, 1978  2:07 PM</location>
	<citations>
	<citation>2542	5	2542</citation>
	<citation>2542	5	2542</citation>
	<citation>2542	5	2542</citation>
	</citations>
	</document>
	<document id= '2541'>
	<title>An Overview of the ISPL Computer System Design</title>
	<abstract>This paper explores the advantages of the concurrent design of the language, operating system,  and machine (via microcode) to create an interactive programming laboratory.  It describes the synergistic  effect that the freedom to move and alter features from one of these domains to another has had on the  design of this system (which has not been implemented).  This freedom simplified both incremental compilation  and the system's addressing structure, and centralized the communication mechanisms enabling the construction  of hierarchical subsystems.  It also suggested an important new concept for operating systems: separation  of the scheduling from the maintenance functions in resource allocation. This separation enables incorporation  of new scheduling algorithms (decision of what to do) without endangering the system integration (correctly  performing the scheduling decisions).</abstract>
	<conference>CACM February, 1973</conference>
	<authors>
	<author>Balzer, R. M.</author>
	</authors>
	<keywords>concurrent design, operating-system, scheduling, interprogram communication, incremental compilation,  virtual addressing, debugging, hierarchical subsystems</keywords>
	<version>4.0 4.13 4.22 4.30 4.32 4.41 4.42 6.20</version>
	<location>CA730207 JB January 24, 1978  1:59 PM</location>
	<citations>
	<citation>1323	4	2541</citation>
	<citation>1358	4	2541</citation>
	<citation>1380	4	2541</citation>
	<citation>1665	4	2541</citation>
	<citation>1781	4	2541</citation>
	<citation>1787	4	2541</citation>
	<citation>1989	4	2541</citation>
	<citation>2112	4	2541</citation>
	<citation>2193	4	2541</citation>
	<citation>2326	4	2541</citation>
	<citation>2477	4	2541</citation>
	<citation>2534	4	2541</citation>
	<citation>2541	4	2541</citation>
	<citation>2541	4	2541</citation>
	<citation>2594	4	2541</citation>
	<citation>2698	4	2541</citation>
	<citation>2733	4	2541</citation>
	<citation>2820	4	2541</citation>
	<citation>3004	4	2541</citation>
	<citation>3073	4	2541</citation>
	<citation>3155	4	2541</citation>
	<citation>2541	5	2541</citation>
	<citation>2541	5	2541</citation>
	<citation>2541	5	2541</citation>
	<citation>3186	5	2541</citation>
	<citation>799	5	2541</citation>
	</citations>
	</document>
	<document id= '2540'>
	<citations>
	<citation>2540	5	2540</citation>
	<citation>2540	5	2540</citation>
	<citation>2540	5	2540</citation>
	</citations>
	<title>Properties of the Working Set Model (Corrigendum)</title>
	<conference>CACM February, 1973</conference>
	<authors>
	<author>Denning, P. J.</author>
	<author>Schwartz, S. C.</author>
	</authors>
	<location>CA730208 JB January 24, 1978  1:28 PM</location>
	</document>
	<document id= '2539'>
	<title>Solution of the Transcendental Equation w*exp(w)=x [C5] (Algorithm A443)</title>
	<conference>CACM February, 1973</conference>
	<authors>
	<author>Fritsch, F. N.</author>
	<author>Shafer, R. E.</author>
	</authors>
	<keywords>transcendental function evaluation, solution of transcendental equation</keywords>
	<version>5.12 5.15</version>
	<location>CA730209 JB January 24, 1978  1:26 PM</location>
	<citations>
	<citation>2539	5	2539</citation>
	<citation>2539	5	2539</citation>
	<citation>2539	5	2539</citation>
	</citations>
	</document>
	<document id= '2538'>
	<title>A Computer Science Course Program for Small Colleges</title>
	<abstract>The ACM Subcommittee on Small College Programs of the Committee on Curriculum in Computer Science  (CCCS) was appointed in 1969 to consider the unique problems of small colleges and universities, and  to make recommendations regarding computer science programs at such schools.  This report, authorized  by both the subcommittee and (CCCS), supplies a set of recommendations for courses and necessary resources.   Implementation problems are discussed, specifically within the constraints of limited faculty and for  the purposes of satisfying a wide variety of objectives.  Detailed description of four courses are given;  suggestions are made for more advanced work; and an extensive library list is included.</abstract>
	<conference>CACM March, 1973</conference>
	<authors>
	<author>Austing, R. H.</author>
	<author>Engel, G. L.</author>
	</authors>
	<keywords>computer science education, course proposals, small colleges, programming course, social implications  course, computer organization course, file organization course, bibliographies</keywords>
	<version>1.52</version>
	<location>CA730301 JB January 24, 1978  1:22 PM</location>
	<citations>
	<citation>2538	5	2538</citation>
	<citation>2538	5	2538</citation>
	<citation>2538	5	2538</citation>
	<citation>2899	5	2538</citation>
	<citation>3003	5	2538</citation>
	<citation>1659	6	2538</citation>
	<citation>1678	6	2538</citation>
	<citation>1771	6	2538</citation>
	<citation>1927	6	2538</citation>
	<citation>1945	6	2538</citation>
	<citation>2097	6	2538</citation>
	<citation>2147	6	2538</citation>
	<citation>2163	6	2538</citation>
	<citation>2187	6	2538</citation>
	<citation>2329	6	2538</citation>
	<citation>2345	6	2538</citation>
	<citation>2367	6	2538</citation>
	<citation>2407	6	2538</citation>
	<citation>2478	6	2538</citation>
	<citation>2479	6	2538</citation>
	<citation>2480	6	2538</citation>
	<citation>2538	6	2538</citation>
	<citation>2538	6	2538</citation>
	</citations>
	</document>
	<document id= '2537'>
	<title>Common Phrases and Minimum-Space Text Storage</title>
	<abstract>A method for saving storage space for text strings, such as compiler diagnostic messages, is  described.  The method relies on hand selection of a set of text strings which are common to one or more  messages.  These phrases are then stored only once.  The storage technique gives rise to a mathematical  optimization problem: determine how each message should use the available phrases to minimize its storage  requirement.  This problem is nontrivial when phrases which overlap exist.  However, a dynamic programming  algorithm is presented which solves the problem in time which grows linearly with the number of characters  in the text.  Algorithm 444 applies to this paper.</abstract>
	<conference>CACM March, 1973</conference>
	<authors>
	<author>Wagner, R. A.</author>
	</authors>
	<keywords>diagnostic messages, error messages, common phrases, minimum space, text storage, optimization,  dynamic programming</keywords>
	<version>3.73 4.10 5.41</version>
	<location>CA730302 JB January 24, 1978  1:12 PM</location>
	<citations>
	<citation>1973	4	2537</citation>
	<citation>1992	4	2537</citation>
	<citation>2138	4	2537</citation>
	<citation>2203	4	2537</citation>
	<citation>2251	4	2537</citation>
	<citation>2530	4	2537</citation>
	<citation>2537	4	2537</citation>
	<citation>2537	4	2537</citation>
	<citation>2543	4	2537</citation>
	<citation>2559	4	2537</citation>
	<citation>2573	4	2537</citation>
	<citation>2991	4	2537</citation>
	<citation>3053	4	2537</citation>
	<citation>3083	4	2537</citation>
	<citation>2107	5	2537</citation>
	<citation>2530	5	2537</citation>
	<citation>2537	5	2537</citation>
	<citation>2537	5	2537</citation>
	<citation>2537	5	2537</citation>
	<citation>2623	5	2537</citation>
	<citation>2819	5	2537</citation>
	<citation>2107	6	2537</citation>
	<citation>2501	6	2537</citation>
	<citation>2537	6	2537</citation>
	<citation>2537	6	2537</citation>
	<citation>2537	6	2537</citation>
	</citations>
	</document>
	<document id= '2536'>
	<title>Telecommunications Using a Front-End Minicomputer</title>
	<abstract>The use of a front-end minicomputer to provide varied remote terminal access to a large scale  computer is considered.  The problems of embedding telecommunications I/O within an operating system  are discussed, and it is shown how the decentralization of intelligence acquired by front-end processing  vastly simplifies the problem.  A specific implementation is discussed with emphasis on the main processor-minicomputer  link, the hardware-software implementation, the effect of the main processor operating system, and an  assessment of the advantages over a hard wired line controller.</abstract>
	<conference>CACM March, 1973</conference>
	<authors>
	<author>Feinroth, Y.</author>
	<author>Franceschini, E.</author>
	<author>Goldstein, M.</author>
	</authors>
	<keywords>telecommunications, minicomputer, front-end processor, remote job entry, remote terminals</keywords>
	<version>3.81 4.32 4.41</version>
	<location>CA730303 JB January 24, 1978  11:23 AM</location>
	<citations>
	<citation>1657	4	2536</citation>
	<citation>2080	4	2536</citation>
	<citation>2357	4	2536</citation>
	<citation>2536	4	2536</citation>
	<citation>1523	5	2536</citation>
	<citation>2536	5	2536</citation>
	<citation>2536	5	2536</citation>
	<citation>2536	5	2536</citation>
	<citation>2919	5	2536</citation>
	<citation>2536	6	2536</citation>
	<citation>2593	6	2536</citation>
	<citation>2629	6	2536</citation>
	</citations>
	</document>
	<document id= '2535'>
	<title>The Effects of Multiplexing on a Computer-Communications System</title>
	<abstract>A study is made of the way in which asynchronous time division multiplexing changes the stochastic  nature of the arrival process from a user to the computer and, consequently, affects the performance  of a time-shared computer-communications system.  It is concluded that while, for certain values of system  parameters, there is noticeable improvement in the performance of the computer (model), in the sense  that time-shared scheduling delays are reduced, these improvements are offset by the transmission delays  imposed by multiplexing so that there may be little or no change in the computer-communications system  performance.  Analytical and simulation results are based on the model of the computer-communications  system being an M/D/1 queue (the multiplexor) in tandem with a single exponential server (the computer).   Analytical results include a general description of the output process of an M/D/1 queue and the conditions  under which this output process is approximately Poisson.</abstract>
	<conference>CACM March, 1973</conference>
	<authors>
	<author>Pack, C. D.</author>
	</authors>
	<keywords>computer communications, time-sharing, multiplexing, scheduling algorithms, operating systems</keywords>
	<version>3.80 3.81 6.20</version>
	<location>CA730304 JB January 24, 1978  11:13 AM</location>
	<citations>
	<citation>2535	5	2535</citation>
	<citation>2535	5	2535</citation>
	<citation>2535	5	2535</citation>
	</citations>
	</document>
	<document id= '2534'>
	<title>Design and Implementation of a Diagnostic Compiler for PL/I</title>
	<abstract>PL/C is a compiler for a dialect for PL/I.  The design objective was to provide a maximum degree  of diagnostic assistance in a batch processing environment.  For the most part this assistance is implicit  and is provided automatically by the compiler. The most remarkable characteristic of PL/C is its perseverance-it  completes translation of every program submitted and continues execution until a user-established error  limit is reached. This requires that the compiler repair errors encountered during both translation  and execution, and the design of PL/C is dominated by this consideration.  PL/C also introduces several  explicit user-controlled facilities for program testing.  To accommodate these extensions to PL/I without  abandoning compatibility with IBM compiler PL/C permits "pseudo comments"-constructions whose contents  can optionally be considered either source test or comment.  In spite of the diagnostic effort PL/C is  a fast and efficient processor.  It effectively demonstrates that compilers can provide better diagnostic  assistance than is customarily offered, even when a sophisticated source language is employed, and that  this assistance need not be prohibitively costly.</abstract>
	<conference>CACM March, 1973</conference>
	<authors>
	<author>Conway, R. W.</author>
	<author>Wilcox, T. R.</author>
	</authors>
	<keywords>compilers, debugging, PL/I, programming languages</keywords>
	<version>1.5 4.12 4.42</version>
	<location>CA730305 JB January 24, 1978  10:45 AM</location>
	<citations>
	<citation>1179	4	2534</citation>
	<citation>1288	4	2534</citation>
	<citation>1323	4	2534</citation>
	<citation>1358	4	2534</citation>
	<citation>1380	4	2534</citation>
	<citation>1544	4	2534</citation>
	<citation>1646	4	2534</citation>
	<citation>1665	4	2534</citation>
	<citation>1781	4	2534</citation>
	<citation>1781	4	2534</citation>
	<citation>1787	4	2534</citation>
	<citation>1989	4	2534</citation>
	<citation>2111	4	2534</citation>
	<citation>2112	4	2534</citation>
	<citation>2182	4	2534</citation>
	<citation>2251	4	2534</citation>
	<citation>2497	4	2534</citation>
	<citation>2534	4	2534</citation>
	<citation>2534	4	2534</citation>
	<citation>2534	4	2534</citation>
	<citation>2534	4	2534</citation>
	<citation>2534	4	2534</citation>
	<citation>2534	4	2534</citation>
	<citation>2534	4	2534</citation>
	<citation>2541	4	2534</citation>
	<citation>2543	4	2534</citation>
	<citation>2556	4	2534</citation>
	<citation>2556	4	2534</citation>
	<citation>2559	4	2534</citation>
	<citation>2650	4	2534</citation>
	<citation>2650	4	2534</citation>
	<citation>2698	4	2534</citation>
	<citation>2708	4	2534</citation>
	<citation>2708	4	2534</citation>
	<citation>2733	4	2534</citation>
	<citation>2770	4	2534</citation>
	<citation>2820	4	2534</citation>
	<citation>2887	4	2534</citation>
	<citation>3053	4	2534</citation>
	<citation>3073	4	2534</citation>
	<citation>3083	4	2534</citation>
	<citation>3155	4	2534</citation>
	<citation>1787	5	2534</citation>
	<citation>1959	5	2534</citation>
	<citation>1973	5	2534</citation>
	<citation>2111	5	2534</citation>
	<citation>2182	5	2534</citation>
	<citation>2534	5	2534</citation>
	<citation>2534	5	2534</citation>
	<citation>2534	5	2534</citation>
	<citation>2708	5	2534</citation>
	<citation>2820	5	2534</citation>
	<citation>2971	5	2534</citation>
	<citation>3045	5	2534</citation>
	<citation>799	5	2534</citation>
	<citation>830	5	2534</citation>
	<citation>1477	6	2534</citation>
	<citation>1477	6	2534</citation>
	<citation>1491	6	2534</citation>
	<citation>1491	6	2534</citation>
	<citation>1787	6	2534</citation>
	<citation>1835	6	2534</citation>
	<citation>1974	6	2534</citation>
	<citation>2111	6	2534</citation>
	<citation>2534	6	2534</citation>
	<citation>2534	6	2534</citation>
	<citation>2534	6	2534</citation>
	<citation>2534	6	2534</citation>
	<citation>2556	6	2534</citation>
	<citation>680	6	2534</citation>
	<citation>799	6	2534</citation>
	</citations>
	</document>
	<document id= '2533'>
	<title>Gray Code and the +- Sign Sequence when +-f (+-f(+-f(...+-f(x)...))) Is Ordered</title>
	<conference>CACM March, 1973</conference>
	<authors>
	<author>Salzer, H. E.</author>
	</authors>
	<keywords>Gray code, sign sequences, ordering, positive monotonic functions, binary system, Galois sum</keywords>
	<version>5.10</version>
	<location>CA730306 JB January 24, 1978  10:35 AM</location>
	<citations>
	<citation>2533	4	2533</citation>
	<citation>2394	5	2533</citation>
	<citation>2533	5	2533</citation>
	<citation>2533	5	2533</citation>
	<citation>2533	5	2533</citation>
	</citations>
	</document>
	<document id= '2532'>
	<title>On Harrison's Substring Testing Technique</title>
	<conference>CACM March, 1973</conference>
	<authors>
	<author>Bookstein, A.</author>
	</authors>
	<keywords>string, substring, hashing, information storage and retrieval</keywords>
	<version>3.74 5.30 5.5</version>
	<location>CA730307 JB January 24, 1978  10:30 AM</location>
	<citations>
	<citation>2532	4	2532</citation>
	<citation>2631	4	2532</citation>
	<citation>2746	4	2532</citation>
	<citation>3001	4	2532</citation>
	<citation>2139	5	2532</citation>
	<citation>2532	5	2532</citation>
	<citation>2532	5	2532</citation>
	<citation>2532	5	2532</citation>
	<citation>2631	5	2532</citation>
	<citation>2139	6	2532</citation>
	<citation>2532	6	2532</citation>
	</citations>
	</document>
	<document id= '2531'>
	<title>Graduate Education: The Ph.D. Glut</title>
	<conference>CACM March, 1973</conference>
	<authors>
	<author>Payne, W. H.</author>
	</authors>
	<keywords>graduate education, Ph.D. production, accreditation</keywords>
	<version>1.5 2.2 2.3</version>
	<location>CA730308 JB January 24, 1978  10:28 AM</location>
	<citations>
	<citation>2531	5	2531</citation>
	<citation>2531	5	2531</citation>
	<citation>2531	5	2531</citation>
	<citation>2662	5	2531</citation>
	<citation>2531	6	2531</citation>
	</citations>
	</document>
	<document id= '2530'>
	<title>An Algorithm for Extracting Phrases in a Space-Optimal Fashion [Z] (Algorithm A444)</title>
	<conference>CACM March, 1973</conference>
	<authors>
	<author>Wagner, R. A.</author>
	</authors>
	<keywords>information retrieval, coding, text compression</keywords>
	<version>3.70 5.6</version>
	<location>CA730309 JB January 24, 1978  10:26 AM</location>
	<citations>
	<citation>1973	4	2530</citation>
	<citation>1992	4	2530</citation>
	<citation>2138	4	2530</citation>
	<citation>2203	4	2530</citation>
	<citation>2251	4	2530</citation>
	<citation>2530	4	2530</citation>
	<citation>2530	4	2530</citation>
	<citation>2537	4	2530</citation>
	<citation>2543	4	2530</citation>
	<citation>2559	4	2530</citation>
	<citation>2573	4	2530</citation>
	<citation>2623	4	2530</citation>
	<citation>2819	4	2530</citation>
	<citation>2991	4	2530</citation>
	<citation>3053	4	2530</citation>
	<citation>3083	4	2530</citation>
	<citation>2107	5	2530</citation>
	<citation>2530	5	2530</citation>
	<citation>2530	5	2530</citation>
	<citation>2530	5	2530</citation>
	<citation>2537	5	2530</citation>
	<citation>2107	6	2530</citation>
	<citation>2530	6	2530</citation>
	</citations>
	</document>
	<document id= '2529'>
	<title>Binary Pattern Reconstruction from Projections [Z] (Algorithm A445)</title>
	<conference>CACM March, 1973</conference>
	<authors>
	<author>Chang, S.</author>
	</authors>
	<keywords>pattern reconstruction, image reconstruction, data compression, picture processing</keywords>
	<version>3.63 5.30</version>
	<location>CA730310 JB January 24, 1978  10:25 AM</location>
	<citations>
	<citation>2142	4	2529</citation>
	<citation>2529	4	2529</citation>
	<citation>2231	5	2529</citation>
	<citation>2529	5	2529</citation>
	<citation>2529	5	2529</citation>
	<citation>2529	5	2529</citation>
	</citations>
	</document>
	<document id= '2528'>
	<title>Binary Pattern Reconstruction from Projections [Z] (Algorithm R445)</title>
	<conference>CACM March, 1973</conference>
	<authors>
	<author>Lau, J.</author>
	</authors>
	<keywords>pattern reconstruction, image reconstruction, data compression, picture processing</keywords>
	<version>3.63 5.30</version>
	<location>CA730311 JB January 24, 1978  10:22 AM</location>
	<citations>
	<citation>2528	5	2528</citation>
	<citation>2528	5	2528</citation>
	<citation>2528	5	2528</citation>
	</citations>
	</document>
	<document id= '2527'>
	<title>Implementation of High Level Language Machine</title>
	<abstract>Computing machines which directly execute the statements of a high level language have been  proposed in the past.  This report describes the actual implementation of such a machine: it is a computer  whose "machine language" is APL.  The machine is fully operational and correctly executes almost all  of the APL operations on scalars, vectors, and arrays.  The machine automatically allocates memory, executes  statements, calls functions, converts numbers from one type to another, checks subscripts, and automatically  detects many types of programmer errors.</abstract>
	<conference>CACM April, 1973</conference>
	<authors>
	<author>Hassitt, A.</author>
	<author>Lageschulte, J. W.</author>
	<author>Lyon, L. E.</author>
	</authors>
	<keywords>computer architecture, high level language machine, emulators, microprogramming, interpreters,  execution speed, APL</keywords>
	<version>4.1 6.2</version>
	<location>CA730401 JB January 24, 1978  10:21 AM</location>
	<citations>
	<citation>2202	4	2527</citation>
	<citation>2527	4	2527</citation>
	<citation>1542	5	2527</citation>
	<citation>2527	5	2527</citation>
	<citation>2527	5	2527</citation>
	<citation>2527	5	2527</citation>
	</citations>
	</document>
	<document id= '2526'>
	<title>Asymmetric Memory Hierarchies</title>
	<abstract>A study is presented of some of the system implications of memory hierarchies in which the  backing or secondary store has a very small read time, relative of both the time required for writing  and to the read time of conventional backing storage devices. Several analytic models are introduced,  and it is shown that such hierarchies may operate in ways which differ from those of more conventional  hierarchies.  In particular, it is shown that it may not be necessary to multiprogram in such a situation.   In the past, backing storage devices have been roughly symmetric with respect to their read and write  times.  This situation may not continue, as several devices are currently under development which may  have a very small read-time/write-time ratio.  This study places particular emphasis on one such system-the  RCA read/write holographic optical memory.</abstract>
	<conference>CACM April, 1973</conference>
	<authors>
	<author>Williams, J.G.</author>
	</authors>
	<keywords>asymmetric memory hierarchy, demand paging, holographic optical memory, memory device, memory hierarchy,  paging, storage device, storage hierarchy, virtual memory</keywords>
	<version>4.3 4.32 5.2 6.2 6.34</version>
	<location>CA730402 JB January 24, 1978  10:15 AM</location>
	<citations>
	<citation>1892	4	2526</citation>
	<citation>1924	4	2526</citation>
	<citation>2095	4	2526</citation>
	<citation>2218	4	2526</citation>
	<citation>2297	4	2526</citation>
	<citation>2374	4	2526</citation>
	<citation>2526	4	2526</citation>
	<citation>2667	4	2526</citation>
	<citation>2668	4	2526</citation>
	<citation>2862	4	2526</citation>
	<citation>2863	4	2526</citation>
	<citation>1728	5	2526</citation>
	<citation>2526	5	2526</citation>
	<citation>2526	5	2526</citation>
	<citation>2526	5	2526</citation>
	</citations>
	</document>
	<document id= '2525'>
	<title>A Statistical Study of the Accuracy of Floating Point Number Systems</title>
	<abstract>This paper presents the statistical results of tests of the accuracy of certain arithmetic  systems in evaluating sums, products and inner products, and analytic error estimates for some of the  computations.  The arithmetic systems studied are 6-digit hexadecimal and 22-digit binary floating point  number representations combined with the usual chop and round modes of arithmetic with various numbers  of guard digits, and with a modified round mode with guard digits.  In a certain sense, arithmetic systems  differing only in their use of binary or hexadecimal number representations are shown to be approximately  statistically equivalent inaccuracy.  Further, the usual round mode with guard digits is shown to be  statistically superior in accuracy to the usual chop mode in all cases save one.  The modified round  mode is found to be superior to the chop mode in all cases.</abstract>
	<conference>CACM April, 1973</conference>
	<authors>
	<author>Kuki, H.</author>
	<author>Cody, W. J.</author>
	</authors>
	<keywords>error analysis, floating point arithmetic, rounding, guard digits, number representation</keywords>
	<version>5.11 5.5 6.32</version>
	<location>CA730403 JB January 24, 1978  10:04 AM</location>
	<citations>
	<citation>2525	4	2525</citation>
	<citation>1474	5	2525</citation>
	<citation>2525	5	2525</citation>
	<citation>2525	5	2525</citation>
	<citation>2525	5	2525</citation>
	</citations>
	</document>
	<document id= '2524'>
	<title>Some Approaches to Best-Match File Searching</title>
	<abstract>The problem of searching the set of keys in a file to find a key which is closest to a given  query key is discussed.  After "closest," in terms of a metric on the the key space, is suitably defined,  three file structures are presented together with their corresponding search algorithms, which are intended  to reduce the number of comparisons required to achieve the desired result. These methods are derived  using certain inequalities satisfied by metrics and by graph-theoretic concepts.  Some empirical results  are presented which compare the efficiency of the methods.</abstract>
	<conference>CACM April, 1973</conference>
	<authors>
	<author>Burkhard, W. A.</author>
	<author>Keller, R. M.</author>
	</authors>
	<keywords>matching, file structuring, file searching, heuristics, best match</keywords>
	<version>3.73 3.79 4.9</version>
	<location>CA730404 JB January 24, 1978  9:54 AM</location>
	<citations>
	<citation>1676	4	2524</citation>
	<citation>1682	4	2524</citation>
	<citation>1728	4	2524</citation>
	<citation>1860	4	2524</citation>
	<citation>1973	4	2524</citation>
	<citation>2018	4	2524</citation>
	<citation>2032	4	2524</citation>
	<citation>2033	4	2524</citation>
	<citation>2107	4	2524</citation>
	<citation>2109	4	2524</citation>
	<citation>2203	4	2524</citation>
	<citation>2251	4	2524</citation>
	<citation>2359	4	2524</citation>
	<citation>2524	4	2524</citation>
	<citation>2543	4	2524</citation>
	<citation>2552	4	2524</citation>
	<citation>2559	4	2524</citation>
	<citation>2991	4	2524</citation>
	<citation>3053	4	2524</citation>
	<citation>1785	5	2524</citation>
	<citation>2524	5	2524</citation>
	<citation>2524	5	2524</citation>
	<citation>2524	5	2524</citation>
	<citation>2575	5	2524</citation>
	<citation>2966	5	2524</citation>
	<citation>3134	5	2524</citation>
	<citation>1976	6	2524</citation>
	<citation>2160	6	2524</citation>
	<citation>2524	6	2524</citation>
	<citation>2524	6	2524</citation>
	<citation>2524	6	2524</citation>
	<citation>2990	6	2524</citation>
	</citations>
	</document>
	<document id= '2523'>
	<title>A Region Coloring Technique for Scene Analysis</title>
	<abstract>A method of converting a picture into a "cartoon" or "map" whose regions correspond to differently  textured regions is described.  Texture edges in the picture are detected, and solid regions surrounded  by these (usually broken) edges are "colored in" using a propagation process.  The resulting map is cleaned  by comparing the region colors with the textures of the corresponding regions in the picture, and also  by merging some regions with others according to criteria based on topology and size.  The method has  been applied to the construction of cloud cover maps from cloud cover pictures obtained by satellites.</abstract>
	<conference>CACM April, 1973</conference>
	<authors>
	<author>III, J. P.</author>
	<author>Rosenfeld, A.</author>
	</authors>
	<keywords>picture processing, scene analysis, edge detection</keywords>
	<version>3.63 8.2</version>
	<location>CA730405 JB January 24, 1978  9:48 AM</location>
	<citations>
	<citation>2523	5	2523</citation>
	<citation>2523	5	2523</citation>
	<citation>2523	5	2523</citation>
	<citation>2980	5	2523</citation>
	<citation>2523	6	2523</citation>
	</citations>
	</document>
	<document id= '2522'>
	<title>The Design, Implementation, and Evaluation of a Working Set Dispatcher</title>
	<abstract>The behavior of a computer system is largely dependent upon the algorithms employed to allocate  the system resources to the processes competing for them.  Recent research in time-sharing paging systems  has developed the working set model for program behavior, and are source allocation strategy based on  this model has been proposed.  Two implementations along these principles have been reported, but it  seems that in neither case have further results been announced.  This report discusses the design and  implementation of a dispatcher based on the working set principle, presents data to permit analysis of  its behavior, and indicates future directions of research on methods of controlling a computer system.</abstract>
	<conference>CACM April, 1973</conference>
	<authors>
	<author>Rosell, J.</author>
	<author>Dupuy, J. P.</author>
	</authors>
	<keywords>working set, dispatcher, scheduler, time-sharing systems, resource allocation, software evaluation,  operating systems, supervisory systems</keywords>
	<version>4.31 4.32</version>
	<location>CA730406 JB January 24, 1978  9:36 AM</location>
	<citations>
	<citation>2522	5	2522</citation>
	<citation>2522	5	2522</citation>
	<citation>2522	5	2522</citation>
	<citation>2928	5	2522</citation>
	<citation>1751	6	2522</citation>
	<citation>2277	6	2522</citation>
	<citation>2380	6	2522</citation>
	<citation>2522	6	2522</citation>
	<citation>2569	6	2522</citation>
	</citations>
	</document>
	<document id= '2521'>
	<title>Ten Subroutines for the Manipulation of Chebyshev Series [C1] (Algorithm A446)</title>
	<conference>CACM April, 1973</conference>
	<authors>
	<author>Broucke, R.</author>
	</authors>
	<keywords>Chebyshev series, differentiation, integration, curve fitting,approximations, negative powers</keywords>
	<version>5.12 5.13 5.16</version>
	<location>CA730407 JB January 24, 1978  9:29 AM</location>
	<citations>
	<citation>2028	4	2521</citation>
	<citation>2521	4	2521</citation>
	<citation>2521	4	2521</citation>
	<citation>2521	4	2521</citation>
	<citation>3099	4	2521</citation>
	<citation>2028	5	2521</citation>
	<citation>2031	5	2521</citation>
	<citation>2521	5	2521</citation>
	<citation>2521	5	2521</citation>
	<citation>2521	5	2521</citation>
	<citation>2762	5	2521</citation>
	<citation>3135	5	2521</citation>
	<citation>2521	6	2521</citation>
	</citations>
	</document>
	<document id= '2520'>
	<title>Greatest Common Divisor of n Integers and Multipliers (Algorithm C386)</title>
	<conference>CACM April, 1973</conference>
	<authors>
	<author>Ragland, L. C.</author>
	<author>Good, D. I.</author>
	</authors>
	<keywords>proof of algorithms, greatest common divisor, Euclidean algorithm, inductive assertion method</keywords>
	<version>3.15 4.42 5.10 5.24</version>
	<location>CA730408 JB January 24, 1978  9:27 AM</location>
	<citations>
	<citation>2520	5	2520</citation>
	<citation>2520	5	2520</citation>
	<citation>2520	5	2520</citation>
	</citations>
	</document>
	<document id= '2519'>
	<title>On the Problem of Communicating Complex Information</title>
	<abstract>The nature of the difficulty involved in communicating mathematical results between scientists  using a computer based information retrieval system is examined.  The problem is analyzed in terms of  psychological and information-processing processes, and what turns out to be a vicious circle of effects  is described.  These include ways of augmenting written natural language by various notational and linguistic  devices, the exhibition of the structure inherent in the information we are communicating, and a sophisticated  interactive system controlled by computer.</abstract>
	<conference>CACM May, 1973</conference>
	<authors>
	<author>Pager, D.</author>
	</authors>
	<keywords>complex information, information, communication, mathematics, proof, interactive system, language</keywords>
	<version>1.0 1.1 1.50 1.52 1.59 2.42 3.32 3.51 3.62 3.70 3.81</version>
	<location>CA730501 JB January 24, 1978  9:25 AM</location>
	<citations>
	<citation>2519	4	2519</citation>
	<citation>2390	5	2519</citation>
	<citation>2519	5	2519</citation>
	<citation>2519	5	2519</citation>
	<citation>2519	5	2519</citation>
	</citations>
	</document>
	<document id= '2518'>
	<title>Programming by Questionnaire: An Effective Way To Use Decision Tables</title>
	<abstract>Programming by questionnaire combines aspects of decision table programming and general purpose  programming by using decision tables to construct an application program through the selection of certain  source statements from a predefined file.  It is proposed that programming by questionnairies a useful  compromise between general and special purpose programming for a significant class of large scale problems.   The elements of the approach are discussed an existing application is described.</abstract>
	<conference>CACM May, 1973</conference>
	<authors>
	<author>Low, D. W.</author>
	</authors>
	<keywords>customizing, modeling, applications development, programmer productivity, simulator generation,  automatic program generation, no reprogramming</keywords>
	<version>4.20 4.22 4.29</version>
	<location>CA730502 JB January 24, 1978  9:03 AM</location>
	<citations>
	<citation>2053	4	2518</citation>
	<citation>2220	4	2518</citation>
	<citation>2492	4	2518</citation>
	<citation>2517	4	2518</citation>
	<citation>2518	4	2518</citation>
	<citation>2518	4	2518</citation>
	<citation>2598	4	2518</citation>
	<citation>2616	4	2518</citation>
	<citation>2616	4	2518</citation>
	<citation>2726	4	2518</citation>
	<citation>3034	4	2518</citation>
	<citation>1548	5	2518</citation>
	<citation>1684	5	2518</citation>
	<citation>2518	5	2518</citation>
	<citation>2518	5	2518</citation>
	<citation>2518	5	2518</citation>
	</citations>
	</document>
	<document id= '2517'>
	<title>Some Comments on the Use of Ambiguous Decision Tables and Their Conversion to Computer Programs</title>
	<abstract>This paper comments upon recently published work on decision table translation using methods  similar to the rule-mask technique.  The applicability of these methods under various possible conventions  on overall table meaning is discussed, and it is argued that there is a place both for the multi-rule  and the single-rule (or action set) convention in decision tale usage.</abstract>
	<conference>CACM May, 1973</conference>
	<authors>
	<author>King, P. J. H.</author>
	<author>Johnson, R. G.</author>
	</authors>
	<keywords>decision tables, systems analysis, programming</keywords>
	<version>3.50 3.59 4.19 4.29 4.49</version>
	<location>CA730503 JB January 24, 1978  8:56 AM</location>
	<citations>
	<citation>2053	4	2517</citation>
	<citation>2221	4	2517</citation>
	<citation>2273	4	2517</citation>
	<citation>2453	4	2517</citation>
	<citation>2517	4	2517</citation>
	<citation>2517	4	2517</citation>
	<citation>2517	4	2517</citation>
	<citation>2518	4	2517</citation>
	<citation>2616	4	2517</citation>
	<citation>2726	4	2517</citation>
	<citation>2856	4	2517</citation>
	<citation>3034	4	2517</citation>
	<citation>3034	4	2517</citation>
	<citation>1684	5	2517</citation>
	<citation>2053	5	2517</citation>
	<citation>2221	5	2517</citation>
	<citation>2517	5	2517</citation>
	<citation>2517	5	2517</citation>
	<citation>2517	5	2517</citation>
	<citation>2616	5	2517</citation>
	<citation>3034	5	2517</citation>
	<citation>931	6	2517</citation>
	<citation>1548	6	2517</citation>
	<citation>1684	6	2517</citation>
	<citation>1684	6	2517</citation>
	<citation>2053	6	2517</citation>
	<citation>2517	6	2517</citation>
	<citation>2517	6	2517</citation>
	</citations>
	</document>
	<document id= '2516'>
	<title>Hierarchical Storage in Information Retrieval</title>
	<abstract>A probabilistic analysis is employed to determine the effect of hierarchical storage organizations  on information retrieval operations.  The data storage hardware is assumed to consist on n-levels of  linearly connected memory hardware with increasing data access times and increasing data storage capabilities.   A system might, for example, consist of fast semiconductor memory, computer core memory, extended core  storage, disk memory, and data cells.  Equations are derived to predict the effect of such a system on  data access times using sequential files, random access files, and structured files employing multiple-hierarchical  linked lists.</abstract>
	<conference>CACM May, 1973</conference>
	<authors>
	<author>Salasin, J.</author>
	</authors>
	<keywords>information retrieval, hierarchical storage</keywords>
	<version>3.70 3.72 3.73 3.74 3.79 3.90 6.20 6.34</version>
	<location>CA730504 JB January 24, 1978  8:48 AM</location>
	<citations>
	<citation>2516	5	2516</citation>
	<citation>2516	5	2516</citation>
	<citation>2516	5	2516</citation>
	</citations>
	</document>
	<document id= '2515'>
	<title>Minimal Event-Node Network of Project Precedence Relations</title>
	<abstract>A procedure for constructing a minimal event-node network to represent a set of precedence  relations without parallel activities is presented.  A minimal event-node network is an event-node network  in which both the number of nodes and the number of arcs are the minima to preserve the given precedence  relations Counterexamples are given to show that the algorithm presented by A. C. Fisher, J. S. Liebman,  and G. L. Nemhauser (1968) produces event-node networks which are not minimal.  Since our procedure includes  the set-covering problem, the time required may grow exponentially with the number of given activities.</abstract>
	<conference>CACM May, 1973</conference>
	<authors>
	<author>Corneil, D. G.</author>
	<author>Gotlieb, C. C.</author>
	<author>Lee, Y. M.</author>
	</authors>
	<keywords>network, project, event-node network, activity-node network, minimal event-node network, dummy  activity, project precedence relations</keywords>
	<version>3.57 5.32 8.3</version>
	<location>CA730505 JB January 24, 1978  8:42 AM</location>
	<citations>
	<citation>2515	4	2515</citation>
	<citation>1723	5	2515</citation>
	<citation>2515	5	2515</citation>
	<citation>2515	5	2515</citation>
	<citation>2515	5	2515</citation>
	</citations>
	</document>
	<document id= '2514'>
	<title>An Array Grammar Programming System</title>
	<abstract>A package of Fortran programs has been developed that permits a user to interactively design  and test array grammars.  The user can control the rule selection procedure in a derivation or parse,  using weighted programming matrices; he also has a choice of instance selection schemes (raster,random,  parallel).  Examples are given involving array languages consisting of simple geometrical patterns, as  well as a language of "neuron pictures."</abstract>
	<conference>CACM May, 1973</conference>
	<authors>
	<author>Mercer, A.</author>
	<author>Rosenfeld, A.</author>
	</authors>
	<keywords>picture grammars, array grammars</keywords>
	<version>3.63 5.23 8.2</version>
	<location>CA730506 JB January 23, 1978  4:49 PM</location>
	<citations>
	<citation>2514	5	2514</citation>
	<citation>2514	5	2514</citation>
	<citation>2514	5	2514</citation>
	</citations>
	</document>
	<document id= '2513'>
	<title>A Nonrecursive List Moving Algorithm</title>
	<abstract>An efficient, nonrecursive algorithm is given for moving any LISP-type list.  In particular,  the algorithm requires no storage other than the new nodes into which the list is to be moved, and no  additional bits per node for marking; the algorithm runs in time proportional to the number of nodes  in the list.  The original list structure is destroyed as it is moved.</abstract>
	<conference>CACM May, 1973</conference>
	<authors>
	<author>Reingold, E. M.</author>
	</authors>
	<keywords>list moving, list copying, list traversal, garbage collection LISP</keywords>
	<version>4.19 4.49</version>
	<location>CA730507 JB January 23, 1978  4:45 PM</location>
	<citations>
	<citation>1869	4	2513</citation>
	<citation>2156	4	2513</citation>
	<citation>2361	4	2513</citation>
	<citation>2513	4	2513</citation>
	<citation>2513	4	2513</citation>
	<citation>2665	4	2513</citation>
	<citation>2723	4	2513</citation>
	<citation>2736	4	2513</citation>
	<citation>2855	4	2513</citation>
	<citation>2855	4	2513</citation>
	<citation>3074	4	2513</citation>
	<citation>3106	4	2513</citation>
	<citation>3106	4	2513</citation>
	<citation>3112	4	2513</citation>
	<citation>1549	5	2513</citation>
	<citation>1972	5	2513</citation>
	<citation>2513	5	2513</citation>
	<citation>2513	5	2513</citation>
	<citation>2513	5	2513</citation>
	<citation>2855	5	2513</citation>
	<citation>1549	6	2513</citation>
	<citation>1826	6	2513</citation>
	<citation>210	6	2513</citation>
	<citation>1972	6	2513</citation>
	<citation>2513	6	2513</citation>
	<citation>2766	6	2513</citation>
	<citation>2833	6	2513</citation>
	<citation>2998	6	2513</citation>
	</citations>
	</document>
	<document id= '2512'>
	<title>Coulomb Wave Functions (Algorithm R300)</title>
	<conference>CACM May, 1973</conference>
	<authors>
	<author>Vos, H.</author>
	</authors>
	<keywords>Coulomb wave functions, wave functions, special functions, function evaluation</keywords>
	<version>5.12</version>
	<location>CA730508 JB January 23, 1978  4:41 PM</location>
	<citations>
	<citation>2512	5	2512</citation>
	<citation>2512	5	2512</citation>
	<citation>2512	5	2512</citation>
	</citations>
	</document>
	<document id= '2511'>
	<citations>
	<citation>2511	5	2511</citation>
	<citation>2511	5	2511</citation>
	<citation>2511	5	2511</citation>
	</citations>
	<title>Maxflow (Algorithm R324)</title>
	<conference>CACM May, 1973</conference>
	<authors>
	<author>Bayer, G.</author>
	</authors>
	<location>CA730509 JB January 23, 1978  4:39 PM</location>
	</document>
	<document id= '2510'>
	<citations>
	<citation>2510	5	2510</citation>
	<citation>2510	5	2510</citation>
	<citation>2510	5	2510</citation>
	</citations>
	<title>Minit Algorithm for Linear Programming (Algorithm R333)</title>
	<conference>CACM May, 1973</conference>
	<authors>
	<author>Holmgren, B.</author>
	<author>Obradovic, D.</author>
	<author>Kolm, A.</author>
	</authors>
	<location>CA730510 JB January 23, 1978  4:38 PM</location>
	</document>
	<document id= '2509'>
	<citations>
	<citation>2509	5	2509</citation>
	<citation>2509	5	2509</citation>
	<citation>2509	5	2509</citation>
	</citations>
	<title>Minit Algorithm for Linear Programming (Algorithm R333)</title>
	<conference>CACM May, 1973</conference>
	<authors>
	<author>Obradovic, D.</author>
	</authors>
	<location>CA730511 JB January 23, 1978  4:37 PM</location>
	</document>
	<document id= '2508'>
	<title>Increasing the Efficiency of Quicksort (Algorithm R402)</title>
	<conference>CACM May, 1973</conference>
	<authors>
	<author>Wheeler, R. E.</author>
	</authors>
	<keywords>sorting, quicksort</keywords>
	<version>3.73 4.49 5.31 5.6</version>
	<location>CA730512 JB January 23, 1978  4:35 PM</location>
	<citations>
	<citation>2508	5	2508</citation>
	<citation>2508	5	2508</citation>
	<citation>2508	5	2508</citation>
	</citations>
	</document>
	<document id= '2507'>
	<title>Exact Solution of Linear Equations Using Residue Arithmetic (Algorithm R406)</title>
	<conference>CACM May, 1973</conference>
	<authors>
	<author>Howell, J.</author>
	</authors>
	<keywords>residue arithmetic, symmetric residue, modulus, mixed-radix representation, symmetric mixed-radix  representation, mixed radix conversion, prime number, linear equations, Gaussian elimination, matrix  inversion, determinant, adjoint matrix, ill-condition</keywords>
	<version>3.5 5.14</version>
	<location>CA730513 JB January 23, 1978  4:34 PM</location>
	<citations>
	<citation>2507	5	2507</citation>
	<citation>2507	5	2507</citation>
	<citation>2507	5	2507</citation>
	</citations>
	</document>
	<document id= '2506'>
	<title>A Sparse Matrix Package (Algorithm R408)</title>
	<conference>CACM May, 1973</conference>
	<authors>
	<author>Sale, R. H. J.</author>
	</authors>
	<keywords>matrix, sparse matrix, matrix manipulation, Fortran standards</keywords>
	<version>5.14</version>
	<location>CA730514 JB January 23, 1978  4:30 PM</location>
	<citations>
	<citation>1613	4	2506</citation>
	<citation>1646	4	2506</citation>
	<citation>1900	4	2506</citation>
	<citation>1955	4	2506</citation>
	<citation>2025	4	2506</citation>
	<citation>2154	4	2506</citation>
	<citation>2365	4	2506</citation>
	<citation>2506	4	2506</citation>
	<citation>3060	4	2506</citation>
	<citation>987	5	2506</citation>
	<citation>2506	5	2506</citation>
	<citation>2506	5	2506</citation>
	<citation>2506	5	2506</citation>
	</citations>
	</document>
	<document id= '2505'>
	<title>Reflection-Free Permutations, Rosary Permutations, and Adjacent Transposition Algorithms</title>
	<conference>CACM May, 1973</conference>
	<authors>
	<author>Roy, M. K.</author>
	</authors>
	<keywords>permutation, permutation generation, scheduling, combinatorial analysis</keywords>
	<version>5.39</version>
	<location>CA730515 JB January 23, 1978  4:29 PM</location>
	<citations>
	<citation>2044	4	2505</citation>
	<citation>2189	4	2505</citation>
	<citation>2292	4	2505</citation>
	<citation>2417	4	2505</citation>
	<citation>2505	4	2505</citation>
	<citation>2505	4	2505</citation>
	<citation>2505	4	2505</citation>
	<citation>2874	4	2505</citation>
	<citation>2908	4	2505</citation>
	<citation>2189	5	2505</citation>
	<citation>2292	5	2505</citation>
	<citation>2505	5	2505</citation>
	<citation>2505	5	2505</citation>
	<citation>2505	5	2505</citation>
	<citation>2908	5	2505</citation>
	<citation>521	5	2505</citation>
	<citation>2505	6	2505</citation>
	<citation>2884	6	2505</citation>
	<citation>521	6	2505</citation>
	</citations>
	</document>
	<document id= '2504'>
	<title>Concerning Music and Computer Composition in Computational Linguistics</title>
	<conference>CACM May, 1973</conference>
	<authors>
	<author>McMorrow, C. H.</author>
	</authors>
	<keywords>artificial intelligence, heuristic programming, models of cognitive processes, computer music,  computer composition,music theory</keywords>
	<version>3.44 3.65</version>
	<location>CA730516 JB January 23, 1978  4:27 PM</location>
	<citations>
	<citation>2504	5	2504</citation>
	<citation>2504	5	2504</citation>
	<citation>2504	5	2504</citation>
	</citations>
	</document>
	<document id= '2503'>
	<citations>
	<citation>2503	5	2503</citation>
	<citation>2503	5	2503</citation>
	<citation>2503	5	2503</citation>
	</citations>
	<title>Another Comment on Computer Music</title>
	<conference>CACM May, 1973</conference>
	<authors>
	<author>Wexelblat, R. L.</author>
	</authors>
	<location>CA730517 JB January 23, 1978  4:25 PM</location>
	</document>
	<document id= '2502'>
	<title>A Comment on the Practical Aspects of Computer Science Education</title>
	<conference>CACM May, 1973</conference>
	<authors>
	<author>Estell, R. G.</author>
	</authors>
	<keywords>education, computer engineering, computer sciences curriculum, systems design</keywords>
	<version>1.52 6.0</version>
	<location>CA730518 JB January 23, 1978  4:23 PM</location>
	<citations>
	<citation>2502	5	2502</citation>
	<citation>2502	5	2502</citation>
	<citation>2502	5	2502</citation>
	</citations>
	</document>
	<document id= '2501'>
	<title>WYLBUR: An Interactive Text Editing and Remote Job Entry System</title>
	<abstract>WYLBUR is a comprehensive system for manipulating all kinds of text, such as computer programs,  letters, and manuscripts, using typewriter terminals connected to a computer.  It has facilities for  remote job entry and retrieval as well as facilities for text alignment and justification.  A powerful  method for addressing text by content is provided.  This paper describes the external appearance of WYLBUR  as well as its internal structure.  A short description of the major features of ORVYL, a general purpose  time-sharing system which operates in conjunction with WYLBUR, is also included.</abstract>
	<conference>CACM May, 1973</conference>
	<authors>
	<author>Fajman, R.</author>
	<author>Borgelt, J.</author>
	</authors>
	<keywords>text editing, time-sharing, on-line text editing, interactive text editing, terminal, remote terminal,  terminal system, interactive terminal, remote job entry, remote job retrieval, program preparation, document  preparation, data entry, content addressing</keywords>
	<version>3.70 3.79 4.10 4.19 4.41 4.43 4.49</version>
	<location>CA730519 JB January 23, 1978  4:11 PM</location>
	<citations>
	<citation>1892	4	2501</citation>
	<citation>1901	4	2501</citation>
	<citation>2085	4	2501</citation>
	<citation>2095	4	2501</citation>
	<citation>2218	4	2501</citation>
	<citation>2277	4	2501</citation>
	<citation>2299	4	2501</citation>
	<citation>2319	4	2501</citation>
	<citation>2329	4	2501</citation>
	<citation>2358	4	2501</citation>
	<citation>2373	4	2501</citation>
	<citation>2380	4	2501</citation>
	<citation>2434	4	2501</citation>
	<citation>2499	4	2501</citation>
	<citation>2501	4	2501</citation>
	<citation>2501	4	2501</citation>
	<citation>2582	4	2501</citation>
	<citation>2629	4	2501</citation>
	<citation>2669	4	2501</citation>
	<citation>2828	4	2501</citation>
	<citation>2863	4	2501</citation>
	<citation>2881	4	2501</citation>
	<citation>2915	4	2501</citation>
	<citation>2928	4	2501</citation>
	<citation>2996	4	2501</citation>
	<citation>3006	4	2501</citation>
	<citation>3067	4	2501</citation>
	<citation>3114	4	2501</citation>
	<citation>1502	5	2501</citation>
	<citation>1751	5	2501</citation>
	<citation>2501	5	2501</citation>
	<citation>2501	5	2501</citation>
	<citation>2501	5	2501</citation>
	<citation>2623	5	2501</citation>
	<citation>2501	6	2501</citation>
	<citation>2537	6	2501</citation>
	</citations>
	</document>
	<document id= '2500'>
	<title>A Practical Approach to Managing Resources and Avoiding Deadlocks</title>
	<abstract>Resource scheduling and allocation can be expensive with regard to time and space in multiprogramming  or time-sharing environments involving large numbers of tasks and resources with conflicting requirements.   Detection and/or prevention of deadlocks can require massive amounts of additional overhead if efficient  usage of resources is to be maintained.  A resource management program is described which uses linked  lists along with other techniques to overcome a large portion of this overhead.  The program, which is  currently running as part of a large scale general purpose operating system, keeps resources relatively  active but does not detect or prevent all deadlocks in its implemented state.  Certain changes, which  would permit more comprehensive levels of deadlock prevention/detection at additional cost, have not  been incorporated in the running system due to the infrequency of deadlock situations.</abstract>
	<conference>CACM May, 1973</conference>
	<authors>
	<author>Frailey, D. J.</author>
	</authors>
	<keywords>deadlock, resource allocation, scheduling, resource management, multiprogramming, time-sharing,  multiprocessing, deadly embrace</keywords>
	<version>4.30 4.32</version>
	<location>CA730520 JB January 23, 1978  4:03 PM</location>
	<citations>
	<citation>2280	4	2500</citation>
	<citation>2379	4	2500</citation>
	<citation>2482	4	2500</citation>
	<citation>2500	4	2500</citation>
	<citation>2228	5	2500</citation>
	<citation>2500	5	2500</citation>
	<citation>2500	5	2500</citation>
	<citation>2500	5	2500</citation>
	</citations>
	</document>
	<document id= '2499'>
	<title>Efficient Multiprogramming Resource Allocation and Accounting</title>
	<abstract>Although sometimes thought of as only a component of time-sharing operation, multiprogramming  can involve broader questions of resource allocation, since fairness is not required to meet a response  criterion.  In a multiprogrammed system, it may serve maximal resource use to be unfair, for example  by holding an input/output channel idle for a program while it completes a small amount of processor  usage, enabling further use of the channel.  Several applications of this principle are given, and it  is suggested that a multiprogramming executive might dynamically adjust its allocation algorithms to  gain efficiency.  Allocation of resources is closely connected to accounting for those resources, raising  the problems of repeatability, minimal uncharged overhead, and relative weighting of charges for dependent  resources.  Since weightings may depend on allocation algorithms, these are not arbitrary accounting  parameters.  Often the only repeatable accounting is one which omits an extensive overhead will be paid,  and should multiprogramming prove efficient, overcharges will result.  Multiprogramming turns on allocation  of the memory resource essential to control of other resources.  The general suggestions for allocation  and accounting are applied to this question, and some details provided for the case of a monitor which  controls a virtual-memory machine.</abstract>
	<conference>CACM June, 1973</conference>
	<authors>
	<author>Hamlet, R. G.</author>
	</authors>
	<keywords>monitor, executive, multiprogramming, efficiency, resource allocation, resource accounting</keywords>
	<version>4.32</version>
	<location>CA730601 JB January 23, 1978  3:51 PM</location>
	<citations>
	<citation>1892	4	2499</citation>
	<citation>1901	4	2499</citation>
	<citation>2085	4	2499</citation>
	<citation>2095	4	2499</citation>
	<citation>2218	4	2499</citation>
	<citation>2277	4	2499</citation>
	<citation>2319	4	2499</citation>
	<citation>2329	4	2499</citation>
	<citation>2358	4	2499</citation>
	<citation>2373	4	2499</citation>
	<citation>2380	4	2499</citation>
	<citation>2434	4	2499</citation>
	<citation>2499	4	2499</citation>
	<citation>2501	4	2499</citation>
	<citation>2582	4	2499</citation>
	<citation>2669	4	2499</citation>
	<citation>2828	4	2499</citation>
	<citation>2863	4	2499</citation>
	<citation>2881	4	2499</citation>
	<citation>2928	4	2499</citation>
	<citation>2996	4	2499</citation>
	<citation>3006	4	2499</citation>
	<citation>3067	4	2499</citation>
	<citation>1751	5	2499</citation>
	<citation>2499	5	2499</citation>
	<citation>2499	5	2499</citation>
	<citation>2499	5	2499</citation>
	<citation>3114	5	2499</citation>
	<citation>1502	6	2499</citation>
	<citation>2499	6	2499</citation>
	<citation>2745	6	2499</citation>
	</citations>
	</document>
	<document id= '2498'>
	<title>Minimizing Wasted Space in Partitioned Segmentation</title>
	<abstract>A paged virtual memory system using a finite number of page sizes is considered.  Two algorithms  for assigning pages to segments are discussed.  Both of these algorithm are simple to implement.  The  problem of choosing the page sizes to minimize the expected value of total wasted space in internal fragmentation  and in a page table, per segment, is then solved for a probability density function of segment size which  may be expressed as a convex combination of Erlang densities.</abstract>
	<conference>CACM June, 1973</conference>
	<authors>
	<author>Gelenbe, E.</author>
	</authors>
	<keywords>dynamic storage allocation, virtual memory, paging, multiple page sizes, fragmentation, segmentation</keywords>
	<version>4.0 4.3 4.32 6.34 8.3</version>
	<location>CA730602 JB January 23, 1978  3:38 PM</location>
	<citations>
	<citation>2095	4	2498</citation>
	<citation>2218	4	2498</citation>
	<citation>2498	4	2498</citation>
	<citation>2596	4	2498</citation>
	<citation>2734	4	2498</citation>
	<citation>2902	4	2498</citation>
	<citation>2911	4	2498</citation>
	<citation>3000	4	2498</citation>
	<citation>1879	5	2498</citation>
	<citation>2498	5	2498</citation>
	<citation>2498	5	2498</citation>
	<citation>2498	5	2498</citation>
	<citation>2911	5	2498</citation>
	<citation>1879	6	2498</citation>
	<citation>273	6	2498</citation>
	<citation>2435	6	2498</citation>
	<citation>2498	6	2498</citation>
	<citation>2734	6	2498</citation>
	<citation>2773	6	2498</citation>
	<citation>2983	6	2498</citation>
	</citations>
	</document>
	<document id= '2497'>
	<title>Synchronizing Processors with Memory-Content-Generated Interrupts</title>
	<abstract>Implementations of the "Lock-Unlock" method of synchronizing processors in a multiprocessor  system usually require uninterruptable, memory-pause type instructions.  An interlock scheme called read-interlock,  which does not require memory-pause instructions, has been developed for a dual DEC PDP-10 system with  real-time requirements.  The read-interlock method does require a special"read-interlock" instruction  in the repertoire of the processors and a special "read-interlock" cycle in the repertoire of the memory  modules.  When a processor examines a "lock" (a memory location) with a read-interlock instruction, it  will be interrupted if the lock was already set; examining a lock immediately sets it if it was not already  set (this event sequence is a read-interlock cycle).  Writing into a lock clears it.  Having the processor  interrupted upon encountering a set lock instead of branching is advantageous if the branch would have  resulted in an effective interrupt.</abstract>
	<conference>CACM June, 1973</conference>
	<authors>
	<author>Hill, J. C.</author>
	</authors>
	<keywords>interrupts,supervisors, monitors, debugging, parallel processing, associative memories, microprogramming</keywords>
	<version>4.32 6.29</version>
	<location>CA730603 JB January 23, 1978  3:29 PM</location>
	<citations>
	<citation>1458	4	2497</citation>
	<citation>1523	4	2497</citation>
	<citation>1603	4	2497</citation>
	<citation>1698	4	2497</citation>
	<citation>1747	4	2497</citation>
	<citation>1748	4	2497</citation>
	<citation>1854	4	2497</citation>
	<citation>1877	4	2497</citation>
	<citation>1960	4	2497</citation>
	<citation>2377	4	2497</citation>
	<citation>2378	4	2497</citation>
	<citation>2497	4	2497</citation>
	<citation>2497	4	2497</citation>
	<citation>2534	4	2497</citation>
	<citation>2558	4	2497</citation>
	<citation>2625	4	2497</citation>
	<citation>2632	4	2497</citation>
	<citation>2840	4	2497</citation>
	<citation>2941	4	2497</citation>
	<citation>3105	4	2497</citation>
	<citation>3144	4	2497</citation>
	<citation>1471	5	2497</citation>
	<citation>2182	5	2497</citation>
	<citation>2497	5	2497</citation>
	<citation>2497	5	2497</citation>
	<citation>2497	5	2497</citation>
	</citations>
	</document>
	<document id= '2496'>
	<title>On the Near-Optimality of the Shortest-Latency-Time-First Drum Scheduling Discipline</title>
	<abstract>For computer systems in which it is practical to determine the instantaneous drum position,  a popular discipline for determining the sequence in which the records are to be accessed is the so-called  shortest-latency-time-first, SLTF, discipline.  When a collection of varying-length records is to be  accessed from specified drum positions, it is known that the SLTF discipline does not necessarily minimize  the drum latency time.  However, we show that the total time to access the entire collection for any  SLTF schedule is never as much as a drum revolution longer than a minimum latency schedule.</abstract>
	<conference>CACM June, 1973</conference>
	<authors>
	<author>Stone, H. S.</author>
	<author>Fuller, S.  H.</author>
	</authors>
	<keywords>drum scheduling, shortest-access-time-first, minimal latency scheduling, shortest-latency-time-first</keywords>
	<version>4.31 4.41 6.35</version>
	<location>CA730604 JB January 23, 1978  3:12 PM</location>
	<citations>
	<citation>2496	5	2496</citation>
	<citation>2496	5	2496</citation>
	<citation>2496	5	2496</citation>
	<citation>2628	5	2496</citation>
	<citation>3097	5	2496</citation>
	<citation>2375	6	2496</citation>
	<citation>2496	6	2496</citation>
	<citation>2496	6	2496</citation>
	</citations>
	</document>
	<document id= '2495'>
	<title>Adapting Optimal Code Generation for Arithmetic Expressions to the Instruction Sets Available  on Present-Day Computers</title>
	<conference>CACM June, 1973</conference>
	<authors>
	<author>Stockhausen, P. F.</author>
	</authors>
	<keywords>arithmetic expressions, code generation, compilers, object-code optimization, register assignment,  trees</keywords>
	<version>4.12 5.24 5.32</version>
	<location>CA730605 JB January 23, 1978  2:24 PM</location>
	<citations>
	<citation>2495	5	2495</citation>
	<citation>2495	5	2495</citation>
	<citation>2495	5	2495</citation>
	</citations>
	</document>
	<document id= '2494'>
	<title>A Computer Generated Aid for Cluster Analysis</title>
	<abstract>A computer generated graphic method, which can be used in conjunction with any hierarchical  scheme of cluster analysis, is described and illustrated.  The graphic principle used is the representation  of the elements of a data matrix of similarities or dissimilarities by computer printed symbols (of character  overstrikes) of various shades of darkness, where a dark symbol corresponds to a small dissimilarity.   The plots, applied to a data matrix before clustering and to the rearranged matrix after clustering,  show at a glance whether clustering brought forth any distinctive clusters.  A well-known set of data  consisting of the correlations of 24 psychological tests is used to illustrate the comparison of groupings  by four methods of factor analysis and two methods of cluster analysis.</abstract>
	<conference>CACM June, 1973</conference>
	<authors>
	<author>Ling, R. F.</author>
	</authors>
	<keywords>computer graphics, cluster analysis, numerical taxonomy, hierarchical clustering, factor analysis</keywords>
	<version>3.10 3.30 3.36 4.49</version>
	<location>CA730606 JB January 23, 1978  2:20 PM</location>
	<citations>
	<citation>2494	5	2494</citation>
	<citation>2494	5	2494</citation>
	<citation>2494	5	2494</citation>
	</citations>
	</document>
	<document id= '2493'>
	<title>Optimum Data Base Reorganization Points</title>
	<abstract>In certain data base organization schemes the cost per access may increase due to structural  inefficiencies caused by updates.  By reorganizing the data base the cost per access may be reduced.   However, the high cost of a reorganization prohibits frequent reorganizations.  This paper examines  strategies for selecting the optimum reorganization points.</abstract>
	<conference>CACM June, 1973</conference>
	<authors>
	<author>Shneiderman, B.</author>
	</authors>
	<keywords>data base, reorganization, files, information retrieval</keywords>
	<version>3.73</version>
	<location>CA730607 JB January 23, 1978  2:14 PM</location>
	<citations>
	<citation>2455	4	2493</citation>
	<citation>2493	4	2493</citation>
	<citation>2889	4	2493</citation>
	<citation>2968	4	2493</citation>
	<citation>2388	5	2493</citation>
	<citation>2493	5	2493</citation>
	<citation>2493	5	2493</citation>
	<citation>2493	5	2493</citation>
	<citation>2816	5	2493</citation>
	<citation>3129	5	2493</citation>
	<citation>2493	6	2493</citation>
	<citation>2493	6	2493</citation>
	<citation>2751	6	2493</citation>
	<citation>2816	6	2493</citation>
	<citation>2829	6	2493</citation>
	</citations>
	</document>
	<document id= '2492'>
	<title>The Development of Decision Tables via Parsing of Complex Decision Situations</title>
	<abstract>A new parsing technique is proposed which allows parsing based only on syntactical characteristics  of the decision problem.  It requires a description of the problem in decision grid chart format and  allows the development of decision tables within defined limits by avoiding, or at least minimizing,  repetition of conditions and actions in the resulting tables.</abstract>
	<conference>CACM June, 1973</conference>
	<authors>
	<author>Strunz, H.</author>
	</authors>
	<keywords>decision tables, parsing, decision grid chart,problem analysis</keywords>
	<version>4.0 4.1 4.2</version>
	<location>CA730608 JB January 23, 1978  2:10 PM</location>
	<citations>
	<citation>2220	4	2492</citation>
	<citation>2492	4	2492</citation>
	<citation>2518	4	2492</citation>
	<citation>2598	4	2492</citation>
	<citation>2616	4	2492</citation>
	<citation>2726	4	2492</citation>
	<citation>1548	5	2492</citation>
	<citation>2492	5	2492</citation>
	<citation>2492	5	2492</citation>
	<citation>2492	5	2492</citation>
	</citations>
	</document>
	<document id= '2491'>
	<title>Threaded Code</title>
	<abstract>The concept of "threaded code" is presented as an alternative to machine language code.  Hardware  and software realizations of it are given.  In software it is realized as interpretive code not needing  an interpreter.  Extensions and optimizations are mentioned.</abstract>
	<conference>CACM June, 1973</conference>
	<authors>
	<author>Bell, J. R.</author>
	</authors>
	<keywords>interpreter, machine code, time tradeoff, space tradeoff, compiled code, subroutine calls, threaded  code</keywords>
	<version>4.12 4.13 6.33</version>
	<location>CA730609 JB January 23, 1978  2:05 PM</location>
	<citations>
	<citation>2491	5	2491</citation>
	<citation>2491	5	2491</citation>
	<citation>2491	5	2491</citation>
	<citation>2748	5	2491</citation>
	<citation>3144	5	2491</citation>
	<citation>1471	6	2491</citation>
	<citation>2298	6	2491</citation>
	<citation>2491	6	2491</citation>
	<citation>2491	6	2491</citation>
	<citation>2597	6	2491</citation>
	<citation>2624	6	2491</citation>
	<citation>2625	6	2491</citation>
	<citation>2632	6	2491</citation>
	</citations>
	</document>
	<document id= '2490'>
	<title>Efficient Algorithms for Graph Manipulation [H] (Algorithm A447)</title>
	<abstract>Efficient algorithms are presented for partitioning a graph into connected components, biconnected  components and simple paths.  The algorithm for partitioning of a graph into simple paths is iterative  and each iteration produces a new path between two vertices already on paths.  (The start vertex can  be specified dynamically.)  If V is the number of vertices and E is the number of edges, each algorithm  requires time and space proportional to max (V,E) when executed on a random access computer.</abstract>
	<conference>CACM June, 1973</conference>
	<authors>
	<author>Hopcroft, J.</author>
	<author>Tarjan, R.</author>
	</authors>
	<keywords>graphs,analysis of algorithms, graph manipulation</keywords>
	<version>5.32</version>
	<location>CA730610 JB January 23, 1978  1:55 PM</location>
	<citations>
	<citation>2490	4	2490</citation>
	<citation>2177	5	2490</citation>
	<citation>2490	5	2490</citation>
	<citation>2490	5	2490</citation>
	<citation>2490	5	2490</citation>
	</citations>
	</document>
	<document id= '2489'>
	<title>Number of Multiply-Restricted Partitions [A1] (Algorithm A448)</title>
	<conference>CACM June, 1973</conference>
	<authors>
	<author>Beyer, T.</author>
	<author>Swinehart, D. F.</author>
	</authors>
	<keywords>partitions, enumeration, change making, energy-level degeneracies, molecular vibrational energy-levels</keywords>
	<version>3.13 5.30</version>
	<location>CA730611 JB January 23, 1978  1:49 PM</location>
	<citations>
	<citation>2104	4	2489</citation>
	<citation>2489	4	2489</citation>
	<citation>2489	4	2489</citation>
	<citation>1219	5	2489</citation>
	<citation>2104	5	2489</citation>
	<citation>2489	5	2489</citation>
	<citation>2489	5	2489</citation>
	<citation>2489	5	2489</citation>
	</citations>
	</document>
	<document id= '2488'>
	<title>Least Squares Piecewise Cubic Curve Fitting</title>
	<abstract>The matrices involved in a linear least squares formulation are determined for the problem  of fitting piecewise cubic functions, those possessing a continuous derivative, to arrays of planar data.</abstract>
	<conference>CACM June, 1973</conference>
	<authors>
	<author>Ferguson, J.</author>
	<author>Staley, P. A.</author>
	</authors>
	<keywords>curve fitting, data reduction, function approximation, approximation splines</keywords>
	<version>5.13</version>
	<location>CA730612 JB January 23, 1978  1:47 PM</location>
	<citations>
	<citation>2488	5	2488</citation>
	<citation>2488	5	2488</citation>
	<citation>2488	5	2488</citation>
	</citations>
	</document>
	<document id= '2487'>
	<title>Cubic Spline solutions to Fourth-order Boundary Value Problems</title>
	<abstract>The cubic spline approximation to the fourth-order differential equation y''''+p(x)y''+q(x)y'+r(x)y=t(x)  is shown to reduce to the solution of a five-term recurrence relationship.  For some special cases the  approximation is shown to be simply related to a finite difference representation with a local truncation  error of order (y/720)delta^8.</abstract>
	<conference>CACM June, 1973</conference>
	<authors>
	<author>Hoskins, W. D.</author>
	</authors>
	<keywords>cubic spline, differential equations, boundary value problem</keywords>
	<version>5.13 5.17</version>
	<location>CA730613 JB January 23, 1978  1:44 PM</location>
	<citations>
	<citation>2487	5	2487</citation>
	<citation>2487	5	2487</citation>
	<citation>2487	5	2487</citation>
	</citations>
	</document>
	<document id= '2486'>
	<title>Computer Photocomposition of Technical Text</title>
	<abstract>In computer assisted typesetting by means of photocomposition, special problems arise in highly  technical material such as mathematical formulas.  New solutions to several of these problems have been  devised in the information system of the American Institute of Physics.  They include: the representation  of special characters (foreign alphabets, mathematical symbols, etc.) not available on input keyboards  or on the photocomposer; the generation of such symbols, e.g. by overprinting; the precise positioning  of accent marks (floating diacritics); line breaks, i.e. words or formulas placed partly at the end of  one line and partly at the beginning of the next; and certain aspects of error correction.</abstract>
	<conference>CACM June, 1973</conference>
	<authors>
	<author>Alt, F. L.</author>
	<author>Kirk, J.</author>
	</authors>
	<keywords>photocomposition, typesetting, printing, graphics, text processing</keywords>
	<version>3.79 3.82</version>
	<location>CA730614 JB January 23, 1978  1:30 PM</location>
	<citations>
	<citation>2486	5	2486</citation>
	<citation>2486	5	2486</citation>
	<citation>2486	5	2486</citation>
	</citations>
	</document>
	<document id= '2485'>
	<title>Managing the Computer Resource: A Stage Hypothesis</title>
	<abstract>Based on the study of expenditures for data processing, a descriptive stage hypothesis is presented.   It is suggested that the planning, organizing, and controlling activities associated with managing the  computer resource will change in character over a period of time, and will evolve in patterns roughly  correlated to four stages of the computer budget: Stage I (computer acquisition), Stage II (intense system  development), Stage III (proliferation of controls), and Stage IV (user/service orientation).  Each stage  is described and related to individual tasks for managing the computer resource.</abstract>
	<conference>CACM July, 1973</conference>
	<authors>
	<author>Nolan, R. L.</author>
	</authors>
	<keywords>computer management, computer budget, computer expenditures, stage hypothesis, planning, organizing,  control, computer resource</keywords>
	<version>2.41 2.43 3.50</version>
	<location>CA730701 JB January 23,1978  1:23 PM</location>
	<citations>
	<citation>2485	5	2485</citation>
	<citation>2485	5	2485</citation>
	<citation>2485	5	2485</citation>
	<citation>2977	5	2485</citation>
	<citation>2985	5	2485</citation>
	<citation>3011	5	2485</citation>
	<citation>3035	5	2485</citation>
	<citation>2075	6	2485</citation>
	<citation>2302	6	2485</citation>
	<citation>2345	6	2485</citation>
	<citation>2485	6	2485</citation>
	<citation>2485	6	2485</citation>
	<citation>2485	6	2485</citation>
	<citation>2485	6	2485</citation>
	</citations>
	</document>
	<document id= '2484'>
	<title>A Note on Information Organization and Storage</title>
	<abstract>Since the logical structure of a data base can be represented by a tree or graph, it is quite  natural for us to view the process of designing a data base as that of constructing a tree or a graph.   A general method for constructing such a tree or a graph is provided.  There are three important elements  in this general construction method; namely, a set of binary relations, an algorithm for constructing  subsets of a set, and an algorithm for selecting an element from the given set of objects.  The use of  different relations and algorithms results in different information structures, as list, tree, ring,  etc.  Thus the problem of information organization and storage is reduced to that of defining relations  and formulating algorithms under a given set of constraints.  The results presented may be valuable to  designers as useful design concepts, and may serve as a basis for developing a formal theory on the subject.</abstract>
	<conference>CACM July, 1973</conference>
	<authors>
	<author>Huang, J. C.</author>
	</authors>
	<keywords>data base, data-base management, information retrieval, information structure, file organization,  storage allocation, tree, graph</keywords>
	<version>3.70 3.73 3.74 5.32</version>
	<location>CA730702 JB January 23, 1978  1:14 PM</location>
	<citations>
	<citation>2484	5	2484</citation>
	<citation>2484	5	2484</citation>
	<citation>2484	5	2484</citation>
	</citations>
	</document>
	<document id= '2483'>
	<title>COKO III: The Cooper-Koz Chess Program</title>
	<abstract>COKO III is a chess player written entirely in Fortran.  On the IBM 360-65, COKO III plays  a minimal chess game at the rate of .2 sec cpu time per move, with a level close to lower chess club  play.  A selective tree searching procedure controlled by tactical chess logistics allows a deployment  of multiple minimal game calculations to achieve some optimal move selection.  The tree searching algorithms  are the heart of COKO's effectiveness, yet they are conceptually simple.  In addition, an interesting  phenomenon called a tree searching catastrophe has plagued COKO's entire development just as it troubles  a human player.  Standard exponential growth is curbed to a large extent by the definition and trimming  of the Fischer set.  A clear distinction between tree pruning and selective tree searching is also made.   Representation of the chess environment is described along with a strategical preanalysis procedure  that maps the Lasker regions.  Specific chess algorithms are described which could be used as a command  structure by anyone desiring to do some chess program experimentation.  A comparison is made of some  mysterious actions of human players and COKO III.</abstract>
	<conference>CACM July, 1973</conference>
	<authors>
	<author>Kozdrowicki, E. W.</author>
	<author>Cooper, D. W.</author>
	</authors>
	<keywords>artificial intelligence, selective searching, tree searching, tree searching catastrophe, heuristic  programming,chess algorithms, Lasker regions, Fischer set, minimal chess game, strategical, tactical,  tactical control mode, game playing, alpha beta, machine learning, concept formation, command structure,  minimax, computer chess tournament, auxiliary minimal game</keywords>
	<version>3.60 3.66 3.74 4.22</version>
	<location>CA730703 JB January 23, 1978  1:07 PM</location>
	<citations>
	<citation>2483	5	2483</citation>
	<citation>2483	5	2483</citation>
	<citation>2483	5	2483</citation>
	</citations>
	</document>
	<document id= '2482'>
	<title>Mixed Solutions for the Deadlock Problem</title>
	<abstract>Mixtures of detection, avoidance, and prevention provide more effective and practical solutions  to the deadlock problem than any one of these alone.  The individual techniques can be tailored for subproblems  of resource allocation and still operate together to prevent deadlocks.  This paper presents a method,  based on the concept of the hierarchical operating system, for constructing appropriate mixtures and  suggests appropriate subsystems for the most frequently occurring resource allocation problems</abstract>
	<conference>CACM July, 1973</conference>
	<authors>
	<author>Howard, J. H. Jr.</author>
	</authors>
	<keywords>deadlocks, resource allocation, operating systems, multiprogramming, hierarchical systems</keywords>
	<version>4.30 4.32</version>
	<location>CA730704 JB January 23, 1978  12:46 PM</location>
	<citations>
	<citation>1828	4	2482</citation>
	<citation>1854	4	2482</citation>
	<citation>1877	4	2482</citation>
	<citation>1960	4	2482</citation>
	<citation>2150	4	2482</citation>
	<citation>2228	4	2482</citation>
	<citation>2280	4	2482</citation>
	<citation>2280	4	2482</citation>
	<citation>2317	4	2482</citation>
	<citation>2319	4	2482</citation>
	<citation>2377	4	2482</citation>
	<citation>2342	4	2482</citation>
	<citation>2376	4	2482</citation>
	<citation>2379	4	2482</citation>
	<citation>2379	4	2482</citation>
	<citation>2379	4	2482</citation>
	<citation>2424	4	2482</citation>
	<citation>2482	4	2482</citation>
	<citation>2482	4	2482</citation>
	<citation>2482	4	2482</citation>
	<citation>2500	4	2482</citation>
	<citation>2618	4	2482</citation>
	<citation>2632	4	2482</citation>
	<citation>2704	4	2482</citation>
	<citation>2723	4	2482</citation>
	<citation>2738	4	2482</citation>
	<citation>2740	4	2482</citation>
	<citation>2740	4	2482</citation>
	<citation>2741	4	2482</citation>
	<citation>2851	4	2482</citation>
	<citation>2867	4	2482</citation>
	<citation>2920	4	2482</citation>
	<citation>3184	4	2482</citation>
	<citation>1749	5	2482</citation>
	<citation>1877	5	2482</citation>
	<citation>2228	5	2482</citation>
	<citation>2482	5	2482</citation>
	<citation>2482	5	2482</citation>
	<citation>2482	5	2482</citation>
	</citations>
	</document>
	<document id= '2481'>
	<title>The Distribution of a Program in Primary and Fast Buffer Storage</title>
	<abstract>A virtual memory computer system with a fast buffer (cache) memory between primary memory and  the central processing unit is considered.  The optimal distribution of a program between the buffer  and primary memory is studied using the program's lifetime function.  Expressions for the distribution  of a program which maximizes the useful fraction of the cost-time integral of primary and fast buffer  storage are obtained for swapping and nonswapping buffer management policies.</abstract>
	<conference>CACM July 1973</conference>
	<authors>
	<author>Gelenbe, E.</author>
	</authors>
	<keywords>cache, virtual memory, lifetime function, cost-time integral, fast buffer</keywords>
	<version>4.3 6.2 6.3</version>
	<location>CA730705 JB January 23, 1978  12:41 PM</location>
	<citations>
	<citation>2374	4	2481</citation>
	<citation>2481	4	2481</citation>
	<citation>2669	4	2481</citation>
	<citation>2863	4	2481</citation>
	<citation>3016	4	2481</citation>
	<citation>3052	4	2481</citation>
	<citation>1901	5	2481</citation>
	<citation>2481	5	2481</citation>
	<citation>2481	5	2481</citation>
	<citation>2481	5	2481</citation>
	</citations>
	</document>
	<document id= '2480'>
	<title>Teaching "About Programming"</title>
	<abstract>This paper presents the goals and organization of a course about programming designed to provide  entering students in a graduate program with a cultural enrichment in their professional lives.  The  students are expected to have taken at least two programming courses prior to this one and, therefore,  to be familiar with at least two programming languages, both as students and users.  Teaching someone  how to program is similar to teaching him to play a musical instrument: neither skill can be taught-they  must be learned.  However, the teacher still serves several vital purposes: to present a set of rules  for producing well-formed utterances; to offer numerous demonstrations of his own skill; and to function  as an involved critic.  Finally, the teacher is the source of information about the process in which  the student is involved.</abstract>
	<conference>CACM July, 1973</conference>
	<authors>
	<author>Rosin, R. F.</author>
	</authors>
	<keywords>education, programming concepts, professionalism</keywords>
	<version>1.52 2.2 4.22</version>
	<location>CA730706 JB January 23, 1978  12:36 PM</location>
	<citations>
	<citation>2319	4	2480</citation>
	<citation>2480	4	2480</citation>
	<citation>2480	4	2480</citation>
	<citation>2594	4	2480</citation>
	<citation>2709	4	2480</citation>
	<citation>2738	4	2480</citation>
	<citation>2867	4	2480</citation>
	<citation>2939	4	2480</citation>
	<citation>2972	4	2480</citation>
	<citation>3004	4	2480</citation>
	<citation>3030	4	2480</citation>
	<citation>3155	4	2480</citation>
	<citation>3155	4	2480</citation>
	<citation>2204	5	2480</citation>
	<citation>2247	5	2480</citation>
	<citation>2480	5	2480</citation>
	<citation>2480	5	2480</citation>
	<citation>2480	5	2480</citation>
	<citation>3003	5	2480</citation>
	<citation>1659	6	2480</citation>
	<citation>1678	6	2480</citation>
	<citation>1927	6	2480</citation>
	<citation>1945	6	2480</citation>
	<citation>2097	6	2480</citation>
	<citation>2147	6	2480</citation>
	<citation>2163	6	2480</citation>
	<citation>2187	6	2480</citation>
	<citation>2329	6	2480</citation>
	<citation>2345	6	2480</citation>
	<citation>2367	6	2480</citation>
	<citation>2407	6	2480</citation>
	<citation>2478	6	2480</citation>
	<citation>2479	6	2480</citation>
	<citation>2480	6	2480</citation>
	<citation>2538	6	2480</citation>
	</citations>
	</document>
	<document id= '2479'>
	<title>Curriculum Recommendations for Graduate Professional Programs in Information Systems: Recommended  Addendum on Information Systems Administration</title>
	<abstract>An addendum to the Report of the ACM Curriculum Committee on Computer Education for Management  is proposed. The proposed addendum is to include in the curriculum a course on Information Systems administration.  It is important for two reasons: (1) the systems designer must understand the administrative framework  in which he must operate to work effectively, and (2) an important objective of the curriculum recommendations  is to prepare the future manager of the computer activity.  It is felt that the importance of these two  reasons justifies the addition of the recommended course.  The course is outlined in the format of the  original report.</abstract>
	<conference>CACM July, 1973</conference>
	<authors>
	<author>McFarlan, F. W.</author>
	<author>Nolan, R. L.</author>
	</authors>
	<keywords>education, management information systems, information systems administration, information systems  management, computer management</keywords>
	<version>1.52 3.51</version>
	<location>CA730707 JB January 23, 1978  12:30 PM</location>
	<citations>
	<citation>2479	4	2479</citation>
	<citation>2020	5	2479</citation>
	<citation>2479	5	2479</citation>
	<citation>2479	5	2479</citation>
	<citation>2479	5	2479</citation>
	<citation>2852	5	2479</citation>
	<citation>3003	5	2479</citation>
	<citation>1417	6	2479</citation>
	<citation>1659	6	2479</citation>
	<citation>1678	6	2479</citation>
	<citation>1771	6	2479</citation>
	<citation>1927	6	2479</citation>
	<citation>1945	6	2479</citation>
	<citation>2097	6	2479</citation>
	<citation>2147	6	2479</citation>
	<citation>2163	6	2479</citation>
	<citation>2187	6	2479</citation>
	<citation>2329	6	2479</citation>
	<citation>2345	6	2479</citation>
	<citation>2345	6	2479</citation>
	<citation>2367	6	2479</citation>
	<citation>2387	6	2479</citation>
	<citation>2407	6	2479</citation>
	<citation>2478	6	2479</citation>
	<citation>2479	6	2479</citation>
	<citation>2479	6	2479</citation>
	<citation>2480	6	2479</citation>
	<citation>2538	6	2479</citation>
	</citations>
	</document>
	<document id= '2478'>
	<title>Computer Science-Seminars for Undergraduates</title>
	<conference>CACM July, 1973</conference>
	<authors>
	<author>Kandel, A.</author>
	</authors>
	<keywords>education, computer science, curriculum, imprecise synthesis, fuzzy educational structure</keywords>
	<version>1.52 6.0</version>
	<location>CA730708 JB January 23, 1978  11:24 AM</location>
	<citations>
	<citation>1413	4	2478</citation>
	<citation>1654	4	2478</citation>
	<citation>1720	4	2478</citation>
	<citation>1771	4	2478</citation>
	<citation>1927	4	2478</citation>
	<citation>2147	4	2478</citation>
	<citation>2163	4	2478</citation>
	<citation>2345	4	2478</citation>
	<citation>2478	4	2478</citation>
	<citation>2478	4	2478</citation>
	<citation>2478	4	2478</citation>
	<citation>2594	4	2478</citation>
	<citation>2852	4	2478</citation>
	<citation>2899	4	2478</citation>
	<citation>3003	4	2478</citation>
	<citation>3130	4	2478</citation>
	<citation>1205	5	2478</citation>
	<citation>1771	5	2478</citation>
	<citation>2329	5	2478</citation>
	<citation>2478	5	2478</citation>
	<citation>2478	5	2478</citation>
	<citation>2478	5	2478</citation>
	<citation>3003	5	2478</citation>
	<citation>1659	6	2478</citation>
	<citation>1678	6	2478</citation>
	<citation>1927	6	2478</citation>
	<citation>1945	6	2478</citation>
	<citation>2097	6	2478</citation>
	<citation>2147	6	2478</citation>
	<citation>2163	6	2478</citation>
	<citation>2187	6	2478</citation>
	<citation>2329	6	2478</citation>
	<citation>2345	6	2478</citation>
	<citation>2367	6	2478</citation>
	<citation>2407	6	2478</citation>
	<citation>2478	6	2478</citation>
	<citation>2479	6	2478</citation>
	<citation>2480	6	2478</citation>
	<citation>2538	6	2478</citation>
	</citations>
	</document>
	<document id= '2477'>
	<title>Multiple Exits from a Loop Without the GOTO</title>
	<conference>CACM July, 1973</conference>
	<authors>
	<author>Bochmann, G. V.</author>
	</authors>
	<keywords>control structures, goto free programming, multiple exits from loops, exit statement</keywords>
	<version>4.20 4.22</version>
	<location>CA730709 JB January 23, 1978  11:23 AM</location>
	<citations>
	<citation>2193	4	2477</citation>
	<citation>2326	4	2477</citation>
	<citation>2477	4	2477</citation>
	<citation>2541	4	2477</citation>
	<citation>2594	4	2477</citation>
	<citation>3004	4	2477</citation>
	<citation>2477	5	2477</citation>
	<citation>2477	5	2477</citation>
	<citation>2477	5	2477</citation>
	<citation>2574	5	2477</citation>
	<citation>2709	5	2477</citation>
	<citation>3186	5	2477</citation>
	<citation>1425	6	2477</citation>
	<citation>2138	6	2477</citation>
	<citation>2204	6	2477</citation>
	<citation>2456	6	2477</citation>
	<citation>2477	6	2477</citation>
	<citation>2477	6	2477</citation>
	</citations>
	</document>
	<document id= '2476'>
	<title>Equivalence Between AND/OR Graphs and Context-Free Grammars</title>
	<conference>CACM July, 1973</conference>
	<authors>
	<author>Hall, P. A. V.</author>
	</authors>
	<keywords>artificial intelligence, AND/OR graphs, language theory, context-free grammars</keywords>
	<version>3.60 3.64 5.23</version>
	<location>CA730710 JB January 23, 1978  11:21 AM</location>
	<citations>
	<citation>2476	5	2476</citation>
	<citation>2476	5	2476</citation>
	<citation>2476	5	2476</citation>
	</citations>
	</document>
	<document id= '2475'>
	<title>Solution of Linear Programming Problems in 0-1 Variables [H1] (Algorithm A449)</title>
	<conference>CACM July, 1973</conference>
	<authors>
	<author>Fiala, F.</author>
	</authors>
	<keywords>linear programming, zero-one variable</keywords>
	<version>5.41</version>
	<location>CA730711 JB January 23, 1978  11:19 AM</location>
	<citations>
	<citation>2475	5	2475</citation>
	<citation>2475	5	2475</citation>
	<citation>2475	5	2475</citation>
	</citations>
	</document>
	<document id= '2474'>
	<title>DIFSUB for Solution of Ordinary Differential Equations (Algorithm C407)</title>
	<conference>CACM July, 1973</conference>
	<authors>
	<author>Nikolai, P. J.</author>
	</authors>
	<keywords>differential equations, stiff differential equations, boundary value problems</keywords>
	<version>5.17</version>
	<location>CA730712 JB January 23, 1978  11:16 AM</location>
	<citations>
	<citation>2205	4	2474</citation>
	<citation>2474	4	2474</citation>
	<citation>2474	4	2474</citation>
	<citation>2205	5	2474</citation>
	<citation>2207	5	2474</citation>
	<citation>2474	5	2474</citation>
	<citation>2474	5	2474</citation>
	<citation>2474	5	2474</citation>
	</citations>
	</document>
	<document id= '2473'>
	<title>Hidden-Line Plotting Program (Algorithm R420)</title>
	<conference>CACM July, 1973</conference>
	<authors>
	<author>Macleod, I. D. G.</author>
	<author>Collins, A. M.</author>
	</authors>
	<keywords>hidden-line plot, surface plot</keywords>
	<version>4.9</version>
	<location>CA730713 JB January 23, 1978  11:14 AM</location>
	<citations>
	<citation>2473	5	2473</citation>
	<citation>2473	5	2473</citation>
	<citation>2473	5	2473</citation>
	</citations>
	</document>
	<document id= '2472'>
	<title>Minimal spanning Tree (Algorithm R422)</title>
	<conference>CACM July,1973</conference>
	<authors>
	<author>Kernighan, B. W.</author>
	</authors>
	<keywords>spanning tree, minimal spanning tree, Prim algorithm</keywords>
	<version>5.32</version>
	<location>CA730714 JB January 23, 1978  11:12 AM</location>
	<citations>
	<citation>2472	5	2472</citation>
	<citation>2472	5	2472</citation>
	<citation>2472	5	2472</citation>
	</citations>
	</document>
	<document id= '2471'>
	<title>A Learning Program Which Plays Partnership Dominoes</title>
	<abstract>A learning program has been written is BASIC to play four-player partnership dominoes.  Because  dominoes is a game of incomplete information, the program uses somewhat different principles of artificial  intelligence from those used in programs for games of complete information, such as checkers, chess,  and go.  The program was constructed to use a "strategy signature table" which classifies board situations  through the interactions of game parameters. Each entry in the table contains adaptively determined  weights indicating the advi sability of various strategies.  Once chosen, a strategy then employs probability  analysis and linear polynomial evaluation to choose a move.  Our program wins approximately two-thirds  of its games in tournament situations, and has defeated championship players.</abstract>
	<conference>CACM August, 1973</conference>
	<authors>
	<author>Smith, M. H.</author>
	</authors>
	<keywords>artificial intelligence, intelligence learning, heuristic procedures, heuristic programming, game  playing, problem solving,dominoes, incomplete information, machine learning, signature table, learning  programs, strategy learning</keywords>
	<version>3.62 3.64 3.66 3.69</version>
	<location>CA730803 JB January 23, 1978  11:09 AM</location>
	<citations>
	<citation>2471	5	2471</citation>
	<citation>2471	5	2471</citation>
	<citation>2471	5	2471</citation>
	</citations>
	</document>
	<document id= '2470'>
	<title>Fen-An Axiomatic Basis for Program Semantics</title>
	<abstract>A formal system is presented which abstracts the notions of data item, function, and relation.   It is argued that the system is more suitable than set theory (or its derivatives) for the concise and  accurate description of program semantics.  It is shown how the system can be used to build composite  data types out of simper ones with the operations of rowing, structuring, and uniting.  It is also demonstrated  that completely new primitive types can be introduced into languages through the mechanism of singleton  data types.  Both deterministic and nondeterministic functions are shown to be definable in the system.   It is described how the local environment can be modeled as a data item and how imperative statements  can be considered functions on the environment.  The nature of recursive functions is briefly discussed,  and a technique is presented by which they can be introduced into the system.  The technique is contrasted  with the use of the paradoxical combinator, Y.  The questions of local and global environments and of  various modes of function calling and parameter passing are touched upon. The theory is applied to the  proof of several elementary theorems concerning the semantics of the assignment, conditional, and iterative  statements.  An appendix is included which presents in detail the formal system governing webs and fen,  the abstractions used informally in the body of the paper.</abstract>
	<conference>CACM August, 1973</conference>
	<authors>
	<author>MacLennan, B. J.</author>
	</authors>
	<keywords>semantics, formal systems, lambda-calculus, extensible languages, data types, modes, axioms, correctness,  formal language definition, formal description, data structures, description languages, models of computation</keywords>
	<version>4.22 5.21 5.24 5.26</version>
	<location>CA730804 JB January 23, 1978  11:01 AM</location>
	<citations>
	<citation>1469	4	2470</citation>
	<citation>1486	4	2470</citation>
	<citation>1491	4	2470</citation>
	<citation>1781	4	2470</citation>
	<citation>2021	4	2470</citation>
	<citation>2060	4	2470</citation>
	<citation>2178	4	2470</citation>
	<citation>2222	4	2470</citation>
	<citation>2227	4	2470</citation>
	<citation>2294	4	2470</citation>
	<citation>2315	4	2470</citation>
	<citation>2326	4	2470</citation>
	<citation>2326	4	2470</citation>
	<citation>2470	4	2470</citation>
	<citation>2470	4	2470</citation>
	<citation>2470	4	2470</citation>
	<citation>2470	4	2470</citation>
	<citation>2684	4	2470</citation>
	<citation>2732	4	2470</citation>
	<citation>2865	4	2470</citation>
	<citation>2896	4	2470</citation>
	<citation>2943	4	2470</citation>
	<citation>3014	4	2470</citation>
	<citation>3044	4	2470</citation>
	<citation>3068	4	2470</citation>
	<citation>3077	4	2470</citation>
	<citation>3124	4	2470</citation>
	<citation>3143	4	2470</citation>
	<citation>1303	5	2470</citation>
	<citation>1469	5	2470</citation>
	<citation>1834	5	2470</citation>
	<citation>2264	5	2470</citation>
	<citation>2470	5	2470</citation>
	<citation>2470	5	2470</citation>
	<citation>2470	5	2470</citation>
	</citations>
	</document>
	<document id= '2469'>
	<title>Petri Nets and Speed Independent design</title>
	<abstract>Petri nets are investigated as one method of modeling speed independent asynchronous circuits.   A study of circuit realizations of Petri nets leads to a demonstration of their usefulness in modeling  speed independent operation.  This usefulness is emphasized by the design of a speed independent processor  from modules developed in the investigation of Petri net implementation.</abstract>
	<conference>CACM August, 1973</conference>
	<authors>
	<author>Misunas, D.</author>
	</authors>
	<keywords>speed independent asynchronous, Petri net</keywords>
	<version>6.1 6.33</version>
	<location>CA730805 JB January 23, 1978  10:46 AM</location>
	<citations>
	<citation>2469	5	2469</citation>
	<citation>2469	5	2469</citation>
	<citation>2469	5	2469</citation>
	</citations>
	</document>
	<document id= '2468'>
	<title>Rosenbrock Function Minimization [E4] (Algorithm A450)</title>
	<conference>CACM August, 1973</conference>
	<authors>
	<author>Machura, M.</author>
	<author>Mulawa, A.</author>
	</authors>
	<keywords>function minimization, Rosenbrock's method</keywords>
	<version>5.19</version>
	<location>CA730806 JB January 23, 1978  10:43 AM</location>
	<citations>
	<citation>2468	5	2468</citation>
	<citation>2468	5	2468</citation>
	<citation>2468	5	2468</citation>
	</citations>
	</document>
	<document id= '2467'>
	<title>Chi-Square quantiles [G1] (Algorithm A451)</title>
	<conference>CACM August, 1973</conference>
	<authors>
	<author>Goldstein, R. B.</author>
	</authors>
	<keywords>Chi-square, asymptotic approximation, normal deviate, chi-square deviate, degrees of freedom</keywords>
	<version>5.12 5.5</version>
	<location>CA730807 JB January 23, 1978  10:41 AM</location>
	<citations>
	<citation>2467	4	2467</citation>
	<citation>2793	4	2467</citation>
	<citation>1606	5	2467</citation>
	<citation>2467	5	2467</citation>
	<citation>2467	5	2467</citation>
	<citation>2467	5	2467</citation>
	</citations>
	</document>
	<document id= '2466'>
	<title>Enumerating Combinations of m Out of n Objects [G6] (Algorithm A452)</title>
	<conference>CACM August, 1973</conference>
	<authors>
	<author>Liu, C.</author>
	<author>Tang, D. T.</author>
	</authors>
	<keywords>permutations, combination</keywords>
	<version>5.30</version>
	<location>CA730808 JB January 23, 1978  10:39 AM</location>
	<citations>
	<citation>2466	4	2466</citation>
	<citation>2834	4	2466</citation>
	<citation>3115	4	2466</citation>
	<citation>2045	5	2466</citation>
	<citation>2466	5	2466</citation>
	<citation>2466	5	2466</citation>
	<citation>2466	5	2466</citation>
	<citation>2834	5	2466</citation>
	<citation>3115	5	2466</citation>
	<citation>907	6	2466</citation>
	<citation>969	6	2466</citation>
	<citation>2045	6	2466</citation>
	<citation>2045	6	2466</citation>
	<citation>2417	6	2466</citation>
	<citation>2417	6	2466</citation>
	<citation>2466	6	2466</citation>
	<citation>2466	6	2466</citation>
	<citation>2884	6	2466</citation>
	<citation>579	6	2466</citation>
	<citation>785	6	2466</citation>
	</citations>
	</document>
	<document id= '2465'>
	<title>Gaussian Quadrature formulas for Bromwich's Integral [D1] (Algorithm A453)</title>
	<conference>CACM August, 1973</conference>
	<authors>
	<author>Piessens, R.</author>
	</authors>
	<keywords>Gaussian quadrature, Bromwich's integral, complex integration, numerical inversion of the Laplace  transform</keywords>
	<version>5.16 5.13</version>
	<location>CA730809 JB January 23, 1978  10:37 AM</location>
	<citations>
	<citation>2465	5	2465</citation>
	<citation>2465	5	2465</citation>
	<citation>2465	5	2465</citation>
	</citations>
	</document>
	<document id= '2464'>
	<title>The Complex Method for Constrained Optimization [E4] (Algorithm A454)</title>
	<conference>CACM August, 1973</conference>
	<authors>
	<author>Richardson, J. A.</author>
	<author>Kuester, J. L.</author>
	</authors>
	<keywords>optimization, constrained optimization, Box's algorithm</keywords>
	<version>5.41</version>
	<location>CA730810 JB January 23, 1978  10:34 AM</location>
	<citations>
	<citation>2464	5	2464</citation>
	<citation>2464	5	2464</citation>
	<citation>2464	5	2464</citation>
	</citations>
	</document>
	<document id= '2463'>
	<citations>
	<citation>2463	5	2463</citation>
	<citation>2463	5	2463</citation>
	<citation>2463	5	2463</citation>
	</citations>
	<title>Complex Gamma Function (Algorithm R404,C404)</title>
	<conference>CACM August, 1973</conference>
	<authors>
	<author>Andrejkova, G.</author>
	<author>Vinar, J.</author>
	</authors>
	<location>CA730811 JB January 23, 1978  10:33 AM</location>
	</document>
	<document id= '2462'>
	<citations>
	<citation>2462	5	2462</citation>
	<citation>2462	5	2462</citation>
	<citation>2462	5	2462</citation>
	</citations>
	<title>An Efficient Prime Number Generator (Algorithm R357)</title>
	<conference>CACM August, 1973</conference>
	<authors>
	<author>DeMorgan, R. M.</author>
	</authors>
	<location>CA730812 JB January 23, 1978  10:31 AM</location>
	</document>
	<document id= '2461'>
	<citations>
	<citation>2461	5	2461</citation>
	<citation>2461	5	2461</citation>
	<citation>2461	5	2461</citation>
	</citations>
	<title>Graph Plotter (Algorithm R412)</title>
	<conference>CACM August, 1973</conference>
	<authors>
	<author>Watkins, R. P.</author>
	</authors>
	<location>CA730813 JB January 23, 1978  10:30 AM</location>
	</document>
	<document id= '2460'>
	<citations>
	<citation>2460	5	2460</citation>
	<citation>2460	5	2460</citation>
	<citation>2460	5	2460</citation>
	</citations>
	<title>Clenshaw-Curtis Quadrature (Algorithm R424)</title>
	<conference>CACM August, 1973</conference>
	<authors>
	<author>Good, A. J.</author>
	</authors>
	<location>CA730814 JB January 23, 1978  10:29 AM</location>
	</document>
	<document id= '2459'>
	<citations>
	<citation>2346	4	2459</citation>
	<citation>2459	4	2459</citation>
	<citation>1114	5	2459</citation>
	<citation>2459	5	2459</citation>
	<citation>2459	5	2459</citation>
	<citation>2459	5	2459</citation>
	</citations>
	<title>Hu-Tucker Minimum Redundancy Alphabetic Coding Method (Algorithm R428)</title>
	<conference>CACM August, 1973</conference>
	<authors>
	<author>Byrne, J. G.</author>
	</authors>
	<location>CA730815 JB January 23, 1978  10:27 AM</location>
	</document>
	<document id= '2458'>
	<citations>
	<citation>2458	5	2458</citation>
	<citation>2458	5	2458</citation>
	<citation>2458	5	2458</citation>
	</citations>
	<title>Localization of the Roots of a Polynomial (Algorithm R429)</title>
	<conference>CACM August, 1973</conference>
	<authors>
	<author>Williams, E. J.</author>
	</authors>
	<location>CA730816 JB January 23, 1978  10:26 AM</location>
	</document>
	<document id= '2457'>
	<title>Inductive Methodsfor Proving Properties of Programs</title>
	<abstract>There are two main purposes in this paper: first, clarification and extension of known results  about computation of recursive programs, with emphasis on the difference between the theoretical and  practical approaches; second, presentation and examination of various known methods for proving properties  of recursive programs.  Discussed in detail are two powerful inductive methods computational induction  and structural induction, including examples of their applications.</abstract>
	<conference>CACM August, 1973</conference>
	<authors>
	<author>Manna, Z.</author>
	<author>Nes, S.</author>
	<author>Vuillemin, J.</author>
	</authors>
	<keywords>recursive programs, least fixed point, computational induction, structural induction</keywords>
	<version>4.2 5.23 5.24</version>
	<location>CA730817 JB January 23, 1978  10:24 AM</location>
	<citations>
	<citation>2326	4	2457</citation>
	<citation>2411	4	2457</citation>
	<citation>2457	4	2457</citation>
	<citation>2457	4	2457</citation>
	<citation>2842	4	2457</citation>
	<citation>2903	4	2457</citation>
	<citation>2192	5	2457</citation>
	<citation>2326	5	2457</citation>
	<citation>2457	5	2457</citation>
	<citation>2457	5	2457</citation>
	<citation>2457	5	2457</citation>
	<citation>2981	5	2457</citation>
	<citation>3030	5	2457</citation>
	<citation>3077	5	2457</citation>
	<citation>3104	5	2457</citation>
	<citation>210	6	2457</citation>
	<citation>1834	6	2457</citation>
	<citation>2060	6	2457</citation>
	<citation>2247	6	2457</citation>
	<citation>2356	6	2457</citation>
	<citation>2457	6	2457</citation>
	<citation>2457	6	2457</citation>
	<citation>2457	6	2457</citation>
	<citation>2457	6	2457</citation>
	<citation>2651	6	2457</citation>
	<citation>2683	6	2457</citation>
	<citation>2958	6	2457</citation>
	<citation>2972	6	2457</citation>
	</citations>
	</document>
	<document id= '2456'>
	<title>On the Capabilities of While, Repeat, and Exit Statements</title>
	<abstract>A well-formed program is defined as a program in which loops and if statements are properly  nested and can be entered only at their beginning.  A corresponding definition is given for a well-formed  flowchart.  It is shown that a program is well formed if and only if it can be written with if, repeat,  and multi-level exit statements for sequence control.  It is also shown that if,while, and repeat statements  with single-level exit do not suffice.  It is also shown that any flowcharts can be converted to a well-formed  flowchart by node splitting.  Practical implications are discussed.</abstract>
	<conference>CACM August, 1973</conference>
	<authors>
	<author>Peterson, W. W.</author>
	<author>Kasami, T.</author>
	<author>Tokura, N.</author>
	</authors>
	<keywords>well-formed program, while statement, repeat statement, exit statement, go to statement, flowchart,  node splitting, software reliability</keywords>
	<version>4.39 4.49 5.29</version>
	<location>CA730818 JB January 23, 1978  10:20 AM</location>
	<citations>
	<citation>2456	5	2456</citation>
	<citation>2456	5	2456</citation>
	<citation>2456	5	2456</citation>
	<citation>2709	5	2456</citation>
	<citation>3004	5	2456</citation>
	<citation>3121	5	2456</citation>
	<citation>1312	6	2456</citation>
	<citation>1425	6	2456</citation>
	<citation>1425	6	2456</citation>
	<citation>308	6	2456</citation>
	<citation>309	6	2456</citation>
	<citation>2138	6	2456</citation>
	<citation>2204	6	2456</citation>
	<citation>2247	6	2456</citation>
	<citation>2356	6	2456</citation>
	<citation>2456	6	2456</citation>
	<citation>2456	6	2456</citation>
	<citation>2456	6	2456</citation>
	<citation>2477	6	2456</citation>
	<citation>2709	6	2456</citation>
	<citation>3186	6	2456</citation>
	</citations>
	</document>
	<document id= '2455'>
	<title>A Generalization of AVL Trees</title>
	<abstract>A generalization of AVL trees is proposed in which imbalances up to (triangle shape) is a small  integer.  An experiment is performed to compare these trees with standard AVL trees and with balanced  trees on the basis of mean retrieval time, of amount of restructuring expected, and on the worst case  of retrieval time.  It is shown that, by permitting imbalances of up to five units, the retrieval time  is increased a small amount while the amount of restructuring required is decreased by a factor of ten.   A few theoretical results are derived, including the correction of an earlier paper, and are duly compared  with the experimental data.  Reasonably good correspondence is found.</abstract>
	<conference>CACM August, 1973</conference>
	<authors>
	<author>Foster, C. C.</author>
	</authors>
	<keywords>AVL trees, balanced trees, information storage and retrieval</keywords>
	<version>3.7 3.72 4.49 5.31</version>
	<location>CA730819 JB January 23, 1978  10:13 AM</location>
	<citations>
	<citation>2455	4	2455</citation>
	<citation>2455	4	2455</citation>
	<citation>2493	4	2455</citation>
	<citation>2889	4	2455</citation>
	<citation>2968	4	2455</citation>
	<citation>2278	5	2455</citation>
	<citation>2388	5	2455</citation>
	<citation>2455	5	2455</citation>
	<citation>2455	5	2455</citation>
	<citation>2455	5	2455</citation>
	<citation>2889	5	2455</citation>
	<citation>2968	5	2455</citation>
	<citation>3042	5	2455</citation>
	<citation>2138	6	2455</citation>
	<citation>2388	6	2455</citation>
	<citation>2388	6	2455</citation>
	<citation>2455	6	2455</citation>
	<citation>2455	6	2455</citation>
	<citation>2455	6	2455</citation>
	<citation>2839	6	2455</citation>
	<citation>2889	6	2455</citation>
	<citation>2968	6	2455</citation>
	</citations>
	</document>
	<document id= '2454'>
	<title>Computational Algorithms for Closed Queueing Networks with Exponential Servers</title>
	<abstract>Methods are presented for computing the equilibrium distribution of customers in closed queueing  networks with exponential servers.  Expressions for various marginal distributions are also derived.   The computational algorithms are based on two-dimensional iterative techniques which are highly efficient  and quite simple to implement.  Implementation considerations such as storage allocation strategies and  order of evaluation are examined in some detail.</abstract>
	<conference>CACM September, 1973</conference>
	<authors>
	<author>Buzen, J. P.</author>
	</authors>
	<keywords>queueing theory, queueing networks, equilibrium distributions, steady state distributions</keywords>
	<version>5.12 5.5 8.1 8.3</version>
	<location>CA730901 JB January 23, 1978  10:07 AM</location>
	<citations>
	<citation>2454	5	2454</citation>
	<citation>2454	5	2454</citation>
	<citation>2454	5	2454</citation>
	<citation>2712	5	2454</citation>
	<citation>2741	5	2454</citation>
	<citation>3070	5	2454</citation>
	<citation>1526	6	2454</citation>
	<citation>1749	6	2454</citation>
	<citation>1805	6	2454</citation>
	<citation>2454	6	2454</citation>
	<citation>2454	6	2454</citation>
	<citation>2454	6	2454</citation>
	<citation>2741	6	2454</citation>
	<citation>2988	6	2454</citation>
	</citations>
	</document>
	<document id= '2453'>
	<title>Information Theory Applied to the Conversion of Decision Tables to Computer Programs</title>
	<abstract>Using ideas from information theory, this paper develops a heuristic algorithm that converts  a limited entry decision table to a tree structured computer program with near minimum average processing  time.  The method is applicable to any limited entry decision table and does not require that actions  have single rules or that the cost of testing conditions be equal.  It is thus more general than the  previously published heuristic algorithms.  Compared to the optimal algorithm of Reinwald and Soland,  this algorithm is easy to code and takes a much smaller translation time; it is thus felt that it is  more useful in practice.  The algorithm is well suited for manual conversion of decision tables to flowcharts.</abstract>
	<conference>CACM September, 1973</conference>
	<authors>
	<author>Ganapathy, S.</author>
	<author>Rajaraman, V.</author>
	</authors>
	<keywords>decision tables, optimum computer programs, information measure</keywords>
	<version>3.50 4.12 5.6</version>
	<location>CA730902 JB January 23, 1978  10:01 AM</location>
	<citations>
	<citation>1237	4	2453</citation>
	<citation>1354	4	2453</citation>
	<citation>1549	4	2453</citation>
	<citation>1564	4	2453</citation>
	<citation>1684	4	2453</citation>
	<citation>2053	4	2453</citation>
	<citation>2053	4	2453</citation>
	<citation>2220	4	2453</citation>
	<citation>2220	4	2453</citation>
	<citation>2221	4	2453</citation>
	<citation>2273	4	2453</citation>
	<citation>2273	4	2453</citation>
	<citation>2273	4	2453</citation>
	<citation>2273	4	2453</citation>
	<citation>2453	4	2453</citation>
	<citation>2453	4	2453</citation>
	<citation>2453	4	2453</citation>
	<citation>2453	4	2453</citation>
	<citation>2453	4	2453</citation>
	<citation>2517	4	2453</citation>
	<citation>2598	4	2453</citation>
	<citation>2598	4	2453</citation>
	<citation>2726	4	2453</citation>
	<citation>2726	4	2453</citation>
	<citation>2726	4	2453</citation>
	<citation>2856	4	2453</citation>
	<citation>2856	4	2453</citation>
	<citation>2856	4	2453</citation>
	<citation>2856	4	2453</citation>
	<citation>3034	4	2453</citation>
	<citation>3113	4	2453</citation>
	<citation>1172	5	2453</citation>
	<citation>1354	5	2453</citation>
	<citation>2053	5	2453</citation>
	<citation>2220	5	2453</citation>
	<citation>2453	5	2453</citation>
	<citation>2453	5	2453</citation>
	<citation>2453	5	2453</citation>
	<citation>2598	5	2453</citation>
	<citation>2856	5	2453</citation>
	<citation>753	5	2453</citation>
	<citation>1172	6	2453</citation>
	<citation>1172	6	2453</citation>
	<citation>1327	6	2453</citation>
	<citation>1354	6	2453</citation>
	<citation>1548	6	2453</citation>
	<citation>2053	6	2453</citation>
	<citation>2220	6	2453</citation>
	<citation>2220	6	2453</citation>
	<citation>2263	6	2453</citation>
	<citation>2453	6	2453</citation>
	<citation>2453	6	2453</citation>
	<citation>2598	6	2453</citation>
	<citation>2691	6	2453</citation>
	</citations>
	</document>
	<document id= '2452'>
	<title>Evaluation and Selection of File Organization-A Model and System</title>
	<abstract>This work first discusses the factors that affect file (data base) organization performance,  an elusive subject, and then presents a methodology, a model and a programmed system to estimate primarily  total storage costs and average access time of several file organizations, given a specific data base,  query characterization and device-related specifications.  Based on these estimates, an appropriate file  structure may be selected for the specific situation.  The system is a convenient tool to study file  structures and to facilitate as much as possible the process of data base structure design and evaluation.</abstract>
	<conference>CACM September, 1973</conference>
	<authors>
	<author>Cardenas, A. F.</author>
	</authors>
	<keywords>file organization, file structures, file management, file organization performance, file organization  model, file structure design, secondary index organization, simulation, data base, access time, storage  requirement, data base analysis, data management</keywords>
	<version>3.70 3.71 3.72 3.74 3.79 4.0</version>
	<location>CA730903 JB January 23, 1978  9:46 AM</location>
	<citations>
	<citation>1050	4	2452</citation>
	<citation>1935	4	2452</citation>
	<citation>1936	4	2452</citation>
	<citation>2017	4	2452</citation>
	<citation>2032	4	2452</citation>
	<citation>2140	4	2452</citation>
	<citation>2257	4	2452</citation>
	<citation>2257	4	2452</citation>
	<citation>2360	4	2452</citation>
	<citation>2360	4	2452</citation>
	<citation>2451	4	2452</citation>
	<citation>2451	4	2452</citation>
	<citation>2452	4	2452</citation>
	<citation>2452	4	2452</citation>
	<citation>2452	4	2452</citation>
	<citation>2452	4	2452</citation>
	<citation>2556	4	2452</citation>
	<citation>2765	4	2452</citation>
	<citation>2765	4	2452</citation>
	<citation>2882	4	2452</citation>
	<citation>2901	4	2452</citation>
	<citation>3134	4	2452</citation>
	<citation>1936	5	2452</citation>
	<citation>1976	5	2452</citation>
	<citation>2198	5	2452</citation>
	<citation>2452	5	2452</citation>
	<citation>2452	5	2452</citation>
	<citation>2452	5	2452</citation>
	<citation>2765	5	2452</citation>
	<citation>2882	5	2452</citation>
	<citation>849	5	2452</citation>
	<citation>1936	6	2452</citation>
	<citation>1976	6	2452</citation>
	<citation>2046	6	2452</citation>
	<citation>2198	6	2452</citation>
	<citation>2451	6	2452</citation>
	<citation>2452	6	2452</citation>
	<citation>2452	6	2452</citation>
	<citation>616	6	2452</citation>
	<citation>627	6	2452</citation>
	</citations>
	</document>
	<document id= '2451'>
	<title>Design of Tree Structures for Efficient Querying</title>
	<abstract>A standard information retrieval operation is to determine which records in a data collection  satisfy a given query expressed in terms of data values.  The process of locating the desired responses  can be represented by a tree search model.  This paper poses an optimization problem in the design of  such trees to serve a well-specified application. The problem is academic in the sense that ordinarily  the optimal tree cannot be implemented by means of practical techniques.  On the other hand, it is potentially  useful for the comparison it affords between observed performance and that of an intuitively attractive  ideal search procedure.  As a practical application of such a model this paper considers the design of  a novel tree search scheme based on a bit vector representation of data and shows that essentially the  same algorithm can be used to design either an ideal search tree or a bit-vector tree.  An experimental  study of a small formatted file illustrates the concepts.</abstract>
	<conference>CACM September, 1973</conference>
	<authors>
	<author>Casey, R. G.</author>
	</authors>
	<keywords>tree file, information storage and retrieval, clustering, search, data structure, data management,  query answering</keywords>
	<version>3.62 3.74</version>
	<location>CA730904 JB January 23, 1978  9:38 AM</location>
	<citations>
	<citation>1050	4	2451</citation>
	<citation>1234	4	2451</citation>
	<citation>1935	4	2451</citation>
	<citation>1936	4	2451</citation>
	<citation>2017	4	2451</citation>
	<citation>2032	4	2451</citation>
	<citation>2257	4	2451</citation>
	<citation>2257	4	2451</citation>
	<citation>2360	4	2451</citation>
	<citation>2360	4	2451</citation>
	<citation>2451	4	2451</citation>
	<citation>2451	4	2451</citation>
	<citation>2451	4	2451</citation>
	<citation>2451	4	2451</citation>
	<citation>2452	4	2451</citation>
	<citation>2452	4	2451</citation>
	<citation>2556	4	2451</citation>
	<citation>2556	4	2451</citation>
	<citation>2765	4	2451</citation>
	<citation>2978	4	2451</citation>
	<citation>944	5	2451</citation>
	<citation>1935	5	2451</citation>
	<citation>1936	5	2451</citation>
	<citation>2451	5	2451</citation>
	<citation>2451	5	2451</citation>
	<citation>2451	5	2451</citation>
	<citation>2765	5	2451</citation>
	<citation>2965	5	2451</citation>
	<citation>849	5	2451</citation>
	<citation>1936	6	2451</citation>
	<citation>1976	6	2451</citation>
	<citation>2046	6	2451</citation>
	<citation>2046	6	2451</citation>
	<citation>2451	6	2451</citation>
	<citation>2451	6	2451</citation>
	<citation>2452	6	2451</citation>
	<citation>616	6	2451</citation>
	</citations>
	</document>
	<document id= '2450'>
	<title>Empirical Working Set Behavior</title>
	<abstract>The working set model for program behavior has been proposed in recent years as a basis for  the design of scheduling and paging algorithms.  Although the words "working set" are now commonly encountered  in the literature dealing with resource allocation, there is a dearth of published data on program measurements,  in the hope that workers in the field might find experimental evidence upon which to substantiate and  base theoretical work.</abstract>
	<conference>CACM September, 1973</conference>
	<authors>
	<author>Rosell, J.</author>
	</authors>
	<keywords>virtual memory, paging, working set, software measurement, program behavior</keywords>
	<version>4.3</version>
	<location>CA730905 JB January 23, 1978  9:22 AM</location>
	<citations>
	<citation>2373	4	2450</citation>
	<citation>2374	4	2450</citation>
	<citation>2380	4	2450</citation>
	<citation>2450	4	2450</citation>
	<citation>2450	4	2450</citation>
	<citation>2595	4	2450</citation>
	<citation>2996	4	2450</citation>
	<citation>3006	4	2450</citation>
	<citation>3006	4	2450</citation>
	<citation>3067	4	2450</citation>
	<citation>3067	4	2450</citation>
	<citation>2373	5	2450</citation>
	<citation>2374	5	2450</citation>
	<citation>2450	5	2450</citation>
	<citation>2450	5	2450</citation>
	<citation>2450	5	2450</citation>
	</citations>
	</document>
	<document id= '2449'>
	<title>A Simple Technique for Structured Variable Lookup</title>
	<abstract>A simple technique for the symbol-table lookup of structured variables based on simple automata  theory is presented. The technique offers a deterministic solution to a problem which is currently handled  in a nondeterministic manner in PL/I and COBOL compilers.</abstract>
	<conference>CACM September, 1973</conference>
	<authors>
	<author>Gates, G. W.</author>
	<author>Poplawski, D. A.</author>
	</authors>
	<keywords>symbol table organization, PL/I and COBOL structured variables</keywords>
	<version>4.12</version>
	<location>CA730906 JB January 23, 1978  9:17 AM</location>
	<citations>
	<citation>2449	5	2449</citation>
	<citation>2449	5	2449</citation>
	<citation>2449	5	2449</citation>
	<citation>2659	5	2449</citation>
	<citation>2449	6	2449</citation>
	</citations>
	</document>
	<document id= '2448'>
	<title>Reversible Execution</title>
	<conference>CACM September, 1973</conference>
	<authors>
	<author>Zelkowitz, M. V.</author>
	</authors>
	<keywords>debugging, PL/I, reversible execution, backtracking</keywords>
	<version>4.22 4.42</version>
	<location>CA730907 JB January 23, 1978  8:54 AM</location>
	<citations>
	<citation>2448	5	2448</citation>
	<citation>2448	5	2448</citation>
	<citation>2448	5	2448</citation>
	</citations>
	</document>
	<document id= '2447'>
	<title>Sard Kernels for Certain Bivariate Cubatures</title>
	<abstract>An error analysis for some bivariate cubatures is given.  The remainders are obtained by the  use of Sard kernels.  Numerical results and computer graphs are given for some of the kernel functions.</abstract>
	<conference>CACM September, 1973</conference>
	<authors>
	<author>Barnhill, R. E.</author>
	<author>Pilcher, D. T.</author>
	</authors>
	<keywords>cubatures, Sard kernels, numerical integration, remainder formulas</keywords>
	<version>5.13 5.16</version>
	<location>CA730908 JB January 23, 1978  8:52 AM</location>
	<citations>
	<citation>2447	5	2447</citation>
	<citation>2447	5	2447</citation>
	<citation>2447	5	2447</citation>
	</citations>
	</document>
	<document id= '2446'>
	<title>Analysis of Skew Representations of the Symmetric Group (Algorithm A455)</title>
	<conference>CACM September, 1973</conference>
	<authors>
	<author>Hunter, D. B.</author>
	<author>Williams, J. M.</author>
	</authors>
	<keywords>symmetric group, skew representation, partition, Young diagram, lattice permutation, binary model,  outer product</keywords>
	<version>5.30</version>
	<location>CA730909 JB January 23, 1978  8:49 AM</location>
	<citations>
	<citation>2446	5	2446</citation>
	<citation>2446	5	2446</citation>
	<citation>2446	5	2446</citation>
	</citations>
	</document>
	<document id= '2445'>
	<title>Routing Problem (Algorithm A456)</title>
	<conference>CACM September, 1973</conference>
	<authors>
	<author>Fencl, Z.</author>
	</authors>
	<keywords>routing problem, shortest path, traveling salesman problem, Hamiltonian circuit</keywords>
	<version>5.40</version>
	<location>CA730910 JB January 23, 1978  8:47 AM</location>
	<citations>
	<citation>2445	5	2445</citation>
	<citation>2445	5	2445</citation>
	<citation>2445	5	2445</citation>
	</citations>
	</document>
	<document id= '2444'>
	<title>Finding All Cliques of an Undirected Graph (Algorithm A457)</title>
	<conference>CACM September, 1973</conference>
	<authors>
	<author>Bron, C.</author>
	<author>Kerbosch, J.</author>
	</authors>
	<keywords>cliques, maximal complete subgraphs, clusters, backtracking algorithm, branch and bound technique,  recursion</keywords>
	<version>3.71 5.32</version>
	<location>CA730911 JB January 23, 1978  8:44 AM</location>
	<citations>
	<citation>2444	5	2444</citation>
	<citation>2444	5	2444</citation>
	<citation>2444	5	2444</citation>
	</citations>
	</document>
	<document id= '2443'>
	<citations>
	<citation>2443	4	2443</citation>
	<citation>2443	5	2443</citation>
	<citation>2443	5	2443</citation>
	<citation>2443	5	2443</citation>
	<citation>747	5	2443</citation>
	</citations>
	<title>Generation of Permutations in Lexicographic Order (Algorithm R323)</title>
	<conference>CACM September, 1973</conference>
	<authors>
	<author>Roy, M. K.</author>
	</authors>
	<location>CA730912 JB January 23, 1978  8:39 AM</location>
	</document>
	<document id= '2442'>
	<citations>
	<citation>2442	5	2442</citation>
	<citation>2442	5	2442</citation>
	<citation>2442	5	2442</citation>
	</citations>
	<title>A Sparse Matrix Package (Algorithm R408)</title>
	<conference>CACM September, 1973</conference>
	<authors>
	<author>Lawrence, E. E.</author>
	</authors>
	<location>CA730913 JB January 23, 1978  8:37 AM</location>
	</document>
	<document id= '2441'>
	<citations>
	<citation>2441	5	2441</citation>
	<citation>2441	5	2441</citation>
	<citation>2441	5	2441</citation>
	</citations>
	<title>Hidden-Line Plotting Program (Algorithm R420)</title>
	<conference>CACM September, 1973</conference>
	<authors>
	<author>Williamson, H.</author>
	</authors>
	<location>CA730914 JB January 23, 1978  8:36 AM</location>
	</document>
	<document id= '2440'>
	<citations>
	<citation>2440	5	2440</citation>
	<citation>2440	5	2440</citation>
	<citation>2440	5	2440</citation>
	</citations>
	<title>Localization of the Roots of a Polynomial (Algorithm R429)</title>
	<conference>CACM September, 1973</conference>
	<authors>
	<author>Driessen, H. B.</author>
	<author>Hunt, E. W.</author>
	</authors>
	<location>CA730915 JB January 23, 1978  8:34 AM</location>
	</document>
	<document id= '2439'>
	<title>Multiple Terminals Under User Program Control in a Time-Sharing Environment</title>
	<abstract>User-written programs on the Dartmouth Time-Sharing system can communicate with many remote  terminals simultaneously and can control the interactions between these terminals.  Such programs can  be written using standard input and output instructions in any language available on the system.  This  paper describes how this multiple-terminal facility was implemented without requiring any changes in  the system executive or in any of the system's compilers or interpreters.</abstract>
	<conference>CACM October, 1973</conference>
	<authors>
	<author>McGeachie, J. S.</author>
	</authors>
	<keywords>DTSS, multiple terminals, remote terminals, remote consoles, time-sharing, on-line interaction,  on-line games</keywords>
	<version>3.81 4.32</version>
	<location>CA731001 JB January 23, 1978  8:33 AM</location>
	<citations>
	<citation>2439	5	2439</citation>
	<citation>2439	5	2439</citation>
	<citation>2439	5	2439</citation>
	</citations>
	</document>
	<document id= '2438'>
	<title>A Model and Stack Implementation of Multiple Environments</title>
	<abstract>Many control and access environment structures require that storage for a procedure activation  exist at times when control is not nested within the procedure activated.  This is straightforward to  implement by dynamic storage allocation with linked blocks for each activation, but rather expensive  in both time and space.  This paper presents an implementation technique using a single stack to hold  procedure activation storage which allows retention of that storage for durations not necessarily tied  to control flow.  The technique has the property that, in the simple case,it runs identically to the  usual automatic stack allocation and deallocation procedure.  Applications of this technique to multitasking,  coroutines, backtracking, label-valued variables, and functional arguments are discussed.  In the initial  model, a single real processor is assumed, and the implementation assumes multiple-processes coordinate  by passing control explicitly to one another.  A multiprocessor implementation requires only a few changes  to the basic technique, as described.</abstract>
	<conference>CACM October, 1973</conference>
	<authors>
	<author>Bobrow, D. G.</author>
	<author>Wegbreit, B.</author>
	</authors>
	<keywords>control structures, environments, stack allocation, dendrarchy, retention, dynamic storage allocation,  access environments, FUNARG problem, multitasking, coroutines, backtracking, label-valued variables,  functional arguments, multiprocessor systems, extensible control structures</keywords>
	<version>4.1 4.2 4.22 4.3 4.32 5.24</version>
	<location>CA731002 JB January 23, 1978  8:27 AM</location>
	<citations>
	<citation>1972	4	2438</citation>
	<citation>2156	4	2438</citation>
	<citation>2168	4	2438</citation>
	<citation>2438	4	2438</citation>
	<citation>2438	4	2438</citation>
	<citation>2723	4	2438</citation>
	<citation>2736	4	2438</citation>
	<citation>2833	4	2438</citation>
	<citation>2855	4	2438</citation>
	<citation>3074	4	2438</citation>
	<citation>3112	4	2438</citation>
	<citation>1826	5	2438</citation>
	<citation>2314	5	2438</citation>
	<citation>2438	5	2438</citation>
	<citation>2438	5	2438</citation>
	<citation>2438	5	2438</citation>
	<citation>2625	5	2438</citation>
	<citation>2922	5	2438</citation>
	<citation>3081	5	2438</citation>
	<citation>3101	5	2438</citation>
	<citation>3112	5	2438</citation>
	<citation>106	6	2438</citation>
	<citation>1380	6	2438</citation>
	<citation>1471	6	2438</citation>
	<citation>1753	6	2438</citation>
	<citation>1826	6	2438</citation>
	<citation>1972	6	2438</citation>
	<citation>2138	6	2438</citation>
	<citation>2193	6	2438</citation>
	<citation>2358	6	2438</citation>
	<citation>2438	6	2438</citation>
	<citation>2438	6	2438</citation>
	<citation>2438	6	2438</citation>
	<citation>2438	6	2438</citation>
	<citation>2438	6	2438</citation>
	<citation>2723	6	2438</citation>
	<citation>2736	6	2438</citation>
	<citation>2833	6	2438</citation>
	<citation>2838	6	2438</citation>
	<citation>3185	6	2438</citation>
	<citation>731	6	2438</citation>
	</citations>
	</document>
	<document id= '2437'>
	<title>General Performance Analysis of Key-to-Address Transformation Methods Using an Abstract File  Concept</title>
	<abstract>This paper presents a new approach to the analysis of performance of the various key-to-address  transformation methods.  In this approach the keys in a file are assumed to have been selected from the  key space according to a certain probabilistic selection algorithm.  All files with the same number of  keys selected from this key space will be suitably weighted in accordance with the algorithm, and the  average performance of the transformation methods on these files will be used as the potential of these  methods.  Using this analysis, methods with the same overall performance can be classified and key distributions  partial to certain transformations can be identified.  All this can be done analytically.  The approach  is applied to a group of transformation methods using files whose keys are selected randomly.</abstract>
	<conference>CACM October, 1973</conference>
	<authors>
	<author>Lum, V. Y.</author>
	</authors>
	<keywords>hashing, hashing techniques, hashing methods, hash coding, key transformation, key-to-address transformation,  direct addressing, randomizing, random access, scatter storage, information retrieval, hashing analysis,  randomization performance analysis</keywords>
	<version>3.7 3.72 3.73 3.74 3.79 4.9 5.9</version>
	<location>CA731003 JB January 20, 1978  11:51 AM</location>
	<citations>
	<citation>2258	4	2437</citation>
	<citation>2319	4	2437</citation>
	<citation>2313	4	2437</citation>
	<citation>2359	4	2437</citation>
	<citation>2437	4	2437</citation>
	<citation>2552	4	2437</citation>
	<citation>2781	4	2437</citation>
	<citation>2860	4	2437</citation>
	<citation>2991	4	2437</citation>
	<citation>2203	5	2437</citation>
	<citation>2437	5	2437</citation>
	<citation>2437	5	2437</citation>
	<citation>2437	5	2437</citation>
	</citations>
	</document>
	<document id= '2436'>
	<title>A Note on the Confinement Problem</title>
	<abstract>This note explores the problem of confining a program during its execution so that it cannot  transmit information to any other program except its caller.  A set of examples attempts to stake out  the boundaries of the problem.  Necessary conditions for a solution are stated and informally justified.</abstract>
	<conference>CACM October, 1973</conference>
	<authors>
	<author>Lampson, B. W.</author>
	</authors>
	<keywords>protection, confinement, proprietary program, privacy, security, leakage of data</keywords>
	<version>2.11 4.30</version>
	<location>CA731004 JB January 20, 1978  11:41 AM</location>
	<citations>
	<citation>2436	4	2436</citation>
	<citation>2626	4	2436</citation>
	<citation>2868	4	2436</citation>
	<citation>2870	4	2436</citation>
	<citation>2377	5	2436</citation>
	<citation>2436	5	2436</citation>
	<citation>2436	5	2436</citation>
	<citation>2436	5	2436</citation>
	<citation>2840	5	2436</citation>
	<citation>2869	5	2436</citation>
	<citation>3128	5	2436</citation>
	<citation>3158	5	2436</citation>
	<citation>1471	6	2436</citation>
	<citation>1746	6	2436</citation>
	<citation>2150	6	2436</citation>
	<citation>2356	6	2436</citation>
	<citation>2376	6	2436</citation>
	<citation>2436	6	2436</citation>
	<citation>2436	6	2436</citation>
	<citation>2436	6	2436</citation>
	<citation>2436	6	2436</citation>
	<citation>2597	6	2436</citation>
	<citation>2626	6	2436</citation>
	<citation>2629	6	2436</citation>
	<citation>2865	6	2436</citation>
	<citation>2866	6	2436</citation>
	<citation>2870	6	2436</citation>
	<citation>2912	6	2436</citation>
	<citation>3038	6	2436</citation>
	<citation>3082	6	2436</citation>
	<citation>3111	6	2436</citation>
	</citations>
	</document>
	<document id= '2435'>
	<title>A Class of Dynamic Memory Allocation Algorithms</title>
	<abstract>Anew dynamic memory allocation algorithm, the Fibonacci system, is introduced.  This algorithm  is similar to, but seems to have certain advantages over, the "buddy" system.  A generalization is mentioned  which includes both of these systems as special cases.</abstract>
	<conference>CACM October, 1973</conference>
	<authors>
	<author>Hirschberg, D. S.</author>
	</authors>
	<keywords>dynamic storage allocation, buddy system, simulation, Fibonacci, fragmentation</keywords>
	<version>3.89 4.32 4.39</version>
	<location>CA731005 JB January 20, 1978  11:38 AM</location>
	<citations>
	<citation>1389	4	2435</citation>
	<citation>1552	4	2435</citation>
	<citation>2162	4	2435</citation>
	<citation>2435	4	2435</citation>
	<citation>2596	4	2435</citation>
	<citation>2768	4	2435</citation>
	<citation>2845	4	2435</citation>
	<citation>2902	4	2435</citation>
	<citation>2955	4	2435</citation>
	<citation>1184	5	2435</citation>
	<citation>2435	5	2435</citation>
	<citation>2435	5	2435</citation>
	<citation>2435	5	2435</citation>
	<citation>2596	5	2435</citation>
	<citation>2747	5	2435</citation>
	<citation>2768	5	2435</citation>
	<citation>2845	5	2435</citation>
	<citation>2902	5	2435</citation>
	<citation>2911	5	2435</citation>
	<citation>2955	5	2435</citation>
	<citation>1051	6	2435</citation>
	<citation>1062	6	2435</citation>
	<citation>1184	6	2435</citation>
	<citation>1184	6	2435</citation>
	<citation>1184	6	2435</citation>
	<citation>1184	6	2435</citation>
	<citation>1184	6	2435</citation>
	<citation>1211	6	2435</citation>
	<citation>1552	6	2435</citation>
	<citation>1879	6	2435</citation>
	<citation>1879	6	2435</citation>
	<citation>1879	6	2435</citation>
	<citation>273	6	2435</citation>
	<citation>2435	6	2435</citation>
	<citation>2435	6	2435</citation>
	<citation>2435	6	2435</citation>
	<citation>2435	6	2435</citation>
	<citation>2435	6	2435</citation>
	<citation>2435	6	2435</citation>
	<citation>2435	6	2435</citation>
	<citation>2498	6	2435</citation>
	<citation>2596	6	2435</citation>
	<citation>2596	6	2435</citation>
	<citation>2598	6	2435</citation>
	<citation>2734	6	2435</citation>
	<citation>2734	6	2435</citation>
	<citation>2736	6	2435</citation>
	<citation>2747	6	2435</citation>
	<citation>2747	6	2435</citation>
	<citation>2747	6	2435</citation>
	<citation>2768	6	2435</citation>
	<citation>2768	6	2435</citation>
	<citation>2773	6	2435</citation>
	<citation>2773	6	2435</citation>
	<citation>2983	6	2435</citation>
	</citations>
	</document>
	<document id= '2434'>
	<title>Using Page Residency To Select the Working Set Parameter</title>
	<abstract>Denning's method for selecting the working set parameter, which uses interreference intervals,  is examined.  Several omissions in his model are noted, and new assumptions are introduced to overcome  these omissions.  Using this modified model, Dening's results on page residency are rederived and reconsidered  for selecting the working set parameter.</abstract>
	<conference>CACM October, 1973</conference>
	<authors>
	<author>Prieve, B. G.</author>
	</authors>
	<keywords>working set model, paging, program behavior,program modeling</keywords>
	<version>4.3</version>
	<location>CA731006 JB January 20, 1978  11:34 AM</location>
	<citations>
	<citation>1892	4	2434</citation>
	<citation>1901	4	2434</citation>
	<citation>2085	4	2434</citation>
	<citation>2095	4	2434</citation>
	<citation>2218	4	2434</citation>
	<citation>2277	4	2434</citation>
	<citation>2319	4	2434</citation>
	<citation>2329	4	2434</citation>
	<citation>2358	4	2434</citation>
	<citation>2373	4	2434</citation>
	<citation>2380	4	2434</citation>
	<citation>2434	4	2434</citation>
	<citation>2499	4	2434</citation>
	<citation>2501	4	2434</citation>
	<citation>2582	4	2434</citation>
	<citation>2669	4	2434</citation>
	<citation>2828	4	2434</citation>
	<citation>2863	4	2434</citation>
	<citation>2881	4	2434</citation>
	<citation>2928	4	2434</citation>
	<citation>2996	4	2434</citation>
	<citation>3006	4	2434</citation>
	<citation>3067	4	2434</citation>
	<citation>1751	5	2434</citation>
	<citation>2434	5	2434</citation>
	<citation>2434	5	2434</citation>
	<citation>2434	5	2434</citation>
	</citations>
	</document>
	<document id= '2433'>
	<title>Control Structures in Illiac IV Fortran</title>
	<abstract>As part of an effort to design and implement a Fortran compiler on the ILLIAC IV, an extended  Fortran, called IVTRAN, has been developed.  This language provides a means of expressing data and control  structures suitable for exploiting ILLIAC IV parallelism.  This paper reviews the hardware characteristics  of the ILLIAC and singles out unconventional features which could be expected to influence language (and  compiler) design.  The implications of these features for data layout and algorithm structure are discussed,  and the conclusion is drawn that data allocation rather than code structuring is the crucial ILLIAC optimization  problem.  A satisfactory method of data allocation is then presented.  Language structures to utilize  this storage method and express parallel algorithms are described.</abstract>
	<conference>CACM October, 1973</conference>
	<authors>
	<author>Millstein, R. E.</author>
	</authors>
	<keywords>array processing, parallelism detection, explicit parallelism, array allocation, parallel control  structures, ILLIAC IV Fortran</keywords>
	<version>4.12 4.21 4.22</version>
	<location>CA731007 JB January 20, 1978  11:30 AM</location>
	<citations>
	<citation>2433	5	2433</citation>
	<citation>2433	5	2433</citation>
	<citation>2433	5	2433</citation>
	<citation>2785	5	2433</citation>
	<citation>2433	6	2433</citation>
	<citation>2685	6	2433</citation>
	</citations>
	</document>
	<document id= '2432'>
	<title>Addendum to a Multiple-Precision Division Algorithm</title>
	<conference>CACM October, 1973</conference>
	<authors>
	<author>Mifsud, C. J.</author>
	<author>Bohlen, M. J.</author>
	</authors>
	<keywords>multiple-precision, division, overflow</keywords>
	<version>3.15 4.0 5.1</version>
	<location>CA731008 JB January 20, 1978  11:15 AM</location>
	<citations>
	<citation>2432	4	2432</citation>
	<citation>1975	5	2432</citation>
	<citation>2432	5	2432</citation>
	<citation>2432	5	2432</citation>
	<citation>2432	5	2432</citation>
	</citations>
	</document>
	<document id= '2431'>
	<title>Discrete Linear L1 Approximation by interval Linear Programming [E2] (Algorithm A458)</title>
	<conference>CACM October, 1973</conference>
	<authors>
	<author>Robers, P. D.</author>
	<author>Robers, S. S.</author>
	</authors>
	<keywords>discrete approximation, L1 approximation</keywords>
	<version>5.13 5.41</version>
	<location>CA731009 JB January 20, 1978  11:13 AM</location>
	<citations>
	<citation>2431	5	2431</citation>
	<citation>2431	5	2431</citation>
	<citation>2431	5	2431</citation>
	</citations>
	</document>
	<document id= '2430'>
	<title>The Elementary Circuits of a Graph [H] (Algorithm A459)</title>
	<conference>CACM October, 1973</conference>
	<authors>
	</authors>
	<keywords>algorithm, graph theory, circuit search algorithm, path search algorithm, searching</keywords>
	<version>3.74 4.22 5.32</version>
	<location>CA731010 JB January 20, 1978  11:11 AM</location>
	<citations>
	<citation>2430	4	2430</citation>
	<citation>1961	5	2430</citation>
	<citation>2430	5	2430</citation>
	<citation>2430	5	2430</citation>
	<citation>2430	5	2430</citation>
	</citations>
	</document>
	<document id= '2429'>
	<title>Calculation of Optimum Parameters for Alternating Direction Implicit Procedures [D3] (Algorithm  A460)</title>
	<conference>CACM October, 1973</conference>
	<authors>
	<author>Saylor, P. E.</author>
	<author>Sebastian, J. D.</author>
	</authors>
	<keywords>elliptic difference equations, Peaceman-Rachford, Douglas-Rachford, W. B. Jordan, optimum parameters,  alternating-direction-implicit, ADI</keywords>
	<version>5.14 5.17</version>
	<location>CA731011 JB January 20, 1978  11:09 AM</location>
	<citations>
	<citation>2429	5	2429</citation>
	<citation>2429	5	2429</citation>
	<citation>2429	5	2429</citation>
	</citations>
	</document>
	<document id= '2428'>
	<title>Cubic Spline Solutions to a Class of Functional Differential Equations [D2] (Algorithm A461)</title>
	<conference>CACM October, 1973</conference>
	<authors>
	<author>Burkowski, F. J.</author>
	<author>Hoskins, W. D.</author>
	</authors>
	<keywords>differential equation, spline approximation</keywords>
	<version>5.17</version>
	<location>CA731012 JB January 20, 1978  11:06 AM</location>
	<citations>
	<citation>2428	5	2428</citation>
	<citation>2428	5	2428</citation>
	<citation>2428	5	2428</citation>
	</citations>
	</document>
	<document id= '2427'>
	<title>Bivariate Normal Distribution [S15] (Algorithm A462)</title>
	<conference>CACM October, 1973</conference>
	<authors>
	</authors>
	<keywords>bivariate, normal Gaussian, frequency distribution</keywords>
	<version>5.5</version>
	<location>CA731013 JB January 20, 1978  11:03 AM</location>
	<citations>
	<citation>1987	4	2427</citation>
	<citation>2427	4	2427</citation>
	<citation>2427	4	2427</citation>
	<citation>1581	5	2427</citation>
	<citation>1636	5	2427</citation>
	<citation>2427	5	2427</citation>
	<citation>2427	5	2427</citation>
	<citation>2427	5	2427</citation>
	</citations>
	</document>
	<document id= '2426'>
	<title>Algorithms SCALE1, SCALE2, and SCALE3 for Determination of Scales on Computer Generated Plots  [J6] (Algorithm A463)</title>
	<conference>CACM October, 1973</conference>
	<authors>
	<author>Lewart, C. R.</author>
	</authors>
	<keywords>plotting, scaling for plotting</keywords>
	<version>4.41</version>
	<location>CA731014 JB January 20, 1978  11:01 AM</location>
	<citations>
	<citation>2426	5	2426</citation>
	<citation>2426	5	2426</citation>
	<citation>2426	5	2426</citation>
	</citations>
	</document>
	<document id= '2425'>
	<citations>
	<citation>2425	4	2425</citation>
	<citation>2313	5	2425</citation>
	<citation>2425	5	2425</citation>
	<citation>2425	5	2425</citation>
	<citation>2425	5	2425</citation>
	</citations>
	<title>The Programmer as Navigator</title>
	<conference>CACM November, 1973</conference>
	<authors>
	<author>Bachman, C. W.</author>
	</authors>
	<location>CA731101 JB January 20, 1978  10:59 AM</location>
	</document>
	<document id= '2424'>
	<title>Dynamic Verification of Operating System Decisions</title>
	<abstract>Dynamic verification of a decision implies that every time the decision is made there is a  consistency check performed on the decision using independent hardware and software.  The dynamic verification  of operating system decisions is used on the PRIME system being designed and constructed at the University  of California, Berkeley.  PRIME is an experimental time-sharing which is to have the properties of continuous  availability, data privacy, and cost effectiveness.  The technique of dynamic verification allows the  construction of an operating system which does not make certain decisions improperly even in the presence  of a single hardware or software fault.  Furthermore, multiple faults lead to unreliable operation only  if the faults happen to reinforce each other.  On PRIME, dynamic verification is used to ensure that  one user's information cannot become available to another user gratuitously even in the presence of a  single hardware or software fault.the amount of additional hardware and software required for dynamic  verification can be modest.</abstract>
	<conference>CACM November, 1973</conference>
	<authors>
	<author>Fabry, R. S.</author>
	</authors>
	<keywords>operating systems, data security, fault tolerance, software reliability, data privacy, program  verification, modular computer systems</keywords>
	<version>4.32</version>
	<location>CA731102 JB January 20, 1978  10:56 AM</location>
	<citations>
	<citation>1828	4	2424</citation>
	<citation>1854	4	2424</citation>
	<citation>1877	4	2424</citation>
	<citation>1960	4	2424</citation>
	<citation>2150	4	2424</citation>
	<citation>2317	4	2424</citation>
	<citation>2319	4	2424</citation>
	<citation>2377	4	2424</citation>
	<citation>2342	4	2424</citation>
	<citation>2376	4	2424</citation>
	<citation>2379	4	2424</citation>
	<citation>2424	4	2424</citation>
	<citation>2482	4	2424</citation>
	<citation>2618	4	2424</citation>
	<citation>2632	4	2424</citation>
	<citation>2704	4	2424</citation>
	<citation>2723	4	2424</citation>
	<citation>2738	4	2424</citation>
	<citation>2740	4	2424</citation>
	<citation>2741	4	2424</citation>
	<citation>2867	4	2424</citation>
	<citation>3184	4	2424</citation>
	<citation>1749	5	2424</citation>
	<citation>2424	5	2424</citation>
	<citation>2424	5	2424</citation>
	<citation>2424	5	2424</citation>
	</citations>
	</document>
	<document id= '2423'>
	<title>A Parser-Generating System for Constructing Compressed Compilers</title>
	<abstract>This paper describes a parser-generating system (PGS) currently in use on the CDC-6500 computer  at Purdue University.  The PGS is a Fortran-coded compiler.  In the input translation grammar, each BNF  syntactic rule corresponds to a (possibly empty) "code generator" realizable as an assembly language,  Fortran or Algol, subroutine that is called whenever that syntactic rule is applied in the parse of a  program.  Typical one-pass compilers constructed by the PGS translate source programs at speeds approaching  14,000 cards per minute.  For an XPL compiler, the parser program and its tables currently occupy 288  words of 60-bit core memory of which 140 words are parsing table entries and 82 words are links to code  generators.</abstract>
	<conference>CACM November, 1973</conference>
	<authors>
	<author>Mickunas, M. D.</author>
	<author>Schneider, V. B.</author>
	</authors>
	<keywords>parser generators, translator writing systems, syntactic analysis, normal-form grammars, pushdown  automata, translation grammars, translator optimization, compression algorithm</keywords>
	<version>4.12 5.22 5.23</version>
	<location>CA731103 JB January 20, 197810:41 AM</location>
	<citations>
	<citation>2179	4	2423</citation>
	<citation>2423	4	2423</citation>
	<citation>2423	4	2423</citation>
	<citation>1337	5	2423</citation>
	<citation>2015	5	2423</citation>
	<citation>2423	5	2423</citation>
	<citation>2423	5	2423</citation>
	<citation>2423	5	2423</citation>
	<citation>2733	5	2423</citation>
	<citation>1781	6	2423</citation>
	<citation>2179	6	2423</citation>
	<citation>2423	6	2423</citation>
	<citation>2786	6	2423</citation>
	<citation>799	6	2423</citation>
	</citations>
	</document>
	<document id= '2422'>
	<citations>
	<citation>2422	5	2422</citation>
	<citation>2422	5	2422</citation>
	<citation>2422	5	2422</citation>
	</citations>
	<title>Adaptive Correction of Program Statements (Corrigendum)</title>
	<conference>CACM November, 1973</conference>
	<authors>
	<author>James, E. B.</author>
	<author>Partridge, D. P.</author>
	</authors>
	<location>CA731104 JB January 20, 1978  10:29 AM</location>
	</document>
	<document id= '2421'>
	<title>A Scan Conversion Algorithm with Reduced Storage Requirements</title>
	<abstract>Most graphics systems using a raster scan output device (CRT or hardcopy) maintain a display  file in the XY or random scan format.  Scan converters, hardware or software, must be provided to translate  the picture description from the XY format to the raster format.  Published scan conversion algorithms  which are fast will reserve a buffer area large enough to accommodate the entire screen.  On the other  hand, those which use a small buffer area are slow because they require multiple passes through the XY  display file.  The scan conversion algorithm described here uses a linked list data structure to process  the lines of the drawing in strips corresponding to groups of scan lines.  A relatively small primary  memory buffer area is used to accumulate the binary image for a group of scan lines.  When this portion  of the drawing has been plotted, the buffer is reused for the next portion.  Because of the list processing  procedures used, only a single pass through the XY display file is required when generating the binary  image and only a slight increase in execution time over the fully buffered core results.  Results slow  that storage requirements can be reduced by more than 80 percent while causing less than a 10 percent  increase in execution time.</abstract>
	<conference>CACM November, 1973</conference>
	<authors>
	<author>Jordan, B. W. Jr.</author>
	<author>Barrett, R. C.</author>
	</authors>
	<keywords>graphics, scan conversion, raster plotter, line drawing, discrete image, dot generation</keywords>
	<version>4.41 6.35 8.2</version>
	<location>CA731105 JB January 20, 1978  10:28 AM</location>
	<citations>
	<citation>1891	4	2421</citation>
	<citation>2211	4	2421</citation>
	<citation>2421	4	2421</citation>
	<citation>2421	4	2421</citation>
	<citation>2674	4	2421</citation>
	<citation>2687	4	2421</citation>
	<citation>1741	5	2421</citation>
	<citation>2211	5	2421</citation>
	<citation>2421	5	2421</citation>
	<citation>2421	5	2421</citation>
	<citation>2421	5	2421</citation>
	<citation>2674	5	2421</citation>
	<citation>1741	6	2421</citation>
	<citation>2004	6	2421</citation>
	<citation>2421	6	2421</citation>
	<citation>2687	6	2421</citation>
	</citations>
	</document>
	<document id= '2420'>
	<title>Experiments with an Automatic Theorem-Prover HavingPartial Ordering Inference Rules</title>
	<abstract>Automatic theorem-provers need to be made much more efficient.  With this in mind, Slagle has  shown how the axioms for partial ordering can be replaced by built-in inference rules when using a particular  theorem-proving algorithm based upon hyper-resolution and paramodulation.  The new rules embody the transitivity  of partial orderings and the close relationship between  predicates.  A program has been developed using  a modified version of these rules.  This new theorem-prover has been found to be very powerful for solving  problems involving partial orderings.  This paper presents a detailed description of the program and  a comprehensive account of the experiments that have been performed with it.</abstract>
	<conference>CACM November, 1973</conference>
	<authors>
	<author>Slagle, J. R.</author>
	<author>Norton, L. M.</author>
	</authors>
	<keywords>theorem-proving, partial ordering, resolution, hyper-resolution, P1-resolution, paramodulation, inference rules, heuristics</keywords>
	<version>3.64 3.66</version>
	<location>CA731106 JB January 20, 1978  10:10 AM</location>
	<citations>
	<citation>2356	4	2420</citation>
	<citation>2420	4	2420</citation>
	<citation>2874	4	2420</citation>
	<citation>3143	4	2420</citation>
	<citation>2227	5	2420</citation>
	<citation>2420	5	2420</citation>
	<citation>2420	5	2420</citation>
	<citation>2420	5	2420</citation>
	</citations>
	</document>
	<document id= '2419'>
	<title>Eigenvalues of a Real, Symmetric, Tridiagonal Matrix [F2] (Algorithm A464)</title>
	<conference>CACM November, 1973</conference>
	<authors>
	<author>Reinsch, C. H.</author>
	</authors>
	<keywords>eigenvalues, QR Algorithm</keywords>
	<version>5.14</version>
	<location>CA731107 JB January 20, 1978  10:03 AM</location>
	<citations>
	<citation>2419	5	2419</citation>
	<citation>2419	5	2419</citation>
	<citation>2419	5	2419</citation>
	<citation>2825	5	2419</citation>
	<citation>2419	6	2419</citation>
	</citations>
	</document>
	<document id= '2418'>
	<title>Student's t Frequency [S14] (Algorithm A465)</title>
	<conference>CACM November, 1973</conference>
	<authors>
	<author>Hill, G. W.</author>
	</authors>
	<keywords>Student's t statistic, density function, series approximation</keywords>
	<version>5.12 5.5</version>
	<location>CA731108 JB January 20, 1978  10:01 AM</location>
	<citations>
	<citation>2418	5	2418</citation>
	<citation>2418	5	2418</citation>
	<citation>2418	5	2418</citation>
	</citations>
	</document>
	<document id= '2417'>
	<title>Four Combinatorial Algorithms [G6] (Algorithm A466)</title>
	<conference>CACM November, 1973</conference>
	<authors>
	<author>Ehrlich, G.</author>
	</authors>
	<keywords>permutations and combinations</keywords>
	<version>5.39</version>
	<location>CA731109 JB January 20, 1978  9:59 AM</location>
	<citations>
	<citation>2044	4	2417</citation>
	<citation>2189	4	2417</citation>
	<citation>2417	4	2417</citation>
	<citation>2505	4	2417</citation>
	<citation>2874	4	2417</citation>
	<citation>2908	4	2417</citation>
	<citation>2417	5	2417</citation>
	<citation>2417	5	2417</citation>
	<citation>2417	5	2417</citation>
	<citation>2834	5	2417</citation>
	<citation>2884	5	2417</citation>
	<citation>521	5	2417</citation>
	<citation>3115	5	2417</citation>
	<citation>907	6	2417</citation>
	<citation>969	6	2417</citation>
	<citation>2045	6	2417</citation>
	<citation>2045	6	2417</citation>
	<citation>2417	6	2417</citation>
	<citation>2417	6	2417</citation>
	<citation>2417	6	2417</citation>
	<citation>2466	6	2417</citation>
	<citation>2466	6	2417</citation>
	<citation>2884	6	2417</citation>
	<citation>579	6	2417</citation>
	<citation>785	6	2417</citation>
	</citations>
	</document>
	<document id= '2416'>
	<title>Matrix Transposition in Place [F1] (Algorithm A467)</title>
	<conference>CACM November, 1973</conference>
	<authors>
	<author>Brenner, N.</author>
	</authors>
	<keywords>transposition, matrix operations, permutations, primitive roots, number theory</keywords>
	<version>3.15 5.14 5.39</version>
	<location>CA731110JB January 20, 1978  9:58 AM</location>
	<citations>
	<citation>2057	4	2416</citation>
	<citation>2058	4	2416</citation>
	<citation>2392	4	2416</citation>
	<citation>2416	4	2416</citation>
	<citation>2416	4	2416</citation>
	<citation>1600	5	2416</citation>
	<citation>2058	5	2416</citation>
	<citation>2416	5	2416</citation>
	<citation>2416	5	2416</citation>
	<citation>2416	5	2416</citation>
	</citations>
	</document>
	<document id= '2415'>
	<title>Algorithm for Automatic Numerical Integration Over a Finite Interval [D1] (Algorithm A468)</title>
	<conference>CACM November, 1973</conference>
	<authors>
	<author>Patterson, T. N. L.</author>
	</authors>
	<keywords>automatic integration, numerical integration, automatic quadrature, numerical quadrature</keywords>
	<version>5.16</version>
	<location>CA731111 JB January 20, 1978  9:51 AM</location>
	<citations>
	<citation>1352	4	2415</citation>
	<citation>2415	4	2415</citation>
	<citation>2415	4	2415</citation>
	<citation>2415	4	2415</citation>
	<citation>2550	4	2415</citation>
	<citation>1040	5	2415</citation>
	<citation>1982	5	2415</citation>
	<citation>2074	5	2415</citation>
	<citation>2415	5	2415</citation>
	<citation>2415	5	2415</citation>
	<citation>2415	5	2415</citation>
	</citations>
	</document>
	<document id= '2414'>
	<title>Arithmetic Overa Finite Field [A1] (Algorithm A469)</title>
	<conference>CACM November, 1973</conference>
	<authors>
	<author>Lam, C.</author>
	<author>McKay, J.</author>
	</authors>
	<keywords>algebra</keywords>
	<version>5.19</version>
	<location>CA731112 JB January 20, 1978  9:25 AM</location>
	<citations>
	<citation>2414	5	2414</citation>
	<citation>2414	5	2414</citation>
	<citation>2414	5	2414</citation>
	</citations>
	</document>
	<document id= '2413'>
	<title>A Note on Subexpression Ordering in the Execution of Arithmetic Expressions</title>
	<abstract>A counterexample to the supposed optimality of an algorithm for generating schedules for trees  of tasks with unequal execution times is presented.  A comparison with the "critical path" heuristic  is discussed.</abstract>
	<conference>CACM November, 1973</conference>
	<authors>
	<author>Denning, P. J.</author>
	<author>Graham, G. S.</author>
	</authors>
	<keywords>scheduling, tree scheduling, task scheduling, multiprocessor scheduling</keywords>
	<version>4.32 8.3 8.1</version>
	<location>CA731113 JB January 25, 1978  4:24 PM</location>
	<citations>
	<citation>2413	4	2413</citation>
	<citation>2175	5	2413</citation>
	<citation>2413	5	2413</citation>
	<citation>2413	5	2413</citation>
	<citation>2413	5	2413</citation>
	</citations>
	</document>
	<document id= '2412'>
	<title>Comment on Brent's Scatter Storage Algorithm</title>
	<conference>CACM November, 1973</conference>
	<authors>
	<author>Feldman, J. A.</author>
	<author>Low, J. R.</author>
	</authors>
	<keywords>Hashing, information storage and retrieval, scatter storage, searching, symbol table</keywords>
	<version>3.7 3.73 3.74 4.1 4.9</version>
	<location>CA731114 JB January 19, 1978  4:40 PM</location>
	<citations>
	<citation>2412	4	2412</citation>
	<citation>3053	4	2412</citation>
	<citation>3083	4	2412</citation>
	<citation>2412	5	2412</citation>
	<citation>2412	5	2412</citation>
	<citation>2412	5	2412</citation>
	<citation>2543	5	2412</citation>
	<citation>3053	5	2412</citation>
	<citation>1329	6	2412</citation>
	<citation>1785	6	2412</citation>
	<citation>1973	6	2412</citation>
	<citation>1992	6	2412</citation>
	<citation>2107	6	2412</citation>
	<citation>2109	6	2412</citation>
	<citation>2412	6	2412</citation>
	<citation>2543	6	2412</citation>
	<citation>2673	6	2412</citation>
	<citation>2707	6	2412</citation>
	<citation>2770	6	2412</citation>
	</citations>
	</document>
	<document id= '2411'>
	<title>Tree-Structured Programs</title>
	<conference>CACM November, 1973</conference>
	<authors>
	<author>Wegner, E.</author>
	</authors>
	<keywords>control structures, flowcharts, goto statements, inductive assertion, least fix points, optimization  in compilers, program documentation, program flow graphs, programming language design, proof of programs,  semantics of programming languages, structured programming.</keywords>
	<version>4.12 4.22 5.24</version>
	<location>CA731115 JB January 19, 1978  4:19 PM</location>
	<citations>
	<citation>2411	4	2411</citation>
	<citation>2411	4	2411</citation>
	<citation>2457	4	2411</citation>
	<citation>2709	4	2411</citation>
	<citation>2889	4	2411</citation>
	<citation>2937	4	2411</citation>
	<citation>2989	4	2411</citation>
	<citation>3005	4	2411</citation>
	<citation>3025	4	2411</citation>
	<citation>3101	4	2411</citation>
	<citation>2138	5	2411</citation>
	<citation>2326	5	2411</citation>
	<citation>2411	5	2411</citation>
	<citation>2411	5	2411</citation>
	<citation>2411	5	2411</citation>
	</citations>
	</document>
	<document id= '2410'>
	<title>A Recurrence Scheme for Converting from One Orthogonal Expansion into Another</title>
	<abstract>A generalization of a scheme of Hamming for converting a polynomial Pn(x) into a Chebyshev  series is combined with a recurrence scheme of Clenshaw for summing any finite series whose terms satisfy  a three-term recurrence formula.</abstract>
	<conference>CACM November, 1973</conference>
	<authors>
	<author>Salzer, H. E.</author>
	</authors>
	<keywords>orthogonal expansions, series interconversion, recurrence schemes, Hamming recurrence, Clenshaw  recurrence, three-term recurrence, five-term recurrence, Chebyshev series</keywords>
	<version>5.12</version>
	<location>CA731116 JB January 19, 1978  4:16 PM</location>
	<citations>
	<citation>2410	5	2410</citation>
	<citation>2410	5	2410</citation>
	<citation>2410	5	2410</citation>
	</citations>
	</document>
	<document id= '2409'>
	<title>An Algorithm for the Approximate Solution of Wiener-Hopf Integral Equations</title>
	<abstract>An explicit approximate solution is given for an equation.  Where it is assumed that the classical  Wiener-Hopf technique may be applied.  It is furthermore assumed that Fourier transforms are known explicitly.   The approximate solution depends on two positive parameters.</abstract>
	<conference>CACM November, 1973</conference>
	<authors>
	<author>Stenger, F.</author>
	</authors>
	<keywords>integral equations, Wiener-Hopf, convolution, approximate solution</keywords>
	<version>5.18</version>
	<location>CA731117 JB January 19, 1978  3:36 PM</location>
	<citations>
	<citation>2409	5	2409</citation>
	<citation>2409	5	2409</citation>
	<citation>2409	5	2409</citation>
	</citations>
	</document>
	<document id= '2408'>
	<title>Solving the Biharmonic Equation in a Square: A Direct Versus a Semidirect Method</title>
	<abstract>Two methods for solving the biharmonic equation are compared.  One method is direct, using  eigenvalue-eigenvector decomposition.  The other method is iterative, solving a Poisson equation directly  at each iteration.</abstract>
	<conference>CACM November, 1973</conference>
	<authors>
	<author>Ehrlich, L. W.</author>
	</authors>
	<keywords>biharmonic, direct method, block iterative, eigenvector-eigenvalue decomposition</keywords>
	<version>5.14 5.17</version>
	<location>CA731118 JB January 19, 1978  3:28 PM</location>
	<citations>
	<citation>2408	5	2408</citation>
	<citation>2408	5	2408</citation>
	<citation>2408	5	2408</citation>
	</citations>
	</document>
	<document id= '2407'>
	<title>Curriculum Recommendations for Undergraduate Programs in Information Systems</title>
	<abstract>The need for education related to information systems in organizations is discussed, and a  curriculum is proposed for an undergraduate program.  Material necessary for such programs is identified,  and courses incorporating it are specified.Detailed course descriptions are presented.  Program organization  and a problems of implementation are discussed.</abstract>
	<conference>CACM December, 1973</conference>
	<authors>
	<author>Couger, J. D.</author>
	</authors>
	<keywords>education, undergraduate curricula, management systems, information systems, information analysis,  system design, systems analysis</keywords>
	<version>1.52 3.51</version>
	<location>CA731201 JB January 19, 1978  3:24 PM</location>
	<citations>
	<citation>2163	4	2407</citation>
	<citation>2345	4	2407</citation>
	<citation>2407	4	2407</citation>
	<citation>2407	4	2407</citation>
	<citation>2407	4	2407</citation>
	<citation>2852	4	2407</citation>
	<citation>3003	4	2407</citation>
	<citation>3003	4	2407</citation>
	<citation>3011	4	2407</citation>
	<citation>3050	4	2407</citation>
	<citation>2163	5	2407</citation>
	<citation>2181	5	2407</citation>
	<citation>2345	5	2407</citation>
	<citation>2407	5	2407</citation>
	<citation>2407	5	2407</citation>
	<citation>2407	5	2407</citation>
	<citation>3003	5	2407</citation>
	<citation>1659	6	2407</citation>
	<citation>1678	6	2407</citation>
	<citation>1927	6	2407</citation>
	<citation>1945	6	2407</citation>
	<citation>2097	6	2407</citation>
	<citation>2147	6	2407</citation>
	<citation>2163	6	2407</citation>
	<citation>2187	6	2407</citation>
	<citation>2329	6	2407</citation>
	<citation>2345	6	2407</citation>
	<citation>2367	6	2407</citation>
	<citation>2407	6	2407</citation>
	<citation>2478	6	2407</citation>
	<citation>2479	6	2407</citation>
	<citation>2480	6	2407</citation>
	<citation>2538	6	2407</citation>
	</citations>
	</document>
	<document id= '2406'>
	<title>A Data Definition and Mapping Language</title>
	<abstract>A data definition language i sa declarative computer language for specifying data structures.   Most data definition languages concentrate on the declaration of logical data structures with little  concern for how these structures are physically realized on a computer system.  However, the need for  data definition languages which describe both the logical and physical aspects of data is increasingly  apparent.  Such languages will be a key systems, as well as in advanced data management systems and distributed  data bases.  This paper reviews past work in the data definition language for describing both logical  and physical aspects of data.  Applications of these "generalized" data definition languages are also  discussed.</abstract>
	<conference>CACM December, 1973</conference>
	<authors>
	<author>Sibley, E. H.</author>
	<author>Taylor, R. W.</author>
	</authors>
	<keywords>data definition language, data and storage structure, data translation, data base management systems,  file translation</keywords>
	<version>3.51 3.70 3.73 4.29 4.82</version>
	<location>CA731202 JB January 19, 1978  2:58 PM</location>
	<citations>
	<citation>2155	4	2406</citation>
	<citation>2406	4	2406</citation>
	<citation>2710	4	2406</citation>
	<citation>2715	4	2406</citation>
	<citation>2716	4	2406</citation>
	<citation>2717	4	2406</citation>
	<citation>2718	4	2406</citation>
	<citation>2765	4	2406</citation>
	<citation>2817	4	2406</citation>
	<citation>2888	4	2406</citation>
	<citation>2901	4	2406</citation>
	<citation>2957	4	2406</citation>
	<citation>2959	4	2406</citation>
	<citation>2965	4	2406</citation>
	<citation>3087	4	2406</citation>
	<citation>3154	4	2406</citation>
	<citation>2046	5	2406</citation>
	<citation>2406	5	2406</citation>
	<citation>2406	5	2406</citation>
	<citation>2406	5	2406</citation>
	<citation>2717	5	2406</citation>
	<citation>2046	6	2406</citation>
	<citation>2406	6	2406</citation>
	</citations>
	</document>
	<document id= '2405'>
	<title>Linear Systems with Almost Tridiagonal Matrix [F4] (Algorithm A470)</title>
	<conference>CACM December, 1973</conference>
	<authors>
	<author>Kubicek, M.</author>
	</authors>
	<keywords>system of linear equations, almost tridiagonal matrix, sparse matrix</keywords>
	<version>5.14</version>
	<location>CA731203 JB January 19, 1978  2:50 PM</location>
	<citations>
	<citation>2405	5	2405</citation>
	<citation>2405	5	2405</citation>
	<citation>2405	5	2405</citation>
	</citations>
	</document>
	<document id= '2404'>
	<title>Exponential Integrals [S13] (Algorithm A471)</title>
	<conference>CACM December, 1973</conference>
	<authors>
	<author>Gautschi, W.</author>
	</authors>
	<keywords>exponential integral, recurrence relations, recursive computation, continued fractions</keywords>
	<version>5.12</version>
	<location>CA731204 JB January 19, 1978  2:48 PM</location>
	<citations>
	<citation>2404	4	2404</citation>
	<citation>2119	5	2404</citation>
	<citation>2404	5	2404</citation>
	<citation>2404	5	2404</citation>
	<citation>2404	5	2404</citation>
	</citations>
	</document>
	<document id= '2403'>
	<title>Procedures for Natural Spline Interpolation [E1] (Algorithm A472)</title>
	<conference>CACM December, 1973</conference>
	<authors>
	<author>Herriot, J. G.</author>
	</authors>
	<keywords>approximation, interpolation, spline, natural spline, spline approximation, cubic natural spline</keywords>
	<version>5.13</version>
	<location>CA731205 JB January 19, 1978  2:47 PM</location>
	<citations>
	<citation>2403	5	2403</citation>
	<citation>2403	5	2403</citation>
	<citation>2403	5	2403</citation>
	</citations>
	</document>
	<document id= '2402'>
	<title>Pictorial Pattern Recognition and the Phase Problem of X-ray Crystallography</title>
	<abstract>The availability of interactive, three-dimensional, computer graphics systems coupled to powerful  digital computers encourages the development of algorithms adapted to this environment.  Pictorial pattern  recognition techniques make possible a number of approaches to X-ray structure determination based on  molecular model building, i.e. the use of chemical information to frame "structural hypotheses" which  can computationally be tested and refined by reference to the experimental data.  Application of standard  pattern recognition algorithms is hindered by the fact that the cross-correlation between a model and  the correct structure cannot be computed because of a fundamental incompleteness in the measured data.   However, it is possible to compute an upper bound to such a cross-correlation.  A simple example demonstrates  that this information can be the basis of a technique for structure determination that can make effective  use of an interactive graphics system. Model building by cross-correlations has intrinsic advantages  over usual crystallographic techniques based on the autocorrelation or Patterson function, especially  for large structures.  This is significant, for crystallography of biological macromolecules hasbeen  and will continue to be a field of intense interest.</abstract>
	<conference>CACM January, 1972</conference>
	<authors>
	<author>Lesk, A. M.</author>
	</authors>
	<keywords>pictorial pattern recognition, phase problem, X-ray crystallography, interactive graphics</keywords>
	<version>3.13 3.17 3.63</version>
	<location>CA720101 JB February 1, 1978  9:53 AM</location>
	<citations>
	<citation>2402	5	2402</citation>
	<citation>2402	5	2402</citation>
	<citation>2402	5	2402</citation>
	</citations>
	</document>
	<document id= '2401'>
	<title>On Shrinking Binary Picture Patterns</title>
	<abstract>A parallel processing algorithm for shrinking binary patterns to obtain single isolated elements,  one for each pattern, is presented.  This procedure may be used for counting patterns on a matrix, and  a hardware implementation of the algorithm using large scale integrated technology is envisioned.  The  principal features of this method are the very small window employed (two-by-two elements), the parallel  nature of the process, and the possibility of shrinking any pattern, regardless of the complexity of  its configuration.  Problems regarding merging and disconnection of patterns during the process as well  as the determination of the maximum number of steps necessary to obtain a single isolated element from  a pattern, are reviewed and discussed.  An analogy with a neural network description, in terms of McCulloch-Pitts  "neurons" is presented.</abstract>
	<conference>CACM January, 1972</conference>
	<authors>
	<author>Levialdi, S.</author>
	</authors>
	<keywords>counting binary patterns, shrinking, parallel processing, multiple connected pictures</keywords>
	<version>3.63</version>
	<location>CA720102 JB February 1, 1978  9:43 AM</location>
	<citations>
	<citation>2401	5	2401</citation>
	<citation>2401	5	2401</citation>
	<citation>2401	5	2401</citation>
	</citations>
	</document>
	<document id= '2400'>
	<title>Use of the Hough Transformation ToDetect Lines and Curves in Pictures</title>
	<abstract>Hough has proposed an interesting and computationally efficient procedure for detecting lines  in pictures.  This paper points out that the use of angle-radius rather than slope-intercept parameters  simplifies the computation further.  It also shows how the method can be used for more general curve  fitting, and gives alternative interpretations that explain the source of its efficiency.</abstract>
	<conference>CACM January, 1972</conference>
	<authors>
	<author>Duda, R. O.</author>
	<author>Hart, P. E.</author>
	</authors>
	<keywords>picture processing, pattern recognition, line detection, curve detection, colinear points, point-line  transformation, Hough transformation</keywords>
	<version>3.63</version>
	<location>CA720103 JB February 1, 1978  9:36 AM</location>
	<citations>
	<citation>2400	5	2400</citation>
	<citation>2400	5	2400</citation>
	<citation>2400	5	2400</citation>
	<citation>2788	5	2400</citation>
	<citation>2910	5	2400</citation>
	<citation>2400	6	2400</citation>
	<citation>2400	6	2400</citation>
	<citation>2788	6	2400</citation>
	</citations>
	</document>
	<document id= '2399'>
	<title>A CRT Editing System</title>
	<abstract>A test-editing and manipulation program is described.  The program operates from low-cost cathode-ray  tube entry and display stations with keyboard and 13 function buttons. Applications, potential economy  of operation, and some aspects of implementation are discussed.</abstract>
	<conference>CACM January, 1972</conference>
	<authors>
	<author>Irons, E. T.</author>
	<author>Djorup, F. M.</author>
	</authors>
	<keywords>editing, text, cathode-ray tube entry display, time-sharing</keywords>
	<version>3.7 4.3</version>
	<location>CA720104 JB February 1, 1978  9:31 AM</location>
	<citations>
	<citation>2399	5	2399</citation>
	<citation>2399	5	2399</citation>
	<citation>2399	5	2399</citation>
	</citations>
	</document>
	<document id= '2398'>
	<title>Teacher/Student Authored CAI Using the NEWBASIC System</title>
	<abstract>The pedagogical advantages of a general purpose interactive system called NEWBASIC/CATALYST  are discussed.  NEWBASIC/CATALYSTincorporates an advanced implementation of BASIC, system-level interactive  features, and a general capability for extension through user oriented function attachment,  Application  of this last feature to provide a flexible CAI scan capability is illustrated.  An example of interaction  at the system level shows how students can mix the advantages of independent or "solo" mode computing  with those of guided or "dual" mode interaction.  Preliminary experience with the system in an urban  secondary school setting is discussed.</abstract>
	<conference>CACM January, 1972</conference>
	<authors>
	<author>Dwyer, T. A.</author>
	</authors>
	<keywords>CAI, BASIC, CATALYST, NEWBASIC, education, computers in education, extended languages, interactive  systems</keywords>
	<version>1.50 1.51 3.32 4.22</version>
	<location>CA720105 JB February 1, 1978  9:28 AM</location>
	<citations>
	<citation>2309	5	2398</citation>
	<citation>2398	5	2398</citation>
	<citation>2398	5	2398</citation>
	<citation>2398	5	2398</citation>
	<citation>1856	6	2398</citation>
	<citation>2398	6	2398</citation>
	</citations>
	</document>
	<document id= '2397'>
	<citations>
	<citation>2397	5	2397</citation>
	<citation>2397	5	2397</citation>
	<citation>2397	5	2397</citation>
	</citations>
	<title>Optimizing the Polyphase Sort (Corrigendum)</title>
	<conference>CACM January, 1972</conference>
	<authors>
	<author>Shell, D. L.</author>
	</authors>
	<location>CA720106 JB February 1, 1978  9:21 AM</location>
	</document>
	<document id= '2396'>
	<title>MUSE: A Model To Understand Simple English</title>
	<abstract>MUSE is a computer model for natural language processing, based on a semantic memory network  like that of Quillian's TLC.  MUSE, from a Model to Understand Simple English, processes English sentences  of unrestricted content but somewhat restricted format.  The model first applies syntactic analysis to  eliminate some interpretations and then employs a simplified semantic intersection procedure to find  a valid interpretation of the input.  While the semantic processing is similar to TLC's, the syntactic  component includes the early use of parse trees and special purpose rules.  The "relational triple" notation  used during interpretation of input is compatible with MUSE's memory structures, allowing direct verification  of familiar concepts and the addition of new ones.  MUSE also has a repertoire of actions, which range  from editing and reporting the contents of its own memory to an indirect form of question answering.   Examples are presented to demonstrate how the model interprets text, resolves ambiguities, adds information  to memory, generalizes from examples and performs various actions.</abstract>
	<conference>CACM January, 1972</conference>
	<authors>
	<author>McCalla, G. I.</author>
	<author>Sampson, J. R.</author>
	</authors>
	<keywords>natural language processing, semantic memory, text comprehension, question answering, artificial  intelligence, human memory simulation</keywords>
	<version>3.36 3.42 3.62 3.65 3.74</version>
	<location>CA720107 JB February 1, 1978  9:20 AM</location>
	<citations>
	<citation>1400	4	2396</citation>
	<citation>1553	4	2396</citation>
	<citation>1945	4	2396</citation>
	<citation>2127	4	2396</citation>
	<citation>2127	4	2396</citation>
	<citation>2178	4	2396</citation>
	<citation>2309	4	2396</citation>
	<citation>2310	4	2396</citation>
	<citation>2396	4	2396</citation>
	<citation>2396	4	2396</citation>
	<citation>2396	4	2396</citation>
	<citation>2396	4	2396</citation>
	<citation>2561	4	2396</citation>
	<citation>2730	4	2396</citation>
	<citation>1487	5	2396</citation>
	<citation>1856	5	2396</citation>
	<citation>2092	5	2396</citation>
	<citation>2127	5	2396</citation>
	<citation>2396	5	2396</citation>
	<citation>2396	5	2396</citation>
	<citation>2396	5	2396</citation>
	</citations>
	</document>
	<document id= '2395'>
	<title>Quadratic Programming for Nonlinear Regression</title>
	<abstract>A quadratic programming algorithm is described for use with the magnified diagonal method of  nonlinear regression with linear constraints.  The regression method is published in JACM, July 1970.</abstract>
	<conference>CACM January, 1972</conference>
	<authors>
	<author>Shrager, R. I.</author>
	</authors>
	<keywords>nonlinear equations, nonlinear regression, nonlinear programming, quadratic programming, least  squares, inequality, constraints, iteration</keywords>
	<version>5.15 5.41</version>
	<location>CA720108 JB February 1, 1978  9:09 AM</location>
	<citations>
	<citation>2395	5	2395</citation>
	<citation>2395	5	2395</citation>
	<citation>2395	5	2395</citation>
	</citations>
	</document>
	<document id= '2394'>
	<title>Ordering +-f(+-f(+-f(...+-f(x)..))) When f(x) Is Positive Monotonic</title>
	<conference>CACM January, 1972</conference>
	<authors>
	<author>Salzer, H. E.</author>
	</authors>
	<keywords>ordering, storage, retrieval, positive functions, monotonic functions, increasing functions, decreasing  function, binary system, Chebyshev zeros, square rots, continued fractions</keywords>
	<version>5.40</version>
	<location>CA720109 JB February 1, 1978  9:05 AM</location>
	<citations>
	<citation>2394	4	2394</citation>
	<citation>2394	4	2394</citation>
	<citation>1872	5	2394</citation>
	<citation>1903	5	2394</citation>
	<citation>2394	5	2394</citation>
	<citation>2394	5	2394</citation>
	<citation>2394	5	2394</citation>
	<citation>2533	5	2394</citation>
	<citation>2394	6	2394</citation>
	</citations>
	</document>
	<document id= '2393'>
	<title>Calculation of Fourier Integrals [D1] (Algorithm A418)</title>
	<conference>CACM January, 1972</conference>
	<authors>
	<author>Einarsson, B.</author>
	</authors>
	<keywords>quadrature, Filon quadrature, integration, Filon integration, Fourier coefficients, Fourier integrals,  Fourier series, spline, spline approximation, spline quadrature, extrapolation, Richardson extrapolation</keywords>
	<version>5.16</version>
	<location>CA720110 JB February 1, 1978  9:00 AM</location>
	<citations>
	<citation>1857	4	2393</citation>
	<citation>2393	4	2393</citation>
	<citation>2393	4	2393</citation>
	<citation>1858	5	2393</citation>
	<citation>2071	5	2393</citation>
	<citation>2393	5	2393</citation>
	<citation>2393	5	2393</citation>
	<citation>2393	5	2393</citation>
	</citations>
	</document>
	<document id= '2392'>
	<title>In-Situ Transposition of a Rectangular Matrix [F1] (Algorithm C380)</title>
	<conference>CACM January, 1972</conference>
	<authors>
	<author>Macleod, I. D. G.</author>
	</authors>
	<keywords>rectangular matrix, transpose</keywords>
	<version>5.14</version>
	<location>CA720111 JB February 1, 1978  8:57 AM</location>
	<citations>
	<citation>2057	4	2392</citation>
	<citation>2057	4	2392</citation>
	<citation>2058	4	2392</citation>
	<citation>2392	4	2392</citation>
	<citation>2392	4	2392</citation>
	<citation>2416	4	2392</citation>
	<citation>1600	5	2392</citation>
	<citation>2055	5	2392</citation>
	<citation>2392	5	2392</citation>
	<citation>2392	5	2392</citation>
	<citation>2392	5	2392</citation>
	</citations>
	</document>
	<document id= '2391'>
	<title>Unitary Symmetric Polynomials [Z] (Algorithm R391)</title>
	<conference>CACM January, 1972</conference>
	<authors>
	<author>Schrack, G. F.</author>
	</authors>
	<keywords>symmetric polynomials, elementary symmetric polynomials, unitary symmetric polynomials, polynomial  synthesis, reverse Horner scheme, reverse synthetic division, binomial coefficients</keywords>
	<version>5.11 5.30 5.5</version>
	<location>CA720112 JB February 1, 1978  8:55 AM</location>
	<citations>
	<citation>2391	5	2391</citation>
	<citation>2391	5	2391</citation>
	<citation>2391	5	2391</citation>
	</citations>
	</document>
	<document id= '2390'>
	<title>A Proposal for a Computer-Based Interactive Scientific Community</title>
	<abstract>Because of the problems created by the explosion of papers in the mathematical sciences and  the drawbacks that this places on research, it is suggested that a tree of all mathematical results and  terminology be maintained in a multiterminal computer system.  Users of the system can store in the computer  an updated file of their current knowledge, and on selecting a paper to read, they can obtain from the  computer the minimum subtree of theorems required to bring them from what they already know to the background  knowledge which the paper assumes.  Under certain conditions, means are also provided for the contribution  of useful comments by the readers of a work and for interaction between commentators and with the author.   This paper describes how the system can be organized and the role required of readers, writers, and  commentators.</abstract>
	<conference>CACM February, 1972</conference>
	<authors>
	<author>Pager, D.</author>
	</authors>
	<keywords>interactive system, organization of scientific community, readers, writers, commentators, computer  utility, information retrieval, trees, data structures</keywords>
	<version>1.0 1.1 1.59 2.10 3.15 3.32 3.50 3.51 3.70 3.71 3.74 3.9</version>
	<location>CA720201 JB February 1, 1978  8:51 AM</location>
	<citations>
	<citation>2390	5	2390</citation>
	<citation>2390	5	2390</citation>
	<citation>2390	5	2390</citation>
	<citation>2519	5	2390</citation>
	<citation>2390	6	2390</citation>
	</citations>
	</document>
	<document id= '2389'>
	<title>Preliminary Report on a System for General Space Planning</title>
	<abstract>A computer language and a set of programs within that language are described which allow the  formulating and solving of a class of space planning problems.  The language is an extension of Algol  and includes means to represent spaces and objects, to manipulate them, and to test the resulting arrangements  according to a variety of constraints.  The algorithms used to solve problems expressed in this language  rely on heuristic programming.  Both the language and the search algorithms are detailed.</abstract>
	<conference>CACM February, 1972</conference>
	<authors>
	<author>Eastman, C. M.</author>
	</authors>
	<keywords>automated design, architecture, heuristic programs, space planning</keywords>
	<version>3.20 3.40 3.64 3.66</version>
	<location>CA720202 JB January 31, 1978  4:35 PM</location>
	<citations>
	<citation>2389	4	2389</citation>
	<citation>2078	5	2389</citation>
	<citation>2389	5	2389</citation>
	<citation>2389	5	2389</citation>
	<citation>2389	5	2389</citation>
	</citations>
	</document>
	<document id= '2388'>
	<title>Optimizing Binary Trees Grown With a Sorting Algorithm</title>
	<abstract>Items can be retrieved from binary trees grown with a form of the Algorithm Quicksort in an  average time proportional to log n, where n is the number of items in the tree.  The binary trees grown  by this algorithm sometimes have some branches longer than others; therefore, it is possible to reduce  the average retrieval time by restructuring the tree to make the branches as uniform in length as possible.   An algorithm to do this is presented.  The use of this algorithm is discussed, and it is compared with  another which restructures the tree after each new item is added.</abstract>
	<conference>CACM February, 1972</conference>
	<authors>
	<author>Martin, W. A.</author>
	<author>Ness, D. N.</author>
	</authors>
	<keywords>retrieving information from binary trees, global and local optimization, sorting, recursion</keywords>
	<version>3.74 5.31</version>
	<location>CA720203 JB January 31, 1978  4:30 PM</location>
	<citations>
	<citation>1175	4	2388</citation>
	<citation>1919	4	2388</citation>
	<citation>1919	4	2388</citation>
	<citation>1969	4	2388</citation>
	<citation>1997	4	2388</citation>
	<citation>2191	4	2388</citation>
	<citation>2191	4	2388</citation>
	<citation>2388	4	2388</citation>
	<citation>2388	4	2388</citation>
	<citation>2679	4	2388</citation>
	<citation>2783	4	2388</citation>
	<citation>2784	4	2388</citation>
	<citation>3054	4	2388</citation>
	<citation>3054	4	2388</citation>
	<citation>3121	4	2388</citation>
	<citation>3121	4	2388</citation>
	<citation>864	4	2388</citation>
	<citation>308	5	2388</citation>
	<citation>309	5	2388</citation>
	<citation>2388	5	2388</citation>
	<citation>2388	5	2388</citation>
	<citation>2388	5	2388</citation>
	<citation>2455	5	2388</citation>
	<citation>2493	5	2388</citation>
	<citation>2889	5	2388</citation>
	<citation>2968	5	2388</citation>
	<citation>2138	6	2388</citation>
	<citation>2278	6	2388</citation>
	<citation>2388	6	2388</citation>
	<citation>2388	6	2388</citation>
	<citation>2388	6	2388</citation>
	<citation>2388	6	2388</citation>
	<citation>2455	6	2388</citation>
	<citation>2455	6	2388</citation>
	</citations>
	</document>
	<document id= '2387'>
	<title>Maximum Computing Power and Cost Factors in the Centralization Problem</title>
	<abstract>A simple analysis of some computer-economic factors involved in comparing multimachine installations  versus large single machine installations is given, and a mathematical model is derived to assist policy  decisions.</abstract>
	<conference>CACM February, 1972</conference>
	<authors>
	<author>Oldehoeft, A. E.</author>
	<author>Halstead, M. H.</author>
	</authors>
	<keywords>centralization, decentralization, economics of computers, computer management, economies of scale</keywords>
	<version>2.41</version>
	<location>CA720204 JB January 31, 1978  4:25 PM</location>
	<citations>
	<citation>1653	4	2387</citation>
	<citation>2387	4	2387</citation>
	<citation>2387	4	2387</citation>
	<citation>2852	4	2387</citation>
	<citation>1417	5	2387</citation>
	<citation>2387	5	2387</citation>
	<citation>2387	5	2387</citation>
	<citation>2387	5	2387</citation>
	<citation>2852	5	2387</citation>
	<citation>3050	5	2387</citation>
	<citation>3190	5	2387</citation>
	<citation>1417	6	2387</citation>
	<citation>1771	6	2387</citation>
	<citation>2345	6	2387</citation>
	<citation>2345	6	2387</citation>
	<citation>2387	6	2387</citation>
	<citation>2387	6	2387</citation>
	<citation>2479	6	2387</citation>
	</citations>
	</document>
	<document id= '2386'>
	<citations>
	<citation>2386	5	2386</citation>
	<citation>2386	5	2386</citation>
	<citation>2386	5	2386</citation>
	</citations>
	<title>Dynamic Microprogramming: Processor Organization and Programming (Corrigendum)</title>
	<conference>CACM February, 1972</conference>
	<authors>
	<author>Tucker, A. B.</author>
	</authors>
	<location>CA720205 JB January 31, 1978  4:21 PM</location>
	</document>
	<document id= '2385'>
	<title>Zeros of a Complex Polynomial [C2] (Algorithm A419)</title>
	<conference>CACM February, 1972</conference>
	<authors>
	<author>Jenkins, M. A.</author>
	<author>Traub, J. F.</author>
	</authors>
	<keywords>roots, roots of a polynomial, zeros of a polynomial</keywords>
	<version>5.15</version>
	<location>CA720206 JB January 31, 1978  4:14 PM</location>
	<citations>
	<citation>2385	5	2385</citation>
	<citation>2385	5	2385</citation>
	<citation>2385	5	2385</citation>
	</citations>
	</document>
	<document id= '2384'>
	<title>Hidden-Line Plotting Program [J6] (Algorithm A420)</title>
	<conference>CACM February, 1972</conference>
	<authors>
	<author>Williamson, H.</author>
	</authors>
	<keywords>hidden-line plot, surface plot</keywords>
	<version>4.9</version>
	<location>CA720207 JB January 31, 1978  4:12 PM</location>
	<citations>
	<citation>2384	5	2384</citation>
	<citation>2384	5	2384</citation>
	<citation>2384	5	2384</citation>
	</citations>
	</document>
	<document id= '2383'>
	<title>Music and Computer Composition</title>
	<abstract>The problem discussed is that of simulating human composition of Western popular music by computer  and some relevant theories of music and harmony are given.  Problems with this kind of program and several  schemes that are known not to work are discussed.  Several previous computer compositions are discussed,  including the ILLIAC Suite.  A program to generate short melody fragments was written to simulate some  of the aspects of human composition.  Five samples of its output are presented and discussed.  It was  discovered that although the fragments show many of the characteristics of popular melodies, they have  a strangely alien sound.  It is theorized that this is because the relevant probabilities which would  discriminate against unfamiliar sequences were not used.</abstract>
	<conference>CACM February, 1972</conference>
	<authors>
	<author>Moorer, J. A.</author>
	</authors>
	<keywords>artificial intelligence, heuristic programming, models of cognitive processes, computer music,  computer composition, music theory</keywords>
	<version>3.44 3.65</version>
	<location>CA720208 JB January 31, 1978  3:54 PM</location>
	<citations>
	<citation>2383	5	2383</citation>
	<citation>2383	5	2383</citation>
	<citation>2383	5	2383</citation>
	</citations>
	</document>
	<document id= '2382'>
	<citations>
	<citation>2382	5	2382</citation>
	<citation>2382	5	2382</citation>
	<citation>2382	5	2382</citation>
	</citations>
	<title>Reconstruction of Pictures from Their Projections (Corrigendum)</title>
	<conference>CACM February, 1972</conference>
	<authors>
	<author>Gordon, R.</author>
	<author>Herman, G. T.</author>
	</authors>
	<location>CA720209 JB January 31, 1978  3:42 PM</location>
	</document>
	<document id= '2381'>
	<citations>
	<citation>2381	5	2381</citation>
	<citation>2381	5	2381</citation>
	<citation>2381	5	2381</citation>
	</citations>
	<title>Average Binary Search Length for Dense Ordered Lists (Corrigendum)</title>
	<conference>CACM February, 1972</conference>
	<authors>
	<author>Flores, I.</author>
	<author>Madpis, G.</author>
	</authors>
	<location>CA720210 JB January 31, 1978  3:40 PM</location>
	</document>
	<document id= '2380'>
	<title>TENEX, a Paged Time Sharing System for the PDP-10</title>
	<abstract>TENEX is a new time sharing system implemented on DEC PDP-10 augmented by special paging hardware  developed at BBN.  This report specifies a set of goals which are important for any time sharing system.   It describes how the TENEX design and implementation achieve these goals.  These include specifications  for a powerful multiprocess large memory virtual machine, intimate terminal interaction, comprehensive  uniform file and I/O capabilities, and clean flexible system structure.  Although the implementation  described here required some compromise to achieve a system operational within six months of hardware  checkout, TENEX has met its major goals and provided reliable service at several sites and through the  ARPA network.</abstract>
	<conference>CACM March, 1972</conference>
	<authors>
	<author>Bobrow, D. G.</author>
	<author>Burchfiel, J. D.</author>
	<author>Murphy, D. L.</author>
	<author>Tomlinson, R. S.</author>
	<author>Beranek, B.</author>
	</authors>
	<keywords>TENEX, paging, virtual machines, time sharing system, scheduling algorithm, process structure,  PDP-10</keywords>
	<version>2.44 4.32 4.39 4.42</version>
	<location>CA720301 JB January 31, 1978  3:37 PM</location>
	<citations>
	<citation>1892	4	2380</citation>
	<citation>1901	4	2380</citation>
	<citation>2085	4	2380</citation>
	<citation>2095	4	2380</citation>
	<citation>2218	4	2380</citation>
	<citation>2277	4	2380</citation>
	<citation>2319	4	2380</citation>
	<citation>2329	4	2380</citation>
	<citation>2358	4	2380</citation>
	<citation>2373	4	2380</citation>
	<citation>2374	4	2380</citation>
	<citation>2380	4	2380</citation>
	<citation>2380	4	2380</citation>
	<citation>2434	4	2380</citation>
	<citation>2499	4	2380</citation>
	<citation>2450	4	2380</citation>
	<citation>2501	4	2380</citation>
	<citation>2582	4	2380</citation>
	<citation>2595	4	2380</citation>
	<citation>2669	4	2380</citation>
	<citation>2828	4	2380</citation>
	<citation>2863	4	2380</citation>
	<citation>2881	4	2380</citation>
	<citation>2928	4	2380</citation>
	<citation>2996	4	2380</citation>
	<citation>2996	4	2380</citation>
	<citation>3006	4	2380</citation>
	<citation>3006	4	2380</citation>
	<citation>3067	4	2380</citation>
	<citation>3067	4	2380</citation>
	<citation>1751	5	2380</citation>
	<citation>2373	5	2380</citation>
	<citation>2380	5	2380</citation>
	<citation>2380	5	2380</citation>
	<citation>2380	5	2380</citation>
	<citation>2629	5	2380</citation>
	<citation>2868	5	2380</citation>
	<citation>2928	5	2380</citation>
	<citation>2951	5	2380</citation>
	<citation>1502	6	2380</citation>
	<citation>1751	6	2380</citation>
	<citation>2080	6	2380</citation>
	<citation>2277	6	2380</citation>
	<citation>2377	6	2380</citation>
	<citation>2380	6	2380</citation>
	<citation>2380	6	2380</citation>
	<citation>2380	6	2380</citation>
	<citation>2380	6	2380</citation>
	<citation>2522	6	2380</citation>
	<citation>2558	6	2380</citation>
	<citation>2569	6	2380</citation>
	<citation>2625	6	2380</citation>
	<citation>2632	6	2380</citation>
	</citations>
	</document>
	<document id= '2379'>
	<title>The Design of the Venus Operating System</title>
	<abstract>The Venus Operating System is an experimental multiprogramming system which supports five or  six concurrent users on a small computer.  The system was produced to test the effect of machine architecture  on complexity of software.  The system is defined by a combination of microprograms and software.  The  microprogram defines a machine with some unusual architectural feature; the software exploits these features  to define the operating system as simply as possible.  In this paper the development of the system is  described, with particular emphasis on the principles which guided the design.</abstract>
	<conference>CACM March, 1972</conference>
	<authors>
	<author>Liskov, B. H.</author>
	</authors>
	<keywords>operating systems, system design, levels of abstraction, machine architecture, microprogramming,  segments, semaphores, multiprogramming, virtual machines, processes, process communication, virtual devices,  data sharing, resource management, deadlock</keywords>
	<version>4.30 4.32 4.41 6.21</version>
	<location>CA720302 JB January 31, 1978  3:16 PM</location>
	<citations>
	<citation>1828	4	2379</citation>
	<citation>1854	4	2379</citation>
	<citation>1877	4	2379</citation>
	<citation>1960	4	2379</citation>
	<citation>2150	4	2379</citation>
	<citation>2228	4	2379</citation>
	<citation>2280	4	2379</citation>
	<citation>2280	4	2379</citation>
	<citation>2317	4	2379</citation>
	<citation>2319	4	2379</citation>
	<citation>2377	4	2379</citation>
	<citation>2342	4	2379</citation>
	<citation>2376	4	2379</citation>
	<citation>2379	4	2379</citation>
	<citation>2379	4	2379</citation>
	<citation>2379	4	2379</citation>
	<citation>2424	4	2379</citation>
	<citation>2482	4	2379</citation>
	<citation>2482	4	2379</citation>
	<citation>2482	4	2379</citation>
	<citation>2500	4	2379</citation>
	<citation>2618	4	2379</citation>
	<citation>2632	4	2379</citation>
	<citation>2704	4	2379</citation>
	<citation>2723	4	2379</citation>
	<citation>2738	4	2379</citation>
	<citation>2740	4	2379</citation>
	<citation>2740	4	2379</citation>
	<citation>2741	4	2379</citation>
	<citation>2851	4	2379</citation>
	<citation>2867	4	2379</citation>
	<citation>2920	4	2379</citation>
	<citation>3184	4	2379</citation>
	<citation>1749	5	2379</citation>
	<citation>1877	5	2379</citation>
	<citation>2228	5	2379</citation>
	<citation>2379	5	2379</citation>
	<citation>2379	5	2379</citation>
	<citation>2379	5	2379</citation>
	<citation>2704	5	2379</citation>
	<citation>2867	5	2379</citation>
	<citation>1247	6	2379</citation>
	<citation>1552	6	2379</citation>
	<citation>1749	6	2379</citation>
	<citation>1749	6	2379</citation>
	<citation>2247	6	2379</citation>
	<citation>2356	6	2379</citation>
	<citation>2379	6	2379</citation>
	<citation>2379	6	2379</citation>
	<citation>2673	6	2379</citation>
	</citations>
	</document>
	<document id= '2378'>
	<title>An Operating System Based on the Concept of a Supervisory Computer</title>
	<abstract>An operating system which is organized as a small supervisor and a set of independent processes  are described.  The supervisor handles I/O with external devices-the file and directory system-schedules  active processes and manages memory, handle errors, and provides a small set of primitive functions which  it will execute for a process.  A process is able to specify a request for a complicated action on the  part of the supervisor (usually a wait on the occurrence of a compound event in the system) by combining  these primitives into a "supervisory computer program."  The part of the supervisor which executes these  programs may be viewed as a software implemented "supervisory computer."  The paper develops these concepts  in detail, outlines the remainder of the supervisor, and discusses some of the advantages of this approach.</abstract>
	<conference>CACM March, 1972</conference>
	<authors>
	<author>Gaines, R. S.</author>
	</authors>
	<keywords>operating systems, supervisors, multiprogramming, time-sharing, cooperating processes</keywords>
	<version>4.30 4.31 4.32</version>
	<location>CA720303 JB January 31, 1978  3:08 PM</location>
	<citations>
	<citation>1458	4	2378</citation>
	<citation>1523	4	2378</citation>
	<citation>1603	4	2378</citation>
	<citation>1698	4	2378</citation>
	<citation>1747	4	2378</citation>
	<citation>1748	4	2378</citation>
	<citation>1854	4	2378</citation>
	<citation>1877	4	2378</citation>
	<citation>1960	4	2378</citation>
	<citation>2319	4	2378</citation>
	<citation>2377	4	2378</citation>
	<citation>2378	4	2378</citation>
	<citation>2378	4	2378</citation>
	<citation>2320	4	2378</citation>
	<citation>2497	4	2378</citation>
	<citation>2558	4	2378</citation>
	<citation>2625	4	2378</citation>
	<citation>2632	4	2378</citation>
	<citation>2632	4	2378</citation>
	<citation>2738	4	2378</citation>
	<citation>2740	4	2378</citation>
	<citation>2840	4	2378</citation>
	<citation>2868	4	2378</citation>
	<citation>2941	4	2378</citation>
	<citation>3105	4	2378</citation>
	<citation>3127	4	2378</citation>
	<citation>3144	4	2378</citation>
	<citation>1471	5	2378</citation>
	<citation>2080	5	2378</citation>
	<citation>2378	5	2378</citation>
	<citation>2378	5	2378</citation>
	<citation>2378	5	2378</citation>
	</citations>
	</document>
	<document id= '2377'>
	<title>A Hardware Architecture for Implementing Protection Rings</title>
	<abstract>Protection of computations and information is an important aspect of a computer utility.  In  a system which uses segmentation as a memory addressing scheme, protection can be achieved in part by  associating concentric rings of decreasing access privilege with a computation.  This paper describes  hardware processor mechanisms for implementing these rings of protection.  The mechanisms for implementing  these rings of protection. The mechanisms allow cross-ring calls and subsequent returns to occur without  trapping to the supervisor.  Automatic hardware validation of references across ring boundaries is also  performed.  Thus, a call by a user procedure to a protected subsystem (including the supervisor) is identical  to a call to a companion user procedure.  The mechanisms of passing and referencing arguments are the  same in both cases as well.</abstract>
	<conference>CACM March, 1972</conference>
	<authors>
	<author>Schroeder, M. D.</author>
	<author>Saltzer, J. H.</author>
	</authors>
	<keywords>protection, protection rings, protection hardware, access control, hardware access control, computer  utility, time-sharing, shared information, segmentation, virtual memory, Multics</keywords>
	<version>4.32 6.21</version>
	<location>CA720304 JB January 31, 1978  2:58 PM</location>
	<citations>
	<citation>1458	4	2377</citation>
	<citation>1523	4	2377</citation>
	<citation>1603	4	2377</citation>
	<citation>1698	4	2377</citation>
	<citation>1747	4	2377</citation>
	<citation>1748	4	2377</citation>
	<citation>1753	4	2377</citation>
	<citation>1828	4	2377</citation>
	<citation>1854	4	2377</citation>
	<citation>1854	4	2377</citation>
	<citation>1877	4	2377</citation>
	<citation>1877	4	2377</citation>
	<citation>1960	4	2377</citation>
	<citation>1960	4	2377</citation>
	<citation>2150	4	2377</citation>
	<citation>2317	4	2377</citation>
	<citation>2319	4	2377</citation>
	<citation>2358	4	2377</citation>
	<citation>2377	4	2377</citation>
	<citation>2377	4	2377</citation>
	<citation>2377	4	2377</citation>
	<citation>2377	4	2377</citation>
	<citation>2378	4	2377</citation>
	<citation>2372	4	2377</citation>
	<citation>2342	4	2377</citation>
	<citation>2376	4	2377</citation>
	<citation>2379	4	2377</citation>
	<citation>2424	4	2377</citation>
	<citation>2482	4	2377</citation>
	<citation>2497	4	2377</citation>
	<citation>2558	4	2377</citation>
	<citation>2618	4	2377</citation>
	<citation>2625	4	2377</citation>
	<citation>2625	4	2377</citation>
	<citation>2626	4	2377</citation>
	<citation>2626	4	2377</citation>
	<citation>2632	4	2377</citation>
	<citation>2632	4	2377</citation>
	<citation>2669	4	2377</citation>
	<citation>2704	4	2377</citation>
	<citation>2723	4	2377</citation>
	<citation>2738	4	2377</citation>
	<citation>2740	4	2377</citation>
	<citation>2741	4	2377</citation>
	<citation>2840	4	2377</citation>
	<citation>2840	4	2377</citation>
	<citation>2867	4	2377</citation>
	<citation>2941	4	2377</citation>
	<citation>3105	4	2377</citation>
	<citation>3144	4	2377</citation>
	<citation>3184	4	2377</citation>
	<citation>1471	5	2377</citation>
	<citation>1746	5	2377</citation>
	<citation>1749	5	2377</citation>
	<citation>2358	5	2377</citation>
	<citation>2377	5	2377</citation>
	<citation>2377	5	2377</citation>
	<citation>2377	5	2377</citation>
	<citation>2436	5	2377</citation>
	<citation>2626	5	2377</citation>
	<citation>2868	5	2377</citation>
	<citation>2870	5	2377</citation>
	<citation>953	6	2377</citation>
	<citation>1746	6	2377</citation>
	<citation>2080	6	2377</citation>
	<citation>2358	6	2377</citation>
	<citation>2377	6	2377</citation>
	<citation>2377	6	2377</citation>
	<citation>2377	6	2377</citation>
	<citation>2377	6	2377</citation>
	<citation>2380	6	2377</citation>
	<citation>2558	6	2377</citation>
	<citation>2625	6	2377</citation>
	<citation>2625	6	2377</citation>
	<citation>2629	6	2377</citation>
	<citation>2632	6	2377</citation>
	<citation>2632	6	2377</citation>
	</citations>
	</document>
	<document id= '2376'>
	<title>Synchronization of Communicating Processes</title>
	<abstract>Formalization of a well-defined synchronization mechanism can be used to prove that concurrently  running processes of a system communicate correctly.  This is demonstrated for a system consisting of  many sending processes which deposit messages in a buffer and many receiving processes which remove messages  from that buffer.  The formal description of the synchronization mechanism makes it very easy to prove  that the buffer will neither overflow nor underflow, that senders and receivers will never operate on  the same message frame in the buffer nor will they run into a deadlock.</abstract>
	<conference>CACM March, 1972</conference>
	<authors>
	<author>Habermann, A. N.</author>
	</authors>
	<keywords>parallel programming, multiprogramming, program correctness, process communication, process scheduling</keywords>
	<version>4.30 4.32 4.39 4.9</version>
	<location>CA720305 JB January 31, 1978  2:44 PM</location>
	<citations>
	<citation>1781	4	2376</citation>
	<citation>1828	4	2376</citation>
	<citation>1854	4	2376</citation>
	<citation>1877	4	2376</citation>
	<citation>1960	4	2376</citation>
	<citation>2150	4	2376</citation>
	<citation>2150	4	2376</citation>
	<citation>2228	4	2376</citation>
	<citation>2256	4	2376</citation>
	<citation>2317	4	2376</citation>
	<citation>2317	4	2376</citation>
	<citation>2319	4	2376</citation>
	<citation>2377	4	2376</citation>
	<citation>2342	4	2376</citation>
	<citation>2342	4	2376</citation>
	<citation>2376	4	2376</citation>
	<citation>2376	4	2376</citation>
	<citation>2376	4	2376</citation>
	<citation>2379	4	2376</citation>
	<citation>2424	4	2376</citation>
	<citation>2482	4	2376</citation>
	<citation>2618	4	2376</citation>
	<citation>2618	4	2376</citation>
	<citation>2632	4	2376</citation>
	<citation>2704	4	2376</citation>
	<citation>2723	4	2376</citation>
	<citation>2738	4	2376</citation>
	<citation>2740	4	2376</citation>
	<citation>2741	4	2376</citation>
	<citation>2867	4	2376</citation>
	<citation>3184	4	2376</citation>
	<citation>3184	4	2376</citation>
	<citation>1198	5	2376</citation>
	<citation>1749	5	2376</citation>
	<citation>1960	5	2376</citation>
	<citation>2376	5	2376</citation>
	<citation>2376	5	2376</citation>
	<citation>2376	5	2376</citation>
	<citation>2700	5	2376</citation>
	<citation>3128	5	2376</citation>
	<citation>2150	6	2376</citation>
	<citation>2376	6	2376</citation>
	<citation>2376	6	2376</citation>
	<citation>2436	6	2376</citation>
	<citation>2597	6	2376</citation>
	<citation>2865	6	2376</citation>
	<citation>2866	6	2376</citation>
	<citation>2870	6	2376</citation>
	<citation>2912	6	2376</citation>
	<citation>3082	6	2376</citation>
	</citations>
	</document>
	<document id= '2375'>
	<title>A Comparative Analysis of Disk Scheduling Policies</title>
	<abstract>Five well-known scheduling policies for movable head disks are compared using the performance  criteria of expected seek time (system oriented)and expected waiting time (individual I/O request oriented).   Both analytical and simulation results are obtained.  The variance of waiting time is introduced as  another meaningful measure of performance, showing possible discrimination against individual requests.   Then the choice of a utility function to measure total performance including system oriented and individual  request oriented measures is described.  Such a function allows one to differentiate among the scheduling  policies over a wide range of input loading conditions.  The selection and implementation of a maximum  performance two-policy algorithm are discussed.</abstract>
	<conference>CACM March, 1972</conference>
	<authors>
	<author>Teorey, T. J.</author>
	<author>Pinkerton, T. B.</author>
	</authors>
	<keywords>access time, analytical models, auxiliary storage, direct access storage, disk analysis, disk scheduling,  performance criteria, peripheral memory devices, real-time systems, response time, rotational delay,  scheduling policies, seek time, simulation, storage units, time-sharing systems, waiting time</keywords>
	<version>3.72 4.32 6.34</version>
	<location>CA720306JB January 31, 1978  2:38 PM</location>
	<citations>
	<citation>2375	5	2375</citation>
	<citation>2375	5	2375</citation>
	<citation>2375	5	2375</citation>
	<citation>2628	5	2375</citation>
	<citation>2891	5	2375</citation>
	<citation>3072	5	2375</citation>
	<citation>1713	6	2375</citation>
	<citation>2219	6	2375</citation>
	<citation>2245	6	2375</citation>
	<citation>2375	6	2375</citation>
	<citation>2375	6	2375</citation>
	<citation>2375	6	2375</citation>
	<citation>2496	6	2375</citation>
	<citation>2628	6	2375</citation>
	</citations>
	</document>
	<document id= '2374'>
	<title>A Study of Storage Partitioning Using a Mathematical Model of Locality</title>
	<abstract>Both fixed and dynamic storage partitioning procedures are examined for use in multiprogramming  systems.  The storage requirement of programs is modeled as a stationary Gaussian process.  Experiments  justifying this model are described.  By means of this model dynamic storage partitioning is shown to  provide substantial increases in storage utilization and operating efficiency over fixed partitioning.</abstract>
	<conference>CACM March, 1972</conference>
	<authors>
	</authors>
	<keywords>storage partitioning, memory management, dynamic storage allocation, space sharing, multiprogrammed  storage, working-sets, program behavior models, mathematical modeling</keywords>
	<version>4.32 4.39</version>
	<location>CA720307 JB January 31, 1978  2:29 PM</location>
	<citations>
	<citation>1892	4	2374</citation>
	<citation>1924	4	2374</citation>
	<citation>2095	4	2374</citation>
	<citation>2218	4	2374</citation>
	<citation>2297	4	2374</citation>
	<citation>2374	4	2374</citation>
	<citation>2374	4	2374</citation>
	<citation>2374	4	2374</citation>
	<citation>2380	4	2374</citation>
	<citation>2450	4	2374</citation>
	<citation>2481	4	2374</citation>
	<citation>2526	4	2374</citation>
	<citation>2595	4	2374</citation>
	<citation>2667	4	2374</citation>
	<citation>2668	4	2374</citation>
	<citation>2669	4	2374</citation>
	<citation>2862	4	2374</citation>
	<citation>2863	4	2374</citation>
	<citation>2863	4	2374</citation>
	<citation>2996	4	2374</citation>
	<citation>3006	4	2374</citation>
	<citation>3016	4	2374</citation>
	<citation>3052	4	2374</citation>
	<citation>3067	4	2374</citation>
	<citation>1728	5	2374</citation>
	<citation>1901	5	2374</citation>
	<citation>2373	5	2374</citation>
	<citation>2374	5	2374</citation>
	<citation>2374	5	2374</citation>
	<citation>2374	5	2374</citation>
	<citation>2450	5	2374</citation>
	<citation>3006	5	2374</citation>
	<citation>3067	5	2374</citation>
	<citation>1410	6	2374</citation>
	<citation>1751	6	2374</citation>
	<citation>1751	6	2374</citation>
	<citation>1751	6	2374</citation>
	<citation>1810	6	2374</citation>
	<citation>1884	6	2374</citation>
	<citation>1951	6	2374</citation>
	<citation>2374	6	2374</citation>
	<citation>2374	6	2374</citation>
	<citation>2374	6	2374</citation>
	<citation>2374	6	2374</citation>
	<citation>2373	6	2374</citation>
	<citation>2373	6	2374</citation>
	<citation>2373	6	2374</citation>
	<citation>2595	6	2374</citation>
	<citation>2595	6	2374</citation>
	<citation>2682	6	2374</citation>
	<citation>2863	6	2374</citation>
	<citation>2864	6	2374</citation>
	<citation>3006	6	2374</citation>
	</citations>
	</document>
	<document id= '2373'>
	<title>Properties of the Working-Set Model</title>
	<abstract>A program's working set W(t,T) at time t is the set of distinct pages among the T most recently  referenced pages.  Relations between the average working-set size, the missing-page rate, and the interreference-interval  distribution may be derived both from time-average definitions and from ensemble-average (statistical)  definitions. An efficient algorithm for estimating these quantities is given.  The relation to LRU (least  recently used) paging is characterized.  The independent-reference model, in which page references are  statistically independent, is used to assess the effects to interpage dependencies on working-set size  observations. Under general assumptions, working-set size is shown to be normally distributed.</abstract>
	<conference>CACM March, 1972</conference>
	<authors>
	<author>Denning, P. J.</author>
	<author>Schwartz, S. C.</author>
	</authors>
	<keywords>working-set model, paging, paging algorithms, program behavior, program modeling</keywords>
	<version>4.3</version>
	<location>CA720308 JB January 31, 1978  2:07 PM</location>
	<citations>
	<citation>1604	4	2373</citation>
	<citation>1892	4	2373</citation>
	<citation>1901	4	2373</citation>
	<citation>1951	4	2373</citation>
	<citation>2085	4	2373</citation>
	<citation>2095	4	2373</citation>
	<citation>2218	4	2373</citation>
	<citation>2218	4	2373</citation>
	<citation>2277	4	2373</citation>
	<citation>2319	4	2373</citation>
	<citation>2329	4	2373</citation>
	<citation>2358	4	2373</citation>
	<citation>2373	4	2373</citation>
	<citation>2373	4	2373</citation>
	<citation>2373	4	2373</citation>
	<citation>2373	4	2373</citation>
	<citation>2373	4	2373</citation>
	<citation>2380	4	2373</citation>
	<citation>2434	4	2373</citation>
	<citation>2499	4	2373</citation>
	<citation>2450	4	2373</citation>
	<citation>2501	4	2373</citation>
	<citation>2582	4	2373</citation>
	<citation>2669	4	2373</citation>
	<citation>2828	4	2373</citation>
	<citation>2863	4	2373</citation>
	<citation>2881	4	2373</citation>
	<citation>2894	4	2373</citation>
	<citation>2928	4	2373</citation>
	<citation>2996	4	2373</citation>
	<citation>3006	4	2373</citation>
	<citation>3006	4	2373</citation>
	<citation>3067	4	2373</citation>
	<citation>3067	4	2373</citation>
	<citation>1410	5	2373</citation>
	<citation>1751	5	2373</citation>
	<citation>1810	5	2373</citation>
	<citation>1951	5	2373</citation>
	<citation>2373	5	2373</citation>
	<citation>2373	5	2373</citation>
	<citation>2373	5	2373</citation>
	<citation>2374	5	2373</citation>
	<citation>2380	5	2373</citation>
	<citation>2450	5	2373</citation>
	<citation>2595	5	2373</citation>
	<citation>2996	5	2373</citation>
	<citation>3006	5	2373</citation>
	<citation>3067	5	2373</citation>
	<citation>1728	6	2373</citation>
	<citation>1751	6	2373</citation>
	<citation>1751	6	2373</citation>
	<citation>1751	6	2373</citation>
	<citation>1751	6	2373</citation>
	<citation>1884	6	2373</citation>
	<citation>1901	6	2373</citation>
	<citation>2374	6	2373</citation>
	<citation>2374	6	2373</citation>
	<citation>2374	6	2373</citation>
	<citation>2373	6	2373</citation>
	<citation>2373	6	2373</citation>
	<citation>2373	6	2373</citation>
	<citation>2373	6	2373</citation>
	<citation>2373	6	2373</citation>
	<citation>2373	6	2373</citation>
	<citation>2373	6	2373</citation>
	<citation>2595	6	2373</citation>
	<citation>2595	6	2373</citation>
	<citation>2595	6	2373</citation>
	<citation>2682	6	2373</citation>
	<citation>2863	6	2373</citation>
	<citation>2864	6	2373</citation>
	<citation>3006	6	2373</citation>
	</citations>
	</document>
	<document id= '2372'>
	<title>On the Implementation of Security Measures in Information Systems</title>
	<abstract>The security of an information system may be represented by a model matrix whose elements are  decision rules and whose row and column indices are users and data items respectively.  A set of four  functions is used to access this matrix at translation and execution time.  Distinguishing between data  dependent and data independent decision rules enables one to perform much of the checking of security  only once at translation time rather than repeatedly at execution time.  The model is used to explain  security features of several existing systems, and serves as a framework for a proposal for general security  system implementation within today's languages and operating systems.</abstract>
	<conference>CACM April, 1972</conference>
	<authors>
	<author>Conway, R. W.</author>
	<author>Maxwell, W. L.</author>
	<author>Morgan, H. L.</author>
	</authors>
	<keywords>security, privacy, access control confidentiality, operating systems, access management, data banks,  management information systems</keywords>
	<version>3.50 3.73 4.12 4.22 4.39</version>
	<location>CA720401 JB January 31, 1978  1:59 PM</location>
	<citations>
	<citation>1753	4	2372</citation>
	<citation>2358	4	2372</citation>
	<citation>2377	4	2372</citation>
	<citation>2372	4	2372</citation>
	<citation>2626	4	2372</citation>
	<citation>2840	4	2372</citation>
	<citation>1746	5	2372</citation>
	<citation>2372	5	2372</citation>
	<citation>2372	5	2372</citation>
	<citation>2372	5	2372</citation>
	</citations>
	</document>
	<document id= '2371'>
	<title>A System for Interprocess Communication in a Resource Sharing Computer Network</title>
	<abstract>A system of communication between processes in a time-sharing system is described and the communication  system is extended so that it may be used between processes distributed throughout a computer network.   The hypothetical application of the system to an existing network is discussed.</abstract>
	<conference>CACM April, 1972</conference>
	<authors>
	<author>Walden, D. C.</author>
	</authors>
	<keywords>interprocess communication, time-sharing, computer networks, resource sharing</keywords>
	<version>3.81 4.39 4.82 4.9</version>
	<location>CA720402 JB January 31, 1978  1:51 PM</location>
	<citations>
	<citation>2371	5	2371</citation>
	<citation>2371	5	2371</citation>
	<citation>2371	5	2371</citation>
	<citation>2849	5	2371</citation>
	<citation>2371	6	2371</citation>
	</citations>
	</document>
	<document id= '2370'>
	<title>An Experimental Laboratory for Pattern Recognition and Signal Processing</title>
	<abstract>An interactive computer-controlled scanning and display system has been in operation at the  IBM Thomas J. Watson Research Center for three years.  The system includes two flying-spot scanners and  a TV camera specially interfaced to a process control digital computer, dot-mode and vector displays,  analog input and output facilities, and a variety of other experimental equipment.  The system design  and programming support are described and typical applications in scanner control, optical character  recognition,and image processing are presented.</abstract>
	<conference>CACM April, 1972</conference>
	<authors>
	<author>Herbst, N. M.</author>
	<author>Will, P. M.</author>
	</authors>
	<keywords>scanners, pseudorandom displays, interactive terminal, image processing, pattern recognition</keywords>
	<version>4.41 6.35</version>
	<location>CA720403 JB January 31, 1978  1:47 PM</location>
	<citations>
	<citation>2370	4	2370</citation>
	<citation>1726	5	2370</citation>
	<citation>2370	5	2370</citation>
	<citation>2370	5	2370</citation>
	<citation>2370	5	2370</citation>
	</citations>
	</document>
	<document id= '2369'>
	<title>Hidden Lines Elimination for a Rotating Object</title>
	<abstract>A method is presented of determining which parts of three-dimensional objects are visible and  which are invisible when the objects are rotated about some axis.  This paper describes a polygon comparison  scheme in which the relationships of two polygons can be classified into tree types, and also discusses  how the relationship is changed for each pair of polygons under rotation about some axis.  A rotation  table is defined for each pair of polygons, which remains fixed as long as rotation is about one axis  and provides a means of rapidly determining the visible and hidden line relationship between two polygons.   Additional work must be done to extend this approach to simultaneous rotation about several axes.</abstract>
	<conference>CACM April, 1972</conference>
	<authors>
	<author>Matsushita, Y.</author>
	</authors>
	<keywords>hidden line problem, display programming, computer graphics, displays, graphics, computer drawn  picture</keywords>
	<version>4.40 4.41 4.49</version>
	<location>CA720404 JB January 31, 1978  1:40 PM</location>
	<citations>
	<citation>2369	5	2369</citation>
	<citation>2369	5	2369</citation>
	<citation>2369	5	2369</citation>
	</citations>
	</document>
	<document id= '2368'>
	<title>An Implemented Graph Algorithm for Winning Shannon Switching games</title>
	<abstract>In this tutorial paper a computer program which wins Shannon Switching Games is described.  Since these games are played on graphs, the program is a good example of the implementation of graph  algorithms.  The two players in a Shannon Switching Game, CONNECT and CUT, have nonsimilar goals.  Either  CONNECT, CUT, or the player moving first is guaranteed the existence of a winning strategy.  The simple  strategy explained in this paper is valid in all three cases.  In fact, the major routines never need  to know whether the computer is CONNECT or CUT.</abstract>
	<conference>CACM April, 1972</conference>
	<authors>
	<author>Chase, S. M.</author>
	</authors>
	<keywords>graph algorithms, graph processing, Shannon Switching Games, game playing, graph theory, positional  games, demonstration programs, game theory, spinning trees</keywords>
	<version>3.69 5.32</version>
	<location>CA720405 JB January 31, 1978  1:34 PM</location>
	<citations>
	<citation>2368	5	2368</citation>
	<citation>2368	5	2368</citation>
	<citation>2368	5	2368</citation>
	</citations>
	</document>
	<document id= '2367'>
	<title>Computers and Society: A Proposed Course for Computer Scientists</title>
	<abstract>The purpose of this paper is to describe a course concerned with both the effects of computers  on society and the responsibilities of computer scientists to society.  The impact of computers is divided  into five components: political, economic, cultural, social, and moral; the main part of the paper defines  each component and presents examples of the relevant issues.  In the remaining portions the possible  formats for such a course are discussed, a topic by topic outline is given, and a selected set of references  is listed.  It is hoped that the proposal will make it easier to initiate courses on this subject.</abstract>
	<conference>CACM April, 1972</conference>
	<authors>
	<author>Horowitz, E.</author>
	<author>Morgan, H. L.</author>
	<author>Shaw, A. C.</author>
	</authors>
	<keywords>computers and society, social implications, course proposal</keywords>
	<version>1.0 1.52 2.1</version>
	<location>CA720406 JB January 31, 1978  1:06 PM</location>
	<citations>
	<citation>2367	5	2367</citation>
	<citation>2367	5	2367</citation>
	<citation>2367	5	2367</citation>
	<citation>3003	5	2367</citation>
	<citation>1659	6	2367</citation>
	<citation>1678	6	2367</citation>
	<citation>1927	6	2367</citation>
	<citation>1945	6	2367</citation>
	<citation>2097	6	2367</citation>
	<citation>2147	6	2367</citation>
	<citation>2163	6	2367</citation>
	<citation>2187	6	2367</citation>
	<citation>2329	6	2367</citation>
	<citation>2345	6	2367</citation>
	<citation>2367	6	2367</citation>
	<citation>2407	6	2367</citation>
	<citation>2478	6	2367</citation>
	<citation>2479	6	2367</citation>
	<citation>2480	6	2367</citation>
	<citation>2538	6	2367</citation>
	</citations>
	</document>
	<document id= '2366'>
	<title>Complex Gamma Function with Error Control</title>
	<abstract>An algorithm to compute the gamma function and log gamma function of a complex variable is presented.   The standard algorithm is modified in several respects to insure the continuity of the function value  and to reduce accumulation of round-off errors.  In addition to computation of function values, this  algorithm includes an object-time estimation of round-off errors.  Experimental data with regard to the  effectiveness of this error control are presented.  A Fortran program for the algorithm appears in the  algorithms section of this issue.</abstract>
	<conference>CACM April, 1972</conference>
	<authors>
	<author>Kuki, H.</author>
	</authors>
	<keywords>complex gamma function, gamma function, complex log gamma function, loggamma function, round-off  error control, inherent error control, run-time error estimates, error estimates</keywords>
	<version>5.11 5.12</version>
	<location>CA720407 JB January 31, 1978  12:59 PM</location>
	<citations>
	<citation>2366	4	2366</citation>
	<citation>2364	5	2366</citation>
	<citation>2366	5	2366</citation>
	<citation>2366	5	2366</citation>
	<citation>2366	5	2366</citation>
	<citation>2366	6	2366</citation>
	</citations>
	</document>
	<document id= '2365'>
	<title>Matrix Computations with Fortran and Paging</title>
	<abstract>The efficiency of conventional Fortran programs for matrix computations can often be improved  by reversing the order of nested loops.  Such modifications produce modest savings in many common situations  and very significant savings for large problems run under an operating system which uses paging.</abstract>
	<conference>CACM April, 1972</conference>
	<authors>
	<author>Moler, C. B.</author>
	</authors>
	<keywords>matrix algorithms, linear equations, Fortran, paged memory, virtual memory, array processing</keywords>
	<version>4.22 4.32 5.14</version>
	<location>CA720408 JB January 31, 1978  12:54 PM</location>
	<citations>
	<citation>1613	4	2365</citation>
	<citation>1646	4	2365</citation>
	<citation>1879	4	2365</citation>
	<citation>1884	4	2365</citation>
	<citation>1900	4	2365</citation>
	<citation>1901	4	2365</citation>
	<citation>1955	4	2365</citation>
	<citation>2025	4	2365</citation>
	<citation>2095	4	2365</citation>
	<citation>2154	4	2365</citation>
	<citation>2277	4	2365</citation>
	<citation>2297	4	2365</citation>
	<citation>2365	4	2365</citation>
	<citation>2365	4	2365</citation>
	<citation>2365	4	2365</citation>
	<citation>2365	4	2365</citation>
	<citation>2506	4	2365</citation>
	<citation>2582	4	2365</citation>
	<citation>3060	4	2365</citation>
	<citation>3152	4	2365</citation>
	<citation>987	5	2365</citation>
	<citation>1754	5	2365</citation>
	<citation>1924	5	2365</citation>
	<citation>2362	5	2365</citation>
	<citation>2365	5	2365</citation>
	<citation>2365	5	2365</citation>
	<citation>2365	5	2365</citation>
	<citation>3152	5	2365</citation>
	<citation>1924	6	2365</citation>
	<citation>2365	6	2365</citation>
	<citation>2365	6	2365</citation>
	</citations>
	</document>
	<document id= '2364'>
	<title>Complex Gamma Function with Error Control [S14] (Algorithm A421)</title>
	<conference>CACM April, 1972</conference>
	<authors>
	<author>Kuki, H.</author>
	</authors>
	<keywords>complex gamma function, gamma function, complex log gamma function, loggamma function, round-off  error control, inherent error control, run-time error estimates, error estimates, special functions</keywords>
	<version>4.9 5.11 5.12</version>
	<location>CA720409 JB January 31, 1978  12:50 PM</location>
	<citations>
	<citation>2364	4	2364</citation>
	<citation>2364	5	2364</citation>
	<citation>2364	5	2364</citation>
	<citation>2364	5	2364</citation>
	<citation>2366	5	2364</citation>
	<citation>2364	6	2364</citation>
	</citations>
	</document>
	<document id= '2363'>
	<title>Minimal Spanning Tree [H] (Algorithm A422)</title>
	<conference>CACM April, 1972</conference>
	<authors>
	<author>Whitney, V. K. M.</author>
	</authors>
	<keywords>spanning tree, minimal spanning tree, maximal spanning tree</keywords>
	<version>5.32</version>
	<location>CA720410 JB January 31, 1978  12:36 PM</location>
	<citations>
	<citation>2363	5	2363</citation>
	<citation>2363	5	2363</citation>
	<citation>2363	5	2363</citation>
	<citation>2641	5	2363</citation>
	<citation>2363	6	2363</citation>
	</citations>
	</document>
	<document id= '2362'>
	<title>Linear Equation Solver [F4] (Algorithm A423)</title>
	<conference>CACM April, 1972</conference>
	<authors>
	<author>Moler, C. B.</author>
	</authors>
	<keywords>matrix algorithms, linear equations, Fortran, paged memory, virtual memory, array processing</keywords>
	<version>4.22 4.32 5.14</version>
	<location>CA720411 JB January 31, 1978  12:34 PM</location>
	<citations>
	<citation>2362	4	2362</citation>
	<citation>3152	4	2362</citation>
	<citation>2362	5	2362</citation>
	<citation>2362	5	2362</citation>
	<citation>2362	5	2362</citation>
	<citation>2365	5	2362</citation>
	<citation>987	6	2362</citation>
	<citation>1754	6	2362</citation>
	<citation>1924	6	2362</citation>
	<citation>2362	6	2362</citation>
	</citations>
	</document>
	<document id= '2361'>
	<title>A Note on Cheney's Nonrecursive List-Compacting Algorithm</title>
	<conference>CACM April, 1972</conference>
	<authors>
	<author>Walden, D. C.</author>
	</authors>
	<keywords>list compacting, garbage collection</keywords>
	<version>4.19 4.49</version>
	<location>CA720412 JB January 31, 1978  12:32 PM</location>
	<citations>
	<citation>2156	4	2361</citation>
	<citation>2361	4	2361</citation>
	<citation>2513	4	2361</citation>
	<citation>2736	4	2361</citation>
	<citation>2855	4	2361</citation>
	<citation>3074	4	2361</citation>
	<citation>3106	4	2361</citation>
	<citation>3112	4	2361</citation>
	<citation>1972	5	2361</citation>
	<citation>2361	5	2361</citation>
	<citation>2361	5	2361</citation>
	<citation>2361	5	2361</citation>
	</citations>
	</document>
	<document id= '2360'>
	<title>A Comment on the Double-Chained Tree</title>
	<conference>CACM April, 1972</conference>
	<authors>
	<author>Hu, T. C.</author>
	</authors>
	<keywords>file searching, double-chained tree, binary search tree</keywords>
	<version>3.73 3.74 5.32 5.6</version>
	<location>CA720413 JB January 31, 1978  12:31 PM</location>
	<citations>
	<citation>1050	4	2360</citation>
	<citation>1935	4	2360</citation>
	<citation>1936	4	2360</citation>
	<citation>2017	4	2360</citation>
	<citation>2032	4	2360</citation>
	<citation>2257	4	2360</citation>
	<citation>2257	4	2360</citation>
	<citation>2257	4	2360</citation>
	<citation>2360	4	2360</citation>
	<citation>2360	4	2360</citation>
	<citation>2360	4	2360</citation>
	<citation>2451	4	2360</citation>
	<citation>2451	4	2360</citation>
	<citation>2452	4	2360</citation>
	<citation>2452	4	2360</citation>
	<citation>2556	4	2360</citation>
	<citation>2765	4	2360</citation>
	<citation>1831	5	2360</citation>
	<citation>1936	5	2360</citation>
	<citation>2257	5	2360</citation>
	<citation>2360	5	2360</citation>
	<citation>2360	5	2360</citation>
	<citation>2360	5	2360</citation>
	<citation>849	5	2360</citation>
	<citation>849	6	2360</citation>
	<citation>1831	6	2360</citation>
	<citation>1936	6	2360</citation>
	<citation>2360	6	2360</citation>
	</citations>
	</document>
	<document id= '2359'>
	<title>An Improved Index Sequential Access Method Using Hashed Overflow</title>
	<abstract>The Index Sequential Access Method (ISAM) is one of the most important file management systems  used with moveable head disk devices.  This study investigates the use of an unconventional method of  treating overflow records.  The method is to use hashing techniques to allocate space for such records.   If certain conditions are satisfied, this is superior to the conventional ISAM method of chaining the  overflow records via linked list techniques.  These conditions are: long overflow chains with significant  overflow; lack of tight disk space constraints; record keys which are small compared to the total record  size; and significant use of the file in the index as opposed to the sequential mode.  Using hashed overflow,  the time to locate a record is dependent not on the total volume of overflow records as in conventional  ISAM, but on the percentage use of space dedicated to overflow records.</abstract>
	<conference>CACM May, 1972</conference>
	<authors>
	<author>Mullin, J. K.</author>
	</authors>
	<keywords>ISAM, index sequential, hashing, scatter storage, disk, cylinder, overflow</keywords>
	<version>3.72 3.73 3.74</version>
	<location>CA720501 JB January 31, 1978  12:29 PM</location>
	<citations>
	<citation>1676	4	2359</citation>
	<citation>1682	4	2359</citation>
	<citation>1728	4	2359</citation>
	<citation>1860	4	2359</citation>
	<citation>1973	4	2359</citation>
	<citation>2018	4	2359</citation>
	<citation>2032	4	2359</citation>
	<citation>2033	4	2359</citation>
	<citation>2107	4	2359</citation>
	<citation>2109	4	2359</citation>
	<citation>2203	4	2359</citation>
	<citation>2251	4	2359</citation>
	<citation>2258	4	2359</citation>
	<citation>2319	4	2359</citation>
	<citation>2313	4	2359</citation>
	<citation>2359	4	2359</citation>
	<citation>2359	4	2359</citation>
	<citation>2437	4	2359</citation>
	<citation>2524	4	2359</citation>
	<citation>2543	4	2359</citation>
	<citation>2552	4	2359</citation>
	<citation>2552	4	2359</citation>
	<citation>2559	4	2359</citation>
	<citation>2781	4	2359</citation>
	<citation>2860	4	2359</citation>
	<citation>2991	4	2359</citation>
	<citation>2991	4	2359</citation>
	<citation>3053	4	2359</citation>
	<citation>1785	5	2359</citation>
	<citation>2203	5	2359</citation>
	<citation>2359	5	2359</citation>
	<citation>2359	5	2359</citation>
	<citation>2359	5	2359</citation>
	</citations>
	</document>
	<document id= '2358'>
	<title>The Multics Virtual Memory: Concepts and Design</title>
	<abstract>As experience with use of on-line operating systems has grown, the need to share information  among system users has become increasingly apparent.  Many contemporary systems permit some degree of  sharing.  Usually, sharing is accomplished by allowing several users to share data via input and output  of information stored in files kept in secondary storage.  Through the use of segmentation, however,  Multics provides direct hardware addressing by user and system programs of all information, independent  of its physical storage location.  Information is stored in segments each of which is potentially sharable  and carries its own independent attributes of size and access privilege.  Here, the design and implementation  considerations of segmentation and sharing in Multics are first discussed under the assumption that all  information resides in large, segmented main memory.  Since the size of main memory on contemporary systems  is rather limited, it is then shown how the Multics software achieves the effect of a large segmented  main memory through the use of the Honeywell 645 segmentation and paging hardware.</abstract>
	<conference>CACM May, 1972</conference>
	<authors>
	<author>Bensoussan, A.</author>
	<author>Clingen, C. T.</author>
	<author>Daley, R. C.</author>
	</authors>
	<keywords>operating system, Multics, virtual memory, segmentation, information sharing, paging, memory management,  memory hierarchy</keywords>
	<version>4.30 4.31 4.32</version>
	<location>CA720502 JB January 31, 1978  11:24 AM</location>
	<citations>
	<citation>1753	4	2358</citation>
	<citation>1754	4	2358</citation>
	<citation>1892	4	2358</citation>
	<citation>1901	4	2358</citation>
	<citation>2085	4	2358</citation>
	<citation>2095	4	2358</citation>
	<citation>2218	4	2358</citation>
	<citation>2277	4	2358</citation>
	<citation>2317	4	2358</citation>
	<citation>2319	4	2358</citation>
	<citation>2329	4	2358</citation>
	<citation>2358	4	2358</citation>
	<citation>2358	4	2358</citation>
	<citation>2358	4	2358</citation>
	<citation>2358	4	2358</citation>
	<citation>2377	4	2358</citation>
	<citation>2373	4	2358</citation>
	<citation>2372	4	2358</citation>
	<citation>2380	4	2358</citation>
	<citation>2434	4	2358</citation>
	<citation>2499	4	2358</citation>
	<citation>2501	4	2358</citation>
	<citation>2582	4	2358</citation>
	<citation>488	4	2358</citation>
	<citation>2625	4	2358</citation>
	<citation>2626	4	2358</citation>
	<citation>2669	4	2358</citation>
	<citation>2828	4	2358</citation>
	<citation>2840	4	2358</citation>
	<citation>2863	4	2358</citation>
	<citation>2881	4	2358</citation>
	<citation>2928	4	2358</citation>
	<citation>2996	4	2358</citation>
	<citation>3006	4	2358</citation>
	<citation>3067	4	2358</citation>
	<citation>274	5	2358</citation>
	<citation>1746	5	2358</citation>
	<citation>1751	5	2358</citation>
	<citation>1753	5	2358</citation>
	<citation>2358	5	2358</citation>
	<citation>2358	5	2358</citation>
	<citation>2358	5	2358</citation>
	<citation>2377	5	2358</citation>
	<citation>2625	5	2358</citation>
	<citation>2626	5	2358</citation>
	<citation>2669	5	2358</citation>
	<citation>1471	6	2358</citation>
	<citation>1471	6	2358</citation>
	<citation>1746	6	2358</citation>
	<citation>1746	6	2358</citation>
	<citation>1749	6	2358</citation>
	<citation>1751	6	2358</citation>
	<citation>1753	6	2358</citation>
	<citation>1901	6	2358</citation>
	<citation>2017	6	2358</citation>
	<citation>2358	6	2358</citation>
	<citation>2358	6	2358</citation>
	<citation>2358	6	2358</citation>
	<citation>2358	6	2358</citation>
	<citation>2377	6	2358</citation>
	<citation>2438	6	2358</citation>
	<citation>2625	6	2358</citation>
	<citation>2629	6	2358</citation>
	</citations>
	</document>
	<document id= '2357'>
	<title>MUX, a Simple Approach to On-Line Computing</title>
	<abstract>An on-line system operating as part of a normal batch system for the CDC 6600 computer is described.   The system, which required one man-year for initial software implementation, although basically simple, provides the necessary elements to input and modify files, submit them for batch execution, and provide  results at the user's terminal.  A multiplexer designed and developed as part of the project cost one  man-year for design and checkout, and $16,000 for parts and fabrication.  All aspects of the system are  described, including design criteria, implementation, cost, overhead, and user reactions.</abstract>
	<conference>CACM May, 1972</conference>
	<authors>
	<author>Christman, R. D.</author>
	</authors>
	<keywords>time-sharing, remote computing, on-line access, on-line computing, remote file manager, real time,  multiplexer, implementation effort, operating overhead, user reactions, remote terminals, operating system</keywords>
	<version>3.79 3.89 4.39 4.41</version>
	<location>CA720503 JB January 31, 1978  11:04 AM</location>
	<citations>
	<citation>1657	4	2357</citation>
	<citation>2080	4	2357</citation>
	<citation>2357	4	2357</citation>
	<citation>2357	4	2357</citation>
	<citation>2357	4	2357</citation>
	<citation>2536	4	2357</citation>
	<citation>1523	5	2357</citation>
	<citation>1829	5	2357</citation>
	<citation>2035	5	2357</citation>
	<citation>2357	5	2357</citation>
	<citation>2357	5	2357</citation>
	<citation>2357	5	2357</citation>
	</citations>
	</document>
	<document id= '2356'>
	<title>A Technique for Software Module Specification with Examples</title>
	<abstract>This paper presents an approach to writing specifications for parts of software systems.  The  main goal is to provide specifications sufficiently precise and complete that other pieces of software  can be written to interact with the piece specified without additional information.  The secondary goal  is to include in the specification no more information than necessary to meet the first goal.  The technique  is illustrated by means of a variety of examples from a tutorial system.</abstract>
	<conference>CACM May, 1972</conference>
	<authors>
	<author>Parnas, D. L.</author>
	</authors>
	<keywords>software, specification, modules, software engineering, software design</keywords>
	<version>4.0 4.29 4.9</version>
	<location>CA720504 JB January 31, 1978  10:47 AM</location>
	<citations>
	<citation>1542	4	2356</citation>
	<citation>1683	4	2356</citation>
	<citation>1693	4	2356</citation>
	<citation>1781	4	2356</citation>
	<citation>1787	4	2356</citation>
	<citation>1836	4	2356</citation>
	<citation>1945	4	2356</citation>
	<citation>2042	4	2356</citation>
	<citation>2060	4	2356</citation>
	<citation>2061	4	2356</citation>
	<citation>2082	4	2356</citation>
	<citation>2091	4	2356</citation>
	<citation>2152	4	2356</citation>
	<citation>2179	4	2356</citation>
	<citation>2222	4	2356</citation>
	<citation>2340	4	2356</citation>
	<citation>2356	4	2356</citation>
	<citation>2356	4	2356</citation>
	<citation>2356	4	2356</citation>
	<citation>2420	4	2356</citation>
	<citation>2546	4	2356</citation>
	<citation>2603	4	2356</citation>
	<citation>2679	4	2356</citation>
	<citation>2698	4	2356</citation>
	<citation>2708	4	2356</citation>
	<citation>2824	4	2356</citation>
	<citation>2844	4	2356</citation>
	<citation>2874	4	2356</citation>
	<citation>2972	4	2356</citation>
	<citation>2982	4	2356</citation>
	<citation>2986	4	2356</citation>
	<citation>3045	4	2356</citation>
	<citation>3093	4	2356</citation>
	<citation>3143	4	2356</citation>
	<citation>970	5	2356</citation>
	<citation>1491	5	2356</citation>
	<citation>2227	5	2356</citation>
	<citation>2356	5	2356</citation>
	<citation>2356	5	2356</citation>
	<citation>2356	5	2356</citation>
	<citation>2704	5	2356</citation>
	<citation>2738	5	2356</citation>
	<citation>2866	5	2356</citation>
	<citation>2869	5	2356</citation>
	<citation>2941	5	2356</citation>
	<citation>2958	5	2356</citation>
	<citation>3004	5	2356</citation>
	<citation>3030	5	2356</citation>
	<citation>1247	6	2356</citation>
	<citation>1425	6	2356</citation>
	<citation>1471	6	2356</citation>
	<citation>1552	6	2356</citation>
	<citation>1749	6	2356</citation>
	<citation>1749	6	2356</citation>
	<citation>2080	6	2356</citation>
	<citation>2247	6	2356</citation>
	<citation>2247	6	2356</citation>
	<citation>2247	6	2356</citation>
	<citation>2356	6	2356</citation>
	<citation>2356	6	2356</citation>
	<citation>2356	6	2356</citation>
	<citation>2356	6	2356</citation>
	<citation>2356	6	2356</citation>
	<citation>2356	6	2356</citation>
	<citation>2356	6	2356</citation>
	<citation>2356	6	2356</citation>
	<citation>2379	6	2356</citation>
	<citation>2436	6	2356</citation>
	<citation>2456	6	2356</citation>
	<citation>2457	6	2356</citation>
	<citation>2558	6	2356</citation>
	<citation>2597	6	2356</citation>
	<citation>2651	6	2356</citation>
	<citation>2651	6	2356</citation>
	<citation>2673	6	2356</citation>
	<citation>2777	6	2356</citation>
	<citation>2796	6	2356</citation>
	<citation>2958	6	2356</citation>
	<citation>2972	6	2356</citation>
	<citation>3186	6	2356</citation>
	</citations>
	</document>
	<document id= '2355'>
	<title>Implementing Clenshaw-Curtis quadrature, I Methodology and Experience</title>
	<abstract>Clenshaw-Curtis quadrature is a particularly important automatic quadrature scheme for a variety  of reasons, especially the high accuracy obtained from relatively few integrand values.  However, it  has received little use because it requires the computation of a cosine transformation and the arithmetic  cost of this has been prohibitive.  This paper is in two parts; a companion paper, "II Computing the  Cosine Transformation," shows that this objection can be overcome by computing the cosine transformation  by a modification of the fast Fourier transform algorithm.  This first part discusses the strategy and  various error estimates, and summarizes experience with a particular implementation of the scheme.</abstract>
	<conference>CACM May, 1972</conference>
	<authors>
	<author>Gentleman, W. M.</author>
	</authors>
	<keywords>Clenshaw Curtis, numerical integration, automatic quadrature, error estimates, Chebyshev series</keywords>
	<version>5.16</version>
	<location>CA720505 JB January 31, 1978  10:05 AM</location>
	<citations>
	<citation>1982	4	2355</citation>
	<citation>2355	4	2355</citation>
	<citation>2355	4	2355</citation>
	<citation>2355	4	2355</citation>
	<citation>2355	4	2355</citation>
	<citation>2355	4	2355</citation>
	<citation>2355	4	2355</citation>
	<citation>2355	4	2355</citation>
	<citation>2350	4	2355</citation>
	<citation>2350	4	2355</citation>
	<citation>2354	4	2355</citation>
	<citation>2354	4	2355</citation>
	<citation>2354	4	2355</citation>
	<citation>2354	4	2355</citation>
	<citation>1418	5	2355</citation>
	<citation>1521	5	2355</citation>
	<citation>1597	5	2355</citation>
	<citation>1883	5	2355</citation>
	<citation>2040	5	2355</citation>
	<citation>2350	5	2355</citation>
	<citation>2354	5	2355</citation>
	<citation>2355	5	2355</citation>
	<citation>2355	5	2355</citation>
	<citation>2355	5	2355</citation>
	<citation>2640	5	2355</citation>
	<citation>1418	6	2355</citation>
	<citation>1418	6	2355</citation>
	<citation>1521	6	2355</citation>
	<citation>1597	6	2355</citation>
	<citation>1679	6	2355</citation>
	<citation>2350	6	2355</citation>
	<citation>2354	6	2355</citation>
	<citation>2355	6	2355</citation>
	<citation>2355	6	2355</citation>
	<citation>2355	6	2355</citation>
	</citations>
	</document>
	<document id= '2354'>
	<title>Implementing Clenshaw-Curtis Quadrature, II Computing the Cosine Transformation</title>
	<abstract>In a companion paper to this, "I Methodology and Experiences," the automatic Clenshaw-Curtis  quadrature scheme was described and how each quadrature formula used in the scheme requires a cosine  transformation of the integrand values was shown.  The high cost of these cosine transformations has  been a serious drawback in using Clenshaw-Curtis quadrature.  Two other problems related to the cosine  transformation have also been trouble some.  First, the conventional computation of the cosine transformation  by recurrence relation is numerically unstable, particularly at the low frequencies which have the largest  effect upon the integral.  Second, in case the automatic scheme should require refinement of the sampling,  storage is required to save the integrand values after the cosine transformation is computed.  This second  part of the paper shows how the cosine transformation can be computed by a modification of the fast Fourier  transform and all three problems overcome.  The modification is also applicable in other circumstances  requiring cosine or sine transformations, such as polynomial interpolation through the Chebyshev points.</abstract>
	<conference>CACM May, 1972</conference>
	<authors>
	<author>Gentleman, W. M.</author>
	</authors>
	<keywords>fast Fourier transformation, cosine transformation, Clenshaw-Curtis quadrature, Chebyshev series</keywords>
	<version>5.13 5.14 5.16</version>
	<location>CA720506 JB January 31, 1978  9:56 AM</location>
	<citations>
	<citation>2355	4	2354</citation>
	<citation>2355	4	2354</citation>
	<citation>2355	4	2354</citation>
	<citation>2355	4	2354</citation>
	<citation>2350	4	2354</citation>
	<citation>2350	4	2354</citation>
	<citation>2354	4	2354</citation>
	<citation>2354	4	2354</citation>
	<citation>2354	4	2354</citation>
	<citation>2354	4	2354</citation>
	<citation>2354	4	2354</citation>
	<citation>2354	4	2354</citation>
	<citation>2640	4	2354</citation>
	<citation>1418	5	2354</citation>
	<citation>1521	5	2354</citation>
	<citation>1597	5	2354</citation>
	<citation>1679	5	2354</citation>
	<citation>2350	5	2354</citation>
	<citation>2354	5	2354</citation>
	<citation>2354	5	2354</citation>
	<citation>2354	5	2354</citation>
	<citation>2355	5	2354</citation>
	<citation>1418	6	2354</citation>
	<citation>1418	6	2354</citation>
	<citation>1521	6	2354</citation>
	<citation>1597	6	2354</citation>
	<citation>1883	6	2354</citation>
	<citation>2040	6	2354</citation>
	<citation>2350	6	2354</citation>
	<citation>2354	6	2354</citation>
	<citation>2354	6	2354</citation>
	<citation>2355	6	2354</citation>
	</citations>
	</document>
	<document id= '2353'>
	<title>Fast Finite-Difference Solution of Biharmonic Problems</title>
	<abstract>Setting the Reynolds number equal to zero, in a method for solving the Navier-Strokes equations  numerically, results in a fast numerical method for biharmonic problems.  The equation is treated as  a system of two second order equations and a simple smoothing process is essential for convergence.   An application is made to a crack-type problem.</abstract>
	<conference>CACM May, 1972</conference>
	<authors>
	<author>Greenspan, D.</author>
	<author>Schultz, D.</author>
	</authors>
	<keywords>numerical analysis, partial differential equations, biharmonic equation, boundary value problem</keywords>
	<version>5.17</version>
	<location>CA720507 JB January 31, 1978  9:43 AM</location>
	<citations>
	<citation>2352	4	2353</citation>
	<citation>2353	4	2353</citation>
	<citation>2094	5	2353</citation>
	<citation>2353	5	2353</citation>
	<citation>2353	5	2353</citation>
	<citation>2353	5	2353</citation>
	</citations>
	</document>
	<document id= '2352'>
	<title>Minimax Nonlinear Approximation by Approximation on Subsets</title>
	<conference>CACM May, 1972</conference>
	<authors>
	<author>Dunham, C. B.</author>
	</authors>
	<keywords>minimax approximation, nonlinear approximation, subset</keywords>
	<version>5.13</version>
	<location>CA720508 JB January 31, 1978  9:40 AM</location>
	<citations>
	<citation>2352	4	2352</citation>
	<citation>2353	4	2352</citation>
	<citation>2094	5	2352</citation>
	<citation>2352	5	2352</citation>
	<citation>2352	5	2352</citation>
	<citation>2352	5	2352</citation>
	</citations>
	</document>
	<document id= '2351'>
	<title>The Optimality of Winograd's Formula</title>
	<conference>CACM May, 1972</conference>
	<authors>
	<author>Harter, R.</author>
	</authors>
	<keywords>inner product, Winograd's formula</keywords>
	<version>5.14</version>
	<location>CA720509 JB January 31, 1978  9:38 AM</location>
	<citations>
	<citation>2351	5	2351</citation>
	<citation>2351	5	2351</citation>
	<citation>2351	5	2351</citation>
	</citations>
	</document>
	<document id= '2350'>
	<title>Clenshaw-Curtis Quadrature [D1] (Algorithm A424)</title>
	<conference>CACM May, 1972</conference>
	<authors>
	<author>Gentleman, W.M.</author>
	</authors>
	<keywords>quadrature, Chebyshev series, cosine transform, fast Fourier transform</keywords>
	<version>5.1</version>
	<location>CA720510 JB January 31, 1978  9:37 AM</location>
	<citations>
	<citation>2355	4	2350</citation>
	<citation>2355	4	2350</citation>
	<citation>2350	4	2350</citation>
	<citation>2350	4	2350</citation>
	<citation>2350	4	2350</citation>
	<citation>2354	4	2350</citation>
	<citation>2354	4	2350</citation>
	<citation>2640	4	2350</citation>
	<citation>1418	5	2350</citation>
	<citation>2350	5	2350</citation>
	<citation>2350	5	2350</citation>
	<citation>2350	5	2350</citation>
	<citation>2354	5	2350</citation>
	<citation>2355	5	2350</citation>
	<citation>1418	6	2350</citation>
	<citation>1418	6	2350</citation>
	<citation>1521	6	2350</citation>
	<citation>1521	6	2350</citation>
	<citation>1597	6	2350</citation>
	<citation>1597	6	2350</citation>
	<citation>1679	6	2350</citation>
	<citation>1883	6	2350</citation>
	<citation>2040	6	2350</citation>
	<citation>2350	6	2350</citation>
	<citation>2350	6	2350</citation>
	<citation>2354	6	2350</citation>
	<citation>2355	6	2350</citation>
	</citations>
	</document>
	<document id= '2349'>
	<title>Generation of Random Correlated Normal Variables [G5] (Algorithm A425)</title>
	<conference>CACM May, 1972</conference>
	<authors>
	<author>Hurst, R. L.</author>
	<author>Knop, R. E.</author>
	</authors>
	<keywords>random number, normal density, normal distribution, Gaussian density, Gaussian distribution, simulation,  Monte Carlo</keywords>
	<version>5.5</version>
	<location>CA720511 JB January 31, 1978  9:35 AM</location>
	<citations>
	<citation>1663	4	2349</citation>
	<citation>2057	4	2349</citation>
	<citation>2349	4	2349</citation>
	<citation>2349	4	2349</citation>
	<citation>2349	4	2349</citation>
	<citation>2349	4	2349</citation>
	<citation>2349	4	2349</citation>
	<citation>2349	4	2349</citation>
	<citation>2349	4	2349</citation>
	<citation>2349	4	2349</citation>
	<citation>2565	4	2349</citation>
	<citation>1648	5	2349</citation>
	<citation>1716	5	2349</citation>
	<citation>1794	5	2349</citation>
	<citation>1894	5	2349</citation>
	<citation>2043	5	2349</citation>
	<citation>2349	5	2349</citation>
	<citation>2349	5	2349</citation>
	<citation>2349	5	2349</citation>
	<citation>501	5	2349</citation>
	<citation>613	5	2349</citation>
	<citation>774	5	2349</citation>
	</citations>
	</document>
	<document id= '2348'>
	<title>Merge Sort Algorithm [M1] (Algorithm A426)</title>
	<conference>CACM May, 1972</conference>
	<authors>
	<author>Bron, C.</author>
	</authors>
	<keywords>sort, merge</keywords>
	<version>5.31</version>
	<location>CA720512 JB January 31, 1978  9:33 AM</location>
	<citations>
	<citation>1919	4	2348</citation>
	<citation>1969	4	2348</citation>
	<citation>2118	4	2348</citation>
	<citation>2348	4	2348</citation>
	<citation>2679	4	2348</citation>
	<citation>3054	4	2348</citation>
	<citation>1175	5	2348</citation>
	<citation>2348	5	2348</citation>
	<citation>2348	5	2348</citation>
	<citation>2348	5	2348</citation>
	<citation>2563	5	2348</citation>
	<citation>2348	6	2348</citation>
	</citations>
	</document>
	<document id= '2347'>
	<title>Fourier Cosine Integral [D1] (Algorithm A427)</title>
	<conference>CACM May, 1972</conference>
	<authors>
	<author>Linz, P.</author>
	</authors>
	<keywords>numerical integration, quadrature, adaptive quadrature, Filon quadrature, Fourier coefficients,  Fourier integrals</keywords>
	<version>5.16</version>
	<location>CA720513 JB January 31, 1978  9:32 AM</location>
	<citations>
	<citation>2347	5	2347</citation>
	<citation>2347	5	2347</citation>
	<citation>2347	5	2347</citation>
	</citations>
	</document>
	<document id= '2346'>
	<title>Hu-Tucker Minimum Redundancy Alphabetic Coding Method [Z] (Algorithm A428)</title>
	<conference>CACM May, 1972</conference>
	<authors>
	<author>Yohe, J. M.</author>
	</authors>
	<keywords>information theory, coding theory, Hu-Tucker method, minimum redundancy coding</keywords>
	<version>5.6</version>
	<location>CA720514 JB January 31, 1978  9:30 AM</location>
	<citations>
	<citation>2346	4	2346</citation>
	<citation>2459	4	2346</citation>
	<citation>1114	5	2346</citation>
	<citation>2346	5	2346</citation>
	<citation>2346	5	2346</citation>
	<citation>2346	5	2346</citation>
	</citations>
	</document>
	<document id= '2345'>
	<title>Curriculum Recommendations for Graduate Professional Programs in Information Systems</title>
	<abstract>The need for education related to information systems in organizations is discussed, and a  curriculum is proposed for graduate professional programs in universities, at the Master's level.  Material  necessary for such programs is identified, and courses incorporating it are specified.  Detailed course  descriptions are presented, program organization discussed, and implementation questions considered.</abstract>
	<conference>CACM May, 1972</conference>
	<authors>
	<author>Ashenhurst, R. L.</author>
	</authors>
	<keywords>education, management systems, systems analysis, management information systems, information systems  development, information analysis, system design</keywords>
	<version>1.52 3.51</version>
	<location>CA720515 JB January 31, 1978  9:28 AM</location>
	<citations>
	<citation>1720	4	2345</citation>
	<citation>1927	4	2345</citation>
	<citation>2147	4	2345</citation>
	<citation>2163	4	2345</citation>
	<citation>2163	4	2345</citation>
	<citation>2345	4	2345</citation>
	<citation>2345	4	2345</citation>
	<citation>2407	4	2345</citation>
	<citation>2478	4	2345</citation>
	<citation>2594	4	2345</citation>
	<citation>2852	4	2345</citation>
	<citation>2899	4	2345</citation>
	<citation>3130	4	2345</citation>
	<citation>1771	5	2345</citation>
	<citation>2181	5	2345</citation>
	<citation>2345	5	2345</citation>
	<citation>2345	5	2345</citation>
	<citation>2345	5	2345</citation>
	<citation>2407	5	2345</citation>
	<citation>2852	5	2345</citation>
	<citation>3003	5	2345</citation>
	<citation>3011	5	2345</citation>
	<citation>3050	5	2345</citation>
	<citation>1417	6	2345</citation>
	<citation>1659	6	2345</citation>
	<citation>1678	6	2345</citation>
	<citation>1771	6	2345</citation>
	<citation>1927	6	2345</citation>
	<citation>1945	6	2345</citation>
	<citation>2075	6	2345</citation>
	<citation>2097	6	2345</citation>
	<citation>2147	6	2345</citation>
	<citation>2163	6	2345</citation>
	<citation>2163	6	2345</citation>
	<citation>2181	6	2345</citation>
	<citation>2187	6	2345</citation>
	<citation>2302	6	2345</citation>
	<citation>2329	6	2345</citation>
	<citation>2345	6	2345</citation>
	<citation>2345	6	2345</citation>
	<citation>2345	6	2345</citation>
	<citation>2345	6	2345</citation>
	<citation>2345	6	2345</citation>
	<citation>2367	6	2345</citation>
	<citation>2387	6	2345</citation>
	<citation>2387	6	2345</citation>
	<citation>2407	6	2345</citation>
	<citation>2478	6	2345</citation>
	<citation>2479	6	2345</citation>
	<citation>2479	6	2345</citation>
	<citation>2480	6	2345</citation>
	<citation>2485	6	2345</citation>
	<citation>2538	6	2345</citation>
	</citations>
	</document>
	<document id= '2344'>
	<title>On the Optimization of Performance of Time-Sharing Systems by Simulation</title>
	<abstract>A simulation model of a time-sharing system with a finite noncontiguous store and an infinite  auxiliary store is used to study the variation of system parameters such as store size, number of jobs  allowed to execute simultaneously, job-scheduling algorithm, etc.  The effects of these variations on  a measure of system performance is used to ascertain which of the parameters controllable by the job-scheduling  algorithm, including the scheduling itself, require optimization, and which of the parameters not normally  controllable by the scheduling algorithm have a marked effect on system performance.  System performance  is based upon the mean cost of delay to all jobs processed.  It is shown that significant improvements  in the measure of system performance can be obtained by using variable time-slice techniques and by selecting  the optimum round-robin cycle time.  It appears that these features would benefit from optimization whereas  other parameters controllable by the scheduling algorithm affect system performance in a predictable  manner and would not benefit from optimization.  Features not normally under the control of the scheduling  algorithm can also have a marked effect on the measure of performance; in particular, supervisor overheads,  the size of the store, and the speed of the CPU.  A comparison is made between the results of the simulation  model and two analytical equations for quantum-oriented nonpreemptive time-sharing systems.  The comparison  is found to be very favorable.</abstract>
	<conference>CACM June, 1972</conference>
	<authors>
	<author>Blatny, J.</author>
	<author>Clark, S. R.</author>
	<author>Rourke, T. A.</author>
	</authors>
	<keywords>time-sharing, simulation studies, optimization, measure of performance, scheduling algorithms</keywords>
	<version>3.80 4.30 4.32</version>
	<location>CA720601 JB January 31, 1978  9:19 AM</location>
	<citations>
	<citation>2219	4	2344</citation>
	<citation>2344	4	2344</citation>
	<citation>1938	5	2344</citation>
	<citation>2344	5	2344</citation>
	<citation>2344	5	2344</citation>
	<citation>2344	5	2344</citation>
	</citations>
	</document>
	<document id= '2343'>
	<title>A Proposal To Establish a Pseudo Virtual Memory via Writable Overlays</title>
	<abstract>Many computer systems solve executable storage size problems for large programs by using overlays.   However, it appears that no one overlay scheme contains a well-balanced combination of the most useful  capabilities which are found in various existing techniques.  A proposal is presented which utilizes  several of the best capabilities from existing schemes and is complemented by several additional features,  e.g. writable overlays.  The writable overlay capability provides a virtual memory effect, although the  programmer may still be required to design the overlay configuration.  Since overlay structuring is a  complex task, several tools (including a graphic display) are included in the proposal in order to aid  the programmer in the design.  The content of overlays is briefly discussed, and it is noted that many  of the details of the final overlay configuration may be decided after the fact.</abstract>
	<conference>CACM June, 1972</conference>
	<authors>
	<author>Spacek, T. R.</author>
	</authors>
	<keywords>overlay, overlay structure, segment, segmentation, folding, paging, linkage editor, collector,  loader, virtual memory</keywords>
	<version>4.10 4.12 4.39 4.49</version>
	<location>CA720602 JB January 31, 1978  8:53 AM</location>
	<citations>
	<citation>1774	4	2343</citation>
	<citation>2343	4	2343</citation>
	<citation>2343	4	2343</citation>
	<citation>2343	4	2343</citation>
	<citation>1173	5	2343</citation>
	<citation>1774	5	2343</citation>
	<citation>1845	5	2343</citation>
	<citation>2343	5	2343</citation>
	<citation>2343	5	2343</citation>
	<citation>2343	5	2343</citation>
	</citations>
	</document>
	<document id= '2342'>
	<title>Interference Between Communicating Parallel Processes</title>
	<abstract>Various kinds of interference between communicating parallel processes have been examined by  Dijkstra, Knuth, and others.  Solutions have been given for the mutual exclusion problem and associated  subproblems, in the form of parallel programs, and informal proofs of correctness have been given for  these solutions.  In this paper a system of parallel processes is regarded as a machine which proceeds  from one state S (i.e. a collection of pertinent data values and process configurations) to a next state  S' in accordance with a transition rule S --> S'.  A set of such rules yields sequences of states, which  dictate the system's behavior.  The mutual exclusion problem and the associated subproblems are formulated  as questions of inclusion between sets of states, or of the existence of certain sequences.  A mechanical  proof procedure is shown, which will either verify (prove the correctness of ) or discredit (prove the  incorrectness of) an attempted solution, with respect to any of the interference properties.  It is shown  how to calculate transition rules from the "partial rules" by which the individual processes operate.   The formation of partial rules and the calculation of transition rules are both applicable to hardware  processes as well as to software processes, and symmetry between processes is not required.</abstract>
	<conference>CACM June, 1972</conference>
	<authors>
	<author>Gilbert, P.</author>
	<author>Chandler, W. J.</author>
	</authors>
	<keywords>concurrent programming control, cooperating processes, formal programs, interference, mutual exclusion,  operating systems, parallel processes</keywords>
	<version>4.0 4.10 4.30 4.32 4.42 5.24 6.20</version>
	<location>CA720603 JB January 31, 1978  8:44 AM</location>
	<citations>
	<citation>1781	4	2342</citation>
	<citation>1828	4	2342</citation>
	<citation>1854	4	2342</citation>
	<citation>1877	4	2342</citation>
	<citation>1960	4	2342</citation>
	<citation>2150	4	2342</citation>
	<citation>2150	4	2342</citation>
	<citation>2150	4	2342</citation>
	<citation>2228	4	2342</citation>
	<citation>2228	4	2342</citation>
	<citation>2256	4	2342</citation>
	<citation>2256	4	2342</citation>
	<citation>2317	4	2342</citation>
	<citation>2317	4	2342</citation>
	<citation>2319	4	2342</citation>
	<citation>2377	4	2342</citation>
	<citation>2342	4	2342</citation>
	<citation>2342	4	2342</citation>
	<citation>2342	4	2342</citation>
	<citation>2376	4	2342</citation>
	<citation>2376	4	2342</citation>
	<citation>2379	4	2342</citation>
	<citation>2424	4	2342</citation>
	<citation>2482	4	2342</citation>
	<citation>2618	4	2342</citation>
	<citation>2618	4	2342</citation>
	<citation>2618	4	2342</citation>
	<citation>2632	4	2342</citation>
	<citation>2704	4	2342</citation>
	<citation>2723	4	2342</citation>
	<citation>2738	4	2342</citation>
	<citation>2740	4	2342</citation>
	<citation>2741	4	2342</citation>
	<citation>2867	4	2342</citation>
	<citation>3184	4	2342</citation>
	<citation>3184	4	2342</citation>
	<citation>1198	5	2342</citation>
	<citation>1338	5	2342</citation>
	<citation>1749	5	2342</citation>
	<citation>2342	5	2342</citation>
	<citation>2342	5	2342</citation>
	<citation>2342	5	2342</citation>
	</citations>
	</document>
	<document id= '2341'>
	<title>Blocks-A New Data type for SNOBOL4</title>
	<abstract>A new data type, called a block, has been implemented for SNOBOL4.  A block is a three-dimensional  aggregate of characters in the form of a right parallelepiped, best thought of as a three-dimensional  extension to a string.  (The third dimension is used for overstriking.)  Blocks may be printed, concatenated  in any of three dimensions, and merged on the basis of program-defined connection points.  Some blocks  adapt in size and shape to their environment.  Blocks and their operations are mainly used for composing  printable output.  A variety of graphical problems (including flowcharting, bargraphs, logic diagrams,  mathematical-equation formation, and text justification and preparation) have been programmed on a printer  in what appears to be an easy and natural way.  In addition to these somewhat specialized applications,  blocks appear to be a good general purpose device-independent output formation mechanism especially suitable  for nonnumerical work.  The concept of a block is largely language independent.That is, blocks require  little in the way of specialized syntax and could readily be absorbed into the external structure of  most programming languages.</abstract>
	<conference>CACM June, 1972</conference>
	<authors>
	<author>Gimpel, J. F.</author>
	</authors>
	<keywords>character manipulation, output formatting, string processing, graphics, nonnumerical programming,  SNOBOL4, data types, two-dimensional mathematics, test processing, flowcharting</keywords>
	<version>4.22 4.41</version>
	<location>CA720604 JB January 30, 1978  4:38 PM</location>
	<citations>
	<citation>1086	4	2341</citation>
	<citation>1132	4	2341</citation>
	<citation>1234	4	2341</citation>
	<citation>1263	4	2341</citation>
	<citation>1265	4	2341</citation>
	<citation>1270	4	2341</citation>
	<citation>1323	4	2341</citation>
	<citation>1358	4	2341</citation>
	<citation>1379	4	2341</citation>
	<citation>1380	4	2341</citation>
	<citation>1453	4	2341</citation>
	<citation>1464	4	2341</citation>
	<citation>1484	4	2341</citation>
	<citation>1491	4	2341</citation>
	<citation>1498	4	2341</citation>
	<citation>1613	4	2341</citation>
	<citation>1614	4	2341</citation>
	<citation>1767	4	2341</citation>
	<citation>1781	4	2341</citation>
	<citation>1781	4	2341</citation>
	<citation>1781	4	2341</citation>
	<citation>1825	4	2341</citation>
	<citation>1860	4	2341</citation>
	<citation>1945	4	2341</citation>
	<citation>2083	4	2341</citation>
	<citation>2178	4	2341</citation>
	<citation>2179	4	2341</citation>
	<citation>2252	4	2341</citation>
	<citation>2325	4	2341</citation>
	<citation>2341	4	2341</citation>
	<citation>2341	4	2341</citation>
	<citation>2341	4	2341</citation>
	<citation>2341	4	2341</citation>
	<citation>2546	4	2341</citation>
	<citation>2645	4	2341</citation>
	<citation>2652	4	2341</citation>
	<citation>2684	4	2341</citation>
	<citation>2842	4	2341</citation>
	<citation>2929	4	2341</citation>
	<citation>2934	4	2341</citation>
	<citation>3069	4	2341</citation>
	<citation>669	4	2341</citation>
	<citation>679	4	2341</citation>
	<citation>691	4	2341</citation>
	<citation>761	4	2341</citation>
	<citation>949	4	2341</citation>
	<citation>989	4	2341</citation>
	<citation>990	5	2341</citation>
	<citation>1466	5	2341</citation>
	<citation>1468	5	2341</citation>
	<citation>2341	5	2341</citation>
	<citation>2341	5	2341</citation>
	<citation>2341	5	2341</citation>
	<citation>2545	5	2341</citation>
	<citation>3184	5	2341</citation>
	<citation>1739	6	2341</citation>
	<citation>1781	6	2341</citation>
	<citation>2341	6	2341</citation>
	</citations>
	</document>
	<document id= '2340'>
	<title>A Boolean Matrix Method for the Computation of Linear Precedence Functions</title>
	<abstract>A modified version of Bell's Boolean matrix method for the computation of linear precedence  functions associated with a conflict-free matrix of precedence relations is given.  This algorithm not  only detects when the precedence functions do not  exist, but also provides an indication of why they  do not exist, so that corrective action can be taken if possible.  Necessary and sufficient conditions  for the existence of precedence functions are given.  The use of Boolean matrices to prove the existence  of precedence functions associated with classes of conflict-free grammars is illustrated through an example.</abstract>
	<conference>CACM June, 1972</conference>
	<authors>
	<author>Martin, D. F.</author>
	</authors>
	<keywords>precedence grammars, context-free parsing</keywords>
	<version>4.12</version>
	<location>CA720605 JB January 30, 1978  4:28 PM</location>
	<citations>
	<citation>1542	4	2340</citation>
	<citation>1683	4	2340</citation>
	<citation>1693	4	2340</citation>
	<citation>1781	4	2340</citation>
	<citation>1787	4	2340</citation>
	<citation>1836	4	2340</citation>
	<citation>1836	4	2340</citation>
	<citation>1945	4	2340</citation>
	<citation>2060	4	2340</citation>
	<citation>2061	4	2340</citation>
	<citation>2082	4	2340</citation>
	<citation>2091	4	2340</citation>
	<citation>2152	4	2340</citation>
	<citation>2179	4	2340</citation>
	<citation>2221	4	2340</citation>
	<citation>2340	4	2340</citation>
	<citation>2340	4	2340</citation>
	<citation>2340	4	2340</citation>
	<citation>2340	4	2340</citation>
	<citation>2356	4	2340</citation>
	<citation>2546	4	2340</citation>
	<citation>2603	4	2340</citation>
	<citation>2698	4	2340</citation>
	<citation>2708	4	2340</citation>
	<citation>2824	4	2340</citation>
	<citation>2824	4	2340</citation>
	<citation>2982	4	2340</citation>
	<citation>2982	4	2340</citation>
	<citation>2986	4	2340</citation>
	<citation>2986	4	2340</citation>
	<citation>2986	4	2340</citation>
	<citation>3045	4	2340</citation>
	<citation>3093	4	2340</citation>
	<citation>1191	5	2340</citation>
	<citation>1491	5	2340</citation>
	<citation>1683	5	2340</citation>
	<citation>1836	5	2340</citation>
	<citation>2340	5	2340</citation>
	<citation>2340	5	2340</citation>
	<citation>2340	5	2340</citation>
	<citation>2824	5	2340</citation>
	<citation>2982	5	2340</citation>
	<citation>2986	5	2340</citation>
	<citation>1491	6	2340</citation>
	<citation>1491	6	2340</citation>
	<citation>1491	6	2340</citation>
	<citation>1683	6	2340</citation>
	<citation>1683	6	2340</citation>
	<citation>1836	6	2340</citation>
	<citation>1836	6	2340</citation>
	<citation>2179	6	2340</citation>
	<citation>2340	6	2340</citation>
	<citation>2340	6	2340</citation>
	<citation>2340	6	2340</citation>
	</citations>
	</document>
	<document id= '2339'>
	<title>Computer-Assigned Codes from Verbal Responses</title>
	<abstract>It is often desirable to convert verbal responses to multidigit codes. This conversion is generally  accomplished by clerk-coders.  A study was conducted to test the feasibility of translating verbal descriptions  to numerical codes in a computer program.  Primary emphasis was placed on computerized construction of  a reference file of verbal descriptions for use by the program.  The results of the study clearly show  that such procedures are feasible.</abstract>
	<conference>CACM June, 1972</conference>
	<authors>
	<author>Reagan, R. T.</author>
	</authors>
	<keywords>verbal responses, computer coding, reference list, historical response patterns, word strings,  concept translation, word coding</keywords>
	<version>3.30 3.42 3.63 3.66 3.71 3.74 3.75 5.6</version>
	<location>CA720606 JB January 30, 1978  4:23 PM</location>
	<citations>
	<citation>1112	4	2339</citation>
	<citation>1592	4	2339</citation>
	<citation>1592	4	2339</citation>
	<citation>2111	4	2339</citation>
	<citation>2111	4	2339</citation>
	<citation>2111	4	2339</citation>
	<citation>2339	4	2339</citation>
	<citation>2339	4	2339</citation>
	<citation>2339	4	2339</citation>
	<citation>2339	4	2339</citation>
	<citation>440	4	2339</citation>
	<citation>1112	5	2339</citation>
	<citation>1592	5	2339</citation>
	<citation>2339	5	2339</citation>
	<citation>2339	5	2339</citation>
	<citation>2339	5	2339</citation>
	<citation>440	5	2339</citation>
	<citation>619	5	2339</citation>
	</citations>
	</document>
	<document id= '2338'>
	<title>A Starting Method for Solving Nonlinear Volterra Integral Equations of the Second Kind</title>
	<abstract>A fourth-order starting method is given for Volterra integral equations of the second kind  and numerical examples are presented.</abstract>
	<conference>CACM June, 1972</conference>
	<authors>
	<author>Iguchi, K.</author>
	</authors>
	<keywords>algorithm, Volterra integral equations, starting method</keywords>
	<version>5.18</version>
	<location>CA720607 JB January 30, 1978  4:17 PM</location>
	<citations>
	<citation>2338	5	2338</citation>
	<citation>2338	5	2338</citation>
	<citation>2338	5	2338</citation>
	</citations>
	</document>
	<document id= '2337'>
	<title>A Sorting Problem and Its Complexity</title>
	<abstract>A technique for proving min-max norms of sorting algorithms is given.  One new algorithm for  finding the minimum and maximum elements of a set with fewest comparisons is proved optimal with this  technique.</abstract>
	<conference>CACM June, 1972</conference>
	<authors>
	<author>Pohl, I.</author>
	</authors>
	<keywords>sorting, computational complexity, computational combinatorics</keywords>
	<version>5.29 5.31</version>
	<location>CA720608 JB January 30, 1978  4:15 PM</location>
	<citations>
	<citation>2337	5	2337</citation>
	<citation>2337	5	2337</citation>
	<citation>2337	5	2337</citation>
	</citations>
	</document>
	<document id= '2336'>
	<title>Complex Error Function (Algorithm C363)</title>
	<conference>CACM June, 1972</conference>
	<authors>
	<author>Kolbig, K. S.</author>
	</authors>
	<keywords>error function for complex argument, Voigt function, special functions, function evaluation</keywords>
	<version>5.12</version>
	<location>CA720609 JB January 30, 1978  4:12 PM</location>
	<citations>
	<citation>2336	5	2336</citation>
	<citation>2336	5	2336</citation>
	<citation>2336	5	2336</citation>
	</citations>
	</document>
	<document id= '2335'>
	<title>Eigenvalues and Eigenvectors of a Real General matrix (Algorithm R343)</title>
	<conference>CACM June, 1972</conference>
	<authors>
	<author>Niessner, H.</author>
	</authors>
	<keywords>eigenvalues, eigenvectors, QR-algorithm, nonsymmetric matrices, general matrices</keywords>
	<version>5.14</version>
	<location>CA720610 JB January 30, 1978  4:11 PM</location>
	<citations>
	<citation>1968	4	2335</citation>
	<citation>2099	4	2335</citation>
	<citation>2335	4	2335</citation>
	<citation>1662	5	2335</citation>
	<citation>2335	5	2335</citation>
	<citation>2335	5	2335</citation>
	<citation>2335	5	2335</citation>
	</citations>
	</document>
	<document id= '2334'>
	<title>General Random Number Generator (Algorithm R370)</title>
	<conference>CACM June, 1972</conference>
	<authors>
	<author>Proll, L. G.</author>
	</authors>
	<keywords>random number generator, probability density function, transformation, cumulative distribution  function</keywords>
	<version>5.13 5.5</version>
	<location>CA720611 JB January 30, 1978  4:09 PM</location>
	<citations>
	<citation>2334	4	2334</citation>
	<citation>1580	5	2334</citation>
	<citation>2334	5	2334</citation>
	<citation>2334	5	2334</citation>
	<citation>2334	5	2334</citation>
	</citations>
	</document>
	<document id= '2333'>
	<title>Random Vectors Uniform is Solid Angle (Algorithm R381)</title>
	<conference>CACM June, 1972</conference>
	<authors>
	<author>Schrack, G. F.</author>
	</authors>
	<keywords>random vector generator, points uniform on sphere, spherically symmetric probability distribution</keywords>
	<version>5.5</version>
	<location>CA720612 JB January 30, 1978  4:02 PM</location>
	<citations>
	<citation>2333	4	2333</citation>
	<citation>2333	4	2333</citation>
	<citation>2333	4	2333</citation>
	<citation>87	4	2333</citation>
	<citation>1793	5	2333</citation>
	<citation>2333	5	2333</citation>
	<citation>2333	5	2333</citation>
	<citation>2333	5	2333</citation>
	<citation>87	5	2333</citation>
	<citation>88	5	2333</citation>
	</citations>
	</document>
	<document id= '2332'>
	<title>Special Series Summation with Arbitrary Precision (Algorithm R393)</title>
	<conference>CACM June, 1972</conference>
	<authors>
	<author>Sale, A. H. J.</author>
	</authors>
	<keywords>function evaluation, series summation, approximation</keywords>
	<version>5.12 5.13</version>
	<location>CA720613 JB January 30, 1978  4:00 PM</location>
	<citations>
	<citation>2332	5	2332</citation>
	<citation>2332	5	2332</citation>
	<citation>2332	5	2332</citation>
	</citations>
	</document>
	<document id= '2331'>
	<title>An Integer Programming Problem (Algorithm R397)</title>
	<conference>CACM June, 1972</conference>
	<authors>
	<author>Johnson, S. C.</author>
	<author>Kernighan, B. W.</author>
	</authors>
	<keywords>integer programming, change-making problem</keywords>
	<version>5.41</version>
	<location>CA720614 JB January 30, 1978  3:55 PM</location>
	<citations>
	<citation>2331	5	2331</citation>
	<citation>2331	5	2331</citation>
	<citation>2331	5	2331</citation>
	</citations>
	</document>
	<document id= '2330'>
	<title>Calculation of Fourier Integrals (Algorithm R418)</title>
	<conference>CACM June, 1972</conference>
	<authors>
	<author>Einarsson, B.</author>
	</authors>
	<keywords>quadrature, Filon quadrature, integration, Filon integration, Fourier coefficients, Fourier integrals,  Fourier series, spline,spline approximation, spline quadrature, extrapolation, Richardson extrapolation</keywords>
	<version>5.16</version>
	<location>CA720615 JB January 30, 1978  3:53 PM</location>
	<citations>
	<citation>2330	5	2330</citation>
	<citation>2330	5	2330</citation>
	<citation>2330	5	2330</citation>
	</citations>
	</document>
	<document id= '2329'>
	<title>Computer Science-A Vicious Circle</title>
	<conference>CACM June, 1972</conference>
	<authors>
	<author>Kandel, A.</author>
	</authors>
	<keywords>education, computer engineering, computer science curriculum, systems design</keywords>
	<version>1.52 6.0</version>
	<location>CA720616 JB January 30, 1978  3:49 PM</location>
	<citations>
	<citation>1892	4	2329</citation>
	<citation>1901	4	2329</citation>
	<citation>2085	4	2329</citation>
	<citation>2095	4	2329</citation>
	<citation>2218	4	2329</citation>
	<citation>2277	4	2329</citation>
	<citation>2319	4	2329</citation>
	<citation>2329	4	2329</citation>
	<citation>2358	4	2329</citation>
	<citation>2373	4	2329</citation>
	<citation>2380	4	2329</citation>
	<citation>2434	4	2329</citation>
	<citation>2499	4	2329</citation>
	<citation>2501	4	2329</citation>
	<citation>2582	4	2329</citation>
	<citation>2669	4	2329</citation>
	<citation>2828	4	2329</citation>
	<citation>2863	4	2329</citation>
	<citation>2881	4	2329</citation>
	<citation>2928	4	2329</citation>
	<citation>2996	4	2329</citation>
	<citation>3006	4	2329</citation>
	<citation>3067	4	2329</citation>
	<citation>1751	5	2329</citation>
	<citation>2329	5	2329</citation>
	<citation>2329	5	2329</citation>
	<citation>2329	5	2329</citation>
	<citation>2478	5	2329</citation>
	<citation>3003	5	2329</citation>
	<citation>1205	6	2329</citation>
	<citation>1659	6	2329</citation>
	<citation>1678	6	2329</citation>
	<citation>1771	6	2329</citation>
	<citation>1927	6	2329</citation>
	<citation>1945	6	2329</citation>
	<citation>2097	6	2329</citation>
	<citation>2147	6	2329</citation>
	<citation>2163	6	2329</citation>
	<citation>2187	6	2329</citation>
	<citation>2329	6	2329</citation>
	<citation>2329	6	2329</citation>
	<citation>2345	6	2329</citation>
	<citation>2367	6	2329</citation>
	<citation>2407	6	2329</citation>
	<citation>2478	6	2329</citation>
	<citation>2479	6	2329</citation>
	<citation>2480	6	2329</citation>
	<citation>2538	6	2329</citation>
	</citations>
	</document>
	<document id= '2328'>
	<title>Individualizing Instruction in a Generative CAI Tutor</title>
	<conference>CACM June, 1972</conference>
	<authors>
	<author>Koffman, E. B.</author>
	</authors>
	<keywords>computer-assisted instruction, generative CAL, adaptive instruction</keywords>
	<version>3.32 3.51 3.62</version>
	<location>CA720617 JB January 30, 1978  3:47 PM</location>
	<citations>
	<citation>2328	5	2328</citation>
	<citation>2328	5	2328</citation>
	<citation>2328	5	2328</citation>
	</citations>
	</document>
	<document id= '2327'>
	<title>Toward an Automata Theory of Brains</title>
	<abstract>A source of ideas for automata theory-the study of the brain-has been pushed aside in mathematical  development of the theory.  This paper suggests the ways in which automata theory might evolve over the  next 25 years if it is to contribute to an understanding of how the brain processes information.</abstract>
	<conference>CACM July, 1972</conference>
	<authors>
	<author>Arbib, M. A.</author>
	</authors>
	<keywords>automata theory, brain theory, network complexity, resolution of redundancy of potential command,  frog visual system, reticular formation mode selection</keywords>
	<version>3.36 3.65 5.22</version>
	<location>CA720701 JB January 30, 1978  3:46 PM</location>
	<citations>
	<citation>2327	5	2327</citation>
	<citation>2327	5	2327</citation>
	<citation>2327	5	2327</citation>
	</citations>
	</document>
	<document id= '2326'>
	<title>Fix point Approach to the Theory of Computation</title>
	<abstract>Following the fix point theory of Scott, the semantics of computer programs are defined in terms  of the least fix points of recursive programs.  This allows not only the justification of all existing  verification techniques, but also their extension to the handling, in a uniform manner of various properties  of computer programs, including correctness, termination, and equivalence.</abstract>
	<conference>CACM July, 1972</conference>
	<authors>
	<author>Manna, Z.</author>
	<author>Vuillemin, J.</author>
	</authors>
	<keywords>verification techniques, semantics of programming languages, least fix points, recursive programs,  computational induction</keywords>
	<version>5.23 5.24</version>
	<location>CA720702 JB January 30, 1978  3:42 PM</location>
	<citations>
	<citation>1469	4	2326</citation>
	<citation>1486	4	2326</citation>
	<citation>1491	4	2326</citation>
	<citation>1781	4	2326</citation>
	<citation>1781	4	2326</citation>
	<citation>2021	4	2326</citation>
	<citation>2178	4	2326</citation>
	<citation>2178	4	2326</citation>
	<citation>2193	4	2326</citation>
	<citation>2222	4	2326</citation>
	<citation>2227	4	2326</citation>
	<citation>2315	4	2326</citation>
	<citation>2326	4	2326</citation>
	<citation>2326	4	2326</citation>
	<citation>2326	4	2326</citation>
	<citation>2326	4	2326</citation>
	<citation>2326	4	2326</citation>
	<citation>2470	4	2326</citation>
	<citation>2470	4	2326</citation>
	<citation>2477	4	2326</citation>
	<citation>2457	4	2326</citation>
	<citation>2541	4	2326</citation>
	<citation>2594	4	2326</citation>
	<citation>2684	4	2326</citation>
	<citation>2684	4	2326</citation>
	<citation>2732	4	2326</citation>
	<citation>2842	4	2326</citation>
	<citation>2865	4	2326</citation>
	<citation>2896	4	2326</citation>
	<citation>2903	4	2326</citation>
	<citation>2943	4	2326</citation>
	<citation>3004	4	2326</citation>
	<citation>3014	4	2326</citation>
	<citation>3044	4	2326</citation>
	<citation>3068	4	2326</citation>
	<citation>3077	4	2326</citation>
	<citation>3143	4	2326</citation>
	<citation>1303	5	2326</citation>
	<citation>1323	5	2326</citation>
	<citation>1834	5	2326</citation>
	<citation>2192	5	2326</citation>
	<citation>2326	5	2326</citation>
	<citation>2326	5	2326</citation>
	<citation>2326	5	2326</citation>
	<citation>2411	5	2326</citation>
	<citation>2457	5	2326</citation>
	<citation>3186	5	2326</citation>
	<citation>2138	6	2326</citation>
	<citation>2192	6	2326</citation>
	<citation>2326	6	2326</citation>
	<citation>2326	6	2326</citation>
	</citations>
	</document>
	<document id= '2325'>
	<title>Numerical Mathematics and Computer Science</title>
	<abstract>Numerical mathematics is viewed as the analysis of continuous algorithms.  Four of the components  of numerical mathematics are discussed.  These are: foundations (finite precision number systems, computational  complexity), synthesis and analysis of algorithms, analysis of error, programs and program libraries.</abstract>
	<conference>CACM July, 1972</conference>
	<authors>
	<author>Traub, J. F.</author>
	</authors>
	<keywords>numerical mathematics, computer science, mathematics of computation, algorithms, continuous algorithms</keywords>
	<version>1.3 5.0 5.1 5.25</version>
	<location>CA720703 JB January 30, 1978  3:17 PM</location>
	<citations>
	<citation>1086	4	2325</citation>
	<citation>1132	4	2325</citation>
	<citation>1234	4	2325</citation>
	<citation>1263	4	2325</citation>
	<citation>1265	4	2325</citation>
	<citation>1270	4	2325</citation>
	<citation>1323	4	2325</citation>
	<citation>1358	4	2325</citation>
	<citation>1379	4	2325</citation>
	<citation>1380	4	2325</citation>
	<citation>1453	4	2325</citation>
	<citation>1464	4	2325</citation>
	<citation>1484	4	2325</citation>
	<citation>1491	4	2325</citation>
	<citation>1498	4	2325</citation>
	<citation>1613	4	2325</citation>
	<citation>1614	4	2325</citation>
	<citation>1781	4	2325</citation>
	<citation>1825	4	2325</citation>
	<citation>1860	4	2325</citation>
	<citation>2083	4	2325</citation>
	<citation>2178	4	2325</citation>
	<citation>2179	4	2325</citation>
	<citation>2252	4	2325</citation>
	<citation>2325	4	2325</citation>
	<citation>2341	4	2325</citation>
	<citation>2546	4	2325</citation>
	<citation>2645	4	2325</citation>
	<citation>2652	4	2325</citation>
	<citation>2684	4	2325</citation>
	<citation>2842	4	2325</citation>
	<citation>2929	4	2325</citation>
	<citation>2934	4	2325</citation>
	<citation>3069	4	2325</citation>
	<citation>669	4	2325</citation>
	<citation>679	4	2325</citation>
	<citation>691	4	2325</citation>
	<citation>761	4	2325</citation>
	<citation>949	4	2325</citation>
	<citation>989	4	2325</citation>
	<citation>2325	5	2325</citation>
	<citation>2325	5	2325</citation>
	<citation>2325	5	2325</citation>
	<citation>3184	5	2325</citation>
	</citations>
	</document>
	<document id= '2324'>
	<title>Management Science: A View from Nonlinear Programming</title>
	<abstract>A brief history of integer and continuous nonlinear programming is presented as well as the  current obstacles to practical use of these mathematical programming techniques.  It is forecast that  the useful contributions to nonlinear programming actually made in the next few years are more likely  to be consolidations than theoretical breakthroughs.  These contributions are likely to be the documentation  of standard test problems, construction of user oriented software, and comparisons of currently known  algorithms to demonstrate which techniques are best for specific problems.</abstract>
	<conference>CACM July, 1972</conference>
	<authors>
	<author>Shanno, D. F.</author>
	<author>Weil, R. L.</author>
	</authors>
	<keywords>integer programming, linear programming, mathematical programming, nonlinear programming, quadratic  programming, management science, operations research, algorithms</keywords>
	<version>5.41 8.3</version>
	<location>CA720704 JB January 30, 1978  3:14 PM</location>
	<citations>
	<citation>2324	5	2324</citation>
	<citation>2324	5	2324</citation>
	<citation>2324	5	2324</citation>
	</citations>
	</document>
	<document id= '2323'>
	<title>Toward a General Theory of Special Functions</title>
	<abstract>A list of a number of natural developments for the field of algebraic manipulation is given.   Then the prospects for a general theory of functions defined by ordinary differential equations are  discussed.  The claim is made that recent developments in mathematics indicate that it should be possible  to algorithmically generate many properties of solutions to differential equations.  Such a theory is  preferable to a less general effort to make algebraic manipulation systems knowledgeable about the usual  special functions (e.g. exponential, hypergeometric).</abstract>
	<conference>CACM July, 1972</conference>
	<authors>
	<author>Moses, J.</author>
	</authors>
	<keywords>algebraic manipulation, special functions, algebraic simplification, symbolic integration, algebraic  geometry, differential algebra</keywords>
	<version>1.50 3.15 5.19 5.9</version>
	<location>CA720705 JB January 30, 1978  3:07 PM</location>
	<citations>
	<citation>2164	4	2323</citation>
	<citation>2170	4	2323</citation>
	<citation>2323	4	2323</citation>
	<citation>2323	4	2323</citation>
	<citation>2323	4	2323</citation>
	<citation>2719	4	2323</citation>
	<citation>2167	5	2323</citation>
	<citation>2164	5	2323</citation>
	<citation>2170	5	2323</citation>
	<citation>2323	5	2323</citation>
	<citation>2323	5	2323</citation>
	<citation>2323	5	2323</citation>
	</citations>
	</document>
	<document id= '2322'>
	<title>A View of computer Architecture</title>
	<abstract>An attempt is made to predict the developments of the next 25 years in the field of computer  architecture.  Standardized, inexpensive microcomputers on a single chip are predicted.  These will be  used extensively to provide logical functions for noncomputational devices and incidentally for the design  of superscale computers.</abstract>
	<conference>CACM July, 1972</conference>
	<authors>
	<author>Foster, C. C.</author>
	</authors>
	<keywords>computer architecture, projection, microcomputers, computer design, computer organization</keywords>
	<version>1.2 2.1 6.0 6.2</version>
	<location>CA720706 JB January 30, 1978  3:00 PM</location>
	<citations>
	<citation>2322	5	2322</citation>
	<citation>2322	5	2322</citation>
	<citation>2322	5	2322</citation>
	</citations>
	</document>
	<document id= '2321'>
	<title>On the Interface Between Computers and Data Communications Systems</title>
	<abstract>Future systems that combine computers, digital terminals, and communications equipment present  design optimization problems that require reconsideration of the traditional functional responsibilities  of the respective subsystems.  Several "standard" interfaces, by means of which computers and digital  terminals connect to the communications systems will be required.  When specifying these interfaces,  consideration must be given to problems of coordination, synchronization, error control, signaling, stream  multiplexing, and switch control, in addition to minimizing the technological interdependence of specific  subsystem designs.  A focus on some of the problems is obtained in a discussion of a detailed specification  for a particular computer-communications system interface.</abstract>
	<conference>CACM July, 1972</conference>
	<authors>
	<author>Fraser, A. G.</author>
	</authors>
	<keywords>communications, standard interface communications protocol, virtual channel, multiplexed input/output,  coordination of input/output</keywords>
	<version>3.81 6.0 6.35</version>
	<location>CA720707 JB January 30, 1978  2:46 PM</location>
	<citations>
	<citation>2321	5	2321</citation>
	<citation>2321	5	2321</citation>
	<citation>2321	5	2321</citation>
	</citations>
	</document>
	<document id= '2320'>
	<title>Structured Multiprogramming</title>
	<abstract>This paper presents a proposal for structured representation of multiprogramming in a high  level language.  The notation used explicitly associates a data structure shared by concurrent processes  with operations defined on it.  This clarifies the meaning of programs and permits a large class of time-dependent  errors to be caught at compile time.  A combination of critical regions and event variables enables the  programmer to control scheduling of resources among competing processes to any degree desired.  These  concepts are sufficiently safe to use not only within operating systems but also within user programs.</abstract>
	<conference>CACM July, 1972</conference>
	<authors>
	<author>Hansen, P. B.</author>
	</authors>
	<keywords>structured multiprogramming, programming languages, operating systems, concurrent processes, shared  data, mutual exclusion, critical regions, process communication, synchronizing events.</keywords>
	<version>4.2 4.3</version>
	<location>CA720708 JB January 30, 1978  2:39 PM</location>
	<citations>
	<citation>2319	4	2320</citation>
	<citation>2378	4	2320</citation>
	<citation>2320	4	2320</citation>
	<citation>2320	4	2320</citation>
	<citation>2597	4	2320</citation>
	<citation>2632	4	2320</citation>
	<citation>2738	4	2320</citation>
	<citation>2740	4	2320</citation>
	<citation>2777	4	2320</citation>
	<citation>2851	4	2320</citation>
	<citation>2868	4	2320</citation>
	<citation>2895	4	2320</citation>
	<citation>2912	4	2320</citation>
	<citation>2946	4	2320</citation>
	<citation>3127	4	2320</citation>
	<citation>3128	4	2320</citation>
	<citation>2080	5	2320</citation>
	<citation>2150	5	2320</citation>
	<citation>2320	5	2320</citation>
	<citation>2320	5	2320</citation>
	<citation>2320	5	2320</citation>
	<citation>2597	5	2320</citation>
	<citation>2150	6	2320</citation>
	<citation>2320	6	2320</citation>
	</citations>
	</document>
	<document id= '2319'>
	<title>Operating System Performance</title>
	<abstract>An overview of the current and future positions with respect to operating system performance  is given.  While a great deal of information and a large number of models for subsystems have been developed,  gaps still exist in out knowledge.  Because of the severe interactions between the various subsystems  of an operating system, an overall model of the total system must be developed to be able to analyze  and design the performance aspects of an operating system although such total system designs are exceptional  today, it is projected that they will become increasingly more common and necessary in the near future.   Such a design philosophy will clearly have a severe impact on the way we go about modularizing operating  and computer systems.</abstract>
	<conference>CACM July, 1972</conference>
	<authors>
	<author>Lynch, W. C.</author>
	</authors>
	<keywords>computer system, operating system, performance evaluation, performance measurement, measurement,  techniques, modularity, layering, structured programming, paging, virtual memory, input/output, disk  storage facility, drum storage facility, sector queueing</keywords>
	<version>4.30 6.20</version>
	<location>CA720709 JB January 30, 1978  2:33 PM</location>
	<citations>
	<citation>1828	4	2319</citation>
	<citation>1854	4	2319</citation>
	<citation>1877	4	2319</citation>
	<citation>1892	4	2319</citation>
	<citation>1901	4	2319</citation>
	<citation>1960	4	2319</citation>
	<citation>2085	4	2319</citation>
	<citation>2095	4	2319</citation>
	<citation>2150	4	2319</citation>
	<citation>2193	4	2319</citation>
	<citation>2218	4	2319</citation>
	<citation>2258	4	2319</citation>
	<citation>2277	4	2319</citation>
	<citation>2317	4	2319</citation>
	<citation>2319	4	2319</citation>
	<citation>2319	4	2319</citation>
	<citation>2319	4	2319</citation>
	<citation>2319	4	2319</citation>
	<citation>2319	4	2319</citation>
	<citation>2319	4	2319</citation>
	<citation>2319	4	2319</citation>
	<citation>2319	4	2319</citation>
	<citation>2319	4	2319</citation>
	<citation>2319	4	2319</citation>
	<citation>2313	4	2319</citation>
	<citation>2329	4	2319</citation>
	<citation>2358	4	2319</citation>
	<citation>2377	4	2319</citation>
	<citation>2378	4	2319</citation>
	<citation>2373	4	2319</citation>
	<citation>2359	4	2319</citation>
	<citation>2342	4	2319</citation>
	<citation>2376	4	2319</citation>
	<citation>2379	4	2319</citation>
	<citation>2380	4	2319</citation>
	<citation>2320	4	2319</citation>
	<citation>2424	4	2319</citation>
	<citation>2434	4	2319</citation>
	<citation>2437	4	2319</citation>
	<citation>2482	4	2319</citation>
	<citation>2499	4	2319</citation>
	<citation>2480	4	2319</citation>
	<citation>2501	4	2319</citation>
	<citation>2552	4	2319</citation>
	<citation>2582	4	2319</citation>
	<citation>2582	4	2319</citation>
	<citation>2594	4	2319</citation>
	<citation>2618	4	2319</citation>
	<citation>2632	4	2319</citation>
	<citation>2632	4	2319</citation>
	<citation>2669	4	2319</citation>
	<citation>2669	4	2319</citation>
	<citation>2704	4	2319</citation>
	<citation>2709	4	2319</citation>
	<citation>2723	4	2319</citation>
	<citation>2738	4	2319</citation>
	<citation>2738	4	2319</citation>
	<citation>2740	4	2319</citation>
	<citation>2740	4	2319</citation>
	<citation>2741	4	2319</citation>
	<citation>2781	4	2319</citation>
	<citation>2828	4	2319</citation>
	<citation>2860	4	2319</citation>
	<citation>2863	4	2319</citation>
	<citation>2867	4	2319</citation>
	<citation>2868	4	2319</citation>
	<citation>2881	4	2319</citation>
	<citation>2894	4	2319</citation>
	<citation>2928	4	2319</citation>
	<citation>2939	4	2319</citation>
	<citation>2972	4	2319</citation>
	<citation>2991	4	2319</citation>
	<citation>2996	4	2319</citation>
	<citation>3006	4	2319</citation>
	<citation>3054	4	2319</citation>
	<citation>3067	4	2319</citation>
	<citation>3127	4	2319</citation>
	<citation>3155	4	2319</citation>
	<citation>3184	4	2319</citation>
	<citation>1408	5	2319</citation>
	<citation>1719	5	2319</citation>
	<citation>1749	5	2319</citation>
	<citation>1751	5	2319</citation>
	<citation>2016	5	2319</citation>
	<citation>2017	5	2319</citation>
	<citation>2080	5	2319</citation>
	<citation>2188	5	2319</citation>
	<citation>2203	5	2319</citation>
	<citation>2204	5	2319</citation>
	<citation>2319	5	2319</citation>
	<citation>2319	5	2319</citation>
	<citation>2319	5	2319</citation>
	</citations>
	</document>
	<document id= '2318'>
	<title>The Role of Computer System Models in Performance Evaluation</title>
	<abstract>Models constitute a useful means of investigating computer system performance.  This paper  examines the interrelationships between models and other methods for evaluating the performance of computer  systems and establishes circumstances under which the use of a model is appropriate.</abstract>
	<conference>CACM July,1972</conference>
	<authors>
	<author>Kimbleton, S. R.</author>
	</authors>
	<keywords>modeling, evaluation, performance, analytic-models, simulation-models, system-models</keywords>
	<version>2.43 2.44 6.2 8.3</version>
	<location>CA720710 JB January 30, 1978  2:03 PM</location>
	<citations>
	<citation>2151	4	2318</citation>
	<citation>2318	4	2318</citation>
	<citation>1653	5	2318</citation>
	<citation>2318	5	2318</citation>
	<citation>2318	5	2318</citation>
	<citation>2318	5	2318</citation>
	</citations>
	</document>
	<document id= '2317'>
	<title>Programming Systems and Languages 1965-1975</title>
	<abstract>In spite of impressive gains by PL/I, Fortran and Cobol remain the languages in which most  of the world's production programs are written and will remain so into the foreseeable future.  There  is a great deal of theoretical interest in Algol 68 and in extensible languages, but so far at least  they have had little practical impact.  Problem-oriented languages may very well become the most important  language development area in the next five to ten years.  In the operating system area all major computer  manufacturers set out to produce very ambitious multiprogramming systems, and they all ran into similar  problems.  A number of university projects,though not directly comparable to those of the manufacturers,  have contributed greatly to a better understanding of operating system principles.  Important trends  include the increased interest in the development of system measurement and evaluation techniques,and  increased use of microprogramming for some programming system functions.</abstract>
	<conference>CACM July, 1972</conference>
	<authors>
	<author>Rosen, S.</author>
	</authors>
	<keywords>languages, operating systems, programming systems, multiprogramming, history</keywords>
	<version>1.2 4.22 4.32</version>
	<location>CA720711 JB January 30, 1978  1:47 PM</location>
	<citations>
	<citation>1665	4	2317</citation>
	<citation>1768	4	2317</citation>
	<citation>1781	4	2317</citation>
	<citation>1787	4	2317</citation>
	<citation>1805	4	2317</citation>
	<citation>1824	4	2317</citation>
	<citation>1825	4	2317</citation>
	<citation>1828	4	2317</citation>
	<citation>1836	4	2317</citation>
	<citation>1846	4	2317</citation>
	<citation>1854	4	2317</citation>
	<citation>1861	4	2317</citation>
	<citation>1877	4	2317</citation>
	<citation>1892	4	2317</citation>
	<citation>1960	4	2317</citation>
	<citation>2015	4	2317</citation>
	<citation>2110	4	2317</citation>
	<citation>2126	4	2317</citation>
	<citation>2127	4	2317</citation>
	<citation>2150	4	2317</citation>
	<citation>2150	4	2317</citation>
	<citation>2187	4	2317</citation>
	<citation>2188	4	2317</citation>
	<citation>2218	4	2317</citation>
	<citation>2228	4	2317</citation>
	<citation>2256	4	2317</citation>
	<citation>2314	4	2317</citation>
	<citation>2317	4	2317</citation>
	<citation>2317	4	2317</citation>
	<citation>2317	4	2317</citation>
	<citation>2317	4	2317</citation>
	<citation>2317	4	2317</citation>
	<citation>2317	4	2317</citation>
	<citation>2317	4	2317</citation>
	<citation>2317	4	2317</citation>
	<citation>2319	4	2317</citation>
	<citation>2358	4	2317</citation>
	<citation>2377	4	2317</citation>
	<citation>2342	4	2317</citation>
	<citation>2342	4	2317</citation>
	<citation>2376	4	2317</citation>
	<citation>2376	4	2317</citation>
	<citation>2379	4	2317</citation>
	<citation>2424	4	2317</citation>
	<citation>2482	4	2317</citation>
	<citation>2545	4	2317</citation>
	<citation>2546	4	2317</citation>
	<citation>2618	4	2317</citation>
	<citation>2618	4	2317</citation>
	<citation>2625	4	2317</citation>
	<citation>2632	4	2317</citation>
	<citation>2698	4	2317</citation>
	<citation>2704	4	2317</citation>
	<citation>2723	4	2317</citation>
	<citation>2733	4	2317</citation>
	<citation>2738	4	2317</citation>
	<citation>2740	4	2317</citation>
	<citation>2741	4	2317</citation>
	<citation>2842	4	2317</citation>
	<citation>2867	4	2317</citation>
	<citation>3184	4	2317</citation>
	<citation>3184	4	2317</citation>
	<citation>1198	5	2317</citation>
	<citation>1572	5	2317</citation>
	<citation>1693	5	2317</citation>
	<citation>1749	5	2317</citation>
	<citation>1753	5	2317</citation>
	<citation>1781	5	2317</citation>
	<citation>2126	5	2317</citation>
	<citation>2148	5	2317</citation>
	<citation>2317	5	2317</citation>
	<citation>2317	5	2317</citation>
	<citation>2317	5	2317</citation>
	<citation>2874	5	2317</citation>
	<citation>1682	6	2317</citation>
	<citation>2227	6	2317</citation>
	<citation>2317	6	2317</citation>
	<citation>2683	6	2317</citation>
	<citation>2871	6	2317</citation>
	<citation>521	6	2317</citation>
	</citations>
	</document>
	<document id= '2316'>
	<title>Programming Languages: History and Future</title>
	<abstract>This paper discusses both the history and future of programming languages (= higher level languages).   Some of the difficulties in writing such a history are indicated.  A key part of the paper is a tree  showing the chronological development of languages and their interrelationships.  Reasons for the proliferation  of languages are given.  The major languages are listed with the reasons for their importance.  A section  on chronology indicates the happenings of the significant previous time periods and the major topics  of 1972.  Key concepts other than specific languages are discussed.</abstract>
	<conference>CACM July, 1972</conference>
	<authors>
	<author>Sammet, J. E.</author>
	</authors>
	<keywords>programming languages, higher level languages, languages, history, future directions, language  interrelationships, programming language tree, programming language history, programming language future</keywords>
	<version>1.2 4.2</version>
	<location>CA720712 JB January 30, 1978  1:38 PM</location>
	<citations>
	<citation>2316	5	2316</citation>
	<citation>2316	5	2316</citation>
	<citation>2316	5	2316</citation>
	</citations>
	</document>
	<document id= '2315'>
	<title>The Production of Better Mathematical Software</title>
	<abstract>Some observations are made on steps to be taken toward the creation of better mathematical  software.  These steps suggest the need for a coordinated effort and the creation of a center to focus  activities in this area.</abstract>
	<conference>CACM July, 1972</conference>
	<authors>
	<author>Fosdick, L. D.</author>
	</authors>
	<keywords>mathematical software, programming</keywords>
	<version>4.0</version>
	<location>CA720713 JB January 30, 1978  1:32 PM</location>
	<citations>
	<citation>1330	4	2315</citation>
	<citation>1348	4	2315</citation>
	<citation>1986	4	2315</citation>
	<citation>2021	4	2315</citation>
	<citation>2222	4	2315</citation>
	<citation>2227	4	2315</citation>
	<citation>2315	4	2315</citation>
	<citation>2315	4	2315</citation>
	<citation>2315	4	2315</citation>
	<citation>2315	4	2315</citation>
	<citation>2326	4	2315</citation>
	<citation>2470	4	2315</citation>
	<citation>2732	4	2315</citation>
	<citation>2865	4	2315</citation>
	<citation>2896	4	2315</citation>
	<citation>2943	4	2315</citation>
	<citation>3014	4	2315</citation>
	<citation>3068	4	2315</citation>
	<citation>3077	4	2315</citation>
	<citation>3143	4	2315</citation>
	<citation>1348	5	2315</citation>
	<citation>1834	5	2315</citation>
	<citation>1987	5	2315</citation>
	<citation>2315	5	2315</citation>
	<citation>2315	5	2315</citation>
	<citation>2315	5	2315</citation>
	<citation>728	5	2315</citation>
	</citations>
	</document>
	<document id= '2314'>
	<title>Requirements for Advanced Programming Systems for List Processing</title>
	<abstract>List processing systems should be designed to facilitate production of large programs to manipulate  large complex symbolic data stores.  This paper presents an overview of a number of system features which  the author feels are important to improve the productivity of programmers working in such domains.  A  system view it taken, rather than focusing just on language features, since algorithms must be not only  coded in a language form, but debugged, modified, made efficient, and run on data.  Because of this general  framework,the requirements specified are applicable to the design of advanced programming systems for  a wide range of applications.  Three aspects of programming systems are highlighted: good interactive  facilities, programmable control structures, and sophisticated data communication mechanisms.  Interactive  features are described to facilitate program composition, entry, testing, debugging, editing, optimization,  and packaging.  Implementation of a generalized environment structure model specified would allow programming  of various control regimes including multiprocesses, coroutines and backtracking.  Alternative methods  of procedure invocation required include invocation by pattern and by monitoring condition.  The  need  for extended data forms, storage management, and extensibility are stressed, as is the duality of data  retrieval and function evaluation.  Syntax directed input and output of data would facilitate use of  complex data stores.</abstract>
	<conference>CACM July, 1972</conference>
	<authors>
	<author>Bobrow, D. G.</author>
	</authors>
	<keywords>list processing, programming languages, design of programming languages, interactive systems, control  structures, data structures, programming primitives, semantics, advanced programming systems</keywords>
	<version>1.3 4.2 4.22 4.3 4.32 5.23 5.24</version>
	<location>CA720714 JB January 30, 1978  1:30 PM</location>
	<citations>
	<citation>1570	4	2314</citation>
	<citation>1708	4	2314</citation>
	<citation>1781	4	2314</citation>
	<citation>1826	4	2314</citation>
	<citation>1860	4	2314</citation>
	<citation>1945	4	2314</citation>
	<citation>2156	4	2314</citation>
	<citation>2168	4	2314</citation>
	<citation>2249	4	2314</citation>
	<citation>2314	4	2314</citation>
	<citation>2314	4	2314</citation>
	<citation>2314	4	2314</citation>
	<citation>2314	4	2314</citation>
	<citation>2317	4	2314</citation>
	<citation>2719	4	2314</citation>
	<citation>2736	4	2314</citation>
	<citation>2833	4	2314</citation>
	<citation>2842	4	2314</citation>
	<citation>1098	5	2314</citation>
	<citation>1626	5	2314</citation>
	<citation>2082	5	2314</citation>
	<citation>2148	5	2314</citation>
	<citation>2314	5	2314</citation>
	<citation>2314	5	2314</citation>
	<citation>2314	5	2314</citation>
	<citation>2438	5	2314</citation>
	<citation>1826	6	2314</citation>
	<citation>2314	6	2314</citation>
	</citations>
	</document>
	<document id= '2313'>
	<title>The Evolution of Storage Structures</title>
	<abstract>Data base management systems have grown rapidly in their power and complexity over the 15-year  history of data processing on commercially available computers.  The original concepts have split, and  new terms have been adopted to name and refer to these concepts.  The Data Structure Diagram graphic  technique is used to illustrate the splitting of the concepts and the structural relations which exist  between these concepts at each point in the evolution.</abstract>
	<conference>CACM July, 1972</conference>
	<authors>
	<author>Bachman, C. W.</author>
	</authors>
	<keywords>block, cylinder, device, field, extent file, page, record, physical record, logical record, track,  volume, entity, set, entity class, set class, data structure diagram, storage structure, physical storage  structure, logical storage structure, storage allocation structure, Integrated Data Store, index sequential,  hash, randomize, item</keywords>
	<version>1.4 4.41 4.9</version>
	<location>CA720715 JB January 30, 1978  1:16 PM</location>
	<citations>
	<citation>2258	4	2313</citation>
	<citation>2319	4	2313</citation>
	<citation>2313	4	2313</citation>
	<citation>2359	4	2313</citation>
	<citation>2437	4	2313</citation>
	<citation>2552	4	2313</citation>
	<citation>2781	4	2313</citation>
	<citation>2860	4	2313</citation>
	<citation>2991	4	2313</citation>
	<citation>2203	5	2313</citation>
	<citation>2313	5	2313</citation>
	<citation>2313	5	2313</citation>
	<citation>2313	5	2313</citation>
	<citation>2425	5	2313</citation>
	<citation>2313	6	2313</citation>
	</citations>
	</document>
	<document id= '2312'>
	<title>On the Present and Future of Scientific Computation</title>
	<abstract>A pessimistic forecast is given of what can be expected to happen in the application of computers  to the physical sciences.</abstract>
	<conference>CACM July, 1972</conference>
	<authors>
	<author>Rice, J. R.</author>
	</authors>
	<keywords>scientific computation</keywords>
	<version>3.1 5.0</version>
	<location>CA720716 JB January 30, 1978  11:24 AM</location>
	<citations>
	<citation>2312	5	2312</citation>
	<citation>2312	5	2312</citation>
	<citation>2312	5	2312</citation>
	</citations>
	</document>
	<document id= '2311'>
	<title>A Generational Perspective of Information System Development</title>
	<abstract>System development is categorized from a generational point of view that parallels the commonly  described computing system generations.  For each generation, the scope of development projects and the  technological world view of the system developer are examined.</abstract>
	<conference>CACM July, 1972</conference>
	<authors>
	<author>Benjamin, R. I.</author>
	</authors>
	<keywords>computing milieu, management data processing, hardware systems, software systems, systems development  process, functional systems, management systems</keywords>
	<version>2.0 3.50 4.0 6.20</version>
	<location>CA720717 JB January 30, 1978  11:22 AM</location>
	<citations>
	<citation>2311	5	2311</citation>
	<citation>2311	5	2311</citation>
	<citation>2311	5	2311</citation>
	</citations>
	</document>
	<document id= '2310'>
	<title>Language Analysis in the Humanities</title>
	<abstract>The use of the computer in the language-oriented humanities for exhaustive listing of detail  (as in indices and concordances) is widespread and accepted as desirable.  The implications of the computer  for a "science" of the humanities-a science entailing gathering data for the construction and testing  of models-are neither widely recognized nor accepted.  This paper argues that the computer's  major role  as to language analysis in the humanities will be the establishing of such a science.Thus, for those  areas of the humanities for which rigor and precision are necessary (e.g. analyzing literature or teaching  a student to write a composition) the computer can be a critically important facilitator.</abstract>
	<conference>CACM July, 1972</conference>
	<authors>
	<author>Sedelow, S. Y.</author>
	</authors>
	<keywords>language analysis, humanities, science of the humanities, pattern recognition, pattern generation,  interdisciplinary cooperation</keywords>
	<version>1.3 2.19 3.42 3.43</version>
	<location>CA720718 JB January 30, 1978  11:19 AM</location>
	<citations>
	<citation>2127	4	2310</citation>
	<citation>2309	4	2310</citation>
	<citation>2310	4	2310</citation>
	<citation>2396	4	2310</citation>
	<citation>1856	5	2310</citation>
	<citation>2310	5	2310</citation>
	<citation>2310	5	2310</citation>
	<citation>2310	5	2310</citation>
	</citations>
	</document>
	<document id= '2309'>
	<title>Computers in the Instructional Process: Directions for Research and Development</title>
	<abstract>A survey is given of computer applications to the instructional process which suggests how  the computer professional can contribute to effective educational systems.</abstract>
	<conference>CACM July,1972</conference>
	<authors>
	<author>Zinn, K. L.</author>
	</authors>
	<keywords>education</keywords>
	<version>1.5 3.32</version>
	<location>CA720719 JB January 30, 1978  11:13 AM</location>
	<citations>
	<citation>2127	4	2309</citation>
	<citation>2309	4	2309</citation>
	<citation>2309	4	2309</citation>
	<citation>2310	4	2309</citation>
	<citation>2396	4	2309</citation>
	<citation>1856	5	2309</citation>
	<citation>2309	5	2309</citation>
	<citation>2309	5	2309</citation>
	<citation>2309	5	2309</citation>
	<citation>2398	5	2309</citation>
	</citations>
	</document>
	<document id= '2308'>
	<title>Computers and Urban Society</title>
	<abstract>This brief survey of the use of computers in urban society covers the broad range of activities  found in any city.  The future scope of applications is limited only by the imagination and inventiveness  of future system designers, programmers, analysts, and decision makers.  The computer can be, if properly  used, with respect for human dignity and civil liberty, a significant factor in improving the efficiency  of the urban process.  It is expected that the benefits of such computer usage will outweigh the costs  and that we may look forward to an expansion of such usage.</abstract>
	<conference>CACM July, 1972</conference>
	<authors>
	<author>Sturman, G. M.</author>
	</authors>
	<keywords>urban systems, urban applications, data acquisition, data management, engineering analysis, information  systems</keywords>
	<version>3.23 3.39 3.53 3.72 3.82 3.89</version>
	<location>CA720720 JB January 30, 1978  11:05 AM</location>
	<citations>
	<citation>2308	5	2308</citation>
	<citation>2308	5	2308</citation>
	<citation>2308	5	2308</citation>
	</citations>
	</document>
	<document id= '2307'>
	<title>Dynamic Document Processing</title>
	<abstract>The current role of computers in automatic document processing is briefly outlined, and some  reasons are given why the early promise of library automation and of the mechanization of documentation  processes has not been fulfilled.  A new dynamic document environment is then outlined in which clustered files are searched and information is retrieved following an interactive user-controlled search process.   Methods are described for an automatic query modification based on user needs, and for a continuous  reorganization of the stored information as a function of earlier file processing and of normal collection  growth.  The proposed procedures provide powerful tools for information retrieval and for the control  of dynamic library collections in which new items are continually added and old ones are retired.</abstract>
	<conference>CACM July, 1972</conference>
	<authors>
	<author>Salton, G.</author>
	</authors>
	<keywords>automatic indexing, automatic search and retrieval, iterative searching, mechanized library processing,  collection growth, collection retirement, feedback search</keywords>
	<version>3.62 3.71 3.73 3.74</version>
	<location>CA720721 JB January 30, 1978  10:59 AM</location>
	<citations>
	<citation>2307	5	2307</citation>
	<citation>2307	5	2307</citation>
	<citation>2307	5	2307</citation>
	</citations>
	</document>
	<document id= '2306'>
	<title>Ancient Babylonian Algorithms</title>
	<abstract>The early origins of mathematics are discussed, emphasizing those aspects which seem to be  of greatest interest from the standpoint of computer science.  A number of old Babylonian tablets, many  of which have never before been translated into English, are quoted.</abstract>
	<conference>CACM July, 1972</conference>
	<authors>
	<author>Knuth, D. E.</author>
	</authors>
	<keywords>history of computation, Babylonian tablets, sexagesimal number system, sorting</keywords>
	<version>1.2</version>
	<location>CA720722 JB January 30, 1978  10:50 AM</location>
	<citations>
	<citation>2306	5	2306</citation>
	<citation>2306	5	2306</citation>
	<citation>2306	5	2306</citation>
	</citations>
	</document>
	<document id= '2305'>
	<title>The "Plankalkul" of Konrad Zuse: A Forerunner of Today's Programming Languages</title>
	<abstract>Plankalkul was an attempt by Korrad Zuse in the 1940's to devise a notational and conceptual  system for writing what today is termed a program.  Although this early approach to a programming language  did not lead to practical use, the plan is described here because it contains features that are standard  in today's programming languages.  The investigation is of historical interest; also, it may provide  insights that would lead to advancements in the state of the art.  Using modern programming terminology,  the Plankalkul is presented to the extent it has possible to reconstruct it from the published literature.</abstract>
	<conference>CACM July, 1972</conference>
	<authors>
	<author>Bauer, F. L.</author>
	<author>Wossner, H.</author>
	</authors>
	<keywords>higher programming languages, programming, theory of programming, history of programming</keywords>
	<version>1.2 4.22 5.29</version>
	<location>CA720723 JB January 30, 1978  10:46 AM</location>
	<citations>
	<citation>2305	5	2305</citation>
	<citation>2305	5	2305</citation>
	<citation>2305	5	2305</citation>
	</citations>
	</document>
	<document id= '2304'>
	<title>A Western View of Computer History</title>
	<abstract>Many U.S. histories of the digital computer field have tended to be impersonal, with heavy  emphasis on eastern universities and commercial developments.  This article records the events of the  early years in a personal way.  The people, organizations, technologies, and computers of the 1945-55  period in the western part of the United Statesare described as they happened.</abstract>
	<conference>CACM July, 1972</conference>
	<authors>
	<author>Sprague, R. E.</author>
	</authors>
	<keywords>history, computer history</keywords>
	<version>1.2 6.0</version>
	<location>CA720724 JB January 30, 1978  10:40 AM</location>
	<citations>
	<citation>2304	5	2304</citation>
	<citation>2304	5	2304</citation>
	<citation>2304	5	2304</citation>
	</citations>
	</document>
	<document id= '2303'>
	<title>Archaeology of Computers - Reminiscences, 1945-1947</title>
	<abstract>The period preceding the founding of ACM was dominated by the first large computer ENIAC.   Its characteristics, described here, foreshadow later developments.</abstract>
	<conference>CACM July, 1972</conference>
	<authors>
	<author>Alt, F. L.</author>
	</authors>
	<keywords>history of computers</keywords>
	<version>1.2</version>
	<location>CA720725 JB January 30, 1978  10:36 AM</location>
	<citations>
	<citation>2303	5	2303</citation>
	<citation>2303	5	2303</citation>
	<citation>2303	5	2303</citation>
	</citations>
	</document>
	<document id= '2302'>
	<title>Computers and Employment</title>
	<abstract>The relationship of computers and automation to employment is part of the more general relation  of technological change to employment.  The most obvious effect is that increase in productivity due  to technology can eliminate jobs.  Technology affects the individual worker, in the nature and amount  of his work, and in his attitudes toward that work.  Technological change affects the occupational structure  of the entire labor force.  Because of the central importance of these effects, the impact of technology  has been the subject of extensive study by economists, sociologists, political scientists, and psychologists.   Even within a single discipline, studies are often contradictory, and conclusions are colored by political  overtones.  We wish to delineate some of the issues, and present arguments given to support different  viewpoints.</abstract>
	<conference>CACM July, 1972</conference>
	<authors>
	<author>Borodin, A.</author>
	<author>Gotlieb, C. C.</author>
	</authors>
	<keywords>employment, unemployment, social implications, attitudes, skills, obsolescence, technology, unions,  displacement</keywords>
	<version>2.1</version>
	<location>CA720726 JB January 30, 1978  10:30 AM</location>
	<citations>
	<citation>2302	5	2302</citation>
	<citation>2302	5	2302</citation>
	<citation>2302	5	2302</citation>
	<citation>3011	5	2302</citation>
	<citation>2075	6	2302</citation>
	<citation>2302	6	2302</citation>
	<citation>2345	6	2302</citation>
	<citation>2485	6	2302</citation>
	</citations>
	</document>
	<document id= '2301'>
	<title>Generating Parsers for Affix Grammars</title>
	<abstract>Affix grammars are two-level grammars which are similar to van Wijngaarden's two-level grammars  used in the definition of Algol 68.  Affix grammars are shown by Koster to be equal in power to van Wijngaarden  grammars.  They are much more suited to parsing than are the latter, however.  Koster, the inventor of  affix based on recursive procedures.  This paper presents a bottom-up scheme for parsing them, based  on an extension of Floyd Production Language (FPL).  Included is an algorithm, similar to that of DeRemer's,  for converting a large class of affix grammars into FPL.  The paper concludes by discussing briefly the  applicabilities of the conversion algorithm and affix grammars in general, and some possible extensions  to Koster's definition of affix grammars.</abstract>
	<conference>CACM August, 1972</conference>
	<authors>
	<author>Crowe, D.</author>
	</authors>
	<keywords>algorithmic language processing,bottom-up parsing, Floyd Production Language, parsing, syntax  directed compiling, translator writing systems, two-level grammars</keywords>
	<version>3.42 4.12 4.13 4.20 5.23</version>
	<location>CA720801 JB January 30, 1978  10:21 AM</location>
	<citations>
	<citation>2301	5	2301</citation>
	<citation>2301	5	2301</citation>
	<citation>2301	5	2301</citation>
	<citation>2886	5	2301</citation>
	<citation>2301	6	2301</citation>
	</citations>
	</document>
	<document id= '2300'>
	<title>Political Redistricting by Computer</title>
	<abstract>The problems of political redistricting are considered and a computer method for redistricting  is presented.  Criteria for acceptable redistricting are discussed, including population equality, compactness,  contiguity, and preservation of natural and/or political boundaries.  Only nonpartisan criteria are considered.   Using 1970 Bureau of Census population data, specific results are given for the ten Congressional Districts  in the state of Missouri and for the seven St. Louis County Council seats.  Results from the use of the  algorithm indicate the feasibility of political redistricting with the aid of a computer.</abstract>
	<conference>CACM August, 1972</conference>
	<authors>
	<author>Helbig, R. E.</author>
	<author>Orr, P. K.</author>
	<author>Roediger, R. R.</author>
	</authors>
	<keywords>political redistricting, reapportionment, compactness, equal population, contiguity, transportation  algorithm, legislative districts, population units</keywords>
	<version>2.12 3.35 5.41</version>
	<location>CA720802 JB January 30, 1978  10:14 AM</location>
	<citations>
	<citation>2300	5	2300</citation>
	<citation>2300	5	2300</citation>
	<citation>2300	5	2300</citation>
	</citations>
	</document>
	<document id= '2299'>
	<title>An Extensible Editor for a Small Machine with Disk Storage</title>
	<abstract>A design philosophy for developing a sophisticated utility program is illustrated by the actual  design and implementation of a text editor.  A versatile data structure is employed so that only a small  number of programmed subroutines are necessary for all types of data manipulation.  Such a data structure  is described, and its merits are illustrated by the ease with which powerful extensions can be implemented  in terms of a few basic editing function.</abstract>
	<conference>CACM August, 1972</conference>
	<authors>
	<author>Benjamin, A. J.</author>
	</authors>
	<keywords>command processing, context searching, executive program, garbage collection, interpreter, list  processing, macro language, paging, parameter substitution, recursion, state table, storage allocation,  string manipulation, text editing, virtual memory</keywords>
	<version>3.73 3.74 3.75 4.13 4.22 4.43 4.49</version>
	<location>CA720803 JB January 30, 1978  10:00 AM</location>
	<citations>
	<citation>1626	4	2299</citation>
	<citation>1708	4	2299</citation>
	<citation>1781	4	2299</citation>
	<citation>1860	4	2299</citation>
	<citation>2299	4	2299</citation>
	<citation>2299	4	2299</citation>
	<citation>2501	4	2299</citation>
	<citation>2629	4	2299</citation>
	<citation>2915	4	2299</citation>
	<citation>3114	4	2299</citation>
	<citation>1502	5	2299</citation>
	<citation>1641	5	2299</citation>
	<citation>2299	5	2299</citation>
	<citation>2299	5	2299</citation>
	<citation>2299	5	2299</citation>
	</citations>
	</document>
	<document id= '2298'>
	<title>An Environment for Research in Microprogramming and Emulation</title>
	<abstract>The development of the research project in microprogramming and emulation at State University  of New York at Buffalo consisted of three phases: the evaluation of various possible machines to support  this research; the decision to purchase one such machine, which appears to be superior to the others  considered; and the organization and definition of goals for each group in the project.  Each of these  phases is reported, with emphasis placed on the early results achieved in this research.</abstract>
	<conference>CACM August, 1972</conference>
	<authors>
	<author>Rosin, R. F.</author>
	<author>Frieder, G.</author>
	</authors>
	<keywords>microprogramming, emulation, computer systems, language processors, input-output systems, nano-program,  project management, hardware evaluation</keywords>
	<version>4.1 4.2 4.3 6.2</version>
	<location>CA720804 JB January 30, 1978  9:55 AM</location>
	<citations>
	<citation>2298	5	2298</citation>
	<citation>2298	5	2298</citation>
	<citation>2298	5	2298</citation>
	<citation>3144	5	2298</citation>
	<citation>1471	6	2298</citation>
	<citation>2298	6	2298</citation>
	<citation>2491	6	2298</citation>
	<citation>2597	6	2298</citation>
	<citation>2624	6	2298</citation>
	<citation>2625	6	2298</citation>
	<citation>2632	6	2298</citation>
	</citations>
	</document>
	<document id= '2297'>
	<title>A Model of Memory Contention in a Paging Machine</title>
	<abstract>This paper is concerned with certain aspects of contention for main memory resources in a multiprogrammed  computer system operating under demand paging.  In the model presented, the number of page-frames of  main memory allocated to a problem program varies in time.  These changes in memory configuration are  represented explicitly in the model, CPU requirements and page exception characteristics of program material  being described statistically.  Expressions for the distribution of the number of page-frames allocated  to an executing program, the long run expected fraction of a program's execution time in a given number  of page-frames, and the average execution interval of the multiprogrammed load are obtained.  It is pointed  out heuristically and demonstrated numerically that an increase is obtain able in the average execution  interval of the multiprogrammed load over that resulting from equal fixed partitioning of main memory.</abstract>
	<conference>CACM August, 1972</conference>
	<authors>
	<author>Oden, P. H.</author>
	<author>Shedler, G. S.</author>
	</authors>
	<keywords>paging machines, demand paging, operating systems studies, queuing analysis, memory contention,  memory management</keywords>
	<version>4.32</version>
	<location>CA720805 JB January 30, 1978  9:50 AM</location>
	<citations>
	<citation>1879	4	2297</citation>
	<citation>1884	4	2297</citation>
	<citation>1892	4	2297</citation>
	<citation>1901	4	2297</citation>
	<citation>1924	4	2297</citation>
	<citation>2095	4	2297</citation>
	<citation>2095	4	2297</citation>
	<citation>2218	4	2297</citation>
	<citation>2277	4	2297</citation>
	<citation>2297	4	2297</citation>
	<citation>2297	4	2297</citation>
	<citation>2365	4	2297</citation>
	<citation>2374	4	2297</citation>
	<citation>2526	4	2297</citation>
	<citation>2667	4	2297</citation>
	<citation>2668	4	2297</citation>
	<citation>2862	4	2297</citation>
	<citation>2863	4	2297</citation>
	<citation>1728	5	2297</citation>
	<citation>1754	5	2297</citation>
	<citation>2297	5	2297</citation>
	<citation>2297	5	2297</citation>
	<citation>2297	5	2297</citation>
	</citations>
	</document>
	<document id= '2296'>
	<title>Compiling Fixed-Point Multiplications</title>
	<conference>CACM August, 1972</conference>
	<authors>
	<author>Bernstein, H. J.</author>
	</authors>
	<keywords>compiling multiplications, fixed-point arithmetic</keywords>
	<version>4.12</version>
	<location>CA720806 JB January 30, 1978  9:42 AM</location>
	<citations>
	<citation>2296	4	2296</citation>
	<citation>2952	4	2296</citation>
	<citation>2185	5	2296</citation>
	<citation>2296	5	2296</citation>
	<citation>2296	5	2296</citation>
	<citation>2296	5	2296</citation>
	</citations>
	</document>
	<document id= '2295'>
	<title>Comment on the Composition of Semantics in Algol 68</title>
	<conference>CACM August, 1972</conference>
	<authors>
	<author>Poel, W. L.</author>
	</authors>
	<keywords>programming primitives, programming languages, Algol, semantics, recursive composition, design  of programming languages, data structures</keywords>
	<version>1.3 4.2 4.22 5.23 5.24</version>
	<location>CA720807 JB January 30, 1978  9:29 AM</location>
	<citations>
	<citation>2295	5	2295</citation>
	<citation>2295	5	2295</citation>
	<citation>2295	5	2295</citation>
	</citations>
	</document>
	<document id= '2294'>
	<title>A Bonus from van Wijngaarden's Device</title>
	<conference>CACM August, 1972</conference>
	<authors>
	</authors>
	<keywords>non-local transfers, procedure returns</keywords>
	<version>4.12 4.13 4.22</version>
	<location>CA720808 JB January 30, 1978  9:27 AM</location>
	<citations>
	<citation>2060	4	2294</citation>
	<citation>2155	4	2294</citation>
	<citation>2294	4	2294</citation>
	<citation>2294	4	2294</citation>
	<citation>2470	4	2294</citation>
	<citation>2558	4	2294</citation>
	<citation>2842	4	2294</citation>
	<citation>3077	4	2294</citation>
	<citation>3124	4	2294</citation>
	<citation>3150	4	2294</citation>
	<citation>1469	5	2294</citation>
	<citation>2060	5	2294</citation>
	<citation>2294	5	2294</citation>
	<citation>2294	5	2294</citation>
	<citation>2294	5	2294</citation>
	</citations>
	</document>
	<document id= '2293'>
	<title>Comment on Average Binary Search Length</title>
	<conference>CACM August, 1972</conference>
	<authors>
	<author>Jones, P. R.</author>
	</authors>
	<keywords>searching, binary searching, record retrieval</keywords>
	<version>3.74</version>
	<location>CA720809 JB January 30, 1978  9:26 AM</location>
	<citations>
	<citation>2293	4	2293</citation>
	<citation>2157	5	2293</citation>
	<citation>2293	5	2293</citation>
	<citation>2293	5	2293</citation>
	<citation>2293	5	2293</citation>
	</citations>
	</document>
	<document id= '2292'>
	<title>A Note on the Generation of Rosary Permutations</title>
	<conference>CACM August, 1972</conference>
	<authors>
	<author>Read, R. C.</author>
	</authors>
	<keywords>permutation, permutation generation</keywords>
	<version>5.39</version>
	<location>CA720810 JB January 30, 1978  9:24 AM</location>
	<citations>
	<citation>2292	4	2292</citation>
	<citation>2505	4	2292</citation>
	<citation>2189	5	2292</citation>
	<citation>2292	5	2292</citation>
	<citation>2292	5	2292</citation>
	<citation>2292	5	2292</citation>
	<citation>2505	5	2292</citation>
	<citation>2189	6	2292</citation>
	<citation>2292	6	2292</citation>
	<citation>521	6	2292</citation>
	</citations>
	</document>
	<document id= '2291'>
	<title>Localization of the Roots of a Polynomial [C2] (Algorithm A429)</title>
	<conference>CACM August, 1972</conference>
	<authors>
	<author>Squire, W.</author>
	</authors>
	<keywords>polynomials, roots of polynomials,theory of equations, Routh-Hurwitz criterion</keywords>
	<version>5.15</version>
	<location>CA720811 JB January 30, 1978  9:21 AM</location>
	<citations>
	<citation>2291	5	2291</citation>
	<citation>2291	5	2291</citation>
	<citation>2291	5	2291</citation>
	</citations>
	</document>
	<document id= '2290'>
	<title>Immediate Predominators in a Directed Graph [H] (Algorithm A430)</title>
	<conference>CACM August, 1972</conference>
	<authors>
	<author>Moore, E. F.</author>
	</authors>
	<keywords>predominator, immediate predominator, graph theory, directed graph, shortest path, articulation,  connectivity, program optimization, optimizing compiler</keywords>
	<version>4.12 5.32</version>
	<location>CA720812 JB January 30, 1978  9:19 AM</location>
	<citations>
	<citation>1807	4	2290</citation>
	<citation>2034	4	2290</citation>
	<citation>2290	4	2290</citation>
	<citation>2579	4	2290</citation>
	<citation>2923	4	2290</citation>
	<citation>2945	4	2290</citation>
	<citation>1947	5	2290</citation>
	<citation>2290	5	2290</citation>
	<citation>2290	5	2290</citation>
	<citation>2290	5	2290</citation>
	</citations>
	</document>
	<document id= '2289'>
	<title>Cellular Arrays for the Solution of Graph Problems</title>
	<abstract>A cellular array is a two-dimensional, checkerboard type interconnection of identical modules  (or cells), where each cell contains a few bits of memory and a small amount of combinational logic,  and communicates mainly with its immediate neighbors in the array.  The chief computational advantage  offered by cellular arrays is the improvement in speed achieved by virtue of the possibilities for parallel  processing.  In this paper it is shown that cellular arrays are inherently well suited for the solution  of many graph problems.  For example, the adjacency matrix of a graph is easily mapped onto an array;  each matrix element is stored in one cell of the array, and typical row and column operations are readily  implemented by simple cell logic.  A major challenge in the effective use of cellular arrays for the  solution of graph problems is the determination of algorithms that exploit the possibilities for parallelism,  especially for problems whose solutions appear to be inherently serial.  In particular, several parallelized  algorithms are presented for the solution of certain spanning tree, distance, and path problems, with  direct applications to wire routing, PERT chart analysis, and the analysis of many types of networks.   These algorithms exhibit a computation time that in many cases grows at a rate not exceeding log2 n,  where n is the number of nodes in the graph.  Straightforward cellular implementations of the well-known  serial algorithms for these problems require about n steps, and noncellular implementations require from  n^2 to n^3 steps.</abstract>
	<conference>CACM September, 1972</conference>
	<authors>
	<author>Levitt, K. N.</author>
	<author>Kautz, W. H.</author>
	</authors>
	<keywords>graph theory, cellular logic-in-memory arrays, parallel processing, special purpose computers,  algorithms for distance and spanning tree problems</keywords>
	<version>5.32 6.22 6.5</version>
	<location>CA720901 JB January 30, 1978  9:16 AM</location>
	<citations>
	<citation>2289	5	2289</citation>
	<citation>2289	5	2289</citation>
	<citation>2289	5	2289</citation>
	<citation>3075	5	2289</citation>
	<citation>3156	5	2289</citation>
	<citation>2289	6	2289</citation>
	<citation>2289	6	2289</citation>
	<citation>2557	6	2289</citation>
	<citation>2664	6	2289</citation>
	<citation>2714	6	2289</citation>
	<citation>2973	6	2289</citation>
	<citation>3075	6	2289</citation>
	</citations>
	</document>
	<document id= '2288'>
	<title>File Organization: The Consecutive Retrieval Property</title>
	<abstract>The consecutive retrieval property is an important relation between a query set and record  set.  Its existence enables the design of an information retrieval system with a minimal search time  and no redundant storage.  Some important theorems on the consecutive retrieval property are proved in  this paper.  Conditions under which the consecutive retrieval property exists and remain invariant have  been established.  An outline for designing an information retrieval system based on the consecutive  retrieval property is also discussed.</abstract>
	<conference>CACM September, 1972</conference>
	<authors>
	<author>Ghosh, S. P.</author>
	</authors>
	<keywords>file organization, consecutive storage, consecutive retrieval, information retrieval, record organization,  query structure, record structure, storage on tapes, storage space, minimum access time</keywords>
	<version>3.70 3.73 3.74</version>
	<location>CA720902 JB January 27,1978  4:52 PM</location>
	<citations>
	<citation>2288	5	2288</citation>
	<citation>2288	5	2288</citation>
	<citation>2288	5	2288</citation>
	<citation>2729	5	2288</citation>
	<citation>2288	6	2288</citation>
	<citation>2801	6	2288</citation>
	</citations>
	</document>
	<document id= '2287'>
	<title>A New Approach to Automatic Scanning of Contour Maps</title>
	<abstract>The problem of automatic digitizing of contour maps is discussed.  The structure of a general  contour map is analyzed, and its topological properties are utilized in developing a new scanning algorithm.   The problem of detection and recognition of contour lines is solved by a two color labeling method.   It is shown that for maps containing normal contour lines only, it suffices to distinguish between so-called  "even" and "odd" lines.  The "tangency problem" involved in practical scanning is discussed, and a solution  based on minimizing computer memory space and simplifying control program is suggested.</abstract>
	<conference>CACM September, 1972</conference>
	<authors>
	<author>Mor, M.</author>
	<author>Lamdan, T.</author>
	</authors>
	<keywords>automatic scanning, contour maps, digitizing, contour lines, topology, detection and recognition</keywords>
	<version>3.14 3.19 6.35 6.36</version>
	<location>CA720903 JB January 27, 1978  4:46 PM</location>
	<citations>
	<citation>2287	4	2287</citation>
	<citation>2547	4	2287</citation>
	<citation>3062	4	2287</citation>
	<citation>1925	5	2287</citation>
	<citation>2287	5	2287</citation>
	<citation>2287	5	2287</citation>
	<citation>2287	5	2287</citation>
	</citations>
	</document>
	<document id= '2286'>
	<title>Automatic Error Analysis for Determining Precision</title>
	<abstract>The problem considered is that of evaluating a rational expression to within any desired tolerance  on a computer which performs variable-precision floating-point arithmetic operations.    An automatic  error analysis technique is given for determining, directly from the results of a trial low-precision  interval arithmetic calculation, just how much precision and data accuracy are required to achieve a  desired final accuracy.  The technique given generalize easily to the evaluation of many nonrational  expressions.</abstract>
	<conference>CACM September, 1972</conference>
	<authors>
	<author>Richman, P. L.</author>
	</authors>
	<keywords>error analysis, interval arithmetic, precision control</keywords>
	<version>5.11</version>
	<location>CA720904 JB January 27, 1978  4:39 PM</location>
	<citations>
	<citation>2286	5	2286</citation>
	<citation>2286	5	2286</citation>
	<citation>2286	5	2286</citation>
	<citation>2555	5	2286</citation>
	<citation>2605	5	2286</citation>
	<citation>1026	6	2286</citation>
	<citation>2286	6	2286</citation>
	<citation>2286	6	2286</citation>
	</citations>
	</document>
	<document id= '2285'>
	<title>Computer Routine for Quadratic and Linear Programming Problems [H] (Algorithm A431)</title>
	<abstract>A computer program based on Lemke's complementary pivot algorithm is presented.  This can be  used to solve linear and quadratic programming problems.  The program has been extensively tested on a wide range of problems and the results have been extremely satisfactory.</abstract>
	<conference>CACM September, 1972</conference>
	<authors>
	<author>Ravindran, A.</author>
	</authors>
	<keywords>linear program, quadratic program, complementary problem, Lemke's algorithm, simplex method</keywords>
	<version>5.41</version>
	<location>CA720905 JB January 27, 1978  4:34 PM</location>
	<citations>
	<citation>2285	5	2285</citation>
	<citation>2285	5	2285</citation>
	<citation>2285	5	2285</citation>
	</citations>
	</document>
	<document id= '2284'>
	<title>Solution of the Matrix Equation AX+XB=C [F4] (Algorithm A432)</title>
	<conference>CACM September, 1972</conference>
	<authors>
	<author>Bartels, R. H.</author>
	<author>Stewart, G. W.</author>
	</authors>
	<keywords>linear algebra, matrices, linear equations</keywords>
	<version>5.14</version>
	<location>CA720906 JB January 27, 1978  4:31 PM</location>
	<citations>
	<citation>2284	5	2284</citation>
	<citation>2284	5	2284</citation>
	<citation>2284	5	2284</citation>
	</citations>
	</document>
	<document id= '2283'>
	<title>Thinning Algorithms on Rectangular, Hexagonal, and Triangular Arrays</title>
	<abstract>In this report three thinning algorithms are developed: one each for use with rectangular,  hexagonal, and triangular arrays.  The approach to the development of each algorithm is the same.  Pictorial  results produced by each of the algorithms are presented and the relative performances of the algorithms  are compared.  It is found that the algorithm operating with the triangular array is the most sensitive  to image irregularities and noise, yet it will yield a thinned image with an overall reduced number of  points.  It is concluded that the algorithm operating in conjunction with the hexagonal array has features  which strike a balance between those of the other two arrays.</abstract>
	<conference>CACM September, 1972</conference>
	<authors>
	<author>Deutsch, E. S.</author>
	</authors>
	<keywords>thinning algorithms, rectangular, hexagonal, triangular arrays, image processing, skeleton</keywords>
	<version>3.64</version>
	<location>CA720907 JB January 27, 1978  4:25 PM</location>
	<citations>
	<citation>2283	5	2283</citation>
	<citation>2283	5	2283</citation>
	<citation>2283	5	2283</citation>
	</citations>
	</document>
	<document id= '2282'>
	<title>A Comparison of Floating Point Summation Methods</title>
	<conference>CACM September, 1972</conference>
	<authors>
	<author>Gregory, J.</author>
	</authors>
	<keywords>summation, floating-point addition, truncation error, error propagation</keywords>
	<version>5.11</version>
	<location>CA720908 JB January 27, 1978  4:20 PM</location>
	<citations>
	<citation>2183	4	2282</citation>
	<citation>2282	4	2282</citation>
	<citation>2282	4	2282</citation>
	<citation>2860	4	2282</citation>
	<citation>3083	4	2282</citation>
	<citation>1328	5	2282</citation>
	<citation>2049	5	2282</citation>
	<citation>2282	5	2282</citation>
	<citation>2282	5	2282</citation>
	<citation>2282	5	2282</citation>
	</citations>
	</document>
	<document id= '2281'>
	<title>The Eigen problem of Block Tridiagonal Matrices</title>
	<conference>CACM September, 1972</conference>
	<authors>
	<author>Khalil, H. M.</author>
	</authors>
	<keywords>linear algebra, eigenvalues and eigenvectors, partial differential equations</keywords>
	<version>5.14 5.17</version>
	<location>CA720909 JB January 27, 1978  4:18 PM</location>
	<citations>
	<citation>2281	5	2281</citation>
	<citation>2281	5	2281</citation>
	<citation>2281	5	2281</citation>
	</citations>
	</document>
	<document id= '2280'>
	<title>Comment on Deadlock Prevention Method</title>
	<conference>CACM September, 1972</conference>
	<authors>
	<author>Parnas, D. L.</author>
	<author>Habermann, A. N.</author>
	</authors>
	<keywords>multiprogramming, time-sharing, scheduling, resource allocation, deadlock, interlock, lockout,  deadly embrace, knotting</keywords>
	<version>3.72 4.32 6.20</version>
	<location>CA720910 JB January 27, 1978  4:16 PM</location>
	<citations>
	<citation>2228	4	2280</citation>
	<citation>2280	4	2280</citation>
	<citation>2280	4	2280</citation>
	<citation>2379	4	2280</citation>
	<citation>2379	4	2280</citation>
	<citation>2482	4	2280</citation>
	<citation>2482	4	2280</citation>
	<citation>2500	4	2280</citation>
	<citation>2740	4	2280</citation>
	<citation>2851	4	2280</citation>
	<citation>2920	4	2280</citation>
	<citation>1877	5	2280</citation>
	<citation>2228	5	2280</citation>
	<citation>2280	5	2280</citation>
	<citation>2280	5	2280</citation>
	<citation>2280	5	2280</citation>
	</citations>
	</document>
	<document id= '2279'>
	<title>A Controller for a Braille Terminal</title>
	<conference>CACM September, 1972</conference>
	<authors>
	<author>Rubinstein, R.</author>
	<author>Feldman, J.</author>
	</authors>
	<keywords>blind programming aid, braille, braille character set, braille character translation, braille computer  communication, braille computer terminal, braille terminal, tactile computer communication, tactile terminal</keywords>
	<version>1.59 4.41 6.35</version>
	<location>CA720911 JB January 27, 1978  4:14 PM</location>
	<citations>
	<citation>2279	4	2279</citation>
	<citation>1740	5	2279</citation>
	<citation>2279	5	2279</citation>
	<citation>2279	5	2279</citation>
	<citation>2279	5	2279</citation>
	</citations>
	</document>
	<document id= '2278'>
	<title>On Foster's Information Storage and Retrieval Using AVL Trees</title>
	<conference>CACM September, 1972</conference>
	<authors>
	<author>Tan, K. C.</author>
	</authors>
	<keywords>binary trees, search trees, information storage, information retrieval</keywords>
	<version>3.70 3.73 3.74</version>
	<location>CA720912 JB January 27, 1978  4:10 PM</location>
	<citations>
	<citation>2278	5	2278</citation>
	<citation>2278	5	2278</citation>
	<citation>2278	5	2278</citation>
	<citation>2455	5	2278</citation>
	<citation>2278	6	2278</citation>
	<citation>2388	6	2278</citation>
	</citations>
	</document>
	<document id= '2277'>
	<title>Demand Paging Through Utilization of Working Sets on the MANIAC II</title>
	<abstract>A hardware implementation on the Maniac II computer of the working set model for demand paging,  as introduced by Denning, is discussed.  Characteristics of the Maniac II are given, along with a description  of the basic demand paging scheme and the associate memory which has been added to the Maniac II hardware.   Finally, a description of the hardware design for implementation of the working set model is discussed  and a specification of the actions taken under various conditions which may arise during the operation  of the full working set model, demand paging system is given.</abstract>
	<conference>CACM October, 1972</conference>
	<authors>
	<author>Morris, J. B.</author>
	</authors>
	<keywords>demand paging, dynamic storage allocation, Maniac II, memory allocation, one-level store, paging,  paging associative memory, storage allocation, thrashing, virtual memory, working set model</keywords>
	<version>4.30 6.21</version>
	<location>CA721001 JB January 27, 1978  4:06 PM</location>
	<citations>
	<citation>1879	4	2277</citation>
	<citation>1884	4	2277</citation>
	<citation>1892	4	2277</citation>
	<citation>1901	4	2277</citation>
	<citation>1901	4	2277</citation>
	<citation>2085	4	2277</citation>
	<citation>2095	4	2277</citation>
	<citation>2095	4	2277</citation>
	<citation>2218	4	2277</citation>
	<citation>2277	4	2277</citation>
	<citation>2277	4	2277</citation>
	<citation>2297	4	2277</citation>
	<citation>2319	4	2277</citation>
	<citation>2329	4	2277</citation>
	<citation>2358	4	2277</citation>
	<citation>2365	4	2277</citation>
	<citation>2373	4	2277</citation>
	<citation>2380	4	2277</citation>
	<citation>2434	4	2277</citation>
	<citation>2499	4	2277</citation>
	<citation>2501	4	2277</citation>
	<citation>2582	4	2277</citation>
	<citation>2669	4	2277</citation>
	<citation>2828	4	2277</citation>
	<citation>2863	4	2277</citation>
	<citation>2881	4	2277</citation>
	<citation>2928	4	2277</citation>
	<citation>2996	4	2277</citation>
	<citation>3006	4	2277</citation>
	<citation>3067	4	2277</citation>
	<citation>1751	5	2277</citation>
	<citation>1754	5	2277</citation>
	<citation>2277	5	2277</citation>
	<citation>2277	5	2277</citation>
	<citation>2277	5	2277</citation>
	<citation>2928	5	2277</citation>
	<citation>3127	5	2277</citation>
	<citation>1751	6	2277</citation>
	<citation>2080	6	2277</citation>
	<citation>2277	6	2277</citation>
	<citation>2277	6	2277</citation>
	<citation>2380	6	2277</citation>
	<citation>2522	6	2277</citation>
	<citation>2569	6	2277</citation>
	</citations>
	</document>
	<document id= '2276'>
	<title>Computer Methods for Sampling from the Exponential and Normal Distributions</title>
	<abstract>Various methods are known for transforming uniformly distributed random numbers into exponentially and normally distributed quantities.  The most efficient ones are compared, in terms of memory requirements  and speed, with some new algorithms.  A number of procedures convert Taylor series expansions directly  into sampling steps, an approach which may be used for sampling from any continuous distribution.  For  the exponential distribution a definite recommendation can be made, whereas in the case of the normal  distribution there remains a choice between slower and shorter algorithms and faster but space consuming  methods.</abstract>
	<conference>CACM October, 1972</conference>
	<authors>
	<author>Ahrens, J. H.</author>
	<author>Dieter, U.</author>
	</authors>
	<keywords>random numbers, pseudorandom, normal distribution, exponential distribution, exponential distribution,  simulation, numerical analysis</keywords>
	<version>3.29 3.57 5.11 5.5</version>
	<location>CA721002 JB January 27, 1978  3:55 PM</location>
	<citations>
	<citation>1073	4	2276</citation>
	<citation>2137	4	2276</citation>
	<citation>2276	4	2276</citation>
	<citation>2276	4	2276</citation>
	<citation>1073	5	2276</citation>
	<citation>1153	5	2276</citation>
	<citation>2276	5	2276</citation>
	<citation>2276	5	2276</citation>
	<citation>2276	5	2276</citation>
	<citation>2565	5	2276</citation>
	<citation>1716	6	2276</citation>
	<citation>2276	6	2276</citation>
	</citations>
	</document>
	<document id= '2275'>
	<title>Integral Equations of Immunology</title>
	<abstract>The inversion of a particular integral equation of the first (Fredholm) kind is the basic problem  considered.  The strategy which yielded success consisted of three essential points: (1) fit the known  experimental data by a curve with properties which derive from properties of the (as yet unknown) function;  (2) stabilize the computation for the unknown function by using singular value decomposition; (3) constrain  the unknown function approximation (since it represents a probability distribution) to be nonnegative.   A number of test cases are presented. One set of actual experimental data is analyzed with the procedures  presented.</abstract>
	<conference>CACM October, 1972</conference>
	<authors>
	<author>Hanson, R. J.</author>
	</authors>
	<keywords>integral equations of the first kind, nonnegative constraints, singular value analysis</keywords>
	<version>3.10 5.14 5.18 5.41</version>
	<location>CA721003 JB January 27, 1978  3:37 PM</location>
	<citations>
	<citation>2275	5	2275</citation>
	<citation>2275	5	2275</citation>
	<citation>2275	5	2275</citation>
	</citations>
	</document>
	<document id= '2274'>
	<title>Generating English Discourse from Semantic Networks</title>
	<abstract>A system is described for generating English sentences from a form of semantic nets in which  the nodes are word-sense meanings and the paths are primarily deep case relations.  The grammar used  by the system is in the form of a network that imposes an ordering on a set of syntactic transformations  that are expressed as LISP functions.  The generation algorithm uses the information in the semantic  network to select appropriate generation paths through the grammar.  The system is designed for use as  a computational tool that allows a linguist to develop and study methods for generating surface strings  from an underlying semantic structure.  Initial finding with regard to form determiners such as voice,  form, tense, and mood, some rules for embedding sentences, and some attention to pronominal substitution  are reported.  The system is programmed in LISP 1.5 and is available from the authors.</abstract>
	<conference>CACM October, 1972</conference>
	<authors>
	<author>Simmons, R.</author>
	<author>Slocum, J.</author>
	</authors>
	<keywords>semantic nets, grammars, deep case relations, semantic generation, discourse generation</keywords>
	<version>3.42 3.65</version>
	<location>CA721004 JB January 27, 1978  3:10 PM</location>
	<citations>
	<citation>2274	5	2274</citation>
	<citation>2274	5	2274</citation>
	<citation>2274	5	2274</citation>
	<citation>2795	5	2274</citation>
	<citation>1928	6	2274</citation>
	<citation>1989	6	2274</citation>
	<citation>2274	6	2274</citation>
	</citations>
	</document>
	<document id= '2273'>
	<title>Conversion of Decision Tables By Rule Mask Method Without Rule Mask</title>
	<abstract>Two algorithms for generating computer programs from decision tables are described.  The algorithms  allow handling limited entry, extended entry, and mixed entry tables.  The algorithms are based on the  rule mask method but need not have the masks at execution time.  They perform the logical operations  immediately rather than at the end of the interpreting process.  Execution time can be considerably reduced  by instantly marking rules which are not applicable (Algorithms 1 and 2) or conditions which are already  tested (Algorithm 2).  The new algorithms combine to a certain degree the advantages of mask methods with  those of tree methods.</abstract>
	<conference>CACM October, 1972</conference>
	<authors>
	<author>Dathe, G.</author>
	</authors>
	<keywords>decision tables, rule mask, rule mask method, rule mask technique, program generator</keywords>
	<version>3.50 4.12 4.19 4.29</version>
	<location>CA721005 JB January 27, 1978  3:02 PM</location>
	<citations>
	<citation>1354	4	2273</citation>
	<citation>1354	4	2273</citation>
	<citation>1354	4	2273</citation>
	<citation>1488	4	2273</citation>
	<citation>1488	4	2273</citation>
	<citation>1684	4	2273</citation>
	<citation>1994	4	2273</citation>
	<citation>2053	4	2273</citation>
	<citation>2053	4	2273</citation>
	<citation>2053	4	2273</citation>
	<citation>2053	4	2273</citation>
	<citation>2220	4	2273</citation>
	<citation>2220	4	2273</citation>
	<citation>2220	4	2273</citation>
	<citation>2220	4	2273</citation>
	<citation>2221	4	2273</citation>
	<citation>2273	4	2273</citation>
	<citation>2273	4	2273</citation>
	<citation>2273	4	2273</citation>
	<citation>2273	4	2273</citation>
	<citation>2273	4	2273</citation>
	<citation>2273	4	2273</citation>
	<citation>2453	4	2273</citation>
	<citation>2453	4	2273</citation>
	<citation>2453	4	2273</citation>
	<citation>2453	4	2273</citation>
	<citation>2517	4	2273</citation>
	<citation>2598	4	2273</citation>
	<citation>2598	4	2273</citation>
	<citation>2726	4	2273</citation>
	<citation>2726	4	2273</citation>
	<citation>2726	4	2273</citation>
	<citation>2726	4	2273</citation>
	<citation>2856	4	2273</citation>
	<citation>2856	4	2273</citation>
	<citation>2856	4	2273</citation>
	<citation>2856	4	2273</citation>
	<citation>2856	4	2273</citation>
	<citation>3034	4	2273</citation>
	<citation>3113	4	2273</citation>
	<citation>1172	5	2273</citation>
	<citation>1237	5	2273</citation>
	<citation>1327	5	2273</citation>
	<citation>1354	5	2273</citation>
	<citation>2053	5	2273</citation>
	<citation>2220	5	2273</citation>
	<citation>2273	5	2273</citation>
	<citation>2273	5	2273</citation>
	<citation>2273	5	2273</citation>
	</citations>
	</document>
	<document id= '2272'>
	<title>Sorting by Natural Selection</title>
	<abstract>A family of sorting algorithms is proposed, the members of which make fuller use of the memory  space and thus yield longer sorted strings.  Extensive simulation results are presented, and various  implications and further applications are discussed.</abstract>
	<conference>CACM October, 1972</conference>
	<authors>
	<author>Frazer, W. D.</author>
	<author>Wong, C. K.</author>
	</authors>
	<keywords>algorithms, sorting by replacement selection, expected string length</keywords>
	<version>5.31</version>
	<location>CA721006 JB January 27, 1978  2:54 PM</location>
	<citations>
	<citation>1638	4	2272</citation>
	<citation>1867	4	2272</citation>
	<citation>2176	4	2272</citation>
	<citation>2272	4	2272</citation>
	<citation>2272	4	2272</citation>
	<citation>1638	5	2272</citation>
	<citation>2272	5	2272</citation>
	<citation>2272	5	2272</citation>
	<citation>2272	5	2272</citation>
	<citation>677	5	2272</citation>
	</citations>
	</document>
	<document id= '2271'>
	<citations>
	<citation>2271	5	2271</citation>
	<citation>2271	5	2271</citation>
	<citation>2271	5	2271</citation>
	</citations>
	<title>Aesthetics and the Human Factor in Programming (Corrigendum)</title>
	<conference>CACM October, 1972</conference>
	<authors>
	</authors>
	<location>CA721007 JB January 27, 1978  2:51 PM</location>
	</document>
	<document id= '2270'>
	<title>Interpolation and Smooth Curve Fitting Based on Local Procedures [E2] (Algorithm A433)</title>
	<conference>CACM October, 1972</conference>
	<authors>
	<author>Akima, H.</author>
	</authors>
	<keywords>interpolation, polynomial, slope of curve, smooth curve fitting</keywords>
	<version>5.13</version>
	<location>CA721008 JB January 27, 19782:49 PM</location>
	<citations>
	<citation>1845	4	2270</citation>
	<citation>1900	4	2270</citation>
	<citation>2083	4	2270</citation>
	<citation>2154	4	2270</citation>
	<citation>2270	4	2270</citation>
	<citation>2693	4	2270</citation>
	<citation>988	5	2270</citation>
	<citation>2270	5	2270</citation>
	<citation>2270	5	2270</citation>
	<citation>2270	5	2270</citation>
	<citation>2693	5	2270</citation>
	<citation>2696	5	2270</citation>
	<citation>988	6	2270</citation>
	<citation>2270	6	2270</citation>
	<citation>2270	6	2270</citation>
	<citation>2696	6	2270</citation>
	<citation>2693	6	2270</citation>
	</citations>
	</document>
	<document id= '2269'>
	<title>Tableless Date Conversion (Algorithm R398)</title>
	<conference>CACM October, 1972</conference>
	<authors>
	<author>Robertson, J. D.</author>
	</authors>
	<keywords>date, calendar, Fortran statement function, arithmetic statement function</keywords>
	<version>3.15 4.9 5.9</version>
	<location>CA721009 JB January 27, 1978  2:47 PM</location>
	<citations>
	<citation>2269	4	2269</citation>
	<citation>3115	4	2269</citation>
	<citation>2269	5	2269</citation>
	<citation>2269	5	2269</citation>
	<citation>2269	5	2269</citation>
	<citation>785	5	2269</citation>
	</citations>
	</document>
	<document id= '2268'>
	<title>A Comparative Study of Computer Programs for Integrating Differential Equations</title>
	<abstract>A study comparing the performance of several computer programs for integrating systems of ordinary  differential equations is reported.  The integration methods represented include multistep methods (predictor-correctors),  single-step methods (Runge-Kutta) and extrapolation methods (both polynomial and rational).  The testing  procedure is described together with the evaluation criteria applied.  A set of test problems on which  the programs were tested is included in an appendix.  For the particular problems and criteria used in  the investigation it was found that a program based on rational extrapolation showed the best performance.</abstract>
	<conference>CACM November, 1972</conference>
	<authors>
	<author>Fox, P.</author>
	</authors>
	<keywords>ordinary differential equations, integration, program comparison, certification, validation</keywords>
	<version>5.10 5.17</version>
	<location>CA721101 JB January 27, 1978  2:45 PM</location>
	<citations>
	<citation>2268	5	2268</citation>
	<citation>2268	5	2268</citation>
	<citation>2268	5	2268</citation>
	<citation>2567	5	2268</citation>
	<citation>2268	6	2268</citation>
	<citation>755	6	2268</citation>
	</citations>
	</document>
	<document id= '2267'>
	<title>Algorithms To Reveal Properties of Floating-Point Arithmetic</title>
	<abstract>Two algorithms are presented in the form of Fortran subroutines.  Each subroutine computes  the radix and number of digits of the floating-point numbers and whether rounding or chopping is done  by the machine on which it is run.  The methods are shown to work on any "reasonable" floating-point  computer.</abstract>
	<conference>CACM November, 1972</conference>
	<authors>
	<author>Malcolm, M. A.</author>
	</authors>
	<keywords>floating-point arithmetic, high-level languages, philosophy of language design</keywords>
	<version>4.9 5.19</version>
	<location>CA721102 JB January 27, 1978  2:39 PM</location>
	<citations>
	<citation>2267	5	2267</citation>
	<citation>2267	5	2267</citation>
	<citation>2267	5	2267</citation>
	<citation>2647	5	2267</citation>
	<citation>2792	5	2267</citation>
	<citation>2267	6	2267</citation>
	<citation>2267	6	2267</citation>
	<citation>2647	6	2267</citation>
	</citations>
	</document>
	<document id= '2266'>
	<title>A Highly Parallel Algorithm for Approximating All Zeros of a Polynomial with Only Real Zeros</title>
	<abstract>An algorithm is described based on Newton's method which simultaneously approximates all zeros  of a polynomial with only real zeros.  The algorithm, which is conceptually suitable for parallel computation,  determines its own starting values so that convergence to the zeros is guaranteed.  Multiple zeros and  their multiplicity are readily determined.  At no point in the method is polynomial deflation used.</abstract>
	<conference>CACM November, 1972</conference>
	<authors>
	<author>Patrick, M. L.</author>
	</authors>
	<keywords>parallel numerical algorithms, real polynomials, real zeros, Newton's method, starting values,  guaranteed convergence</keywords>
	<version>5.15</version>
	<location>CA721103 JB January 27, 1978  2:35 PM</location>
	<citations>
	<citation>2266	5	2266</citation>
	<citation>2266	5	2266</citation>
	<citation>2266	5	2266</citation>
	<citation>2660	5	2266</citation>
	<citation>2266	6	2266</citation>
	</citations>
	</document>
	<document id= '2265'>
	<title>A Model for Type Checking</title>
	<abstract>Most current programming languages treat computation over different classes of objects (e.g.  numbers, strings, labels and functions).  For correct compilation and execution, the following question  then arises: is a program properly constructed so that its operations and operands are compatible?  The  activity of answering this question is usually called type checking.  This paper attempts to isolate  the notion of type checking and presents a partial solution to the type checking problem based on the  notions of abstraction and application of functions.  In particular, a program is mapped into an expression  within a decidable subset of the Lambda calculus, which characterizes the type relations within the program  and eliminates all other information.  The determination of the type-wise correctness or incorrectness  of the program is resolved by reducing its corresponding Lambda calculus expression to one of two normal  forms, the constant "correct" for a type-wise correct program or the constant "error".  An application  to type checking in Algol 60 is made, and the attendant problems faced for any notion of type checking  are discussed.</abstract>
	<conference>CACM November, 1972</conference>
	<authors>
	<author>Ledgard, H. F.</author>
	</authors>
	<keywords>type checking, types, Lambda calculus, models for programming languages, syntax, semantics, compiler  writing, language implementation, formal definition</keywords>
	<version>4.12 4.22 5.2 5.21 5.23</version>
	<location>CA721104 JB January 27, 1978  2:30 PM</location>
	<citations>
	<citation>2265	5	2265</citation>
	<citation>2265	5	2265</citation>
	<citation>2265	5	2265</citation>
	</citations>
	</document>
	<document id= '2264'>
	<title>Derived Semantics for Some Programming Language Constructs</title>
	<abstract>The constructs of a simple programming language are introduced and described informally in  terms of values and side-effects.  A translator is defined which translates the language into flowcharts  for a simple machine.  The action of the machine in executing a flowchart is defined.  A proof is constructed  that the effect of translating and executing any program can be expressed solely in terms of the value  and side-effect of the program.  During the course of constructing the proof, formal definitions of the  concepts of value and side-effect are derived in order to make the proof rigorous.  Correctness of the  implementation involves checking that the definitions derived in the step above are an acceptable formalization  of the informal description given in the first step.</abstract>
	<conference>CACM November, 1972</conference>
	<authors>
	<author>Henderson, P.</author>
	</authors>
	<keywords>lambda calculus, formal description, program correctness, programming languages, semantics</keywords>
	<version>4.22 5.23 5.24</version>
	<location>CA721105 JB January 27, 1978  2:19 PM</location>
	<citations>
	<citation>2264	5	2264</citation>
	<citation>2264	5	2264</citation>
	<citation>2264	5	2264</citation>
	<citation>2470	5	2264</citation>
	<citation>1303	6	2264</citation>
	<citation>1469	6	2264</citation>
	<citation>1834	6	2264</citation>
	<citation>2264	6	2264</citation>
	</citations>
	</document>
	<document id= '2263'>
	<title>The Conversion of Limited-Entry Decision Tables to Optimal and Near-Optimal Flowcharts: Two New  Algorithms</title>
	<abstract>Two new algorithms for deriving optimal and near-optimal flowcharts from limited entry decision  tables are presented.  Both take into account rule frequencies and the time needed to test conditions.   One of the algorithms, called the optimum-finding algorithm, leads to a flowchart which truly minimizes  execution time for a decision table in which simple rules are already contracted to complex rules.  The  other one, called the optimum-approaching algorithm, requires many fewer calculations but does not necessarily  produce the optimum flowchart.  The algorithms are first derived for treating decision tables not containing  an ELSE-rule, but the optimum-approaching algorithm is shown to be equally valid for tables including  such a rule.  Both algorithms are compared with existing ones and are applied to a somewhat large decision  table derived from a real case.  From this comparison two conclusions are drawn.  (1) The optimum-approaching  algorithm will usually lead to better results than comparable existing ones and will not require more,  but usually less, computation time.(2) In general, the greater computation effort needed for applying  the optimum-finding algorithm will not be justified by the small reduction in execution time obtained.</abstract>
	<conference>CACM November, 1972</conference>
	<authors>
	<author>Verhelst, M.</author>
	</authors>
	<keywords>decision table, flowcharting, preprocessor, optimal programs, search</keywords>
	<version>3.50 3.59 4.19 4.29 4.49 5.31</version>
	<location>CA721106 JB January 27, 1978  2:10 PM</location>
	<citations>
	<citation>2263	5	2263</citation>
	<citation>2263	5	2263</citation>
	<citation>2263	5	2263</citation>
	<citation>2598	5	2263</citation>
	<citation>2691	5	2263</citation>
	<citation>2726	5	2263</citation>
	<citation>3113	5	2263</citation>
	<citation>1172	6	2263</citation>
	<citation>1172	6	2263</citation>
	<citation>1327	6	2263</citation>
	<citation>1354	6	2263</citation>
	<citation>1354	6	2263</citation>
	<citation>1488	6	2263</citation>
	<citation>1489	6	2263</citation>
	<citation>1548	6	2263</citation>
	<citation>1548	6	2263</citation>
	<citation>2220	6	2263</citation>
	<citation>2220	6	2263</citation>
	<citation>2221	6	2263</citation>
	<citation>2263	6	2263</citation>
	<citation>2263	6	2263</citation>
	<citation>2263	6	2263</citation>
	<citation>2263	6	2263</citation>
	<citation>2453	6	2263</citation>
	<citation>2598	6	2263</citation>
	<citation>2691	6	2263</citation>
	<citation>2691	6	2263</citation>
	<citation>2856	6	2263</citation>
	</citations>
	</document>
	<document id= '2262'>
	<title>Garbage Collection for Virtual Memory Computer Systems</title>
	<abstract>In list processing there is typically a growing demand for space during program execution.   This paper examines the practical implications of this growth within a virtual memory computer system,  proposes two new garbage collection techniques for virtual memory systems, and compares them with traditional  methods by discussion and by simulation.</abstract>
	<conference>CACM November, 1972</conference>
	<authors>
	<author>Baecker, H. D.</author>
	</authors>
	<keywords>garbage collection, virtual memory, list processing, paging, segmentation, page tables</keywords>
	<version>4.32</version>
	<location>CA721107 JB January 27, 1978  1:50 PM</location>
	<citations>
	<citation>2262	5	2262</citation>
	<citation>2262	5	2262</citation>
	<citation>2262	5	2262</citation>
	</citations>
	</document>
	<document id= '2261'>
	<title>An Approximate Method for Generating Symmetric Random Variables</title>
	<abstract>A method for generating values of continuous symmetric random variables that is relatively  fast, requires essentially no computer memory, and is easy to use is developed.  The method, which uses  a uniform zero-one random number source, is based on the inverse function of the lambda distribution  of Turkey.  Since it approximates many of the continuous theoretical distributions and empirical distributions  frequently used in simulations, the method should be useful to simulation practitioners.</abstract>
	<conference>CACM November, 1972</conference>
	<authors>
	<author>Ramberg, J. S.</author>
	<author>Schmeiser, B. W.</author>
	</authors>
	<keywords>simulation, Monte Carlo, probability, statistics, approximations, random variables, random numbers,  moments, distribution</keywords>
	<version>5.5 8.1</version>
	<location>CA721108 JB January 27, 1978  1:47 PM</location>
	<citations>
	<citation>2261	5	2261</citation>
	<citation>2261	5	2261</citation>
	<citation>2261	5	2261</citation>
	<citation>2686	5	2261</citation>
	<citation>2261	6	2261</citation>
	</citations>
	</document>
	<document id= '2260'>
	<title>Exact Probabilities for R x C Contingency Tables [G2] (Algorithm A434)</title>
	<conference>CACM November, 1972</conference>
	<authors>
	<author>March, D. L.</author>
	</authors>
	<keywords>probability, contingency table, test of significance</keywords>
	<version>3.5 5.5</version>
	<location>CA721109 JB January 27, 1978  1:42 PM</location>
	<citations>
	<citation>2260	5	2260</citation>
	<citation>2260	5	2260</citation>
	<citation>2260	5	2260</citation>
	</citations>
	</document>
	<document id= '2259'>
	<title>Modified Incomplete Gamma Function [S14] (Algorithm A435)</title>
	<conference>CACM November, 1972</conference>
	<authors>
	<author>Fullerton, W.</author>
	</authors>
	<keywords>modified incomplete Gamma function, incomplete Gamma function, chi-square distribution function,  Poisson distribution function</keywords>
	<version>5.13</version>
	<location>CA721110 JB January 27, 1978  1:40 PM</location>
	<citations>
	<citation>2259	5	2259</citation>
	<citation>2259	5	2259</citation>
	<citation>2259	5	2259</citation>
	</citations>
	</document>
	<document id= '2258'>
	<title>Additional Results on Key-to-Address Transform Techniques: A Fundamental Performance Study on  Large Existing Formatted Files</title>
	<conference>CACM November, 1972</conference>
	<authors>
	<author>Lum, V. Y.</author>
	<author>Yuen, P. S. T.</author>
	</authors>
	<keywords>hashing, hashing techniques, hashing methods, hash coding, keys, key transformation, key-to-address  transformation, direct addressing, direct access method, randomizing, random access file organization,  file search, scatter storage, information retrieval</keywords>
	<version>3.7 3.72 3.73 3.74 3.79 4.9</version>
	<location>CA721111 JB January 27, 1978  1:31 PM</location>
	<citations>
	<citation>2258	4	2258</citation>
	<citation>2319	4	2258</citation>
	<citation>2313	4	2258</citation>
	<citation>2359	4	2258</citation>
	<citation>2437	4	2258</citation>
	<citation>2552	4	2258</citation>
	<citation>2781	4	2258</citation>
	<citation>2860	4	2258</citation>
	<citation>2991	4	2258</citation>
	<citation>2203	5	2258</citation>
	<citation>2258	5	2258</citation>
	<citation>2258	5	2258</citation>
	<citation>2258	5	2258</citation>
	</citations>
	</document>
	<document id= '2257'>
	<title>A Note on Optimal Doubly-Chained Trees</title>
	<conference>CACM November, 1972</conference>
	<authors>
	<author>Kennedy, S.</author>
	</authors>
	<keywords>file searching, doubly-chained tree, binary search tree</keywords>
	<version>3.73 3.74 5.32 5.6</version>
	<location>CA721112 JB January 27, 1978  1:26 PM</location>
	<citations>
	<citation>1050	4	2257</citation>
	<citation>1935	4	2257</citation>
	<citation>1936	4	2257</citation>
	<citation>2017	4	2257</citation>
	<citation>2032	4	2257</citation>
	<citation>2257	4	2257</citation>
	<citation>2257	4	2257</citation>
	<citation>2257	4	2257</citation>
	<citation>2257	4	2257</citation>
	<citation>2360	4	2257</citation>
	<citation>2360	4	2257</citation>
	<citation>2360	4	2257</citation>
	<citation>2451	4	2257</citation>
	<citation>2451	4	2257</citation>
	<citation>2452	4	2257</citation>
	<citation>2452	4	2257</citation>
	<citation>2556	4	2257</citation>
	<citation>2765	4	2257</citation>
	<citation>1831	5	2257</citation>
	<citation>1936	5	2257</citation>
	<citation>2257	5	2257</citation>
	<citation>2257	5	2257</citation>
	<citation>2257	5	2257</citation>
	<citation>2360	5	2257</citation>
	<citation>849	5	2257</citation>
	</citations>
	</document>
	<document id= '2256'>
	<title>Further Comments on Dijkstra's Concurrent Programming Control Problem</title>
	<conference>CACM November, 1972</conference>
	<authors>
	<author>Eisenberg, M. A.</author>
	<author>McGuire, M. R.</author>
	</authors>
	<keywords>critical section, concurrent programming control, multiprocessing</keywords>
	<version>4.32</version>
	<location>CA721113 JB January 27, 1978  1:24 PM</location>
	<citations>
	<citation>1781	4	2256</citation>
	<citation>2150	4	2256</citation>
	<citation>2150	4	2256</citation>
	<citation>2228	4	2256</citation>
	<citation>2228	4	2256</citation>
	<citation>2256	4	2256</citation>
	<citation>2256	4	2256</citation>
	<citation>2317	4	2256</citation>
	<citation>2342	4	2256</citation>
	<citation>2342	4	2256</citation>
	<citation>2376	4	2256</citation>
	<citation>2618	4	2256</citation>
	<citation>2618	4	2256</citation>
	<citation>3184	4	2256</citation>
	<citation>1198	5	2256</citation>
	<citation>1338	5	2256</citation>
	<citation>2256	5	2256</citation>
	<citation>2256	5	2256</citation>
	<citation>2256	5	2256</citation>
	<citation>2618	5	2256</citation>
	<citation>1198	6	2256</citation>
	<citation>1338	6	2256</citation>
	<citation>1749	6	2256</citation>
	<citation>2256	6	2256</citation>
	</citations>
	</document>
	<document id= '2255'>
	<title>Comments on Moorer's Music and Computer Composition</title>
	<conference>CACM November, 1972</conference>
	<authors>
	<author>Smoliar, S. W.</author>
	</authors>
	<keywords>artificial intelligence, heuristic programming, models of cognitive processes, computer music,  computer composition, music theory</keywords>
	<version>3.44 3.65</version>
	<location>CA721114 JB January 27, 1978  1:22 PM</location>
	<citations>
	<citation>2255	5	2255</citation>
	<citation>2255	5	2255</citation>
	<citation>2255	5	2255</citation>
	</citations>
	</document>
	<document id= '2254'>
	<title>Dynamic Partitioning for Array Languages</title>
	<abstract>The classical process of partitioning an array into subarrays is extended to a more useful  array language operation.  Various modes of partitioning are defined for different types of arrays, so  that subarrays may vary over the original array in a nearly arbitrary manner.  These definitions are  motivated with several realistic examples to illustrate the value of partitioning for array languages.   Of general interest is the data structure for partitioning.  This consists of dynamic tree structures  which are used to derive and maintain the array control information.  These are described in sufficient  detail to be of value in the design of other array languages.  The description presented in this paper  is implemented in a new array language, OL/2, currently under development at the University of Illinois.</abstract>
	<conference>CACM December, 1972</conference>
	<authors>
	<author>Phillips, J. R.</author>
	<author>Adams, H. C.</author>
	</authors>
	<keywords>dynamic partitioning, array partitioning array language, data structure, tree structure, programming  language design, array control blocks, partition control blocks</keywords>
	<version>4.12 4.2 4.22</version>
	<location>CA721201 JB January 27, 1978  1:20 PM</location>
	<citations>
	<citation>2253	4	2254</citation>
	<citation>2254	4	2254</citation>
	<citation>2081	5	2254</citation>
	<citation>2254	5	2254</citation>
	<citation>2254	5	2254</citation>
	<citation>2254	5	2254</citation>
	</citations>
	</document>
	<document id= '2253'>
	<title>Index Ranges for Matrix Calculi</title>
	<abstract>The paper describes a scheme for symbolic manipulation of index expressions which arise as  a by-product of the symbolic manipulation of expressions in the matrix calculi described by the authors  in a previous paper.  This scheme attempts program optimization by transforming the original algorithm  rather than the machine code.  The goal is to automatically generate code for handling the tedious address  calculations necessitated by complicated data structures.  The paper is therefore preoccupied with "indexing  by position."  The relationship of "indexing by name" and "indexing by position" is discussed.</abstract>
	<conference>CACM December, 1972</conference>
	<authors>
	<author>Bayer, R.</author>
	<author>Witzgall, C.</author>
	</authors>
	<keywords>address calculations, algorithm transformation, compilation, data structures, indexing by name,  indexing by position, index domain, index map, index range, matrix expressions, normal form, programming  languages, program optimization, range operations, symbolic manipulation, syntactic analysis, well-formed  expressions</keywords>
	<version>4.12 4.22 5.14</version>
	<location>CA721202 JB January 27, 1978  1:12 PM</location>
	<citations>
	<citation>1614	4	2253</citation>
	<citation>2253	4	2253</citation>
	<citation>2253	4	2253</citation>
	<citation>2254	4	2253</citation>
	<citation>2557	4	2253</citation>
	<citation>2081	5	2253</citation>
	<citation>2253	5	2253</citation>
	<citation>2253	5	2253</citation>
	<citation>2253	5	2253</citation>
	<citation>437	5	2253</citation>
	</citations>
	</document>
	<document id= '2252'>
	<title>A Method for Incrementally Compiling Languages with Nested Statement Structure</title>
	<abstract>A method of incremental compilation is presented which applies especially to programming languages  in which statements can be nested (such as Algol and PL/I).  The method permits editing of the source  language using a general purpose text editor, and incremental processing of changes without frequent  recompilation of entire routines.  The essential points of the method are: (1) the syntax of the language  is restricted insof ar as which constructs may occur on lines; (2) an internal data structure (called  the skeleton) is maintained to represent the statement structure; (3) the recompilation is partially  batched in the sense that recompilation of modified lines does not occur until the last of a set of editing  commands has been received; and (4) the parsing and compilation are factored into two parts, that done  on individual lines and that done globally to handle the relationships between the lines.</abstract>
	<conference>CACM December, 1972</conference>
	<authors>
	<author>Earley, J.</author>
	<author>Caizergues, P.</author>
	</authors>
	<keywords>incremental compiler, interactive programming language</keywords>
	<version>4.12 4.22</version>
	<location>CA721203 JB January 27, 1978  1:04 PM</location>
	<citations>
	<citation>1086	4	2252</citation>
	<citation>1132	4	2252</citation>
	<citation>1234	4	2252</citation>
	<citation>1263	4	2252</citation>
	<citation>1265	4	2252</citation>
	<citation>1270	4	2252</citation>
	<citation>1323	4	2252</citation>
	<citation>1358	4	2252</citation>
	<citation>1379	4	2252</citation>
	<citation>1380	4	2252</citation>
	<citation>1396	4	2252</citation>
	<citation>1453	4	2252</citation>
	<citation>1464	4	2252</citation>
	<citation>1484	4	2252</citation>
	<citation>1491	4	2252</citation>
	<citation>1498	4	2252</citation>
	<citation>1541	4	2252</citation>
	<citation>1565	4	2252</citation>
	<citation>1613	4	2252</citation>
	<citation>1614	4	2252</citation>
	<citation>1767	4	2252</citation>
	<citation>1781	4	2252</citation>
	<citation>1781	4	2252</citation>
	<citation>1781	4	2252</citation>
	<citation>1787	4	2252</citation>
	<citation>1824	4	2252</citation>
	<citation>1825	4	2252</citation>
	<citation>1860	4	2252</citation>
	<citation>1860	4	2252</citation>
	<citation>1945	4	2252</citation>
	<citation>1988	4	2252</citation>
	<citation>2083	4	2252</citation>
	<citation>2178	4	2252</citation>
	<citation>2179	4	2252</citation>
	<citation>2252	4	2252</citation>
	<citation>2252	4	2252</citation>
	<citation>2252	4	2252</citation>
	<citation>2252	4	2252</citation>
	<citation>2325	4	2252</citation>
	<citation>2341	4	2252</citation>
	<citation>2546	4	2252</citation>
	<citation>2594	4	2252</citation>
	<citation>2645	4	2252</citation>
	<citation>2652	4	2252</citation>
	<citation>2684	4	2252</citation>
	<citation>2842	4	2252</citation>
	<citation>2929	4	2252</citation>
	<citation>2934	4	2252</citation>
	<citation>3069	4	2252</citation>
	<citation>669	4	2252</citation>
	<citation>679	4	2252</citation>
	<citation>691	4	2252</citation>
	<citation>761	4	2252</citation>
	<citation>949	4	2252</citation>
	<citation>989	4	2252</citation>
	<citation>1358	5	2252</citation>
	<citation>1496	5	2252</citation>
	<citation>2155	5	2252</citation>
	<citation>2252	5	2252</citation>
	<citation>2252	5	2252</citation>
	<citation>2252	5	2252</citation>
	<citation>3184	5	2252</citation>
	</citations>
	</document>
	<document id= '2251'>
	<title>Weighted Increment Linear Search for Scatter Tables</title>
	<abstract>A new linear search for hash tables whose increment step is a function of the key being addressed  is presented.  Comparisons with known methods are given, in terms of efficiency and computation complexity.   In particular, the new method applies to tables of size n = 2^r.  It allows full table searching, and  practically eliminates primary clustering at a very low cost.</abstract>
	<conference>CACM December, 1972</conference>
	<authors>
	<author>Luccio, F.</author>
	</authors>
	<keywords>linear search, weighted increment search, scatter storage, hash table, key, hash address, clustering,  search length</keywords>
	<version>3.73 3.74 4.9</version>
	<location>CA721204 JB January 27, 1978  11:25 AM</location>
	<citations>
	<citation>1676	4	2251</citation>
	<citation>1682	4	2251</citation>
	<citation>1728	4	2251</citation>
	<citation>1860	4	2251</citation>
	<citation>1860	4	2251</citation>
	<citation>1973	4	2251</citation>
	<citation>1973	4	2251</citation>
	<citation>1973	4	2251</citation>
	<citation>1973	4	2251</citation>
	<citation>1992	4	2251</citation>
	<citation>1992	4	2251</citation>
	<citation>2018	4	2251</citation>
	<citation>2018	4	2251</citation>
	<citation>2018	4	2251</citation>
	<citation>2032	4	2251</citation>
	<citation>2033	4	2251</citation>
	<citation>2033	4	2251</citation>
	<citation>2107	4	2251</citation>
	<citation>2107	4	2251</citation>
	<citation>2109	4	2251</citation>
	<citation>2109	4	2251</citation>
	<citation>2138	4	2251</citation>
	<citation>2203	4	2251</citation>
	<citation>2203	4	2251</citation>
	<citation>2203	4	2251</citation>
	<citation>2203	4	2251</citation>
	<citation>2251	4	2251</citation>
	<citation>2251	4	2251</citation>
	<citation>2251	4	2251</citation>
	<citation>2251	4	2251</citation>
	<citation>2251	4	2251</citation>
	<citation>2251	4	2251</citation>
	<citation>2359	4	2251</citation>
	<citation>2524	4	2251</citation>
	<citation>2530	4	2251</citation>
	<citation>2534	4	2251</citation>
	<citation>2537	4	2251</citation>
	<citation>2543	4	2251</citation>
	<citation>2543	4	2251</citation>
	<citation>2543	4	2251</citation>
	<citation>2543	4	2251</citation>
	<citation>2543	4	2251</citation>
	<citation>2552	4	2251</citation>
	<citation>2559	4	2251</citation>
	<citation>2559	4	2251</citation>
	<citation>2559	4	2251</citation>
	<citation>2573	4	2251</citation>
	<citation>2573	4	2251</citation>
	<citation>2573	4	2251</citation>
	<citation>2770	4	2251</citation>
	<citation>2770	4	2251</citation>
	<citation>2770	4	2251</citation>
	<citation>2770	4	2251</citation>
	<citation>2974	4	2251</citation>
	<citation>2991	4	2251</citation>
	<citation>2991	4	2251</citation>
	<citation>3053	4	2251</citation>
	<citation>3053	4	2251</citation>
	<citation>3053	4	2251</citation>
	<citation>3053	4	2251</citation>
	<citation>3083	4	2251</citation>
	<citation>3083	4	2251</citation>
	<citation>1785	5	2251</citation>
	<citation>1786	5	2251</citation>
	<citation>1973	5	2251</citation>
	<citation>2018	5	2251</citation>
	<citation>2107	5	2251</citation>
	<citation>2109	5	2251</citation>
	<citation>2251	5	2251</citation>
	<citation>2251	5	2251</citation>
	<citation>2251	5	2251</citation>
	<citation>2974	5	2251</citation>
	<citation>2109	6	2251</citation>
	<citation>2251	6	2251</citation>
	</citations>
	</document>
	<document id= '2250'>
	<citations>
	<citation>2250	5	2250</citation>
	<citation>2250	5	2250</citation>
	<citation>2250	5	2250</citation>
	</citations>
	<title>Computer Methods for Sampling from the Exponential and Normal Distributions (Corrigendum)</title>
	<conference>CACM December, 1972</conference>
	<authors>
	<author>Ahrens, J. H.</author>
	<author>Dieter, U.</author>
	</authors>
	<location>CA721205 JB January 27, 1978  11:20 AM</location>
	</document>
	<document id= '2249'>
	<title>A Comparison of Multivariate Normal Generators</title>
	<abstract>Three methods for generating outcomes on multivariate normal random vectors with a specified  variance-covariance matrix are presented.  A comparison is made to determine which method requires the  least computer execution time and memory space when utilizing the IBM 360/67.  All methods use as a basis  a standard Gaussian random number generator.  Results of the comparison indicate that the method based  on triangular factorization of the covariance matrix generally requires less memory space and computer  time than the other two methods.</abstract>
	<conference>CACM December, 1972</conference>
	<authors>
	<author>Barr, D. R.</author>
	<author>Sezak, N. L.</author>
	</authors>
	<keywords>random number generator, normal distribution, multivariate normal distribution, multivariate normal  generator</keywords>
	<version>3.65 5.5</version>
	<location>CA721206 JB January 27, 1978  11:19 AM</location>
	<citations>
	<citation>1708	4	2249</citation>
	<citation>1781	4	2249</citation>
	<citation>1826	4	2249</citation>
	<citation>1860	4	2249</citation>
	<citation>1972	4	2249</citation>
	<citation>2156	4	2249</citation>
	<citation>2168	4	2249</citation>
	<citation>2249	4	2249</citation>
	<citation>2249	4	2249</citation>
	<citation>2249	4	2249</citation>
	<citation>2314	4	2249</citation>
	<citation>2719	4	2249</citation>
	<citation>2736	4	2249</citation>
	<citation>2736	4	2249</citation>
	<citation>2833	4	2249</citation>
	<citation>3074	4	2249</citation>
	<citation>1626	5	2249</citation>
	<citation>1708	5	2249</citation>
	<citation>1853	5	2249</citation>
	<citation>2249	5	2249</citation>
	<citation>2249	5	2249</citation>
	<citation>2249	5	2249</citation>
	</citations>
	</document>
	<document id= '2248'>
	<title>A New Method for the Solution of the Cauchy Problem for Parabolic Equations</title>
	<abstract>An integral equation representation is given for parabolic partial differential equations.   When the equations are defined in unbounded domains, as in the initial value (Cauchy) problem, the solution  of the integral equation by the method of successive approximation has inherent advantages over other  methods.  Error bounds for the methods are of order h^(3/2) and h^(7/2) (his the increment size) depending  on the finite difference approximations involved.</abstract>
	<conference>CACM December, 1972</conference>
	<authors>
	<author>Moore, J.</author>
	<author>Robinson, P.</author>
	</authors>
	<keywords>parabolic equations, the Cauchy problem, method of successive approximations</keywords>
	<version>5.17</version>
	<location>CA721207 JB January 27, 1978  11:13 AM</location>
	<citations>
	<citation>2248	5	2248</citation>
	<citation>2248	5	2248</citation>
	<citation>2248	5	2248</citation>
	</citations>
	</document>
	<document id= '2247'>
	<title>On the Criteria To Be Used in Decomposing Systems into Modules</title>
	<abstract>This paper discusses modularization as a mechanism for improving the flexibility ad comprehensibility  of a system while allowing the shortening of its development time.  The effectiveness of a "modularization"  is dependent upon the criteria used in dividing the system into modules.  A system design problem is presented and both a conventional and unconventional decomposition are described.  It is shown that the  unconventional decompositions have distinct advantages for the goals outlined.  The criteria used in  arriving at the decompositions are discussed.  The unconventional decomposition, if implemented with  the conventional assumption that a module consists of one or more subroutines, will be less efficient  in most cases.  An alternative approach to implementation which does not have this effect is sketched.</abstract>
	<conference>CACM December, 1972</conference>
	<authors>
	<author>Parnas, D. L.</author>
	</authors>
	<keywords>software, modules, modularity, software engineering, KWIC index, software design</keywords>
	<version>4.0</version>
	<location>CA721208 JB January 27, 1978  11:09 AM</location>
	<citations>
	<citation>2247	5	2247</citation>
	<citation>2247	5	2247</citation>
	<citation>2247	5	2247</citation>
	<citation>2480	5	2247</citation>
	<citation>2738	5	2247</citation>
	<citation>2867	5	2247</citation>
	<citation>3004	5	2247</citation>
	<citation>3030	5	2247</citation>
	<citation>3155	5	2247</citation>
	<citation>1425	6	2247</citation>
	<citation>1749	6	2247</citation>
	<citation>1749	6	2247</citation>
	<citation>2080	6	2247</citation>
	<citation>2204	6	2247</citation>
	<citation>2204	6	2247</citation>
	<citation>2247	6	2247</citation>
	<citation>2247	6	2247</citation>
	<citation>2247	6	2247</citation>
	<citation>2247	6	2247</citation>
	<citation>2247	6	2247</citation>
	<citation>2247	6	2247</citation>
	<citation>2356	6	2247</citation>
	<citation>2356	6	2247</citation>
	<citation>2356	6	2247</citation>
	<citation>2379	6	2247</citation>
	<citation>2456	6	2247</citation>
	<citation>2457	6	2247</citation>
	<citation>2651	6	2247</citation>
	<citation>2777	6	2247</citation>
	<citation>2958	6	2247</citation>
	<citation>2972	6	2247</citation>
	<citation>3073	6	2247</citation>
	<citation>3186	6	2247</citation>
	<citation>799	6	2247</citation>
	</citations>
	</document>
	<document id= '2246'>
	<title>Levels of Language for Portable Software</title>
	<abstract>An increasing amount of software is being implemented in a portable form.  A popular way of  accomplishing this is to encode the software in a specially designed machine-independent language and  then to map this language, often using a macro processor, into the assembly language of each desired  object machine.  The design of the machine-independent language is the key factor in this operation.   This paper discusses the relative merits of pitching this language at a high level or a low level, and  presents some comparative results.</abstract>
	<conference>CACM December, 1972</conference>
	<authors>
	<author>Brown, P. J.</author>
	</authors>
	<keywords>portable software, level of language, machine independent, macro processor, efficiency</keywords>
	<version>4.12 4.21 4.22</version>
	<location>CA721209 JB January 27, 1978  11:02 AM</location>
	<citations>
	<citation>2246	5	2246</citation>
	<citation>2246	5	2246</citation>
	<citation>2246	5	2246</citation>
	</citations>
	</document>
	<document id= '2245'>
	<title>Trace-Driven Modeling and Analysis of CPU Scheduling in Multiprogramming System</title>
	<abstract>Microscopic level job stream data obtained in a production environment by an event-driven software  probe is used to drive a model of a multiprogramming computer system.  The CPU scheduling algorithm of  the model is systematically varied.  This technique, called trace-driven modeling, provides an accurate  replica of a production environment for the testing of variations in the system.  At the same time alterations  in scheduling methods can be easily carried out in a controlled way with cause and effects relationships  being isolated.  The scheduling methods tested included the best possible and worst possible methods,  the traditional methods of multiprogramming theory, round-robin, first-come-first-served, etc., and dynamic  predictors.  The relative and absolute performances of these scheduling methods are given.  It is concluded  that a successful CPU scheduling method must be preemptive and must prevent a given job from holding  the CPU for too long a period.</abstract>
	<conference>CACM December, 1972</conference>
	<authors>
	<author>Sherman, S.</author>
	<author>III, F.</author>
	<author>Browne, J. C.</author>
	</authors>
	<keywords>scheduling, CPU scheduling,multiprogramming, performance measurement, trace driven models</keywords>
	<version>4.10 4.20 4.31 4.32</version>
	<location>CA721210 JB January 27, 1978  10:57 AM</location>
	<citations>
	<citation>2245	5	2245</citation>
	<citation>2245	5	2245</citation>
	<citation>2245	5	2245</citation>
	<citation>2571	5	2245</citation>
	<citation>3072	5	2245</citation>
	<citation>3119	5	2245</citation>
	<citation>1713	6	2245</citation>
	<citation>2219	6	2245</citation>
	<citation>2245	6	2245</citation>
	<citation>2245	6	2245</citation>
	<citation>2245	6	2245</citation>
	<citation>2375	6	2245</citation>
	<citation>2798	6	2245</citation>
	<citation>2849	6	2245</citation>
	<citation>2859	6	2245</citation>
	</citations>
	</document>
	<document id= '2244'>
	<title>Product Type Trapezoidal Integration (Algorithm A436)</title>
	<conference>CACM December, 1972</conference>
	<authors>
	<author>Boland, W. R.</author>
	</authors>
	<keywords>numerical integration, product type quadrature, trapezoidal integration</keywords>
	<version>5.16</version>
	<location>CA721211 JB January 27, 1978  9:11 AM</location>
	<citations>
	<citation>2244	5	2244</citation>
	<citation>2244	5	2244</citation>
	<citation>2244	5	2244</citation>
	</citations>
	</document>
	<document id= '2243'>
	<title>Product Type Simpson's Integration [D1] (Algorithm A437)</title>
	<conference>CACM December, 1972</conference>
	<authors>
	<author>Boland, W. R.</author>
	</authors>
	<keywords>numerical integration, product type quadrature, Simpson's rule</keywords>
	<version>5.16</version>
	<location>CA721212 JB January 27, 1978  9:10 AM</location>
	<citations>
	<citation>2243	5	2243</citation>
	<citation>2243	5	2243</citation>
	<citation>2243	5	2243</citation>
	</citations>
	</document>
	<document id= '2242'>
	<title>Product Type Two-Point Gauss-Legendre-Simpson's Integration [D1] (Algorithm A438)</title>
	<conference>CACM December, 1972</conference>
	<authors>
	<author>Boland, W. R.</author>
	</authors>
	<keywords>numerical integration, product type quadrature, Gaussian quadrature, Simpson's rule</keywords>
	<version>5.16</version>
	<location>CA721213 JB January 27, 1978  9:08 AM</location>
	<citations>
	<citation>2242	5	2242</citation>
	<citation>2242	5	2242</citation>
	<citation>2242	5	2242</citation>
	</citations>
	</document>
	<document id= '2241'>
	<title>Product Type Three-point Gauss-Legendre-Simpson's Integration [D1] (Algorithm A439)</title>
	<conference>CACM December, 1972</conference>
	<authors>
	<author>Boland, W. R.</author>
	</authors>
	<keywords>numerical integration, product type quadrature, Gaussian quadrature, Simpson's rule</keywords>
	<version>5.16</version>
	<location>CA721214 JB January 27, 1978  9:06 AM</location>
	<citations>
	<citation>2241	5	2241</citation>
	<citation>2241	5	2241</citation>
	<citation>2241	5	2241</citation>
	</citations>
	</document>
	<document id= '2240'>
	<title>Pseudo-Random Numbers [G5] (Algorithm C266)</title>
	<conference>CACM December, 1972</conference>
	<authors>
	<author>Sullins, W. L.</author>
	</authors>
	<keywords>pseudo-random numbers, testing random number generators</keywords>
	<version>5.5</version>
	<location>CA721215 JB January 27, 1978  9:04 AM</location>
	<citations>
	<citation>2240	5	2240</citation>
	<citation>2240	5	2240</citation>
	<citation>2240	5	2240</citation>
	</citations>
	</document>
	<document id= '2239'>
	<title>Squank (Algorithm C379)</title>
	<conference>CACM December, 1972</conference>
	<authors>
	<author>Hallet, P.</author>
	<author>Mund, E.</author>
	</authors>
	<keywords>numerical integration, integration rule, adaptive integration, automatic integration, Simpson's  rule, numerical quadrature, quadrature rule, adaptive quadrature, automatic quadrature, round-off error  control</keywords>
	<version>5.16</version>
	<location>CA721216 JB January 27, 1978  9:01 AM</location>
	<citations>
	<citation>2239	5	2239</citation>
	<citation>2239	5	2239</citation>
	<citation>2239	5	2239</citation>
	</citations>
	</document>
	<document id= '2238'>
	<citations>
	<citation>2238	5	2238</citation>
	<citation>2238	5	2238</citation>
	<citation>2238	5	2238</citation>
	</citations>
	<title>Least Squares Surface Fit (Algorithm R176)</title>
	<conference>CACM December, 1972</conference>
	<authors>
	<author>Schuegraf, E.</author>
	</authors>
	<location>CA721217 JB January 27, 1978  8:59 AM</location>
	</document>
	<document id= '2237'>
	<citations>
	<citation>2237	5	2237</citation>
	<citation>2237	5	2237</citation>
	<citation>2237	5	2237</citation>
	</citations>
	<title>BANDSOLVE (Algorithm R195)</title>
	<conference>CACM December, 1972</conference>
	<authors>
	<author>Schuegraf, E.</author>
	</authors>
	<location>CA721218 DMM February 2, 1978  1:39 PM</location>
	</document>
	<document id= '2236'>
	<title>Remarks on Characteristic Values and Associated Solutions of Mathieus Differential Equation,  Exponential Integral, and Systems of Hyperbolic P.D.E. (Algorithms R352, R385, R392)</title>
	<conference>CACM December, 1972</conference>
	<authors>
	<author>Frisch, M. J.</author>
	</authors>
	<keywords>ANSI Fortran standard</keywords>
	<version>4.0 4.22</version>
	<location>CA721219 JB January 27, 1978  8:56 AM</location>
	<citations>
	<citation>2236	5	2236</citation>
	<citation>2236	5	2236</citation>
	<citation>2236	5	2236</citation>
	</citations>
	</document>
	<document id= '2235'>
	<title>Decision Table Translation (Algorithm R394)</title>
	<conference>CACM December, 1972</conference>
	<authors>
	<author>Marshall, D. R. T.</author>
	</authors>
	<keywords>decision table, decision table translation</keywords>
	<version>4.19</version>
	<location>CA721220 JB January 27, 1978  8:53 AM</location>
	<citations>
	<citation>2235	5	2235</citation>
	<citation>2235	5	2235</citation>
	<citation>2235	5	2235</citation>
	</citations>
	</document>
	<document id= '2234'>
	<title>Roots of Matrix Pencils (Algorithm R405)</title>
	<conference>CACM December, 1972</conference>
	<authors>
	<author>Heiberger, R. M.</author>
	</authors>
	<keywords>eigenvalues, matrix roots, pencil roots</keywords>
	<version>5.1 5.3</version>
	<location>CA721221 JB January 27, 1978  8:51 AM</location>
	<citations>
	<citation>2234	5	2234</citation>
	<citation>2234	5	2234</citation>
	<citation>2234	5	2234</citation>
	</citations>
	</document>
	<document id= '2233'>
	<title>Signature Simulation and Certain Cryptographic Codes</title>
	<abstract>Three cyphers allegedly authored by Thomas Jefferson Beale in 1822 have been the subject of  intensive study for over 100 years.  Generations of cryptanalysts have expended untold man-years, thus  far without success, attempting tode code them; vast armies of fortune hunters and treasure seekers have  devoted Herculean labors to digging up the rolling hills of Virginia trying to locate the promised bonanza.   The history of pertinent activities would fill volumes, yet serious students of cryptography have always  had nagging doubts about the cyphers' authenticity.  It has been alleged that the "known solution" to  Cypher Number Two: 115, 73, 24, 818, 37, 52, 49,...("I have deposited in the County of Bedford about  four miles from Buford's in an excavation or vault...") with the aid of an unsanitized version of the  Declaration of Independence was merely a superb, imaginative, and grandiose hoax perpetrated ages ago  for whatever reasons.  Modern computer technology could obviously perform signature analyses the process  of encoding itself so as to yield new clues and deeper insights into their construction.  For the benefit  of the uninitiated, the encoding method used in the second cypher employs a specified document whose  words are simply numbered consecutively, and first letters of these words are sought out at random to  match the letters of these words are sought out at random to match the letters of the clear text or message.   The sequence of numbers corresponding to these matches is then written down as the final code.  While  primitive, the process has the advantage of relative security until the source document becomes known;  at that moment the cypher can be decoded even by second graders.  The work now completed with the help  of our UNIVAC 1108 includes numerous analytical studies of the Beale cyphers and various types of simulations.   For example, we have turned the entire process of simulated encoding by various schemes over to the  machine and analyzed the signatures of these synthetic codes; we have also encoded various messages by  hand, using different texts and a variety of methods to obtain their signatures. These simulations provide  convincing evidence that the signatures are both process and data dependent; they indicate also very  strongly that Mr. Beale's cyphers are for real and that it is merely a matter of time before someone  finds the correct source document and locates the right vault in the common-wealth of Virginia.</abstract>
	<conference>CACM January, 1971</conference>
	<authors>
	<author>Hammer, C.</author>
	</authors>
	<keywords>Thomas Jefferson Beale, codes, cryptanalysis, cyphers, decoding, Declaration of Independence, encoding,  Magna Carta, pseudotext, signature, simulation</keywords>
	<version>3.42 3.63 3.65 3.71</version>
	<location>CA710101 JB February 8, 1978  1:15 PM</location>
	<citations>
	<citation>2233	5	2233</citation>
	<citation>2233	5	2233</citation>
	<citation>2233	5	2233</citation>
	</citations>
	</document>
	<document id= '2232'>
	<title>Pattern Width at a Given Angle</title>
	<abstract>That the pattern feature "width as a function of angle" possesses several possible interpretations  is demonstrated in this paper, which is a review of the width concept in pattern recognition and the  geometrical concept itself.  The object of the work is to clarify how the word description can be made  precise so that computer algorithms for feature extraction may be obtained; the focus is on the theoretical  subject matter.  The results consist of a set-theoretic definition of width-at-angle, a theorem relating  it to the pattern boundary radius vector, and descriptions of alternate widths.  All widths are calculated  for an illustrative example; graphical and tabular comparisons are given.  Substantial variation in width-at-angle  magnitude is found.  The principal conclusion is that the set-theoretic width-at-angle is a useful pattern  feature when it can be easily computed.  Further investigation of the information contained in only part  of a width function is recommended for cases where computation of width-at-angle is difficult.</abstract>
	<conference>CACM January, 1971</conference>
	<authors>
	<author>Klinger, A.</author>
	</authors>
	<keywords>feature extraction, pattern recognition,figure properties, picture processing, integral geometry,  width-at-angle, extent, integral projections, linear pattern measures, width functions</keywords>
	<version>3.60 3.62 3.63 5.12</version>
	<location>CA710102 JB February 8, 1978  12:49 PM</location>
	<citations>
	<citation>2232	5	2232</citation>
	<citation>2232	5	2232</citation>
	<citation>2232	5	2232</citation>
	</citations>
	</document>
	<document id= '2231'>
	<title>The Reconstruction of Binary Patterns from Their Projections</title>
	<abstract>Given the horizontal and vertical projections of a finite binary pattern f, can we construct  the original pattern f?  In this paper we give a characterization of patterns that are reconstructable  from their projection.  Three algorithms are developed to reconstruct both unambiguous and ambiguous  patterns.  It is shown that an unambiguous pattern can be perfectly reconstructed in time m X n and that  a pattern similar to an ambiguous pattern can also be constructed in time m X n, where m, n are the dimensions  of the pattern frame.</abstract>
	<conference>CACM January, 1971</conference>
	<authors>
	<author>Chang, S.</author>
	</authors>
	<keywords>pattern reconstruction, image reconstruction, data compression, pattern recognition, integral geometry</keywords>
	<version>3.63 5.30</version>
	<location>CA710103 JB February 8, 1978  12:33 PM</location>
	<citations>
	<citation>2142	5	2231</citation>
	<citation>2231	5	2231</citation>
	<citation>2231	5	2231</citation>
	<citation>2231	5	2231</citation>
	<citation>2529	5	2231</citation>
	<citation>1929	6	2231</citation>
	<citation>2231	6	2231</citation>
	<citation>2231	6	2231</citation>
	</citations>
	</document>
	<document id= '2230'>
	<title>A Language for Treating Geometric Patterns in a Two-dimensional space</title>
	<abstract>In this paper CADEP, a problem-oriented language for positioning geometric patterns in a two-dimensional  space, is presented.  Although the language has been specifically designed for the automatic generation  of integrated circuit masks, it turns out to be well suited also for such other placement problems as  architecture design, urban planning, logical and block diagram representation.  The design criteria,  the structure, and the specific features of CADEP are illustrated.</abstract>
	<conference>CACM January, 1971</conference>
	<authors>
	<author>Bracchi, G.</author>
	<author>Ferrari, D.</author>
	</authors>
	<keywords>graphic language, problem-oriented language, two-dimensional patterns, graphic display, Fortran  extension, layout problems, integrated circuit, architecture design, urban planning</keywords>
	<version>3.23 3.24 3.25 4.22</version>
	<location>CA710104 JB February 8, 1978  11:17 AM</location>
	<citations>
	<citation>2230	4	2230</citation>
	<citation>2003	5	2230</citation>
	<citation>2044	5	2230</citation>
	<citation>2230	5	2230</citation>
	<citation>2230	5	2230</citation>
	<citation>2230	5	2230</citation>
	<citation>996	6	2230</citation>
	<citation>1558	6	2230</citation>
	<citation>2230	6	2230</citation>
	<citation>521	6	2230</citation>
	</citations>
	</document>
	<document id= '2229'>
	<title>Construction of Rational and Negative Powers of a Formal Series</title>
	<abstract>Some methods are described for the generation of fractional and negative powers of any formal  series, such as Poisson series or Chebyshev series.  It is shown that, with the use of the three elementary  operations of addition, subtraction, and multiplication, all rational (positive and negative) powers  of a series can be constructed.  There are basically two approaches: the binomial theorem and the iteration  methods.  Both methods are described here, and the relationship between them is pointed out.  Some well-known  classical formulas are obtained as particular cases, and it is shown how the convergence properties of  these formulas can be improved with very little additional computations.  Finally, at the end of the  article, some numerical experiments are described with Chebyshev series and with Fourier series.</abstract>
	<conference>CACM January, 1971</conference>
	<authors>
	<author>Brucke, R. A.</author>
	</authors>
	<keywords>series expansion, series inversion, root extraction, binomial theorem, Newton iterations, Chebyshev  series, Poisson series, Fourier series</keywords>
	<version>3.11 3.15 3.21 5.0</version>
	<location>CA710105 JB February 8, 1978  10:57 AM</location>
	<citations>
	<citation>1396	4	2229</citation>
	<citation>2229	4	2229</citation>
	<citation>1365	5	2229</citation>
	<citation>2229	5	2229</citation>
	<citation>2229	5	2229</citation>
	<citation>2229	5	2229</citation>
	</citations>
	</document>
	<document id= '2228'>
	<title>Comments on Prevention of System Deadlocks</title>
	<abstract>Habermann's method of deadlock prevention is discussed, where deadlock is defined as a system  state from which resource allocations to certain processes are not possible.  It is shown that the scheduler  may introduce "artificial" deadlocks which Habermann's method does not prevent.  Permanent blocking is  the situation where certain processes never receive their resource requests.  It is shown that deadlock  prevention does not necessarily eliminate permanent blocking.  A method of preventing permanent blocking  is given.</abstract>
	<conference>CACM January, 1971</conference>
	<authors>
	<author>Holt, R. C.</author>
	</authors>
	<keywords>multiprogramming, time-sharing, scheduling, resource allocation, deadlock, lockout, deadly embrace,  knotting</keywords>
	<version>3.72 4.32 6.20</version>
	<location>CA710106 JB February 8, 1978  10:45 AM</location>
	<citations>
	<citation>1781	4	2228</citation>
	<citation>2150	4	2228</citation>
	<citation>2150	4	2228</citation>
	<citation>2228	4	2228</citation>
	<citation>2228	4	2228</citation>
	<citation>2228	4	2228</citation>
	<citation>2256	4	2228</citation>
	<citation>2256	4	2228</citation>
	<citation>2280	4	2228</citation>
	<citation>2317	4	2228</citation>
	<citation>2342	4	2228</citation>
	<citation>2342	4	2228</citation>
	<citation>2376	4	2228</citation>
	<citation>2379	4	2228</citation>
	<citation>2482	4	2228</citation>
	<citation>2618	4	2228</citation>
	<citation>2618	4	2228</citation>
	<citation>2740	4	2228</citation>
	<citation>2851	4	2228</citation>
	<citation>2920	4	2228</citation>
	<citation>3184	4	2228</citation>
	<citation>1198	5	2228</citation>
	<citation>1338	5	2228</citation>
	<citation>1877	5	2228</citation>
	<citation>2228	5	2228</citation>
	<citation>2228	5	2228</citation>
	<citation>2228	5	2228</citation>
	<citation>2280	5	2228</citation>
	<citation>2379	5	2228</citation>
	<citation>2482	5	2228</citation>
	<citation>2500	5	2228</citation>
	<citation>1749	6	2228</citation>
	<citation>1749	6	2228</citation>
	<citation>1877	6	2228</citation>
	<citation>1877	6	2228</citation>
	<citation>1877	6	2228</citation>
	<citation>2228	6	2228</citation>
	<citation>2228	6	2228</citation>
	<citation>2228	6	2228</citation>
	<citation>2228	6	2228</citation>
	</citations>
	</document>
	<document id= '2227'>
	<title>Proof of a Program: FIND</title>
	<abstract>A proof is given of the correctness of the algorithm "Find."  First, a informal description  is given of the purpose of the program and the method used.  A systematic technique is described for  constructing the program proof during the process of coding it, in such a way as to prevent the intrusion  of logical errors.  The proof of termination is treated as a separate exercise.  Finally, some conclusions  relating to general programming methodology are drawn.</abstract>
	<conference>CACM January, 1971</conference>
	<authors>
	<author>Hoare, C. A. R.</author>
	</authors>
	<keywords>proofs of programs, programming methodology, program documentation, program correctness, theory  of programming</keywords>
	<version>4.0 4.22 5.21 5.23 5.24</version>
	<location>CA710107 JB February 8, 1978  10:40 AM</location>
	<citations>
	<citation>2021	4	2227</citation>
	<citation>2222	4	2227</citation>
	<citation>2227	4	2227</citation>
	<citation>2227	4	2227</citation>
	<citation>2315	4	2227</citation>
	<citation>2326	4	2227</citation>
	<citation>2470	4	2227</citation>
	<citation>2732	4	2227</citation>
	<citation>2783	4	2227</citation>
	<citation>2865	4	2227</citation>
	<citation>2896	4	2227</citation>
	<citation>2943	4	2227</citation>
	<citation>3014	4	2227</citation>
	<citation>3054	4	2227</citation>
	<citation>3068	4	2227</citation>
	<citation>3077	4	2227</citation>
	<citation>3143	4	2227</citation>
	<citation>1834	5	2227</citation>
	<citation>307	5	2227</citation>
	<citation>2227	5	2227</citation>
	<citation>2227	5	2227</citation>
	<citation>2227	5	2227</citation>
	<citation>2356	5	2227</citation>
	<citation>2420	5	2227</citation>
	<citation>2874	5	2227</citation>
	<citation>3143	5	2227</citation>
	<citation>970	6	2227</citation>
	<citation>1491	6	2227</citation>
	<citation>1682	6	2227</citation>
	<citation>1834	6	2227</citation>
	<citation>2227	6	2227</citation>
	<citation>2227	6	2227</citation>
	<citation>2227	6	2227</citation>
	<citation>2227	6	2227</citation>
	<citation>2317	6	2227</citation>
	<citation>2683	6	2227</citation>
	<citation>2871	6	2227</citation>
	<citation>521	6	2227</citation>
	</citations>
	</document>
	<document id= '2226'>
	<title>Further Evidence for the Analysis of Algorithms for the Zero-One Programming Problem</title>
	<abstract>The purpose of this note is to report computational experience additional to that recently  summarized by Gue et al, with two algorithms for the zero-one linear programming problem.  An error in  Gue's paper is corrected.  The utility of one of the algorithms as a suboptimizer is indicated.</abstract>
	<conference>CACM January, 1971</conference>
	<authors>
	<author>Proll, L. G.</author>
	</authors>
	<keywords>operations research, integer programming, zero-one variables, algorithms</keywords>
	<version>5.39 5.41</version>
	<location>CA710108 JB February 8, 1978  10:32 AM</location>
	<citations>
	<citation>2226	4	2226</citation>
	<citation>2226	4	2226</citation>
	<citation>1658	5	2226</citation>
	<citation>1666	5	2226</citation>
	<citation>2226	5	2226</citation>
	<citation>2226	5	2226</citation>
	<citation>2226	5	2226</citation>
	</citations>
	</document>
	<document id= '2225'>
	<title>Circular Integer Partitioning [A1] (Algorithm 403)</title>
	<conference>CACM January, 1971</conference>
	<authors>
	<author>Coleman, M. W.</author>
	<author>Taylor, M. S.</author>
	</authors>
	<keywords>partitions, combinatorics, statistical design of experiments</keywords>
	<version>5.39 5.5</version>
	<location>CA710109 JB February 8, 1978  10:27 AM</location>
	<citations>
	<citation>2225	5	2225</citation>
	<citation>2225	5	2225</citation>
	<citation>2225	5	2225</citation>
	</citations>
	</document>
	<document id= '2224'>
	<title>Complex Gamma Function [S14] (Algorithm 404)</title>
	<conference>CACM January, 1971</conference>
	<authors>
	<author>Terrill, C. W.</author>
	</authors>
	<keywords>gamma function, poles of gamma function, Stirling's asymptotic series, recursion formula, reflection  formula</keywords>
	<version>5.12</version>
	<location>CA710110 JB February 8, 1978  10:25 AM</location>
	<citations>
	<citation>2224	4	2224</citation>
	<citation>1547	5	2224</citation>
	<citation>2224	5	2224</citation>
	<citation>2224	5	2224</citation>
	<citation>2224	5	2224</citation>
	</citations>
	</document>
	<document id= '2223'>
	<title>Minit Algorithm For Linear Programming (Algorithm 222 [H])</title>
	<conference>CACM January, 1971</conference>
	<authors>
	<author>Kolm, A.</author>
	<author>Dahlstrand, T.</author>
	</authors>
	<keywords>linear programming, dual simplex method, primal problem, dual problem</keywords>
	<version>5.41</version>
	<location>CA710111 JB February 8, 1978  10:22 AM</location>
	<citations>
	<citation>2223	5	2223</citation>
	<citation>2223	5	2223</citation>
	<citation>2223	5	2223</citation>
	</citations>
	</document>
	<document id= '2222'>
	<title>Comment on London's Certification of Algorithm 245</title>
	<conference>CACM January, 1971</conference>
	<authors>
	<author>Redish, K. A.</author>
	</authors>
	<keywords>proof of algorithms, debugging, certification, metatheory,  sorting, in-place sorting</keywords>
	<version>4.42 4.49 5.24 5.31</version>
	<location>CA710112 JB February 8, 1978  10:19 AM</location>
	<citations>
	<citation>2021	4	2222</citation>
	<citation>2042	4	2222</citation>
	<citation>2222	4	2222</citation>
	<citation>2222	4	2222</citation>
	<citation>2222	4	2222</citation>
	<citation>2222	4	2222</citation>
	<citation>2222	4	2222</citation>
	<citation>2227	4	2222</citation>
	<citation>2315	4	2222</citation>
	<citation>2326	4	2222</citation>
	<citation>2356	4	2222</citation>
	<citation>2470	4	2222</citation>
	<citation>2679	4	2222</citation>
	<citation>2679	4	2222</citation>
	<citation>2732	4	2222</citation>
	<citation>2844	4	2222</citation>
	<citation>2865	4	2222</citation>
	<citation>2896	4	2222</citation>
	<citation>2943	4	2222</citation>
	<citation>2972	4	2222</citation>
	<citation>3014	4	2222</citation>
	<citation>3068	4	2222</citation>
	<citation>3077	4	2222</citation>
	<citation>3143	4	2222</citation>
	<citation>970	5	2222</citation>
	<citation>1800	5	2222</citation>
	<citation>1818	5	2222</citation>
	<citation>1834	5	2222</citation>
	<citation>2042	5	2222</citation>
	<citation>2222	5	2222</citation>
	<citation>2222	5	2222</citation>
	<citation>2222	5	2222</citation>
	</citations>
	</document>
	<document id= '2221'>
	<title>Comment on the Conversion of Decision Tables to Computer Programs</title>
	<conference>CACM January, 1971</conference>
	<authors>
	<author>Pollack, S. L.</author>
	</authors>
	<keywords>decision tables, diagnostic aids, system analysis, business applications</keywords>
	<version>3.50 3.59 4.19 4.29 4.49</version>
	<location>CA710113 JB February 8, 1978  10:09 AM</location>
	<citations>
	<citation>2221	4	2221</citation>
	<citation>2221	4	2221</citation>
	<citation>2273	4	2221</citation>
	<citation>2340	4	2221</citation>
	<citation>2453	4	2221</citation>
	<citation>2517	4	2221</citation>
	<citation>2824	4	2221</citation>
	<citation>2856	4	2221</citation>
	<citation>2986	4	2221</citation>
	<citation>3034	4	2221</citation>
	<citation>1683	5	2221</citation>
	<citation>2053	5	2221</citation>
	<citation>2221	5	2221</citation>
	<citation>2221	5	2221</citation>
	<citation>2221	5	2221</citation>
	<citation>2517	5	2221</citation>
	<citation>2726	5	2221</citation>
	<citation>1172	6	2221</citation>
	<citation>1327	6	2221</citation>
	<citation>1354	6	2221</citation>
	<citation>1488	6	2221</citation>
	<citation>1489	6	2221</citation>
	<citation>1548	6	2221</citation>
	<citation>1684	6	2221</citation>
	<citation>2053	6	2221</citation>
	<citation>2220	6	2221</citation>
	<citation>2221	6	2221</citation>
	<citation>2221	6	2221</citation>
	<citation>2263	6	2221</citation>
	</citations>
	</document>
	<document id= '2220'>
	<title>Conversion of Limited-Entry Decision Tables to Computer Programs-A Proposed Modification to Pollack's  Algorithm</title>
	<abstract>Pollack has proposed an algorithm for converting decision tables into flowcharts which minimize  subsequent execution time when compiled into a computer program.  Two modifications of this algorithm  are proposed.  The first relies on Shannon's noiseless coding theorem and the communications concept  of entropy but does not completely test the ELSE Rule.  The second modification completely tests the  ELSE Rule but results in more executions than the first modification.  Both modifications result in modification  guarantees a globally optimal solution.</abstract>
	<conference>CACM February, 1971</conference>
	<authors>
	<author>Shwayder, K.</author>
	</authors>
	<keywords>coding, decision table, entropy, information theory, noiseless channel, sorting</keywords>
	<version>3.50 5.31</version>
	<location>CA710201 JB February 8, 1978  10:06 AM</location>
	<citations>
	<citation>1237	4	2220</citation>
	<citation>1354	4	2220</citation>
	<citation>1354	4	2220</citation>
	<citation>1354	4	2220</citation>
	<citation>1488	4	2220</citation>
	<citation>1488	4	2220</citation>
	<citation>1548	4	2220</citation>
	<citation>1684	4	2220</citation>
	<citation>1994	4	2220</citation>
	<citation>2053	4	2220</citation>
	<citation>2053	4	2220</citation>
	<citation>2053	4	2220</citation>
	<citation>2053	4	2220</citation>
	<citation>2220	4	2220</citation>
	<citation>2220	4	2220</citation>
	<citation>2220	4	2220</citation>
	<citation>2220	4	2220</citation>
	<citation>2220	4	2220</citation>
	<citation>2220	4	2220</citation>
	<citation>2220	4	2220</citation>
	<citation>2273	4	2220</citation>
	<citation>2273	4	2220</citation>
	<citation>2273	4	2220</citation>
	<citation>2273	4	2220</citation>
	<citation>2453	4	2220</citation>
	<citation>2453	4	2220</citation>
	<citation>2492	4	2220</citation>
	<citation>2518	4	2220</citation>
	<citation>2598	4	2220</citation>
	<citation>2598	4	2220</citation>
	<citation>2616	4	2220</citation>
	<citation>2726	4	2220</citation>
	<citation>2726	4	2220</citation>
	<citation>2726	4	2220</citation>
	<citation>2726	4	2220</citation>
	<citation>2726	4	2220</citation>
	<citation>2856	4	2220</citation>
	<citation>2856	4	2220</citation>
	<citation>2856	4	2220</citation>
	<citation>3113	4	2220</citation>
	<citation>753	4	2220</citation>
	<citation>1172	5	2220</citation>
	<citation>1237	5	2220</citation>
	<citation>1327	5	2220</citation>
	<citation>1354	5	2220</citation>
	<citation>250	5	2220</citation>
	<citation>1489	5	2220</citation>
	<citation>1548	5	2220</citation>
	<citation>2220	5	2220</citation>
	<citation>2220	5	2220</citation>
	<citation>2220	5	2220</citation>
	<citation>2273	5	2220</citation>
	<citation>2453	5	2220</citation>
	<citation>2598	5	2220</citation>
	<citation>2726	5	2220</citation>
	<citation>2856	5	2220</citation>
	<citation>1172	6	2220</citation>
	<citation>1172	6	2220</citation>
	<citation>1172	6	2220</citation>
	<citation>1172	6	2220</citation>
	<citation>1172	6	2220</citation>
	<citation>1237	6	2220</citation>
	<citation>1327	6	2220</citation>
	<citation>1327	6	2220</citation>
	<citation>1327	6	2220</citation>
	<citation>1354	6	2220</citation>
	<citation>1354	6	2220</citation>
	<citation>1354	6	2220</citation>
	<citation>1354	6	2220</citation>
	<citation>1488	6	2220</citation>
	<citation>1489	6	2220</citation>
	<citation>1548	6	2220</citation>
	<citation>1548	6	2220</citation>
	<citation>2053	6	2220</citation>
	<citation>2053	6	2220</citation>
	<citation>2053	6	2220</citation>
	<citation>2220	6	2220</citation>
	<citation>2220	6	2220</citation>
	<citation>2220	6	2220</citation>
	<citation>2220	6	2220</citation>
	<citation>2220	6	2220</citation>
	<citation>2221	6	2220</citation>
	<citation>2263	6	2220</citation>
	<citation>2263	6	2220</citation>
	<citation>2453	6	2220</citation>
	<citation>2453	6	2220</citation>
	<citation>2598	6	2220</citation>
	<citation>2691	6	2220</citation>
	<citation>753	6	2220</citation>
	</citations>
	</document>
	<document id= '2219'>
	<title>A Policy-Driven Scheduler for a Time-Sharing System</title>
	<abstract>The service received by a process from a time-sharing operating system can be characterized  by a resource count SUM{w[i]R[ij]} where R[ij] is the number of units of service received by process  i from resource i and w[i] is the cost per unit of the service.  Each class of users can be characterized  by a policy function which specifies the amount of service a user who belongs to this class should receive  as a function of time.  Priority changes dynamically as a function of the difference between the service  promised to the user by the policy function and the service he actually receives.  A scheduling and swapping  algorithm which keeps the resource count of each process above its policy function will provide the specified  level of service.  Overhead can be reduced by avoiding swaps of process which have received at least  his level of service.  The algorithm has been implemented in a general purpose operating system, and  it has provided significantly better service to interactive and to batch jobs than the previous scheduler.</abstract>
	<conference>CACM February, 1971</conference>
	<authors>
	<author>Bernstein, A. J.</author>
	<author>Sharp, J. C.</author>
	</authors>
	<keywords>scheduler, time-sharing, operating system, resource allocation and swapping</keywords>
	<version>4.32</version>
	<location>CA710202 JB February 8, 1978  9:54 AM</location>
	<citations>
	<citation>2219	4	2219</citation>
	<citation>2344	4	2219</citation>
	<citation>1938	5	2219</citation>
	<citation>2219	5	2219</citation>
	<citation>2219	5	2219</citation>
	<citation>2219	5	2219</citation>
	<citation>2950	5	2219</citation>
	<citation>3072	5	2219</citation>
	<citation>1713	6	2219</citation>
	<citation>2219	6	2219</citation>
	<citation>2219	6	2219</citation>
	<citation>2245	6	2219</citation>
	<citation>2375	6	2219</citation>
	</citations>
	</document>
	<document id= '2218'>
	<title>An Analysis of Some Time-Sharing Techniques</title>
	<abstract>The effectiveness of certain time-sharing techniques such as program, relocation, disk rotational  delay minimization, and swap volume minimization is investigated.  Summary data is presented, and the  findings are discussed.  The vehicle for this investigation was a SIMULA based simulation model reflecting  an early framework for a planned Burroughs B6500 time-sharing system.  Inasmuch as the B6500 system is  based upon the use of variable sized segments and a dynamic overlay procedure, data is also presented  which provides some indication of the effectiveness of this type of organization in a time-sharing environment.   The design characteristics and operational capabilities of the simulation model are also described.</abstract>
	<conference>CACM February, 1971</conference>
	<authors>
	<author>Nielsen, N. R.</author>
	</authors>
	<keywords>B6500, bulk core usage, operating system model, relocation, rotational delay minimization, simulation,  swap volume minimization, system simulation, time-sharing</keywords>
	<version>3.9 4.32</version>
	<location>CA710203 JB February 8, 1978  9:40 AM</location>
	<citations>
	<citation>1541	4	2218</citation>
	<citation>1751	4	2218</citation>
	<citation>1805	4	2218</citation>
	<citation>1846	4	2218</citation>
	<citation>1846	4	2218</citation>
	<citation>1892	4	2218</citation>
	<citation>1892	4	2218</citation>
	<citation>1892	4	2218</citation>
	<citation>1892	4	2218</citation>
	<citation>1901	4	2218</citation>
	<citation>1924	4	2218</citation>
	<citation>2060	4	2218</citation>
	<citation>2085	4	2218</citation>
	<citation>2095	4	2218</citation>
	<citation>2095	4	2218</citation>
	<citation>2095	4	2218</citation>
	<citation>2128	4	2218</citation>
	<citation>2188	4	2218</citation>
	<citation>2218	4	2218</citation>
	<citation>2218	4	2218</citation>
	<citation>2218	4	2218</citation>
	<citation>2218	4	2218</citation>
	<citation>2218	4	2218</citation>
	<citation>2218	4	2218</citation>
	<citation>2218	4	2218</citation>
	<citation>2218	4	2218</citation>
	<citation>2277	4	2218</citation>
	<citation>2297	4	2218</citation>
	<citation>2317	4	2218</citation>
	<citation>2319	4	2218</citation>
	<citation>2329	4	2218</citation>
	<citation>2358	4	2218</citation>
	<citation>2373	4	2218</citation>
	<citation>2373	4	2218</citation>
	<citation>2374	4	2218</citation>
	<citation>2380	4	2218</citation>
	<citation>2434	4	2218</citation>
	<citation>2499	4	2218</citation>
	<citation>2498	4	2218</citation>
	<citation>2501	4	2218</citation>
	<citation>2526	4	2218</citation>
	<citation>2582	4	2218</citation>
	<citation>2596	4	2218</citation>
	<citation>2667	4	2218</citation>
	<citation>2668	4	2218</citation>
	<citation>2669	4	2218</citation>
	<citation>2734	4	2218</citation>
	<citation>2734	4	2218</citation>
	<citation>2828	4	2218</citation>
	<citation>2862	4	2218</citation>
	<citation>2863	4	2218</citation>
	<citation>2863	4	2218</citation>
	<citation>2881	4	2218</citation>
	<citation>2902	4	2218</citation>
	<citation>2911	4	2218</citation>
	<citation>2928	4	2218</citation>
	<citation>2996	4	2218</citation>
	<citation>3000	4	2218</citation>
	<citation>3000	4	2218</citation>
	<citation>3006	4	2218</citation>
	<citation>3067	4	2218</citation>
	<citation>3112	4	2218</citation>
	<citation>1380	5	2218</citation>
	<citation>1572	5	2218</citation>
	<citation>1728	5	2218</citation>
	<citation>1751	5	2218</citation>
	<citation>1752	5	2218</citation>
	<citation>1810	5	2218</citation>
	<citation>1879	5	2218</citation>
	<citation>2095	5	2218</citation>
	<citation>2218	5	2218</citation>
	<citation>2218	5	2218</citation>
	<citation>2218	5	2218</citation>
	<citation>2681	5	2218</citation>
	<citation>2218	6	2218</citation>
	</citations>
	</document>
	<document id= '2217'>
	<title>Experiments in Automatic Learning for a Multipurpose Heuristic Program</title>
	<abstract>An automatic learning capability has been developed and implemented for use with the MULTIPLE  (MULTIpurpose Program that LEarns) heuristic tree-searching program, which is presently being applied  to resolution theorem-proving in predicate calculus. MULTIPLE's proving program (PP) uses two evaluation  functions to guide its search for a proof of whether or not a particular goal is achievable.  Thirteen  general features of predicate calculus clauses were created for use in the automatic learning of better  evaluation functions for PP.  A multiple regression program was used to produce optimal coefficients  for linear polynomial functions in terms of the features.  Also, automatic data-handling routines were  written for passing data between the learning program and the proving program, and for analyzing and  summarizing results.  Data was generally collected for learning (regression analysis) from the experience  of PP.  A number of experiments were performed to test the effectiveness and generality of the learning  program. Results showed that the learning produced dramatic improvements in the solutions to problems  which were in the same domain as those used for collection learning data.  Learning was also shown to  generalize successfully to domains other than those used for data collection.  Another experiment demonstrated  that the learning program could simultaneously improve performance on problems in a specific domain and  on problems in a variety of domains.  Some variations of the learning program were also tested.</abstract>
	<conference>CACM February, 1971</conference>
	<authors>
	<author>Slagle, J. R.</author>
	<author>Farrell, C. D.</author>
	</authors>
	<keywords>learning, theorem-providing, heuristic, automatic learning, self-modifying,tree-searching, artificial  intelligence, problem-solving, adaptive, LISP, multiple regression, resolution</keywords>
	<version>3.62 3.64</version>
	<location>CA710204 JB February 8, 1978  9:33 AM</location>
	<citations>
	<citation>2217	5	2217</citation>
	<citation>2217	5	2217</citation>
	<citation>2217	5	2217</citation>
	</citations>
	</document>
	<document id= '2216'>
	<title>On the Probability Distribution of the Values of Binary Trees</title>
	<abstract>An integral equation is derived for the generating function for binary tree values, the values  reflecting sorting effort. The analysis does not assume uniformly distributed branching ratios, and  therefore is applicable to a family of sorting algorithms discussed by Hoare, Singleton, and van Emden.   The solution to the integral equation indicates that using more advanced algorithms in the family makes  only minor reductions in the expected sorting effort, but substantially reduces the variance in sorting  effort.  Statistical tests of the values of several thousand trees containing up to 10,000 points have  given first, second, and third moments of the value distribution function in satisfactory agreement with  the moments computed from the generating function.  The empirical tests, as well as the analytical results,  are in agreement with previously published results for the first moment in the cases of uniform and nonuniform  distribution of branching ratio, and for the second moment in the case of uniform distribution of branching  ratio.</abstract>
	<conference>CACM February, 1971</conference>
	<authors>
	</authors>
	<keywords>binary trees, sorting, statistical analysis</keywords>
	<version>4.40 5.18 5.5</version>
	<location>CA710205 JB February 8, 1978  9:09 AM</location>
	<citations>
	<citation>1175	4	2216</citation>
	<citation>1919	4	2216</citation>
	<citation>1997	4	2216</citation>
	<citation>2017	4	2216</citation>
	<citation>2041	4	2216</citation>
	<citation>2216	4	2216</citation>
	<citation>2216	4	2216</citation>
	<citation>2216	4	2216</citation>
	<citation>2216	4	2216</citation>
	<citation>2679	4	2216</citation>
	<citation>2679	4	2216</citation>
	<citation>3054	4	2216</citation>
	<citation>3054	4	2216</citation>
	<citation>3054	4	2216</citation>
	<citation>1919	5	2216</citation>
	<citation>1969	5	2216</citation>
	<citation>1997	5	2216</citation>
	<citation>2216	5	2216</citation>
	<citation>2216	5	2216</citation>
	<citation>2216	5	2216</citation>
	<citation>864	5	2216</citation>
	</citations>
	</document>
	<document id= '2215'>
	<title>Application of Game Tree Searching Techniques to Sequential Pattern Recognition</title>
	<abstract>A sequential pattern recognition (SPR) procedure does not test all the features of a pattern  at once.  Instead, it selects a feature to be tested.  After receiving the result of that test, the procedure  either classifies the unknown pattern or selects another feature to be tested, etc.  Medical diagnosis  is an example of SPR.  In this paper the authors suggest that SPR be viewed as a one-person game played  against nature (chance).  Virtually all the powerful techniques developed for searching two-person, strictly  competitive game trees can easily be incorporated either directly or by analogy into SPR procedures.   In particular, one can incorporate the "mini average backing-up procedure" and the "gamma procedure,"  which are the analogues of the "minimax backing-up procedure" and the "alpha-beta procedure," respectively.   Some computer simulated experiments in character recognition are presented.  The results indicate that  the approach is promising.</abstract>
	<conference>CACM February, 1971</conference>
	<authors>
	<author>Slagle, J. R.</author>
	<author>Lee, R. C. T.</author>
	</authors>
	<keywords>sequential pattern recognition, game tree searching, game against nature, gamma procedure, mini average  backing-up procedure, dynamic programming, branch-and-bound approach, optimal solution</keywords>
	<version>3.60 3.63 5.42</version>
	<location>CA710206 JB February 8, 1978  8:56 AM</location>
	<citations>
	<citation>2215	4	2215</citation>
	<citation>2096	5	2215</citation>
	<citation>2215	5	2215</citation>
	<citation>2215	5	2215</citation>
	<citation>2215	5	2215</citation>
	<citation>3132	5	2215</citation>
	<citation>2215	6	2215</citation>
	</citations>
	</document>
	<document id= '2214'>
	<title>Complex Interval Arithmetic</title>
	<abstract>Complex interval arithmetic is defined using real interval arithmetic.  Complex interval division  is defined so as to assure smallest possible resulting intervals.</abstract>
	<conference>CACM February, 1971</conference>
	<authors>
	<author>Rokne, J.</author>
	<author>Lancaster, P.</author>
	</authors>
	<keywords>real intervals, real interval arithmetic, complex intervals, complex interval arithmetic</keywords>
	<version>5.11</version>
	<location>CA710207 JB February 8, 1978  8:39 AM</location>
	<citations>
	<citation>1524	4	2214</citation>
	<citation>1931	4	2214</citation>
	<citation>2214	4	2214</citation>
	<citation>2544	4	2214</citation>
	<citation>311	5	2214</citation>
	<citation>2214	5	2214</citation>
	<citation>2214	5	2214</citation>
	<citation>2214	5	2214</citation>
	<citation>2544	5	2214</citation>
	<citation>1524	6	2214</citation>
	<citation>311	6	2214</citation>
	<citation>2214	6	2214</citation>
	</citations>
	</document>
	<document id= '2213'>
	<title>Roots of Matrix Pencils: The Generalized Eigenvalue Problem [F2] (Algorithm 405)</title>
	<conference>CACM February, 1971</conference>
	<authors>
	<author>Dell, A. M.</author>
	<author>Weil, R. L.</author>
	<author>Thompson, G. L.</author>
	</authors>
	<keywords>eigenvalues, matrix roots, pencil roots</keywords>
	<version>5.1 5.3</version>
	<location>CA710208 JB February 8, 1978  8:37 AM</location>
	<citations>
	<citation>2213	5	2213</citation>
	<citation>2213	5	2213</citation>
	<citation>2213	5	2213</citation>
	</citations>
	</document>
	<document id= '2212'>
	<title>F-DISTRIBUTION</title>
	<conference>CACM February, 1971</conference>
	<authors>
	<author>Tolman, H.</author>
	</authors>
	<keywords>Fisher's F-distribution, Student's t-distribution</keywords>
	<version>5.5</version>
	<location>CA710209 JB February 8, 1978  8:35 AM</location>
	<citations>
	<citation>2212	5	2212</citation>
	<citation>2212	5	2212</citation>
	<citation>2212	5	2212</citation>
	</citations>
	</document>
	<document id= '2211'>
	<title>Scanned-Display Computer Graphics</title>
	<abstract>A television-like scanned-display system has been successfully implemented on a Honeywell DDP-224  computer installation.  The scanned image is stored in the core memory of the computer, and software  scan conversion is used to convert the rectangular coordinates of a point to the appropriate word and  bit in an output display array in core storage.  Results thus far indicate that flicker-free displays  of large amounts of data are possible with reasonably fast graphical interaction.  A scanned image of  size 240 X 254 points is displayed at a 30 frame-per-second rate.</abstract>
	<conference>CACM March, 1971</conference>
	<authors>
	<author>Noll, A. M.</author>
	</authors>
	<keywords>computer graphics, scanned-display, scan conversion, raster displays</keywords>
	<version>4.41 6.35</version>
	<location>CA710301 JB February 3, 1978  4:53 PM</location>
	<citations>
	<citation>1891	4	2211</citation>
	<citation>2211	4	2211</citation>
	<citation>2211	4	2211</citation>
	<citation>2421	4	2211</citation>
	<citation>2674	4	2211</citation>
	<citation>2687	4	2211</citation>
	<citation>1554	5	2211</citation>
	<citation>1741	5	2211</citation>
	<citation>2211	5	2211</citation>
	<citation>2211	5	2211</citation>
	<citation>2211	5	2211</citation>
	<citation>2421	5	2211</citation>
	<citation>1741	6	2211</citation>
	<citation>2211	6	2211</citation>
	</citations>
	</document>
	<document id= '2210'>
	<title>Toward Automatic Program Synthesis</title>
	<abstract>An elementary outline of the theorem-proving approach to automatic program synthesis is given,  without dwelling on technical details.  The method is illustrated by the automatic construction of both  recursive and iterative programs operating on natural numbers,lists, and trees,  In order to construct  a program satisfying certain specifications a theorem induced by those specifications is proved, and  the desired program is extracted from the proof.  The same technique is applied to transform recursively  defined functions into iterative programs, frequently with a major gain inefficiency.  It is emphasized  that in order to construct a program with loops or with recursion, the principle of mathematical induction  must be applied. The relation between the version of the induction rule used and the form of the program  constructed is explored in some detail.</abstract>
	<conference>CACM March, 1971</conference>
	<authors>
	<author>Manna, Z.</author>
	<author>Waldinger, R. J.</author>
	</authors>
	<keywords>artificial intelligence, answer extraction, automatic program synthesis, mathematical induction  principle, problem solving, theorem proving</keywords>
	<version>3.64 5.23 5.24</version>
	<location>CA710302 JB February 3, 1978  4:48 PM</location>
	<citations>
	<citation>1515	4	2210</citation>
	<citation>2096	4	2210</citation>
	<citation>2127	4	2210</citation>
	<citation>2210	4	2210</citation>
	<citation>1155	5	2210</citation>
	<citation>2210	5	2210</citation>
	<citation>2210	5	2210</citation>
	<citation>2210	5	2210</citation>
	<citation>2657	5	2210</citation>
	<citation>2719	5	2210</citation>
	<citation>1626	6	2210</citation>
	<citation>210	6	2210</citation>
	<citation>2151	6	2210</citation>
	<citation>2167	6	2210</citation>
	<citation>2210	6	2210</citation>
	<citation>2210	6	2210</citation>
	<citation>2645	6	2210</citation>
	<citation>2657	6	2210</citation>
	</citations>
	</document>
	<document id= '2209'>
	<title>A Scheduling Algorithm for a Computer Assisted Registration System</title>
	<abstract>This paper presents the scheduling algorithm used in the Computer Assisted Registration System  at the University of Tennessee.  Notation is defined and the logic of the algorithm necessary to implement  educational policy is described.  Results from the first term's implementation are presented.</abstract>
	<conference>CACM March, 1971</conference>
	<authors>
	<author>Winters, W. K.</author>
	</authors>
	<keywords>computer assisted registration, scheduling algorithm, timetable</keywords>
	<version>3.32 5.39</version>
	<location>CA710303 JB February 3, 1978  4:40 PM</location>
	<citations>
	<citation>1540	4	2209</citation>
	<citation>2052	4	2209</citation>
	<citation>2209	4	2209</citation>
	<citation>2209	4	2209</citation>
	<citation>1434	5	2209</citation>
	<citation>1540	5	2209</citation>
	<citation>2209	5	2209</citation>
	<citation>2209	5	2209</citation>
	<citation>2209	5	2209</citation>
	</citations>
	</document>
	<document id= '2208'>
	<title>Storage Utilization in a Memory Hierarchy When Storage Assignment Is Performed by a Hashing Algorithm</title>
	<abstract>The utilization of storage is studied in a two-level memory hierarchy.  The first storage level,  which is the fast store, is divided into a number of storage areas.  When an entry is to be filed in  the hierarchy, a hashing algorithm will attempt to place the entry into one of these areas.  If this  particular area is full, then the entry will be placed into the slower second-level store, even though  other areas in the first-level store may have space available.  Given the N entries have been filed in  the entire hierarchy, an expression is derived for the expected number of entries filed in the first-level  store.This expression gives a measure of how effectively the first-level store is being used.  By means  of examples, storage utilization is then studied as a function of the hashing algorithm, the number of  storage areas into which the first-level store is divided and the total size of the first-level store.</abstract>
	<conference>CACM March, 1971</conference>
	<authors>
	<author>Williams, J. G.</author>
	</authors>
	<keywords>hashing algorithms, memory allocation, memory hierarchy, memory utilization, storage allocation,  storage hierarchy, storage utilization</keywords>
	<version>3.74 4.3</version>
	<location>CA710304 JB February 3, 1978  4:37 PM</location>
	<citations>
	<citation>2208	5	2208</citation>
	<citation>2208	5	2208</citation>
	<citation>2208	5	2208</citation>
	</citations>
	</document>
	<document id= '2207'>
	<title>The Automatic Integration of Ordinary Differential Equations</title>
	<abstract>An integration technique for the automatic solution of an initial value problem for a set of  ordinary differential equations is described.  A criterion for the selection of the order of approximation  is proposed.  The objective of the criterion is to increase the step size so as to reduce solution time.  An option permits the solution of "stiff" differential equations.  A program embodying the techniques  discussed appears in Algorithm 407.</abstract>
	<conference>CACM March, 1971</conference>
	<authors>
	<author>Gear, C. W.</author>
	</authors>
	<keywords>differential equations, stiff equations, integration, step control, order control</keywords>
	<version>5.17</version>
	<location>CA710305 JB February 3, 1978  4:28 PM</location>
	<citations>
	<citation>2205	5	2207</citation>
	<citation>2207	5	2207</citation>
	<citation>2207	5	2207</citation>
	<citation>2207	5	2207</citation>
	<citation>2474	5	2207</citation>
	<citation>2205	6	2207</citation>
	<citation>2207	6	2207</citation>
	<citation>2207	6	2207</citation>
	</citations>
	</document>
	<document id= '2206'>
	<title>Exact Solution of Linear Equations Using Residue Arithmetic [F4] (Algorithm 406)</title>
	<conference>CACM March, 1971</conference>
	<authors>
	<author>Howell, J.</author>
	</authors>
	<keywords>residue arithmetic, symmetric residue, modulus, mixed-radix representation, symmetric mixed-radix  representation, mixed-radix conversion, prime number, linear equations, Gaussian elimination, matrix  inversion, determinant, adjoint matrix, ill-condition</keywords>
	<version>3.15 5.14</version>
	<location>CA710306 JB February 3, 1978  4:23 PM</location>
	<citations>
	<citation>2206	5	2206</citation>
	<citation>2206	5	2206</citation>
	<citation>2206	5	2206</citation>
	</citations>
	</document>
	<document id= '2205'>
	<title>DIFSUB for Solution of Ordinary Differential Equations [D2] (Algorithm 407)</title>
	<conference>CACM March, 1971</conference>
	<authors>
	<author>Gear, C. W.</author>
	</authors>
	<keywords>differential equations, stiff differential equations</keywords>
	<version>5.17</version>
	<location>CA710307 JB February 3, 1978  4:16 PM</location>
	<citations>
	<citation>2205	4	2205</citation>
	<citation>2474	4	2205</citation>
	<citation>2205	5	2205</citation>
	<citation>2205	5	2205</citation>
	<citation>2205	5	2205</citation>
	<citation>2207	5	2205</citation>
	<citation>2474	5	2205</citation>
	<citation>2205	6	2205</citation>
	<citation>2207	6	2205</citation>
	</citations>
	</document>
	<document id= '2204'>
	<title>Program Development by Stepwise Refinement</title>
	<abstract>The creative activity of programming-to be distinguished from coding-is usually taught by examples  serving to exhibit certain techniques.  It is here considered as a sequence of design decisions concerning  the decomposition of tasks into subtasks and of data into data structures.  The process of successive  refinement of specifications is illustrated by a short but nontrivial example, from which a number of  conclusions are drawn regarding the art and the instruction of programming.</abstract>
	<conference>CACM April, 1971</conference>
	<authors>
	<author>Wirth, N.</author>
	</authors>
	<keywords>education in programming, programming techniques, stepwise program construction</keywords>
	<version>1.50 4.0</version>
	<location>CA710401 JB February 3, 1978  4:14 PM</location>
	<citations>
	<citation>2204	5	2204</citation>
	<citation>2204	5	2204</citation>
	<citation>2204	5	2204</citation>
	<citation>2319	5	2204</citation>
	<citation>2480	5	2204</citation>
	<citation>2594	5	2204</citation>
	<citation>2709	5	2204</citation>
	<citation>2939	5	2204</citation>
	<citation>2972	5	2204</citation>
	<citation>3155	5	2204</citation>
	<citation>970	6	2204</citation>
	<citation>1408	6	2204</citation>
	<citation>1425	6	2204</citation>
	<citation>1719	6	2204</citation>
	<citation>1749	6	2204</citation>
	<citation>1751	6	2204</citation>
	<citation>1771	6	2204</citation>
	<citation>2016	6	2204</citation>
	<citation>2017	6	2204</citation>
	<citation>2080	6	2204</citation>
	<citation>2138	6	2204</citation>
	<citation>2155	6	2204</citation>
	<citation>2188	6	2204</citation>
	<citation>2203	6	2204</citation>
	<citation>2204	6	2204</citation>
	<citation>2204	6	2204</citation>
	<citation>2204	6	2204</citation>
	<citation>2204	6	2204</citation>
	<citation>2204	6	2204</citation>
	<citation>2204	6	2204</citation>
	<citation>2204	6	2204</citation>
	<citation>2247	6	2204</citation>
	<citation>2247	6	2204</citation>
	<citation>2456	6	2204</citation>
	<citation>2477	6	2204</citation>
	<citation>2558	6	2204</citation>
	<citation>2597	6	2204</citation>
	<citation>2732	6	2204</citation>
	<citation>2738	6	2204</citation>
	<citation>3073	6	2204</citation>
	<citation>3186	6	2204</citation>
	<citation>799	6	2204</citation>
	</citations>
	</document>
	<document id= '2203'>
	<title>Key-to-Address Transform Techniques: A Fundamental Performance Study on Large Existing Formatted  Files</title>
	<abstract>The results of a study of eight different key-to-address transformation methods applied to  a set of existing files are presented.  As each method is applied to a particular file, load factor and  bucket size are varied over a wide range.  In addition, appropriate variables pertinent only to a specific  method take on different values.  The performance of each method is summarized in terms of the number  of accesses required to get to a record and the number of overflow records created by a transformation.   Peculiarities of each method are discussed.  Practical guidelines obtained from the results are stated.   Finally, a proposal for further quantitative fundamental study is outlined.</abstract>
	<conference>CACM April, 1971</conference>
	<authors>
	<author>Lum, V. Y.</author>
	<author>Yuen, P. S. T.</author>
	<author>Dodd, M.</author>
	</authors>
	<keywords>hashing, hashing techniques, hashing methods, hash coding, keys, key transformation, key-to-address  transformation, direct addressing, direct access method, randomizing, random access,file addressing,  file organizations, file structures, scatter storage, search, collisions, clusters, information retrieval</keywords>
	<version>3.7 3.72 3.73 3.74 3.79 4.9</version>
	<location>CA710402 JB February 3, 1978  4:10 PM</location>
	<citations>
	<citation>1676	4	2203</citation>
	<citation>1682	4	2203</citation>
	<citation>1728	4	2203</citation>
	<citation>1785	4	2203</citation>
	<citation>1785	4	2203</citation>
	<citation>1860	4	2203</citation>
	<citation>1860	4	2203</citation>
	<citation>1973	4	2203</citation>
	<citation>1973	4	2203</citation>
	<citation>1973	4	2203</citation>
	<citation>1973	4	2203</citation>
	<citation>1992	4	2203</citation>
	<citation>1992	4	2203</citation>
	<citation>2018	4	2203</citation>
	<citation>2018	4	2203</citation>
	<citation>2018	4	2203</citation>
	<citation>2032	4	2203</citation>
	<citation>2033	4	2203</citation>
	<citation>2033	4	2203</citation>
	<citation>2107	4	2203</citation>
	<citation>2107	4	2203</citation>
	<citation>2109	4	2203</citation>
	<citation>2109	4	2203</citation>
	<citation>2138	4	2203</citation>
	<citation>2203	4	2203</citation>
	<citation>2203	4	2203</citation>
	<citation>2203	4	2203</citation>
	<citation>2203	4	2203</citation>
	<citation>2203	4	2203</citation>
	<citation>2203	4	2203</citation>
	<citation>2251	4	2203</citation>
	<citation>2251	4	2203</citation>
	<citation>2251	4	2203</citation>
	<citation>2251	4	2203</citation>
	<citation>2359	4	2203</citation>
	<citation>2524	4	2203</citation>
	<citation>2530	4	2203</citation>
	<citation>2537	4	2203</citation>
	<citation>2543	4	2203</citation>
	<citation>2543	4	2203</citation>
	<citation>2543	4	2203</citation>
	<citation>2543	4	2203</citation>
	<citation>2552	4	2203</citation>
	<citation>2552	4	2203</citation>
	<citation>2559	4	2203</citation>
	<citation>2559	4	2203</citation>
	<citation>2573	4	2203</citation>
	<citation>2573	4	2203</citation>
	<citation>2770	4	2203</citation>
	<citation>2770	4	2203</citation>
	<citation>2860	4	2203</citation>
	<citation>2974	4	2203</citation>
	<citation>2991	4	2203</citation>
	<citation>2991	4	2203</citation>
	<citation>3053	4	2203</citation>
	<citation>3053	4	2203</citation>
	<citation>3053	4	2203</citation>
	<citation>3083	4	2203</citation>
	<citation>911	4	2203</citation>
	<citation>911	5	2203</citation>
	<citation>1785	5	2203</citation>
	<citation>1786	5	2203</citation>
	<citation>2107	5	2203</citation>
	<citation>2109	5	2203</citation>
	<citation>2203	5	2203</citation>
	<citation>2203	5	2203</citation>
	<citation>2203	5	2203</citation>
	<citation>2258	5	2203</citation>
	<citation>2313	5	2203</citation>
	<citation>2319	5	2203</citation>
	<citation>2359	5	2203</citation>
	<citation>2437	5	2203</citation>
	<citation>2552	5	2203</citation>
	<citation>2781	5	2203</citation>
	<citation>2860	5	2203</citation>
	<citation>2991	5	2203</citation>
	<citation>492	5	2203</citation>
	<citation>911	6	2203</citation>
	<citation>1328	6	2203</citation>
	<citation>1408	6	2203</citation>
	<citation>1719	6	2203</citation>
	<citation>1749	6	2203</citation>
	<citation>1751	6	2203</citation>
	<citation>1785	6	2203</citation>
	<citation>1785	6	2203</citation>
	<citation>1785	6	2203</citation>
	<citation>332	6	2203</citation>
	<citation>2016	6	2203</citation>
	<citation>2017	6	2203</citation>
	<citation>2080	6	2203</citation>
	<citation>2107	6	2203</citation>
	<citation>2188	6	2203</citation>
	<citation>2203	6	2203</citation>
	<citation>2203	6	2203</citation>
	<citation>2203	6	2203</citation>
	<citation>2203	6	2203</citation>
	<citation>2203	6	2203</citation>
	<citation>2203	6	2203</citation>
	<citation>2203	6	2203</citation>
	<citation>2203	6	2203</citation>
	<citation>2203	6	2203</citation>
	<citation>2204	6	2203</citation>
	<citation>492	6	2203</citation>
	</citations>
	</document>
	<document id= '2202'>
	<title>Dynamic Microprogramming: Processor Organization and Programming</title>
	<abstract>A dynamically microprogrammed processor is characterized by a small (4^k 64-bit word) read-write  "micro" storage.  The access time of this storage is similar to the cycle time of the machine (50-100  nsec).  This microstorage is used to contain both data and subroutines.  The (micro) instructions in  such a processor differ from the conventional in that they perform only purely combinatorial operations;  sequencing is under the control of the microinstruction. The presence of the read-write microstorage  permits a more flexible assignment of resources than the read-only storage.  In particular, the processor  developed in this paper stresses the simultaneous operation (within the microinstruction) of the adder,  shifter, masker, and testing facilities of the processor.  A microassembly language is developed and  the overhead involved in subroutine linkages is analyzed.  The efficiency of a flexible software linkage  scheme is examined as to its overhead for various subroutine characteristics.  Finally, three examples  of problem-oriented programming are considered and the resulting coding is compared against a System/360  assembly language version, with the technology normalized.</abstract>
	<conference>CACM April, 1971</conference>
	<authors>
	<author>Tucker, A. B.</author>
	<author>Flynn, M. J.</author>
	</authors>
	<keywords>microprogramming,read-write microstorage, subroutine linkage, execution speed</keywords>
	<version>6.2</version>
	<location>CA710403 JB February 3, 1978  3:58 PM</location>
	<citations>
	<citation>2202	4	2202</citation>
	<citation>2527	4	2202</citation>
	<citation>1542	5	2202</citation>
	<citation>2202	5	2202</citation>
	<citation>2202	5	2202</citation>
	<citation>2202	5	2202</citation>
	</citations>
	</document>
	<document id= '2201'>
	<title>Animator: An On-Line Two-dimensional Film Animation System</title>
	<abstract>Animator is a computer animation system which was designed to overcome some of the inherent  disadvantages associated with conventional computer animation techniques.The DEC-338 serves as an input  terminal for movie making, allowing the trial and error design of picture sequences in a conversational  mode.  During all stages on the system input elements (light pen, pushbuttons, and teletype) is maintained.   At the user's request, this record is sent to the IBM 360/75 where the S-D 4020 instructions necessary  to produce the same sequence of pictures can be generated.  It is anticipated that one of the primary  contributions of Animator will be the provision of a facility which will allow any professor to produce  his own expository film strips.</abstract>
	<conference>CACM April, 1971</conference>
	<authors>
	<author>Talbot, P. A.</author>
	<author>III, J. W.</author>
	<author>Hwang, R. C.</author>
	</authors>
	<keywords>computer graphics, computer animation, on-line systems, two-dimensional languages, CRT, microfilm  recorder</keywords>
	<version>3.41 3.80 4.22</version>
	<location>CA710404 JB February 3, 1978  3:37 PM</location>
	<citations>
	<citation>2201	5	2201</citation>
	<citation>2201	5	2201</citation>
	<citation>2201	5	2201</citation>
	</citations>
	</document>
	<document id= '2200'>
	<title>On Complement Division</title>
	<abstract>The division algorithm theorem is expressed in a form that permits it to serve as the basis  for devising division operations that produce both quotient and remainder in complement form.  Algorithms  for division yielding complement results are derived for numbers represented in any base greater than  one.  Both radix and radix-less-one complementation schemes are considered.  The binary form of the algorithms  thus includes both two's and one's complement implementation.  The problem of quotient overflow for complement  results is dealt with as is that of selecting an appropriate form of the remainder condition for complement  division.</abstract>
	<conference>CACM April, 1971</conference>
	<authors>
	<author>Stein, M. L.</author>
	<author>Munro, W. D.</author>
	</authors>
	<keywords>division algorithm, complement arithmetic, complement division, one's complement arithmetic, two's  complement arithmetic</keywords>
	<version>3.15 4.0 4.9 5.11 6.32</version>
	<location>CA710405 JB February 3, 1978  3:28 PM</location>
	<citations>
	<citation>1965	4	2200</citation>
	<citation>2200	4	2200</citation>
	<citation>1718	5	2200</citation>
	<citation>2200	5	2200</citation>
	<citation>2200	5	2200</citation>
	<citation>2200	5	2200</citation>
	</citations>
	</document>
	<document id= '2199'>
	<title>A Sparse Matrix Package (Part I) [F4] (Algorithm 408)</title>
	<conference>CACM April, 1971</conference>
	<authors>
	<author>McNamee, J. M.</author>
	</authors>
	<keywords>matrix, sparse matrix, matrix manipulation</keywords>
	<version>5.14</version>
	<location>CA710406 JB February 3, 1978  3:20 PM</location>
	<citations>
	<citation>2199	5	2199</citation>
	<citation>2199	5	2199</citation>
	<citation>2199	5	2199</citation>
	</citations>
	</document>
	<document id= '2198'>
	<title>Introduction to "Feature Analysis of Generalized Data Base Management Systems"</title>
	<abstract>This paper is a separately published introduction to a main report which analyzes the features  of generalized data base management systems.  This introduction gives a review of the current state of  the art in these systems and discusses the differences and similarities between capabilities found in  host language systems and those found in self-contained systems.  After some discussion of the problems  of data independence and binding,the four user levels are identified and described.  Technical problems  facing future designers are described.  The first of these is that of handling existing stored data and  the next is that of providing more complex data structures than those already available in conventional  programming languages.  The problem of high level interrogation and update functions acting on network  structures is mentioned, followed by a discussion of the problem of catering to a high volume of transactions  initiated from terminals by parametric users-the lowest level of user.  The use of Cobol as a basis for  further development work is considered at some length with respect to data structures, host language  capabilities, and self-contained capabilities.  This section also assesses the effect of the Data Base  Task Group proposals.  The final section outlines the ten major topics in the main body of the full report.</abstract>
	<conference>CACM May, 1971</conference>
	<authors>
	</authors>
	<keywords>data base management systems, programming languages, data structures, storage structures, information  retrieval, transaction processing</keywords>
	<version>3.5 3.70 3.72 3.73 3.74 4.29</version>
	<location>CA710501 JB February 3, 1978  3:18 PM</location>
	<citations>
	<citation>2198	5	2198</citation>
	<citation>2198	5	2198</citation>
	<citation>2198	5	2198</citation>
	<citation>2452	5	2198</citation>
	<citation>2882	5	2198</citation>
	<citation>849	6	2198</citation>
	<citation>1936	6	2198</citation>
	<citation>1976	6	2198</citation>
	<citation>2198	6	2198</citation>
	<citation>2198	6	2198</citation>
	<citation>2452	6	2198</citation>
	<citation>627	6	2198</citation>
	</citations>
	</document>
	<document id= '2197'>
	<title>The Merit of Regional Computing Networks</title>
	<abstract>One of the suggested means for stimulating the spread of computing capabilities in institutions  of higher learning is through the construction of regional computing networks.  One such network has  been constructed in the San Francisco Bay Area by Stanford University.  This paper reports upon the lessons  learned from the operation of the network over the past two years.  A major impact of the network was  not so much the computer power delivered to the schools as the awakening of computing awareness and the  fostering of capability development at these schools. The expertise and assistance from the central facility as well as the sharing of ideas among the participants were other important benefits.  Both the quality  and variety of services provided by the central facility were found to play a key role in the effectiveness  of the network.  A regional network brings many benefits and should not be judged as a purveyor of raw  computer power alone.</abstract>
	<conference>CACM May, 1971</conference>
	<authors>
	<author>Nielsen, N. R.</author>
	</authors>
	<keywords>computer sharing, computer utility, cooperative networks, curriculum development, educational computing,  network computing, regional computing networks, remote computing, shared computing</keywords>
	<version>1.52 2.11</version>
	<location>CA710502 JB February 3, 1978  3:17 PM</location>
	<citations>
	<citation>2197	5	2197</citation>
	<citation>2197	5	2197</citation>
	<citation>2197	5	2197</citation>
	</citations>
	</document>
	<document id= '2196'>
	<title>A Man-Machine Approach Toward Solving the Traveling Salesman Problem</title>
	<abstract>The traveling salesman problem belongs to an important class of scheduling and routing problems.   It is also a subproblem in solving others, such as the warehouse distribution problem.  It has been  attacked by many mathematical methods with but meager success.  Only for special forms of the problem  or for problems with a moderate number of points can it be solved exactly, even if very large amounts  of computer time are used.  Heuristic procedures have been proposed and tested with only slightly better  results.  This paper describes a computer aided heuristic technique which uses only a modest amount of  computer time in real-time to solve large (100-200) point problems.  This technique takes advantage of  both the computer's and the human's problem-solving abilities.  The computer is not asked to solve the  problem in a brute force way as in many of today's heuristics, but it is asked to organize the data for  the human so that the human can solve the problem easily.  The technique used in this paper seems to  point to new directions in the field of man-machine interaction and in the field of artificial intelligence.</abstract>
	<conference>CACM May, 1971</conference>
	<authors>
	<author>Krolak, P.</author>
	<author>Felts, W.</author>
	<author>Marble, G.</author>
	</authors>
	<keywords>heuristic procedures, computer-aided heuristic technique, man-machine interaction, artificial intelligence,  assignment problem, mask of the assignment, rubber band tour generator, interaction process, traveling  salesman problem</keywords>
	<version>3.57 3.66 5.30</version>
	<location>CA710503 JB February 3, 1978  3:00 PM</location>
	<citations>
	<citation>2196	5	2196</citation>
	<citation>2196	5	2196</citation>
	<citation>2196	5	2196</citation>
	</citations>
	</document>
	<document id= '2195'>
	<title>On the Optimal Detection of Curves in Noisy Pictures</title>
	<abstract>A technique for recognizing systems of lines is presented.  In this technique the heuristic  of the problem is not embedded in the recognition algorithm but is expressed in a figure of merit.    A multistage decision process is then able to recognize in the input picture the optimal system of lines  according to the given figure of merit.  Due to the global approach, greater flexibility and adequacy  in the particular problem is achieved.  The relation between the structure of the figure of merit and  the complexity of the optimization process is then discussed.  The method described is suitable for parallel  processing because the operations relative to each state can be computed in parallel, and the number of stages is equal to the length N of the curves (or to log2 N if the approximate method is used).</abstract>
	<conference>CACM May, 1971</conference>
	<authors>
	<author>Montanari, U.</author>
	</authors>
	<keywords>picture processing, picture recognition, picture description, curve detection, line detection,  edge detection,optimal detection, heuristic methods, global recognition, parallel processing, dynamic  programming, interaction graph, secondary optimization problem</keywords>
	<version>3.63 3.66 5.42</version>
	<location>CA710504 JB February 3, 1978  2:49 PM</location>
	<citations>
	<citation>1663	4	2195</citation>
	<citation>2195	4	2195</citation>
	<citation>2679	4	2195</citation>
	<citation>1190	5	2195</citation>
	<citation>2195	5	2195</citation>
	<citation>2195	5	2195</citation>
	<citation>2195	5	2195</citation>
	<citation>2883	5	2195</citation>
	<citation>2195	6	2195</citation>
	</citations>
	</document>
	<document id= '2194'>
	<title>How To Keep the Addresses Short</title>
	<abstract>An algorithm is presented for minimizing the sum of the lengths of the blocks of coding produced  by an assembler or compiler when (1) the length of each computer instruction is assumed to be either  "long" or "short" ("long," if the memory location addressed is more than a predetermined distance from  the current location; "short," otherwise), and (2) there are blocks of instructions whose beginnings  (origins) are separated by prespecified amounts. For example, some computers permit either 8-bit addressing  (interpreted relative to the location counter) or full 16-bit addressing of all of memory.  When assembling  or compiling two or more blocks of instructions which have many mutual references in such a computer,  there is no simple iterative procedure for keeping as many of the addresses short as possible.  This  paper demonstrates that a wide class of problems of this type can be formulated as covering problems  solvable by means of elementary arithmetic operations on the column vectors of a ternary matrix.</abstract>
	<conference>CACM May, 1971</conference>
	<authors>
	<author>Richards, D. L.</author>
	</authors>
	<keywords>addressing, assembler, covering problem, integer programming, variable-length addressing</keywords>
	<version>4.11 4.12 4.21 5.41</version>
	<location>CA710505 JB February 3, 1978  2:40 PM</location>
	<citations>
	<citation>2194	5	2194</citation>
	<citation>2194	5	2194</citation>
	<citation>2194	5	2194</citation>
	<citation>2858	5	2194</citation>
	<citation>3110	5	2194</citation>
	<citation>2194	6	2194</citation>
	<citation>2194	6	2194</citation>
	<citation>2629	6	2194</citation>
	<citation>2858	6	2194</citation>
	</citations>
	</document>
	<document id= '2193'>
	<title>On Implementation of Label Variables</title>
	<abstract>Variables of label mode are conventionally implemented with a technique which fails to trap  certain programming errors.  Fine-grained calendar clocks have recently become available; these allow  implementation of label variables via a new technique which traps all programming errors of this variety.</abstract>
	<conference>CACM May, 1971</conference>
	<authors>
	<author>Fenichel, R. R.</author>
	</authors>
	<keywords>labels, compiler, interpreter, go to, transfer</keywords>
	<version>4.22</version>
	<location>CA710506 JB February 3, 1978  2:31 PM</location>
	<citations>
	<citation>2193	4	2193</citation>
	<citation>2193	4	2193</citation>
	<citation>2319	4	2193</citation>
	<citation>2326	4	2193</citation>
	<citation>2477	4	2193</citation>
	<citation>2541	4	2193</citation>
	<citation>2594	4	2193</citation>
	<citation>2894	4	2193</citation>
	<citation>3004	4	2193</citation>
	<citation>2016	5	2193</citation>
	<citation>2193	5	2193</citation>
	<citation>2193	5	2193</citation>
	<citation>2193	5	2193</citation>
	<citation>3101	5	2193</citation>
	<citation>3186	5	2193</citation>
	<citation>2138	6	2193</citation>
	<citation>2193	6	2193</citation>
	<citation>2438	6	2193</citation>
	<citation>3185	6	2193</citation>
	</citations>
	</document>
	<document id= '2192'>
	<title>Another Recursion Induction Principle</title>
	<abstract>An inductive method for proving things about recursively defined functions is described.  It  is shown to be useful for proving partial functions equivalent and thus applicable in proofs about interpreters  for programming languages.</abstract>
	<conference>CACM May, 1971</conference>
	<authors>
	</authors>
	<keywords>recursion, induction, correctness, proofs, compiler correctness</keywords>
	<version>4.13 4.2 5.24</version>
	<location>CA710507 JB February 3, 1978  2:27 PM</location>
	<citations>
	<citation>2192	5	2192</citation>
	<citation>2192	5	2192</citation>
	<citation>2192	5	2192</citation>
	<citation>2326	5	2192</citation>
	<citation>2457	5	2192</citation>
	<citation>2842	5	2192</citation>
	<citation>2903	5	2192</citation>
	<citation>1303	6	2192</citation>
	<citation>1323	6	2192</citation>
	<citation>210	6	2192</citation>
	<citation>1834	6	2192</citation>
	<citation>2060	6	2192</citation>
	<citation>2148	6	2192</citation>
	<citation>2192	6	2192</citation>
	<citation>2192	6	2192</citation>
	<citation>2192	6	2192</citation>
	<citation>2192	6	2192</citation>
	<citation>2326	6	2192</citation>
	<citation>3184	6	2192</citation>
	<citation>3186	6	2192</citation>
	</citations>
	</document>
	<document id= '2191'>
	<title>ALGORITHM 410 Partial Sorting [M1]</title>
	<conference>CACM May, 1971</conference>
	<authors>
	<author>Chambers, J. M.</author>
	</authors>
	<keywords>sorting, partial sorting order statistics</keywords>
	<version>5.11 5.13</version>
	<location>CA710508 JB February 3, 1978  2:23 PM</location>
	<citations>
	<citation>1175	4	2191</citation>
	<citation>1919	4	2191</citation>
	<citation>1919	4	2191</citation>
	<citation>1969	4	2191</citation>
	<citation>1997	4	2191</citation>
	<citation>2191	4	2191</citation>
	<citation>2191	4	2191</citation>
	<citation>2388	4	2191</citation>
	<citation>2388	4	2191</citation>
	<citation>2679	4	2191</citation>
	<citation>2783	4	2191</citation>
	<citation>2784	4	2191</citation>
	<citation>3054	4	2191</citation>
	<citation>3054	4	2191</citation>
	<citation>3121	4	2191</citation>
	<citation>3121	4	2191</citation>
	<citation>864	4	2191</citation>
	<citation>308	5	2191</citation>
	<citation>309	5	2191</citation>
	<citation>2191	5	2191</citation>
	<citation>2191	5	2191</citation>
	<citation>2191	5	2191</citation>
	</citations>
	</document>
	<document id= '2190'>
	<citations>
	<citation>2190	4	2190</citation>
	<citation>2190	4	2190</citation>
	<citation>1372	5	2190</citation>
	<citation>1849	5	2190</citation>
	<citation>2190	5	2190</citation>
	<citation>2190	5	2190</citation>
	<citation>2190	5	2190</citation>
	</citations>
	<title>Function Minimization</title>
	<conference>CACM May, 1971</conference>
	<authors>
	<author>House, F. R.</author>
	</authors>
	<location>CA710510 JB February 3, 1978  1:57 PM</location>
	</document>
	<document id= '2189'>
	<title>Generation of Rosary Permutations Expressed in Hamiltonian Circuits</title>
	<abstract>Systematic generation of a specific class of permutations fundamental to scheduling problems  is described.  In a nonoriented complete graph with n vertices, Hamitonian circuits equivalent to .5(n  - 1)! specific permutations of n elements, termed rosary permutations, can be defined.  Each of them  corresponds to two circular permutations which mirror-image each other, and is generated successively  by a number system covering 3*4*...*(n-1) sets of edges.  Every set of edges {E[k]}, 1 &amp;lt;= E[k] &amp;lt;= k,  3 &amp;lt;= k &amp;lt;= (n-1) is determined recursively by constructing a Hamiltonian circuit with k vertices from  a Hamiltonian circuit with k-1 vertices, starting with the Hamiltonian circuit of 3 vertices.  The basic  operation consists of transposition of a pair of adjacent vertices where the position of the pair in  the permutation is determined by {E[k]}.  Two algorithms treating the same example for five vertices  are presented.  It is very easy to derive all possible n! permutations  from the .5(n - 1 )! rosary permutations  be cycling the permutations and by taking them in the reverse order-procedures which can be performed  fairly efficiently by computer.</abstract>
	<conference>CACM June, 1971</conference>
	<authors>
	<author>Harada, K.</author>
	</authors>
	<keywords>permutation, graph theory, scheduling, combinatorial algebra</keywords>
	<version>5.32 5.39</version>
	<location>CA710601 JB February 3, 1978  1:55 PM</location>
	<citations>
	<citation>2044	4	2189</citation>
	<citation>2087	4	2189</citation>
	<citation>2189	4	2189</citation>
	<citation>2189	4	2189</citation>
	<citation>2189	4	2189</citation>
	<citation>2189	4	2189</citation>
	<citation>2417	4	2189</citation>
	<citation>2505	4	2189</citation>
	<citation>2874	4	2189</citation>
	<citation>2908	4	2189</citation>
	<citation>3188	4	2189</citation>
	<citation>1594	5	2189</citation>
	<citation>2087	5	2189</citation>
	<citation>2189	5	2189</citation>
	<citation>2189	5	2189</citation>
	<citation>2189	5	2189</citation>
	<citation>2292	5	2189</citation>
	<citation>2505	5	2189</citation>
	<citation>521	5	2189</citation>
	<citation>3191	5	2189</citation>
	<citation>2189	6	2189</citation>
	<citation>2189	6	2189</citation>
	<citation>2292	6	2189</citation>
	<citation>521	6	2189</citation>
	</citations>
	</document>
	<document id= '2188'>
	<title>An Approach to the Optimum Design of Computer Graphics Systems</title>
	<abstract>Display system designers are faced with the difficult task of selecting major subsystems in  an intelligent way.  Each subsystem is chosen from large numbers of alternatives; the selection is based  on considerations such as system response time, system cost, and the distribution of data storage and  processing between the graphics processor and its supporting data processing system.  The work reported  here develops an objective, quantitative design procedure and helps give a better understanding of now  to  configure display systems.  This is accomplished by means of a mathematical model of a computer driven  graphics system.  The parameters of the model are functions of the capabilities of the graphics hardware  and of the computational requirements of the graphics application.  The model can be analyzed using numerical  queueing analysis or simulation to obtain an average response time prediction.  By combining the model  with an optimization, the best graphics system configuration, subject to a cost constraint, is found  for several applications.  The optimum configurations are in turn used to find general display system  design guidelines.</abstract>
	<conference>CACM June, 1971</conference>
	<authors>
	<author>Foley, J. D.</author>
	</authors>
	<keywords>design guidelines, graphic display systems, mathematical model, optimum system design, queueing  model</keywords>
	<version>3.8 6.22 6.35</version>
	<location>CA710602 JB February 3, 1978  10:26 AM</location>
	<citations>
	<citation>1805	4	2188</citation>
	<citation>1846	4	2188</citation>
	<citation>1892	4	2188</citation>
	<citation>2188	4	2188</citation>
	<citation>2218	4	2188</citation>
	<citation>2317	4	2188</citation>
	<citation>1572	5	2188</citation>
	<citation>2188	5	2188</citation>
	<citation>2188	5	2188</citation>
	<citation>2188	5	2188</citation>
	<citation>2319	5	2188</citation>
	<citation>1408	6	2188</citation>
	<citation>1719	6	2188</citation>
	<citation>1749	6	2188</citation>
	<citation>1751	6	2188</citation>
	<citation>2016	6	2188</citation>
	<citation>2017	6	2188</citation>
	<citation>2080	6	2188</citation>
	<citation>2188	6	2188</citation>
	<citation>2203	6	2188</citation>
	<citation>2204	6	2188</citation>
	</citations>
	</document>
	<document id= '2187'>
	<title>Computer Science: A Conceptual Framework for Curriculum Planning</title>
	<abstract>Two views of computer science are considered: a global view which attempts to capture broad  characteristics of the field and its relationships to other fields, and a local view which focuses on  the inner structure of the field.  This structure is presented in terms of the kinds of knowledge, problems,  and activities that exist within the discipline, as well as the relations between them.  An approach  to curriculum planning in computer science is presented which is guided by the structure of the field,  by the fact that change is an important feature of the situation, and by the expectation that computer science will continue to increase its working contacts with other disciplines.</abstract>
	<conference>CACM June, 1971</conference>
	<authors>
	<author>Amarel, S.</author>
	</authors>
	<keywords>computer science, curriculum planning, education</keywords>
	<version>1.0 1.52</version>
	<location>CA710603 JB February 3, 1978  10:17 AM</location>
	<citations>
	<citation>1665	4	2187</citation>
	<citation>1768	4	2187</citation>
	<citation>1787	4	2187</citation>
	<citation>1805	4	2187</citation>
	<citation>1824	4	2187</citation>
	<citation>1825	4	2187</citation>
	<citation>1828	4	2187</citation>
	<citation>1836	4	2187</citation>
	<citation>1854	4	2187</citation>
	<citation>1861	4	2187</citation>
	<citation>2015	4	2187</citation>
	<citation>2110	4	2187</citation>
	<citation>2127	4	2187</citation>
	<citation>2187	4	2187</citation>
	<citation>2187	4	2187</citation>
	<citation>2317	4	2187</citation>
	<citation>2545	4	2187</citation>
	<citation>2698	4	2187</citation>
	<citation>2733	4	2187</citation>
	<citation>1748	5	2187</citation>
	<citation>1781	5	2187</citation>
	<citation>2187	5	2187</citation>
	<citation>2187	5	2187</citation>
	<citation>2187	5	2187</citation>
	<citation>3003	5	2187</citation>
	<citation>1659	6	2187</citation>
	<citation>1678	6	2187</citation>
	<citation>1927	6	2187</citation>
	<citation>1945	6	2187</citation>
	<citation>2097	6	2187</citation>
	<citation>2147	6	2187</citation>
	<citation>2163	6	2187</citation>
	<citation>2187	6	2187</citation>
	<citation>2329	6	2187</citation>
	<citation>2345	6	2187</citation>
	<citation>2367	6	2187</citation>
	<citation>2407	6	2187</citation>
	<citation>2478	6	2187</citation>
	<citation>2479	6	2187</citation>
	<citation>2480	6	2187</citation>
	<citation>2538	6	2187</citation>
	</citations>
	</document>
	<document id= '2186'>
	<title>Numerical Properties of the Ritz-Trefftz Algorithm for Optimal Control</title>
	<abstract>In this paper the Ritz-Trefftz algorithm is applied to the computer solution of the state regulator  problem.  The algorithm represents a modification of the Ritz direct method and is designed to improve  the speed of solution and the storage requirements to the point where real-time implementation becomes  feasible.  The modification is shown to be more stable computationally than the traditional Ritz approach.   The first concern of the paper is to describe the algorithm and establish its properties as a valid  and useful numerical technique.  In particular such useful properties as definiteness and reasonableness  of condition are established for the method.  The second part of the paper is devoted to a comparison  of the new techniques with the standard procedure of numerically integrating a matrix Riccati equation  to determine a feedback matrix.  The new technique is shown to be significantly faster for comparable  accuracy.</abstract>
	<conference>CACM June, 1971</conference>
	<authors>
	<author>Johnson, O. G.</author>
	</authors>
	<keywords>splines, regulator problem, control theory, numerical analysis</keywords>
	<version>5.1</version>
	<location>CA710604 JB February 3, 1978  10:12 AM</location>
	<citations>
	<citation>2186	5	2186</citation>
	<citation>2186	5	2186</citation>
	<citation>2186	5	2186</citation>
	</citations>
	</document>
	<document id= '2185'>
	<title>A Note on Compiling Fixed Point Binary Multiplications</title>
	<abstract>An algorithm is developed for compiling, as a sequence of shifts, additions,and subtractions,  many fixed point binary multiplications involving a constant.  The most significant characteristics of  the algorithm are the simplicity of the test which determines if the algorithm should be applied and  the degree to which it "suggests" efficient object code.</abstract>
	<conference>CACM June, 1971</conference>
	<authors>
	<author>Glaswin, H. T.</author>
	</authors>
	<keywords>compiling multiplications, fixed point arithmetic</keywords>
	<version>4.12</version>
	<location>CA710605 JB February 3, 1978  10:04 AM</location>
	<citations>
	<citation>2185	5	2185</citation>
	<citation>2185	5	2185</citation>
	<citation>2185	5	2185</citation>
	<citation>2296	5	2185</citation>
	<citation>2952	5	2185</citation>
	<citation>142	6	2185</citation>
	<citation>162	6	2185</citation>
	<citation>163	6	2185</citation>
	<citation>192	6	2185</citation>
	<citation>2185	6	2185</citation>
	<citation>2185	6	2185</citation>
	<citation>2727	6	2185</citation>
	</citations>
	</document>
	<document id= '2184'>
	<title>On the Meaning of Names in Programming Systems</title>
	<abstract>It is assumed that there is a similarity of function between the data names of a programming  language and the file names of an operating system.  The two functions are discussed in terms of the  same basic concepts in order to identify the extent to which they overlap. It is suggested that there  is some similarity between the idea of a file directory and a storable object of type context.  Manipulations  with contexts are then discussed at length.  It is noted that there is a simple extension of Church's  Lambda notation that deals nicely with these ideas of context manipulation.  Whereas a function can be  regarded as the abstraction based upon the first two terms of the expression Lambda(name list)(expression)(value list),  it is found that a context can be viewed as an abstraction based upon the first two terms in the equivalent  expression Mu(name list)(value list)(expression).</abstract>
	<conference>CACM July, 1971</conference>
	<authors>
	<author>Fraser, A. G.</author>
	</authors>
	<keywords>file, operating system, programming language, functions, names, context, file directory, file dictionary,  lambda calculus, theory of programming</keywords>
	<version>3.73 4.22 4.39 5.23 5.24</version>
	<location>CA710606 JB February 3, 1978  9:58 AM</location>
	<citations>
	<citation>2184	5	2184</citation>
	<citation>2184	5	2184</citation>
	<citation>2184	5	2184</citation>
	</citations>
	</document>
	<document id= '2183'>
	<title>Binary Summation</title>
	<conference>CACM July, 1971</conference>
	<authors>
	<author>Walker, R. J.</author>
	</authors>
	<keywords>summation, binary summation, floating-point addition, round-off errors</keywords>
	<version>5.11</version>
	<location>CA710607 JB February 3, 1978  9:50 AM</location>
	<citations>
	<citation>2183	4	2183</citation>
	<citation>2282	4	2183</citation>
	<citation>2049	5	2183</citation>
	<citation>2183	5	2183</citation>
	<citation>2183	5	2183</citation>
	<citation>2183	5	2183</citation>
	</citations>
	</document>
	<document id= '2182'>
	<title>Interrupt Driven Programming</title>
	<conference>CACM July, 1971</conference>
	<authors>
	<author>Zelkowitz, M.</author>
	</authors>
	<keywords>interrupts, supervisors, monitors, debugging, parallel processing, associative memories, microprogramming</keywords>
	<version>3.51 4.32 4.42</version>
	<location>CA710608 JB February 3, 1978  9:49 AM</location>
	<citations>
	<citation>2182	4	2182</citation>
	<citation>2534	4	2182</citation>
	<citation>1959	5	2182</citation>
	<citation>2182	5	2182</citation>
	<citation>2182	5	2182</citation>
	<citation>2182	5	2182</citation>
	<citation>2497	5	2182</citation>
	<citation>2534	5	2182</citation>
	<citation>830	6	2182</citation>
	<citation>1471	6	2182</citation>
	<citation>1787	6	2182</citation>
	<citation>1959	6	2182</citation>
	<citation>1973	6	2182</citation>
	<citation>2111	6	2182</citation>
	<citation>2182	6	2182</citation>
	<citation>2182	6	2182</citation>
	<citation>799	6	2182</citation>
	</citations>
	</document>
	<document id= '2181'>
	<title>The State of Computer Oriented Curricula in Business Schools 1970</title>
	<abstract>The ACM Committee on Computer Education for Management, supported by a National Science Foundation  Grant, is established to appraise the state of the art and to develop a series of recommendations for  improving computer education for management.  To provide the Committee with material for its study of  curricular needs, five regional meetings in the United States were held in 1970, at each of which a broad  cross section of invited academicians and practitioners considered the state of curricula in business  schools.  Three topics were covered: curricula for the general manager; computer-related material in  required and functional courses; and curricula for students concentrating on computer-based information  systems.  An analysis of the minutes of the meetings revealed a common set of experiences which raised  similar pedagogic and economic issues.  This presentation gives a summary of the discussions; a condensation of the pedagogic and substantive concerns raised; and consideration of the resource allocation issues  involved.  Preliminary to the Committee's recommendations for improving computer education for management,  this report has been prepared to provide the participants and the administrators of their institutions  with background information for the ongoing task of course development.  Chairman of the ten-man Committee  is Daniel Teichroew (The University of Michigan).</abstract>
	<conference>CACM July, 1971</conference>
	<authors>
	<author>McKenney, J. L.</author>
	<author>Tonge, F. M.</author>
	</authors>
	<keywords>university programs, management education, curriculum design, business administration curricula,  graduate business school resource planning</keywords>
	<version>1.52 3.5</version>
	<location>CA710701 JB February 3, 1978  9:47 AM</location>
	<citations>
	<citation>2163	5	2181</citation>
	<citation>2181	5	2181</citation>
	<citation>2181	5	2181</citation>
	<citation>2181	5	2181</citation>
	<citation>2345	5	2181</citation>
	<citation>2407	5	2181</citation>
	<citation>1720	6	2181</citation>
	<citation>1771	6	2181</citation>
	<citation>1771	6	2181</citation>
	<citation>1927	6	2181</citation>
	<citation>2163	6	2181</citation>
	<citation>2181	6	2181</citation>
	<citation>2181	6	2181</citation>
	<citation>2181	6	2181</citation>
	<citation>2345	6	2181</citation>
	</citations>
	</document>
	<document id= '2180'>
	<title>A Programmer Training Project</title>
	<abstract>A project is described whose purpose is to train selected black residents of the Albany-Schenectady  area in computer programming and arrange for jobs for them in the computer field. Both the organization  and curriculum of the course are discussed.</abstract>
	<conference>CACM July, 1971</conference>
	<authors>
	<author>Bernstein, A. J.</author>
	</authors>
	<keywords>programmer training, job opportunities, Fortran</keywords>
	<version>1.59</version>
	<location>CA710702 JB February 3, 1978  9:36 AM</location>
	<citations>
	<citation>2180	5	2180</citation>
	<citation>2180	5	2180</citation>
	<citation>2180	5	2180</citation>
	</citations>
	</document>
	<document id= '2179'>
	<title>Simple LR(k) Grammars</title>
	<abstract>A class of context-free grammars, called the "Simple LR(k)" or SLR(k) grammars is defined.   This class has been shown to include weak precedence and simple precedence grammars as proper subsets.   How to construct parsers for the SLR(k) grammars is also shown.  These parser-construction techniques  are extendible to cover all of the LR(k) grammars of Knuth; they have been implemented and by direct  comparison proved to be superior to precedence techniques, not only in the range of grammars covered,  but also in the speed of parser construction and in the size and speed of the resulting parsers.</abstract>
	<conference>CACM July, 1971</conference>
	<authors>
	<author>DeRemer, F. L.</author>
	</authors>
	<keywords>context-free grammar, LR(k) grammar, precedence grammar, syntactic analysis, parsing algorithm,  parser, finite-state machine, deterministic pushdown automaton</keywords>
	<version>4.12 5.22 5.23</version>
	<location>CA710703 JB February 3, 1978  9:31 AM</location>
	<citations>
	<citation>1086	4	2179</citation>
	<citation>1132	4	2179</citation>
	<citation>1234	4	2179</citation>
	<citation>1263	4	2179</citation>
	<citation>1265	4	2179</citation>
	<citation>1270	4	2179</citation>
	<citation>1323	4	2179</citation>
	<citation>1358	4	2179</citation>
	<citation>1379	4	2179</citation>
	<citation>1379	4	2179</citation>
	<citation>1380	4	2179</citation>
	<citation>1453	4	2179</citation>
	<citation>1464	4	2179</citation>
	<citation>1484	4	2179</citation>
	<citation>1491	4	2179</citation>
	<citation>1498	4	2179</citation>
	<citation>1542	4	2179</citation>
	<citation>1613	4	2179</citation>
	<citation>1614	4	2179</citation>
	<citation>1683	4	2179</citation>
	<citation>1693	4	2179</citation>
	<citation>1693	4	2179</citation>
	<citation>1781	4	2179</citation>
	<citation>1781	4	2179</citation>
	<citation>1781	4	2179</citation>
	<citation>1787	4	2179</citation>
	<citation>1825	4	2179</citation>
	<citation>1836	4	2179</citation>
	<citation>1836	4	2179</citation>
	<citation>1860	4	2179</citation>
	<citation>1945	4	2179</citation>
	<citation>1945	4	2179</citation>
	<citation>1989	4	2179</citation>
	<citation>2015	4	2179</citation>
	<citation>2060	4	2179</citation>
	<citation>2060	4	2179</citation>
	<citation>2060	4	2179</citation>
	<citation>2061	4	2179</citation>
	<citation>2061	4	2179</citation>
	<citation>2061	4	2179</citation>
	<citation>2083	4	2179</citation>
	<citation>2082	4	2179</citation>
	<citation>2091	4	2179</citation>
	<citation>2091	4	2179</citation>
	<citation>2152	4	2179</citation>
	<citation>2178	4	2179</citation>
	<citation>2179	4	2179</citation>
	<citation>2179	4	2179</citation>
	<citation>2179	4	2179</citation>
	<citation>2179	4	2179</citation>
	<citation>2179	4	2179</citation>
	<citation>2179	4	2179</citation>
	<citation>2252	4	2179</citation>
	<citation>2325	4	2179</citation>
	<citation>2341	4	2179</citation>
	<citation>2340	4	2179</citation>
	<citation>2356	4	2179</citation>
	<citation>2423	4	2179</citation>
	<citation>2546	4	2179</citation>
	<citation>2546	4	2179</citation>
	<citation>2546	4	2179</citation>
	<citation>2603	4	2179</citation>
	<citation>2645	4	2179</citation>
	<citation>2652	4	2179</citation>
	<citation>2684	4	2179</citation>
	<citation>2698	4	2179</citation>
	<citation>2698	4	2179</citation>
	<citation>2698	4	2179</citation>
	<citation>2708	4	2179</citation>
	<citation>2708	4	2179</citation>
	<citation>2824	4	2179</citation>
	<citation>2842	4	2179</citation>
	<citation>2921	4	2179</citation>
	<citation>2929	4	2179</citation>
	<citation>2934	4	2179</citation>
	<citation>2982	4	2179</citation>
	<citation>2986	4	2179</citation>
	<citation>3045	4	2179</citation>
	<citation>3045	4	2179</citation>
	<citation>3069	4	2179</citation>
	<citation>3093	4	2179</citation>
	<citation>3154	4	2179</citation>
	<citation>669	4	2179</citation>
	<citation>679	4	2179</citation>
	<citation>691	4	2179</citation>
	<citation>761	4	2179</citation>
	<citation>949	4	2179</citation>
	<citation>989	4	2179</citation>
	<citation>1477	5	2179</citation>
	<citation>1491	5	2179</citation>
	<citation>1825	5	2179</citation>
	<citation>2015	5	2179</citation>
	<citation>2110	5	2179</citation>
	<citation>2179	5	2179</citation>
	<citation>2179	5	2179</citation>
	<citation>2179	5	2179</citation>
	<citation>2733	5	2179</citation>
	<citation>2986	5	2179</citation>
	<citation>3093	5	2179</citation>
	<citation>3094	5	2179</citation>
	<citation>3184	5	2179</citation>
	<citation>1265	6	2179</citation>
	<citation>1491	6	2179</citation>
	<citation>1491	6	2179</citation>
	<citation>1683	6	2179</citation>
	<citation>1781	6	2179</citation>
	<citation>1836	6	2179</citation>
	<citation>2179	6	2179</citation>
	<citation>2179	6	2179</citation>
	<citation>2179	6	2179</citation>
	<citation>2179	6	2179</citation>
	<citation>2340	6	2179</citation>
	<citation>2423	6	2179</citation>
	<citation>2645	6	2179</citation>
	<citation>2708	6	2179</citation>
	<citation>2786	6	2179</citation>
	<citation>680	6	2179</citation>
	<citation>799	6	2179</citation>
	</citations>
	</document>
	<document id= '2178'>
	<title>A Language Extension for Graph Processing and Its Formal Semantics</title>
	<abstract>A simple programming language "extension," Graspe, for processing directed graphs is defined.   Graspe consists of a type of directed graph data structure and a set of primitive operations for manipulating  these structures.  Graspe may be most easily implemented by embedding it in a host language.  Emphasis  is placed both on Graspe itself and on its method of definition.  Commonly, the definition of a language  involves definition of the syntactic elements and explanation of the meaning to be assigned them (the  semantics).  The definition of Graspe here is solely in terms of its semantics; that is, the data structures  and operations are defined precisely but without assignment of a particular syntactic representation.   Only when the language is implemented is assignment of an explicit syntax necessary.  An example of  an implementation of Graspe embedded in Lisp is given as an illustration.  The advantages and disadvantages  of the definition of a language in terms of its semantics are discussed.</abstract>
	<conference>CACM July, 1971</conference>
	<authors>
	<author>Pratt, T. W.</author>
	<author>Friedman, D. P.</author>
	</authors>
	<keywords>graph processing, programming language, formal semantics, directed graph, Lisp, network, data structure,  flowchart, syntax, language definition</keywords>
	<version>4.20 4.22 5.23 5.24 5.32</version>
	<location>CA710704 JB February 3, 1978  9:24 AM</location>
	<citations>
	<citation>1086	4	2178</citation>
	<citation>1132	4	2178</citation>
	<citation>1234	4	2178</citation>
	<citation>1263	4	2178</citation>
	<citation>1265	4	2178</citation>
	<citation>1270	4	2178</citation>
	<citation>1323	4	2178</citation>
	<citation>1358	4	2178</citation>
	<citation>1379	4	2178</citation>
	<citation>1380	4	2178</citation>
	<citation>1453	4	2178</citation>
	<citation>1464	4	2178</citation>
	<citation>1469	4	2178</citation>
	<citation>1484	4	2178</citation>
	<citation>1486	4	2178</citation>
	<citation>1491	4	2178</citation>
	<citation>1491	4	2178</citation>
	<citation>1498	4	2178</citation>
	<citation>1613	4	2178</citation>
	<citation>1614	4	2178</citation>
	<citation>1781	4	2178</citation>
	<citation>1781	4	2178</citation>
	<citation>1781	4	2178</citation>
	<citation>1825	4	2178</citation>
	<citation>1860	4	2178</citation>
	<citation>2083	4	2178</citation>
	<citation>2178	4	2178</citation>
	<citation>2178	4	2178</citation>
	<citation>2178	4	2178</citation>
	<citation>2178	4	2178</citation>
	<citation>2178	4	2178</citation>
	<citation>2179	4	2178</citation>
	<citation>2252	4	2178</citation>
	<citation>2325	4	2178</citation>
	<citation>2326	4	2178</citation>
	<citation>2326	4	2178</citation>
	<citation>2341	4	2178</citation>
	<citation>2396	4	2178</citation>
	<citation>2470	4	2178</citation>
	<citation>2546	4	2178</citation>
	<citation>2561	4	2178</citation>
	<citation>2645	4	2178</citation>
	<citation>2652	4	2178</citation>
	<citation>2684	4	2178</citation>
	<citation>2684	4	2178</citation>
	<citation>2684	4	2178</citation>
	<citation>2842	4	2178</citation>
	<citation>2929	4	2178</citation>
	<citation>2934	4	2178</citation>
	<citation>3044	4	2178</citation>
	<citation>3069	4	2178</citation>
	<citation>669	4	2178</citation>
	<citation>679	4	2178</citation>
	<citation>691	4	2178</citation>
	<citation>761	4	2178</citation>
	<citation>949	4	2178</citation>
	<citation>989	4	2178</citation>
	<citation>1303	5	2178</citation>
	<citation>1323	5	2178</citation>
	<citation>2059	5	2178</citation>
	<citation>2127	5	2178</citation>
	<citation>2178	5	2178</citation>
	<citation>2178	5	2178</citation>
	<citation>2178	5	2178</citation>
	<citation>3184	5	2178</citation>
	</citations>
	</document>
	<document id= '2177'>
	<title>An Algorithm for the Blocks and Cutnodes of a Graph</title>
	<abstract>An efficient method is presented for finding blocks and cutnodes of an arbitrary undirected  graph.  The graph may be represented either (i) as an ordered list of edges or (ii) as a packed adjacency  matrix.  If w denotes the word length of the machine employed, the storage (in machine words) required  for a graph with n nodes and m edges increases essentially as 2(m+n) in case (i), or (n^2)/win case  (ii).  A spanning tree with labeled edges is grown, two edges finally bearing different labels if and  only if they belong to different blocks.  For both representations the time required to analyze a graph  on n nodes increases as n^G where G depends on the type of graph, 1 &amp;lt;= G &amp;lt;= 2, and both bounds are attained.   Values of G are derived for each of several suitable families of test graphs, generated by an extension  of the web grammar approach.  The algorithm is compared in detail with that proposed by Read for which  1 &amp;lt;= G &amp;lt;= 3.</abstract>
	<conference>CACM July, 1971</conference>
	<authors>
	<author>Paton, K.</author>
	</authors>
	<keywords>algorithm, block, block-cutpoint-tree, cutnode, fundamental cycle set, graph, lobe, lobe decomposition  graph, separable, spanning tree, web grammar</keywords>
	<version>5.32</version>
	<location>CA710705 JB February 3, 1978  8:58 AM</location>
	<citations>
	<citation>1961	4	2177</citation>
	<citation>2177	4	2177</citation>
	<citation>2763	4	2177</citation>
	<citation>1847	5	2177</citation>
	<citation>2177	5	2177</citation>
	<citation>2177	5	2177</citation>
	<citation>2177	5	2177</citation>
	<citation>2490	5	2177</citation>
	<citation>2177	6	2177</citation>
	</citations>
	</document>
	<document id= '2176'>
	<title>Buffer Allocation in Merge-Sorting</title>
	<abstract>A fixed buffer allocation for merge-sorting is presented here which minimizes the number of  input-output operations for a given order of merge.  When sorting on movable arm disks, the number of  seeks is equal to the number of input-output operations, and the seek time usually controls the sort  time.  First some standard terminology is introduced.  Then the input buffer allocation method is described,  followed by an analysis of the improvement to be expected over more conventional allocation.  This analysis  makes use of a particular distribution function.  An analysis of a completely different distribution  is given which yields similar results.  This suggests that the results do not depend on a particular  distribution function.  An optimum output buffer size is also determined.  It is concluded that this  buffering allocation can significantly reduce the time of merge sorting on movable arm disks when the  input data are not random, and that this output buffer allocation should be used whether the data is  random or not.</abstract>
	<conference>CACM July, 1971</conference>
	<authors>
	<author>Ferguson, D. E.</author>
	</authors>
	<keywords>file, item, string, merge sort, seek time, gamma distribution function</keywords>
	<version>4.41 5.31</version>
	<location>CA710706 JB February 3, 1978  8:41 AM</location>
	<citations>
	<citation>1638	4	2176</citation>
	<citation>2176	4	2176</citation>
	<citation>2272	4	2176</citation>
	<citation>2176	5	2176</citation>
	<citation>2176	5	2176</citation>
	<citation>2176	5	2176</citation>
	<citation>677	5	2176</citation>
	</citations>
	</document>
	<document id= '2175'>
	<title>Subexpression Ordering in the Execution of Arithmetic Expressions</title>
	<abstract>An arithmetic expression can often be broken down into its component subexpressions.  Depending  on the hardware environment in which the expression is to be executed, these subexpressions can be evaluated  in serials, in parallel, or in a combination of these modes.  This paper shows that expression execution  time can be minimized only if consideration is given to the ordering of the subexpressions.  In particular,  subexpressions should be executed in order of decreasing memory and processor time requirements.  This  observation is valid for configurations ranging from a uniprocessor with an unbuffered main memory to  multiprocessor with a "cache" buffer memory.  If the number of subexpressions which can be executed in  parallel exceeds the number of available processors, then execution of some of these subexpressions must  be postponed.  A procedure is given which combines this requirement with the earlier ordering considerations  to provide an optimal execution sequence.</abstract>
	<conference>CACM July, 1971</conference>
	<authors>
	<author>Ramamoorthy, C. V.</author>
	<author>Gonzalez, M. J.</author>
	</authors>
	<keywords>parallel processing, cache, arithmetic expressions, subexpression ordering, computational trees,  compilers</keywords>
	<version>4.12 4.32</version>
	<location>CA710707 JB February 2, 1978  4:49 PM</location>
	<citations>
	<citation>1781	4	2175</citation>
	<citation>1807	4	2175</citation>
	<citation>1934	4	2175</citation>
	<citation>2175	4	2175</citation>
	<citation>2175	4	2175</citation>
	<citation>2175	4	2175</citation>
	<citation>1551	5	2175</citation>
	<citation>1613	5	2175</citation>
	<citation>1886	5	2175</citation>
	<citation>2175	5	2175</citation>
	<citation>2175	5	2175</citation>
	<citation>2175	5	2175</citation>
	<citation>2413	5	2175</citation>
	<citation>2175	6	2175</citation>
	</citations>
	</document>
	<document id= '2174'>
	<title>The Stable Marriage Problem</title>
	<abstract>The original work of Gale and Shapley on an assignment method using the stable marriage criterion  has been extended to find all the stable marriage assignments.  The algorithm derived for finding all  the stable marriage assignments is proved to satisfy all the conditions of the problem.  Algorithm 411  applies to this paper.</abstract>
	<conference>CACM July, 1971</conference>
	<authors>
	<author>McVitie, D. G.</author>
	</authors>
	<keywords>assignment problems, assignment procedures, combinatorics, discrete mathematics, operational research,  stable marriage problem, university entrance</keywords>
	<version>5.30</version>
	<location>CA710708 JB February 2, 1978  4:40 PM</location>
	<citations>
	<citation>2174	4	2174</citation>
	<citation>2173	5	2174</citation>
	<citation>2174	5	2174</citation>
	<citation>2174	5	2174</citation>
	<citation>2174	5	2174</citation>
	</citations>
	</document>
	<document id= '2173'>
	<title>Three Procedures for the Stable Marriage Problem [H] (Algorithm 411)</title>
	<conference>CACM July, 1971</conference>
	<authors>
	<author>McVitie, D. G.</author>
	<author>Wilson, L. B.</author>
	</authors>
	<keywords>assignment problems, assignment procedures, combinatorics, discrete mathematics, operations research,  stable marriage problem, university entrance</keywords>
	<version>5.30</version>
	<location>CA710709 JB February 2, 1978  4:35 PM</location>
	<citations>
	<citation>2173	5	2173</citation>
	<citation>2173	5	2173</citation>
	<citation>2173	5	2173</citation>
	<citation>2174	5	2173</citation>
	<citation>2173	6	2173</citation>
	</citations>
	</document>
	<document id= '2172'>
	<title>Graph Plotter [J6] (Algorithm 412)</title>
	<conference>CACM July, 1971</conference>
	<authors>
	<author>Cermak, J.</author>
	</authors>
	<keywords>plot, graph, line printer plot</keywords>
	<version>4.41</version>
	<location>CA710710 JB February 2, 1978  4:32 PM</location>
	<citations>
	<citation>2172	5	2172</citation>
	<citation>2172	5	2172</citation>
	<citation>2172	5	2172</citation>
	</citations>
	</document>
	<document id= '2171'>
	<title>Solution of Simultaneous Nonlinear Equations</title>
	<conference>CACM July, 1971</conference>
	<authors>
	<author>Raduchel, W. J.</author>
	</authors>
	<keywords>nonlinear equations</keywords>
	<version>5.15</version>
	<location>CA710711 JB February 2, 1978  4:31 PM</location>
	<citations>
	<citation>2171	5	2171</citation>
	<citation>2171	5	2171</citation>
	<citation>2171	5	2171</citation>
	</citations>
	</document>
	<document id= '2170'>
	<title>Applications of Symbol Manipulation in Theoretical Physics</title>
	<abstract>This paper surveys the applications of symbolic computation techniques to problems in theoretical  physics.  Particular emphasis is placed on applications in quantum electrodynamics where the most activity  has occurred.</abstract>
	<conference>CACM August, 1971</conference>
	<authors>
	<author>Hearn, A. C.</author>
	</authors>
	<keywords>symbol manipulation, algebraic simplification, computational physics, quantum electrodynamics</keywords>
	<version>3.17 4.22</version>
	<location>CA710802 JB February 2, 1978  4:21 PM</location>
	<citations>
	<citation>2164	4	2170</citation>
	<citation>2170	4	2170</citation>
	<citation>2170	4	2170</citation>
	<citation>2170	4	2170</citation>
	<citation>2323	4	2170</citation>
	<citation>2719	4	2170</citation>
	<citation>3071	4	2170</citation>
	<citation>2167	5	2170</citation>
	<citation>2165	5	2170</citation>
	<citation>2166	5	2170</citation>
	<citation>2170	5	2170</citation>
	<citation>2170	5	2170</citation>
	<citation>2170	5	2170</citation>
	<citation>2323	5	2170</citation>
	<citation>2164	6	2170</citation>
	<citation>2167	6	2170</citation>
	<citation>2170	6	2170</citation>
	</citations>
	</document>
	<document id= '2169'>
	<title>The Altran System for Rational Function Manipulation-A Survey</title>
	<abstract>Altran is a complete system for symbolic computation with rational functions in several variables  with integer coefficients.  It has been designed and implemented to handle large problems with ease and  efficiency.  Considerable effort has been spent to ensure a minimum amount of machine dependence in the  implementation, thus permitting the system to be installed quickly and easily on a variety of computing  machines.  In this paper a brief description of the language, run time data structures, and implementation  is given.</abstract>
	<conference>CACM August, 1971</conference>
	<authors>
	</authors>
	<keywords>symbolic algebra, rational function manipulation, polynomial manipulation, interpreters, translators</keywords>
	<version>4.13 4.29</version>
	<location>CA710803 JB February 2, 1978  4:17 PM</location>
	<citations>
	<citation>2167	5	2169</citation>
	<citation>2169	5	2169</citation>
	<citation>2169	5	2169</citation>
	<citation>2169	5	2169</citation>
	<citation>1379	6	2169</citation>
	<citation>1392	6	2169</citation>
	<citation>1393	6	2169</citation>
	<citation>2169	6	2169</citation>
	</citations>
	</document>
	<document id= '2168'>
	<title>List Tracing in Systems Allowing Multiple Cell-Types</title>
	<abstract>List-processing systems have each allowed the use of only a single size and configuration of  list cell.  In this paper a system is described which allows the use of arbitrarily many different sizes  and configurations of list cells, possibly not specified until run time.</abstract>
	<conference>CACM August, 1971</conference>
	<authors>
	<author>Fenichel, R. R.</author>
	</authors>
	<keywords>list-processing, storage allocation, LISP, SLIP, based storage, pointers</keywords>
	<version>4.49</version>
	<location>CA710804 JB February 2, 1978  3:45 PM</location>
	<citations>
	<citation>1024	4	2168</citation>
	<citation>1024	4	2168</citation>
	<citation>1051	4	2168</citation>
	<citation>1051	4	2168</citation>
	<citation>1098	4	2168</citation>
	<citation>1102	4	2168</citation>
	<citation>1132	4	2168</citation>
	<citation>1214	4	2168</citation>
	<citation>1380	4	2168</citation>
	<citation>1388	4	2168</citation>
	<citation>1390	4	2168</citation>
	<citation>1393	4	2168</citation>
	<citation>1485	4	2168</citation>
	<citation>1486	4	2168</citation>
	<citation>1487	4	2168</citation>
	<citation>1549	4	2168</citation>
	<citation>1549	4	2168</citation>
	<citation>1570	4	2168</citation>
	<citation>1706	4	2168</citation>
	<citation>1708	4	2168</citation>
	<citation>1781	4	2168</citation>
	<citation>1826	4	2168</citation>
	<citation>1826	4	2168</citation>
	<citation>1860	4	2168</citation>
	<citation>1878	4	2168</citation>
	<citation>1878	4	2168</citation>
	<citation>1946	4	2168</citation>
	<citation>1957	4	2168</citation>
	<citation>1972	4	2168</citation>
	<citation>378	4	2168</citation>
	<citation>2023	4	2168</citation>
	<citation>2060	4	2168</citation>
	<citation>2155	4	2168</citation>
	<citation>2156	4	2168</citation>
	<citation>2156	4	2168</citation>
	<citation>2168	4	2168</citation>
	<citation>2168	4	2168</citation>
	<citation>2168	4	2168</citation>
	<citation>2168	4	2168</citation>
	<citation>2168	4	2168</citation>
	<citation>2249	4	2168</citation>
	<citation>2314	4	2168</citation>
	<citation>2438	4	2168</citation>
	<citation>2719	4	2168</citation>
	<citation>2719	4	2168</citation>
	<citation>2723	4	2168</citation>
	<citation>2723	4	2168</citation>
	<citation>2723	4	2168</citation>
	<citation>2736	4	2168</citation>
	<citation>2736	4	2168</citation>
	<citation>2833	4	2168</citation>
	<citation>2833	4	2168</citation>
	<citation>2838	4	2168</citation>
	<citation>2842	4	2168</citation>
	<citation>2855	4	2168</citation>
	<citation>2855	4	2168</citation>
	<citation>2857	4	2168</citation>
	<citation>2879	4	2168</citation>
	<citation>3074	4	2168</citation>
	<citation>3077	4	2168</citation>
	<citation>3080	4	2168</citation>
	<citation>3106	4	2168</citation>
	<citation>3112	4	2168</citation>
	<citation>3112	4	2168</citation>
	<citation>627	4	2168</citation>
	<citation>106	4	2168</citation>
	<citation>210	5	2168</citation>
	<citation>1626	5	2168</citation>
	<citation>1826	5	2168</citation>
	<citation>1878	5	2168</citation>
	<citation>2168	5	2168</citation>
	<citation>2168	5	2168</citation>
	<citation>2168	5	2168</citation>
	<citation>731	5	2168</citation>
	</citations>
	</document>
	<document id= '2167'>
	<title>Algebraic Simplification: A Guide for the Perplexed</title>
	<abstract>Algebraic simplification is examined first from the point of view of a user who needs to comprehend  a large expression, and second from the point of view of a designer who wants to construct a useful and  efficient system.  First we describe various techniques akin to substitution.  These techniques can be  used to decrease thesize of an expression and make it more intelligible to a user.  Then we delineate  the spectrum of approaches to the design of automatic simplification capabilities in an algebraic manipulation  system.  Systems are divided into five types.  Each type provides different facilities for the manipulation  and simplification of expressions. Finally we discuss some of the theoretical results related to algebraic  simplification.  We describe several positive results about the existence of powerful simplification  algorithms and the number-theoretic conjectures on which they rely.  Results about the nonexistence of  algorithms for certain classes of expressions are included.</abstract>
	<conference>CACM August, 1971</conference>
	<authors>
	<author>Moses, J.</author>
	</authors>
	<keywords>algebraic manipulation, algebraic simplification, canonical simplification</keywords>
	<version>3.1 3.2 3.6 4.9 5.2 5.9</version>
	<location>CA710805 JB February 2, 1978  3:42 PM</location>
	<citations>
	<citation>1396	4	2167</citation>
	<citation>1396	4	2167</citation>
	<citation>1946	4	2167</citation>
	<citation>2167	4	2167</citation>
	<citation>2167	4	2167</citation>
	<citation>2167	4	2167</citation>
	<citation>2167	4	2167</citation>
	<citation>2857	4	2167</citation>
	<citation>2956	4	2167</citation>
	<citation>1379	5	2167</citation>
	<citation>1393	5	2167</citation>
	<citation>1392	5	2167</citation>
	<citation>2167	5	2167</citation>
	<citation>2167	5	2167</citation>
	<citation>2167	5	2167</citation>
	<citation>2164	5	2167</citation>
	<citation>2169	5	2167</citation>
	<citation>2170	5	2167</citation>
	<citation>2323	5	2167</citation>
	<citation>2719	5	2167</citation>
	<citation>1626	6	2167</citation>
	<citation>210	6	2167</citation>
	<citation>2151	6	2167</citation>
	<citation>2164	6	2167</citation>
	<citation>2165	6	2167</citation>
	<citation>2167	6	2167</citation>
	<citation>2167	6	2167</citation>
	<citation>2167	6	2167</citation>
	<citation>2167	6	2167</citation>
	<citation>2166	6	2167</citation>
	<citation>2170	6	2167</citation>
	<citation>2210	6	2167</citation>
	<citation>2645	6	2167</citation>
	<citation>2657	6	2167</citation>
	</citations>
	</document>
	<document id= '2166'>
	<title>Automated Algebraic Manipulation in Celestial Mechanics</title>
	<abstract>In this paper we consider some of the applications of automated algebraic manipulation which  have been made in celestial mechanics.  Particular attention is paid to the use of Poisson series, and  a typical problem in perturbation theory is described.  The requirements of processors for use in celestial  mechanics are considered and compared with those for general manipulation packages.  Some future directions  for research using these systems are briefly outlined.  To illustrate the relative simplicity of the  algorithm required in celestial mechanics, a typical integration problem is considered in an appendix.</abstract>
	<conference>CACM August, 1971</conference>
	<authors>
	<author>Jefferys, W. H.</author>
	</authors>
	<keywords>series manipulation, automated algebra, celestial mechanics</keywords>
	<version>5.10 5.13 5.17</version>
	<location>CA710806 JB February 2, 1978  3:31 PM</location>
	<citations>
	<citation>2166	5	2166</citation>
	<citation>2166	5	2166</citation>
	<citation>2166	5	2166</citation>
	<citation>2170	5	2166</citation>
	<citation>2165	6	2166</citation>
	<citation>2167	6	2166</citation>
	<citation>2166	6	2166</citation>
	</citations>
	</document>
	<document id= '2165'>
	<title>General Relativity and the Application of Algebraic Manipulative Systems</title>
	<abstract>The paper describes some applications of symbolic algebra systems to problems of general relativity  including the derivation of the field equations, the Petrov classification of a metric, and the solution  of the field equations in the presence of matter in a simple case.  Attention is drawn to the strictly  algebraic difficulties encountered in this work.</abstract>
	<conference>CACM August, 1971</conference>
	<authors>
	<author>Barton, D.</author>
	<author>Fitch, J. P.</author>
	</authors>
	<keywords>symbolic mathematics,nonnumerical mathematics, general relativity, algebraic manipulation, equation  manipulation</keywords>
	<version>1.3 3.11 5.10</version>
	<location>CA710807 JB February 2, 1978  2:53 PM</location>
	<citations>
	<citation>2165	5	2165</citation>
	<citation>2165	5	2165</citation>
	<citation>2165	5	2165</citation>
	<citation>2170	5	2165</citation>
	<citation>3071	5	2165</citation>
	<citation>2165	6	2165</citation>
	<citation>2165	6	2165</citation>
	<citation>2167	6	2165</citation>
	<citation>2166	6	2165</citation>
	</citations>
	</document>
	<document id= '2164'>
	<title>Symbolic Integration: The Stormy Decade</title>
	<abstract>Three approaches to symbolic integration in the 1960's are described.  The first, from artificial  intelligence, led to Slagle's SAINT and to a large degree to Moses' SIN.  The second, from algebraic  manipulation, led to Manove's implementation and to Horowitz' and Tobey's reexamination of the Hermite  algorithm for integrating rational functions.  The third, from mathematics, led to Richardson's proof  of the unsolvability of the problem for a class of functions and for Risch's decision procedure for the  elementary functions.Generalizations of Risch's algorithm to a class of special functions and programs  for solving differential equations and for finding the definite integral are also described.</abstract>
	<conference>CACM August, 1971</conference>
	<authors>
	<author>Moses, J.</author>
	</authors>
	<keywords>integration, symbolic integration, definite integrals, rational functions</keywords>
	<version>3.1 3.2 3.6 4.9 5.2 5.9</version>
	<location>CA710808 JB February 2, 1978  2:48 PM</location>
	<citations>
	<citation>2164	4	2164</citation>
	<citation>2170	4	2164</citation>
	<citation>2323	4	2164</citation>
	<citation>2719	4	2164</citation>
	<citation>2167	5	2164</citation>
	<citation>2164	5	2164</citation>
	<citation>2164	5	2164</citation>
	<citation>2164	5	2164</citation>
	<citation>2323	5	2164</citation>
	<citation>2164	6	2164</citation>
	<citation>2167	6	2164</citation>
	<citation>2170	6	2164</citation>
	</citations>
	</document>
	<document id= '2163'>
	<title>Education Related to the Use of Computers in Organizations</title>
	<abstract>The ACM Curriculum Committee on Computer Education for Management has been carrying out a study  on "Curriculum Development in Management Information Systems Education in Colleges and Universities"  under a grant from the National Science Foundation.  This position paper provides a framework for the  study.  Preliminary conclusions are presented on the need for education in administrative information  systems, and appropriate college curricula and courses are suggested.  Also, the role of professional  societies and organizations using computers is discussed, and the plans of the Committee are outlined.   The initial approach of the Committee has been to describe the education necessary for the effective  use of computers in organizations, to classify the positions for which education is required, and to  survey educational programs now available.</abstract>
	<conference>CACM September, 1971</conference>
	<authors>
	<author>Teichroew, D.</author>
	</authors>
	<keywords>education, information analysis, systems design, business data processing</keywords>
	<version>1.52 3.51</version>
	<location>CA710901 JB February 2, 1978  2:40 PM</location>
	<citations>
	<citation>1720	4	2163</citation>
	<citation>1927	4	2163</citation>
	<citation>2147	4	2163</citation>
	<citation>2163	4	2163</citation>
	<citation>2163	4	2163</citation>
	<citation>2163	4	2163</citation>
	<citation>2163	4	2163</citation>
	<citation>2345	4	2163</citation>
	<citation>2345	4	2163</citation>
	<citation>2407	4	2163</citation>
	<citation>2478	4	2163</citation>
	<citation>2594	4	2163</citation>
	<citation>2852	4	2163</citation>
	<citation>2899	4	2163</citation>
	<citation>3003	4	2163</citation>
	<citation>3130	4	2163</citation>
	<citation>1720	5	2163</citation>
	<citation>1771	5	2163</citation>
	<citation>1927	5	2163</citation>
	<citation>2163	5	2163</citation>
	<citation>2163	5	2163</citation>
	<citation>2163	5	2163</citation>
	<citation>2181	5	2163</citation>
	<citation>2407	5	2163</citation>
	<citation>3003	5	2163</citation>
	<citation>1659	6	2163</citation>
	<citation>1678	6	2163</citation>
	<citation>1927	6	2163</citation>
	<citation>1945	6	2163</citation>
	<citation>2097	6	2163</citation>
	<citation>2147	6	2163</citation>
	<citation>2163	6	2163</citation>
	<citation>2163	6	2163</citation>
	<citation>2181	6	2163</citation>
	<citation>2187	6	2163</citation>
	<citation>2329	6	2163</citation>
	<citation>2345	6	2163</citation>
	<citation>2345	6	2163</citation>
	<citation>2367	6	2163</citation>
	<citation>2407	6	2163</citation>
	<citation>2478	6	2163</citation>
	<citation>2479	6	2163</citation>
	<citation>2480	6	2163</citation>
	<citation>2538	6	2163</citation>
	</citations>
	</document>
	<document id= '2162'>
	<title>An Efficient Bit Table Technique for Dynamic Storage Allocation of 2^n-word Blocks</title>
	<abstract>An efficient bit table technique for dynamic storage allocation of 2^n-word blocks, which requires  a minimized amount of memory for bookkeeping purposes, is described. The technique has been tested in  an implementation of the list processing language L^6.  A number of ideas incorporated in the processor  are also described.</abstract>
	<conference>CACM September, 1971</conference>
	<authors>
	<author>Isoda, S.</author>
	<author>Goto, E.</author>
	</authors>
	<keywords>bit table, dynamic storage allocation, buddy system, L^6, list processing, free storage</keywords>
	<version>3.89 4.12 4.9</version>
	<location>CA710902 JB February 2, 1978  2:33 PM</location>
	<citations>
	<citation>1389	4	2162</citation>
	<citation>1552	4	2162</citation>
	<citation>1860	4	2162</citation>
	<citation>1957	4	2162</citation>
	<citation>2155	4	2162</citation>
	<citation>2162	4	2162</citation>
	<citation>2162	4	2162</citation>
	<citation>2435	4	2162</citation>
	<citation>2596	4	2162</citation>
	<citation>2768	4	2162</citation>
	<citation>2845	4	2162</citation>
	<citation>2902	4	2162</citation>
	<citation>2955	4	2162</citation>
	<citation>1184	5	2162</citation>
	<citation>1389	5	2162</citation>
	<citation>2162	5	2162</citation>
	<citation>2162	5	2162</citation>
	<citation>2162	5	2162</citation>
	</citations>
	</document>
	<document id= '2161'>
	<citations>
	<citation>2161	5	2161</citation>
	<citation>2161	5	2161</citation>
	<citation>2161	5	2161</citation>
	</citations>
	<title>An Algorithm for the Blocks and Cutnodes of a Graph (Corrigendum)</title>
	<conference>CACM September, 1971</conference>
	<authors>
	<author>Paton, K.</author>
	</authors>
	<location>CA710903 JB February 2, 1978  2:24 PM</location>
	</document>
	<document id= '2160'>
	<title>Canonical Structure in Attribute Based File Organization</title>
	<abstract>A new file structure for attribute based retrieval is proposed in this paper.  It allows queries  involving arbitrary Boolean functions of the attribute-value pairs to be processed without taking intersections  of lists.  The structure is highly dependent on the way in which the file is to be used and is uniquely  determined by the specification of the allowed queries.  Thus, for example, the structure for retrieval  on the basis of ranges of values of a given attribute would be very different from one where only retrieval  on the basis of a single value is permitted.  The file organization being proposed is based on the atoms  of a Boolean algebra generated by the queries.  The desirable properties claimed for this structure are  proved, and file maintenance questions are discussed.</abstract>
	<conference>CACM September, 1971</conference>
	<authors>
	<author>Wong, E.</author>
	<author>Chiang, T. C.</author>
	</authors>
	<keywords>address calculation, atoms of Boolean algebra, attributes, Boolean functions, Boolean queries,  file organization, information retrieval, inverted file, key words, multilist, queries, searches</keywords>
	<version>3.70 3.73 3.74</version>
	<location>CA710904 JB February 2, 1978  2:22 PM</location>
	<citations>
	<citation>2160	4	2160</citation>
	<citation>2688	4	2160</citation>
	<citation>2114	5	2160</citation>
	<citation>2160	5	2160</citation>
	<citation>2160	5	2160</citation>
	<citation>2160	5	2160</citation>
	<citation>3134	5	2160</citation>
	<citation>1976	6	2160</citation>
	<citation>2160	6	2160</citation>
	<citation>2524	6	2160</citation>
	<citation>2990	6	2160</citation>
	</citations>
	</document>
	<document id= '2159'>
	<title>A Note on Best One-Sided Approximations</title>
	<conference>CACM September, 1971</conference>
	<authors>
	<author>Phillips, D. L.</author>
	</authors>
	<keywords>best approximation, one-sided approximation, logarithmic, error, relative error</keywords>
	<version>5.11 5.13</version>
	<location>CA710905 JB February 2, 1978  2:15 PM</location>
	<citations>
	<citation>1440	4	2159</citation>
	<citation>1832	4	2159</citation>
	<citation>1932	4	2159</citation>
	<citation>1999	4	2159</citation>
	<citation>2159	4	2159</citation>
	<citation>2159	4	2159</citation>
	<citation>962	5	2159</citation>
	<citation>1932	5	2159</citation>
	<citation>2159	5	2159</citation>
	<citation>2159	5	2159</citation>
	<citation>2159	5	2159</citation>
	</citations>
	</document>
	<document id= '2158'>
	<title>A Stopping Criterion for the Newton-Raphson Method in Implicit Multistep Integration Algorithms  for Nonlinear Systems of Ordinary Differential Equations</title>
	<conference>CACM September, 1971</conference>
	<authors>
	<author>Liniger, W.</author>
	</authors>
	<keywords>ordinary differential equations, linear multistep formulas, Newton-Raphson method, stopping criterion</keywords>
	<version>5.11 5.15 5.17</version>
	<location>CA710906 JB February 2, 1978  2:13 PM</location>
	<citations>
	<citation>2158	5	2158</citation>
	<citation>2158	5	2158</citation>
	<citation>2158	5	2158</citation>
	</citations>
	</document>
	<document id= '2157'>
	<title>Average Binary Search Length for Dense Ordered Lists</title>
	<conference>CACM September, 1971</conference>
	<authors>
	<author>Flores, I.</author>
	<author>Madpis, G.</author>
	</authors>
	<keywords>searching, binary searching, record retrieval</keywords>
	<version>3.74</version>
	<location>CA710907 JB February 2, 1978  1:42 PM</location>
	<citations>
	<citation>2157	5	2157</citation>
	<citation>2157	5	2157</citation>
	<citation>2157	5	2157</citation>
	<citation>2293	5	2157</citation>
	<citation>2157	6	2157</citation>
	</citations>
	</document>
	<document id= '2156'>
	<title>Comment on Cheney's List-Compaction Algorithm</title>
	<conference>CACM September, 1971</conference>
	<authors>
	<author>Fenichel, R. R.</author>
	</authors>
	<keywords>LISP, garbage collector, virtual memory, list processing, storage allocation</keywords>
	<version>4.19 4.49</version>
	<location>CA710908 JB February 2, 1978  1:36 PM</location>
	<citations>
	<citation>1708	4	2156</citation>
	<citation>1781	4	2156</citation>
	<citation>1826	4	2156</citation>
	<citation>1860	4	2156</citation>
	<citation>1972	4	2156</citation>
	<citation>2156	4	2156</citation>
	<citation>2156	4	2156</citation>
	<citation>2156	4	2156</citation>
	<citation>2168	4	2156</citation>
	<citation>2168	4	2156</citation>
	<citation>2249	4	2156</citation>
	<citation>2314	4	2156</citation>
	<citation>2361	4	2156</citation>
	<citation>2438	4	2156</citation>
	<citation>2513	4	2156</citation>
	<citation>2719	4	2156</citation>
	<citation>2723	4	2156</citation>
	<citation>2736	4	2156</citation>
	<citation>2736	4	2156</citation>
	<citation>2736	4	2156</citation>
	<citation>2833	4	2156</citation>
	<citation>2833	4	2156</citation>
	<citation>2855	4	2156</citation>
	<citation>2855	4	2156</citation>
	<citation>3074	4	2156</citation>
	<citation>3074	4	2156</citation>
	<citation>3106	4	2156</citation>
	<citation>3112	4	2156</citation>
	<citation>3112	4	2156</citation>
	<citation>1626	5	2156</citation>
	<citation>1826	5	2156</citation>
	<citation>1972	5	2156</citation>
	<citation>2156	5	2156</citation>
	<citation>2156	5	2156</citation>
	<citation>2156	5	2156</citation>
	</citations>
	</document>
	<document id= '2155'>
	<title>Toward an Understanding of Data Structures</title>
	<abstract>This paper presents a notation and formalism for describing the semantics of data structures.   This is based on directed graphs with named edges and transformations on these graphs.  In addition,  an implementation facility is described which could be part of a programming language, which allows a  programmer who has expressed the semantics of an algorithm in terms of the graphs to then specify the  implementation of some of his data structures in order to gain efficiency.</abstract>
	<conference>CACM October,1971</conference>
	<authors>
	<author>Earley, J.</author>
	</authors>
	<keywords>data structures, graph, implementation, semantic formalism, programming language</keywords>
	<version>4.22 4.9 5.24</version>
	<location>CA711001 JB February 2, 1978  1:35 PM</location>
	<citations>
	<citation>1024	4	2155</citation>
	<citation>1051	4	2155</citation>
	<citation>1051	4	2155</citation>
	<citation>1102	4	2155</citation>
	<citation>1132	4	2155</citation>
	<citation>1390	4	2155</citation>
	<citation>1486	4	2155</citation>
	<citation>1549	4	2155</citation>
	<citation>1552	4	2155</citation>
	<citation>1665	4	2155</citation>
	<citation>1706	4	2155</citation>
	<citation>1826	4	2155</citation>
	<citation>1860	4	2155</citation>
	<citation>1860	4	2155</citation>
	<citation>1878	4	2155</citation>
	<citation>1957	4	2155</citation>
	<citation>378	4	2155</citation>
	<citation>2060	4	2155</citation>
	<citation>2155	4	2155</citation>
	<citation>2155	4	2155</citation>
	<citation>2155	4	2155</citation>
	<citation>2155	4	2155</citation>
	<citation>2155	4	2155</citation>
	<citation>2162	4	2155</citation>
	<citation>2168	4	2155</citation>
	<citation>2294	4	2155</citation>
	<citation>2406	4	2155</citation>
	<citation>2558	4	2155</citation>
	<citation>2710	4	2155</citation>
	<citation>2715	4	2155</citation>
	<citation>2716	4	2155</citation>
	<citation>2717	4	2155</citation>
	<citation>2718	4	2155</citation>
	<citation>2719	4	2155</citation>
	<citation>2723	4	2155</citation>
	<citation>2765	4	2155</citation>
	<citation>2817	4	2155</citation>
	<citation>2838	4	2155</citation>
	<citation>2842	4	2155</citation>
	<citation>2842	4	2155</citation>
	<citation>2855	4	2155</citation>
	<citation>2879	4	2155</citation>
	<citation>2888	4	2155</citation>
	<citation>2901	4	2155</citation>
	<citation>2957	4	2155</citation>
	<citation>2959	4	2155</citation>
	<citation>2965	4	2155</citation>
	<citation>3077	4	2155</citation>
	<citation>3077	4	2155</citation>
	<citation>3080	4	2155</citation>
	<citation>3087	4	2155</citation>
	<citation>3106	4	2155</citation>
	<citation>3150	4	2155</citation>
	<citation>3154	4	2155</citation>
	<citation>627	4	2155</citation>
	<citation>106	4	2155</citation>
	<citation>210	5	2155</citation>
	<citation>1389	5	2155</citation>
	<citation>378	5	2155</citation>
	<citation>2046	5	2155</citation>
	<citation>2060	5	2155</citation>
	<citation>2155	5	2155</citation>
	<citation>2155	5	2155</citation>
	<citation>2155	5	2155</citation>
	<citation>2252	5	2155</citation>
	<citation>2594	5	2155</citation>
	<citation>1358	6	2155</citation>
	<citation>1496	6	2155</citation>
	<citation>1771	6	2155</citation>
	<citation>2155	6	2155</citation>
	<citation>2155	6	2155</citation>
	<citation>2204	6	2155</citation>
	<citation>3184	6	2155</citation>
	<citation>3186	6	2155</citation>
	</citations>
	</document>
	<document id= '2154'>
	<title>Clarification of Fortran Standards-Second Report</title>
	<abstract>In 1966, after four years of effort, Fortran became the first programming language standardized  in the United States.  Since that initial achievement study and application of the standard specifications  have revealed the need for maintenance of the standards.  As the result of work initiated in 1967, an  initial set of clarifying interpretations was prepared and this clarification was published in Communications  of the ACM in May 1969.  That work has continued and has resulted in the preparation of this second set  of clarifying interpretations.  The nature of the maintenance and the new set of corrections to and interpretations  of the standard specifications are reported.</abstract>
	<conference>CACM October, 1971</conference>
	<authors>
	</authors>
	<keywords>American National Standard, Fortran, Basic Fortran, programming language, standardization, language  standard specification, language standard maintenance, language standard clarification, language standard  interpretation, standardization committee</keywords>
	<version>1.2 2.0 2.19 2.2 2.3 4.0 4.12 4.19 4.20 4.22 4.29 4.43 5.23 5.9 6.9</version>
	<location>CA711002 JB February 2, 1978  1:30 PM</location>
	<citations>
	<citation>1613	4	2154</citation>
	<citation>1646	4	2154</citation>
	<citation>1845	4	2154</citation>
	<citation>1900	4	2154</citation>
	<citation>1900	4	2154</citation>
	<citation>1955	4	2154</citation>
	<citation>2025	4	2154</citation>
	<citation>2083	4	2154</citation>
	<citation>2154	4	2154</citation>
	<citation>2154	4	2154</citation>
	<citation>2154	4	2154</citation>
	<citation>2270	4	2154</citation>
	<citation>2365	4	2154</citation>
	<citation>2506	4	2154</citation>
	<citation>2693	4	2154</citation>
	<citation>2915	4	2154</citation>
	<citation>3060	4	2154</citation>
	<citation>3060	4	2154</citation>
	<citation>987	5	2154</citation>
	<citation>988	5	2154</citation>
	<citation>1900	5	2154</citation>
	<citation>2154	5	2154</citation>
	<citation>2154	5	2154</citation>
	<citation>2154	5	2154</citation>
	<citation>3060	5	2154</citation>
	<citation>987	6	2154</citation>
	<citation>1900	6	2154</citation>
	<citation>2154	6	2154</citation>
	</citations>
	</document>
	<document id= '2153'>
	<title>Experiments with an Automated Instructional System for Numerical Methods</title>
	<abstract>A computer system was developed at Purdue University to teach portions of an undergraduate  course in numerical methods.  Each instructional unit or lesson is divided into three modes of instruction  which allow the student to press from a computer-controlled presentation to a student-controlled investigation.  The system is designed as a classroom-independent course of study, and has been used for two semesters  by students in lieu of conventional classroom instruction.  Initial measures of effectiveness, student  acceptance, and operational cost are the result of testing the system independent of instructor intervention.   The system is operational on a CDC 6500 with teletype terminals.</abstract>
	<conference>CACM October, 1971</conference>
	<authors>
	<author>Oldehoeft, A. E.</author>
	<author>Conte, S. D.</author>
	</authors>
	<keywords>computer-assisted instruction, numerical methods, CAI, instructional systems</keywords>
	<version>1.52 3.62 5.10</version>
	<location>CA711003 JB February 2, 1978  1:22 PM</location>
	<citations>
	<citation>2153	4	2153</citation>
	<citation>3003	4	2153</citation>
	<citation>2097	5	2153</citation>
	<citation>2153	5	2153</citation>
	<citation>2153	5	2153</citation>
	<citation>2153	5	2153</citation>
	</citations>
	</document>
	<document id= '2152'>
	<title>Display Procedures</title>
	<abstract>Although the use of structured display files is widespread in interactive computer graphics,  these structures present a number of problems which tend to restrict their generality and usefulness.   This paper discusses some of these problems, and suggests an alternative approach to display system  design which avoids the use of structured display files.  This technique employs display procedures to  generate information for display.  By including transformations within calls to these procedures it is  possible both to simplify the specification of pictures and to speed up their generation.  Display procedures  permit picture elements to be defined conditionally and also facilitate the processing of inputs from  pointing devices.  The paper is illustrated by examples from aversion of the EULER language in which  display procedures were implemented.</abstract>
	<conference>CACM October, 1971</conference>
	<authors>
	<author>Newman, W. M.</author>
	</authors>
	<keywords>computer graphics, programming languages, display files</keywords>
	<version>4.20 4.41</version>
	<location>CA711004 JB February 2, 1978  1:11 PM</location>
	<citations>
	<citation>1542	4	2152</citation>
	<citation>1683	4	2152</citation>
	<citation>1693	4	2152</citation>
	<citation>1781	4	2152</citation>
	<citation>1787	4	2152</citation>
	<citation>1836	4	2152</citation>
	<citation>1945	4	2152</citation>
	<citation>2003	4	2152</citation>
	<citation>2002	4	2152</citation>
	<citation>2060	4	2152</citation>
	<citation>2061	4	2152</citation>
	<citation>2082	4	2152</citation>
	<citation>2091	4	2152</citation>
	<citation>2152	4	2152</citation>
	<citation>2152	4	2152</citation>
	<citation>2179	4	2152</citation>
	<citation>2340	4	2152</citation>
	<citation>2356	4	2152</citation>
	<citation>2546	4	2152</citation>
	<citation>2603	4	2152</citation>
	<citation>2698	4	2152</citation>
	<citation>2708	4	2152</citation>
	<citation>2824	4	2152</citation>
	<citation>2982	4	2152</citation>
	<citation>2986	4	2152</citation>
	<citation>3045	4	2152</citation>
	<citation>3093	4	2152</citation>
	<citation>1491	5	2152</citation>
	<citation>1767	5	2152</citation>
	<citation>2152	5	2152</citation>
	<citation>2152	5	2152</citation>
	<citation>2152	5	2152</citation>
	</citations>
	</document>
	<document id= '2151'>
	<title>User Program Measurement in a Time-Shared Environment</title>
	<abstract>A general discussion of the measurement of software systems is followed by a description of  a hardware and software scheme for measuring user programs in a time-shared environment.  The TX-2 computer  at MIT Lincoln Laboratory was used for the implementation of such a system and the characteristics of  this implementation are reported.  A scenario showing the system in use is presented.  Finally, it is  shown how other time-sharing systems may provide similar measuring facilities.</abstract>
	<conference>CACM October, 1971</conference>
	<authors>
	<author>Nemeth, A. G.</author>
	<author>Rovner, P. D.</author>
	</authors>
	<keywords>operating systems, multiprogramming systems, time-sharing systems, software measurement, user program  measurement, measurement technology, TX-2 computer, virtual computers, performance improvement</keywords>
	<version>4.30 4.32 4.42 4.43</version>
	<location>CA711005 JB February 2, 1978  1:05 PM</location>
	<citations>
	<citation>1957	4	2151</citation>
	<citation>2151	4	2151</citation>
	<citation>2151	4	2151</citation>
	<citation>2151	4	2151</citation>
	<citation>2318	4	2151</citation>
	<citation>3103	4	2151</citation>
	<citation>3148	4	2151</citation>
	<citation>1653	5	2151</citation>
	<citation>1747	5	2151</citation>
	<citation>1860	5	2151</citation>
	<citation>2151	5	2151</citation>
	<citation>2151	5	2151</citation>
	<citation>2151	5	2151</citation>
	<citation>2719	5	2151</citation>
	<citation>2967	5	2151</citation>
	<citation>1626	6	2151</citation>
	<citation>210	6	2151</citation>
	<citation>2151	6	2151</citation>
	<citation>2151	6	2151</citation>
	<citation>2167	6	2151</citation>
	<citation>2210	6	2151</citation>
	<citation>2645	6	2151</citation>
	<citation>2657	6	2151</citation>
	</citations>
	</document>
	<document id= '2150'>
	<title>Concurrent Control with "Readers" and "Writers"</title>
	<abstract>The problem of the mutual exclusion of several independent processes from simultaneous access  to a "critical section" is discussed for the case where there are two distinct classes of processes known  as "readers" and "writers."  The "readers" may share the section with each other, but the "writers" must  have exclusive access.  Two solutions are presented: one of the case where we wish minimum delay for  the readers; the other for the case where we wish writing to take place as early as possible.</abstract>
	<conference>CACM October, 1971</conference>
	<authors>
	<author>Courois, P. J.</author>
	<author>Heymans, F.</author>
	<author>Parnas, D. L.</author>
	</authors>
	<keywords>mutual exclusion, critical section, shared access to resources</keywords>
	<version>4.30 4.32</version>
	<location>CA711006 JB February 2, 1978  11:58 AM</location>
	<citations>
	<citation>1781	4	2150</citation>
	<citation>1828	4	2150</citation>
	<citation>1854	4	2150</citation>
	<citation>1877	4	2150</citation>
	<citation>1960	4	2150</citation>
	<citation>2150	4	2150</citation>
	<citation>2150	4	2150</citation>
	<citation>2150	4	2150</citation>
	<citation>2228	4	2150</citation>
	<citation>2228	4	2150</citation>
	<citation>2256	4	2150</citation>
	<citation>2256	4	2150</citation>
	<citation>2317	4	2150</citation>
	<citation>2317	4	2150</citation>
	<citation>2319	4	2150</citation>
	<citation>2377	4	2150</citation>
	<citation>2342	4	2150</citation>
	<citation>2342	4	2150</citation>
	<citation>2342	4	2150</citation>
	<citation>2376	4	2150</citation>
	<citation>2376	4	2150</citation>
	<citation>2379	4	2150</citation>
	<citation>2424	4	2150</citation>
	<citation>2482	4	2150</citation>
	<citation>2618	4	2150</citation>
	<citation>2618	4	2150</citation>
	<citation>2618	4	2150</citation>
	<citation>2632	4	2150</citation>
	<citation>2704	4	2150</citation>
	<citation>2723	4	2150</citation>
	<citation>2738	4	2150</citation>
	<citation>2740	4	2150</citation>
	<citation>2741	4	2150</citation>
	<citation>2867	4	2150</citation>
	<citation>3184	4	2150</citation>
	<citation>3184	4	2150</citation>
	<citation>1198	5	2150</citation>
	<citation>1338	5	2150</citation>
	<citation>1749	5	2150</citation>
	<citation>2150	5	2150</citation>
	<citation>2150	5	2150</citation>
	<citation>2150	5	2150</citation>
	<citation>2320	5	2150</citation>
	<citation>2597	5	2150</citation>
	<citation>2777	5	2150</citation>
	<citation>2851	5	2150</citation>
	<citation>2895	5	2150</citation>
	<citation>2912	5	2150</citation>
	<citation>2946	5	2150</citation>
	<citation>3128	5	2150</citation>
	<citation>1877	6	2150</citation>
	<citation>2080	6	2150</citation>
	<citation>2150	6	2150</citation>
	<citation>2150	6	2150</citation>
	<citation>2150	6	2150</citation>
	<citation>2150	6	2150</citation>
	<citation>2150	6	2150</citation>
	<citation>2150	6	2150</citation>
	<citation>2150	6	2150</citation>
	<citation>2150	6	2150</citation>
	<citation>2320	6	2150</citation>
	<citation>2376	6	2150</citation>
	<citation>2436	6	2150</citation>
	<citation>2597	6	2150</citation>
	<citation>2618	6	2150</citation>
	<citation>2865	6	2150</citation>
	<citation>2866	6	2150</citation>
	<citation>2866	6	2150</citation>
	<citation>2870	6	2150</citation>
	<citation>2912	6	2150</citation>
	<citation>3082	6	2150</citation>
	</citations>
	</document>
	<document id= '2149'>
	<title>ENTCAF and ENTCRE: Evaluation of Normalized Taylor Coefficients of an Analytic Function [C5]  (Algorithm 413)</title>
	<conference>CACM October, 1971</conference>
	<authors>
	<author>Lyness, J. N.</author>
	</authors>
	<keywords>Taylor coefficients, Taylor series, Cauchy integral, numerical integration, numerical differentiation,  interpolation, complex variable, complex arithmetic, fast Fourier transform</keywords>
	<version>5.12 5.13 5.16</version>
	<location>CA711007 JB February 2, 1978  11:53 AM</location>
	<citations>
	<citation>2119	4	2149</citation>
	<citation>2149	4	2149</citation>
	<citation>2129	5	2149</citation>
	<citation>2149	5	2149</citation>
	<citation>2149	5	2149</citation>
	<citation>2149	5	2149</citation>
	</citations>
	</document>
	<document id= '2148'>
	<title>The Composition of Semantics in Algol 68</title>
	<abstract>The main features of Algol 68 are explained from a semantic point of view.  It is shown how  the language permits the composition of values and actions, i.e. ultimately programs, from a minimum  set of primitives with a few fundamental recursive rules of composition.  The associated syntax is briefly  reviewed.  An attempt has been made to obtain a structured and simple introduction to both Algol 68 and  its orthogonal design.</abstract>
	<conference>CACM November, 1971</conference>
	<authors>
	<author>Branquart, P.</author>
	<author>Lewi, J.</author>
	<author>Sintzoff, M.</author>
	<author>Wodon, P. L.</author>
	</authors>
	<keywords>programming primitives, programming languages, Algol, semantics, recursive composition, design  of programming languages, data structures</keywords>
	<version>1.3 4.2 4.22 5.23 5.24</version>
	<location>CA711101 JB February 2, 1978  11:49 AM</location>
	<citations>
	<citation>2148	5	2148</citation>
	<citation>2148	5	2148</citation>
	<citation>2148	5	2148</citation>
	<citation>2314	5	2148</citation>
	<citation>2317	5	2148</citation>
	<citation>2842	5	2148</citation>
	<citation>1098	6	2148</citation>
	<citation>1198	6	2148</citation>
	<citation>1572	6	2148</citation>
	<citation>1626	6	2148</citation>
	<citation>1693	6	2148</citation>
	<citation>1749	6	2148</citation>
	<citation>1753	6	2148</citation>
	<citation>1781	6	2148</citation>
	<citation>210	6	2148</citation>
	<citation>2060	6	2148</citation>
	<citation>2082	6	2148</citation>
	<citation>2126	6	2148</citation>
	<citation>2148	6	2148</citation>
	<citation>2148	6	2148</citation>
	<citation>2148	6	2148</citation>
	<citation>2192	6	2148</citation>
	<citation>3184	6	2148</citation>
	</citations>
	</document>
	<document id= '2147'>
	<title>Using Computers in Higher Education: Past Recommendations, Status, and Needs</title>
	<abstract>Data from a survey conducted with National Science foundation support, which was published  in December 1970, is reviewed, and it is pointed out that, with regard to computers in higher education,  national goals stated in the Rosser and Pierce Reports have not been attained.  Quality was lacking in  hardware or courses in nearly half of the associate and bachelor's degree programs in data processing,  computer science, etc., offered in 1966-67.  A plea is made for continuing studies on status and goals  for computing in higher education, improvement of degree programs, and a national testing laboratory  for educational technology.</abstract>
	<conference>CACM November, 1971</conference>
	<authors>
	<author>Hamblen, J. W.</author>
	</authors>
	<keywords>higher education, computers, degree programs, national goals, testing laboratory, educational technology</keywords>
	<version>1.50 1.52 1.53 2.45 3.51</version>
	<location>CA711102 JB February 2, 1978  11:44 AM</location>
	<citations>
	<citation>1720	4	2147</citation>
	<citation>1927	4	2147</citation>
	<citation>2147	4	2147</citation>
	<citation>2163	4	2147</citation>
	<citation>2345	4	2147</citation>
	<citation>2478	4	2147</citation>
	<citation>2594	4	2147</citation>
	<citation>2852	4	2147</citation>
	<citation>2899	4	2147</citation>
	<citation>3130	4	2147</citation>
	<citation>1771	5	2147</citation>
	<citation>2147	5	2147</citation>
	<citation>2147	5	2147</citation>
	<citation>2147	5	2147</citation>
	<citation>3003	5	2147</citation>
	<citation>1659	6	2147</citation>
	<citation>1678	6	2147</citation>
	<citation>1927	6	2147</citation>
	<citation>1945	6	2147</citation>
	<citation>2097	6	2147</citation>
	<citation>2147	6	2147</citation>
	<citation>2163	6	2147</citation>
	<citation>2187	6	2147</citation>
	<citation>2329	6	2147</citation>
	<citation>2345	6	2147</citation>
	<citation>2367	6	2147</citation>
	<citation>2407	6	2147</citation>
	<citation>2478	6	2147</citation>
	<citation>2479	6	2147</citation>
	<citation>2480	6	2147</citation>
	<citation>2538	6	2147</citation>
	</citations>
	</document>
	<document id= '2146'>
	<title>Optimizing the Polyphase Sort</title>
	<abstract>Various dispersion algorithms for the polyphase sorting procedure are examined.The optimum  algorithm based on minimizing the total number of unit strings read is displayed.  The logic of this  algorithm is rather complicated; hence, several other new dispersion algorithms with more straightforward  logic are presented.  Of the simple dispersion algorithms discussed, the  Horizontal is best.  It does  approximately one-fourth to one and one-half percent less reading and writing than most algorithms in  use today.  An additional two and one-fourth to three percent improvement can be achieved by utilizing  the Modified Optimum Algorithm.  This algorithm is relatively straightforward, but it requires a fairly  close estimate of the total number of unit strings before the dispersion begins.</abstract>
	<conference>CACM November, 1971</conference>
	<authors>
	<author>Shell, D. L.</author>
	</authors>
	<keywords>sorting, polyphase sorting, dispersion algorithms, optimum dispersion algorithm, repetition operator</keywords>
	<version>5.31</version>
	<location>CA711103 JB February 2, 1978  11:39 AM</location>
	<citations>
	<citation>1117	4	2146</citation>
	<citation>1117	4	2146</citation>
	<citation>2017	4	2146</citation>
	<citation>2017	4	2146</citation>
	<citation>2017	4	2146</citation>
	<citation>2146	4	2146</citation>
	<citation>2146	4	2146</citation>
	<citation>2146	4	2146</citation>
	<citation>2146	4	2146</citation>
	<citation>479	4	2146</citation>
	<citation>677	4	2146</citation>
	<citation>860	4	2146</citation>
	<citation>861	4	2146</citation>
	<citation>862	4	2146</citation>
	<citation>863	4	2146</citation>
	<citation>299	5	2146</citation>
	<citation>2146	5	2146</citation>
	<citation>2146	5	2146</citation>
	<citation>2146	5	2146</citation>
	<citation>862	5	2146</citation>
	<citation>863	5	2146</citation>
	<citation>861	5	2146</citation>
	</citations>
	</document>
	<document id= '2145'>
	<title>Automation of Etching-Pattern Layout</title>
	<abstract>HELP (Heuristic Etching-Pattern Layout Program) is an application program developed to computerize  the tedious and error-prone although vitally important wiring design of printed circuit boards.  HELP  helps automate a design stage one step closer to production than logical design.  It can be used to design  wiring patterns of two-layer circuit boards on which ICs in dual-in-line packages as well as discrete  components such as transistors and resistors have been placed.  HELP employs two methods of wiring.   One is the heuristic method, which simulates human approaches to wiring design, and the other is the  theoretically interesting but time-consuming method of maze-running, based on the Lee's algorithm.  HELP  performs more than 90 percent of required wiring by the heuristic path with respect to a performance  function for each point-to-point, and point-to-line connection.  It can bring the number of successful  wiring connections very close to 100 percent.</abstract>
	<conference>CACM November, 1971</conference>
	<authors>
	<author>Aramaki, I.</author>
	<author>Kawabata, T.</author>
	<author>Kazuhiko, A.</author>
	</authors>
	<keywords>heuristic etching-pattern layout, wiring design of printed circuit board, maze-running, Lee's algorithm</keywords>
	<version>3.24 3.66 4.9 6.9</version>
	<location>CA711104 JB February 2, 1978  10:58 AM</location>
	<citations>
	<citation>2145	5	2145</citation>
	<citation>2145	5	2145</citation>
	<citation>2145	5	2145</citation>
	</citations>
	</document>
	<document id= '2144'>
	<title>On Accurate Floating-Point Summation</title>
	<abstract>The accumulation of floating-point sums is considered on a computer which performs t-digit  base B floating-point addition with exponents in the range -m to M.  An algorithm is given for accurately  summing N t-digit floating-point numbers.  Each of these N numbers is split into q parts, forming qN  t-digit floating-point numbers.  Each of these is then added to the appropriate one of n auxiliary t-digit  accumulators.  Finally, the accumulators are added together to yield the computed sum.  In all, qN+n-1  t-digit floating-point additions are performed.  Under usual conditions, the relative error in the computed  sum is at most [(t+1)/v]B^(1-t) for some v.  Further, with an additional q+n-1 t-digit additions, the  computed sum can be corrected to full t-digit accuracy.  For example, for the IBM/360 (B=16, t=14, M=63,  m=64), typical values for q and n are q=2 and n=32.  In this case, (*) becomes N &amp;lt;= 32,768, and we have  [(t+1)/v]B^(1-t) = 4x16^-13.</abstract>
	<conference>CACM November, 1971</conference>
	<authors>
	<author>Malcolm, M. A.</author>
	</authors>
	<keywords>floating-point summation, error analysis</keywords>
	<version>5.11 5.19</version>
	<location>CA711105 JB February 2, 1978  10:48 AM</location>
	<citations>
	<citation>1328	4	2144</citation>
	<citation>1333	4	2144</citation>
	<citation>2144	4	2144</citation>
	<citation>1052	5	2144</citation>
	<citation>2144	5	2144</citation>
	<citation>2144	5	2144</citation>
	<citation>2144	5	2144</citation>
	</citations>
	</document>
	<document id= '2143'>
	<title>Chebyshev Approximation of Continuous Functions by a Chebyshev System of Functions [E2] (Algorithm 414)</title>
	<conference>CACM November, 1971</conference>
	<authors>
	<author>Bolub, G. H.</author>
	<author>Smith, L. B.</author>
	</authors>
	<keywords>approximation, Chebyshev approximation, Remex algorithm</keywords>
	<version>5.13</version>
	<location>CA711106 JB February 2, 1978  10:35 AM</location>
	<citations>
	<citation>2143	4	2143</citation>
	<citation>1734	5	2143</citation>
	<citation>2143	5	2143</citation>
	<citation>2143	5	2143</citation>
	<citation>2143	5	2143</citation>
	</citations>
	</document>
	<document id= '2142'>
	<title>Reconstruction of Pictures from Their Projections</title>
	<abstract>There are situations in the natural sciences and medicine (e.g. in electron microscopy and  X-ray photography) in which it is desirable to estimate the gray levels of a digital picture at the individual  points from the sums of the gray levels along straight lines (projections) at a few angles.  Usually,  in such situations, the picture is far from determined and the problem is to find the "most representative"  picture.  Three algorithms are described (all using Monte Carlo methods) which were designed to solve  this problem.  The algorithms are applicable in a large and varied number of fields.  The most important  uses may be the reconstruction of possibly asymmetric particles from electron micrographs and three-dimensional  X-ray analysis.</abstract>
	<conference>CACM December, 1971</conference>
	<authors>
	<author>Herman, G. T.</author>
	</authors>
	<keywords>approximation, biomedical image processing, efficient encoding, image processing, linear programming,  mathematical programming, Monte Carlo techniques, optimization, picture compression, picture description,  picture processing, stereology, X-ray analysis</keywords>
	<version>3.12 3.13 3.15 3.17 3.63 5.41 5.6</version>
	<location>CA711201 JB February 2, 1978  10:32 AM</location>
	<citations>
	<citation>2142	4	2142</citation>
	<citation>2142	4	2142</citation>
	<citation>2529	4	2142</citation>
	<citation>1929	5	2142</citation>
	<citation>2142	5	2142</citation>
	<citation>2142	5	2142</citation>
	<citation>2142	5	2142</citation>
	<citation>2231	5	2142</citation>
	</citations>
	</document>
	<document id= '2141'>
	<title>Algorithmic Selection of the Best Method for Compressing Map Data Strings</title>
	<abstract>The best of a dozen different methods for compressing map data is illustrated.  The choices  are generated by encoding data strings-sequence of like codes-by three methods and in four directions.   Relationships are developed between compression alternatives to avoid comparing all of them.  The technique  has been used to compress data from forest resource maps, but is widely applicable to map and photographic  data reduction.</abstract>
	<conference>CACM December, 1971</conference>
	<authors>
	<author>Amidon, E. L.</author>
	<author>Akin, G. S.</author>
	</authors>
	<keywords>data compression, map storage, information retrieval, input/output, run coding, data reduction</keywords>
	<version>3.71 3.74</version>
	<location>CA711202 JB February 2, 1978  10:23 AM</location>
	<citations>
	<citation>2141	5	2141</citation>
	<citation>2141	5	2141</citation>
	<citation>2141	5	2141</citation>
	</citations>
	</document>
	<document id= '2140'>
	<title>Retrieval-Update Speed Tradeoffs Using Combined Indices</title>
	<abstract>In a paper in the November 1970 Communications of the ACM, V. Y. Lum introduced a technique  of file indexing named combined indices.  This technique permitted decreased retrieval time at the cost  of increased storage space.  This paper examines combined indices under conditions of file usage with  different fractions of retrieval and update.  Tradeoff curves are developed to show minimal cost of file  usage by grouping various partially combined indices.</abstract>
	<conference>CACM December, 1971</conference>
	<authors>
	<author>Mullin, J. K.</author>
	</authors>
	<keywords>file organization, combined index files, inverted files, information retrieval, query, multi-attribute  retrieval, file update</keywords>
	<version>3.73 3.74 3.79</version>
	<location>CA711203 JB February 2, 1978  10:18 AM</location>
	<citations>
	<citation>2140	4	2140</citation>
	<citation>2452	4	2140</citation>
	<citation>2765	4	2140</citation>
	<citation>2901	4	2140</citation>
	<citation>3134	4	2140</citation>
	<citation>1976	5	2140</citation>
	<citation>2140	5	2140</citation>
	<citation>2140	5	2140</citation>
	<citation>2140	5	2140</citation>
	</citations>
	</document>
	<document id= '2139'>
	<title>Implementation of the Substring Test by Hashing</title>
	<abstract>A technique is described for implementing the test which determines if one string is a substring  of another.  When there is low probability that the test will be satisfied, it is shown how the operation  can be speeded up considerably if it is preceded by a test on appropriately chosen hash codes of the  strings.</abstract>
	<conference>CACM December, 1971</conference>
	<authors>
	<author>Harrison, M. C.</author>
	</authors>
	<keywords>substring, hashing, subset, signature, information compression, information retrieval, searching</keywords>
	<version>3.74 5.30 5.6</version>
	<location>CA711204 JB February 2, 1978  10:14 AM</location>
	<citations>
	<citation>2139	5	2139</citation>
	<citation>2139	5	2139</citation>
	<citation>2139	5	2139</citation>
	<citation>2532	5	2139</citation>
	<citation>2631	5	2139</citation>
	<citation>2746	5	2139</citation>
	<citation>3001	5	2139</citation>
	<citation>1665	6	2139</citation>
	<citation>1739	6	2139</citation>
	<citation>2033	6	2139</citation>
	<citation>2139	6	2139</citation>
	<citation>2139	6	2139</citation>
	<citation>2139	6	2139</citation>
	<citation>2139	6	2139</citation>
	<citation>2532	6	2139</citation>
	<citation>2545	6	2139</citation>
	<citation>2786	6	2139</citation>
	</citations>
	</document>
	<document id= '2138'>
	<title>BLISS: A Language for Systems Programming</title>
	<abstract>A language, BLISS, is described.  This language is designed so as to be especially suitable  for use in writing production software systems for a specific machine (the PDP-10): compilers, operating  systems, etc.  Prime design goals of the design are the ability to produce highly efficient object code,  to allow access to all relevant hardware features of the host machine, and to provide a rational means  by which to cope with the evolutionary nature of systems programs.  A major feature which contributes  to the realization of these goals is a mechanism permitting the definition of the representation of all  data structures in terms of the access algorithm for elements of the structure.</abstract>
	<conference>CACM December, 1971</conference>
	<authors>
	<author>Wulf, W. A.</author>
	<author>Russell, D. B.</author>
	</authors>
	<keywords>programming languages, implementation language, systems programming, data structures</keywords>
	<version>4.12 4.21 4.22</version>
	<location>CA711205 JB February 2, 1978  10:09 AM</location>
	<citations>
	<citation>1973	4	2138</citation>
	<citation>1992	4	2138</citation>
	<citation>2138	4	2138</citation>
	<citation>2203	4	2138</citation>
	<citation>2251	4	2138</citation>
	<citation>2530	4	2138</citation>
	<citation>2537	4	2138</citation>
	<citation>2543	4	2138</citation>
	<citation>2559	4	2138</citation>
	<citation>2573	4	2138</citation>
	<citation>2991	4	2138</citation>
	<citation>3053	4	2138</citation>
	<citation>3083	4	2138</citation>
	<citation>2107	5	2138</citation>
	<citation>2138	5	2138</citation>
	<citation>2138	5	2138</citation>
	<citation>2138	5	2138</citation>
	<citation>2411	5	2138</citation>
	<citation>2709	5	2138</citation>
	<citation>2889	5	2138</citation>
	<citation>2937	5	2138</citation>
	<citation>2989	5	2138</citation>
	<citation>3005	5	2138</citation>
	<citation>3025	5	2138</citation>
	<citation>3101	5	2138</citation>
	<citation>1069	6	2138</citation>
	<citation>1425	6	2138</citation>
	<citation>2138	6	2138</citation>
	<citation>2138	6	2138</citation>
	<citation>2138	6	2138</citation>
	<citation>2138	6	2138</citation>
	<citation>2138	6	2138</citation>
	<citation>2138	6	2138</citation>
	<citation>2138	6	2138</citation>
	<citation>2138	6	2138</citation>
	<citation>2193	6	2138</citation>
	<citation>2204	6	2138</citation>
	<citation>2326	6	2138</citation>
	<citation>2388	6	2138</citation>
	<citation>2438	6	2138</citation>
	<citation>2456	6	2138</citation>
	<citation>2455	6	2138</citation>
	<citation>2477	6	2138</citation>
	<citation>2989	6	2138</citation>
	<citation>3185	6	2138</citation>
	</citations>
	</document>
	<document id= '2137'>
	<title>New LISP Techniques for a Paging Environment</title>
	<abstract>The system described herein employs the block concept, and that of global and local variables,  in addition to the methods applied in most LISP systems.  Also, a new means of list representation is  used: "local sequential" for lists created during compilation, and "block level sequential" for those  created dynamically.  A new garbage collection algorithm has been introduced to make lists as compact  as possible; partial garbage collection is performed after each block exit instead of total garbage collection  when storage is exhausted.  The algorithm does not use the customary flagging procedure.  This combination  of features has eliminated the need for a free list, and effectively minimizes the number of pages used  at any moment.</abstract>
	<conference>CACM December, 1971</conference>
	<authors>
	<author>Rochfeld, A.</author>
	</authors>
	<keywords>LISP, list processing, paging, virtual memory, garbage collection, core fragmentation, compact  list structures, block, segment</keywords>
	<version>4.12 4.22 4.32</version>
	<location>CA711206 JB February 2, 1978  10:01 AM</location>
	<citations>
	<citation>1073	4	2137</citation>
	<citation>2137	4	2137</citation>
	<citation>2276	4	2137</citation>
	<citation>1153	5	2137</citation>
	<citation>2137	5	2137</citation>
	<citation>2137	5	2137</citation>
	<citation>2137	5	2137</citation>
	</citations>
	</document>
	<document id= '2136'>
	<title>A Note on "A Modification of Nordsieck's Method Using an 'Off-Step' Point"</title>
	<conference>CACM December, 1971</conference>
	<authors>
	<author>Blumberg, J. W.</author>
	<author>Foulk, C. R.</author>
	</authors>
	<keywords>ordinary differential equations, multi-step methods, predictor, corrector, round-off error, Nordsieck's  method, Gragg-Stetter modification</keywords>
	<version>5.11 5.16 5.17</version>
	<location>CA711207 JB February 2, 1978  9:52 AM</location>
	<citations>
	<citation>2136	5	2136</citation>
	<citation>2136	5	2136</citation>
	<citation>2136	5	2136</citation>
	</citations>
	</document>
	<document id= '2135'>
	<title>Rapid Computation of General Interpolation Formulas and Mechanical Quadrature Rules</title>
	<abstract>Let f have n continuous on a closed interval [a,b] and let L be a linear functional.  The attempt  is made to approximate L (f) with L (Q) where Q is a polynomial, approximating f.  Algorithms are developed  for rapid computation of L (Q) for a wide class of selections of Q which includes the Lagrangian and  Hermitian rules as special cases.</abstract>
	<conference>CACM December, 1971</conference>
	<authors>
	<author>Gustafson, S.</author>
	</authors>
	<keywords>linear functionals, divided differences, Newton's interpolation formula</keywords>
	<version>5.13 5.16</version>
	<location>CA711208 JB February 2, 1978  9:49 AM</location>
	<citations>
	<citation>2135	4	2135</citation>
	<citation>2135	4	2135</citation>
	<citation>2131	5	2135</citation>
	<citation>2135	5	2135</citation>
	<citation>2135	5	2135</citation>
	<citation>2135	5	2135</citation>
	<citation>2132	5	2135</citation>
	<citation>2135	6	2135</citation>
	<citation>2135	6	2135</citation>
	</citations>
	</document>
	<document id= '2134'>
	<title>An Extension of the Munkres Algorithm for the Assignment Problem to Rectangular Matrices</title>
	<abstract>The assignment problem, together with Munkres proposed algorithm for its solution in square  matrices, is presented first.  Then the authors develop an extension of this algorithm which permits  a solution for rectangular matrices.  Timing results obtained by using an adapted version of Silver's  Algol procedure are discussed, and a relation between solution time and problem size is given.</abstract>
	<conference>CACM December, 1971</conference>
	<authors>
	<author>Bourgeois, F.</author>
	<author>Lassalle, J.</author>
	</authors>
	<keywords>operations research, optimization theory, assignment problem, rectangular matrices, algorithm</keywords>
	<version>5.39 5.40</version>
	<location>CA711209 JB February 2, 1978  9:46 AM</location>
	<citations>
	<citation>2133	4	2134</citation>
	<citation>2134	4	2134</citation>
	<citation>124	5	2134</citation>
	<citation>2133	5	2134</citation>
	<citation>2134	5	2134</citation>
	<citation>2134	5	2134</citation>
	<citation>2134	5	2134</citation>
	<citation>124	6	2134</citation>
	<citation>2134	6	2134</citation>
	</citations>
	</document>
	<document id= '2133'>
	<title>Algorithm for the Assignment Problem (Rectangular Matrices) [H] (Algorithm 415)</title>
	<conference>CACM December, 1971</conference>
	<authors>
	<author>Bourgeois, F.</author>
	<author>Lassalle, J. C.</author>
	</authors>
	<keywords>operations research, optimization theory, assignment problem, rectangular matrices</keywords>
	<version>5.39 5.40</version>
	<location>CA711210 JB February 2, 1978  9:38 AM</location>
	<citations>
	<citation>2133	4	2133</citation>
	<citation>2133	4	2133</citation>
	<citation>2134	4	2133</citation>
	<citation>124	5	2133</citation>
	<citation>2133	5	2133</citation>
	<citation>2133	5	2133</citation>
	<citation>2133	5	2133</citation>
	<citation>2134	5	2133</citation>
	</citations>
	</document>
	<document id= '2132'>
	<title>Rapid Computation of Coefficients of Interpolation Formulas [E1] (Algorithm 416)</title>
	<conference>CACM December, 1971</conference>
	<authors>
	<author>Gustafson, S.</author>
	</authors>
	<keywords>divided differences, Newton's interpolation formula</keywords>
	<version>5.13</version>
	<location>CA711211 JB February 2, 1978  9:36 AM</location>
	<citations>
	<citation>2131	4	2132</citation>
	<citation>2132	4	2132</citation>
	<citation>2135	5	2132</citation>
	<citation>2132	5	2132</citation>
	<citation>2132	5	2132</citation>
	<citation>2132	5	2132</citation>
	<citation>2131	6	2132</citation>
	<citation>2132	6	2132</citation>
	</citations>
	</document>
	<document id= '2131'>
	<title>Rapid Computation of Weights of Interpolatory Quadrature Rules [D1] (Algorithm 417)</title>
	<conference>CACM December, 1971</conference>
	<authors>
	<author>Gustafson, S.</author>
	</authors>
	<keywords>divided differences</keywords>
	<version>5.16</version>
	<location>CA711212 JB February 2, 1978  9:33 AM</location>
	<citations>
	<citation>2131	4	2131</citation>
	<citation>2132	4	2131</citation>
	<citation>2131	5	2131</citation>
	<citation>2131	5	2131</citation>
	<citation>2131	5	2131</citation>
	<citation>2135	5	2131</citation>
	<citation>2131	6	2131</citation>
	<citation>2132	6	2131</citation>
	</citations>
	</document>
	<document id= '2130'>
	<title>Automatic Segmentation of Cyclic Program Structures Based on Connectivity and Processor Timing</title>
	<abstract>Time-shared, multiprogrammed, and overlayed batch systems frequently require segmentation of computer programs into discrete portions.   These program portions are transferred between executable and peripheral storage whenever necessary; segmentation of program s in a manner that  reduces the frequency of such transfers is the subject of this paper.  Segmentation techniques proposed by C. V. Ramamoorthy are subject to limitations that arise when the preferred segment size is not compatible with the physical restrictions imposed by the available computing equipment.  A generalization of Ramamoorthy's suggestions is made in order to allow their application  when circumstances are other than ideal.</abstract>
	<conference>CACM January, 1970</conference>
	<authors>
	<author>Lowe, T. C.</author>
	</authors>
	<keywords>automatic segmentation, cyclic program structures, loops, paging,  multiprogramming, loaders, assemblers, compilers, time-sharing, program  connectivity</keywords>
	<version>4.19 5.24 5.32</version>
	<location>CA700101 JB February 14, 1978, 2:20 PM</location>
	<citations>
	<citation>2130	4	2130</citation>
	<citation>1916	5	2130</citation>
	<citation>2130	5	2130</citation>
	<citation>2130	5	2130</citation>
	<citation>2130	5	2130</citation>
	<citation>2582	5	2130</citation>
	<citation>1751	6	2130</citation>
	<citation>1924	6	2130</citation>
	<citation>2017	6	2130</citation>
	<citation>2130	6	2130</citation>
	</citations>
	</document>
	<document id= '2129'>
	<title>Recursive Computation of Certain Derivatives-A Study of Error Propagation</title>
	<abstract>A brief study is made of the propagation of errors in linear first-order difference equations.  The recursive computation of successive derivatives of (e^x)/x and (cos x)/x is considered as an illustration.</abstract>
	<conference>CACM January, 1970</conference>
	<authors>
	<author>Gautschi, W.</author>
	</authors>
	<keywords>recursive computation, successive derivatives, error propagation</keywords>
	<version>5.11 5.12</version>
	<location>CA700102 JB February 14, 1978  2:18 PM</location>
	<citations>
	<citation>2129	4	2129</citation>
	<citation>1449	5	2129</citation>
	<citation>2119	5	2129</citation>
	<citation>2129	5	2129</citation>
	<citation>2129	5	2129</citation>
	<citation>2129	5	2129</citation>
	<citation>2149	5	2129</citation>
	<citation>1023	6	2129</citation>
	<citation>2129	6	2129</citation>
	<citation>2129	6	2129</citation>
	</citations>
	</document>
	<document id= '2128'>
	<title>A Processor Allocation Method for Time-Sharing</title>
	<abstract>A scheduling algorithm is proposed which is intended to minimize changes of  tasks on processors and thereby reduce over-head.  The algorithm also has application to more general resource allocation problems.  It is implemented  by means of a method for efficiently handling dynamically changing segmented  lists.</abstract>
	<conference>CACM January, 1970</conference>
	<authors>
	<author>Mullery, A. P.</author>
	<author>Driscoll, G. C.</author>
	</authors>
	<keywords>time sharing, resource allocation, scheduling algorithms, monitors, dynamic allocation, processor allocation, multiprogramming, multiprocessing, time slicing, scheduling, conversational systems,  interactive systems</keywords>
	<version>3.80 4.30 4.31 4.32 6.33</version>
	<location>CA700103 JB February 14, 1978  2:15 PM</location>
	<citations>
	<citation>1751	4	2128</citation>
	<citation>1892	4	2128</citation>
	<citation>2128	4	2128</citation>
	<citation>2218	4	2128</citation>
	<citation>1752	5	2128</citation>
	<citation>2128	5	2128</citation>
	<citation>2128	5	2128</citation>
	<citation>2128	5	2128</citation>
	</citations>
	</document>
	<document id= '2127'>
	<title>Natural Language Question-Answering Systems: 1969</title>
	<abstract>Recent experiments in programming natural language question-answering systems are reviewed to summarize the methods that have been developed for syntactic, semantic, and logical analysis of English strings.  It is concluded that at least minimally effective techniques have been devised for answering questions from natural language subsets in small scale experimental systems and that a useful paradigm has evolved to guide research efforts in the field.  Current approaches to semantic analysis and logical inference are seen to be effective beginnings but of questionable generality with respect either to subtle aspects of  meaning or to applications over large subsets of English.  Generalizing from current small-scale experiments to language-processing  systems based on dictionaries with thousands of entries-with correspondingly large grammars and semantic systems-may entail a new order of complexity and require the invention and development of entirely different approaches to semantic analysis and questions answering.</abstract>
	<conference>CACM January, 1970</conference>
	<authors>
	<author>Simmons, R. F.</author>
	</authors>
	<keywords>question-answering, natural language, artificial intelligence,language processing, fact retrieval, semantics</keywords>
	<version>3.6 3.64 3.7 3.74</version>
	<location>CA700104 JB February 14, 1978  2:10 PM</location>
	<citations>
	<citation>1155	4	2127</citation>
	<citation>1400	4	2127</citation>
	<citation>1456	4	2127</citation>
	<citation>1468	4	2127</citation>
	<citation>1515	4	2127</citation>
	<citation>1515	4	2127</citation>
	<citation>1553	4	2127</citation>
	<citation>1665	4	2127</citation>
	<citation>1699	4	2127</citation>
	<citation>1768	4	2127</citation>
	<citation>1787	4	2127</citation>
	<citation>1824	4	2127</citation>
	<citation>1825	4	2127</citation>
	<citation>1836	4	2127</citation>
	<citation>1856	4	2127</citation>
	<citation>1861	4	2127</citation>
	<citation>1945	4	2127</citation>
	<citation>2015	4	2127</citation>
	<citation>2096	4	2127</citation>
	<citation>2092	4	2127</citation>
	<citation>2110	4	2127</citation>
	<citation>2127	4	2127</citation>
	<citation>2127	4	2127</citation>
	<citation>2127	4	2127</citation>
	<citation>2127	4	2127</citation>
	<citation>2127	4	2127</citation>
	<citation>2127	4	2127</citation>
	<citation>2187	4	2127</citation>
	<citation>2210	4	2127</citation>
	<citation>2309	4	2127</citation>
	<citation>2310	4	2127</citation>
	<citation>2317	4	2127</citation>
	<citation>2396	4	2127</citation>
	<citation>2396	4	2127</citation>
	<citation>2545	4	2127</citation>
	<citation>2698	4	2127</citation>
	<citation>2730	4	2127</citation>
	<citation>2733	4	2127</citation>
	<citation>1155	5	2127</citation>
	<citation>1324	5	2127</citation>
	<citation>1487	5	2127</citation>
	<citation>1527	5	2127</citation>
	<citation>1781	5	2127</citation>
	<citation>1856	5	2127</citation>
	<citation>2127	5	2127</citation>
	<citation>2127	5	2127</citation>
	<citation>2127	5	2127</citation>
	<citation>2178	5	2127</citation>
	<citation>2396	5	2127</citation>
	<citation>2561	5	2127</citation>
	<citation>1303	6	2127</citation>
	<citation>1323	6	2127</citation>
	<citation>1487	6	2127</citation>
	<citation>1856	6	2127</citation>
	<citation>2059	6	2127</citation>
	<citation>2092	6	2127</citation>
	<citation>2127	6	2127</citation>
	<citation>2127	6	2127</citation>
	<citation>2127	6	2127</citation>
	<citation>3184	6	2127</citation>
	</citations>
	</document>
	<document id= '2126'>
	<title>Experience with an Extensible Language</title>
	<abstract>An operational extensible language system is described. The system and its base language are appraised with  respect to efficiency, flexibility, and utility for different categories of users.</abstract>
	<conference>CACM January, 1970</conference>
	<authors>
	<author>Irons, E. T.</author>
	</authors>
	<keywords>programming languages, extensible, compiler, bootstrapping, ambiguity</keywords>
	<version>4.12 4.22</version>
	<location>CA700105 JB February 14, 1978  2:02 PM</location>
	<citations>
	<citation>249	4	2126</citation>
	<citation>254	4	2126</citation>
	<citation>272	4	2126</citation>
	<citation>1046	4	2126</citation>
	<citation>1102	4	2126</citation>
	<citation>1105	4	2126</citation>
	<citation>1109	4	2126</citation>
	<citation>1139	4	2126</citation>
	<citation>1140	4	2126</citation>
	<citation>1140	4	2126</citation>
	<citation>1188	4	2126</citation>
	<citation>1234	4	2126</citation>
	<citation>1263	4	2126</citation>
	<citation>1265	4	2126</citation>
	<citation>1306	4	2126</citation>
	<citation>1464	4	2126</citation>
	<citation>1491	4	2126</citation>
	<citation>1496	4	2126</citation>
	<citation>1693	4	2126</citation>
	<citation>1767	4	2126</citation>
	<citation>1781	4	2126</citation>
	<citation>1781	4	2126</citation>
	<citation>1781	4	2126</citation>
	<citation>1787	4	2126</citation>
	<citation>1824	4	2126</citation>
	<citation>1824	4	2126</citation>
	<citation>1861	4	2126</citation>
	<citation>1945	4	2126</citation>
	<citation>1949	4	2126</citation>
	<citation>321	4	2126</citation>
	<citation>2059	4	2126</citation>
	<citation>2126	4	2126</citation>
	<citation>2126	4	2126</citation>
	<citation>2126	4	2126</citation>
	<citation>2126	4	2126</citation>
	<citation>2126	4	2126</citation>
	<citation>2317	4	2126</citation>
	<citation>2546	4	2126</citation>
	<citation>435	4	2126</citation>
	<citation>437	4	2126</citation>
	<citation>463	4	2126</citation>
	<citation>464	4	2126</citation>
	<citation>483	4	2126</citation>
	<citation>491	4	2126</citation>
	<citation>2732	4	2126</citation>
	<citation>560	4	2126</citation>
	<citation>583	4	2126</citation>
	<citation>584	4	2126</citation>
	<citation>3073	4	2126</citation>
	<citation>627	4	2126</citation>
	<citation>631	4	2126</citation>
	<citation>631	4	2126</citation>
	<citation>632	4	2126</citation>
	<citation>642	4	2126</citation>
	<citation>644	4	2126</citation>
	<citation>653	4	2126</citation>
	<citation>653	4	2126</citation>
	<citation>680	4	2126</citation>
	<citation>680	4	2126</citation>
	<citation>691	4	2126</citation>
	<citation>761	4	2126</citation>
	<citation>762	4	2126</citation>
	<citation>763	4	2126</citation>
	<citation>763	4	2126</citation>
	<citation>795	4	2126</citation>
	<citation>799	4	2126</citation>
	<citation>123	4	2126</citation>
	<citation>140	4	2126</citation>
	<citation>919	4	2126</citation>
	<citation>945	4	2126</citation>
	<citation>989	4	2126</citation>
	<citation>196	5	2126</citation>
	<citation>1614	5	2126</citation>
	<citation>1693	5	2126</citation>
	<citation>2126	5	2126</citation>
	<citation>2126	5	2126</citation>
	<citation>2126	5	2126</citation>
	<citation>2317	5	2126</citation>
	<citation>2546	5	2126</citation>
	<citation>404	5	2126</citation>
	<citation>823	5	2126</citation>
	<citation>1198	6	2126</citation>
	<citation>1477	6	2126</citation>
	<citation>1491	6	2126</citation>
	<citation>1572	6	2126</citation>
	<citation>1693	6	2126</citation>
	<citation>1749	6	2126</citation>
	<citation>1753	6	2126</citation>
	<citation>1781	6	2126</citation>
	<citation>2126	6	2126</citation>
	<citation>2126	6	2126</citation>
	<citation>2148	6	2126</citation>
	<citation>404	6	2126</citation>
	<citation>3184	6	2126</citation>
	</citations>
	</document>
	<document id= '2125'>
	<title>A Note on Minimal Length Polygonal Approximation to a Digitized Contour</title>
	<abstract>A method for extracting a smooth polygonal contour from a digitized image is illustrated. The ordered sequence of contour points and the connection graph of the image are first obtained by a modified Ledley algorithm in one image scan.  A minimal perimeter polygon subjected to specified constraints is then chosen as the approximating contour.  The determination of the minimal  polygon can be reduced to a nonlinear programming problem, solved by an algorithm which takes into account the weak bonds between variables.  Some examples are presented, and the corresponding computing times are listed.</abstract>
	<conference>CACM January, 1970</conference>
	<authors>
	<author>Montanari, U.</author>
	</authors>
	<keywords>digitized image, connection tree, minimal polygon, optimal approximation, nonlinear programming</keywords>
	<version>3.63 5.13 5.17</version>
	<location>CA700106 JB February 14, 1978  2:00 PM</location>
	<citations>
	<citation>2125	5	2125</citation>
	<citation>2125	5	2125</citation>
	<citation>2125	5	2125</citation>
	<citation>2987	5	2125</citation>
	<citation>1326	6	2125</citation>
	<citation>1630	6	2125</citation>
	<citation>2125	6	2125</citation>
	<citation>2547	6	2125</citation>
	<citation>2633	6	2125</citation>
	<citation>421	6	2125</citation>
	<citation>524	6	2125</citation>
	</citations>
	</document>
	<document id= '2124'>
	<title>Numerical Inversion of Laplace Transforms (Algorithm 368 $D5))</title>
	<conference>CACM January, 1970</conference>
	<authors>
	<author>Stehfest, H.</author>
	</authors>
	<keywords>Laplace transform inversion, integral transformations, integral equations</keywords>
	<version>5.15 5.18</version>
	<location>CA700107 JB February 14, 1978  1:55 PM</location>
	<citations>
	<citation>2124	5	2124</citation>
	<citation>2124	5	2124</citation>
	<citation>2124	5	2124</citation>
	<citation>2591	5	2124</citation>
	<citation>2124	6	2124</citation>
	</citations>
	</document>
	<document id= '2123'>
	<title>Generator of Random Numbers Satisfying the Poisson Distribution (Algorithm 369 $G5))</title>
	<conference>CACM January, 1970</conference>
	<authors>
	<author>Schaffer, H. E.</author>
	</authors>
	<keywords>Poisson distribution, random number generator</keywords>
	<version>5.5</version>
	<location>CA700108 JB February 14, 1978  1:53 PM</location>
	<citations>
	<citation>2123	4	2123</citation>
	<citation>1663	5	2123</citation>
	<citation>2123	5	2123</citation>
	<citation>2123	5	2123</citation>
	<citation>2123	5	2123</citation>
	</citations>
	</document>
	<document id= '2122'>
	<title>General Random Number Generator (Algorithm 370 $G5))</title>
	<conference>CACM January, 1970</conference>
	<authors>
	<author>Butler, E. L.</author>
	</authors>
	<keywords>random number generator, probability density function, transformation, cumulative density function</keywords>
	<version>5.13 5.5</version>
	<location>CA700109 JB February 14, 1978  1:50 PM</location>
	<citations>
	<citation>1794	4	2122</citation>
	<citation>1870	4	2122</citation>
	<citation>2115	4	2122</citation>
	<citation>2122	4	2122</citation>
	<citation>2122	4	2122</citation>
	<citation>1674	5	2122</citation>
	<citation>1691	5	2122</citation>
	<citation>2122	5	2122</citation>
	<citation>2122	5	2122</citation>
	<citation>2122	5	2122</citation>
	</citations>
	</document>
	<document id= '2121'>
	<title>Partitions in Natural Order (Algorithm 371 $A1))</title>
	<conference>CACM January, 1970</conference>
	<authors>
	<author>McKay, J. K. S.</author>
	</authors>
	<keywords>partitions,number theory</keywords>
	<version>5.39</version>
	<location>CA700110 JB February 14, 1978  1:48 PM</location>
	<citations>
	<citation>2121	5	2121</citation>
	<citation>2121	5	2121</citation>
	<citation>2121	5	2121</citation>
	</citations>
	</document>
	<document id= '2120'>
	<title>An Algorithm to Produce Complex Primes, Csieve (Algorithm 372 $A1))</title>
	<conference>CACM January, 1970</conference>
	<authors>
	<author>Dunham, K. B.</author>
	</authors>
	<keywords>primes, complex numbers</keywords>
	<version>5.39</version>
	<location>CA700111 JB February 14, 1978  1:47 PM</location>
	<citations>
	<citation>1841	4	2120</citation>
	<citation>1841	4	2120</citation>
	<citation>1967	4	2120</citation>
	<citation>2120	4	2120</citation>
	<citation>2120	4	2120</citation>
	<citation>2120	4	2120</citation>
	<citation>2927	4	2120</citation>
	<citation>2927	4	2120</citation>
	<citation>1537	5	2120</citation>
	<citation>1539	5	2120</citation>
	<citation>1967	5	2120</citation>
	<citation>377	5	2120</citation>
	<citation>2120	5	2120</citation>
	<citation>2120	5	2120</citation>
	<citation>2120	5	2120</citation>
	<citation>1539	6	2120</citation>
	<citation>2120	6	2120</citation>
	</citations>
	</document>
	<document id= '2119'>
	<title>Derivatives (Algorithm 282 $S22))</title>
	<conference>CACM January, 1970</conference>
	<authors>
	<author>Gautschi, W.</author>
	<author>Klein, B. J.</author>
	</authors>
	<keywords>recursive computation, successive derivatives, error control</keywords>
	<version>5.11 5.12</version>
	<location>CA700112 JB February 14, 1978  1:45 PM</location>
	<citations>
	<citation>1909	4	2119</citation>
	<citation>2119	4	2119</citation>
	<citation>2119	4	2119</citation>
	<citation>2149	4	2119</citation>
	<citation>1023	5	2119</citation>
	<citation>2119	5	2119</citation>
	<citation>2119	5	2119</citation>
	<citation>2119	5	2119</citation>
	<citation>2129	5	2119</citation>
	<citation>2404	5	2119</citation>
	<citation>2119	6	2119</citation>
	</citations>
	</document>
	<document id= '2118'>
	<title>An Efficient Algorithm for Sorting with Minimal Storage (Algorithm 347 $M1))</title>
	<conference>CACM January, 1970</conference>
	<authors>
	<author>Griffin, R.</author>
	<author>Redish, K. A.</author>
	</authors>
	<keywords>sorting,minimal storage sorting, digital computer sorting</keywords>
	<version>5.31</version>
	<location>CA700113 JB February 14, 1978  1:43 PM</location>
	<citations>
	<citation>1919	4	2118</citation>
	<citation>1969	4	2118</citation>
	<citation>2118	4	2118</citation>
	<citation>2348	4	2118</citation>
	<citation>2679	4	2118</citation>
	<citation>3054	4	2118</citation>
	<citation>1175	5	2118</citation>
	<citation>2118	5	2118</citation>
	<citation>2118	5	2118</citation>
	<citation>2118	5	2118</citation>
	</citations>
	</document>
	<document id= '2117'>
	<title>Representation for Calen dar Date for Machine-to-Machine Data Interchange* (Proposed American National Standard)</title>
	<conference>CACM January, 1970</conference>
	<keywords>calendar date, machine-to-machine interchange, month, year, day, representation coded</keywords>
	<version>3.70 3.73 3.74 3.9</version>
	<location>CA700114 JB February 14, 1978  1:42 PM</location>
	<citations>
	<citation>2117	5	2117</citation>
	<citation>2117	5	2117</citation>
	<citation>2117	5	2117</citation>
	</citations>
	</document>
	<document id= '2116'>
	<title>Interchange Rolls of Perforated Tape for Information Interchange* (Proposed American National Standard)</title>
	<conference>CACM January, 1970</conference>
	<keywords>interchange, rolls, perforated tape, tape, information interchange, directional markers, leaders,  trailers, roll-up tape, 9-track paper tape, dimensions</keywords>
	<version>3.70 6.33 6.34 6.35 6.36</version>
	<location>CA700115 JB February 14, 1978  1:14 PM</location>
	<citations>
	<citation>2116	5	2116</citation>
	<citation>2116	5	2116</citation>
	<citation>2116	5	2116</citation>
	</citations>
	</document>
	<document id= '2115'>
	<title>Fortran Tausworthe Pseudorandom Number Generator</title>
	<conference>CACM January, 1970</conference>
	<authors>
	<author>Payne, W. H.</author>
	</authors>
	<keywords>random numbers, pseudorandom numbers, shift register sequences</keywords>
	<version>5.5</version>
	<location>CA700116 JB February 14, 1978  1:06 PM</location>
	<citations>
	<citation>2115	4	2115</citation>
	<citation>2115	4	2115</citation>
	<citation>2122	4	2115</citation>
	<citation>1691	5	2115</citation>
	<citation>1930	5	2115</citation>
	<citation>2115	5	2115</citation>
	<citation>2115	5	2115</citation>
	<citation>2115	5	2115</citation>
	</citations>
	</document>
	<document id= '2114'>
	<title>A Formal System for Information Retrieval from Files</title>
	<abstract>A generalized file structure is provided by which the concepts of keyword, index, record, file, directory, file structure, directory decoding, and record retrieval are defined and from which some of the frequently used file structures such as inverted files, index-sequential files, and multilist files are derived.  Two algorithms which retrieve records from the generalized file  structure are presented.</abstract>
	<conference>CACM February, 1970</conference>
	<authors>
	<author>Hsiao, D.</author>
	</authors>
	<keywords>attribute-value pair, index, keyword, record, record address, K-pointer, K-list, file, directory, generalized file structure, inverted file, index-sequential-file, multilist file, description, file search, directory search, serial processing of lists, prime keyword, parallel processing of lists</keywords>
	<version>3.70 3.73 3.74</version>
	<location>CA700201 JB February 14, 1978  1:04 PM</location>
	<citations>
	<citation>2114	5	2114</citation>
	<citation>2114	5	2114</citation>
	<citation>2114	5	2114</citation>
	<citation>2160	5	2114</citation>
	<citation>2688	5	2114</citation>
	<citation>2114	6	2114</citation>
	<citation>2114	6	2114</citation>
	</citations>
	</document>
	<document id= '2113'>
	<title>The Multistore Parser for Hierarchical Syntactic Structures</title>
	<abstract>A syntactic parser is described for hierarchical concatenation patterns that are presented to the analyzer in the form of linear strings.  Particular emphasis is given to the system of "significant addresses" by means of which processing times for large-scale matching procedures can be substantially reduced.  The description makes frequent use of examples taken from the fully operational implementation of the parser in an experimental English sentence analyzer.  By structuring an area of the computer's central core storage in such a way that the individual locations of bytes and bits come to represent the data involved in the matching procedure, the shifting of information is reduced to a minimum, and the searching of lists is eliminated altogether.  The matches are traced by means of binary masks and the state of single bits determines the operational flow of the procedure.  The method could be implemented with any interpretive grammar, provided it can be expressed by the functional classification of the items composing the input hierarchical structures.</abstract>
	<conference>CACM February, 1970</conference>
	<authors>
	<author>Glasersfeld, E.</author>
	</authors>
	<keywords>parsing, syntactic analysis, natural-language analysis, linguistic data processing, computational linguistics, correlational grammar, structure recognition, pattern recognition, matching procedures, tree-structure  interpretation, machine translation, automatic abstracting</keywords>
	<version>3.42 3.49 3.63 3.70 3.71</version>
	<location>CA700202 JB February 14, 1978  12:57 PM</location>
	<citations>
	<citation>2113	5	2113</citation>
	<citation>2113	5	2113</citation>
	<citation>2113	5	2113</citation>
	</citations>
	</document>
	<document id= '2112'>
	<title>Translation Equations</title>
	<abstract>Input limited transduction expressions, or translation equations, are used to describe the syntax and left-context sensitive semantics for  context-free languages.  A formal procedure is given for deriving from a set of translation equations the specifications for a pushdown translator. The translator consists of Mealy form finite-state automata interacting by means of a pushdown stack.  Within the framework described string  recognition and parsing may be treated as special cases of the translation  problem.</abstract>
	<conference>CACM February, 1970</conference>
	<authors>
	<author>Vere, S.</author>
	</authors>
	<keywords>automata, Turing machines, regular expression, transduction expression, context-free languages, translation, recognizers, parsing, meta-compilers, pushdown transducer, syntax directed compilers, finite state automata</keywords>
	<version>4.10 4.12 4.20 5.22</version>
	<location>CA700203 JB February 14, 1978  10:49 AM</location>
	<citations>
	<citation>1323	4	2112</citation>
	<citation>1358	4	2112</citation>
	<citation>1380	4	2112</citation>
	<citation>1665	4	2112</citation>
	<citation>1781	4	2112</citation>
	<citation>1787	4	2112</citation>
	<citation>1989	4	2112</citation>
	<citation>2112	4	2112</citation>
	<citation>2534	4	2112</citation>
	<citation>2541	4	2112</citation>
	<citation>2698	4	2112</citation>
	<citation>2733	4	2112</citation>
	<citation>2820	4	2112</citation>
	<citation>3073	4	2112</citation>
	<citation>3155	4	2112</citation>
	<citation>2112	5	2112</citation>
	<citation>2112	5	2112</citation>
	<citation>2112	5	2112</citation>
	<citation>799	5	2112</citation>
	</citations>
	</document>
	<document id= '2111'>
	<title>Spelling Correction in Systems Programs</title>
	<abstract>Several specialized techniques are shown for efficiently incorporating spelling correction algorithms in to compilers and operating systems.  These include the use of syntax and semantics information, the organization of restricted keyword and symbol tables, and the consideration of a limited class of spelling errors.  Sample 360 coding for performing spelling correction is presented.  By using systems which perform spelling correction, the number of debugging runs per program has been decreased, saving both programmer and machine time.</abstract>
	<conference>CACM February, 1970</conference>
	<authors>
	<author>Morgan, H. L.</author>
	</authors>
	<keywords>spelling correction, error correction, debugging, compilers, operating systems, diagnostics, error detection,  misspelling, lexical analysis systems programming</keywords>
	<version>4.42 4.12 3.0 3.79</version>
	<location>CA700204 JB February 14, 1978  10:40 AM</location>
	<citations>
	<citation>1112	4	2111</citation>
	<citation>1179	4	2111</citation>
	<citation>1288	4	2111</citation>
	<citation>1544	4	2111</citation>
	<citation>1592	4	2111</citation>
	<citation>1592	4	2111</citation>
	<citation>1646	4	2111</citation>
	<citation>2111	4	2111</citation>
	<citation>2111	4	2111</citation>
	<citation>2111	4	2111</citation>
	<citation>2111	4	2111</citation>
	<citation>2339	4	2111</citation>
	<citation>2339	4	2111</citation>
	<citation>2339	4	2111</citation>
	<citation>2534	4	2111</citation>
	<citation>2556	4	2111</citation>
	<citation>440	4	2111</citation>
	<citation>2650	4	2111</citation>
	<citation>1112	5	2111</citation>
	<citation>1592	5	2111</citation>
	<citation>2111	5	2111</citation>
	<citation>2111	5	2111</citation>
	<citation>2111	5	2111</citation>
	<citation>2534	5	2111</citation>
	<citation>2556	5	2111</citation>
	<citation>2650	5	2111</citation>
	<citation>2708	5	2111</citation>
	<citation>2887	5	2111</citation>
	<citation>619	5	2111</citation>
	<citation>830	5	2111</citation>
	<citation>830	6	2111</citation>
	<citation>830	6	2111</citation>
	<citation>830	6	2111</citation>
	<citation>1477	6	2111</citation>
	<citation>1491	6	2111</citation>
	<citation>1646	6	2111</citation>
	<citation>1787	6	2111</citation>
	<citation>1787	6	2111</citation>
	<citation>1935	6	2111</citation>
	<citation>1936	6	2111</citation>
	<citation>1959	6	2111</citation>
	<citation>1973	6	2111</citation>
	<citation>2111	6	2111</citation>
	<citation>2111	6	2111</citation>
	<citation>2111	6	2111</citation>
	<citation>2111	6	2111</citation>
	<citation>2111	6	2111</citation>
	<citation>2182	6	2111</citation>
	<citation>2534	6	2111</citation>
	<citation>2556	6	2111</citation>
	<citation>576	6	2111</citation>
	<citation>680	6	2111</citation>
	<citation>680	6	2111</citation>
	<citation>799	6	2111</citation>
	</citations>
	</document>
	<document id= '2110'>
	<title>An Efficient Context-free Parsing Algorithm</title>
	<abstract>A parsing algorithm which seems to be the most efficient general context-free  algorithm known is described.  It is similar to both Knuth's LR(k) algorithm  and the familiar top-down algorithm.  It has a time bound proportional to  n^3 (where n is the length of the string being parsed) in general; it has a  n^2 bound for unambiguous grammars; and it runs in linear time on a large  class of grammars, which seems to include most practical context-free programming language grammars.  In an empirical comparison it appears to be superior to the top-down and bottom-up algorithms studied by Griffiths  and Petrick.</abstract>
	<conference>CACM February, 1970</conference>
	<authors>
	<author>Earley, J.</author>
	</authors>
	<keywords>syntax analysis, parsing, context-free grammar, compilers, computational complexity</keywords>
	<version>4.12 5.22 5.23</version>
	<location>CA700205 JB February 14, 1978  10:35 AM</location>
	<citations>
	<citation>1350	4	2110</citation>
	<citation>1399	4	2110</citation>
	<citation>1659	4	2110</citation>
	<citation>1665	4	2110</citation>
	<citation>1768	4	2110</citation>
	<citation>1768	4	2110</citation>
	<citation>1781	4	2110</citation>
	<citation>1787	4	2110</citation>
	<citation>1824	4	2110</citation>
	<citation>1825	4	2110</citation>
	<citation>1836	4	2110</citation>
	<citation>1861	4	2110</citation>
	<citation>1945	4	2110</citation>
	<citation>2015	4	2110</citation>
	<citation>2110	4	2110</citation>
	<citation>2110	4	2110</citation>
	<citation>2127	4	2110</citation>
	<citation>2187	4	2110</citation>
	<citation>2317	4	2110</citation>
	<citation>2545	4	2110</citation>
	<citation>2698	4	2110</citation>
	<citation>2733	4	2110</citation>
	<citation>3094	4	2110</citation>
	<citation>1265	5	2110</citation>
	<citation>1781	5	2110</citation>
	<citation>1989	5	2110</citation>
	<citation>2060	5	2110</citation>
	<citation>2110	5	2110</citation>
	<citation>2110	5	2110</citation>
	<citation>2110	5	2110</citation>
	<citation>2179	5	2110</citation>
	<citation>2698	5	2110</citation>
	<citation>2921	5	2110</citation>
	<citation>3154	5	2110</citation>
	<citation>1380	6	2110</citation>
	<citation>1421	6	2110</citation>
	<citation>1469	6	2110</citation>
	<citation>1477	6	2110</citation>
	<citation>1477	6	2110</citation>
	<citation>1477	6	2110</citation>
	<citation>1491	6	2110</citation>
	<citation>1491	6	2110</citation>
	<citation>1491	6	2110</citation>
	<citation>1781	6	2110</citation>
	<citation>1825	6	2110</citation>
	<citation>210	6	2110</citation>
	<citation>1869	6	2110</citation>
	<citation>1989	6	2110</citation>
	<citation>2015	6	2110</citation>
	<citation>2046	6	2110</citation>
	<citation>2110	6	2110</citation>
	<citation>2110	6	2110</citation>
	<citation>2110	6	2110</citation>
	<citation>2110	6	2110</citation>
	<citation>2110	6	2110</citation>
	<citation>2110	6	2110</citation>
	<citation>2556	6	2110</citation>
	<citation>3133	6	2110</citation>
	<citation>3184	6	2110</citation>
	<citation>680	6	2110</citation>
	<citation>799	6	2110</citation>
	<citation>799	6	2110</citation>
	</citations>
	</document>
	<document id= '2109'>
	<title>The Use of Quadratic Residue Research</title>
	<abstract>A quadratic residue search method has previously been suggested to avoid the clustering usually encountered when hash address collisions occur and linear search methods are used.  The search size, because of the property of quadratic residues, is limited to one half of the storage table.  It is shown that for some classes of prime numbers the complement of the set of quadratic residues can easily be determined and  hence the entire table of size p, where p is that prime number, can be searched.</abstract>
	<conference>CACM February, 1970</conference>
	<authors>
	<author>Radke, C. E.</author>
	</authors>
	<keywords>quadratic residue, search method, hash addressing, address clustering, scatter storage, file searching, file addressing, hash coding, quadratic search, random search, storage layout, searching</keywords>
	<version>3.7 3.73 3.74</version>
	<location>CA700206 JB February 14, 1978  10:30 AM</location>
	<citations>
	<citation>1676	4	2109</citation>
	<citation>1682	4	2109</citation>
	<citation>1728	4	2109</citation>
	<citation>1860	4	2109</citation>
	<citation>1860	4	2109</citation>
	<citation>1973	4	2109</citation>
	<citation>1973	4	2109</citation>
	<citation>1992	4	2109</citation>
	<citation>2018	4	2109</citation>
	<citation>2018	4	2109</citation>
	<citation>2032	4	2109</citation>
	<citation>2033	4	2109</citation>
	<citation>2033	4	2109</citation>
	<citation>2107	4	2109</citation>
	<citation>2107	4	2109</citation>
	<citation>2109	4	2109</citation>
	<citation>2109	4	2109</citation>
	<citation>2203	4	2109</citation>
	<citation>2203	4	2109</citation>
	<citation>2251	4	2109</citation>
	<citation>2251	4	2109</citation>
	<citation>2359	4	2109</citation>
	<citation>2524	4	2109</citation>
	<citation>2543	4	2109</citation>
	<citation>2543	4	2109</citation>
	<citation>2552	4	2109</citation>
	<citation>2559	4	2109</citation>
	<citation>2573	4	2109</citation>
	<citation>2770	4	2109</citation>
	<citation>2991	4	2109</citation>
	<citation>3053	4	2109</citation>
	<citation>1785	5	2109</citation>
	<citation>1786	5	2109</citation>
	<citation>1973	5	2109</citation>
	<citation>2018	5	2109</citation>
	<citation>2109	5	2109</citation>
	<citation>2109	5	2109</citation>
	<citation>2109	5	2109</citation>
	<citation>2203	5	2109</citation>
	<citation>2251	5	2109</citation>
	<citation>2543	5	2109</citation>
	<citation>2770	5	2109</citation>
	<citation>2974	5	2109</citation>
	<citation>3053	5	2109</citation>
	<citation>911	6	2109</citation>
	<citation>1329	6	2109</citation>
	<citation>1785	6	2109</citation>
	<citation>1785	6	2109</citation>
	<citation>1785	6	2109</citation>
	<citation>1785	6	2109</citation>
	<citation>1785	6	2109</citation>
	<citation>1785	6	2109</citation>
	<citation>1786	6	2109</citation>
	<citation>1786	6	2109</citation>
	<citation>1786	6	2109</citation>
	<citation>1786	6	2109</citation>
	<citation>1786	6	2109</citation>
	<citation>1786	6	2109</citation>
	<citation>1869	6	2109</citation>
	<citation>1973	6	2109</citation>
	<citation>1973	6	2109</citation>
	<citation>1973	6	2109</citation>
	<citation>1973	6	2109</citation>
	<citation>1992	6	2109</citation>
	<citation>1992	6	2109</citation>
	<citation>332	6	2109</citation>
	<citation>2018	6	2109</citation>
	<citation>2018	6	2109</citation>
	<citation>2107	6	2109</citation>
	<citation>2107	6	2109</citation>
	<citation>2107	6	2109</citation>
	<citation>2107	6	2109</citation>
	<citation>2107	6	2109</citation>
	<citation>2109	6	2109</citation>
	<citation>2109	6	2109</citation>
	<citation>2109	6	2109</citation>
	<citation>2109	6	2109</citation>
	<citation>2109	6	2109</citation>
	<citation>2109	6	2109</citation>
	<citation>2109	6	2109</citation>
	<citation>2109	6	2109</citation>
	<citation>2251	6	2109</citation>
	<citation>2412	6	2109</citation>
	<citation>2543	6	2109</citation>
	<citation>2673	6	2109</citation>
	<citation>2673	6	2109</citation>
	<citation>2707	6	2109</citation>
	<citation>2770	6	2109</citation>
	<citation>492	6	2109</citation>
	</citations>
	</document>
	<document id= '2108'>
	<title>A Variation on Sorting by Address Calculation</title>
	<abstract>The principles of address calculation and merging are combined to yield an efficient sorting technique. Detailed flowcharts of the most important program steps are included. The characteristics of the proposed sort are discussed.</abstract>
	<conference>CACM February, 1970</conference>
	<authors>
	<author>Jones, B.</author>
	</authors>
	<keywords>sorting, address calculation, merging, order, sequence creation</keywords>
	<version>4.49 5.31</version>
	<location>CA700207 JB February 14, 1978  10:24 AM</location>
	<citations>
	<citation>2108	5	2108</citation>
	<citation>2108	5	2108</citation>
	<citation>2108	5	2108</citation>
	</citations>
	</document>
	<document id= '2107'>
	<title>The Quadratic Quotient Method: A Hash Code Eliminating Secondary Clustering</title>
	<abstract>Secondary clustering as a cause of hash code inefficiency is discussed, and a  new hashing method based on its elimination is presented.  Comparisons with  previous methods are made both analytically and empirically.</abstract>
	<conference>CACM February, 1970</conference>
	<authors>
	<author>Bell, J. R.</author>
	</authors>
	<keywords>hashing, hash code, scatter storage, calculated address, clustering, search, symbol table, collisions, keys, table look-up</keywords>
	<version>3.74 4.9</version>
	<location>CA700208 JB February 14, 1978  10:18 AM</location>
	<citations>
	<citation>1676	4	2107</citation>
	<citation>1682	4	2107</citation>
	<citation>1728	4	2107</citation>
	<citation>1860	4	2107</citation>
	<citation>1860	4	2107</citation>
	<citation>1973	4	2107</citation>
	<citation>1973	4	2107</citation>
	<citation>1992	4	2107</citation>
	<citation>2018	4	2107</citation>
	<citation>2018	4	2107</citation>
	<citation>2032	4	2107</citation>
	<citation>2033	4	2107</citation>
	<citation>2033	4	2107</citation>
	<citation>2107	4	2107</citation>
	<citation>2107	4	2107</citation>
	<citation>2109	4	2107</citation>
	<citation>2109	4	2107</citation>
	<citation>2203	4	2107</citation>
	<citation>2203	4	2107</citation>
	<citation>2251	4	2107</citation>
	<citation>2251	4	2107</citation>
	<citation>2359	4	2107</citation>
	<citation>2524	4	2107</citation>
	<citation>2543	4	2107</citation>
	<citation>2543	4	2107</citation>
	<citation>2552	4	2107</citation>
	<citation>2559	4	2107</citation>
	<citation>2573	4	2107</citation>
	<citation>2770	4	2107</citation>
	<citation>2991	4	2107</citation>
	<citation>3053	4	2107</citation>
	<citation>1785	5	2107</citation>
	<citation>1786	5	2107</citation>
	<citation>1973	5	2107</citation>
	<citation>1992	5	2107</citation>
	<citation>2107	5	2107</citation>
	<citation>2107	5	2107</citation>
	<citation>2107	5	2107</citation>
	<citation>2138	5	2107</citation>
	<citation>2203	5	2107</citation>
	<citation>2251	5	2107</citation>
	<citation>2530	5	2107</citation>
	<citation>2537	5	2107</citation>
	<citation>2543	5	2107</citation>
	<citation>2559	5	2107</citation>
	<citation>2573	5	2107</citation>
	<citation>2991	5	2107</citation>
	<citation>3053	5	2107</citation>
	<citation>3083	5	2107</citation>
	<citation>911	6	2107</citation>
	<citation>1328	6	2107</citation>
	<citation>1329	6	2107</citation>
	<citation>1785	6	2107</citation>
	<citation>1785	6	2107</citation>
	<citation>1785	6	2107</citation>
	<citation>1785	6	2107</citation>
	<citation>1785	6	2107</citation>
	<citation>1785	6	2107</citation>
	<citation>1785	6	2107</citation>
	<citation>1786	6	2107</citation>
	<citation>1786	6	2107</citation>
	<citation>1786	6	2107</citation>
	<citation>1786	6	2107</citation>
	<citation>1786	6	2107</citation>
	<citation>1786	6	2107</citation>
	<citation>1973	6	2107</citation>
	<citation>1973	6	2107</citation>
	<citation>1973	6	2107</citation>
	<citation>1973	6	2107</citation>
	<citation>1973	6	2107</citation>
	<citation>1992	6	2107</citation>
	<citation>332	6	2107</citation>
	<citation>2018	6	2107</citation>
	<citation>2018	6	2107</citation>
	<citation>2107	6	2107</citation>
	<citation>2107	6	2107</citation>
	<citation>2107	6	2107</citation>
	<citation>2107	6	2107</citation>
	<citation>2107	6	2107</citation>
	<citation>2107	6	2107</citation>
	<citation>2107	6	2107</citation>
	<citation>2107	6	2107</citation>
	<citation>2107	6	2107</citation>
	<citation>2107	6	2107</citation>
	<citation>2107	6	2107</citation>
	<citation>2107	6	2107</citation>
	<citation>2107	6	2107</citation>
	<citation>2109	6	2107</citation>
	<citation>2109	6	2107</citation>
	<citation>2109	6	2107</citation>
	<citation>2109	6	2107</citation>
	<citation>2109	6	2107</citation>
	<citation>2203	6	2107</citation>
	<citation>2412	6	2107</citation>
	<citation>2530	6	2107</citation>
	<citation>2537	6	2107</citation>
	<citation>2543	6	2107</citation>
	<citation>2543	6	2107</citation>
	<citation>2552	6	2107</citation>
	<citation>2673	6	2107</citation>
	<citation>2707	6	2107</citation>
	<citation>2770	6	2107</citation>
	<citation>492	6	2107</citation>
	</citations>
	</document>
	<document id= '2106'>
	<title>Computer Education in a Graduate School of Management</title>
	<abstract>Several years of experience have led to the belief that the creative design and evaluation of management information systems requires a thorough understanding of the related computer technology.  Concepts such as paging and priority interrupt systems can best be explained at the  machine language level.  Any machine used for exposition should fulfill several criteria.  It should: (1) raise as few spurious issues as possible; (2) allow, without undue effort, the solution of interesting problems; (3) be capable of exposing all outstanding issues of significance, capable of exposing all outstanding issues of significance, within the chosen machine; (4) be seful for pursuing issues in great depth when appropriate; (5) not be committed to the equipment provided by any manufacturer; (6) be able to  provide the student with diagnostic aids to a great depth; (7) allow the student ready access to the machine; (8) be capable of extension to expose new issues as they come along.  We have constructed a simulated machine and its associated software which meets these criteria.  This system, called the PRISM system, is documented by a primer and a reference manual.</abstract>
	<conference>CACM February, 1970</conference>
	<authors>
	<author>Ness, D. N.</author>
	<author>Green, R. S.</author>
	<author>Martin, W. A.</author>
	<author>Moulton, G. A.</author>
	</authors>
	<keywords>education, simulation, machine language, management information systems, interpreters</keywords>
	<version>1.52 3.51 4.13 4.21</version>
	<location>CA700209 JB February 14, 1978  10:15 AM</location>
	<citations>
	<citation>2106	5	2106</citation>
	<citation>2106	5	2106</citation>
	<citation>2106	5	2106</citation>
	</citations>
	</document>
	<document id= '2105'>
	<title>An Interactive Computer System Using Graphical Flowchart Input</title>
	<abstract>An interactive computer system operational on a graphical computer terminal is  described.  This system was designed to demonstrate a method of programming by  computer interpretation of a flowchart.  The user draws a description of a sampled-data system and specifies description is transmitted to a large scale computer.  The design is simulated, and a graphic representation of the  processed signal is returned to the scope.  A successful design may require  numerous modifications of the original design.  A graphical interactive system  provides an environment to perform this iterative process efficiently and  effectively.</abstract>
	<conference>CACM February, 1970</conference>
	<authors>
	<author>Robins, M. F.</author>
	<author>Beyer, J. D.</author>
	</authors>
	<keywords>simulation program, graphical input-output sampled data systems</keywords>
	<version>3.20 3.24</version>
	<location>CA700210 JB February 14, 1978  9:57 AM</location>
	<citations>
	<citation>2003	5	2105</citation>
	<citation>2105	5	2105</citation>
	<citation>2105	5	2105</citation>
	<citation>2105	5	2105</citation>
	<citation>1710	6	2105</citation>
	<citation>1767	6	2105</citation>
	<citation>2105	6	2105</citation>
	</citations>
	</document>
	<document id= '2104'>
	<title>Number of Doubly Restricted Partitions (Algorithm 373 $A1))</title>
	<conference>CACM February, 1970</conference>
	<authors>
	<author>White, J. S.</author>
	</authors>
	<keywords>partitions, restricted partitions, sums of integers, restricted sums</keywords>
	<version>5.39</version>
	<location>CA700211 JB February 14, 1978  9:52 AM</location>
	<citations>
	<citation>2104	4	2104</citation>
	<citation>2489	4	2104</citation>
	<citation>1219	5	2104</citation>
	<citation>2104	5	2104</citation>
	<citation>2104	5	2104</citation>
	<citation>2104	5	2104</citation>
	<citation>2489	5	2104</citation>
	<citation>1219	6	2104</citation>
	<citation>2104	6	2104</citation>
	</citations>
	</document>
	<document id= '2103'>
	<title>Restricted Partition Generator (Algorithm 374 $A1))</title>
	<conference>CACM February, 1970</conference>
	<authors>
	<author>White, J. S.</author>
	</authors>
	<keywords>partitions, restricted partitions, sums of integers, restricted sums</keywords>
	<version>5.39</version>
	<location>CA700212 JB February 14, 1978  9:49 AM</location>
	<citations>
	<citation>2103	4	2103</citation>
	<citation>1218	5	2103</citation>
	<citation>2103	5	2103</citation>
	<citation>2103	5	2103</citation>
	<citation>2103	5	2103</citation>
	</citations>
	</document>
	<document id= '2102'>
	<title>Fitting Data To One Exponential (Algorithm 375 $E2))</title>
	<conference>CACM February, 1970</conference>
	<authors>
	<author>Spath, H.</author>
	</authors>
	<keywords>nonlinear least squares fit</keywords>
	<version>5.15</version>
	<location>CA700213 JB February 14, 1978 9:49 PM</location>
	<citations>
	<citation>2101	4	2102</citation>
	<citation>2102	4	2102</citation>
	<citation>1639	5	2102</citation>
	<citation>2102	5	2102</citation>
	<citation>2102	5	2102</citation>
	<citation>2102	5	2102</citation>
	</citations>
	</document>
	<document id= '2101'>
	<title>Least Squares Fit By f(x) = Acos(Bx+C) (Algorithm 376 $E2))</title>
	<conference>CACM February, 1970</conference>
	<authors>
	<author>Spath, H.</author>
	</authors>
	<keywords>nonlinear least squares fit</keywords>
	<version>5.15</version>
	<location>CA700214 JB February 14, 1978  9:47 AM</location>
	<citations>
	<citation>2101	4	2101</citation>
	<citation>2102	4	2101</citation>
	<citation>1639	5	2101</citation>
	<citation>2101	5	2101</citation>
	<citation>2101	5	2101</citation>
	<citation>2101	5	2101</citation>
	</citations>
	</document>
	<document id= '2100'>
	<title>Ortho (Algorithm 127 $F5))</title>
	<conference>CACM February, 1970</conference>
	<authors>
	<author>Barrodale, I.</author>
	</authors>
	<keywords>orthogonalization, approximation</keywords>
	<version>5.13 5.17 5.5</version>
	<location>CA700215 JB February 14, 1978  9:45 AM</location>
	<citations>
	<citation>2100	5	2100</citation>
	<citation>2100	5	2100</citation>
	<citation>2100	5	2100</citation>
	</citations>
	</document>
	<document id= '2099'>
	<title>Eigenvalues and Eigen vectors of a Real General Matrix (Algorithm 343 $F))</title>
	<conference>CACM February, 1970</conference>
	<authors>
	<author>Knoble, H. D.</author>
	</authors>
	<keywords>norm, characteristic equation, degenerate eigen-system, diagonalizable matrix, defective matrix</keywords>
	<version>5.14</version>
	<location>CA700216 JB February 14, 1978  9:43 AM</location>
	<citations>
	<citation>1876	4	2099</citation>
	<citation>1968	4	2099</citation>
	<citation>2099	4	2099</citation>
	<citation>2099	4	2099</citation>
	<citation>2335	4	2099</citation>
	<citation>1662	5	2099</citation>
	<citation>1707	5	2099</citation>
	<citation>1968	5	2099</citation>
	<citation>2099	5	2099</citation>
	<citation>2099	5	2099</citation>
	<citation>2099	5	2099</citation>
	<citation>1662	6	2099</citation>
	<citation>2099	6	2099</citation>
	</citations>
	</document>
	<document id= '2098'>
	<title>t-Test Probabilities (Algorithm 321); Student's t-Distribution (Algorithm 344)</title>
	<conference>CACM February, 1970</conference>
	<authors>
	<author>Hill, G. W.</author>
	<author>Loughhead, M.</author>
	</authors>
	<keywords>t-test, Student's t-statistic, distribution function, approximation</keywords>
	<version>5.12 5.5</version>
	<location>CA700217 JB February 14, 1978  8:45 AM</location>
	<citations>
	<citation>2098	5	2098</citation>
	<citation>2098	5	2098</citation>
	<citation>2098	5	2098</citation>
	</citations>
	</document>
	<document id= '2097'>
	<title>A Program to Teach Programming</title>
	<abstract>The TEACH system was developed at MIT to ease the cost and improve the results  of elementary instruction in programming.  To the student, TEACH offers loosely  guided experience with a  conversational language which was designed with teaching in mind.  Faculty involvement is minimal.  A term of experience with TEACH is discussed.  Pedagogically, the system appears to be successful;  straightforward reimplementation will make it economically successful as well.  Similar programs of profound tutorial skill will appear only as the results of extended research.  The outlines of his research are beginning to become clear.</abstract>
	<conference>CACM March, 1970</conference>
	<authors>
	<author>Fenichel, R. R.</author>
	<author>Weizenbaum, J.</author>
	<author>Yochelson, J. C.</author>
	</authors>
	<keywords>elementary programming, computer-assisted learning, UNCL, TEACH</keywords>
	<version>1.52</version>
	<location>CA700301 JB February 14, 1978  8:42 AM</location>
	<citations>
	<citation>2097	5	2097</citation>
	<citation>2097	5	2097</citation>
	<citation>2097	5	2097</citation>
	<citation>2153	5	2097</citation>
	<citation>3003	5	2097</citation>
	<citation>1659	6	2097</citation>
	<citation>1678	6	2097</citation>
	<citation>1927	6	2097</citation>
	<citation>1945	6	2097</citation>
	<citation>2097	6	2097</citation>
	<citation>2097	6	2097</citation>
	<citation>2147	6	2097</citation>
	<citation>2163	6	2097</citation>
	<citation>2187	6	2097</citation>
	<citation>2329	6	2097</citation>
	<citation>2345	6	2097</citation>
	<citation>2367	6	2097</citation>
	<citation>2407	6	2097</citation>
	<citation>2478	6	2097</citation>
	<citation>2479	6	2097</citation>
	<citation>2480	6	2097</citation>
	<citation>2538	6	2097</citation>
	</citations>
	</document>
	<document id= '2096'>
	<title>Experiments with the M &amp;  N Tree-Searching Program</title>
	<abstract>The M &amp; N procedure is an improvement to the mini-max backing-up procedure widely used in computer program for game-playing and other purposes.  It is based on the principle that it is desirable to have many options when making decisions in the face of uncertainty.  The mini-max procedure assigns to a MAX (MIN) node the value of the highest (lowest) valued successor to that node.  The M &amp; N procedure assigns to a MAX (MIN) node some function of the M (N) highest (lowest) valued successors.  An M &amp; N procedure was written in LISP to play the game of kalah, and it was demonstrated that  the M &amp; N procedure is significantly superior to the mini-max procedure.  The statistical significance of important conclusions is given.  Since information on statistical significance has often been lacking in papers  on computer experiments in the artificial intelligence field, these experiments  can perhaps serve as a model for future work.</abstract>
	<conference>CACM March, 1970</conference>
	<authors>
	<author>Slagle, J. R.</author>
	<author>Dixon, J. K.</author>
	</authors>
	<keywords>artificial intelligence, heuristic program, tree searching, LISP, kalah, game playing, decision theory,  mini-max backing-up procedure, backing-up procedures</keywords>
	<version>3.60 3.64 3.66</version>
	<location>CA700302 JB February 14, 1978  8:34 AM</location>
	<citations>
	<citation>1515	4	2096</citation>
	<citation>2096	4	2096</citation>
	<citation>2127	4	2096</citation>
	<citation>2210	4	2096</citation>
	<citation>1155	5	2096</citation>
	<citation>2096	5	2096</citation>
	<citation>2096	5	2096</citation>
	<citation>2096	5	2096</citation>
	<citation>2215	5	2096</citation>
	<citation>2096	6	2096</citation>
	</citations>
	</document>
	<document id= '2095'>
	<title>Measurements of Segment Size</title>
	<abstract>Distributions of segment sizes measured under routine operating con ditions on a computer system which utilizes variable sized segments (the Burroughs B5500) are discussed.  The most striking feature of the measurements is the large number of small segments-about 60 percent of the segments in use contain less than 40 words.  Although the results are certainly not installation independent, and although they  are particularly influenced by features of the B5500 ALGOL system, they  should be relevant to the design of new computer systems, especially with respect to the organization of paging schemes.</abstract>
	<conference>CACM March, 1970</conference>
	<authors>
	<author>Batson, A.</author>
	<author>Ju, S.</author>
	<author>Wood, D. C.</author>
	</authors>
	<keywords>storage allocation, segmentation, segment sizes, page sizes, paging, resource allocation, memory allocation, core utilization</keywords>
	<version>4.32 6.2 6.34 6.9</version>
	<location>CA700303 JB February 13, 1978  4:58 PM</location>
	<citations>
	<citation>1879	4	2095</citation>
	<citation>1884	4	2095</citation>
	<citation>1892	4	2095</citation>
	<citation>1892	4	2095</citation>
	<citation>1901	4	2095</citation>
	<citation>1901	4	2095</citation>
	<citation>1924	4	2095</citation>
	<citation>2085	4	2095</citation>
	<citation>2095	4	2095</citation>
	<citation>2095	4	2095</citation>
	<citation>2095	4	2095</citation>
	<citation>2095	4	2095</citation>
	<citation>2218	4	2095</citation>
	<citation>2218	4	2095</citation>
	<citation>2218	4	2095</citation>
	<citation>2277	4	2095</citation>
	<citation>2277	4	2095</citation>
	<citation>2297	4	2095</citation>
	<citation>2297	4	2095</citation>
	<citation>2319	4	2095</citation>
	<citation>2329	4	2095</citation>
	<citation>2358	4	2095</citation>
	<citation>2365	4	2095</citation>
	<citation>2373	4	2095</citation>
	<citation>2374	4	2095</citation>
	<citation>2380	4	2095</citation>
	<citation>2434	4	2095</citation>
	<citation>2499	4	2095</citation>
	<citation>2498	4	2095</citation>
	<citation>2501	4	2095</citation>
	<citation>2526	4	2095</citation>
	<citation>2582	4	2095</citation>
	<citation>2596	4	2095</citation>
	<citation>2667	4	2095</citation>
	<citation>2668	4	2095</citation>
	<citation>2669	4	2095</citation>
	<citation>2734	4	2095</citation>
	<citation>2828	4	2095</citation>
	<citation>2862	4	2095</citation>
	<citation>2863	4	2095</citation>
	<citation>2863	4	2095</citation>
	<citation>2881	4	2095</citation>
	<citation>2902	4	2095</citation>
	<citation>2911	4	2095</citation>
	<citation>2928	4	2095</citation>
	<citation>2996	4	2095</citation>
	<citation>3000	4	2095</citation>
	<citation>3006	4	2095</citation>
	<citation>3067	4	2095</citation>
	<citation>1728	5	2095</citation>
	<citation>1751	5	2095</citation>
	<citation>1754	5	2095</citation>
	<citation>1879	5	2095</citation>
	<citation>2095	5	2095</citation>
	<citation>2095	5	2095</citation>
	<citation>2095	5	2095</citation>
	<citation>2218	5	2095</citation>
	<citation>2734	5	2095</citation>
	<citation>3000	5	2095</citation>
	<citation>1380	6	2095</citation>
	<citation>1572	6	2095</citation>
	<citation>1728	6	2095</citation>
	<citation>1751	6	2095</citation>
	<citation>1752	6	2095</citation>
	<citation>1810	6	2095</citation>
	<citation>1879	6	2095</citation>
	<citation>1879	6	2095</citation>
	<citation>1879	6	2095</citation>
	<citation>2095	6	2095</citation>
	<citation>2095	6	2095</citation>
	<citation>2095	6	2095</citation>
	<citation>2864	6	2095</citation>
	</citations>
	</document>
	<document id= '2094'>
	<title>On an Algorithm for Nonlinear Minimax Approximation</title>
	<abstract>Certain nonlinear minimax approximation problems are characterize d by properties which permit the application of special algorithms, mainly based on the exchange algorithms of Remes (1934, 1935), for their solution.  In this paper the application to problems of this type of a general nonlinear algorithm due to Osborne and Watson (1969) is considered.  Examples are given to illustrate that this algorithm can give satisfactory results and, in particular, can successfully solve problems which lead to difficulties with the more conventional specialist method.</abstract>
	<conference>CACM March, 1970</conference>
	<authors>
	<author>Watson, G. A.</author>
	</authors>
	<keywords>minimax approximation, nonlinear approximation, linear programming</keywords>
	<version>5.13 5.41</version>
	<location>CA700304 JB February 13, 1978  4:52 PM</location>
	<citations>
	<citation>1932	4	2094</citation>
	<citation>2094	4	2094</citation>
	<citation>1566	5	2094</citation>
	<citation>2094	5	2094</citation>
	<citation>2094	5	2094</citation>
	<citation>2094	5	2094</citation>
	<citation>2352	5	2094</citation>
	<citation>2353	5	2094</citation>
	<citation>2094	6	2094</citation>
	<citation>2094	6	2094</citation>
	</citations>
	</document>
	<document id= '2093'>
	<title>A Comparison of Error Improvement Estimates for Adaptive Trapezoid Integration</title>
	<abstract>Various simple choices of error improvement estimates for the trapezoid rule are studied to demonstrate a comparison procedure which is relatively independent of the profusion of adaptive search and stopping strategies.  Comparisons are based on x^r, `; the inclusion of the noninteger powers makes this more realistic than the usual polynomial based comparison.  Behavior near the singularity was found to be the dominant factor, and a new estimate, based on a constant curvature assumption and parametric differences, was considered slightly better than the other choices considered.</abstract>
	<conference>CACM March, 1970</conference>
	<authors>
	<author>Schweikert, D. G.</author>
	</authors>
	<keywords>adaptive integration, error improvement estimate, trapezoid rule, nonpolynomial error criteria</keywords>
	<version>5.16</version>
	<location>CA700305 JB February 13, 1978  4:47 PM</location>
	<citations>
	<citation>1352	4	2093</citation>
	<citation>1352	4	2093</citation>
	<citation>1352	4	2093</citation>
	<citation>1352	4	2093</citation>
	<citation>2048	4	2093</citation>
	<citation>2048	4	2093</citation>
	<citation>2074	4	2093</citation>
	<citation>2074	4	2093</citation>
	<citation>2074	4	2093</citation>
	<citation>2093	4	2093</citation>
	<citation>2093	4	2093</citation>
	<citation>2093	4	2093</citation>
	<citation>2093	4	2093</citation>
	<citation>2093	4	2093</citation>
	<citation>2093	4	2093</citation>
	<citation>2550	4	2093</citation>
	<citation>2550	4	2093</citation>
	<citation>1092	5	2093</citation>
	<citation>1298	5	2093</citation>
	<citation>1573	5	2093</citation>
	<citation>2093	5	2093</citation>
	<citation>2093	5	2093</citation>
	<citation>2093	5	2093</citation>
	<citation>429	5	2093</citation>
	<citation>834	5	2093</citation>
	<citation>872	5	2093</citation>
	</citations>
	</document>
	<document id= '2092'>
	<title>A Deductive Question-Answer for Natural Language Inference</title>
	<abstract>The question-answering aspects of the Protosynthex III pro totype language processing system are described and exemplified in detail.  The system is written in LISP 1.5 and operates on the Q-32 time-sharing system.  The system's data structures and their semantic organization, the deductive question-answering formalism of relational properties and complex-relation-forming operators, and the question-answering procedures which employ these features in their operation are all described and illustrated.  Examples of the system's performance and of the limitations of its question-answering  capability are presented and discussed.  It is shown that the use of semantic information in deductive question answering greatly  facilitates the process, and that a top-down procedure which works from question to answer enables effective use to be made of this information.  It is concluded that the development of Protosynthex III into a practically useful system to work with large data bases is possible but will require changes in both the data structures and the algorithms used for question answering.</abstract>
	<conference>CACM March, 1970</conference>
	<authors>
	<author>Schwarcz, R. M.</author>
	<author>Burger, J. F.</author>
	<author>Simmons, R. F.</author>
	</authors>
	<keywords>question answering, natural language, Protosynthex III, LISP, semantics, artificial intelligence, computational linguistics, language processing, fact retrieval</keywords>
	<version>3.42 3.61</version>
	<location>CA700306 JB February 13, 1978  4:30 PM</location>
	<citations>
	<citation>2092	4	2092</citation>
	<citation>2127	4	2092</citation>
	<citation>1527	5	2092</citation>
	<citation>2092	5	2092</citation>
	<citation>2092	5	2092</citation>
	<citation>2092	5	2092</citation>
	<citation>2396	5	2092</citation>
	<citation>1487	6	2092</citation>
	<citation>1856	6	2092</citation>
	<citation>2092	6	2092</citation>
	<citation>2127	6	2092</citation>
	</citations>
	</document>
	<document id= '2091'>
	<title>PDEL-A Language for Partial Differential Equations</title>
	<abstract>Conventional computer methods available to solve continuous system problems characterized by partial differential equations are very time-consuming and cumbersome.  A convenient, easy to learn and to use, high level problem oriented language to solve and study partial differential equation problems has been designed; a practical translator for the language has also been designed, and a working version of it has been constructed for a significant portion of the language.  This Partial Differential Equation Language, PDEL, is outlined, and the highlights of the translator are briefly summarized.</abstract>
	<conference>CACM March, 1970</conference>
	<authors>
	<author>Cardenas, A. F.</author>
	<author>Karplus, W. J.</author>
	</authors>
	<keywords>problem oriented or digital simulation language, partial differential equations, translator, PL/1, preprocessor PL/1, finite difference algorithms</keywords>
	<version>3.1 3.2 4.22 5.17</version>
	<location>CA700307 JB February 13, 1978  4:18 PM</location>
	<citations>
	<citation>1379	4	2091</citation>
	<citation>1503	4	2091</citation>
	<citation>1542	4	2091</citation>
	<citation>1683	4	2091</citation>
	<citation>1693	4	2091</citation>
	<citation>1693	4	2091</citation>
	<citation>1781	4	2091</citation>
	<citation>1781	4	2091</citation>
	<citation>1781	4	2091</citation>
	<citation>1787	4	2091</citation>
	<citation>1836	4	2091</citation>
	<citation>1836	4	2091</citation>
	<citation>1860	4	2091</citation>
	<citation>1945	4	2091</citation>
	<citation>1945	4	2091</citation>
	<citation>2015	4	2091</citation>
	<citation>2060	4	2091</citation>
	<citation>2060	4	2091</citation>
	<citation>2061	4	2091</citation>
	<citation>2061	4	2091</citation>
	<citation>2082	4	2091</citation>
	<citation>2091	4	2091</citation>
	<citation>2091	4	2091</citation>
	<citation>2091	4	2091</citation>
	<citation>2152	4	2091</citation>
	<citation>2179	4	2091</citation>
	<citation>2179	4	2091</citation>
	<citation>2340	4	2091</citation>
	<citation>2356	4	2091</citation>
	<citation>2546	4	2091</citation>
	<citation>2546	4	2091</citation>
	<citation>2603	4	2091</citation>
	<citation>2698	4	2091</citation>
	<citation>2698	4	2091</citation>
	<citation>2708	4	2091</citation>
	<citation>2708	4	2091</citation>
	<citation>2824	4	2091</citation>
	<citation>2982	4	2091</citation>
	<citation>2986	4	2091</citation>
	<citation>3045	4	2091</citation>
	<citation>3045	4	2091</citation>
	<citation>3093	4	2091</citation>
	<citation>1366	5	2091</citation>
	<citation>1477	5	2091</citation>
	<citation>1491	5	2091</citation>
	<citation>2091	5	2091</citation>
	<citation>2091	5	2091</citation>
	<citation>2091	5	2091</citation>
	</citations>
	</document>
	<document id= '2090'>
	<title>Symbolic Expansion of Algebraic Expressions (Algorithm 377 $R2))</title>
	<conference>CACM March, 1970</conference>
	<authors>
	<author>Levine, M. J.</author>
	</authors>
	<keywords>algebra, symbolic algebra, symbolic multiplication, algebraic distribution, algebraic multiplication, distribution algorithm, multiplication algorithm, product  algorithm, polynomial distribution, polynomial expansion</keywords>
	<version>3.10 3.17 3.20 4.13 4.90</version>
	<location>CA700308 JB February 13, 1978  3:49 PM</location>
	<citations>
	<citation>2090	5	2090</citation>
	<citation>2090	5	2090</citation>
	<citation>2090	5	2090</citation>
	</citations>
	</document>
	<document id= '2089'>
	<title>Prime Number (Algorithm 310 $A1))</title>
	<conference>CACM March, 1970</conference>
	<authors>
	<author>Rapp, D. G.</author>
	<author>Scott, L. D.</author>
	</authors>
	<keywords>prime numbers, generator</keywords>
	<version>5.0</version>
	<location>CA700309 JB February 13, 1978  3:45 PM</location>
	<citations>
	<citation>2089	5	2089</citation>
	<citation>2089	5	2089</citation>
	<citation>2089	5	2089</citation>
	</citations>
	</document>
	<document id= '2088'>
	<title>Netflow (ALgorithm 336 $H))</title>
	<conference>CACM March, 1970</conference>
	<authors>
	<author>Bray, T. A.</author>
	<author>Witzgall, C.</author>
	</authors>
	<keywords>capacitated network, linear programming, minimum-cost flow, network flow, out-of-kilter</keywords>
	<version>5.32 5.41</version>
	<location>CA700310 JB February 13, 1978  3:44 PM</location>
	<citations>
	<citation>2088	5	2088</citation>
	<citation>2088	5	2088</citation>
	<citation>2088	5	2088</citation>
	</citations>
	</document>
	<document id= '2087'>
	<title>A Number System for the Permutations</title>
	<conference>CACM March, 1970</conference>
	<authors>
	<author>Pager, D.</author>
	</authors>
	<keywords>permutation, ordering, number, number system, p-number, combinatorial</keywords>
	<version>4.49 5.39</version>
	<location>CA700311 JB February 13, 1978  3:42 PM</location>
	<citations>
	<citation>2087	4	2087</citation>
	<citation>2189	4	2087</citation>
	<citation>3188	4	2087</citation>
	<citation>1594	5	2087</citation>
	<citation>2087	5	2087</citation>
	<citation>2087	5	2087</citation>
	<citation>2087	5	2087</citation>
	<citation>2189	5	2087</citation>
	<citation>1594	6	2087</citation>
	<citation>2087	6	2087</citation>
	<citation>3191	6	2087</citation>
	<citation>521	6	2087</citation>
	</citations>
	</document>
	<document id= '2086'>
	<title>Another Method of Converting from Hexadecimal to Decimal</title>
	<conference>CACM March, 1970</conference>
	<authors>
	<author>Kailas, M. V.</author>
	</authors>
	<keywords>binary-decimal conversion, computer arithmetic categories</keywords>
	<location>CA700312 JB February 13, 1978  3:41 PM</location>
	<citations>
	<citation>2086	5	2086</citation>
	<citation>2086	5	2086</citation>
	<citation>2086	5	2086</citation>
	</citations>
	</document>
	<document id= '2085'>
	<title>Comment on a Paging Anomaly</title>
	<conference>CACM March, 1970</conference>
	<authors>
	<author>Dempster, J. R. H.</author>
	</authors>
	<keywords>paging machines, demand paging, replacement algorithm</keywords>
	<version>4.30</version>
	<location>CA700313 JB February 13, 1978  3:39 PM</location>
	<citations>
	<citation>1892	4	2085</citation>
	<citation>1901	4	2085</citation>
	<citation>2022	4	2085</citation>
	<citation>2085	4	2085</citation>
	<citation>2085	4	2085</citation>
	<citation>2095	4	2085</citation>
	<citation>2218	4	2085</citation>
	<citation>2277	4	2085</citation>
	<citation>2319	4	2085</citation>
	<citation>2329	4	2085</citation>
	<citation>2358	4	2085</citation>
	<citation>2373	4	2085</citation>
	<citation>2380	4	2085</citation>
	<citation>2434	4	2085</citation>
	<citation>2499	4	2085</citation>
	<citation>2501	4	2085</citation>
	<citation>2582	4	2085</citation>
	<citation>2669	4	2085</citation>
	<citation>2828	4	2085</citation>
	<citation>2863	4	2085</citation>
	<citation>2881	4	2085</citation>
	<citation>2928	4	2085</citation>
	<citation>2996	4	2085</citation>
	<citation>3006	4	2085</citation>
	<citation>3006	4	2085</citation>
	<citation>3067	4	2085</citation>
	<citation>1751	5	2085</citation>
	<citation>1884	5	2085</citation>
	<citation>2085	5	2085</citation>
	<citation>2085	5	2085</citation>
	<citation>2085	5	2085</citation>
	</citations>
	</document>
	<document id= '2084'>
	<title>A Note on the Complement of Inherently Ambiguous Context-Free Languages</title>
	<conference>CACM March, 1970</conference>
	<authors>
	<author>Maurer, H. A.</author>
	</authors>
	<keywords>ambiguity, inherent ambiguity, complement, context-free language, Chomsky-language, phrase structure language, production system, type 2 language, bounded language</keywords>
	<version>5.22 5.24</version>
	<location>CA700314 JB February 13, 1978  3:37 PM</location>
	<citations>
	<citation>2084	5	2084</citation>
	<citation>2084	5	2084</citation>
	<citation>2084	5	2084</citation>
	</citations>
	</document>
	<document id= '2083'>
	<title>Creation and Control of Internal Data Bases Under a Fortran Programming Environment</title>
	<abstract>A method is described for the definition of a user's COMMON structure and the automatic generation of the necessary COMMON, DIMENSION, EQUIVALENCE, and type declarations for each of the user's routines.  The definition for the COMMON is contained in an easy to modify form, thus allowing the control of general communications of data between routines. The described system has been implemented on the IBM 7094, CDC 6000 series, and the IBM 360.  The method has proved to be invaluable for the definition and control of COMMON in many large-scale programs.</abstract>
	<conference>CACM April, 1970</conference>
	<authors>
	<author>DeSalvio, A. J.</author>
	<author>Purdy, J. G.</author>
	<author>Rau, J.</author>
	</authors>
	<keywords>data base, Fortran, common, common equivalencing, subroutine communication, data communication</keywords>
	<version>3.73 4.12 4.43</version>
	<location>CA700401 JB February 13, 1978  3:34 PM</location>
	<citations>
	<citation>1086	4	2083</citation>
	<citation>1132	4	2083</citation>
	<citation>1234	4	2083</citation>
	<citation>1263	4	2083</citation>
	<citation>1265	4	2083</citation>
	<citation>1270	4	2083</citation>
	<citation>1323	4	2083</citation>
	<citation>1358	4	2083</citation>
	<citation>1379	4	2083</citation>
	<citation>1380	4	2083</citation>
	<citation>1453	4	2083</citation>
	<citation>1464	4	2083</citation>
	<citation>1484	4	2083</citation>
	<citation>1491	4	2083</citation>
	<citation>1498	4	2083</citation>
	<citation>1613	4	2083</citation>
	<citation>1614	4	2083</citation>
	<citation>1781	4	2083</citation>
	<citation>1825	4	2083</citation>
	<citation>1845	4	2083</citation>
	<citation>1860	4	2083</citation>
	<citation>1900	4	2083</citation>
	<citation>2083	4	2083</citation>
	<citation>2083	4	2083</citation>
	<citation>2154	4	2083</citation>
	<citation>2178	4	2083</citation>
	<citation>2179	4	2083</citation>
	<citation>2252	4	2083</citation>
	<citation>2270	4	2083</citation>
	<citation>2325	4	2083</citation>
	<citation>2341	4	2083</citation>
	<citation>2546	4	2083</citation>
	<citation>2645	4	2083</citation>
	<citation>2652	4	2083</citation>
	<citation>2684	4	2083</citation>
	<citation>2693	4	2083</citation>
	<citation>2842	4	2083</citation>
	<citation>2929	4	2083</citation>
	<citation>2934	4	2083</citation>
	<citation>3069	4	2083</citation>
	<citation>669	4	2083</citation>
	<citation>679	4	2083</citation>
	<citation>691	4	2083</citation>
	<citation>761	4	2083</citation>
	<citation>949	4	2083</citation>
	<citation>989	4	2083</citation>
	<citation>988	5	2083</citation>
	<citation>2083	5	2083</citation>
	<citation>2083	5	2083</citation>
	<citation>2083	5	2083</citation>
	<citation>3184	5	2083</citation>
	</citations>
	</document>
	<document id= '2082'>
	<title>Syntax-Directed Documentation For PL 360</title>
	<abstract>The language PL 360, together with its phrase structure grammar, is used as a  concrete basis for illustrating an idea called syntax-directed documentation.  This idea is (1) to use the phrase structure of a program to define the  structure of a formal documentation for that program; (2) to use the syntactic  types and identifiers in the resulting structure to trigger the automatic formation of questions to the programmer, whose answers will become part of that documentation; and (3) to provide automatic storage and retrieval facilities so that other programmers who want to understand or modify the program can access the resulting documentation, which is cross-indexed in various ways by syntactic types and objects.  A small PL 360 program, already found in the literature, is worked out as an example.</abstract>
	<conference>CACM April, 1970</conference>
	<authors>
	<author>Mills, H. D.</author>
	</authors>
	<keywords>documentation, syntax analysis, PL 360, enforced documentation, indexed documentation, automatic interrogation, phase structured grammar, syntax-directed documentation, syntax processing</keywords>
	<version>3.59 3.79 4.19 4.43</version>
	<location>CA700402 JB February 13, 1978  3:28 PM</location>
	<citations>
	<citation>1542	4	2082</citation>
	<citation>1683	4	2082</citation>
	<citation>1693	4	2082</citation>
	<citation>1781	4	2082</citation>
	<citation>1787	4	2082</citation>
	<citation>1836	4	2082</citation>
	<citation>1945	4	2082</citation>
	<citation>2060	4	2082</citation>
	<citation>2061	4	2082</citation>
	<citation>2082	4	2082</citation>
	<citation>2082	4	2082</citation>
	<citation>2091	4	2082</citation>
	<citation>2152	4	2082</citation>
	<citation>2179	4	2082</citation>
	<citation>2340	4	2082</citation>
	<citation>2356	4	2082</citation>
	<citation>2546	4	2082</citation>
	<citation>2603	4	2082</citation>
	<citation>2698	4	2082</citation>
	<citation>2708	4	2082</citation>
	<citation>2824	4	2082</citation>
	<citation>2982	4	2082</citation>
	<citation>2986	4	2082</citation>
	<citation>3045	4	2082</citation>
	<citation>3093	4	2082</citation>
	<citation>1491	5	2082</citation>
	<citation>2082	5	2082</citation>
	<citation>2082	5	2082</citation>
	<citation>2082	5	2082</citation>
	<citation>2314	5	2082</citation>
	<citation>518	5	2082</citation>
	<citation>1098	6	2082</citation>
	<citation>1626	6	2082</citation>
	<citation>2082	6	2082</citation>
	<citation>2148	6	2082</citation>
	</citations>
	</document>
	<document id= '2081'>
	<title>Some Complete Calculi for Matrices</title>
	<abstract>A matrix calculus is introduced with the intention of developing data structures suitable for a high level algorithmic language for mathematical programming.   The paper investigates how the special structure of matrices can be described and utilized for efficient computing by saving memory space and superfluous operations.  Sequences of Matrices (and sequences of sequences of matrices) are considered, and matrix operators areext ended to sequence operators and cumulative operators.  Algorithms are given which use symbol manipulation of matrix expressions so as to find the forms best suited for computation.  These forms are called normal forms.  Several completeness results are obtained in the sense that for each expression an equivalent expression in normal form can be found within a specified calculus.</abstract>
	<conference>CACM April, 1970</conference>
	<authors>
	<author>Bayer, R.</author>
	<author>Witzgall, C.</author>
	</authors>
	<keywords>complete calculus, data structures, linear programming, matrix, matrix concatenation, matrix sequences, programming languages, sequence operations, symbol manipulation</keywords>
	<version>4.12 4.22 5.14 5.41</version>
	<location>CA700403 JB February 13, 1978  3:18 PM</location>
	<citations>
	<citation>2081	5	2081</citation>
	<citation>2081	5	2081</citation>
	<citation>2081	5	2081</citation>
	<citation>2253	5	2081</citation>
	<citation>2254	5	2081</citation>
	<citation>2081	6	2081</citation>
	<citation>2081	6	2081</citation>
	<citation>437	6	2081</citation>
	</citations>
	</document>
	<document id= '2080'>
	<title>The Nucleus of a Multiprogramming System</title>
	<abstract>This paper describes the philosophy and structure of a multiprogramming system  that can be extended with a hierarchy of operating systems to suit diverse  requirements of program scheduling and resource allocation.  The system nucleus simulates an environment in which program execution and input/output are handled uniformly as parallel, cooperating process es.  A fundamental set of primitives allows the dynamic creation and control of a hierarchy of processes as well as the communication among them.</abstract>
	<conference>CACM April, 1970</conference>
	<authors>
	<author>Hansen, P. B.</author>
	</authors>
	<keywords>multiprogramming, operating systems, parallel processes, process concept, process communication, message buffering, process hierarchy, process creation, process removal</keywords>
	<version>4.30 4.31 4.32 4.41</version>
	<location>CA700404 JB February 13, 1978  3:10 PM</location>
	<citations>
	<citation>1657	4	2080</citation>
	<citation>2080	4	2080</citation>
	<citation>2357	4	2080</citation>
	<citation>2536	4	2080</citation>
	<citation>1523	5	2080</citation>
	<citation>2080	5	2080</citation>
	<citation>2080	5	2080</citation>
	<citation>2080	5	2080</citation>
	<citation>2319	5	2080</citation>
	<citation>2320	5	2080</citation>
	<citation>2378	5	2080</citation>
	<citation>2632	5	2080</citation>
	<citation>2738	5	2080</citation>
	<citation>2740	5	2080</citation>
	<citation>2868	5	2080</citation>
	<citation>3127	5	2080</citation>
	<citation>1408	6	2080</citation>
	<citation>1471	6	2080</citation>
	<citation>1471	6	2080</citation>
	<citation>1719	6	2080</citation>
	<citation>1749	6	2080</citation>
	<citation>1749	6	2080</citation>
	<citation>1749	6	2080</citation>
	<citation>1749	6	2080</citation>
	<citation>1751	6	2080</citation>
	<citation>1877	6	2080</citation>
	<citation>2016	6	2080</citation>
	<citation>2017	6	2080</citation>
	<citation>2080	6	2080</citation>
	<citation>2080	6	2080</citation>
	<citation>2080	6	2080</citation>
	<citation>2080	6	2080</citation>
	<citation>2080	6	2080</citation>
	<citation>2080	6	2080</citation>
	<citation>2080	6	2080</citation>
	<citation>2080	6	2080</citation>
	<citation>2150	6	2080</citation>
	<citation>2188	6	2080</citation>
	<citation>2203	6	2080</citation>
	<citation>2204	6	2080</citation>
	<citation>2247	6	2080</citation>
	<citation>2277	6	2080</citation>
	<citation>2356	6	2080</citation>
	<citation>2377	6	2080</citation>
	<citation>2380	6	2080</citation>
	<citation>2558	6	2080</citation>
	<citation>2625	6	2080</citation>
	<citation>2632	6	2080</citation>
	<citation>2777	6	2080</citation>
	</citations>
	</document>
	<document id= '2079'>
	<citations>
	<citation>2079	5	2079</citation>
	<citation>2079	5	2079</citation>
	<citation>2079	5	2079</citation>
	</citations>
	<title>On Multiprogramming, Machine Coding, and Computer Organization</title>
	<conference>CACM April, 1970</conference>
	<authors>
	<author>Wirth, N.</author>
	</authors>
	<location>CA700405 JB February 13, 1978  3:05 PM</location>
	</document>
	<document id= '2078'>
	<title>Representations for Space Planning</title>
	<abstract>Problems involving the arrangement of objects in two-  or three-space where the objective function primarily consists of derivatives of the distance between objects or their arrangement are called space planning problems.  The representational requirements for this problem area are defined and compared with current computer graphic languages.  Four alternative data structures that allow automated space planning are described and compared.</abstract>
	<conference>CACM April, 1970</conference>
	<authors>
	<author>Eastman, C. M.</author>
	</authors>
	<keywords>automated design, data structures, computer graphics, computer-aided design, engineering design, architectural design, robots</keywords>
	<version>3.20 3.2 2, 3.26, 3.41, 3.63</version>
	<location>CA700406 JB February 13, 1978  3:03 PM</location>
	<citations>
	<citation>2078	5	2078</citation>
	<citation>2078	5	2078</citation>
	<citation>2078	5	2078</citation>
	<citation>2389	5	2078</citation>
	<citation>2078	6	2078</citation>
	</citations>
	</document>
	<document id= '2077'>
	<title>The Cyclical Majority Problem</title>
	<abstract>The problem of the cyclical majority is presented and some new, simulated results for 3, 4, 5, ..., 40 issues ad 3, 5, 7, ..., 37 judges are reported.</abstract>
	<conference>CACM April, 1970</conference>
	<authors>
	<author>Pomeranz, J. E.</author>
	</authors>
	<keywords>Arrow's paradox, cyclical majority, simulation, voter's paradox, voting paradox</keywords>
	<version>3.31 3.35</version>
	<location>CA700407 JB February 13, 1978  2:58 PM</location>
	<citations>
	<citation>2077	5	2077</citation>
	<citation>2077	5	2077</citation>
	<citation>2077	5	2077</citation>
	</citations>
	</document>
	<document id= '2076'>
	<title>Cubic Splines on Uniform Meshes</title>
	<abstract>A very simple procedure is presented for constructing cubic splines, periodic or nonperiodic, on uniform meshes.  Arcs of two cubics suffice to construct a basis of cardinal splines.  An algorithm is given which  requires only minimal storage and computation and permits easy trade-off  of one against the other.</abstract>
	<conference>CACM April, 1970</conference>
	<authors>
	<author>Nilson, E. N.</author>
	</authors>
	<keywords>simple spline representation, cardinal splines, uniform mesh splines</keywords>
	<version>5.13</version>
	<location>CA700408 JB February 13, 1978  2:51 PM</location>
	<citations>
	<citation>2076	5	2076</citation>
	<citation>2076	5	2076</citation>
	<citation>2076	5	2076</citation>
	</citations>
	</document>
	<document id= '2075'>
	<title>Discretized Newton-Like Method for Solving a System of Simultaneous Nonlinear Equations (Algorithm 378 $C5))</title>
	<conference>CACM April, 1970</conference>
	<authors>
	<author>Pankiewicz, W.</author>
	</authors>
	<keywords>Newton's method, nonlinear equations, interpolating polynomials</keywords>
	<version>5.15 5.13</version>
	<location>CA700409 JB February 13, 1978  2:48 PM</location>
	<citations>
	<citation>2075	4	2075</citation>
	<citation>2075	5	2075</citation>
	<citation>2075	5	2075</citation>
	<citation>2075	5	2075</citation>
	<citation>472	5	2075</citation>
	<citation>3011	5	2075</citation>
	<citation>2075	6	2075</citation>
	<citation>2302	6	2075</citation>
	<citation>2345	6	2075</citation>
	<citation>2485	6	2075</citation>
	</citations>
	</document>
	<document id= '2074'>
	<title>Sqank (Algorithm 379 $D1))</title>
	<conference>CACM April, 1970</conference>
	<authors>
	<author>Lyness, J. N.</author>
	</authors>
	<keywords>numerical integration, integration rule, adaptive integration, automatic integration, Simpson's rule, numerical quadrature, quadrature,  quadrature rule, adaptive quadrature,  automatic quadrature, round-off error control</keywords>
	<version>5.16</version>
	<location>CA700410 JB February 13, 1978  2:46 PM</location>
	<citations>
	<citation>1352	4	2074</citation>
	<citation>1352	4	2074</citation>
	<citation>1352	4	2074</citation>
	<citation>1352	4	2074</citation>
	<citation>2048	4	2074</citation>
	<citation>2048	4	2074</citation>
	<citation>2048	4	2074</citation>
	<citation>2074	4	2074</citation>
	<citation>2074	4	2074</citation>
	<citation>2074	4	2074</citation>
	<citation>2074	4	2074</citation>
	<citation>2093	4	2074</citation>
	<citation>2093	4	2074</citation>
	<citation>2093	4	2074</citation>
	<citation>2550	4	2074</citation>
	<citation>2074	5	2074</citation>
	<citation>2074	5	2074</citation>
	<citation>2074	5	2074</citation>
	<citation>2415	5	2074</citation>
	<citation>2550	5	2074</citation>
	<citation>429	5	2074</citation>
	<citation>786	5	2074</citation>
	<citation>834	5	2074</citation>
	<citation>872	5	2074</citation>
	<citation>1040	6	2074</citation>
	<citation>1573	6	2074</citation>
	<citation>1982	6	2074</citation>
	<citation>2074	6	2074</citation>
	<citation>2074	6	2074</citation>
	<citation>429	6	2074</citation>
	</citations>
	</document>
	<document id= '2073'>
	<title>Solution of Linear Programs in 0-1 Variables by Implicit Enumeration (Algorithm 341 $H))</title>
	<conference>CACM April, 1970</conference>
	<authors>
	<author>Guignard, M. M.</author>
	</authors>
	<keywords>linear programming, zero-one variables, partial enumeration</keywords>
	<version>5.41</version>
	<location>CA700411 JB February 13, 1978  2:43 PM</location>
	<citations>
	<citation>2073	5	2073</citation>
	<citation>2073	5	2073</citation>
	<citation>2073	5	2073</citation>
	</citations>
	</document>
	<document id= '2072'>
	<title>Modified Romberg Quadrature (Algorithm 351 $D1))</title>
	<conference>CACM April, 1970</conference>
	<authors>
	<author>Cook, N. D.</author>
	</authors>
	<keywords>numerical integration, Romberg quadrature, trapezoid values, rectangle values, error bound</keywords>
	<version>5.16</version>
	<location>CA700412 JB February 13, 1978  2:42 PM</location>
	<citations>
	<citation>2072	5	2072</citation>
	<citation>2072	5	2072</citation>
	<citation>2072	5	2072</citation>
	</citations>
	</document>
	<document id= '2071'>
	<title>Filon Quadrature (Algorithm 353 $D1))</title>
	<conference>CACM April, 1970</conference>
	<authors>
	<author>Fosdick, L. D.</author>
	</authors>
	<keywords>quadrature, Filon quadrature, integration, Filon integration, Fourier coefficients, Fourier series</keywords>
	<version>5.16</version>
	<location>CA700413 JB February 13, 1978  2:40 PM</location>
	<citations>
	<citation>2071	5	2071</citation>
	<citation>2071	5	2071</citation>
	<citation>2071	5	2071</citation>
	<citation>2393	5	2071</citation>
	<citation>1858	6	2071</citation>
	<citation>2071	6	2071</citation>
	</citations>
	</document>
	<document id= '2070'>
	<citations>
	<citation>2070	5	2070</citation>
	<citation>2070	5	2070</citation>
	<citation>2070	5	2070</citation>
	</citations>
	<title>A Formal System for Information Retrieval from Files</title>
	<conference>CACM April, 1970</conference>
	<authors>
	<author>Hsiao, D.</author>
	<author>Harary, F.</author>
	</authors>
	<location>CA700414 JB February 13, 1978  2:37 PM</location>
	</document>
	<document id= '2069'>
	<title>Comments on a Paper by Wallace and Mason</title>
	<conference>CACM April, 1970</conference>
	<authors>
	</authors>
	<keywords>page-on-demand, demand paging, time-sharing multiprogramming, Markovian computer models, scheduling strategies, operating systems, memory management</keywords>
	<version>2.44 4.32 4.39 6.20 6.21</version>
	<location>CA700415 JB February 13, 1978  2:36 PM</location>
	<citations>
	<citation>2069	5	2069</citation>
	<citation>2069	5	2069</citation>
	<citation>2069	5	2069</citation>
	</citations>
	</document>
	<document id= '2068'>
	<title>Comment on Multiprogramming Under a Page on Demand Strategy</title>
	<conference>CACM April, 1970</conference>
	<authors>
	<author>Smith, J. L.</author>
	</authors>
	<keywords>multiprogramming, paging, modeling</keywords>
	<version>4.32</version>
	<location>CA700416 JB February 13, 1978  2:34 PM</location>
	<citations>
	<citation>1892	4	2068</citation>
	<citation>2068	4	2068</citation>
	<citation>2741	4	2068</citation>
	<citation>1526	5	2068</citation>
	<citation>2068	5	2068</citation>
	<citation>2068	5	2068</citation>
	<citation>2068	5	2068</citation>
	</citations>
	</document>
	<document id= '2067'>
	<title>Comment on Lawler's Multilevel Boolean Minimization</title>
	<conference>CACM April, 1970</conference>
	<authors>
	<author>DeVries, R. C.</author>
	</authors>
	<keywords>multilevel logic design, generalized prime implicants, minimal forms, minimization, incompletely specified functions</keywords>
	<version>6.1</version>
	<location>CA700417 JB February 13, 1978  2:32 PM</location>
	<citations>
	<citation>2067	5	2067</citation>
	<citation>2067	5	2067</citation>
	<citation>2067	5	2067</citation>
	</citations>
	</document>
	<document id= '2066'>
	<title>An Algol Construction for Procedures as Parameters of Procedures</title>
	<conference>CACM April, 1970</conference>
	<authors>
	<author>Knight, K. R.</author>
	</authors>
	<keywords>Algol, procedures, parameters, side effects</keywords>
	<version>4.22</version>
	<location>CA700418 JB February 13, 1978  2:30 PM</location>
	<citations>
	<citation>2066	4	2066</citation>
	<citation>2066	4	2066</citation>
	<citation>1833	5	2066</citation>
	<citation>1842	5	2066</citation>
	<citation>2066	5	2066</citation>
	<citation>2066	5	2066</citation>
	<citation>2066	5	2066</citation>
	</citations>
	</document>
	<document id= '2065'>
	<title>A Programming System for the On-line Analysis of Biomedical Images</title>
	<abstract>A preliminary description of the software for a computer-display system is given with special emphasis on the  man-machine interaction. This  system is intended for a wide variety of biomedical applications. As an example, the methods are applied to the karyotyping of chromosomes.  The  system is separated into four programming tasks: picture transformations, file  maintenance, picture structuring, and display management.  Picture structuring is considered as the vehicle for man-machine communication. A prototype data format for pictures, called a picture-form, is developed. Structure operators are defined which manipulate picture-forms to produce  new pictures-forms.  Many of the ideas are taken from the symbolic mathematical  laboratory at MIT conceived by Marvin Minsky.</abstract>
	<conference>CACM May, 1970</conference>
	<authors>
	<author>Hodes, L.</author>
	</authors>
	<keywords>image processing, biomedical image processing, on-line image processing, semiautomatic image processing, data structure, structure operators, picture processing, biomedical picture processing, on-line picture processing, semiautomatic picture processing, semiautomatic karyotyping, karyotyping, list processing picture processing</keywords>
	<version>3.12 3.34 3.63 4.39 6.29</version>
	<location>CA700501 JB February 13, 1978  2:27 PM</location>
	<citations>
	<citation>2065	5	2065</citation>
	<citation>2065	5	2065</citation>
	<citation>2065	5	2065</citation>
	</citations>
	</document>
	<document id= '2064'>
	<title>Operations on Generalized Arrays with the Genie Compiler</title>
	<abstract>Operations on vectors, matrices, and higher dimensional storage arrays are  standard features of most compilers today.  The elements of such structures are usually restricted to be scalars.  For many sophisticated applications this restriction can impose cumbersome data representations. An efficient system has been devised and implemented which allows the elements of multidimensional arrays to themselves be multidimensional arrays.  This system was developed from a storage structure in which the location, length, and content of each array is described by a codeword which can be interpreted by the system.  Code words may describe  arrays containing more codewords, thus providing all needed descriptive information for hyperstructures of any form.</abstract>
	<conference>CACM May, 1970</conference>
	<authors>
	<author>Sitton, G. A.</author>
	</authors>
	<keywords>multidimensional arrays, matrix operations, storage control, subscripting, compilers</keywords>
	<version>4.12 4.29</version>
	<location>CA700502 JB February 13, 1978  2:18 PM</location>
	<citations>
	<citation>2064	4	2064</citation>
	<citation>1677	5	2064</citation>
	<citation>2064	5	2064</citation>
	<citation>2064	5	2064</citation>
	<citation>2064	5	2064</citation>
	</citations>
	</document>
	<document id= '2063'>
	<citations>
	<citation>2063	5	2063</citation>
	<citation>2063	5	2063</citation>
	<citation>2063	5	2063</citation>
	</citations>
	<title>Translation Equations (Errata)</title>
	<conference>CACM May, 1970</conference>
	<authors>
	<author>Vere, S.</author>
	</authors>
	<location>CA700503 JB February 13, 1978  2:12 PM</location>
	</document>
	<document id= '2062'>
	<title>The Application of Sequential Sampling to Simulation: An Example Inventory Model</title>
	<abstract>Four different sequential sampling procedures are applied to the analysis of data generated by a computer simulation experiment with a multi-item inventory model.  For each procedure the cost of computer time required to achieve given levels of statistical precision is calculated.  Also the cost of computer time using comparable fixed sample size methods is calculated.  The computer costs of fixed sample size procedures versus sequential sampling procedures are compared.</abstract>
	<conference>CACM May, 1970</conference>
	<authors>
	<author>Sasser, W. E.</author>
	<author>Burdick, D. S.</author>
	<author>Graham, D. A.</author>
	<author>Naylor, T. H.</author>
	</authors>
	<keywords>simulation, inventory models, sequential sampling, models, experimental design</keywords>
	<version>3.31 3.50 3.54 5.5</version>
	<location>CA700504 JB February 13, 1978  2:11 PM</location>
	<citations>
	<citation>2062	5	2062</citation>
	<citation>2062	5	2062</citation>
	<citation>2062	5	2062</citation>
	</citations>
	</document>
	<document id= '2061'>
	<title>An Algorithm for the Construction Of Bounded-Context Parsers</title>
	<abstract>An algorithm is described which accepts an arbitrary context-free grammar and constructs a bounded-context parser for it whenever such a parser exists.  In the first part of the paper the definition of a context-free grammar and the working of a bounded-context parser are recalled.  The notion of reduction class for a context-free grammar is then introduced and its connection with the structure of a bounded-context parser is indicated.  Next, pushdown automata which generate the different reduction classes of a context-free grammar are defined.  Finally, the algorithm is described; it essentially carries out an exhaustive study of all possible runs of the pushdown automata generating the reduction classes. In the second part, the utility of the algorithm is discuss ed in the light of the experience gained from its use in compiler design. The algorithm is claimed to be particularly useful in the simultaneous design of a language and a compiler for it.</abstract>
	<conference>CACM May, 1970</conference>
	<authors>
	<author>Loeckx, J.</author>
	</authors>
	<keywords>bounded-context parsing, bounded-context syntactic analysis, parser  construction, syntactical analyzer construction, generators, compiler  compilers, compiler writing systems, translator writing systems metacompilers, context-free grammars, formal languages, pushdown automata</keywords>
	<version>4.12 5.22 5.23</version>
	<location>CA700505 JB February 13, 1978  1:58 PM</location>
	<citations>
	<citation>1379	4	2061</citation>
	<citation>1491	4	2061</citation>
	<citation>1496	4	2061</citation>
	<citation>1542	4	2061</citation>
	<citation>1683	4	2061</citation>
	<citation>1683	4	2061</citation>
	<citation>1693	4	2061</citation>
	<citation>1693	4	2061</citation>
	<citation>1768	4	2061</citation>
	<citation>1781	4	2061</citation>
	<citation>1781	4	2061</citation>
	<citation>1781	4	2061</citation>
	<citation>1787	4	2061</citation>
	<citation>1787	4	2061</citation>
	<citation>1836	4	2061</citation>
	<citation>1836	4	2061</citation>
	<citation>1945	4	2061</citation>
	<citation>1945	4	2061</citation>
	<citation>1945	4	2061</citation>
	<citation>2015	4	2061</citation>
	<citation>2060	4	2061</citation>
	<citation>2060	4	2061</citation>
	<citation>2061	4	2061</citation>
	<citation>2061	4	2061</citation>
	<citation>2061	4	2061</citation>
	<citation>2061	4	2061</citation>
	<citation>2061	4	2061</citation>
	<citation>2061	4	2061</citation>
	<citation>2082	4	2061</citation>
	<citation>2091	4	2061</citation>
	<citation>2091	4	2061</citation>
	<citation>2152	4	2061</citation>
	<citation>2179	4	2061</citation>
	<citation>2179	4	2061</citation>
	<citation>2179	4	2061</citation>
	<citation>2340	4	2061</citation>
	<citation>2356	4	2061</citation>
	<citation>2546	4	2061</citation>
	<citation>2546	4	2061</citation>
	<citation>2603	4	2061</citation>
	<citation>2698	4	2061</citation>
	<citation>2698	4	2061</citation>
	<citation>2708	4	2061</citation>
	<citation>2708	4	2061</citation>
	<citation>2824	4	2061</citation>
	<citation>2982	4	2061</citation>
	<citation>2986	4	2061</citation>
	<citation>3045	4	2061</citation>
	<citation>3045	4	2061</citation>
	<citation>3093	4	2061</citation>
	<citation>1140	5	2061</citation>
	<citation>1141	5	2061</citation>
	<citation>1477	5	2061</citation>
	<citation>1491	5	2061</citation>
	<citation>1825	5	2061</citation>
	<citation>2061	5	2061</citation>
	<citation>2061	5	2061</citation>
	<citation>2061	5	2061</citation>
	<citation>773	5	2061</citation>
	</citations>
	</document>
	<document id= '2060'>
	<title>GEDANKEN-A Simple Typeless Language Based on the Principle of Completeness and the Reference Concept</title>
	<abstract>GEDANKEN is an experimental programming language with the following  characteristics.  (1) Any value which is permitted in some context of the  language is permissible in any other meaningful context.  In particular, functions and labels are permissible  results of functions and values of variables.  (2) Assignment and indirect addressing are formalized by introducing values, called reference, which in turn possess other values.  The assignment operation always affects the relation between some reference and its value,  (3) All compound data structures are treated as functions.  (4) Type declarations are not permitted.  The functional approach to data structures and the use of references insure that any process which accepts some data structure will accept any logically equivalent structure, regardless of its internal representation.  More generally, any data structure may be implicit; i.e. it may be specified by giving an arbitrary algorithm for computing or accessing its components.  The existence of  label variables permits the construction of coroutines, quasi-parallel processes, and other unorthodox control mechanisms. A variety of programming examples illustrates the generality of the language. Limitations and possible extensions are discussed briefly.</abstract>
	<conference>CACM May, 1970</conference>
	<authors>
	<author>Reynolds, J. C.</author>
	</authors>
	<keywords>programming language, data structure, reference, assignment, coroutine, quasi-parallel process, typeless language, applicative language, lambda calculus, list processing, nondeterministic algorithm</keywords>
	<version>4.20 4.22 5.23 5.24</version>
	<location>CA700506 JB February 13, 1978  1:43 PM</location>
	<citations>
	<citation>1024	4	2060</citation>
	<citation>1051	4	2060</citation>
	<citation>1102	4	2060</citation>
	<citation>1132	4	2060</citation>
	<citation>1379	4	2060</citation>
	<citation>1380	4	2060</citation>
	<citation>1390	4	2060</citation>
	<citation>1486	4	2060</citation>
	<citation>1541	4	2060</citation>
	<citation>1542	4	2060</citation>
	<citation>1549	4	2060</citation>
	<citation>1552	4	2060</citation>
	<citation>1683	4	2060</citation>
	<citation>1693	4	2060</citation>
	<citation>1693	4	2060</citation>
	<citation>1693	4	2060</citation>
	<citation>1706	4	2060</citation>
	<citation>1781	4	2060</citation>
	<citation>1781	4	2060</citation>
	<citation>1781	4	2060</citation>
	<citation>1787	4	2060</citation>
	<citation>1826	4	2060</citation>
	<citation>1836	4	2060</citation>
	<citation>1836	4	2060</citation>
	<citation>1846	4	2060</citation>
	<citation>1854	4	2060</citation>
	<citation>1860	4	2060</citation>
	<citation>1878	4	2060</citation>
	<citation>1945	4	2060</citation>
	<citation>1945	4	2060</citation>
	<citation>1989	4	2060</citation>
	<citation>378	4	2060</citation>
	<citation>2015	4	2060</citation>
	<citation>2060	4	2060</citation>
	<citation>2060	4	2060</citation>
	<citation>2060	4	2060</citation>
	<citation>2060	4	2060</citation>
	<citation>2060	4	2060</citation>
	<citation>2060	4	2060</citation>
	<citation>2060	4	2060</citation>
	<citation>2060	4	2060</citation>
	<citation>2061	4	2060</citation>
	<citation>2061	4	2060</citation>
	<citation>2082	4	2060</citation>
	<citation>2091	4	2060</citation>
	<citation>2091	4	2060</citation>
	<citation>2155	4	2060</citation>
	<citation>2152	4	2060</citation>
	<citation>2168	4	2060</citation>
	<citation>2179	4	2060</citation>
	<citation>2179	4	2060</citation>
	<citation>2179	4	2060</citation>
	<citation>2218	4	2060</citation>
	<citation>2294	4	2060</citation>
	<citation>2340	4	2060</citation>
	<citation>2356	4	2060</citation>
	<citation>2470	4	2060</citation>
	<citation>2546	4	2060</citation>
	<citation>2546	4	2060</citation>
	<citation>2603	4	2060</citation>
	<citation>2698	4	2060</citation>
	<citation>2698	4	2060</citation>
	<citation>2698	4	2060</citation>
	<citation>2708	4	2060</citation>
	<citation>2708	4	2060</citation>
	<citation>2719	4	2060</citation>
	<citation>2723	4	2060</citation>
	<citation>2770	4	2060</citation>
	<citation>2824	4	2060</citation>
	<citation>2838	4	2060</citation>
	<citation>2842	4	2060</citation>
	<citation>2855	4	2060</citation>
	<citation>2879	4	2060</citation>
	<citation>2921	4	2060</citation>
	<citation>2982	4	2060</citation>
	<citation>2986	4	2060</citation>
	<citation>557	4	2060</citation>
	<citation>3045	4	2060</citation>
	<citation>3045	4	2060</citation>
	<citation>3077	4	2060</citation>
	<citation>3080	4	2060</citation>
	<citation>3093	4	2060</citation>
	<citation>3106	4	2060</citation>
	<citation>3112	4	2060</citation>
	<citation>3124	4	2060</citation>
	<citation>3154	4	2060</citation>
	<citation>627	4	2060</citation>
	<citation>106	4	2060</citation>
	<citation>210	5	2060</citation>
	<citation>1380	5	2060</citation>
	<citation>1421	5	2060</citation>
	<citation>1469	5	2060</citation>
	<citation>1477	5	2060</citation>
	<citation>1491	5	2060</citation>
	<citation>1869	5	2060</citation>
	<citation>2060	5	2060</citation>
	<citation>2060	5	2060</citation>
	<citation>2060	5	2060</citation>
	<citation>2110	5	2060</citation>
	<citation>2155	5	2060</citation>
	<citation>2294	5	2060</citation>
	<citation>2558	5	2060</citation>
	<citation>2842	5	2060</citation>
	<citation>3077	5	2060</citation>
	<citation>3150	5	2060</citation>
	<citation>1389	6	2060</citation>
	<citation>1469	6	2060</citation>
	<citation>1471	6	2060</citation>
	<citation>210	6	2060</citation>
	<citation>210	6	2060</citation>
	<citation>210	6	2060</citation>
	<citation>1834	6	2060</citation>
	<citation>378	6	2060</citation>
	<citation>2046	6	2060</citation>
	<citation>2060	6	2060</citation>
	<citation>2060	6	2060</citation>
	<citation>2060	6	2060</citation>
	<citation>2060	6	2060</citation>
	<citation>2060	6	2060</citation>
	<citation>2060	6	2060</citation>
	<citation>2148	6	2060</citation>
	<citation>2192	6	2060</citation>
	<citation>2457	6	2060</citation>
	<citation>2704	6	2060</citation>
	<citation>2842	6	2060</citation>
	<citation>2939	6	2060</citation>
	<citation>2940	6	2060</citation>
	<citation>2941	6	2060</citation>
	<citation>2943	6	2060</citation>
	<citation>3073	6	2060</citation>
	<citation>3148	6	2060</citation>
	<citation>3184	6	2060</citation>
	</citations>
	</document>
	<document id= '2059'>
	<title>A Language for Treating Graphs</title>
	<abstract>A language for the representation of graph is described, and the formulation of  graph operations such as node and/or link deletion or insertion, union,  intersection, comparison, and traversal of graphs is given.  Graphs are represented by linked lists.  The language is syntactically defined as an extension to ALGOL 60, and it is translated into ALGOL by means of a syntax-driven compiler.  Application areas for this language are operation research, network problems, control theory, traffic problems, etc.</abstract>
	<conference>CACM May, 1970</conference>
	<authors>
	<author>Reghizzi, S.</author>
	<author>Morpurgo, R.</author>
	</authors>
	<keywords>graphs, oriented, nonoriented, multiple, colored graph, language extended ALGOL, operator-precedence, syntax-driven compiler, operation research, network, traffic</keywords>
	<version>3.2 3.5 4.2 5.3</version>
	<location>CA700507 JB February 13, 1978  1:31 PM</location>
	<citations>
	<citation>249	4	2059</citation>
	<citation>254	4	2059</citation>
	<citation>272	4	2059</citation>
	<citation>1102	4	2059</citation>
	<citation>1109	4	2059</citation>
	<citation>1140	4	2059</citation>
	<citation>1188	4	2059</citation>
	<citation>1306	4	2059</citation>
	<citation>1464	4	2059</citation>
	<citation>1491	4	2059</citation>
	<citation>1767	4	2059</citation>
	<citation>1781	4	2059</citation>
	<citation>1787	4	2059</citation>
	<citation>1949	4	2059</citation>
	<citation>321	4	2059</citation>
	<citation>2059	4	2059</citation>
	<citation>2126	4	2059</citation>
	<citation>435	4	2059</citation>
	<citation>437	4	2059</citation>
	<citation>463	4	2059</citation>
	<citation>483	4	2059</citation>
	<citation>491	4	2059</citation>
	<citation>2732	4	2059</citation>
	<citation>560	4	2059</citation>
	<citation>583	4	2059</citation>
	<citation>3073	4	2059</citation>
	<citation>627	4	2059</citation>
	<citation>631	4	2059</citation>
	<citation>632	4	2059</citation>
	<citation>642	4	2059</citation>
	<citation>644	4	2059</citation>
	<citation>653	4	2059</citation>
	<citation>680	4	2059</citation>
	<citation>761	4	2059</citation>
	<citation>762	4	2059</citation>
	<citation>763	4	2059</citation>
	<citation>123	4	2059</citation>
	<citation>140	4	2059</citation>
	<citation>919	4	2059</citation>
	<citation>989	4	2059</citation>
	<citation>196	5	2059</citation>
	<citation>2059	5	2059</citation>
	<citation>2059	5	2059</citation>
	<citation>2059	5	2059</citation>
	<citation>2178	5	2059</citation>
	<citation>1303	6	2059</citation>
	<citation>1323	6	2059</citation>
	<citation>2059	6	2059</citation>
	<citation>2127	6	2059</citation>
	<citation>3184	6	2059</citation>
	</citations>
	</document>
	<document id= '2058'>
	<title>In-Situ Transposition of a Rectangular Matrix (Algorithm 380 $F1))</title>
	<conference>CACM May, 1970</conference>
	<authors>
	<author>Laflin, S.</author>
	<author>Brebner, M. A.</author>
	</authors>
	<keywords>rectangular matrix, transpose</keywords>
	<version>5.14</version>
	<location>CA700508 JB February 13, 1978  1:21 PM</location>
	<citations>
	<citation>2057	4	2058</citation>
	<citation>2058	4	2058</citation>
	<citation>2392	4	2058</citation>
	<citation>2416	4	2058</citation>
	<citation>1600	5	2058</citation>
	<citation>2058	5	2058</citation>
	<citation>2058	5	2058</citation>
	<citation>2058	5	2058</citation>
	<citation>2416	5	2058</citation>
	<citation>1600	6	2058</citation>
	<citation>2058	6	2058</citation>
	</citations>
	</document>
	<document id= '2057'>
	<title>Random Vectors Uniform in Solid Angle (Algorithm 381 $G5))</title>
	<conference>CACM May, 1970</conference>
	<authors>
	<author>Knop, R. E.</author>
	</authors>
	<keywords>random number, random vector, random number generator, probability distribution, frequency distribution, simulation, Monte Carlo</keywords>
	<version>5.5</version>
	<location>CA700509 JB February 13, 1978  1:19 PM</location>
	<citations>
	<citation>2057	4	2057</citation>
	<citation>2057	4	2057</citation>
	<citation>2057	4	2057</citation>
	<citation>2058	4	2057</citation>
	<citation>2349	4	2057</citation>
	<citation>2392	4	2057</citation>
	<citation>2392	4	2057</citation>
	<citation>2416	4	2057</citation>
	<citation>1600	5	2057</citation>
	<citation>1894	5	2057</citation>
	<citation>2055	5	2057</citation>
	<citation>2057	5	2057</citation>
	<citation>2057	5	2057</citation>
	<citation>2057	5	2057</citation>
	</citations>
	</document>
	<document id= '2056'>
	<title>Gomory (Algorithm 263A $H))</title>
	<conference>CACM May, 1970</conference>
	<authors>
	<author>Proll, L. G.</author>
	</authors>
	<keywords>linear programming, integer variables, dual method</keywords>
	<version>5.41</version>
	<location>CA700510 JB February 13, 1978  1:17 PM</location>
	<citations>
	<citation>2056	5	2056</citation>
	<citation>2056	5	2056</citation>
	<citation>2056	5	2056</citation>
	</citations>
	</document>
	<document id= '2055'>
	<title>Subroutine to Perform In-Situ Transposition of a Rectangular Matrix (Algorithm 380)</title>
	<conference>CACM May, 1970</conference>
	<authors>
	<author>Lachenmaier, R.</author>
	</authors>
	<keywords>rectangular matrix, transpose</keywords>
	<version>5.14</version>
	<location>CA700511 JB February 13, 1978  1:14 PM</location>
	<citations>
	<citation>2055	5	2055</citation>
	<citation>2055	5	2055</citation>
	<citation>2055	5	2055</citation>
	<citation>2057	5	2055</citation>
	<citation>2392	5	2055</citation>
	<citation>1600	6	2055</citation>
	<citation>1600	6	2055</citation>
	<citation>1894	6	2055</citation>
	<citation>2055	6	2055</citation>
	<citation>2055	6	2055</citation>
	</citations>
	</document>
	<document id= '2054'>
	<title>On the Feasibility of Voice Input to an On-line Computer Processing System</title>
	<abstract>An on-line digital computer processing system is considered in which an  ordinary telephone is the complete terminal device, input to the computer  being provided as a sequence of spoken words, and output to the user being  audio responses from the machine.  The feasibility of implementing such a  system with a FORTRAN-like algebraic compiler as the object processor is  considered.  Details of a specific word recognition program are given.  This  technique depends on three simplifying restrictions, namely, a "small" vocabulary set, "known" speakers, and a "moment of silence" between each input word.  Experimental results are presented giving error rates for different experimental conditions as well as the machine  resources required to accommodate several users at a time. The results show  that at this time it is both economically and logically feasible to handle at  least 40 users at a time with an IBM 360/65 computer.</abstract>
	<conference>CACM June, 1970</conference>
	<authors>
	<author>Elder, H. A.</author>
	</authors>
	<keywords>speech recognition, word recognition, pattern-matching, pattern recognition, time-sharing, remote access, voice input, speech input, telephone input/output, acoustic signal, spoken-word input, talking to  computers, man-machine interaction</keywords>
	<version>3.63 3.81 4.32 4.41 6.35</version>
	<location>CA700601 JB February 13, 1978  12:12 PM</location>
	<citations>
	<citation>2054	4	2054</citation>
	<citation>1544	5	2054</citation>
	<citation>2054	5	2054</citation>
	<citation>2054	5	2054</citation>
	<citation>2054	5	2054</citation>
	</citations>
	</document>
	<document id= '2053'>
	<title>On the Conversion of Decision Tables to Computer Programs</title>
	<abstract>The use of execution time diagnostics in pinpointing ambiguities in decision tables is discussed.  It is pointed out that any attempt at resolving ambiguities at compile time will, in general, be impossible.  It is shown that, as a consequence, tree methods of converting decision tables to programs are inadequate in regard to ambiguity detection. Two algorithms for programming decision tables whose merits are simplicity of implementation and detection of ambiguities at execution time are presented. The first algorithm is for limited entry decision tables and clarifies the importance of proper coding of the information in the decision table.  The second algorithm programs a mixed entry decision table directly without going through the intermediate step of conversion to a limited entry form, thereby resulting in storage economy.  A comparison of the algorithms and others  proposed in the literature is made.  Some features of a decision table to Fortran IV translator for the IBM 7044 developed by the authors are given.</abstract>
	<conference>CACM June, 1970</conference>
	<authors>
	<author>Muthukrishnan, C. R.</author>
	<author>Rajaraman, V.</author>
	</authors>
	<keywords>decision tables, diagnostic aids, system analysis, business applications</keywords>
	<version>3.50 3.59 4.19 4.29 4.49</version>
	<location>CA700602 JB February 13, 1978  12:03 PM</location>
	<citations>
	<citation>1354	4	2053</citation>
	<citation>1354	4	2053</citation>
	<citation>1354	4	2053</citation>
	<citation>1488	4	2053</citation>
	<citation>1488	4	2053</citation>
	<citation>1684	4	2053</citation>
	<citation>1994	4	2053</citation>
	<citation>2053	4	2053</citation>
	<citation>2053	4	2053</citation>
	<citation>2053	4	2053</citation>
	<citation>2053	4	2053</citation>
	<citation>2053	4	2053</citation>
	<citation>2220	4	2053</citation>
	<citation>2220	4	2053</citation>
	<citation>2220	4	2053</citation>
	<citation>2220	4	2053</citation>
	<citation>2273	4	2053</citation>
	<citation>2273	4	2053</citation>
	<citation>2273	4	2053</citation>
	<citation>2273	4	2053</citation>
	<citation>2453	4	2053</citation>
	<citation>2453	4	2053</citation>
	<citation>2517	4	2053</citation>
	<citation>2518	4	2053</citation>
	<citation>2598	4	2053</citation>
	<citation>2616	4	2053</citation>
	<citation>2726	4	2053</citation>
	<citation>2726	4	2053</citation>
	<citation>2726	4	2053</citation>
	<citation>2856	4	2053</citation>
	<citation>2856	4	2053</citation>
	<citation>2856	4	2053</citation>
	<citation>3034	4	2053</citation>
	<citation>3113	4	2053</citation>
	<citation>1172	5	2053</citation>
	<citation>1237	5	2053</citation>
	<citation>1327	5	2053</citation>
	<citation>1354	5	2053</citation>
	<citation>1684	5	2053</citation>
	<citation>2053	5	2053</citation>
	<citation>2053	5	2053</citation>
	<citation>2053	5	2053</citation>
	<citation>2221	5	2053</citation>
	<citation>2273	5	2053</citation>
	<citation>2453	5	2053</citation>
	<citation>2517	5	2053</citation>
	<citation>2856	5	2053</citation>
	<citation>3034	5	2053</citation>
	<citation>1172	6	2053</citation>
	<citation>1172	6	2053</citation>
	<citation>1172	6	2053</citation>
	<citation>1237	6	2053</citation>
	<citation>1327	6	2053</citation>
	<citation>1327	6	2053</citation>
	<citation>1354	6	2053</citation>
	<citation>1354	6	2053</citation>
	<citation>1354	6	2053</citation>
	<citation>1684	6	2053</citation>
	<citation>1684	6	2053</citation>
	<citation>1683	6	2053</citation>
	<citation>2053	6	2053</citation>
	<citation>2053	6	2053</citation>
	<citation>2053	6	2053</citation>
	<citation>2053	6	2053</citation>
	<citation>2053	6	2053</citation>
	<citation>2053	6	2053</citation>
	<citation>2220	6	2053</citation>
	<citation>2220	6	2053</citation>
	<citation>2220	6	2053</citation>
	<citation>2221	6	2053</citation>
	<citation>2453	6	2053</citation>
	<citation>2517	6	2053</citation>
	<citation>2598	6	2053</citation>
	<citation>753	6	2053</citation>
	</citations>
	</document>
	<document id= '2052'>
	<title>Scheduling to Reduce Conflict in Meetings</title>
	<abstract>Conflicts in scheduling can be treated as defining an undirected linear graph  independently of the relation of the activities in conflict to additional  constraints of time and space.  Each connected component of such a graph, which can be found by an algorithm described by Gotlieb and Corneil,  corresponds to a set of events that must be scheduled at different times.</abstract>
	<conference>CACM June, 1970</conference>
	<authors>
	<author>Grimes, J. E.</author>
	</authors>
	<keywords>allocation, conflict matrix, connected component, scheduling, spanning tree, undirected linear graph</keywords>
	<version>1.90 3.51 3.59 5.32</version>
	<location>CA700603 JB February 13, 1978  11:55 AM</location>
	<citations>
	<citation>1609	4	2052</citation>
	<citation>1847	4	2052</citation>
	<citation>1961	4	2052</citation>
	<citation>2052	4	2052</citation>
	<citation>2052	4	2052</citation>
	<citation>2052	4	2052</citation>
	<citation>2052	4	2052</citation>
	<citation>2209	4	2052</citation>
	<citation>1008	5	2052</citation>
	<citation>1013	5	2052</citation>
	<citation>1504	5	2052</citation>
	<citation>1540	5	2052</citation>
	<citation>2052	5	2052</citation>
	<citation>2052	5	2052</citation>
	<citation>2052	5	2052</citation>
	</citations>
	</document>
	<document id= '2051'>
	<title>A PL/I Program to Assist the Comparative Linguist</title>
	<abstract>A practical PL/I program is described which can assist comparative linguists to determine the regular sound correspondences between genetically related languages. The investigator must arrange data for input by aligning pairs of suspected cognates.  The program tabulates the correspondences, and uses list processing techniques to sort and count them. Each pair of words is then assigned a relative value that is a function of the total frequency in the data of each correspondence found in that pair of words.  The output is a list of all correspondence types with their frequency of occurrence in the data, and a separate listing of each correspondence with all word-pairs showing that correspondence (unless their relative value is below an arbitrarily  chosen cutoff point).  The article explains the usefulness, as well as the limitations, of the programs, and illustrates its use with a small portion of hypothetical data.</abstract>
	<conference>CACM June, 1970</conference>
	<authors>
	<author>Frantz, D. G.</author>
	</authors>
	<keywords>comparative linguistics, natural language processing, comparative method, historical linguistics, diachronic linguistics, genetic relationship, sound change, sound correspondence, regular correspondence, list processing</keywords>
	<version>3.42</version>
	<location>CA700604 JB February 13, 1978  11:51 AM</location>
	<citations>
	<citation>2051	5	2051</citation>
	<citation>2051	5	2051</citation>
	<citation>2051	5	2051</citation>
	</citations>
	</document>
	<document id= '2050'>
	<title>Automatic Parsing for Content Analysis</title>
	<abstract>Although automatic syntactic and semantic analysis is not yet possible for all of an unrestricted natural language text, some applications, of which  content analysis is one, do not have such a stringent coverage requirement. Preliminary studies show that the Harvard Syntactic Analyzer can produce correct and unambiguous identification of the subject and object of certain verbs for approximately half of the relevant occurrences.  This provides a degree of coverage for content analysis variables which  compares favorably to manual methods, in variables which compares favorably  to manual methods, in which only a sample of the total available text is  normally processed.</abstract>
	<conference>CACM June, 1970</conference>
	<authors>
	<author>Damerau, F. J.</author>
	</authors>
	<keywords>Content analysis, parsing, syntactic analysis, natural language processing, information retrieval, language analysis, text processing</keywords>
	<version>3.42 3.71</version>
	<location>CA700605 JB February 13, 1978  11:43 AM</location>
	<citations>
	<citation>1350	4	2050</citation>
	<citation>1659	4	2050</citation>
	<citation>1856	4	2050</citation>
	<citation>2050	4	2050</citation>
	<citation>1225	5	2050</citation>
	<citation>2050	5	2050</citation>
	<citation>2050	5	2050</citation>
	<citation>2050	5	2050</citation>
	</citations>
	</document>
	<document id= '2049'>
	<title>Accurate Floating-Point Summation</title>
	<abstract>This paper describes an alternate method for summing a set of floating-point numbers.  Comparison of the error bound for this method with that of the standard summation method shows that it is considerably less sensitive to propagation of round-off error.</abstract>
	<conference>CACM June, 1970</conference>
	<authors>
	<author>Linz, P.</author>
	</authors>
	<keywords>summation, floating-point addition, round-off error, round-off propagation</keywords>
	<version>5.11</version>
	<location>CA700606 JB February 13, 1978  11:36 AM</location>
	<citations>
	<citation>2049	5	2049</citation>
	<citation>2049	5	2049</citation>
	<citation>2049	5	2049</citation>
	<citation>2183	5	2049</citation>
	<citation>2282	5	2049</citation>
	<citation>1328	6	2049</citation>
	<citation>2049	6	2049</citation>
	<citation>2049	6	2049</citation>
	</citations>
	</document>
	<document id= '2048'>
	<title>Comparison of Several Adaptive Newton-Cotes Quadrature Routines in Evaluating Definite Integrals with Peaked Integrands</title>
	<abstract>This report compares the performance of five different adaptive quadrature  schemes, based on Newton-Cotes (2N + 1) point rules (N = 1, 2, 3, 4, 5), in approximating the set of definite integrals INTEGRAL$1/(x^2 + p^2)) dx with  relative accuracy e.</abstract>
	<conference>CACM June, 1970</conference>
	<authors>
	<author>Hillstrom, K. E.</author>
	</authors>
	<keywords>adaptive Newton-Cotes quadrature, quadrature scheme comparison, definite integral evaluation, adaptive numerical in tegration, Newton-Cotes  integration, peaked integrand integration, quadrature efficiently plot, New-Cotes rules applications, Newton-Cotes rules modifications</keywords>
	<version>5.10 5.16</version>
	<location>CA700607 JB February 13, 1978  11:08 AM</location>
	<citations>
	<citation>1352	4	2048</citation>
	<citation>1352	4	2048</citation>
	<citation>1352	4	2048</citation>
	<citation>2048	4	2048</citation>
	<citation>2048	4	2048</citation>
	<citation>2048	4	2048</citation>
	<citation>2074	4	2048</citation>
	<citation>2074	4	2048</citation>
	<citation>2074	4	2048</citation>
	<citation>2093	4	2048</citation>
	<citation>2093	4	2048</citation>
	<citation>2550	4	2048</citation>
	<citation>2048	5	2048</citation>
	<citation>2048	5	2048</citation>
	<citation>2048	5	2048</citation>
	<citation>429	5	2048</citation>
	<citation>786	5	2048</citation>
	<citation>834	5	2048</citation>
	</citations>
	</document>
	<document id= '2047'>
	<title>Incorporating Origin Shifts into the QR Algorithm for Symmetric Tridiagonal Matrices</title>
	<abstract>The QR iteration for the eigenvalues of a symmetric tridiagonal matrix can  be accelerated by incorporating a sequence of origin shifts.  The origin shift may be either subtracted directly from the diagonal elements of the matrix or incorporated by means of an implicit algorithm.  Both methods have drawbacks: the direct method can unnecessarily degrade small  eigenvalues, while the implicit method can effectively loose the shift and  thereby retard the convergence.  This paper presents a new method which has  neither drawback.</abstract>
	<conference>CACM June, 1970</conference>
	<authors>
	<author>Stewart, G. W.</author>
	</authors>
	<keywords>eigenvalues, eigenvectors, QR method, origin shifts, symmetric tridiagonal matrix</keywords>
	<version>5.14</version>
	<location>CA700608 JB February 13, 1978  11:02 AM</location>
	<citations>
	<citation>2047	5	2047</citation>
	<citation>2047	5	2047</citation>
	<citation>2047	5	2047</citation>
	</citations>
	</document>
	<document id= '2046'>
	<title>A Relational Model of Data for Large Shared Data Banks</title>
	<abstract>Future users of large data banks must be protected from having to know how the  data is organized in the machine (the internal representation).  A prompting service which supplies such information is not a satisfactory solution.  Activities of users at terminals and most application programs should remain unaffected when the internal representation of data is changed and even when some aspects of the external representation  are changed.  Change in data representation will often be needed as a result  of changes in query, update, and report traffic and natural growth in the  types of stored information.  Existing noninferential, formatted data systems  provide users with tree-structured files or slightly more general network  models of the data.  In Section 1, inadequacies of these models are discussed. A model based on n-ary relations, a normal form for data base relations, and the concept of a universal form for data base relations, and the concept of a universal data sublanguage are introduced.  In Section 2, certain operations on relations (other than logical inference) are discussed and applied to the problems of redundancy and consistency in the user's model.</abstract>
	<conference>CACM June, 1970</conference>
	<authors>
	<author>Codd, E. F.</author>
	</authors>
	<keywords>data bank, data base, data structure, data organization, hierarchies of data, networks of data, relations, derivability,  redundancy, consistency, composition, join, retrieval language, predicate calculus, security, data integrity</keywords>
	<version>3.70 3.73 3.75 4.20 4.22 4.29</version>
	<location>CA700609 JB February 13, 1978  10:57 AM</location>
	<citations>
	<citation>2046	4	2046</citation>
	<citation>2710	4	2046</citation>
	<citation>1515	5	2046</citation>
	<citation>2046	5	2046</citation>
	<citation>2046	5	2046</citation>
	<citation>2046	5	2046</citation>
	<citation>2155	5	2046</citation>
	<citation>2406	5	2046</citation>
	<citation>2710	5	2046</citation>
	<citation>2715	5	2046</citation>
	<citation>2716	5	2046</citation>
	<citation>2717	5	2046</citation>
	<citation>2718	5	2046</citation>
	<citation>2765	5	2046</citation>
	<citation>2817	5	2046</citation>
	<citation>2888	5	2046</citation>
	<citation>2901	5	2046</citation>
	<citation>2957	5	2046</citation>
	<citation>2959	5	2046</citation>
	<citation>2965	5	2046</citation>
	<citation>3087	5	2046</citation>
	<citation>3154	5	2046</citation>
	<citation>1389	6	2046</citation>
	<citation>1515	6	2046</citation>
	<citation>210	6	2046</citation>
	<citation>1936	6	2046</citation>
	<citation>1976	6	2046</citation>
	<citation>1976	6	2046</citation>
	<citation>1989	6	2046</citation>
	<citation>378	6	2046</citation>
	<citation>2046	6	2046</citation>
	<citation>2046	6	2046</citation>
	<citation>2046	6	2046</citation>
	<citation>2046	6	2046</citation>
	<citation>2046	6	2046</citation>
	<citation>2046	6	2046</citation>
	<citation>2046	6	2046</citation>
	<citation>2046	6	2046</citation>
	<citation>2046	6	2046</citation>
	<citation>2046	6	2046</citation>
	<citation>2046	6	2046</citation>
	<citation>2046	6	2046</citation>
	<citation>2046	6	2046</citation>
	<citation>2046	6	2046</citation>
	<citation>2046	6	2046</citation>
	<citation>2046	6	2046</citation>
	<citation>2060	6	2046</citation>
	<citation>2110	6	2046</citation>
	<citation>2406	6	2046</citation>
	<citation>2451	6	2046</citation>
	<citation>2451	6	2046</citation>
	<citation>2452	6	2046</citation>
	<citation>2715	6	2046</citation>
	<citation>2715	6	2046</citation>
	<citation>2715	6	2046</citation>
	<citation>3133	6	2046</citation>
	<citation>616	6	2046</citation>
	<citation>616	6	2046</citation>
	<citation>616	6	2046</citation>
	</citations>
	</document>
	<document id= '2045'>
	<title>Combinations of M Out of N Objects (Algorithm 382 $G6))</title>
	<conference>CACM June, 1970</conference>
	<authors>
	<author>Chase, P. J.</author>
	</authors>
	<keywords>permutations and combinations, permutations</keywords>
	<version>5.39</version>
	<location>CA700610 JB February 13, 1978  10:38 AM</location>
	<citations>
	<citation>2045	5	2045</citation>
	<citation>2045	5	2045</citation>
	<citation>2045	5	2045</citation>
	<citation>2466	5	2045</citation>
	<citation>2834	5	2045</citation>
	<citation>3115	5	2045</citation>
	<citation>907	6	2045</citation>
	<citation>969	6	2045</citation>
	<citation>2045	6	2045</citation>
	<citation>2045	6	2045</citation>
	<citation>2045	6	2045</citation>
	<citation>2417	6	2045</citation>
	<citation>2417	6	2045</citation>
	<citation>2466	6	2045</citation>
	<citation>2466	6	2045</citation>
	<citation>2884	6	2045</citation>
	<citation>579	6	2045</citation>
	<citation>785	6	2045</citation>
	</citations>
	</document>
	<document id= '2044'>
	<title>Permutations of a Set with Repetitions (Algorithm 383 $G6))</title>
	<conference>CACM June, 1970</conference>
	<authors>
	<author>Chase, P. J.</author>
	</authors>
	<keywords>permutations and combinations, permutations</keywords>
	<version>5.39</version>
	<location>CA700611 JB February 13, 1978  10:36 AM</location>
	<citations>
	<citation>2044	4	2044</citation>
	<citation>2044	4	2044</citation>
	<citation>2044	4	2044</citation>
	<citation>2044	4	2044</citation>
	<citation>2189	4	2044</citation>
	<citation>2417	4	2044</citation>
	<citation>2505	4	2044</citation>
	<citation>2874	4	2044</citation>
	<citation>2908	4	2044</citation>
	<citation>996	5	2044</citation>
	<citation>1558	5	2044</citation>
	<citation>2044	5	2044</citation>
	<citation>2044	5	2044</citation>
	<citation>2044	5	2044</citation>
	<citation>2230	5	2044</citation>
	<citation>521	5	2044</citation>
	</citations>
	</document>
	<document id= '2043'>
	<title>Eigenvalues and Eigenvectors of a Real Symmetric Matrix $F2) (Algorithm 384)</title>
	<conference>CACM June, 1970</conference>
	<authors>
	<author>Stewart, G. W.</author>
	</authors>
	<keywords>real symmetric matrix, eigenvalues, eigenvectors, QR algorithm</keywords>
	<version>5.14</version>
	<location>CA700612 JB February 13, 1978  10:34 AM</location>
	<citations>
	<citation>2043	5	2043</citation>
	<citation>2043	5	2043</citation>
	<citation>2043	5	2043</citation>
	<citation>2349	5	2043</citation>
	<citation>1648	6	2043</citation>
	<citation>1716	6	2043</citation>
	<citation>1794	6	2043</citation>
	<citation>1894	6	2043</citation>
	<citation>2043	6	2043</citation>
	<citation>501	6	2043</citation>
	<citation>613	6	2043</citation>
	<citation>774	6	2043</citation>
	</citations>
	</document>
	<document id= '2042'>
	<title>Treesort 3 (Algorithm 245 $M1))</title>
	<abstract>The certification of an algorithm can take the form of a proof that the algorithm is correct.  As an illustrative but practical example, Algorithm 245, TREESORT 3 for sorting an array, is proved correct.</abstract>
	<conference>CACM June, 1970</conference>
	<authors>
	<author>London, R. L.</author>
	</authors>
	<keywords>proof of algorithms, debugging, certification, metatheory, sorting, in-place sorting</keywords>
	<version>4.42 4.49 5.24 5.31</version>
	<location>CA700613 JB February 13, 1978  10:32 AM</location>
	<citations>
	<citation>2042	4	2042</citation>
	<citation>2042	4	2042</citation>
	<citation>2222	4	2042</citation>
	<citation>2356	4	2042</citation>
	<citation>2679	4	2042</citation>
	<citation>2679	4	2042</citation>
	<citation>2844	4	2042</citation>
	<citation>2972	4	2042</citation>
	<citation>970	5	2042</citation>
	<citation>1228	5	2042</citation>
	<citation>2042	5	2042</citation>
	<citation>2042	5	2042</citation>
	<citation>2042	5	2042</citation>
	<citation>2222	5	2042</citation>
	<citation>2679	5	2042</citation>
	<citation>970	6	2042</citation>
	<citation>970	6	2042</citation>
	<citation>1175	6	2042</citation>
	<citation>1190	6	2042</citation>
	<citation>1228	6	2042</citation>
	<citation>1800	6	2042</citation>
	<citation>1818	6	2042</citation>
	<citation>1834	6	2042</citation>
	<citation>1969	6	2042</citation>
	<citation>1997	6	2042</citation>
	<citation>308	6	2042</citation>
	<citation>2042	6	2042</citation>
	<citation>2042	6	2042</citation>
	<citation>3187	6	2042</citation>
	<citation>507	6	2042</citation>
	<citation>716	6	2042</citation>
	<citation>783	6	2042</citation>
	</citations>
	</document>
	<document id= '2041'>
	<title>Shellsort (Algorithm 201 $M1))</title>
	<conference>CACM June, 1970</conference>
	<authors>
	<author>Chandler, J. P.</author>
	<author>Harrison, W. C.</author>
	</authors>
	<keywords>sorting, minimal storage sorting, digital computer sorting</keywords>
	<version>5.31</version>
	<location>CA700614 JB February 13, 1978  10:29 AM</location>
	<citations>
	<citation>1175	4	2041</citation>
	<citation>1919	4	2041</citation>
	<citation>2017	4	2041</citation>
	<citation>2041	4	2041</citation>
	<citation>2216	4	2041</citation>
	<citation>2041	5	2041</citation>
	<citation>2041	5	2041</citation>
	<citation>2041	5	2041</citation>
	<citation>864	5	2041</citation>
	</citations>
	</document>
	<document id= '2040'>
	<title>Modified Romberg Quadrature (Algorithm 351 $D1))</title>
	<conference>CACM June, 1970</conference>
	<authors>
	<author>Wallick, G. C.</author>
	</authors>
	<keywords>numerical integration, Romberg quadrature, modified Romberg quadrature,  trapezoid values, rectangle values</keywords>
	<version>5.16</version>
	<location>CA700615 JB February 13, 1978  10:27 AM</location>
	<citations>
	<citation>1040	4	2040</citation>
	<citation>1352	4	2040</citation>
	<citation>1352	4	2040</citation>
	<citation>1352	4	2040</citation>
	<citation>1352	4	2040</citation>
	<citation>1356	4	2040</citation>
	<citation>1883	4	2040</citation>
	<citation>1982	4	2040</citation>
	<citation>1982	4	2040</citation>
	<citation>2040	4	2040</citation>
	<citation>2040	4	2040</citation>
	<citation>2040	4	2040</citation>
	<citation>2040	4	2040</citation>
	<citation>2040	4	2040</citation>
	<citation>2040	4	2040</citation>
	<citation>1241	5	2040</citation>
	<citation>1273	5	2040</citation>
	<citation>1352	5	2040</citation>
	<citation>1356	5	2040</citation>
	<citation>324	5	2040</citation>
	<citation>2040	5	2040</citation>
	<citation>2040	5	2040</citation>
	<citation>2040	5	2040</citation>
	<citation>2355	5	2040</citation>
	<citation>621	5	2040</citation>
	<citation>1418	6	2040</citation>
	<citation>1521	6	2040</citation>
	<citation>1597	6	2040</citation>
	<citation>1883	6	2040</citation>
	<citation>2040	6	2040</citation>
	<citation>2350	6	2040</citation>
	<citation>2354	6	2040</citation>
	</citations>
	</document>
	<document id= '2039'>
	<title>Permanent Function of a Square Matrix I and II (Algorithm 361 $G6))</title>
	<conference>CACM June, 1970</conference>
	<authors>
	<author>Shriver, B.</author>
	<author>Eberlein, P. J.</author>
	<author>Dixon, R. D.</author>
	</authors>
	<keywords>matrix, permanent, determinant</keywords>
	<version>5.30</version>
	<location>CA700616 JB February 13, 1978  10:01 AM</location>
	<citations>
	<citation>2039	5	2039</citation>
	<citation>2039	5	2039</citation>
	<citation>2039	5	2039</citation>
	</citations>
	</document>
	<document id= '2038'>
	<title>Combinations of M Out of N Objects (Algorithm 382 $G6))</title>
	<conference>CACM June, 1970</conference>
	<authors>
	<author>Chase, P. J.</author>
	</authors>
	<keywords>permutations and combinations, permutations</keywords>
	<version>5.39</version>
	<location>CA700617 JB February 13, 1978  9:59 AM</location>
	<citations>
	<citation>2038	5	2038</citation>
	<citation>2038	5	2038</citation>
	<citation>2038	5	2038</citation>
	</citations>
	</document>
	<document id= '2037'>
	<title>Permutations of a Set with Repetitions (Algorithm 383 $G6))</title>
	<conference>CACM June, 1970</conference>
	<authors>
	<author>Chase, P. J.</author>
	</authors>
	<keywords>permutations and combinations, permutations</keywords>
	<version>5.39</version>
	<location>CA700618 JB February 13, 1978  9:45 AM</location>
	<citations>
	<citation>2037	5	2037</citation>
	<citation>2037	5	2037</citation>
	<citation>2037	5	2037</citation>
	</citations>
	</document>
	<document id= '2036'>
	<title>An Interactive Command Generating Facility</title>
	<abstract>A facility to permit conversationally controlled tasks to be executed in a noninteractive environment is proposed. A means by which programs can generate interactive time-sharing commands and receive the corresponding output response is presented.  The commands  will be invoked as if they had been typed at a console keyboard.  It is  argued that this facility will help overcome some of the current limitations  in man-computer communication. A set of functions to accomplish the above  which could be embedded into any string processing language is suggested,  and necessary information pertinent to implementation of the facility on  existing time-sharing systems is given.</abstract>
	<conference>CACM July, 1970</conference>
	<authors>
	<author>Grant, C. A.</author>
	</authors>
	<keywords>time-sharing, command languages, pseudo-teletype, interaction, conditional job control, operating systems</keywords>
	<version>3.80 3.81 4.29 4.39</version>
	<location>CA700701 JB February 13, 1978  9:43 AM</location>
	<citations>
	<citation>1530	4	2036</citation>
	<citation>1531	4	2036</citation>
	<citation>1565	4	2036</citation>
	<citation>1703	4	2036</citation>
	<citation>1945	4	2036</citation>
	<citation>2036	4	2036</citation>
	<citation>1455	5	2036</citation>
	<citation>2036	5	2036</citation>
	<citation>2036	5	2036</citation>
	<citation>2036	5	2036</citation>
	</citations>
	</document>
	<document id= '2035'>
	<title>Conversational Access to a 2048-Word Machine</title>
	<abstract>LAP6 is an on-line system running on a 2048-word LINC which provides full  facilities for text editing, automatic filing and file maintenance, and  program preparation and assembly.  It focuses on the preparation and editing  of continuously displayed 23,040-character text strings (manuscripts) which can be positioned anywhere by the user and edited by simply adding and deleting lines as though working directly on an elastic scroll. Other features are available through a uniform command set which itself can  be augmented by the user.  The machine, although small, aids program design by providing display scope and premarked randomly addressable LINC tapes as standard items, in an environment similar to that of a sophisticated terminal.  The tapes are logically  similar to a disk.  Priority was given to the design of efficient tape algorithms to minimize the limitations of the small memory.  Techniques  developed for handling scroll editing, filing, and the layered system  structure are outlined.  LAP6 is used by about 2000 people in 11 countries.   Its design was strongly influenced by performance criteria established in  interviews held with LINC users themselves during the specification period.</abstract>
	<conference>CACM July, 1970</conference>
	<authors>
	<author>Wilkes, M. A.</author>
	</authors>
	<keywords>conversational computer access, display editing, display oriented system, filing algorithms, LAP6, layering, LINC, man-machine communication, on-line editing, on-line efficiency, on-line environment, scroll editing, small machine system, tape filing, tape  oriented system, text editing</keywords>
	<version>3.73 4.10 4.11 4.19 4.22 4.30 4.40 4.41</version>
	<location>CA700702 JB February 13, 1978  9:35 AM</location>
	<citations>
	<citation>2035	5	2035</citation>
	<citation>2035	5	2035</citation>
	<citation>2035	5	2035</citation>
	<citation>2357	5	2035</citation>
	<citation>1523	6	2035</citation>
	<citation>1829	6	2035</citation>
	<citation>2035	6	2035</citation>
	</citations>
	</document>
	<document id= '2034'>
	<title>The Mobile Programming System: STAGE2</title>
	<abstract>STAGE2 is the second level of a bootstrap sequence which is easily implemented on any computer.  It is a flexible, provided by STAGE2 are summarized, and the implementation techniques which have made it possible to have STAGE2 running on a new machine with less than one man-week of effort are discussed.  The approach has been successful on over 15 machines of widely varying characteristics.</abstract>
	<conference>CACM July, 1970</conference>
	<authors>
	<author>Waite, W. M.</author>
	</authors>
	<keywords>bootstrapping, macro processing, machine independence, programming languages, implementation techniques</keywords>
	<version>4.12 4.22</version>
	<location>CA700703 JB February 13, 1978  9:24 AM</location>
	<citations>
	<citation>1160	4	2034</citation>
	<citation>1530	4	2034</citation>
	<citation>1705	4	2034</citation>
	<citation>1781	4	2034</citation>
	<citation>1807	4	2034</citation>
	<citation>1852	4	2034</citation>
	<citation>1945	4	2034</citation>
	<citation>2034	4	2034</citation>
	<citation>2034	4	2034</citation>
	<citation>2034	4	2034</citation>
	<citation>2034	4	2034</citation>
	<citation>2034	4	2034</citation>
	<citation>2034	4	2034</citation>
	<citation>2290	4	2034</citation>
	<citation>2579	4	2034</citation>
	<citation>2923	4	2034</citation>
	<citation>2945	4	2034</citation>
	<citation>984	5	2034</citation>
	<citation>1231	5	2034</citation>
	<citation>1565	5	2034</citation>
	<citation>1852	5	2034</citation>
	<citation>1926	5	2034</citation>
	<citation>1947	5	2034</citation>
	<citation>2034	5	2034</citation>
	<citation>2034	5	2034</citation>
	<citation>2034	5	2034</citation>
	</citations>
	</document>
	<document id= '2033'>
	<title>Space/Time Trade-offs in Hash Coding with Allowable Errors</title>
	<abstract>In this paper trade-offs among certain computational factors a given set of messages.  Two new hash-coding methods are examined and compared with a particular conventional hash-coding method. The computational factors considered are the size of the hash area (space), the time required to identify a message as a nonmember of the  given set (reject time), and an allowable error frequency.  The new methods  are intended to reduce the amount of space required to contain the hash-coded  information from that associated with conventional methods.  The reduction in  space is accomplished by exploiting the possibility that a small fraction of  errors of commission may be tolerable in some applications, in particular,  applications in which a large amount of data is involved and a core resident hash area is consequently not feasible using conventional methods.  In such  applications, it is envisaged that overall performance could be improved by using a smaller core resident hash area in conjunction with the new methods and, when necessary, by using some secondary and perhaps time-consuming test to "catch" the small fraction of errors associated with new methods.  An example is discussed which illustrates possible areas of application for the new methods.  Analysis of the paradigm problem demonstrates that allowing a small number of test messages to be falsely identified as members of the given set will permit a much smaller hash area to be used without increasing reject time.</abstract>
	<conference>CACM July, 1970</conference>
	<authors>
	<author>Bloom, B. H.</author>
	</authors>
	<keywords>hash coding, hash addressing, scatter storage, searching, storage layout, retrieval trade-offs, retrieval efficiency, storage efficiency</keywords>
	<version>3.73 3.74 3.79</version>
	<location>CA700704 JB February 13, 1978  9:18 AM</location>
	<citations>
	<citation>1676	4	2033</citation>
	<citation>1682	4	2033</citation>
	<citation>1728	4	2033</citation>
	<citation>1860	4	2033</citation>
	<citation>1860	4	2033</citation>
	<citation>1973	4	2033</citation>
	<citation>1973	4	2033</citation>
	<citation>1992	4	2033</citation>
	<citation>2018	4	2033</citation>
	<citation>2018	4	2033</citation>
	<citation>2032	4	2033</citation>
	<citation>2033	4	2033</citation>
	<citation>2033	4	2033</citation>
	<citation>2033	4	2033</citation>
	<citation>2107	4	2033</citation>
	<citation>2107	4	2033</citation>
	<citation>2109	4	2033</citation>
	<citation>2109	4	2033</citation>
	<citation>2203	4	2033</citation>
	<citation>2203	4	2033</citation>
	<citation>2251	4	2033</citation>
	<citation>2251	4	2033</citation>
	<citation>2359	4	2033</citation>
	<citation>2524	4	2033</citation>
	<citation>2543	4	2033</citation>
	<citation>2543	4	2033</citation>
	<citation>2552	4	2033</citation>
	<citation>2559	4	2033</citation>
	<citation>2573	4	2033</citation>
	<citation>2770	4	2033</citation>
	<citation>2991	4	2033</citation>
	<citation>3053	4	2033</citation>
	<citation>1314	5	2033</citation>
	<citation>1785	5	2033</citation>
	<citation>1786	5	2033</citation>
	<citation>2033	5	2033</citation>
	<citation>2033	5	2033</citation>
	<citation>2033	5	2033</citation>
	<citation>3001	5	2033</citation>
	<citation>2033	6	2033</citation>
	<citation>2139	6	2033</citation>
	</citations>
	</document>
	<document id= '2032'>
	<title>File Structures Using Hashing Functions</title>
	<abstract>A general method of file structuring is proposed which uses a hashing function to define tree structure.  Two types of such trees are examined,  and their relation to trees studied in the past is explained.Results for the  probability distributions of path lengths are derived and illustrated.</abstract>
	<conference>CACM July, 1970</conference>
	<authors>
	<author>Eve, J.</author>
	</authors>
	<keywords>Data structures, tree structures, file structures, scatter tables, hashing functions, information retrieval</keywords>
	<version>3.70 3.74</version>
	<location>CA700705 JB February 13, 1978  8:49 AM</location>
	<citations>
	<citation>1050	4	2032</citation>
	<citation>1676	4	2032</citation>
	<citation>1682	4	2032</citation>
	<citation>1728	4	2032</citation>
	<citation>1860	4	2032</citation>
	<citation>1935	4	2032</citation>
	<citation>1936	4	2032</citation>
	<citation>1973	4	2032</citation>
	<citation>2017	4	2032</citation>
	<citation>2018	4	2032</citation>
	<citation>2032	4	2032</citation>
	<citation>2032	4	2032</citation>
	<citation>2033	4	2032</citation>
	<citation>2107	4	2032</citation>
	<citation>2109	4	2032</citation>
	<citation>2203	4	2032</citation>
	<citation>2251	4	2032</citation>
	<citation>2257	4	2032</citation>
	<citation>2360	4	2032</citation>
	<citation>2359	4	2032</citation>
	<citation>2451	4	2032</citation>
	<citation>2452	4	2032</citation>
	<citation>2524	4	2032</citation>
	<citation>2543	4	2032</citation>
	<citation>2552	4	2032</citation>
	<citation>2559	4	2032</citation>
	<citation>2991	4	2032</citation>
	<citation>3053	4	2032</citation>
	<citation>1785	5	2032</citation>
	<citation>2032	5	2032</citation>
	<citation>2032	5	2032</citation>
	<citation>2032	5	2032</citation>
	<citation>849	5	2032</citation>
	</citations>
	</document>
	<document id= '2031'>
	<title>Algorithm and Bound for the Greatest Common Divisor of n Integers</title>
	<abstract>A new version of the Euclidean algorithm for finding the greatest common divisor of n integers a(i) and multipliers x(i) such that gcd = x(1)a(1) + ... + x(n)a(n) is presented.  The number of arithmetic operations and the number of storage locations are linear in n.  A theorem of Lame that gives a bound  for the number of iterations of the Euclidean algorithm for two integers  is extended to the case of n integers.  An algorithm to construct a minimal  set of multipliers is presented.  A Fortran program for the algorithm appears  as Comm. ACM Algorithm 386.</abstract>
	<conference>CACM July, 1970</conference>
	<authors>
	<author>Bradley, G. H.</author>
	</authors>
	<keywords>greatest common divisor, Euclidean algorithm, number theory, diophantine equations</keywords>
	<version>3.15 5.10</version>
	<location>CA700706 JB February 13, 1978  8:45 AM</location>
	<citations>
	<citation>2031	4	2031</citation>
	<citation>2031	4	2031</citation>
	<citation>1022	5	2031</citation>
	<citation>2028	5	2031</citation>
	<citation>2031	5	2031</citation>
	<citation>2031	5	2031</citation>
	<citation>2031	5	2031</citation>
	<citation>2521	5	2031</citation>
	<citation>450	5	2031</citation>
	<citation>3099	5	2031</citation>
	<citation>1313	6	2031</citation>
	<citation>2028	6	2031</citation>
	<citation>2031	6	2031</citation>
	<citation>2031	6	2031</citation>
	<citation>2031	6	2031</citation>
	<citation>3135	6	2031</citation>
	</citations>
	</document>
	<document id= '2030'>
	<title>Context-Sensitive Parsing</title>
	<abstract>This paper presents a canonical form for context-sensitive derivations and a parsing algorithm which finds each context-sensitive analysis once and only once.  The amount of memory required by the algorithm is essentially no more than the required to  store a single complete derivation.  In addition, a modified version of the basic algorithm is presented which blocks infinite analyses  for grammars which contain loops.  The algorithm is also compared with several previous parsers for context-sensitive grammars and general rewriting systems, and the difference between the two types of analyses is discussed.  The algorithm appears to be complementary to an algorithm by S. Kuno in several respects, including  the space-time trade-off and the degree of context dependence involved.</abstract>
	<conference>CACM July, 1970</conference>
	<authors>
	<author>Woods, W. A.</author>
	</authors>
	<keywords>context-sensitive grammars, context-sensitive parsing, formal grammars, formal language theory, parsing, parsing algorithms, recognition algorithms</keywords>
	<version>3.42 5.22 5.23</version>
	<location>CA700707 JB February 10, 1978  4:43 PM</location>
	<citations>
	<citation>2030	5	2030</citation>
	<citation>2030	5	2030</citation>
	<citation>2030	5	2030</citation>
	</citations>
	</document>
	<document id= '2029'>
	<title>Exponential Integral $S13) (Algorithm 385)</title>
	<conference>CACM July, 1970</conference>
	<authors>
	<author>Paciorek, K. A.</author>
	</authors>
	<keywords>exponential integral, special functions, rational Chebyshev approximation</keywords>
	<version>5.12</version>
	<location>CA700708 JB February 10, 1978  4:34 PM</location>
	<citations>
	<citation>2029	5	2029</citation>
	<citation>2029	5	2029</citation>
	<citation>2029	5	2029</citation>
	</citations>
	</document>
	<document id= '2028'>
	<title>Greatest Common Divisor of n Integers and Multipliers $A1) (Algorithm 386)</title>
	<conference>CACM July, 1970</conference>
	<authors>
	<author>Bradley, G. H.</author>
	</authors>
	<keywords>greatest common divisor, Euclidean algorithm, number theory, diophantine equations</keywords>
	<version>3.15 5.10</version>
	<location>CA700709 JB February 10, 1978  4:31 PM</location>
	<citations>
	<citation>2028	4	2028</citation>
	<citation>2521	4	2028</citation>
	<citation>3099	4	2028</citation>
	<citation>2028	5	2028</citation>
	<citation>2028	5	2028</citation>
	<citation>2028	5	2028</citation>
	<citation>2031	5	2028</citation>
	<citation>2521	5	2028</citation>
	<citation>2028	6	2028</citation>
	<citation>2031	6	2028</citation>
	<citation>3135	6	2028</citation>
	</citations>
	</document>
	<document id= '2027'>
	<title>Ricatti-Bessel Functions of First and Second Kind (Algorithm 22 $S17))</title>
	<conference>CACM July, 1970</conference>
	<authors>
	<author>Bray, T.</author>
	</authors>
	<keywords>Ricatti-Bessel functions, Bessel functions of fractional order, spherical Bessel functions</keywords>
	<version>5.12</version>
	<location>CA700710 JB February 10, 1978  4:29 PM</location>
	<citations>
	<citation>2027	5	2027</citation>
	<citation>2027	5	2027</citation>
	<citation>2027	5	2027</citation>
	</citations>
	</document>
	<document id= '2026'>
	<citations>
	<citation>2026	5	2026</citation>
	<citation>2026	5	2026</citation>
	<citation>2026	5	2026</citation>
	</citations>
	<title>Exponential Integral (Algorithm 385 $S13))</title>
	<conference>CACM July, 1970</conference>
	<authors>
	<author>Ng, E. W.</author>
	</authors>
	<location>CA700711 JB February 10, 1978  4:27 PM</location>
	</document>
	<document id= '2025'>
	<title>Student's t-Distribution; Jacobi Polynomials; Modified Romberg Quadrature; Factorial Analysis of Variance; (Algorithms 332,344,351,359)</title>
	<conference>CACM July, 1970</conference>
	<authors>
	<author>Sale, A. H. J.</author>
	</authors>
	<keywords>Fortran standards</keywords>
	<version>4.0 4.22</version>
	<location>CA700712 JB February 10, 1978  4:26 PM</location>
	<citations>
	<citation>1613	4	2025</citation>
	<citation>1646	4	2025</citation>
	<citation>1900	4	2025</citation>
	<citation>1955	4	2025</citation>
	<citation>2025	4	2025</citation>
	<citation>2154	4	2025</citation>
	<citation>2365	4	2025</citation>
	<citation>2506	4	2025</citation>
	<citation>3060	4	2025</citation>
	<citation>987	5	2025</citation>
	<citation>2025	5	2025</citation>
	<citation>2025	5	2025</citation>
	<citation>2025	5	2025</citation>
	</citations>
	</document>
	<document id= '2024'>
	<title>Comments on a Paper by Lowe</title>
	<conference>CACM July, 1970</conference>
	<authors>
	<author>Sattley, K.</author>
	<author>Millstein, R.</author>
	</authors>
	<keywords>automatic segmentation, program connectivity</keywords>
	<version>5.24 5.32</version>
	<location>CA700713 JB February 10, 1978  4:20 PM</location>
	<citations>
	<citation>2024	5	2024</citation>
	<citation>2024	5	2024</citation>
	<citation>2024	5	2024</citation>
	</citations>
	</document>
	<document id= '2023'>
	<title>A Note on Data Base Deadlocks</title>
	<conference>CACM July, 1970</conference>
	<authors>
	<author>Baecker, H. D.</author>
	</authors>
	<keywords>data base, synchronization, locking, deadlock, reference count</keywords>
	<version>3.73</version>
	<location>CA700714 JB February 10, 1978  4:18 PM</location>
	<citations>
	<citation>1050	4	2023</citation>
	<citation>1393	4	2023</citation>
	<citation>1549	4	2023</citation>
	<citation>2023	4	2023</citation>
	<citation>2023	4	2023</citation>
	<citation>2168	4	2023</citation>
	<citation>3112	4	2023</citation>
	<citation>627	4	2023</citation>
	<citation>106	5	2023</citation>
	<citation>1878	5	2023</citation>
	<citation>2023	5	2023</citation>
	<citation>2023	5	2023</citation>
	<citation>2023	5	2023</citation>
	</citations>
	</document>
	<document id= '2022'>
	<title>Note on an Anomaly in Paging</title>
	<conference>CACM July, 1970</conference>
	<authors>
	</authors>
	<keywords>paging machines, demand paging, replacement algorithm</keywords>
	<version>4.30</version>
	<location>CA700715 JB February 10, 1978  4:17 PM</location>
	<citations>
	<citation>2022	4	2022</citation>
	<citation>2085	4	2022</citation>
	<citation>3006	4	2022</citation>
	<citation>1884	5	2022</citation>
	<citation>2022	5	2022</citation>
	<citation>2022	5	2022</citation>
	<citation>2022	5	2022</citation>
	</citations>
	</document>
	<document id= '2021'>
	<title>A Comment on Axiomatic Approaches to Programming</title>
	<conference>CACM July, 1970</conference>
	<authors>
	<author>Hunt, B.R.</author>
	</authors>
	<keywords>axiomatic method, proofs of programs, homomorphic structure in programming</keywords>
	<version>4.0 4.21 4.22 5.20 5.21 5.23 5.24</version>
	<location>CA700716 JB February 10, 1978  4:15 PM</location>
	<citations>
	<citation>2021	4	2021</citation>
	<citation>2222	4	2021</citation>
	<citation>2227	4	2021</citation>
	<citation>2315	4	2021</citation>
	<citation>2326	4	2021</citation>
	<citation>2470	4	2021</citation>
	<citation>2732	4	2021</citation>
	<citation>2865	4	2021</citation>
	<citation>2896	4	2021</citation>
	<citation>2943	4	2021</citation>
	<citation>3014	4	2021</citation>
	<citation>3068	4	2021</citation>
	<citation>3077	4	2021</citation>
	<citation>3143	4	2021</citation>
	<citation>1834	5	2021</citation>
	<citation>2021	5	2021</citation>
	<citation>2021	5	2021</citation>
	<citation>2021	5	2021</citation>
	</citations>
	</document>
	<document id= '2020'>
	<title>The Allocation of Computer Resources-Is Pricing the Answer?</title>
	<abstract>The widespread use of complex third generation computing systems has led to a  much broader concern about the means by which the resources of these systems are allocated among the user community.  One means that is suggested more and more frequently is a pricing procedure.  In this paper the manner in which one would like to allocate computing resources is considered, and then the extent to which a pricing mechanism fits this mold  is discussed.  Inasmuch as pricing must serve as a rationing mechanism at  times, consideration is given to the means by which prices can be adjusted  flexibly in order to make a dynamic allocation of resources.  Consideration is  also given to the means by which users can be insulated from the harmful  effects of frequent price fluctuations.  Although the subject of pricing has been given a lot of attention recently, a number of misconceptions persist about its purpose and its operation.  An attempt is made to clarify  some of these misunderstandings and to highlight the advantages and  disadvantages and to highlight the advantages and disadvantages of pricing. Two illustrative pricing systems are also discussed in order to demonstrate the  applicability of pricing in quite different environments.</abstract>
	<conference>CACM August, 1970</conference>
	<authors>
	<author>Nielsen, N. R.</author>
	</authors>
	<keywords>allocation mechanisms, charging, computer pricing, costing, flexible pricing, pricing, priority charges, resource allocation, user motivation</keywords>
	<version>1.3 2.4</version>
	<location>CA700801 JB February 10, 1978  4:13 PM</location>
	<citations>
	<citation>2020	4	2020</citation>
	<citation>1735	5	2020</citation>
	<citation>2020	5	2020</citation>
	<citation>2020	5	2020</citation>
	<citation>2020	5	2020</citation>
	<citation>2479	5	2020</citation>
	<citation>2020	6	2020</citation>
	</citations>
	</document>
	<document id= '2019'>
	<title>Normalization Techniques for Hand printed Numerals</title>
	<abstract>Family of pattern standardization techniques based on geometrical projection is applied to a file of digitized hand printed numerals obtained from sales clerks. The principle involves transforming a quadrilateral specified in terms of the convex hull of each pattern into a square. The amount of overlap within each class of characters versus the amount between classes is used to evaluate the degree of normalization achieved with respect to other  published methods including size and shear normalization through moments.</abstract>
	<conference>CACM August, 1970</conference>
	<authors>
	<author>Nagy, G.</author>
	<author>Tuong, N.</author>
	</authors>
	<keywords>pattern recognition, character recognition, normalization, projective transformation, central projection, hand printed characters, handwriting, linear transformation, size normalization, mapping, pattern preprocessor</keywords>
	<version>3.63 5.14</version>
	<location>CA700802 JB February 10, 1978  4:03 PM</location>
	<citations>
	<citation>2019	5	2019</citation>
	<citation>2019	5	2019</citation>
	<citation>2019	5	2019</citation>
	</citations>
	</document>
	<document id= '2018'>
	<title>Full Table Quadratic Searching for Scatter Storage</title>
	<abstract>The quadratic residue search method for hash tables avoids much of the clustering experienced with a linear search method.  The simple quadratic search only accesses half the table.  It has been shown that when the length of the table is a prime of the form 4n+3, where n  is an integer, the whole table may be accessed by two quadratic searches plus a separate access for the original entry point. A search  method is presented which is computationally simple, has all the advantages  of the quadratic search, and yet accesses all the table in one sweep.</abstract>
	<conference>CACM August, 1970</conference>
	<authors>
	<author>Day, A. C.</author>
	</authors>
	<keywords>quadratic residue, search method, hash tables, scatter storage, dictionary look-up, quadratic search, searching, hashing, hash code, clustering, collisions</keywords>
	<version>3.7 3.73 3.74</version>
	<location>CA700803 JB February 10, 1978  3:57 PM</location>
	<citations>
	<citation>1676	4	2018</citation>
	<citation>1682	4	2018</citation>
	<citation>1728	4	2018</citation>
	<citation>1860	4	2018</citation>
	<citation>1860	4	2018</citation>
	<citation>1973	4	2018</citation>
	<citation>1973	4	2018</citation>
	<citation>1973	4	2018</citation>
	<citation>1992	4	2018</citation>
	<citation>2018	4	2018</citation>
	<citation>2018	4	2018</citation>
	<citation>2018	4	2018</citation>
	<citation>2032	4	2018</citation>
	<citation>2033	4	2018</citation>
	<citation>2033	4	2018</citation>
	<citation>2107	4	2018</citation>
	<citation>2107	4	2018</citation>
	<citation>2109	4	2018</citation>
	<citation>2109	4	2018</citation>
	<citation>2203	4	2018</citation>
	<citation>2203	4	2018</citation>
	<citation>2203	4	2018</citation>
	<citation>2251	4	2018</citation>
	<citation>2251	4	2018</citation>
	<citation>2251	4	2018</citation>
	<citation>2359	4	2018</citation>
	<citation>2524	4	2018</citation>
	<citation>2543	4	2018</citation>
	<citation>2543	4	2018</citation>
	<citation>2543	4	2018</citation>
	<citation>2552	4	2018</citation>
	<citation>2559	4	2018</citation>
	<citation>2573	4	2018</citation>
	<citation>2770	4	2018</citation>
	<citation>2770	4	2018</citation>
	<citation>2974	4	2018</citation>
	<citation>2991	4	2018</citation>
	<citation>3053	4	2018</citation>
	<citation>3053	4	2018</citation>
	<citation>1785	5	2018</citation>
	<citation>1786	5	2018</citation>
	<citation>2018	5	2018</citation>
	<citation>2018	5	2018</citation>
	<citation>2018	5	2018</citation>
	<citation>2109	5	2018</citation>
	<citation>2251	5	2018</citation>
	<citation>2573	5	2018</citation>
	<citation>2770	5	2018</citation>
	<citation>1785	6	2018</citation>
	<citation>1786	6	2018</citation>
	<citation>1786	6	2018</citation>
	<citation>1786	6	2018</citation>
	<citation>1869	6	2018</citation>
	<citation>1973	6	2018</citation>
	<citation>1973	6	2018</citation>
	<citation>1992	6	2018</citation>
	<citation>2018	6	2018</citation>
	<citation>2018	6	2018</citation>
	<citation>2018	6	2018</citation>
	<citation>2107	6	2018</citation>
	<citation>2107	6	2018</citation>
	<citation>2109	6	2018</citation>
	<citation>2109	6	2018</citation>
	<citation>2673	6	2018</citation>
	</citations>
	</document>
	<document id= '2017'>
	<title>Sorting in a Paging Environment</title>
	<abstract>This sorting study was part of an extensive measurement project undertaken on the M44/44X, an experimental paging system which was conceived and implemented at IBM Research in order to explore the virtual machine concept.  The study was concerned with the implementation  of sorting procedures in the context of the dynamic paging environment characteristic of virtual memory machines.  Descriptions of  the experimental sort programs and analysis of the performance measurement results obtained for them are presented. The insight gained  from the experimental effort is used to arrive at a set of broad guidelines for writing sort programs for a paging environment.</abstract>
	<conference>CACM August, 1970</conference>
	<authors>
	<author>Brawn, B. S.</author>
	<author>Gustavson, G.</author>
	<author>Mankin, E. S.</author>
	</authors>
	<keywords>sorting, merging, virtual machines, paging systems, dynamic storage allocation, measurement of systems program behavior, performance evaluation, memory management</keywords>
	<version>4.32 4.49 4.9 5.31</version>
	<location>CA700804 JB February 10, 1978  3:51 PM</location>
	<citations>
	<citation>1050	4	2017</citation>
	<citation>1117	4	2017</citation>
	<citation>1117	4	2017</citation>
	<citation>1175	4	2017</citation>
	<citation>1919	4	2017</citation>
	<citation>1935	4	2017</citation>
	<citation>1936	4	2017</citation>
	<citation>1956	4	2017</citation>
	<citation>2017	4	2017</citation>
	<citation>2017	4	2017</citation>
	<citation>2017	4	2017</citation>
	<citation>2017	4	2017</citation>
	<citation>2017	4	2017</citation>
	<citation>2017	4	2017</citation>
	<citation>2017	4	2017</citation>
	<citation>2017	4	2017</citation>
	<citation>2017	4	2017</citation>
	<citation>2017	4	2017</citation>
	<citation>2017	4	2017</citation>
	<citation>2017	4	2017</citation>
	<citation>2017	4	2017</citation>
	<citation>2017	4	2017</citation>
	<citation>2017	4	2017</citation>
	<citation>2017	4	2017</citation>
	<citation>2017	4	2017</citation>
	<citation>2017	4	2017</citation>
	<citation>2032	4	2017</citation>
	<citation>2041	4	2017</citation>
	<citation>2146	4	2017</citation>
	<citation>2146	4	2017</citation>
	<citation>2146	4	2017</citation>
	<citation>2216	4	2017</citation>
	<citation>2257	4	2017</citation>
	<citation>2360	4	2017</citation>
	<citation>2451	4	2017</citation>
	<citation>2452	4	2017</citation>
	<citation>677	4	2017</citation>
	<citation>851	4	2017</citation>
	<citation>851	4	2017</citation>
	<citation>860	4	2017</citation>
	<citation>861	4	2017</citation>
	<citation>2017	5	2017</citation>
	<citation>2017	5	2017</citation>
	<citation>2017	5	2017</citation>
	<citation>2319	5	2017</citation>
	<citation>2582	5	2017</citation>
	<citation>2669	5	2017</citation>
	<citation>3054	5	2017</citation>
	<citation>849	5	2017</citation>
	<citation>850	5	2017</citation>
	<citation>851	5	2017</citation>
	<citation>852	5	2017</citation>
	<citation>853	5	2017</citation>
	<citation>854	5	2017</citation>
	<citation>855	5	2017</citation>
	<citation>856	5	2017</citation>
	<citation>858	5	2017</citation>
	<citation>857	5	2017</citation>
	<citation>859	5	2017</citation>
	<citation>860	5	2017</citation>
	<citation>862	5	2017</citation>
	<citation>863	5	2017</citation>
	<citation>864	5	2017</citation>
	<citation>865	5	2017</citation>
	<citation>861	5	2017</citation>
	<citation>866	5	2017</citation>
	<citation>1175	6	2017</citation>
	<citation>1408	6	2017</citation>
	<citation>1719	6	2017</citation>
	<citation>1749	6	2017</citation>
	<citation>1751	6	2017</citation>
	<citation>1751	6	2017</citation>
	<citation>1751	6	2017</citation>
	<citation>1880	6	2017</citation>
	<citation>1901	6	2017</citation>
	<citation>1919	6	2017</citation>
	<citation>1924	6	2017</citation>
	<citation>1969	6	2017</citation>
	<citation>1980	6	2017</citation>
	<citation>1997	6	2017</citation>
	<citation>307	6	2017</citation>
	<citation>308	6	2017</citation>
	<citation>309	6	2017</citation>
	<citation>2016	6	2017</citation>
	<citation>2017	6	2017</citation>
	<citation>2017	6	2017</citation>
	<citation>2017	6	2017</citation>
	<citation>2017	6	2017</citation>
	<citation>2080	6	2017</citation>
	<citation>2130	6	2017</citation>
	<citation>2188	6	2017</citation>
	<citation>2203	6	2017</citation>
	<citation>2204	6	2017</citation>
	<citation>2358	6	2017</citation>
	<citation>2679	6	2017</citation>
	<citation>776	6	2017</citation>
	</citations>
	</document>
	<document id= '2016'>
	<title>The Instrumentation of Multics</title>
	<abstract>An array of measuring tools devised to aid in the implementation of a prototype computer utility is discussed.  These tools include special hardware clocks and data channels, general purpose programmed probing and recording tools, and specialized measurement facilities.  Some particular measurements of interest in a system which combines demand  paging with multiprogramming are described in detail.  Where appropriate,  insight into effectiveness (or lack there of) of individual tools is provided.</abstract>
	<conference>CACM August, 1970</conference>
	<authors>
	<author>Gintell, J. W.</author>
	<author>Saltzer, J. H.</author>
	</authors>
	<keywords>instrumentation, performance measurement, multiprogramming systems, measuring tools, system analysis, Multics, metering, event tracing, demand paging, script driven measurement</keywords>
	<version>2.44 4.32 4.39 4.42</version>
	<location>CA700805 JB February 10, 1978  3:43 PM</location>
	<citations>
	<citation>2016	5	2016</citation>
	<citation>2016	5	2016</citation>
	<citation>2016	5	2016</citation>
	<citation>2193	5	2016</citation>
	<citation>2319	5	2016</citation>
	<citation>2894	5	2016</citation>
	<citation>1408	6	2016</citation>
	<citation>1719	6	2016</citation>
	<citation>1749	6	2016</citation>
	<citation>1751	6	2016</citation>
	<citation>1951	6	2016</citation>
	<citation>2016	6	2016</citation>
	<citation>2016	6	2016</citation>
	<citation>2016	6	2016</citation>
	<citation>2017	6	2016</citation>
	<citation>2080	6	2016</citation>
	<citation>2188	6	2016</citation>
	<citation>2203	6	2016</citation>
	<citation>2204	6	2016</citation>
	<citation>3186	6	2016</citation>
	</citations>
	</document>
	<document id= '2015'>
	<title>A Technique for Generating Almost Optimal Floyd-Evans Productions for Precedence Grammars</title>
	<abstract>A technique is developed for generating almost optimal Floyd-Evans productions  given a precedence grammar. A graph formulation is used for the problem of  merging productions.  The productions generated correspond to the minimum cost  inverse-arborescence of that graph.  The validity of the technique is demonstrated for weak precedence grammars defined here, but the productions mechanically generated for any precedence grammar can often be modified in  such a way that correct, almost optimal parsers are obtained.</abstract>
	<conference>CACM August, 1970</conference>
	<authors>
	<author>Ichbiah, J. D.</author>
	<author>Morse, S. P.</author>
	</authors>
	<keywords>translator writing systems, syntactic analysis, Floyd-Evans productions, precedence grammars, translator optimization, merger algorithm, minimum cost inverse-arborescence, graph theory</keywords>
	<version>4.12 5.23 5.32</version>
	<location>CA700806 JB February 10, 19783:38 PM</location>
	<citations>
	<citation>1379	4	2015</citation>
	<citation>1665	4	2015</citation>
	<citation>1693	4	2015</citation>
	<citation>1768	4	2015</citation>
	<citation>1781	4	2015</citation>
	<citation>1787	4	2015</citation>
	<citation>1824	4	2015</citation>
	<citation>1825	4	2015</citation>
	<citation>1836	4	2015</citation>
	<citation>1836	4	2015</citation>
	<citation>1861	4	2015</citation>
	<citation>1945	4	2015</citation>
	<citation>2015	4	2015</citation>
	<citation>2015	4	2015</citation>
	<citation>2060	4	2015</citation>
	<citation>2061	4	2015</citation>
	<citation>2091	4	2015</citation>
	<citation>2110	4	2015</citation>
	<citation>2127	4	2015</citation>
	<citation>2179	4	2015</citation>
	<citation>2187	4	2015</citation>
	<citation>2317	4	2015</citation>
	<citation>2545	4	2015</citation>
	<citation>2546	4	2015</citation>
	<citation>2698	4	2015</citation>
	<citation>2698	4	2015</citation>
	<citation>2708	4	2015</citation>
	<citation>2733	4	2015</citation>
	<citation>3045	4	2015</citation>
	<citation>1477	5	2015</citation>
	<citation>1781	5	2015</citation>
	<citation>2015	5	2015</citation>
	<citation>2015	5	2015</citation>
	<citation>2015	5	2015</citation>
	<citation>2179	5	2015</citation>
	<citation>2423	5	2015</citation>
	<citation>1337	6	2015</citation>
	<citation>1477	6	2015</citation>
	<citation>1491	6	2015</citation>
	<citation>1825	6	2015</citation>
	<citation>2015	6	2015</citation>
	<citation>2015	6	2015</citation>
	<citation>2110	6	2015</citation>
	<citation>3184	6	2015</citation>
	</citations>
	</document>
	<document id= '2014'>
	<title>Function Minimization and Linear Search $E4) (Algorithm 387)</title>
	<conference>CACM August, 1970</conference>
	<authors>
	<author>Fielding, K.</author>
	</authors>
	<keywords>function minimization, relative minimum, quasi-Newton method</keywords>
	<version>5.15</version>
	<location>CA700807 JB February 10, 1978  3:30 PM</location>
	<citations>
	<citation>2014	5	2014</citation>
	<citation>2014	5	2014</citation>
	<citation>2014	5	2014</citation>
	</citations>
	</document>
	<document id= '2013'>
	<title>Rademacher Function $S22) (Algorithm 388)</title>
	<conference>CACM August, 1970</conference>
	<authors>
	<author>Hubner, H.</author>
	</authors>
	<keywords>Rademacher function</keywords>
	<version>5.12 5.13</version>
	<location>CA700808 JB February 10, 1978  3:23 PM</location>
	<citations>
	<citation>2012	5	2013</citation>
	<citation>2013	5	2013</citation>
	<citation>2013	5	2013</citation>
	<citation>2013	5	2013</citation>
	<citation>2013	6	2013</citation>
	</citations>
	</document>
	<document id= '2012'>
	<title>Binary Ordered Walsh Functions $S22) (Algorithm 389)</title>
	<conference>CACM August, 1970</conference>
	<authors>
	<author>Hubner, H.</author>
	</authors>
	<keywords>Walsh functions, binary ordered Walsh functions</keywords>
	<version>5.12 5.13</version>
	<location>CA700809 JB February 10, 1978  3:22 PM</location>
	<citations>
	<citation>2012	4	2012</citation>
	<citation>2011	5	2012</citation>
	<citation>2012	5	2012</citation>
	<citation>2012	5	2012</citation>
	<citation>2012	5	2012</citation>
	<citation>2013	5	2012</citation>
	<citation>2012	6	2012</citation>
	</citations>
	</document>
	<document id= '2011'>
	<title>Sequency Ordered Walsh Functions $S22) (Algorithm 390)</title>
	<conference>CACM August, 1970</conference>
	<authors>
	<author>Hubner, H.</author>
	</authors>
	<keywords>Walsh functions, sequency ordered Walsh functions</keywords>
	<version>5.12 5.13</version>
	<location>CA700810 JB February 10, 1978  3:20 PM</location>
	<citations>
	<citation>2011	4	2011</citation>
	<citation>2011	5	2011</citation>
	<citation>2011	5	2011</citation>
	<citation>2011	5	2011</citation>
	<citation>2012	5	2011</citation>
	</citations>
	</document>
	<document id= '2010'>
	<title>Unitary Symmetric Polynomials $Z) (Algorithm 391)</title>
	<conference>CACM August, 1970</conference>
	<authors>
	<author>McKay, J.</author>
	</authors>
	<keywords>symmetric polynomials, unitary symmetric polynomials</keywords>
	<version>5.11 5.30 5.5</version>
	<location>CA700811 JB February 10, 1978  3:19 PM</location>
	<citations>
	<citation>2010	5	2010</citation>
	<citation>2010	5	2010</citation>
	<citation>2010	5	2010</citation>
	</citations>
	</document>
	<document id= '2009'>
	<title>Simpson's Rule for Multiple Integration (Algorithm 233 $D1))</title>
	<conference>CACM August, 1970</conference>
	<authors>
	<author>Proll, L. G.</author>
	</authors>
	<keywords>numerical integration, multiple integration, Simpson's rule</keywords>
	<version>5.16</version>
	<location>CA700812 JB February 10, 1978  3:17 PM</location>
	<citations>
	<citation>2009	5	2009</citation>
	<citation>2009	5	2009</citation>
	<citation>2009	5	2009</citation>
	</citations>
	</document>
	<document id= '2008'>
	<title>Gaussian Quadrature Formulas (Algorithm 331 $D1))</title>
	<conference>CACM August, 1970</conference>
	<authors>
	</authors>
	<keywords>quadrature, Gaussian quadrature, numerical integration, weight function, orthogonal polynomials, Newton's method, successive deflation</keywords>
	<version>5.16</version>
	<location>CA700813 JB February 10, 1978  3:15 PM</location>
	<citations>
	<citation>2008	5	2008</citation>
	<citation>2008	5	2008</citation>
	<citation>2008	5	2008</citation>
	</citations>
	</document>
	<document id= '2007'>
	<citations>
	<citation>2007	5	2007</citation>
	<citation>2007	5	2007</citation>
	<citation>2007	5	2007</citation>
	</citations>
	<title>Algorithms Policy/Revised August 1970</title>
	<conference>CACM August, 1970</conference>
	<location>CA700814 JB February 10, 1978  3:12 PM</location>
	</document>
	<document id= '2006'>
	<title>Proposed American National Standard</title>
	<conference>CACM August, 1970</conference>
	<authors>
	<author>Kerpelman, C.</author>
	</authors>
	<keywords>State identifiers, State abbreviation, States of the United States, data  elements, data codes, numeric codes, geopolitical subdivisions, geographic codes</keywords>
	<version>3.35 3.57</version>
	<location>CA700815 JB February 10, 1978  3:10 PM</location>
	<citations>
	<citation>2006	5	2006</citation>
	<citation>2006	5	2006</citation>
	<citation>2006	5	2006</citation>
	</citations>
	</document>
	<document id= '2005'>
	<title>Proposed Revision of American National Standard X3.21-1967, "Rectangular Holes in Twelve-Row Punched Cards"*</title>
	<conference>CACM August, 1970</conference>
	<keywords>tabulating-card, Hollerith card, keypunch, information processing</keywords>
	<version>6.35</version>
	<location>CA700816 JB February 10, 1978  2:48 PM</location>
	<citations>
	<citation>2005	5	2005</citation>
	<citation>2005	5	2005</citation>
	<citation>2005	5	2005</citation>
	</citations>
	</document>
	<document id= '2004'>
	<title>A Procedure for Generation of Three-dimensional Half-toned Computer Graphics Presentations</title>
	<abstract>A description is given of an algorithm for producing computer generated  half-tone presentations of three-dimensional polygonal surface structures.   This algorithm achieves a significant increase in speed of computation over  the Warnock algorithm developed at the University of Utah and implemented also on the Coordinated Science Laboratory CDC 1604 computer system at the University of Illinois.  The history leading to the algorithm development and then the algorithm itself are described. Results are presented and are compared with computer runs achieved by the Warnock approach.  An extension of the procedure to variable position illumination sources is also given.</abstract>
	<conference>CACM September, 1970</conference>
	<authors>
	<author>Bouknight, W. J.</author>
	</authors>
	<keywords>half-tone computer graphics, line-scan image processing, hidden surface, polygonal surface structure presentations</keywords>
	<version>4.9</version>
	<location>CA700901 JB February 10, 1978  2:27 PM</location>
	<citations>
	<citation>2004	4	2004</citation>
	<citation>2004	4	2004</citation>
	<citation>2687	4	2004</citation>
	<citation>2692	4	2004</citation>
	<citation>1686	5	2004</citation>
	<citation>1915	5	2004</citation>
	<citation>2004	5	2004</citation>
	<citation>2004	5	2004</citation>
	<citation>2004	5	2004</citation>
	<citation>2674	5	2004</citation>
	<citation>2687	5	2004</citation>
	<citation>2828	5	2004</citation>
	<citation>1741	6	2004</citation>
	<citation>1741	6	2004</citation>
	<citation>1751	6	2004</citation>
	<citation>1915	6	2004</citation>
	<citation>2004	6	2004</citation>
	<citation>2004	6	2004</citation>
	<citation>2004	6	2004</citation>
	<citation>2421	6	2004</citation>
	<citation>2687	6	2004</citation>
	<citation>2751	6	2004</citation>
	<citation>2841	6	2004</citation>
	</citations>
	</document>
	<document id= '2003'>
	<title>An Interactive Software System for Computers-Aided Design:  An Application to Circuit Project</title>
	<abstract>The characteristics of an interactive software system, intended to constitute  an interface between designer and computer during various steps of the design process, are presented.  The main emphasis is given to the description of the features of the two high level user oriented languages, operating at different levels, on which the interaction is based.  The first one is IMOL, an interactive monitor language, which is designed to perform the overall and control functions of the software system; its design criteria provide the user with commands which are both simple and efficient in order to perform all the functions needed in computer-aided circuit design.  The second one is  COIF, a circuit oriented graphic language, which is designed to describe, generate, and manipulate graphic problem specifications;  it is an  extension of Fortran with graphic-type variables, so that the designer who is familiar with Fortran need not learn a new  language.  The application to computer-aided circuit design is in particular examined; on the other hand, the adopted design criteria provide sufficient generality to extend the use of the two languages  to different computer-assisted applications.</abstract>
	<conference>CACM September, 1970</conference>
	<authors>
	<author>Bracchi, G.</author>
	<author>Somalvico, M.</author>
	</authors>
	<keywords>interaction, graphics, computer graphics, computer-aided design, circuit design, software system, software organization, language, monitor language, graphic language, extended Fortran</keywords>
	<version>3.24 3.25 4.13 4.22 4.3</version>
	<location>CA700902 JB February 10, 1978  2:20 PM</location>
	<citations>
	<citation>1853	4	2003</citation>
	<citation>2003	4	2003</citation>
	<citation>2003	4	2003</citation>
	<citation>2003	4	2003</citation>
	<citation>2002	4	2003</citation>
	<citation>2152	4	2003</citation>
	<citation>1710	5	2003</citation>
	<citation>1767	5	2003</citation>
	<citation>2003	5	2003</citation>
	<citation>2003	5	2003</citation>
	<citation>2003	5	2003</citation>
	<citation>2105	5	2003</citation>
	<citation>2230	5	2003</citation>
	<citation>2003	6	2003</citation>
	</citations>
	</document>
	<document id= '2002'>
	<title>AMESPLOT-A Higher Level Data Plotting Software System</title>
	<abstract>AMESPLOT is an extensible software system designed to make the display of  data as simple, painless, and neat as possible.  The system described is  hardware-independent and has been implemented on a variety of installations, of different manufacturers, having diverse configurations.  The elements  common to all types of data plots are outlined and the way in which these  elements may be combined into a system based on simple modules is demonstrated. These modules are specified independently and are independent of the axis systems or other attributes of the plot.  This enables plots of any complexity to be constructed by adding or replacing modules.  The basic syntax of AMESPLOT is outlined, and a brief description is given of its current utility software, consisting of "macros" to produce self-scaled plots, formal tablets of text-interspersed with subplots, map coastlines, and 3-D plots.  The system was formulate d in a way such that the user could supply the minimum of information, and it should be fully integrable with user's program written in most conventional higher languages.  The functions of positioning, locating, and scaling (in the layout of multiple subplots) of axes, labels, and all other elements of the plot are handled automatically by the software system unless the user specifies otherwise.  The structuring  of plots from multiple, independent, self-contained subplots is described. Transformation, projection, scaling, rotation, or shifting of entire plots or  subplots by the action of one or more simple modules is possible.  The user  may interact freely with AMESPLOT at three levels, enabling him to construct  his own data markers, alphabetic characters, and transformations, and to produce a variety of artistic and other effects.</abstract>
	<conference>CACM September, 1970</conference>
	<authors>
	<author>Hirschsoln, I.</author>
	</authors>
	<keywords>computer graphics, data potting, data display syntax, hardware independent software, display device independent software, plot elements, self-scaled plots, user interaction, tablet organization, map display, projection</keywords>
	<version>4.13 4.29 4.49 4.9</version>
	<location>CA700903 JB February 10, 1978 2:08 PM</location>
	<citations>
	<citation>2003	4	2002</citation>
	<citation>2002	4	2002</citation>
	<citation>2002	4	2002</citation>
	<citation>2152	4	2002</citation>
	<citation>1767	5	2002</citation>
	<citation>1937	5	2002</citation>
	<citation>2002	5	2002</citation>
	<citation>2002	5	2002</citation>
	<citation>2002	5	2002</citation>
	</citations>
	</document>
	<document id= '2001'>
	<title>Integrating Square Roots</title>
	<abstract>Differential equation of the (y')^2 = f(y) are difficult to integrate  numerically because of the singularity at points where f(y) vanishes.  A  simple trick removes the singularity.</abstract>
	<conference>CACM September, 1970</conference>
	<authors>
	<author>Moler, C. B.</author>
	<author>Solomon, L. P.</author>
	</authors>
	<keywords>quadrature, differential equations</keywords>
	<version>5.16 5.17</version>
	<location>CA700904 JB February 10, 1978  1:42 PM</location>
	<citations>
	<citation>2001	5	2001</citation>
	<citation>2001	5	2001</citation>
	<citation>2001	5	2001</citation>
	</citations>
	</document>
	<document id= '2000'>
	<title>A Variation of the Goodman-Lance Method for the Solution of Two-Point Boundary Value Problems</title>
	<abstract>A recently published method for the interpolative solution of nonlinear equations is improved, and applied to give a significant variation of the Goodman-Lance method for the solution of two-point boundary value problems.  The resulting method applies in particular to the numerical solution of optimal control problems in the Euler-Lagrange formulation. Quantitative estimates are presented which indicate that the variation is nearly twice as fast on some problems in the latter context.</abstract>
	<conference>CACM September, 1970</conference>
	<authors>
	<author>Kimble, G. W.</author>
	</authors>
	<keywords>Goodman-Lance, boundary-value problems, Newton's method, nonlinear equations, optimal control, optimization, ordinary differential equations, secant method, interpolative solution, orthogonal matrices</keywords>
	<version>3.21 5.15 5.17</version>
	<location>CA700905 JB February 10, 1978  1:39 PM</location>
	<citations>
	<citation>2000	5	2000</citation>
	<citation>2000	5	2000</citation>
	<citation>2000	5	2000</citation>
	</citations>
	</document>
	<document id= '1999'>
	<title>Optimal Starting Approximations for Generating Square Root for Slow or No Divide</title>
	<abstract>On machine with slow or no division, it is preferable to use an iterative scheme for the square root different from the classical Heron scheme.  The problem of optimal initial  approximants is considered, and some optimal polynomial initial  approximations are tabulated.</abstract>
	<conference>CACM September, 1970</conference>
	<authors>
	<author>Wilson, M. W.</author>
	</authors>
	<keywords>square root, Newton-Raphson iteration, optimal approximants</keywords>
	<version>5.13</version>
	<location>CA700906 JB February 10, 1978  1:33 PM</location>
	<citations>
	<citation>1832	4	1999</citation>
	<citation>1999	4	1999</citation>
	<citation>2159	4	1999</citation>
	<citation>1932	5	1999</citation>
	<citation>1999	5	1999</citation>
	<citation>1999	5	1999</citation>
	<citation>1999	5	1999</citation>
	</citations>
	</document>
	<document id= '1998'>
	<title>Complex Matrix Inversion Versus Real</title>
	<abstract>A comparison of complex matrix with real matrix inversion is made.  It is shown that the complex inversion can be up to  twice as fast as the real inversion.  Further, the rounding error bound for complex inversion is about one-eighth that of real, for Gaussian elimination.  Using extended inner product accumulation the bound is half of the real system.</abstract>
	<conference>CACM September, 1970</conference>
	<authors>
	<author>Ehrlich, L. W.</author>
	</authors>
	<keywords>complex matrix inversion, matrix inversion, inversion, rounding errors, rounding error bound, error bounds, complex rounding error bounds</keywords>
	<version>5.14 5.11 5.10</version>
	<location>CA700907 JB February 10, 1978  10:19 AM</location>
	<citations>
	<citation>1998	5	1998</citation>
	<citation>1998	5	1998</citation>
	<citation>1998	5	1998</citation>
	</citations>
	</document>
	<document id= '1997'>
	<title>Increasing the Efficiency of Quicksort</title>
	<abstract>A method is presented for the analysis of various generalizations of quicksort.  The average asymptotic number of comparisons needed is shown  to be an log^2(n).  A formula is derived expressing a in terms of the probability distribution of the "bound" of a partition.  This  formula assumes a particularly simple form for a generalization already considered by Hoare, namely, choice of the bound as median of a random sample. The main contribution of this paper is another generalization of quicksort, which uses a bounding interval instead of a single element as bound.  This generalization turns out to be easy to implement in a computer program.  A numerical approximation shows that a = 1.140 for this version of quicksort compared with 1.386 for the original.  This implies a decrease in number of comparisons of  18 percent; actual tests showed about 15 percent saving in computing time.</abstract>
	<conference>CACM September, 1970</conference>
	<authors>
	<author>Emden, M. H.</author>
	</authors>
	<keywords>sorting, quicksort, information content, entropy, distribution of median</keywords>
	<version>3.73 4.49 5.31 5.6</version>
	<location>CA700908 JB February 10, 1978  10:15 AM</location>
	<citations>
	<citation>1175	4	1997</citation>
	<citation>1919	4	1997</citation>
	<citation>1969	4	1997</citation>
	<citation>1997	4	1997</citation>
	<citation>1997	4	1997</citation>
	<citation>2191	4	1997</citation>
	<citation>2216	4	1997</citation>
	<citation>2388	4	1997</citation>
	<citation>2679	4	1997</citation>
	<citation>2679	4	1997</citation>
	<citation>3054	4	1997</citation>
	<citation>3054	4	1997</citation>
	<citation>3121	4	1997</citation>
	<citation>1969	5	1997</citation>
	<citation>1997	5	1997</citation>
	<citation>1997	5	1997</citation>
	<citation>1997	5	1997</citation>
	<citation>308	5	1997</citation>
	<citation>2216	5	1997</citation>
	<citation>2679	5	1997</citation>
	<citation>3054	5	1997</citation>
	<citation>864	6	1997</citation>
	<citation>970	6	1997</citation>
	<citation>1175	6	1997</citation>
	<citation>1175	6	1997</citation>
	<citation>1190	6	1997</citation>
	<citation>1228	6	1997</citation>
	<citation>1880	6	1997</citation>
	<citation>1919	6	1997</citation>
	<citation>1919	6	1997</citation>
	<citation>1969	6	1997</citation>
	<citation>1969	6	1997</citation>
	<citation>1969	6	1997</citation>
	<citation>1980	6	1997</citation>
	<citation>1997	6	1997</citation>
	<citation>1997	6	1997</citation>
	<citation>1997	6	1997</citation>
	<citation>307	6	1997</citation>
	<citation>308	6	1997</citation>
	<citation>308	6	1997</citation>
	<citation>309	6	1997</citation>
	<citation>2017	6	1997</citation>
	<citation>2042	6	1997</citation>
	<citation>2679	6	1997</citation>
	<citation>3187	6	1997</citation>
	<citation>507	6	1997</citation>
	<citation>716	6	1997</citation>
	<citation>776	6	1997</citation>
	<citation>783	6	1997</citation>
	</citations>
	</document>
	<document id= '1996'>
	<title>Systems of Hyperbolic PDE $D3) (Algorithm 392)</title>
	<conference>CACM September, 1970</conference>
	<authors>
	<author>Smith, R. R.</author>
	<author>McCall, D.</author>
	</authors>
	<keywords>hyperbolic p.d.e., characteristic, extrapolation, second order p.d.e., quasilinear p. d. e.</keywords>
	<version>5.17</version>
	<location>CA700909 JB February 10, 1978  10:08 AM</location>
	<citations>
	<citation>1996	5	1996</citation>
	<citation>1996	5	1996</citation>
	<citation>1996	5	1996</citation>
	</citations>
	</document>
	<document id= '1995'>
	<title>Special Series Summation with Arbitrary Precision $C6) (Algorithm 393)</title>
	<conference>CACM September, 1970</conference>
	<authors>
	<author>Abdali, S. K.</author>
	</authors>
	<keywords>function evaluation, series summation, approximation</keywords>
	<version>5.12 5.13</version>
	<location>CA700910 JB February 10, 1978  10:06 AM</location>
	<citations>
	<citation>1995	5	1995</citation>
	<citation>1995	5	1995</citation>
	<citation>1995	5	1995</citation>
	</citations>
	</document>
	<document id= '1994'>
	<title>Decision Table Translation $H) (Algorithm 394)</title>
	<conference>CACM September, 1970</conference>
	<authors>
	<author>Dial, R. B.</author>
	</authors>
	<keywords>Decision table, decision table translation</keywords>
	<version>4.19</version>
	<location>CA700911 JB February 10, 1978  10:05 AM</location>
	<citations>
	<citation>1354	4	1994</citation>
	<citation>1488	4	1994</citation>
	<citation>1994	4	1994</citation>
	<citation>2053	4	1994</citation>
	<citation>2220	4	1994</citation>
	<citation>2273	4	1994</citation>
	<citation>1237	5	1994</citation>
	<citation>1994	5	1994</citation>
	<citation>1994	5	1994</citation>
	<citation>1994	5	1994</citation>
	</citations>
	</document>
	<document id= '1993'>
	<title>Regular Coulomb Wave Functions (Algorithm 292 $S22))</title>
	<conference>CACM September, 1970</conference>
	<authors>
	<author>Cody, W. J.</author>
	<author>Paciorek, K. A.</author>
	</authors>
	<keywords>Coulomb wave functions, wave functions, regular Coulomb wave functions</keywords>
	<version>5.12</version>
	<location>CA700912 JB February 10, 1978  10:03 AM</location>
	<citations>
	<citation>1993	5	1993</citation>
	<citation>1993	5	1993</citation>
	<citation>1993	5	1993</citation>
	</citations>
	</document>
	<document id= '1992'>
	<title>Comment on Bell's Quadratic Quotient Method for Hash Code Searching</title>
	<conference>CACM September, 1970</conference>
	<authors>
	<author>Lamport, L.</author>
	</authors>
	<keywords>hashing, hash code, scatter storage, calculated address, clustering, search, symbol table, keys, table look-up</keywords>
	<version>3.74 4.9</version>
	<location>CA700913 JB February 10, 1978  9:56 AM</location>
	<citations>
	<citation>1860	4	1992</citation>
	<citation>1973	4	1992</citation>
	<citation>1973	4	1992</citation>
	<citation>1992	4	1992</citation>
	<citation>1992	4	1992</citation>
	<citation>2018	4	1992</citation>
	<citation>2033	4	1992</citation>
	<citation>2107	4	1992</citation>
	<citation>2109	4	1992</citation>
	<citation>2138	4	1992</citation>
	<citation>2203	4	1992</citation>
	<citation>2203	4	1992</citation>
	<citation>2251	4	1992</citation>
	<citation>2251	4	1992</citation>
	<citation>2530	4	1992</citation>
	<citation>2537	4	1992</citation>
	<citation>2543	4	1992</citation>
	<citation>2543	4	1992</citation>
	<citation>2559	4	1992</citation>
	<citation>2573	4	1992</citation>
	<citation>2573	4	1992</citation>
	<citation>2770	4	1992</citation>
	<citation>2991	4	1992</citation>
	<citation>3053	4	1992</citation>
	<citation>3083	4	1992</citation>
	<citation>1786	5	1992</citation>
	<citation>1992	5	1992</citation>
	<citation>1992	5	1992</citation>
	<citation>1992	5	1992</citation>
	<citation>2107	5	1992</citation>
	<citation>2770	5	1992</citation>
	<citation>3053	5	1992</citation>
	<citation>1329	6	1992</citation>
	<citation>1785	6	1992</citation>
	<citation>1786	6	1992</citation>
	<citation>1869	6	1992</citation>
	<citation>1973	6	1992</citation>
	<citation>1973	6	1992</citation>
	<citation>1992	6	1992</citation>
	<citation>1992	6	1992</citation>
	<citation>2018	6	1992</citation>
	<citation>2107	6	1992</citation>
	<citation>2109	6	1992</citation>
	<citation>2109	6	1992</citation>
	<citation>2412	6	1992</citation>
	<citation>2543	6	1992</citation>
	<citation>2673	6	1992</citation>
	<citation>2673	6	1992</citation>
	<citation>2707	6	1992</citation>
	<citation>2770	6	1992</citation>
	</citations>
	</document>
	<document id= '1991'>
	<title>On the Number of Automorphisms of a Singly Generated Automaton</title>
	<conference>CACM September, 1970</conference>
	<authors>
	<author>Bavel, Z.</author>
	</authors>
	<keywords>automata, finite automata, singly generated automata, automorphisms, generators, length of state, minimal-length generators, orbit</keywords>
	<version>5.22</version>
	<location>CA700914 JB February 10, 1978  9:54 AM</location>
	<citations>
	<citation>1991	5	1991</citation>
	<citation>1991	5	1991</citation>
	<citation>1991	5	1991</citation>
	</citations>
	</document>
	<document id= '1990'>
	<title>Numerical Constants (Algorithm)</title>
	<conference>CACM September, 1970</conference>
	<authors>
	<author>Dunham, C. B.</author>
	</authors>
	<keywords>numerical algorithm, numerical constants</keywords>
	<version>5.10</version>
	<location>CA700915 JB February 10, 1978  9:48 AM</location>
	<citations>
	<citation>1990	5	1990</citation>
	<citation>1990	5	1990</citation>
	<citation>1990	5	1990</citation>
	</citations>
	</document>
	<document id= '1989'>
	<title>Transition Network Grammars for Natural Language Analysis</title>
	<abstract>The use of augmented transition network grammars for the analysis of natural language sentences is described.  Structure-building actions associated with the arcs of the grammar network allow for the reordering, restructuring, and copying of constituents necessary to produce deep-structure representations of the type normally obtained from a transformational analysis, and conditions on the arcs allow for a powerful selectivity which can rule out meaningless analyses and take advantage of semantic information to guide the parsing.  The advantage of this model for natural language analysis are discussed in detail and illustrated by examples.  An implementation of an experimental parsing system for transition network grammars is briefly  described.</abstract>
	<conference>CACM October, 1970</conference>
	<authors>
	<author>Woods, W. A.</author>
	</authors>
	<keywords>computational linguistics, grammars, grammar models, linguistics, natural language analysis, parsing, semantic interpretation, transition network grammars, transformational grammars</keywords>
	<version>3.42 4.12</version>
	<location>CA701001 JB February 10, 1978  9:43 AM</location>
	<citations>
	<citation>1323	4	1989</citation>
	<citation>1358	4	1989</citation>
	<citation>1380	4	1989</citation>
	<citation>1665	4	1989</citation>
	<citation>1781	4	1989</citation>
	<citation>1787	4	1989</citation>
	<citation>1989	4	1989</citation>
	<citation>1989	4	1989</citation>
	<citation>2060	4	1989</citation>
	<citation>2112	4	1989</citation>
	<citation>2179	4	1989</citation>
	<citation>2534	4	1989</citation>
	<citation>2541	4	1989</citation>
	<citation>2698	4	1989</citation>
	<citation>2698	4	1989</citation>
	<citation>2733	4	1989</citation>
	<citation>2820	4	1989</citation>
	<citation>2921	4	1989</citation>
	<citation>3073	4	1989</citation>
	<citation>3155	4	1989</citation>
	<citation>3154	4	1989</citation>
	<citation>1989	5	1989</citation>
	<citation>1989	5	1989</citation>
	<citation>1989	5	1989</citation>
	<citation>2110	5	1989</citation>
	<citation>2581	5	1989</citation>
	<citation>2739	5	1989</citation>
	<citation>2795	5	1989</citation>
	<citation>2921	5	1989</citation>
	<citation>3087	5	1989</citation>
	<citation>799	5	1989</citation>
	<citation>1928	6	1989</citation>
	<citation>1989	6	1989</citation>
	<citation>1989	6	1989</citation>
	<citation>1989	6	1989</citation>
	<citation>1989	6	1989</citation>
	<citation>1989	6	1989</citation>
	<citation>2046	6	1989</citation>
	<citation>2110	6	1989</citation>
	<citation>2274	6	1989</citation>
	</citations>
	</document>
	<document id= '1988'>
	<title>A Formalism for Translator Interactions</title>
	<abstract>A formalism is presented for describing the actions of processors for programming languages-compilers, interpreters, assemblers-and their interactions in complex systems such as compiler-compilers or extendible languages. The formalism here might be used to define and answer such a question as "Can one do bootstrapping using a meta-compiler  whose metaphase is interpretive?"  In addition an algorithm is presented for deciding whether or not a given system can be produced from a given set of component processors.</abstract>
	<conference>CACM October, 1970</conference>
	<authors>
	<author>Earley, J.</author>
	</authors>
	<keywords>translator, compiler, interpreter, bootstrapping, language processor, compiler-compiler</keywords>
	<version>4.1 5.29</version>
	<location>CA701002 JB February 10, 1978  9:36 AM</location>
	<citations>
	<citation>1159	4	1988</citation>
	<citation>1396	4	1988</citation>
	<citation>1767	4	1988</citation>
	<citation>1781	4	1988</citation>
	<citation>1781	4	1988</citation>
	<citation>1781	4	1988</citation>
	<citation>1787	4	1988</citation>
	<citation>1860	4	1988</citation>
	<citation>1945	4	1988</citation>
	<citation>1988	4	1988</citation>
	<citation>1988	4	1988</citation>
	<citation>1988	4	1988</citation>
	<citation>1988	4	1988</citation>
	<citation>381	4	1988</citation>
	<citation>2252	4	1988</citation>
	<citation>1496	5	1988</citation>
	<citation>1988	5	1988</citation>
	<citation>1988	5	1988</citation>
	<citation>1988	5	1988</citation>
	<citation>381	5	1988</citation>
	<citation>11	5	1988</citation>
	<citation>14	5	1988</citation>
	</citations>
	</document>
	<document id= '1987'>
	<title>Student's t-Distribution $S14) (Algorithm 395)</title>
	<conference>CACM October, 1970</conference>
	<authors>
	<author>Hill, G. W.</author>
	</authors>
	<keywords>Student's t-statistic, distribution function, approximation, asymptotic expansion</keywords>
	<version>5.12 5.5</version>
	<location>CA701003 JB February 10, 1978  9:31 AM</location>
	<citations>
	<citation>1157	4	1987</citation>
	<citation>1779	4	1987</citation>
	<citation>1920	4	1987</citation>
	<citation>1944	4	1987</citation>
	<citation>1944	4	1987</citation>
	<citation>1987	4	1987</citation>
	<citation>1987	4	1987</citation>
	<citation>1987	4	1987</citation>
	<citation>1987	4	1987</citation>
	<citation>1987	4	1987</citation>
	<citation>2427	4	1987</citation>
	<citation>2548	4	1987</citation>
	<citation>1561	5	1987</citation>
	<citation>1581	5	1987</citation>
	<citation>1779	5	1987</citation>
	<citation>1944	5	1987</citation>
	<citation>1986	5	1987</citation>
	<citation>1987	5	1987</citation>
	<citation>1987	5	1987</citation>
	<citation>1987	5	1987</citation>
	<citation>2315	5	1987</citation>
	<citation>714	5	1987</citation>
	<citation>1348	6	1987</citation>
	<citation>1834	6	1987</citation>
	<citation>1987	6	1987</citation>
	<citation>1987	6	1987</citation>
	<citation>728	6	1987</citation>
	</citations>
	</document>
	<document id= '1986'>
	<title>Student's t-Quantiles $S14) (Algorithm 396)</title>
	<conference>CACM October, 1970</conference>
	<authors>
	<author>Hill, G. W.</author>
	</authors>
	<keywords>Student's t-statistic, quantile, asymptotic approximation</keywords>
	<version>5.12 5.5</version>
	<location>CA701004 JB February 10, 1978  9:29 AM</location>
	<citations>
	<citation>1986	4	1986</citation>
	<citation>2315	4	1986</citation>
	<citation>1986	5	1986</citation>
	<citation>1986	5	1986</citation>
	<citation>1986	5	1986</citation>
	<citation>1987	5	1986</citation>
	</citations>
	</document>
	<document id= '1985'>
	<title>An Integer Programming Problem $H) (Algorithm 397)</title>
	<conference>CACM October, 1970</conference>
	<authors>
	<author>Chang, S. K.</author>
	<author>Gill, A.</author>
	</authors>
	<keywords>integer programming, change making problem</keywords>
	<version>5.41</version>
	<location>CA701005 JB February 10, 1978  9:28 AM</location>
	<citations>
	<citation>1985	5	1985</citation>
	<citation>1985	5	1985</citation>
	<citation>1985	5	1985</citation>
	</citations>
	</document>
	<document id= '1984'>
	<title>Tableless Date Conversion $Z) (Algorithm 398)</title>
	<conference>CACM October, 1970</conference>
	<authors>
	<author>Stone, R. A.</author>
	</authors>
	<keywords>date, calendar</keywords>
	<version>5.9</version>
	<location>CA701006 JB February 10, 1978  9:25 AM</location>
	<citations>
	<citation>1984	5	1984</citation>
	<citation>1984	5	1984</citation>
	<citation>1984	5	1984</citation>
	</citations>
	</document>
	<document id= '1983'>
	<title>Spanning Tree $H) (Algorithm 399)</title>
	<conference>CACM October, 1970</conference>
	<authors>
	<author>Seppanen, J. J.</author>
	</authors>
	<keywords>graph, tree, spanning tree</keywords>
	<version>5.32</version>
	<location>CA701007 JB February 10, 1978  9:24 AM</location>
	<citations>
	<citation>1983	5	1983</citation>
	<citation>1983	5	1983</citation>
	<citation>1983	5	1983</citation>
	</citations>
	</document>
	<document id= '1982'>
	<title>Modified Havie Integration (Algorithm 400 $D1))</title>
	<conference>CACM October, 1970</conference>
	<authors>
	<author>Wallick, G. C.</author>
	</authors>
	<keywords>numerical integration, Havie integration, Romberg quadrature, modified Romberg-quadrature, trapezoid values, rectangle values</keywords>
	<version>5.16</version>
	<location>CA701008 JB February 10, 1978  9:22 AM</location>
	<citations>
	<citation>205	4	1982</citation>
	<citation>210	4	1982</citation>
	<citation>214	4	1982</citation>
	<citation>1352	4	1982</citation>
	<citation>1352	4	1982</citation>
	<citation>1982	4	1982</citation>
	<citation>1982	4	1982</citation>
	<citation>1982	4	1982</citation>
	<citation>1982	4	1982</citation>
	<citation>398	4	1982</citation>
	<citation>2040	4	1982</citation>
	<citation>2040	4	1982</citation>
	<citation>2355	4	1982</citation>
	<citation>642	4	1982</citation>
	<citation>669	4	1982</citation>
	<citation>100	4	1982</citation>
	<citation>123	4	1982</citation>
	<citation>164	4	1982</citation>
	<citation>1	5	1982</citation>
	<citation>1273	5	1982</citation>
	<citation>1883	5	1982</citation>
	<citation>1982	5	1982</citation>
	<citation>1982	5	1982</citation>
	<citation>1982	5	1982</citation>
	<citation>324	5	1982</citation>
	<citation>2415	5	1982</citation>
	<citation>1040	6	1982</citation>
	<citation>1982	6	1982</citation>
	<citation>2074	6	1982</citation>
	</citations>
	</document>
	<document id= '1981'>
	<title>Normal Curve Integral (Algorithm 304 $S15))</title>
	<conference>CACM October, 1970</conference>
	<authors>
	<author>Holmgren, B.</author>
	</authors>
	<keywords>normal curve integral, probability, special functions</keywords>
	<version>5.12 5.5</version>
	<location>CA701009 JB February 10, 1978  9:20 AM</location>
	<citations>
	<citation>1981	5	1981</citation>
	<citation>1981	5	1981</citation>
	<citation>1981	5	1981</citation>
	</citations>
	</document>
	<document id= '1980'>
	<title>An Efficient Algorithm for Sorting with Minimal Storage (Algorithm 347 $M1))</title>
	<conference>CACM October, 1970</conference>
	<authors>
	<author>Peto, R.</author>
	</authors>
	<keywords>sorting, ranking, minimal storage sorting, digital computer sorting</keywords>
	<version>5.31</version>
	<location>CA701010 JB February 10, 1978  9:19 AM</location>
	<citations>
	<citation>1980	5	1980</citation>
	<citation>1980	5	1980</citation>
	<citation>1980	5	1980</citation>
	<citation>3054	5	1980</citation>
	<citation>1175	6	1980</citation>
	<citation>1880	6	1980</citation>
	<citation>1919	6	1980</citation>
	<citation>1969	6	1980</citation>
	<citation>1980	6	1980</citation>
	<citation>1997	6	1980</citation>
	<citation>307	6	1980</citation>
	<citation>308	6	1980</citation>
	<citation>309	6	1980</citation>
	<citation>2017	6	1980</citation>
	<citation>2679	6	1980</citation>
	<citation>776	6	1980</citation>
	</citations>
	</document>
	<document id= '1979'>
	<title>Numerical Inversion of Laplace Transforms (Algorithm 368 $D5))</title>
	<conference>CACM October, 1970</conference>
	<authors>
	<author>Stehfest, H.</author>
	</authors>
	<keywords>Laplace transform inversion, integral transformations, integral equations</keywords>
	<version>5.15 5.18</version>
	<location>CA701011 JB February 10, 1978  9:16 AM</location>
	<citations>
	<citation>1979	5	1979</citation>
	<citation>1979	5	1979</citation>
	<citation>1979	5	1979</citation>
	</citations>
	</document>
	<document id= '1978'>
	<title>The Use of Interactive Graphics To Solve Numerical Problems</title>
	<abstract>With the advent of on-line (time-sharing) computer systems and graphic terminals, we have available a new dimension in numerical problem solving capabilities.  Rather than simply use the new power to achieve fast turnaround, we can develop interactive routines which are easy to use and also take advantage of the insight and visual capabilities of the human problem solver.  Several on-line systems for general purpose mathematical problem solving have already been implemented as well as some special purpose systems for solving problems in a particular area such as ordinary differential equations.  The advantage of restricting the problem area is that the interface with a user can be greatly simplified. In this paper we discuss some of the advantages accrued by such systems and design considerations for interactive routines.  Furthermore, an implementation of an on-line least squares data-fitting program, PEG, is presented with results obtained from empirical data.  In conclusion, area for future work in this field are discussed.</abstract>
	<conference>CACM October, 1970</conference>
	<authors>
	<author>Smith, L. B.</author>
	</authors>
	<keywords>interactive graphics, computer graphics, graphics, least squares, data-fitting, interactive computing, on-line mathematics</keywords>
	<version>1.3 3.1 5.13 5.5</version>
	<location>CA701012 JB February 10, 1978  9:14 AM</location>
	<citations>
	<citation>1978	4	1978</citation>
	<citation>1978	4	1978</citation>
	<citation>1978	4	1978</citation>
	<citation>1307	5	1978</citation>
	<citation>1589	5	1978</citation>
	<citation>1813	5	1978</citation>
	<citation>1978	5	1978</citation>
	<citation>1978	5	1978</citation>
	<citation>1978	5	1978</citation>
	</citations>
	</document>
	<document id= '1977'>
	<title>An Interactive Display for Approximation by Linear Programming</title>
	<abstract>An interactive program with a graphical display has been developed for the approximation of data by means of a linear combination of functions (including splines) selected by the user.  The coefficients of the approximation are determined by linear programming so as to minimize the error in either the L1 or L-infinity norm.  Auxiliary conditions such as monotonicity or convexity of the approximation can also be imposed. This interactive system is described and several examples of its use are given.</abstract>
	<conference>CACM November, 1970</conference>
	<authors>
	<author>LaFata, P.</author>
	<author>Rosen, J. B.</author>
	</authors>
	<keywords>approximation, data fitting, functional approximation, linear programming, interactive graphical display, spline functions</keywords>
	<version>5.13 5.41</version>
	<location>CA701101 JB February 10, 1978  9:06 AM</location>
	<citations>
	<citation>1977	5	1977</citation>
	<citation>1977	5	1977</citation>
	<citation>1977	5	1977</citation>
	<citation>2604	5	1977</citation>
	<citation>1977	6	1977</citation>
	</citations>
	</document>
	<document id= '1976'>
	<title>Multi-attribute Retrieval with Combined Indexes</title>
	<abstract>In this paper a file organization scheme designed to replace the use of the popular secondary index filing scheme (or inverted files on secondary key fields) is described. Through the use of redundancy and storing  keys (or access numbers of the records) that satisfy different combinations of secondary index values in "buckets," it is possible to retrieve all keys satisfying any input query derived from a subset of fields by a single access to an index file, although each bucket may be used for many combinations of values and a combination of buckets may be required for a given query.  The method which, in its degenerate case, becomes the conventional secondary index filing scheme works similarly but has the following advantages: (1) the elimination of multiple accesses in many cases; (2) the elimination of false drops; (3) the elimination of computer time to perform intersection of key sets each qualified for one secondary index field only; and (4) the avoidance of long strings of keys when an index field appearing in a query has very few possible values.  Redundancy, in some  cases, is the same as the secondary indexing method. In the general case,  trade-off between the number of accesses for query and redundancy exists.</abstract>
	<conference>CACM November, 1970</conference>
	<authors>
	<author>Lum, V. Y.</author>
	</authors>
	<keywords>file organization, secondary index files, inverted files, information retrieval, data management, access method, secondary  keys, storage with buckets, rapid retrieval, balanced filing scheme, elimination of false drops, combining indexes, query, multi-attribute retrieval</keywords>
	<version>3.73 3.74 3.79</version>
	<location>CA701102 JB February 10, 1978  9:00 AM</location>
	<citations>
	<citation>1976	4	1976</citation>
	<citation>1271	5	1976</citation>
	<citation>1976	5	1976</citation>
	<citation>1976	5	1976</citation>
	<citation>1976	5	1976</citation>
	<citation>2140	5	1976</citation>
	<citation>2452	5	1976</citation>
	<citation>2765	5	1976</citation>
	<citation>2901	5	1976</citation>
	<citation>3134	5	1976</citation>
	<citation>849	6	1976</citation>
	<citation>1936	6	1976</citation>
	<citation>1936	6	1976</citation>
	<citation>1976	6	1976</citation>
	<citation>1976	6	1976</citation>
	<citation>1976	6	1976</citation>
	<citation>1976	6	1976</citation>
	<citation>1976	6	1976</citation>
	<citation>2046	6	1976</citation>
	<citation>2046	6	1976</citation>
	<citation>2160	6	1976</citation>
	<citation>2198	6	1976</citation>
	<citation>2451	6	1976</citation>
	<citation>2452	6	1976</citation>
	<citation>2524	6	1976</citation>
	<citation>2715	6	1976</citation>
	<citation>2990	6	1976</citation>
	<citation>616	6	1976</citation>
	</citations>
	</document>
	<document id= '1975'>
	<title>A Multiple-Precision Division Algorithm</title>
	<abstract>A generalized division algorithm for use with positive integral operands is  presented.  Depending upon the algebraic relationship of the first two ciphers of the divisor, one or at most two adjustments to the original  divisor and dividend must be performed before the division operation can be  initiated. The uniqueness of this method will cause each trial cipher in the  quotient to be either equal to or one greater than its final replacement.</abstract>
	<conference>CACM November, 1970</conference>
	<authors>
	<author>Mifsud, C. J.</author>
	</authors>
	<keywords>multiple-precision, division, adjustment, generalize</keywords>
	<version>3.15 4.0 5.1</version>
	<location>CA701103 JB February 10, 1978  8:45 AM</location>
	<citations>
	<citation>1258	4	1975</citation>
	<citation>1292	4	1975</citation>
	<citation>1497	4	1975</citation>
	<citation>1497	4	1975</citation>
	<citation>1593	4	1975</citation>
	<citation>1975	4	1975</citation>
	<citation>1975	4	1975</citation>
	<citation>1975	4	1975</citation>
	<citation>2605	4	1975</citation>
	<citation>1026	5	1975</citation>
	<citation>1292	5	1975</citation>
	<citation>1497	5	1975</citation>
	<citation>1975	5	1975</citation>
	<citation>1975	5	1975</citation>
	<citation>1975	5	1975</citation>
	<citation>2432	5	1975</citation>
	<citation>1975	6	1975</citation>
	</citations>
	</document>
	<document id= '1974'>
	<title>NEATER2: A PL/I Source Statement Reformatter</title>
	<abstract>NEATER2 accepts a PL/I source program and operates on it to produce a reformatted version.  When in the LOGICAL mode, NEATER2 indicates the logical structure of the source program in the indentation pattern of its output.  Logic errors discovered through NEATER2 logical analysis are discovered much more economically than is possible through compilation and trial runs.  A number of options are available to give the user full control over the output format and to maximize the utility of NEATER2 as an aid during the early stages of development of a PL/I source deck.  One option, USAGE, causes NEATER2 to insert into each logical unit of coding a statement which will case the number of times each one is executed to be recorded during execution.  This feature is expected to provide a major aid in optimization of PL/I programs.</abstract>
	<conference>CACM November, 1970</conference>
	<authors>
	<author>Conrow, K.</author>
	<author>Smith, R. G.</author>
	</authors>
	<keywords>logical analysis of PL/I source, reformatting of PL/I source, documentation aid, execution time usage data</keywords>
	<version>1.52 4.12 4.19 4.42</version>
	<location>CA701104 JB February 10, 1978  8:40 AM</location>
	<citations>
	<citation>1974	5	1974</citation>
	<citation>1974	5	1974</citation>
	<citation>1974	5	1974</citation>
	<citation>2971	5	1974</citation>
	<citation>1835	6	1974</citation>
	<citation>1974	6	1974</citation>
	<citation>2534	6	1974</citation>
	</citations>
	</document>
	<document id= '1973'>
	<title>The Linear Quotient Hash Code</title>
	<abstract>A new method of hash coding is presented and is shown to possess desirable attributes.  Specifically, the algorithm is simple, efficient, and exhaustive, while needing little time per probe and using few probes per lookup.  Performance data and implementation hints are also given.</abstract>
	<conference>CACM November, 1970</conference>
	<authors>
	<author>Bell, J. R.</author>
	<author>Kaman, C. H.</author>
	</authors>
	<keywords>hashing, hash code, scatter storage, calculated address, search, table, lookup, symbol table, keys</keywords>
	<version>3.74 4.9</version>
	<location>CA701105 JB February 10, 1978  8:33 AM</location>
	<citations>
	<citation>1676	4	1973</citation>
	<citation>1682	4	1973</citation>
	<citation>1728	4	1973</citation>
	<citation>1860	4	1973</citation>
	<citation>1860	4	1973</citation>
	<citation>1973	4	1973</citation>
	<citation>1973	4	1973</citation>
	<citation>1973	4	1973</citation>
	<citation>1973	4	1973</citation>
	<citation>1992	4	1973</citation>
	<citation>1992	4	1973</citation>
	<citation>2018	4	1973</citation>
	<citation>2018	4	1973</citation>
	<citation>2018	4	1973</citation>
	<citation>2032	4	1973</citation>
	<citation>2033	4	1973</citation>
	<citation>2033	4	1973</citation>
	<citation>2107	4	1973</citation>
	<citation>2107	4	1973</citation>
	<citation>2109	4	1973</citation>
	<citation>2109	4	1973</citation>
	<citation>2138	4	1973</citation>
	<citation>2203	4	1973</citation>
	<citation>2203	4	1973</citation>
	<citation>2203	4	1973</citation>
	<citation>2203	4	1973</citation>
	<citation>2251	4	1973</citation>
	<citation>2251	4	1973</citation>
	<citation>2251	4	1973</citation>
	<citation>2251	4	1973</citation>
	<citation>2359	4	1973</citation>
	<citation>2524	4	1973</citation>
	<citation>2530	4	1973</citation>
	<citation>2537	4	1973</citation>
	<citation>2543	4	1973</citation>
	<citation>2543	4	1973</citation>
	<citation>2543	4	1973</citation>
	<citation>2543	4	1973</citation>
	<citation>2552	4	1973</citation>
	<citation>2559	4	1973</citation>
	<citation>2559	4	1973</citation>
	<citation>2573	4	1973</citation>
	<citation>2573	4	1973</citation>
	<citation>2770	4	1973</citation>
	<citation>2770	4	1973</citation>
	<citation>2974	4	1973</citation>
	<citation>2991	4	1973</citation>
	<citation>2991	4	1973</citation>
	<citation>3053	4	1973</citation>
	<citation>3053	4	1973</citation>
	<citation>3053	4	1973</citation>
	<citation>3083	4	1973</citation>
	<citation>1785	5	1973</citation>
	<citation>1786	5	1973</citation>
	<citation>1973	5	1973</citation>
	<citation>1973	5	1973</citation>
	<citation>1973	5	1973</citation>
	<citation>2107	5	1973</citation>
	<citation>2109	5	1973</citation>
	<citation>2251	5	1973</citation>
	<citation>2534	5	1973</citation>
	<citation>2543	5	1973</citation>
	<citation>2559	5	1973</citation>
	<citation>2770	5	1973</citation>
	<citation>3053	5	1973</citation>
	<citation>3083	5	1973</citation>
	<citation>830	6	1973</citation>
	<citation>1328	6	1973</citation>
	<citation>1329	6	1973</citation>
	<citation>1785	6	1973</citation>
	<citation>1785	6	1973</citation>
	<citation>1785	6	1973</citation>
	<citation>1785	6	1973</citation>
	<citation>1786	6	1973</citation>
	<citation>1786	6	1973</citation>
	<citation>1786	6	1973</citation>
	<citation>1787	6	1973</citation>
	<citation>1869	6	1973</citation>
	<citation>1959	6	1973</citation>
	<citation>1973	6	1973</citation>
	<citation>1973	6	1973</citation>
	<citation>1973	6	1973</citation>
	<citation>1973	6	1973</citation>
	<citation>1973	6	1973</citation>
	<citation>1973	6	1973</citation>
	<citation>1973	6	1973</citation>
	<citation>1992	6	1973</citation>
	<citation>1992	6	1973</citation>
	<citation>332	6	1973</citation>
	<citation>2018	6	1973</citation>
	<citation>2018	6	1973</citation>
	<citation>2107	6	1973</citation>
	<citation>2107	6	1973</citation>
	<citation>2107	6	1973</citation>
	<citation>2107	6	1973</citation>
	<citation>2107	6	1973</citation>
	<citation>2109	6	1973</citation>
	<citation>2109	6	1973</citation>
	<citation>2109	6	1973</citation>
	<citation>2109	6	1973</citation>
	<citation>2111	6	1973</citation>
	<citation>2182	6	1973</citation>
	<citation>2412	6	1973</citation>
	<citation>2543	6	1973</citation>
	<citation>2543	6	1973</citation>
	<citation>2552	6	1973</citation>
	<citation>2673	6	1973</citation>
	<citation>2673	6	1973</citation>
	<citation>2707	6	1973</citation>
	<citation>2770	6	1973</citation>
	<citation>799	6	1973</citation>
	</citations>
	</document>
	<document id= '1972'>
	<title>A  Nonrecursive List Compacting Algorithm</title>
	<abstract>A simple nonrecursive list structure compacting scheme or garbage  collector suitable for both compact and LISP-like list structures is presented. The algorithm avoids the need for recursion by using the partial structure as  it is built up to keep track of those lists that have been copied.</abstract>
	<conference>CACM November, 1970</conference>
	<authors>
	<author>Cheney, C. J.</author>
	</authors>
	<keywords>list compacting, garbage collection, compact list, LISP</keywords>
	<version>4.19 4.49</version>
	<location>CA701106 JB February 9, 1978  4:54 PM</location>
	<citations>
	<citation>1972	4	1972</citation>
	<citation>1972	4	1972</citation>
	<citation>2156	4	1972</citation>
	<citation>2168	4	1972</citation>
	<citation>2249	4	1972</citation>
	<citation>2438	4	1972</citation>
	<citation>2723	4	1972</citation>
	<citation>2736	4	1972</citation>
	<citation>2736	4	1972</citation>
	<citation>2833	4	1972</citation>
	<citation>2855	4	1972</citation>
	<citation>3074	4	1972</citation>
	<citation>3074	4	1972</citation>
	<citation>3112	4	1972</citation>
	<citation>1826	5	1972</citation>
	<citation>1853	5	1972</citation>
	<citation>1972	5	1972</citation>
	<citation>1972	5	1972</citation>
	<citation>1972	5	1972</citation>
	<citation>2156	5	1972</citation>
	<citation>2361	5	1972</citation>
	<citation>2513	5	1972</citation>
	<citation>2736	5	1972</citation>
	<citation>2855	5	1972</citation>
	<citation>3074	5	1972</citation>
	<citation>3106	5	1972</citation>
	<citation>3112	5	1972</citation>
	<citation>106	6	1972</citation>
	<citation>1380	6	1972</citation>
	<citation>1549	6	1972</citation>
	<citation>1549	6	1972</citation>
	<citation>1549	6	1972</citation>
	<citation>1626	6	1972</citation>
	<citation>1626	6	1972</citation>
	<citation>1826	6	1972</citation>
	<citation>1826	6	1972</citation>
	<citation>1826	6	1972</citation>
	<citation>1826	6	1972</citation>
	<citation>1826	6	1972</citation>
	<citation>210	6	1972</citation>
	<citation>210	6	1972</citation>
	<citation>1853	6	1972</citation>
	<citation>1853	6	1972</citation>
	<citation>1972	6	1972</citation>
	<citation>1972	6	1972</citation>
	<citation>1972	6	1972</citation>
	<citation>1972	6	1972</citation>
	<citation>1972	6	1972</citation>
	<citation>1972	6	1972</citation>
	<citation>1972	6	1972</citation>
	<citation>1972	6	1972</citation>
	<citation>2438	6	1972</citation>
	<citation>2513	6	1972</citation>
	<citation>2665	6	1972</citation>
	<citation>2723	6	1972</citation>
	<citation>2723	6	1972</citation>
	<citation>2736	6	1972</citation>
	<citation>2766	6	1972</citation>
	<citation>2766	6	1972</citation>
	<citation>2833	6	1972</citation>
	<citation>2833	6	1972</citation>
	<citation>2838	6	1972</citation>
	<citation>2855	6	1972</citation>
	<citation>2954	6	1972</citation>
	<citation>2998	6	1972</citation>
	<citation>2998	6	1972</citation>
	<citation>731	6	1972</citation>
	</citations>
	</document>
	<document id= '1971'>
	<title>Recorded Magnetic Tape for Information Interchange (1600 CPI, Phase Encoded)* (Proposed American National Standard)</title>
	<conference>CACM November, 1970</conference>
	<keywords>input-output, magnetic tape, information interchange, measurement, instrumentation, phase encoded recording</keywords>
	<version>2.49 6.35</version>
	<location>CA701107 JB February 9, 1978  4:49 PM</location>
	<citations>
	<citation>1971	5	1971</citation>
	<citation>1971	5	1971</citation>
	<citation>1971	5	1971</citation>
	</citations>
	</document>
	<document id= '1970'>
	<title>Unrecorded Magnetic Tape for Information Interchange (9 Track-200 and 800 CPI, NRZI and 1600 CPI, PE)* (Proposed American National Standard)</title>
	<conference>CACM November, 1970</conference>
	<keywords>input-output, magnetic tape, information interchange, measurement, instrumentation, phase encoded recording</keywords>
	<version>2.49 6.35</version>
	<location>CA701108 JB February 9, 1978  4:42 PM</location>
	<citations>
	<citation>1970	5	1970</citation>
	<citation>1970	5	1970</citation>
	<citation>1970	5	1970</citation>
	</citations>
	</document>
	<document id= '1969'>
	<title>Increasing the Efficiency of Quicksort (Algorithm 402 $M1))</title>
	<conference>CACM November, 1970</conference>
	<authors>
	<author>Emden, M. H.</author>
	</authors>
	<keywords>sorting, quicksort</keywords>
	<version>5.31 3.73 5.6 4.49</version>
	<location>CA701110 JB February 9, 1978  4:32 PM</location>
	<citations>
	<citation>1175	4	1969</citation>
	<citation>1919	4	1969</citation>
	<citation>1919	4	1969</citation>
	<citation>1969	4	1969</citation>
	<citation>1969	4	1969</citation>
	<citation>1997	4	1969</citation>
	<citation>2118	4	1969</citation>
	<citation>2191	4	1969</citation>
	<citation>2388	4	1969</citation>
	<citation>2348	4	1969</citation>
	<citation>2679	4	1969</citation>
	<citation>2679	4	1969</citation>
	<citation>3054	4	1969</citation>
	<citation>3054	4	1969</citation>
	<citation>3121	4	1969</citation>
	<citation>1175	5	1969</citation>
	<citation>1969	5	1969</citation>
	<citation>1969	5	1969</citation>
	<citation>1969	5	1969</citation>
	<citation>1997	5	1969</citation>
	<citation>308	5	1969</citation>
	<citation>2216	5	1969</citation>
	<citation>2679	5	1969</citation>
	<citation>3054	5	1969</citation>
	<citation>864	6	1969</citation>
	<citation>970	6	1969</citation>
	<citation>1175	6	1969</citation>
	<citation>1175	6	1969</citation>
	<citation>1190	6	1969</citation>
	<citation>1228	6	1969</citation>
	<citation>1880	6	1969</citation>
	<citation>1919	6	1969</citation>
	<citation>1919	6	1969</citation>
	<citation>1969	6	1969</citation>
	<citation>1969	6	1969</citation>
	<citation>1969	6	1969</citation>
	<citation>1969	6	1969</citation>
	<citation>1980	6	1969</citation>
	<citation>1997	6	1969</citation>
	<citation>1997	6	1969</citation>
	<citation>1997	6	1969</citation>
	<citation>307	6	1969</citation>
	<citation>308	6	1969</citation>
	<citation>308	6	1969</citation>
	<citation>308	6	1969</citation>
	<citation>309	6	1969</citation>
	<citation>2017	6	1969</citation>
	<citation>2042	6	1969</citation>
	<citation>2679	6	1969</citation>
	<citation>3187	6	1969</citation>
	<citation>507	6	1969</citation>
	<citation>716	6	1969</citation>
	<citation>776	6	1969</citation>
	<citation>783	6	1969</citation>
	</citations>
	</document>
	<document id= '1968'>
	<title>Eigenvalues and Eigenvectors of a Real General Matrix (Algorithm 343 $F1))</title>
	<conference>CACM November, 1970</conference>
	<authors>
	<author>Knight, W.</author>
	<author>Mersereau, W.</author>
	</authors>
	<keywords>eigenvalues, eigenvectors, latent roots, Householder's method, QR algorithm, inverse iteration</keywords>
	<version>5.14</version>
	<location>CA701111 JB February 9, 1978  4:30 PM</location>
	<citations>
	<citation>1968	4	1968</citation>
	<citation>1968	4	1968</citation>
	<citation>2099	4	1968</citation>
	<citation>2335	4	1968</citation>
	<citation>1662	5	1968</citation>
	<citation>1968	5	1968</citation>
	<citation>1968	5	1968</citation>
	<citation>1968	5	1968</citation>
	<citation>2099	5	1968</citation>
	</citations>
	</document>
	<document id= '1967'>
	<title>An Improved Algorithm to Produce Complex Primes (Algorithm 401 $A1))</title>
	<conference>CACM November, 1970</conference>
	<authors>
	<author>Bratley, P.</author>
	</authors>
	<keywords>number theory, prime numbers, complex numbers</keywords>
	<version>5.39</version>
	<location>CA701112 JB February 9, 1978  4:28 PM</location>
	<citations>
	<citation>1841	4	1967</citation>
	<citation>1967	4	1967</citation>
	<citation>1967	4	1967</citation>
	<citation>2120	4	1967</citation>
	<citation>2927	4	1967</citation>
	<citation>1539	5	1967</citation>
	<citation>1967	5	1967</citation>
	<citation>1967	5	1967</citation>
	<citation>1967	5	1967</citation>
	<citation>2120	5	1967</citation>
	</citations>
	</document>
	<document id= '1966'>
	<title>A Generalized Method for Generating Argument/Function Values</title>
	<conference>CACM November, 1970</conference>
	<authors>
	<author>Wilson, W. J.</author>
	</authors>
	<keywords>mapping function, decision hierarchy, table look-up</keywords>
	<version>4.9 5.39</version>
	<location>CA701113 JB February 9, 1978  4:26 PM</location>
	<citations>
	<citation>1966	5	1966</citation>
	<citation>1966	5	1966</citation>
	<citation>1966	5	1966</citation>
	</citations>
	</document>
	<document id= '1965'>
	<title>Correction to "Logical" Arithmetic on Computers with Two's Complement Binary Arithmetic</title>
	<conference>CACM November, 1970</conference>
	<authors>
	<author>Ehrman, J. R.</author>
	</authors>
	<keywords>binary arithmetic, unsigned operand arithmetic, maximum significance arithmetic, full-precision arithmetic</keywords>
	<version>3.15 5.11</version>
	<location>CA701114 JB February 9, 1978  4:25 PM</location>
	<citations>
	<citation>1965	4	1965</citation>
	<citation>2200	4	1965</citation>
	<citation>1718	5	1965</citation>
	<citation>1965	5	1965</citation>
	<citation>1965	5	1965</citation>
	<citation>1965	5	1965</citation>
	</citations>
	</document>
	<document id= '1964'>
	<title>Comment on the Working Set Model for Program Behavior</title>
	<conference>CACM November, 1970</conference>
	<authors>
	<author>Bernstein, A.</author>
	</authors>
	<keywords>demand paging, working set, paging rate, multiprogramming</keywords>
	<version>4.30 4.32</version>
	<location>CA701115 JB February 9, 1978  4:23 PM</location>
	<citations>
	<citation>1964	5	1964</citation>
	<citation>1964	5	1964</citation>
	<citation>1964	5	1964</citation>
	</citations>
	</document>
	<document id= '1963'>
	<title>Condition Numbers of PEI Matrices</title>
	<conference>CACM November, 1970</conference>
	<authors>
	<author>Rokne, J.</author>
	</authors>
	<keywords>matrices, condition numbers, Pei matrices, eigenvectors, eigenvalues</keywords>
	<version>5.14</version>
	<location>CA701116 JB February 9, 1978  4:21 PM</location>
	<citations>
	<citation>1963	4	1963</citation>
	<citation>1963	4	1963</citation>
	<citation>1963	4	1963</citation>
	<citation>909	5	1963</citation>
	<citation>1963	5	1963</citation>
	<citation>1963	5	1963</citation>
	<citation>1963	5	1963</citation>
	<citation>475	5	1963</citation>
	<citation>750	5	1963</citation>
	</citations>
	</document>
	<document id= '1962'>
	<title>GROOVE-A Program to Compose, Store, and Edit Functions of Time</title>
	<abstract>A program which makes possible creating, storing, reproducing, and editing functions of time is described.  The functions are typical of those generated by human beings.  Multiple functions (up to 14) are produced for long periods of time (up to several hours) at sufficiently high sampling rates to describe fast human reactions (up to 200 samples per second).  The functions can be used for a variety of purposes such as the control of machine tools or sound synthesizers or anything a person normally controls.  The program operates on a small computer (DDP-224).  Functions are stored on a disk file.  Functions may be created by real-time human inputs to the computer which can interact with already stored functions and computed functions.  Real-time feedback from the process being controlled is an important link in the system.  The environment for effective man-machine interaction has been carefully nurtured.</abstract>
	<conference>CACM December, 1970</conference>
	<authors>
	<author>Mathews, M. V.</author>
	<author>Moore, F. R.</author>
	</authors>
	<keywords>computer music, music, real-time control, digital control, time functions, interactive software, hybrid systems, conductor program</keywords>
	<version>3.44 3.8 7.3</version>
	<location>CA701201 JB February 9, 1978  4:19 PM</location>
	<citations>
	<citation>1962	5	1962</citation>
	<citation>1962	5	1962</citation>
	<citation>1962	5	1962</citation>
	</citations>
	</document>
	<document id= '1961'>
	<title>An Efficient Search Algorithm to Find the Elementary Circuits of a Graph</title>
	<abstract>A theoretically most efficient search algorithm is presented which uses an exhaustive search to find all of the elementary circuits of a graph.  The algorithm can be easily modified to find all of the elementary circuits with a particular attribute such as length.  A rigorous proof of the algorithm is given as well as an example of its application.  Empirical bounds are presented relating the speed of the algorithm to the number of vertices and the number of arcs.  The speed is also related to the number of circuits in the graph to give a relation between speed and complexity. Extensions to undirected and s-graphs are discussed.</abstract>
	<conference>CACM December, 1970</conference>
	<authors>
	<author>Tiernan, J. C.</author>
	</authors>
	<keywords>algorithm, graph theory, circuit search algorithm, path search algorithm, searching</keywords>
	<version>3.74 5.32</version>
	<location>CA701202 JB February 9, 1978 4:12 PM</location>
	<citations>
	<citation>1847	4	1961</citation>
	<citation>1961	4	1961</citation>
	<citation>1961	4	1961</citation>
	<citation>1961	4	1961</citation>
	<citation>2052	4	1961</citation>
	<citation>2177	4	1961</citation>
	<citation>2763	4	1961</citation>
	<citation>1369	5	1961</citation>
	<citation>1504	5	1961</citation>
	<citation>1847	5	1961</citation>
	<citation>1961	5	1961</citation>
	<citation>1961	5	1961</citation>
	<citation>1961	5	1961</citation>
	<citation>2430	5	1961</citation>
	<citation>1961	6	1961</citation>
	</citations>
	</document>
	<document id= '1960'>
	<title>Process Management and Resource Sharing in the Multiaccess System ESOPE</title>
	<abstract>The main design principles of the multiaccess system ESOPE are described. Emphasis is placed on basic ideas underlying the design rather than on implementation details.  The main features of the system include the ability given to any user to schedule his own parallel processes using system primitive operations, the file-memory relationship, and the allocation-scheduling policy, which dynamically takes into account recent information about user behavior.</abstract>
	<conference>CACM December, 1970</conference>
	<authors>
	<author>Betourne, C.</author>
	<author>Boulenger, J.</author>
	<author>Ferrie, J.</author>
	<author>Kaiser, C.</author>
	<author>Krakowiak, S.</author>
	<author>Mossiere, J.</author>
	</authors>
	<keywords>time-sharing, multiprogramming, process scheduling, resource allocation</keywords>
	<version>4.32</version>
	<location>CA701203 JB February 9, 1978  4:02 PM</location>
	<citations>
	<citation>1458	4	1960</citation>
	<citation>1523	4	1960</citation>
	<citation>1603	4	1960</citation>
	<citation>1698	4	1960</citation>
	<citation>1747	4	1960</citation>
	<citation>1748	4	1960</citation>
	<citation>1828	4	1960</citation>
	<citation>1854	4	1960</citation>
	<citation>1854	4	1960</citation>
	<citation>1877	4	1960</citation>
	<citation>1877	4	1960</citation>
	<citation>1960	4	1960</citation>
	<citation>1960	4	1960</citation>
	<citation>1960	4	1960</citation>
	<citation>2150	4	1960</citation>
	<citation>2317	4	1960</citation>
	<citation>2319	4	1960</citation>
	<citation>2377	4	1960</citation>
	<citation>2377	4	1960</citation>
	<citation>2378	4	1960</citation>
	<citation>2342	4	1960</citation>
	<citation>2376	4	1960</citation>
	<citation>2379	4	1960</citation>
	<citation>2424	4	1960</citation>
	<citation>2482	4	1960</citation>
	<citation>2497	4	1960</citation>
	<citation>2558	4	1960</citation>
	<citation>2618	4	1960</citation>
	<citation>2625	4	1960</citation>
	<citation>2632	4	1960</citation>
	<citation>2632	4	1960</citation>
	<citation>2704	4	1960</citation>
	<citation>2723	4	1960</citation>
	<citation>2738	4	1960</citation>
	<citation>2740	4	1960</citation>
	<citation>2741	4	1960</citation>
	<citation>2840	4	1960</citation>
	<citation>2867	4	1960</citation>
	<citation>2941	4	1960</citation>
	<citation>3105	4	1960</citation>
	<citation>3144	4	1960</citation>
	<citation>3184	4	1960</citation>
	<citation>1471	5	1960</citation>
	<citation>1749	5	1960</citation>
	<citation>1854	5	1960</citation>
	<citation>1960	5	1960</citation>
	<citation>1960	5	1960</citation>
	<citation>1960	5	1960</citation>
	<citation>2376	5	1960</citation>
	<citation>1198	6	1960</citation>
	<citation>1749	6	1960</citation>
	<citation>1960	6	1960</citation>
	</citations>
	</document>
	<document id= '1959'>
	<title>An Interrupt Based Organization for Management Information Systems</title>
	<abstract>A programming structure, language constructs, and a supervisory system  organization are proposed for the design and coding of large shared data base systems.  The bases for this organization are a generalized interrupt structure and the newly introduced concept of "file tagging," which is the process of associating program structures and interrupt generating conditions with items in the data base.  An algorithm for resolving conflicts which arise in scheduling the interrupt processing routines is presented.  DPL, a programming language and supervisory system in which these concepts are implemented, is used to illustrated the new organization which is proposed for management information systems.</abstract>
	<conference>CACM December, 1970</conference>
	<authors>
	<author>Morgan, H. L.</author>
	</authors>
	<keywords>management information systems, integrated data processing, supervisors, interrupts monitoring systems, supervisory systems, interrupt scheduling, parallel processing</keywords>
	<version>3.51 4.22 4.32</version>
	<location>CA701204 JB February 9, 1978  3:46 PM</location>
	<citations>
	<citation>1959	4	1959</citation>
	<citation>1135	5	1959</citation>
	<citation>1959	5	1959</citation>
	<citation>1959	5	1959</citation>
	<citation>1959	5	1959</citation>
	<citation>2182	5	1959</citation>
	<citation>2534	5	1959</citation>
	<citation>830	6	1959</citation>
	<citation>1787	6	1959</citation>
	<citation>1959	6	1959</citation>
	<citation>1959	6	1959</citation>
	<citation>1973	6	1959</citation>
	<citation>2111	6	1959</citation>
	<citation>2182	6	1959</citation>
	<citation>799	6	1959</citation>
	</citations>
	</document>
	<document id= '1958'>
	<title>Improving Round-off in Runge-Kutta Computations with Gill's Method</title>
	<abstract>A Runge-Kutta-Gill scheme in common use is based on an incomplete adaptation for floating point operations of Gill's method.  An improved version reduces round-off error significantly.  In this note the heart of the scheme is presented in Fortran language.  It is then shown how an improved version of the method can be obtained with the addition of two Fortran statements.  The two version is a significant improvement.  A numerical example comparing the two is included.</abstract>
	<conference>CACM December, 1970</conference>
	<authors>
	<author>Thompson, R. J.</author>
	</authors>
	<keywords>Runge-Kutta methods, ordinary differential equations, round-off error, error analysis</keywords>
	<version>5.11 5.17</version>
	<location>CA701205 JB February 9, 1978  3:40 PM</location>
	<citations>
	<citation>1958	5	1958</citation>
	<citation>1958	5	1958</citation>
	<citation>1958	5	1958</citation>
	</citations>
	</document>
	<document id= '1957'>
	<title>The List Set Generator: A Construct for Evaluating Set Expressions</title>
	<abstract>The list set generator is defined and algorithms for its use are given.  The list set generator is a construct which may be added to a list processing system or any system that handles sets.  It efficiently generates the set which results from any expression involving sets and set operators.  The efficiency derives from evaluating the expression as a whole and in parallel, rather than evaluating subexpressions and then using those sets to arrive at the final result.</abstract>
	<conference>CACM December, 1970</conference>
	<authors>
	<author>Shapiro, S. C.</author>
	</authors>
	<keywords>set manipulating, list processing, set generation, sets, lists, file processing</keywords>
	<version>3.73 3.74 4.22</version>
	<location>CA701206 JB February 9, 1978  3:23 PM</location>
	<citations>
	<citation>1024	4	1957</citation>
	<citation>1051	4	1957</citation>
	<citation>1098	4	1957</citation>
	<citation>1214	4	1957</citation>
	<citation>1380	4	1957</citation>
	<citation>1388	4	1957</citation>
	<citation>1393	4	1957</citation>
	<citation>1485	4	1957</citation>
	<citation>1487	4	1957</citation>
	<citation>1549	4	1957</citation>
	<citation>1570	4	1957</citation>
	<citation>1860	4	1957</citation>
	<citation>1878	4	1957</citation>
	<citation>1946	4	1957</citation>
	<citation>1957	4	1957</citation>
	<citation>1957	4	1957</citation>
	<citation>1957	4	1957</citation>
	<citation>2155	4	1957</citation>
	<citation>2151	4	1957</citation>
	<citation>2162	4	1957</citation>
	<citation>2168	4	1957</citation>
	<citation>2723	4	1957</citation>
	<citation>2857	4	1957</citation>
	<citation>3103	4	1957</citation>
	<citation>3112	4	1957</citation>
	<citation>3148	4	1957</citation>
	<citation>1389	5	1957</citation>
	<citation>1860	5	1957</citation>
	<citation>1957	5	1957</citation>
	<citation>1957	5	1957</citation>
	<citation>1957	5	1957</citation>
	<citation>731	5	1957</citation>
	</citations>
	</document>
	<document id= '1956'>
	<title>Optimum Merging from Mass Storage</title>
	<abstract>An algorithm is displayed which yields the merge orders such that the total read time, defined to be the sum of seek time plus data-transfer time, is minimized for a sort using mass storage. The analysis is parameterized in terms of the ratio of seek time to the time it takes to fill available core with records, and the file size in units of core lengths; and thus it can be applied to any conventional CPU/mass storage combination.  An explicit formula for total read time is derived, in terms of the parameters, which correlates very well with the total read time calculated using the optimum merge orders yielded by the algorithm.  The formula involves the roots of a simple  transcendental equation.  A short table of these roots is included.  Numerical results are graphically displayed for a wide range of the parameters.  It is found that the normalized read time for optimum merging on a given hardware configuration is proportional to the file length times the logarithm of the file length.</abstract>
	<conference>CACM December, 1970</conference>
	<authors>
	<author>Black, N. A.</author>
	</authors>
	<keywords>sorting, merging, optimum merging, mass storage, sort timing, drum-merging, access time</keywords>
	<version>3.37 4.49 5.31</version>
	<location>CA701207 JB February 9, 1978  3:18 PM</location>
	<citations>
	<citation>1956	4	1956</citation>
	<citation>2017	4	1956</citation>
	<citation>1956	5	1956</citation>
	<citation>1956	5	1956</citation>
	<citation>1956	5	1956</citation>
	<citation>854	5	1956</citation>
	</citations>
	</document>
	<document id= '1955'>
	<title>Characteristic Values and Associated Solutions of Mathieu's Differential Equation (Algorithm 352 $S22))</title>
	<conference>CACM December, 1970</conference>
	<authors>
	<author>Sale, A. H. J.</author>
	</authors>
	<keywords>Mathieu's differential equation, Mathieu function, characteristic value, periodic solution, radial solution</keywords>
	<version>5.12</version>
	<location>CA701208 JB February 9, 19783:10 PM</location>
	<citations>
	<citation>1613	4	1955</citation>
	<citation>1646	4	1955</citation>
	<citation>1900	4	1955</citation>
	<citation>1955	4	1955</citation>
	<citation>2025	4	1955</citation>
	<citation>2154	4	1955</citation>
	<citation>2365	4	1955</citation>
	<citation>2506	4	1955</citation>
	<citation>3060	4	1955</citation>
	<citation>987	5	1955</citation>
	<citation>1955	5	1955</citation>
	<citation>1955	5	1955</citation>
	<citation>1955	5	1955</citation>
	<citation>2653	5	1955</citation>
	<citation>2654	5	1955</citation>
	<citation>1955	6	1955</citation>
	<citation>1955	6	1955</citation>
	</citations>
	</document>
	<document id= '1954'>
	<title>Eigenvalues and Eigenvectors of a Real Symmetric Matrix (Algorithm 384 $F2))</title>
	<conference>CACM December, 1970</conference>
	<authors>
	<author>Stewart, G. W.</author>
	</authors>
	<keywords>real symmetric matrix, eigenvalues, eigenvectors, QR algorithm</keywords>
	<version>5.14</version>
	<location>CA701209 JB February 9, 1978  3:08 PM</location>
	<citations>
	<citation>1954	5	1954</citation>
	<citation>1954	5	1954</citation>
	<citation>1954	5	1954</citation>
	</citations>
	</document>
	<document id= '1953'>
	<title>Exponential Integral Ei(x) (Algorithms 385 $S13))</title>
	<conference>CACM December, 1970</conference>
	<authors>
	<author>Redish, K. A.</author>
	</authors>
	<keywords>ANSI Fortran standard</keywords>
	<version>4.0 4.22</version>
	<location>CA701210 JB February 9, 1978  3:04 PM</location>
	<citations>
	<citation>1953	5	1953</citation>
	<citation>1953	5	1953</citation>
	<citation>1953	5	1953</citation>
	</citations>
	</document>
	<document id= '1952'>
	<citations>
	<citation>1952	5	1952</citation>
	<citation>1952	5	1952</citation>
	<citation>1952	5	1952</citation>
	</citations>
	<title>Index by Subject to Algorithms, 1970</title>
	<conference>CACM December, 1970</conference>
	<location>CA701211 JB February 9, 1978  2:50 PM</location>
	</document>
	<document id= '1951'>
	<title>Estimates of Distributions of Random Variables for Certain Computer Communications Traffic Models</title>
	<abstract>A study of multiaccess computer communications has characterized the distributions underlying an elementary  model of the user-computer interactive process.  The model used is elementary in the sense that many of the random variables that generally are of interest in computer communications studies can be decomposed into the elements of this model.  Data were examined from four operational multiaccess systems, and the model is shown to be robust; that is each of the variables of the model has the same distribution independent of which of the four systems is being examined.  It is shown that the gamma distribution can be used to describe the discrete variables.  Approximations to the gamma distribution by the exponential distribution are discussed for the systems studied.</abstract>
	<conference>CACM December 1970</conference>
	<authors>
	<author>Fuchs, E.</author>
	<author>Jackson, P. E.</author>
	</authors>
	<keywords>computer communications, time-sharing, operating systems, optimization models</keywords>
	<version>3.80 3.81 6.20</version>
	<location>CA701212 JB February 9, 1978  2:46 PM</location>
	<citations>
	<citation>1533	4	1951</citation>
	<citation>1604	4	1951</citation>
	<citation>1951	4	1951</citation>
	<citation>1951	4	1951</citation>
	<citation>2373	4	1951</citation>
	<citation>2667	4	1951</citation>
	<citation>2668	4	1951</citation>
	<citation>1410	5	1951</citation>
	<citation>1604	5	1951</citation>
	<citation>1951	5	1951</citation>
	<citation>1951	5	1951</citation>
	<citation>1951	5	1951</citation>
	<citation>2373	5	1951</citation>
	<citation>2894	5	1951</citation>
	<citation>1410	6	1951</citation>
	<citation>1751	6	1951</citation>
	<citation>1810	6	1951</citation>
	<citation>1951	6	1951</citation>
	<citation>1951	6	1951</citation>
	<citation>2016	6	1951</citation>
	<citation>2374	6	1951</citation>
	</citations>
	</document>
	<document id= '1950'>
	<title>Efficient Handling of Binary Data</title>
	<conference>CACM December, 1970</conference>
	<authors>
	<author>Raduchel, W. J.</author>
	</authors>
	<keywords>binary variables, dummy variables, bit strings, cross-tabulations</keywords>
	<version>4.9</version>
	<location>CA701214 JB February 9, 1978  2:40 PM</location>
	<citations>
	<citation>1950	5	1950</citation>
	<citation>1950	5	1950</citation>
	<citation>1950	5	1950</citation>
	</citations>
	</document>
	<document id= '1949'>
	<title>Finiteness Assumptions and Intellectual Isolation of Computer Scientists</title>
	<conference>CACM December, 1970</conference>
	<authors>
	<author>Wagner, R. A.</author>
	</authors>
	<keywords>Algol vs. Fortran, finiteness assumptions, intellectual isolation, integer variable range, memory finiteness, finite word size</keywords>
	<version>2.2 4.22 5.23</version>
	<location>CA701215 JB February 9, 1978  2:38 PM</location>
	<citations>
	<citation>249	4	1949</citation>
	<citation>254	4	1949</citation>
	<citation>272	4	1949</citation>
	<citation>1102	4	1949</citation>
	<citation>1109	4	1949</citation>
	<citation>1140	4	1949</citation>
	<citation>1188	4	1949</citation>
	<citation>1306	4	1949</citation>
	<citation>1464	4	1949</citation>
	<citation>1491	4	1949</citation>
	<citation>1767	4	1949</citation>
	<citation>1781	4	1949</citation>
	<citation>1787	4	1949</citation>
	<citation>1949	4	1949</citation>
	<citation>1949	4	1949</citation>
	<citation>321	4	1949</citation>
	<citation>2059	4	1949</citation>
	<citation>2126	4	1949</citation>
	<citation>435	4	1949</citation>
	<citation>437	4	1949</citation>
	<citation>463	4	1949</citation>
	<citation>483	4	1949</citation>
	<citation>491	4	1949</citation>
	<citation>2732	4	1949</citation>
	<citation>560	4	1949</citation>
	<citation>583	4	1949</citation>
	<citation>3073	4	1949</citation>
	<citation>627	4	1949</citation>
	<citation>631	4	1949</citation>
	<citation>632	4	1949</citation>
	<citation>642	4	1949</citation>
	<citation>644	4	1949</citation>
	<citation>653	4	1949</citation>
	<citation>680	4	1949</citation>
	<citation>761	4	1949</citation>
	<citation>762	4	1949</citation>
	<citation>763	4	1949</citation>
	<citation>123	4	1949</citation>
	<citation>140	4	1949</citation>
	<citation>919	4	1949</citation>
	<citation>989	4	1949</citation>
	<citation>196	5	1949</citation>
	<citation>946	5	1949</citation>
	<citation>1949	5	1949</citation>
	<citation>1949	5	1949</citation>
	<citation>1949	5	1949</citation>
	</citations>
	</document>
	<document id= '1948'>
	<title>Computers in Group Theory: a Survey</title>
	<abstract>Computers are being applied to an increasingly diverse range of problems in group theory.   The most important areas of application at present are coset enumeration, subgroup lattices, automorphism  groups of finite groups, character tables, and commutator calculus.  Group theory programs range from  simple combinatorial or numerical programs to large symbol manipulation systems.  In this survey the  more important algorithms in use are described and contrasted, and results which have been obtained using  existing programs are indicated.  An extensive bibliography is included.</abstract>
	<conference>CACM January, 1969</conference>
	<authors>
	<author>Cannon, J. J.</author>
	</authors>
	<keywords>group theory, coset enumeration, subgroup lattices, automorphism groups, character tables, commutator  calculus, topology, crystallography, permutation groups, Abelian groups, discrete mathematics, non-numerical  programming, symbol manipulation, survey</keywords>
	<version>1.3 3.15 5.39</version>
	<location>CA690101 JB February 20, 1978  1:27 PM</location>
	<citations>
	<citation>1567	4	1948</citation>
	<citation>1948	4	1948</citation>
	<citation>1948	4	1948</citation>
	<citation>1391	5	1948</citation>
	<citation>1559	5	1948</citation>
	<citation>1948	5	1948</citation>
	<citation>1948	5	1948</citation>
	<citation>1948	5	1948</citation>
	</citations>
	</document>
	<document id= '1947'>
	<title>Object code Optimization</title>
	<abstract>Methods of analyzing the control flow and data flow of programs during compilation are applied  to transforming the program to improve object time efficiency.  Dominance relationships, indicating which  statements are necessarily executed before others, are used to do global common expression elimination  and loop identification.  Implementation of these and other optimizations in OS/360 FORTRAN H are described.</abstract>
	<conference>CACM January, 1969</conference>
	<authors>
	<author>Lowry, E. S.</author>
	<author>Medlock, C. W.</author>
	</authors>
	<keywords>compilers, data flow analysis, dominance, efficiency, FORTRAN,  graph theory, loop structure, machine  instructions, object code, optimization, redundancy elimination, register assignment, System/360</keywords>
	<version>4.12 5.24 5.32</version>
	<location>CA690102 JB February 20, 1978  12:15 PM</location>
	<citations>
	<citation>1139	4	1947</citation>
	<citation>1613	4	1947</citation>
	<citation>1625	4	1947</citation>
	<citation>1781	4	1947</citation>
	<citation>1807	4	1947</citation>
	<citation>1807	4	1947</citation>
	<citation>1945	4	1947</citation>
	<citation>1947	4	1947</citation>
	<citation>1947	4	1947</citation>
	<citation>1947	4	1947</citation>
	<citation>1947	4	1947</citation>
	<citation>556	4	1947</citation>
	<citation>799	4	1947</citation>
	<citation>1134	5	1947</citation>
	<citation>1223	5	1947</citation>
	<citation>1248	5	1947</citation>
	<citation>1807	5	1947</citation>
	<citation>1947	5	1947</citation>
	<citation>1947	5	1947</citation>
	<citation>1947	5	1947</citation>
	<citation>399	5	1947</citation>
	<citation>2034	5	1947</citation>
	<citation>2290	5	1947</citation>
	<citation>2579	5	1947</citation>
	<citation>2923	5	1947</citation>
	<citation>2945	5	1947</citation>
	<citation>984	6	1947</citation>
	<citation>1223	6	1947</citation>
	<citation>1231	6	1947</citation>
	<citation>1248	6	1947</citation>
	<citation>1535	6	1947</citation>
	<citation>1551	6	1947</citation>
	<citation>1565	6	1947</citation>
	<citation>1807	6	1947</citation>
	<citation>1807	6	1947</citation>
	<citation>1852	6	1947</citation>
	<citation>1926	6	1947</citation>
	<citation>1947	6	1947</citation>
	<citation>1947	6	1947</citation>
	<citation>1947	6	1947</citation>
	<citation>1947	6	1947</citation>
	<citation>1947	6	1947</citation>
	<citation>1947	6	1947</citation>
	<citation>2704	6	1947</citation>
	<citation>2870	6	1947</citation>
	</citations>
	</document>
	<document id= '1946'>
	<title>Computing Polynomial Resultants: Bezout's Determinant vs. Collins' Reduced P.R.S. Algorithm</title>
	<abstract>Algorithms for computing the resultant of two polynomials in several variables, a key repetitive  step of computation in solving systems of polynomial equations by elimination, are studied.  Determining  the best algorithm for computer implementation depends upon the extent to which extraneous factors are  introduced, the extent of propagation of errors caused by truncation of real coefficients, memory requirements,  and computing speed.  Preliminary considerations narrow the choice of the best algorithm to Bezout's  determinant and Collins' reduced polynomial remainder sequence (p.r.s.) algorithm.  Detailed tests performed  on sample problems conclusively show that Bezout's determinant is superior in all respects except for  univariate polynomials, in which case Collins' reduced p.r.s. algorithm is somewhat faster.  In particular  Bezout's determinant proves to be strikingly superior in numerical accuracy, displaying excellent stability  with regard to round-off errors. Results of tests are reported in detail.</abstract>
	<conference>CACM January, 1969</conference>
	<authors>
	<author>Ku, S. Y.</author>
	<author>Adler, R. J.</author>
	</authors>
	<keywords>resultant algorithm, g.c.d. algorithm, polynomial resultant, elimination, Bezout's determinant,  Sylvester's determinant, reduced p.r.s. algorithm, Euclidean algorithm, multivariate polynomial equations</keywords>
	<version>4.40 5.10 5.15 5.41</version>
	<location>CA690103 JB February 20, 1978  12:10 PM</location>
	<citations>
	<citation>1024	4	1946</citation>
	<citation>1051	4	1946</citation>
	<citation>1098	4	1946</citation>
	<citation>1214	4	1946</citation>
	<citation>1380	4	1946</citation>
	<citation>1388	4	1946</citation>
	<citation>1393	4	1946</citation>
	<citation>1396	4	1946</citation>
	<citation>1396	4	1946</citation>
	<citation>1485	4	1946</citation>
	<citation>1487	4	1946</citation>
	<citation>1549	4	1946</citation>
	<citation>1570	4	1946</citation>
	<citation>1878	4	1946</citation>
	<citation>1931	4	1946</citation>
	<citation>1946	4	1946</citation>
	<citation>1946	4	1946</citation>
	<citation>1946	4	1946</citation>
	<citation>1946	4	1946</citation>
	<citation>1946	4	1946</citation>
	<citation>1946	4	1946</citation>
	<citation>1946	4	1946</citation>
	<citation>1946	4	1946</citation>
	<citation>1957	4	1946</citation>
	<citation>2167	4	1946</citation>
	<citation>2168	4	1946</citation>
	<citation>2723	4	1946</citation>
	<citation>2857	4	1946</citation>
	<citation>2857	4	1946</citation>
	<citation>3112	4	1946</citation>
	<citation>902	5	1946</citation>
	<citation>1093	5	1946</citation>
	<citation>1177	5	1946</citation>
	<citation>1393	5	1946</citation>
	<citation>1387	5	1946</citation>
	<citation>1946	5	1946</citation>
	<citation>1946	5	1946</citation>
	<citation>1946	5	1946</citation>
	<citation>360	5	1946</citation>
	<citation>731	5	1946</citation>
	<citation>878	5	1946</citation>
	</citations>
	</document>
	<document id= '1945'>
	<title>The Role of Programming in a Ph.D. Computer Science Program</title>
	<abstract>In this general paper the role of programming in advanced graduate training is discussed.   Subject matter related to programming as well as programming per se is considered.  The  importance and  application of formalism are considered and also the need for good empirical experimentation.  A brief  outline for a sequence of courses is included, and subject headings that have been obtained from an extensive  bibliography are given.  A bibliography of programming references is included.</abstract>
	<conference>CACM January, 1969</conference>
	<authors>
	<author>Arden, B. W.</author>
	</authors>
	<keywords>graduate-level programming, graduate programs, course content, course sequence, graduate curriculum,  programming research topics, programming bibliography</keywords>
	<version>1.3 1.52 4.0</version>
	<location>CA690104 JB February 20, 1978  12:00 PM</location>
	<citations>
	<citation>1068	4	1945</citation>
	<citation>1084	4	1945</citation>
	<citation>1102	4	1945</citation>
	<citation>1142	4	1945</citation>
	<citation>1215	4	1945</citation>
	<citation>1225	4	1945</citation>
	<citation>1225	4	1945</citation>
	<citation>1247	4	1945</citation>
	<citation>1263	4	1945</citation>
	<citation>1350	4	1945</citation>
	<citation>1350	4	1945</citation>
	<citation>1350	4	1945</citation>
	<citation>1379	4	1945</citation>
	<citation>1379	4	1945</citation>
	<citation>1396	4	1945</citation>
	<citation>1396	4	1945</citation>
	<citation>1399	4	1945</citation>
	<citation>1400	4	1945</citation>
	<citation>1453	4	1945</citation>
	<citation>1496	4	1945</citation>
	<citation>1530	4	1945</citation>
	<citation>1531	4	1945</citation>
	<citation>1542	4	1945</citation>
	<citation>1551	4	1945</citation>
	<citation>1553	4	1945</citation>
	<citation>1565	4	1945</citation>
	<citation>1570	4	1945</citation>
	<citation>1612	4	1945</citation>
	<citation>1625	4	1945</citation>
	<citation>1646	4	1945</citation>
	<citation>1659	4	1945</citation>
	<citation>1683	4	1945</citation>
	<citation>1683	4	1945</citation>
	<citation>1693	4	1945</citation>
	<citation>1693	4	1945</citation>
	<citation>1703	4	1945</citation>
	<citation>1705	4	1945</citation>
	<citation>1767	4	1945</citation>
	<citation>1768	4	1945</citation>
	<citation>1768	4	1945</citation>
	<citation>1781	4	1945</citation>
	<citation>1781	4	1945</citation>
	<citation>1781	4	1945</citation>
	<citation>1781	4	1945</citation>
	<citation>1781	4	1945</citation>
	<citation>1781	4	1945</citation>
	<citation>1781	4	1945</citation>
	<citation>1781	4	1945</citation>
	<citation>1781	4	1945</citation>
	<citation>1781	4	1945</citation>
	<citation>1781	4	1945</citation>
	<citation>1787	4	1945</citation>
	<citation>1787	4	1945</citation>
	<citation>1787	4	1945</citation>
	<citation>1787	4	1945</citation>
	<citation>1807	4	1945</citation>
	<citation>1836	4	1945</citation>
	<citation>1836	4	1945</citation>
	<citation>1860	4	1945</citation>
	<citation>1945	4	1945</citation>
	<citation>1945	4	1945</citation>
	<citation>1945	4	1945</citation>
	<citation>1945	4	1945</citation>
	<citation>1945	4	1945</citation>
	<citation>1945	4	1945</citation>
	<citation>1945	4	1945</citation>
	<citation>1945	4	1945</citation>
	<citation>1945	4	1945</citation>
	<citation>1945	4	1945</citation>
	<citation>1945	4	1945</citation>
	<citation>1945	4	1945</citation>
	<citation>1945	4	1945</citation>
	<citation>1945	4	1945</citation>
	<citation>1945	4	1945</citation>
	<citation>1945	4	1945</citation>
	<citation>1945	4	1945</citation>
	<citation>1945	4	1945</citation>
	<citation>1945	4	1945</citation>
	<citation>1945	4	1945</citation>
	<citation>1945	4	1945</citation>
	<citation>1945	4	1945</citation>
	<citation>1945	4	1945</citation>
	<citation>1945	4	1945</citation>
	<citation>1945	4	1945</citation>
	<citation>1945	4	1945</citation>
	<citation>1945	4	1945</citation>
	<citation>1945	4	1945</citation>
	<citation>1945	4	1945</citation>
	<citation>1947	4	1945</citation>
	<citation>1988	4	1945</citation>
	<citation>2015	4	1945</citation>
	<citation>2034	4	1945</citation>
	<citation>2036	4	1945</citation>
	<citation>2060	4	1945</citation>
	<citation>2060	4	1945</citation>
	<citation>2061	4	1945</citation>
	<citation>2061	4	1945</citation>
	<citation>2061	4	1945</citation>
	<citation>2082	4	1945</citation>
	<citation>2091	4	1945</citation>
	<citation>2091	4	1945</citation>
	<citation>2110	4	1945</citation>
	<citation>2126	4	1945</citation>
	<citation>2127	4	1945</citation>
	<citation>2152	4	1945</citation>
	<citation>2179	4	1945</citation>
	<citation>2179	4	1945</citation>
	<citation>2252	4	1945</citation>
	<citation>2314	4	1945</citation>
	<citation>2341	4	1945</citation>
	<citation>2340	4	1945</citation>
	<citation>2356	4	1945</citation>
	<citation>2396	4	1945</citation>
	<citation>2546	4	1945</citation>
	<citation>2546	4	1945</citation>
	<citation>2603	4	1945</citation>
	<citation>2603	4	1945</citation>
	<citation>2650	4	1945</citation>
	<citation>2698	4	1945</citation>
	<citation>2698	4	1945</citation>
	<citation>2698	4	1945</citation>
	<citation>2708	4	1945</citation>
	<citation>2708	4	1945</citation>
	<citation>2708	4	1945</citation>
	<citation>2730	4	1945</citation>
	<citation>2824	4	1945</citation>
	<citation>2982	4	1945</citation>
	<citation>2986	4	1945</citation>
	<citation>3045	4	1945</citation>
	<citation>3045	4	1945</citation>
	<citation>3093	4	1945</citation>
	<citation>3093	4	1945</citation>
	<citation>3094	4	1945</citation>
	<citation>691	4	1945</citation>
	<citation>762	4	1945</citation>
	<citation>949	4	1945</citation>
	<citation>949	4	1945</citation>
	<citation>914	5	1945</citation>
	<citation>915	5	1945</citation>
	<citation>917	5	1945</citation>
	<citation>984	5	1945</citation>
	<citation>989	5	1945</citation>
	<citation>990	5	1945</citation>
	<citation>1012	5	1945</citation>
	<citation>1084	5	1945</citation>
	<citation>1098	5	1945</citation>
	<citation>1122	5	1945</citation>
	<citation>1138	5	1945</citation>
	<citation>1139	5	1945</citation>
	<citation>1141	5	1945</citation>
	<citation>1200	5	1945</citation>
	<citation>1223	5	1945</citation>
	<citation>1265	5	1945</citation>
	<citation>1336	5	1945</citation>
	<citation>1396	5	1945</citation>
	<citation>1455	5	1945</citation>
	<citation>1477	5	1945</citation>
	<citation>1487	5	1945</citation>
	<citation>1491	5	1945</citation>
	<citation>1496	5	1945</citation>
	<citation>1945	5	1945</citation>
	<citation>1945	5	1945</citation>
	<citation>1945	5	1945</citation>
	<citation>483	5	1945</citation>
	<citation>584	5	1945</citation>
	<citation>3003	5	1945</citation>
	<citation>669	5	1945</citation>
	<citation>680	5	1945</citation>
	<citation>763	5	1945</citation>
	<citation>823	5	1945</citation>
	<citation>1659	6	1945</citation>
	<citation>1678	6	1945</citation>
	<citation>1927	6	1945</citation>
	<citation>1945	6	1945</citation>
	<citation>2097	6	1945</citation>
	<citation>2147	6	1945</citation>
	<citation>2163	6	1945</citation>
	<citation>2187	6	1945</citation>
	<citation>2329	6	1945</citation>
	<citation>2345	6	1945</citation>
	<citation>2367	6	1945</citation>
	<citation>2407	6	1945</citation>
	<citation>2478	6	1945</citation>
	<citation>2479	6	1945</citation>
	<citation>2480	6	1945</citation>
	<citation>2538	6	1945</citation>
	</citations>
	</document>
	<document id= '1944'>
	<title>Student's t-Distribution (Algorithm 344 [S14])</title>
	<conference>CACM January, 1969</conference>
	<authors>
	<author>Levine, D. A.</author>
	</authors>
	<keywords>Student's t-Distribution, t-test, small-sample statistics, distribution function</keywords>
	<version>5.12 5.5</version>
	<location>CA690105 JB February 20, 1978  11:56 AM</location>
	<citations>
	<citation>1157	4	1944</citation>
	<citation>1779	4	1944</citation>
	<citation>1920	4	1944</citation>
	<citation>1944	4	1944</citation>
	<citation>1944	4	1944</citation>
	<citation>1987	4	1944</citation>
	<citation>1987	4	1944</citation>
	<citation>2548	4	1944</citation>
	<citation>1779	5	1944</citation>
	<citation>1944	5	1944</citation>
	<citation>1944	5	1944</citation>
	<citation>1944	5	1944</citation>
	<citation>1987	5	1944</citation>
	<citation>714	5	1944</citation>
	<citation>1561	6	1944</citation>
	<citation>1581	6	1944</citation>
	<citation>1779	6	1944</citation>
	<citation>1944	6	1944</citation>
	<citation>714	6	1944</citation>
	</citations>
	</document>
	<document id= '1943'>
	<title>Complete Elliptic Integrals (Algorithm 165 [S21])</title>
	<conference>CACM January,1969</conference>
	<authors>
	<author>Farkas, I.</author>
	</authors>
	<keywords>special functions, complete elliptic integral of the first kind, complete elliptic integral of  the second kind</keywords>
	<version>5.12</version>
	<location>CA690106 JB February 20, 1978  11:54 AM</location>
	<citations>
	<citation>1943	5	1943</citation>
	<citation>1943	5	1943</citation>
	<citation>1943	5	1943</citation>
	</citations>
	</document>
	<document id= '1942'>
	<title>Finding a Solution of N Functional Equations in N Unknowns (Algorithm 314 [C5])</title>
	<conference>CACM January, 1969</conference>
	<authors>
	<author>Vandergraft, J.</author>
	<author>Mesztenyi, C.</author>
	</authors>
	<keywords>functional equations, interpolation, nonlinear equations, secant method</keywords>
	<version>5.13 5.15</version>
	<location>CA690107 JB February 20, 1978  11:50 AM</location>
	<citations>
	<citation>1942	5	1942</citation>
	<citation>1942	5	1942</citation>
	<citation>1942	5	1942</citation>
	</citations>
	</document>
	<document id= '1941'>
	<title>F-Distribution (Algorithm 322 [S14])</title>
	<conference>CACM January, 1969</conference>
	<authors>
	<author>Field, J. B. F.</author>
	</authors>
	<keywords>Fisher's F-distribution, Students's t-distribution</keywords>
	<version>5.5</version>
	<location>CA690108 JB February 20, 1978  11:48 AM</location>
	<citations>
	<citation>1941	5	1941</citation>
	<citation>1941	5	1941</citation>
	<citation>1941	5	1941</citation>
	</citations>
	</document>
	<document id= '1940'>
	<title>Calculation of a Polynomial and its Derivative Values by Horner Scheme (Algorithm 337 [C1])</title>
	<conference>CACM January, 1969</conference>
	<authors>
	<author>Smith, O. K.</author>
	</authors>
	<keywords>function, evaluation, polynomial evaluation, ALGOL procedure, Horner's scheme</keywords>
	<version>4.22 5.12</version>
	<location>CA690109 JB February 20, 1978  11:46 AM</location>
	<citations>
	<citation>1940	5	1940</citation>
	<citation>1940	5	1940</citation>
	<citation>1940	5	1940</citation>
	</citations>
	</document>
	<document id= '1939'>
	<title>Directed Random Generation of Sentences</title>
	<abstract>The problem of producing sentences of a transformational grammar by using a random generator  to create phrase structure trees for input to the lexical insertion and transformational phases is discussed.   A purely random generator will produce base trees which will be blocked by the transformations, and  which are frequently too long to be of practical interest.  A solution is offered in the form of a computer  program which allows the user to constrain and direct the generation by the simple but powerful device  of restricted subtrees.  The program is a directed random generator which accepts as input a subtree  with restrictions and produces around it a tree which satisfies the restrictions and is ready for the  next phase of the grammar.  The underlying linguistic model is that at Noam Chomsky, as presented in  Aspects of the Theory of Syntax.  The program is written in FORTRAN IV for the IBM 360/67 and is part of a unified computer system for transformational grammar.  It is currently being used with several partial  grammars of English.</abstract>
	<conference>CACM January, 1969</conference>
	<authors>
	<author>Friedman, J.</author>
	</authors>
	<keywords>transformational grammar, natural language syntax, language processing, sentence generation, computational  linguistics, syntax</keywords>
	<version>3.42</version>
	<location>CA690110 JB February 20, 1978  11:44 AM</location>
	<citations>
	<citation>1030	4	1939</citation>
	<citation>1261	4	1939</citation>
	<citation>1886	4	1939</citation>
	<citation>1939	4	1939</citation>
	<citation>1939	4	1939</citation>
	<citation>1030	5	1939</citation>
	<citation>1939	5	1939</citation>
	<citation>1939	5	1939</citation>
	<citation>1939	5	1939</citation>
	<citation>2767	5	1939</citation>
	<citation>3064	5	1939</citation>
	<citation>678	5	1939</citation>
	<citation>1846	6	1939</citation>
	<citation>1939	6	1939</citation>
	<citation>1939	6	1939</citation>
	<citation>2742	6	1939</citation>
	<citation>2767	6	1939</citation>
	<citation>2936	6	1939</citation>
	</citations>
	</document>
	<document id= '1938'>
	<title>Some Criteria for Time-Sharing System Performance</title>
	<abstract>Time-sharing systems, as defined in this article, are those multiaccess systems which permit  a terminal user to utilize essentially the full resources of the system while sharing its time with other  terminal users.  It is each terminal user's ability to utilize the full resources of the system that  makes quantitative evaluation of time-sharing systems particularly difficult.  Six criteria are described  which have been successfully used to perform first-level quantitative time-sharing system performance  evaluation.</abstract>
	<conference>CACM January, 1969</conference>
	<authors>
	<author>Stimler, S.</author>
	</authors>
	<keywords>time-sharing performance criteria, time-sharing system operation, time-sharing performance analysis</keywords>
	<version>2.40 4.30 4.32 6.20</version>
	<location>CA690111 JB February 20, 1978  11:37 AM</location>
	<citations>
	<citation>1938	5	1938</citation>
	<citation>1938	5	1938</citation>
	<citation>1938	5	1938</citation>
	<citation>2219	5	1938</citation>
	<citation>2344	5	1938</citation>
	<citation>1938	6	1938</citation>
	<citation>1938	6	1938</citation>
	</citations>
	</document>
	<document id= '1937'>
	<title>CODAS: A Data Display System</title>
	<abstract>CODAS, a Customer Oriented Data System, is a user-oriented data retrieval and display system.   The command language of the system provides the user with an easy means for specifying data retrieval  and display requests.  Data is displayed as tables and graphs produced in a format ready for publication.   In this paper the statements of the request language and the general system design are described.</abstract>
	<conference>CACM February, 1969</conference>
	<authors>
	<author>Day, R. H.</author>
	<author>Mansfield, M. K.</author>
	<author>Ellis, M. E.</author>
	</authors>
	<keywords>data display, information retrieval, graphic display, command languages, report program generation,  management data processing</keywords>
	<version>3.50 3.51 3.59 3.70 3.75 3.79 4.20 4.29</version>
	<location>CA690201 JB February 20, 1978  11:32 AM</location>
	<citations>
	<citation>1937	5	1937</citation>
	<citation>1937	5	1937</citation>
	<citation>1937	5	1937</citation>
	<citation>2002	5	1937</citation>
	<citation>1767	6	1937</citation>
	<citation>1937	6	1937</citation>
	</citations>
	</document>
	<document id= '1936'>
	<title>Variable Length Tree Structures Having Minimum Average Search Time</title>
	<abstract>Sussenguth suggests in a paper (1963) that a file should be organized as a doubly-chained tree  structure if it is necessary both to search and to update frequently.  Such a structure provides a compromise  between the fast search/slow update characteristics of binary searching and the slow search/fast update  characteristics of serial searching.  His method, however, contains the limiting restriction that all  terminal nodes lie on the same level of the tree.  This paper considers the effect of relaxing this restriction.   First, trees which have the property that a priori the filial set of each node is well defined are studied.   It is proved that coding the nodes within each filial set with respect to the number of terminal nodes  reachable from each is necessary and sufficient to guarantee minimum average search time.  Then the more  general case (that is, where the entire structure of the tree is changeable) is treated.  A procedure  is developed for constructing a tree with a minimum average search time.  A simple closed expression  for this minimum average search time is obtained as a function of the number of terminal nodes.  The  storage capacity required to implement the doubly-chained tree structure on a digital computer is also  determined.  Finally, the total cost of the structure, using Sussenguth's cost criterion, is computed.   It is shown that significant improvements in both the average search time and the total cost can be  obtained by relaxing Sussenguth's restriction that all terminal nodes lie on the same level of the tree.</abstract>
	<conference>CACM February, 1969</conference>
	<authors>
	<author>Patt, Y. N.</author>
	</authors>
	<keywords>information retrieval, file searching, tree structures, double chaining</keywords>
	<version>3.70 3.73 3.74</version>
	<location>CA690202 JB February 20, 1978  11:25 AM</location>
	<citations>
	<citation>1050	4	1936</citation>
	<citation>1935	4	1936</citation>
	<citation>1936	4	1936</citation>
	<citation>2017	4	1936</citation>
	<citation>2032	4	1936</citation>
	<citation>2257	4	1936</citation>
	<citation>2360	4	1936</citation>
	<citation>2451	4	1936</citation>
	<citation>2452	4	1936</citation>
	<citation>1936	5	1936</citation>
	<citation>1936	5	1936</citation>
	<citation>1936	5	1936</citation>
	<citation>2257	5	1936</citation>
	<citation>2360	5	1936</citation>
	<citation>2451	5	1936</citation>
	<citation>2452	5	1936</citation>
	<citation>2556	5	1936</citation>
	<citation>2765	5	1936</citation>
	<citation>849	5	1936</citation>
	<citation>830	6	1936</citation>
	<citation>849	6	1936</citation>
	<citation>849	6	1936</citation>
	<citation>849	6	1936</citation>
	<citation>849	6	1936</citation>
	<citation>944	6	1936</citation>
	<citation>1831	6	1936</citation>
	<citation>1831	6	1936</citation>
	<citation>1935	6	1936</citation>
	<citation>1935	6	1936</citation>
	<citation>1936	6	1936</citation>
	<citation>1936	6	1936</citation>
	<citation>1936	6	1936</citation>
	<citation>1936	6	1936</citation>
	<citation>1936	6	1936</citation>
	<citation>1936	6	1936</citation>
	<citation>1976	6	1936</citation>
	<citation>1976	6	1936</citation>
	<citation>2046	6	1936</citation>
	<citation>2111	6	1936</citation>
	<citation>2198	6	1936</citation>
	<citation>2360	6	1936</citation>
	<citation>2451	6	1936</citation>
	<citation>2452	6	1936</citation>
	<citation>616	6	1936</citation>
	</citations>
	</document>
	<document id= '1935'>
	<title>Randomized Binary Search Technique</title>
	<abstract>A mathematical model is developed for the mean and variance of the number of trials to recover  a given document in a randomly received list of files.  The search method described is binary in nature  and offers new potential for information retrieval systems.</abstract>
	<conference>CACM February, 1969</conference>
	<authors>
	<author>Arora, S. R.</author>
	<author>Dent, W. T.</author>
	</authors>
	<keywords>binary pattern, file examination, graph theory, information retrieval, mathematical model, partitioning,  probabilistic method, random sequencing, search techniques, tree structures</keywords>
	<version>3.74 5.32</version>
	<location>CA690203 JB February 20, 1978  11:15 AM</location>
	<citations>
	<citation>1050	4	1935</citation>
	<citation>1935	4	1935</citation>
	<citation>1935	4	1935</citation>
	<citation>1936	4	1935</citation>
	<citation>2017	4	1935</citation>
	<citation>2032	4	1935</citation>
	<citation>2257	4	1935</citation>
	<citation>2360	4	1935</citation>
	<citation>2451	4	1935</citation>
	<citation>2452	4	1935</citation>
	<citation>1115	5	1935</citation>
	<citation>1935	5	1935</citation>
	<citation>1935	5	1935</citation>
	<citation>1935	5	1935</citation>
	<citation>2451	5	1935</citation>
	<citation>2556	5	1935</citation>
	<citation>2978	5	1935</citation>
	<citation>849	5	1935</citation>
	<citation>830	6	1935</citation>
	<citation>849	6	1935</citation>
	<citation>944	6	1935</citation>
	<citation>1935	6	1935</citation>
	<citation>1935	6	1935</citation>
	<citation>1935	6	1935</citation>
	<citation>1936	6	1935</citation>
	<citation>1936	6	1935</citation>
	<citation>2111	6	1935</citation>
	</citations>
	</document>
	<document id= '1934'>
	<title>On Arithmetic Expressions and Trees</title>
	<abstract>A description is given of how a tree representing the evaluation of an arithmetic expression  can be drawn in such a way that the number of accumulators needed for the computation can be represented  in a straightforward manner.  This representation reduces the choice of the best order of computation  to a specific problem under the theory of graphs.  An algorithm to solve this problem is presented.</abstract>
	<conference>CACM February, 1969</conference>
	<authors>
	<author>Redziejowski, R. R.</author>
	</authors>
	<keywords>arithmetic expression, compiler design, graph theory, programming, storage minimization, topological  ordering,tree</keywords>
	<version>4.12 5.32</version>
	<location>CA690204 JB February 20, 1978  11:11 AM</location>
	<citations>
	<citation>1807	4	1934</citation>
	<citation>1934	4	1934</citation>
	<citation>2175	4	1934</citation>
	<citation>1551	5	1934</citation>
	<citation>1934	5	1934</citation>
	<citation>1934	5	1934</citation>
	<citation>1934	5	1934</citation>
	</citations>
	</document>
	<document id= '1933'>
	<title>Coding the Lehmer Pseudo-random Number Generator</title>
	<abstract>An algorithm and coding technique is presented for quick evaluation of the Lehmer pseudo-random  number generator modulo 2**31 - 1, a prime Mersenne number with produces 2**31 - 2 numbers, on a p-bit  (greater than 31) computer.  The computation method is extendible to limited problems in modular arithmetic.   Prime factorization for 2**61 - 2 and a primitive root for 2**61 - 1, the next largest prime Mersenne  number, are given for possible construction of a pseudo-random number generator of increased cycle length.</abstract>
	<conference>CACM February, 1969</conference>
	<authors>
	<author>Payne, W. H.</author>
	<author>Rabung, J. R.</author>
	<author>Bogyo, T. P.</author>
	</authors>
	<keywords>pseudo-random number, random number, modular arithmetic, uniform probability density, uniform frequency  function, simulation, prime factorization, primitive roots</keywords>
	<location>CA690205 JB February 20, 1978  11:07 AM</location>
	<citations>
	<citation>1933	5	1933</citation>
	<citation>1933	5	1933</citation>
	<citation>1933	5	1933</citation>
	</citations>
	</document>
	<document id= '1932'>
	<title>The Logarithmic Error and Newton's Method for the Square Root</title>
	<abstract>The problem of obtaining optimal starting values for the calculation of the square root using  Newton's method is considered.  It has been pointed out elsewhere that if relative error is used as the  measure of goodness of fit, optimal results are not obtained when the initial approximation is a best  fit.  It is shown here that if, instead, the so-called logarithmic error is used, then a best initial  fit is optimal for both types of error.  Moreover, use of the logarithmic error appears to simplify the  problem of determining the optimal initial approximation.</abstract>
	<conference>CACM February, 1969</conference>
	<authors>
	<author>King, R. F.</author>
	<author>Phillips, D. L.</author>
	</authors>
	<keywords>square root, Newton's method, relative error, logarithmic error, best fit, optimal approximation,  maximal error, recurrence relation, integer root, error curve</keywords>
	<version>5.12 5.13</version>
	<location>CA690206 JB February 20, 1978  10:55 AM</location>
	<citations>
	<citation>1440	4	1932</citation>
	<citation>1932	4	1932</citation>
	<citation>1932	4	1932</citation>
	<citation>2094	4	1932</citation>
	<citation>2159	4	1932</citation>
	<citation>962	5	1932</citation>
	<citation>1566	5	1932</citation>
	<citation>1832	5	1932</citation>
	<citation>1932	5	1932</citation>
	<citation>1932	5	1932</citation>
	<citation>1932	5	1932</citation>
	<citation>1999	5	1932</citation>
	<citation>2159	5	1932</citation>
	<citation>962	6	1932</citation>
	<citation>1932	6	1932</citation>
	<citation>1932	6	1932</citation>
	<citation>1932	6	1932</citation>
	</citations>
	</document>
	<document id= '1931'>
	<title>Interval Arithmetic Determinant Evaluation and Its Use in Testing for a Chebyshev System</title>
	<abstract>Two recent papers, one by Hansen and one by Hansen and R. R. Smith, have shown how Interval  Arithmetic (I.A.) can be used effectively to bound errors in matrix computations.  In the present paper  a method proposed by Hasen and R. R. Smith is compared with straightforward use of I.A. in determinant  evaluation.  Computational results show the accuracy and running times that can be expected when using  I.A. for determinant evaluation.  An application using I.A. determinants in a program to test a set of  functions to see if they form a Chebyshev system is then presented.</abstract>
	<conference>CACM February, 1969</conference>
	<authors>
	<author>Smith, L. B.</author>
	</authors>
	<keywords>interval arithmetic, range arithmetic, error bounds, determinant evaluation, Chebyshev system,  mathematical proof by computer</keywords>
	<version>5.11 5.13 5.14</version>
	<location>CA690207 JB February 20, 1978  10:49 AM</location>
	<citations>
	<citation>1524	4	1931</citation>
	<citation>1931	4	1931</citation>
	<citation>1931	4	1931</citation>
	<citation>1946	4	1931</citation>
	<citation>2214	4	1931</citation>
	<citation>2544	4	1931</citation>
	<citation>1177	5	1931</citation>
	<citation>1931	5	1931</citation>
	<citation>1931	5	1931</citation>
	<citation>1931	5	1931</citation>
	<citation>311	5	1931</citation>
	</citations>
	</document>
	<document id= '1930'>
	<title>Extremely Portable Random Number Generator</title>
	<abstract>Extremely portable subroutines are sometimes needed for which moderate quality and efficiency  suffice.  Typically, this occurs for library functions (like random number generation and in core sorting)  which are not entirely universal or are not used in a standardized way.  The literature on random number  generators does not seem to contain an algorithm that meets requirements of this sort.  An extremely  portable 8-line FORTRAN program is provided which based on an important paper by Coveyou and MacPherson  (1967).Using their methods, Fourier analysis is applied to the probability function for the consecutive  n-tuples provided by our generator (with n less than or equal to 4).  While the small modulus which must  be used to maintain portability prevents the quality of the generator from being high, the generator  compares well with the bounds established in the above mentioned paper.</abstract>
	<conference>CACM February, 1969</conference>
	<authors>
	<author>Kruskal, J. B.</author>
	</authors>
	<keywords>random number generators, random numbers, random number analysis, random generators, linear sequential  generators, random number program, pseudo random numbers</keywords>
	<version>4.49 5.19 5.5</version>
	<location>CA690208 JB February 20, 1978  10:43 AM</location>
	<citations>
	<citation>1930	5	1930</citation>
	<citation>1930	5	1930</citation>
	<citation>1930	5	1930</citation>
	<citation>2115	5	1930</citation>
	<citation>1691	6	1930</citation>
	<citation>1930	6	1930</citation>
	</citations>
	</document>
	<document id= '1929'>
	<title>Images from Computers and Microfilm Plotters</title>
	<abstract>Digital computers are widely used for the processing of information and data of all kinds,  including the pictorial information contained in photographs and other graphical representations.  Efficient  conversion facilities for putting graphical information into the computer and retrieving it in graphical  form are therefore much needed.  One of the most commonly employed devices for obtaining permanent graphical  output from digital computers is the microfilm plotter.  Regrettably, present models have no provision  for producing images with a continuous gray scale or "half tones."  In this note several programming techniques  are described for obtaining half tone pictures from a microfilm plotter under the control of a digital  computer.  Illustrative examples of several methods are given.</abstract>
	<conference>CACM February, 1969</conference>
	<authors>
	<author>Schroeder, M. R.</author>
	</authors>
	<keywords>computer images, half tone pictures, microfilm plotters; processing</keywords>
	<version>3.10 3.15 3.24 4.49</version>
	<location>CA690209 JB February 20, 1978  10:06 AM</location>
	<citations>
	<citation>1929	5	1929</citation>
	<citation>1929	5	1929</citation>
	<citation>1929	5	1929</citation>
	<citation>2142	5	1929</citation>
	<citation>1929	6	1929</citation>
	<citation>2231	6	1929</citation>
	</citations>
	</document>
	<document id= '1928'>
	<title>Exclusive Simulation of Activity in Digital Networks</title>
	<abstract>A technique for simulating the detailed logic networks of large and active digital systems  is described.  Essential objectives sought are improved ease and economy in model generation, economy  in execution time and space, and a facility for handling simultaneous activities.  The main results obtained  are a clear and useful separation of structural and behavioral model description, a reduction of manual  tasks in converting Boolean logic into a structural model, the elimination of manual processes in achieving  exclusive simulation of activity, an event-scheduling technique which does not deteriorate in economy as the event queue grows in length, and a simulation procedure which deals effectively with any mixture  of serial and simultaneous activities.  The passage of time is simulated in a precise, quantitative fashion  and systems to be simulated may be combinations of synchronous and asynchronous logic.  Certain aspects  of the techniques described may be used for the simulation of network structures other than digital networks.</abstract>
	<conference>CACM February, 1969</conference>
	<authors>
	<author>Ulrich, E. G.</author>
	</authors>
	<keywords>simulation, logical simulation, digital simulation, large systems simulation, network structures,  scheduling, queuing, simultaneous activities, parallel events</keywords>
	<version>4.22 4.29 6.9</version>
	<location>CA690210 JB February 20, 1978  9:58 AM</location>
	<citations>
	<citation>1885	5	1928</citation>
	<citation>1928	5	1928</citation>
	<citation>1928	5	1928</citation>
	<citation>1928	5	1928</citation>
	<citation>2795	5	1928</citation>
	<citation>1928	6	1928</citation>
	<citation>1928	6	1928</citation>
	<citation>1989	6	1928</citation>
	<citation>2274	6	1928</citation>
	</citations>
	</document>
	<document id= '1927'>
	<title>Information Science in a Ph.D. Computer Science Program</title>
	<abstract>This report contains recommendations on a sample course curriculum in the general area of information  organization and information system design in a Ph.D. Computer Science Program.  The subject area is  first briefly described, followed by a listing of some desirable graduate-level courses.  Suitable bibliographies  are appended.</abstract>
	<conference>CACM February, 1969</conference>
	<authors>
	<author>Salton, G.</author>
	</authors>
	<keywords>course curriculum, graduate courses, university courses,computer science curriculum, information  science, information organization, information retrieval, data retrieval, language analysis, information  processing</keywords>
	<version>1.52 3.42 3.70</version>
	<location>CA690211 JB February 20, 1978  9:50 AM</location>
	<citations>
	<citation>1720	4	1927</citation>
	<citation>1927	4	1927</citation>
	<citation>1927	4	1927</citation>
	<citation>2147	4	1927</citation>
	<citation>2163	4	1927</citation>
	<citation>2345	4	1927</citation>
	<citation>2478	4	1927</citation>
	<citation>2594	4	1927</citation>
	<citation>2852	4	1927</citation>
	<citation>2899	4	1927</citation>
	<citation>3003	4	1927</citation>
	<citation>3130	4	1927</citation>
	<citation>1659	5	1927</citation>
	<citation>1771	5	1927</citation>
	<citation>1927	5	1927</citation>
	<citation>1927	5	1927</citation>
	<citation>1927	5	1927</citation>
	<citation>2163	5	1927</citation>
	<citation>3003	5	1927</citation>
	<citation>1659	6	1927</citation>
	<citation>1678	6	1927</citation>
	<citation>1720	6	1927</citation>
	<citation>1771	6	1927</citation>
	<citation>1927	6	1927</citation>
	<citation>1927	6	1927</citation>
	<citation>1945	6	1927</citation>
	<citation>2097	6	1927</citation>
	<citation>2147	6	1927</citation>
	<citation>2163	6	1927</citation>
	<citation>2181	6	1927</citation>
	<citation>2187	6	1927</citation>
	<citation>2329	6	1927</citation>
	<citation>2345	6	1927</citation>
	<citation>2367	6	1927</citation>
	<citation>2407	6	1927</citation>
	<citation>2478	6	1927</citation>
	<citation>2479	6	1927</citation>
	<citation>2480	6	1927</citation>
	<citation>2538	6	1927</citation>
	</citations>
	</document>
	<document id= '1926'>
	<title>Description of FORMAT, a Text-Processing Program</title>
	<abstract>FORMAT is a production program which facilitates the editing and printing of "finished" documents  directly on the printer of a relatively small (64k) computer system.  It features good performance, totally  free-form input, very flexible formatting capabilities including up to eight columns per page, automatic  capitalization, aids for index construction, and a minimum of nontext items.  It is written entirely  in FORTRAN IV.</abstract>
	<conference>CACM March, 1969</conference>
	<authors>
	<author>Berns, G. M.</author>
	</authors>
	<keywords>text processing, indexing, printing, documentation, text editing, formatting, frequency dictionary,  right justification, vocabulary</keywords>
	<version>3.74 3.75 3.9</version>
	<location>CA690301 JB February 20, 1978 9:45 AM</location>
	<citations>
	<citation>1926	5	1926</citation>
	<citation>1926	5	1926</citation>
	<citation>1926	5	1926</citation>
	<citation>2034	5	1926</citation>
	<citation>984	6	1926</citation>
	<citation>1231	6	1926</citation>
	<citation>1565	6	1926</citation>
	<citation>1852	6	1926</citation>
	<citation>1926	6	1926</citation>
	<citation>1947	6	1926</citation>
	</citations>
	</document>
	<document id= '1925'>
	<title>Concepts of Use in Contour Map Processing</title>
	<abstract>Generalized techniques whose use can simplify the solution of problems relating to contour  maps.  One of these techniques makes use of the topological properties of contour maps.  The topology  is represented by a graphical structure in which adjacent contour lines appear as connected nodes.  Another  generalized technique consists of utilizing geometrical properties to determine the characteristics of  straight lines drawn on the contour map.  Both of these techniques have been applied to the problem of  locating the ground track of an aircraft from elevation readings obtained during a flight.</abstract>
	<conference>CACM March, 1969</conference>
	<authors>
	<author>Morse, S. P.</author>
	</authors>
	<keywords>map, contour map, contour lines, topological properties, geometrical properties, graph of contour  map, navigation</keywords>
	<version>3.1</version>
	<location>CA690302 JB February 20, 1978  9:41 AM</location>
	<citations>
	<citation>1925	5	1925</citation>
	<citation>1925	5	1925</citation>
	<citation>1925	5	1925</citation>
	<citation>2287	5	1925</citation>
	<citation>2547	5	1925</citation>
	<citation>3062	5	1925</citation>
	<citation>1326	6	1925</citation>
	<citation>1871	6	1925</citation>
	<citation>1925	6	1925</citation>
	<citation>1925	6	1925</citation>
	<citation>1925	6	1925</citation>
	</citations>
	</document>
	<document id= '1924'>
	<title>Organizing Matrices and Matrix Operations for Paged Memory Systems</title>
	<abstract>Matrix representations and operations are examined for the purpose of minimizing the page faulting  occurring in a paged memory system.  It is shown that carefully designed matrix algorithms can lead to  enormous savings in the number of page faults occurring when only a small part of the total matrix can  be in main memory at one time.  Examination of addition, multiplication, and inversion algorithms shows  that a partitioned matrix representation (i.e. one submatrix or partition per page) in most cases induced  fewer page faults than a row-by-row representation.  The number of page-pulls required by these matrix  manipulation algorithms is also studied as a function of the number of pages of main memory available  to the algorithm.</abstract>
	<conference>CACM March, 1969</conference>
	<authors>
	<author>McKellar, A. C.</author>
	</authors>
	<keywords>matrix algorithms, array processing, paging algorithms, paged memory systems, virtual memory systems,  array storage allocation, storage allocation</keywords>
	<version>4.12 4.39 5.14</version>
	<location>CA690303 JB February 20, 1978  9:35 AM</location>
	<citations>
	<citation>1892	4	1924</citation>
	<citation>1924	4	1924</citation>
	<citation>2095	4	1924</citation>
	<citation>2218	4	1924</citation>
	<citation>2297	4	1924</citation>
	<citation>2374	4	1924</citation>
	<citation>2526	4	1924</citation>
	<citation>2667	4	1924</citation>
	<citation>2668	4	1924</citation>
	<citation>2862	4	1924</citation>
	<citation>2863	4	1924</citation>
	<citation>1728	5	1924</citation>
	<citation>1924	5	1924</citation>
	<citation>1924	5	1924</citation>
	<citation>1924	5	1924</citation>
	<citation>2365	5	1924</citation>
	<citation>2582	5	1924</citation>
	<citation>3152	5	1924</citation>
	<citation>987	6	1924</citation>
	<citation>1751	6	1924</citation>
	<citation>1754	6	1924</citation>
	<citation>1924	6	1924</citation>
	<citation>1924	6	1924</citation>
	<citation>1924	6	1924</citation>
	<citation>2017	6	1924</citation>
	<citation>2130	6	1924</citation>
	<citation>2362	6	1924</citation>
	<citation>2365	6	1924</citation>
	</citations>
	</document>
	<document id= '1923'>
	<title>Pseudofiles</title>
	<abstract>An approach to system interfaces for high level languages using basic input/output support  facilities is described.  It is shown that this technique can provide potentially inexpensive methods  for programs to communicate with deeply embedded facilities such as command language processors.</abstract>
	<conference>CACM March, 1969</conference>
	<authors>
	<author>Rosin, R. F.</author>
	</authors>
	<keywords>operating systems, interfaces input-output, high level languages, command language</keywords>
	<version>4.22 4.30 4.31 4.41</version>
	<location>CA690304 JB February 20, 1978  9:12 AM</location>
	<citations>
	<citation>1923	5	1923</citation>
	<citation>1923	5	1923</citation>
	<citation>1923	5	1923</citation>
	</citations>
	</document>
	<document id= '1922'>
	<title>Proposed USA Standard (Data Communication Control Procedures for the USA Standarad Code for Information  Interchange)</title>
	<conference>CACM March, 1969</conference>
	<keywords>data communication, data communication control procedures, data communication establishment/termination  procedures, data communication message transfer procedures, data communication error control procedures,  data communication polling/selection procedures, communication, communication control procedures, communication  establishment/termination procedures, communication message transfer procedures, communication error  control procedures, communication polling/selection procedures, link, link control procedures, link establishment/termination  procedures, link message transfer procedures, link error control procedures, link polling/selection procedures,  data link, data link control procedures, data link  establishment/termination procedures, data link message  transfer procedures, data link error control procedures, data link polling/selection procedures</keywords>
	<version>3.81 4.49 6.39</version>
	<location>CA690305 JB February 20, 1978  9:09 AM</location>
	<citations>
	<citation>1922	5	1922</citation>
	<citation>1922	5	1922</citation>
	<citation>1922	5	1922</citation>
	</citations>
	</document>
	<document id= '1921'>
	<title>An Algol Convolution Procedure Based on the Fast Fourier Transform (Algorithm 345 [C6])</title>
	<conference>CACM March, 1969</conference>
	<authors>
	<author>Singleton, R. C.</author>
	</authors>
	<keywords>fast Fourier transform, complex Fourier transform, multivariate Fourier transform, Fourier series,  harmonic analysis, spectral analysis, orthogonal polynomials, orthogonal transformation, convolution,  auto covariance, autocorrelation, cross-correlation, digital filtering, permutation</keywords>
	<version>3.5 3.83 5.12 5.14</version>
	<location>CA690306 JB February 20, 1978  8:54 AM</location>
	<citations>
	<citation>1921	5	1921</citation>
	<citation>1921	5	1921</citation>
	<citation>1921	5	1921</citation>
	</citations>
	</document>
	<document id= '1920'>
	<title>F-Test Probabilities (Algorithm 346 [S14])</title>
	<conference>CACM March, 1969</conference>
	<authors>
	<author>Morris, J.</author>
	</authors>
	<keywords>F-test, Snedecor F-statistic, Fisher Test, distribution function</keywords>
	<version>5.5</version>
	<location>CA690307 JB February 20, 1978  8:50 AM</location>
	<citations>
	<citation>1157	4	1920</citation>
	<citation>1779	4	1920</citation>
	<citation>1920	4	1920</citation>
	<citation>1920	4	1920</citation>
	<citation>1944	4	1920</citation>
	<citation>1987	4	1920</citation>
	<citation>2548	4	1920</citation>
	<citation>1778	5	1920</citation>
	<citation>1920	5	1920</citation>
	<citation>1920	5	1920</citation>
	<citation>1920	5	1920</citation>
	<citation>714	5	1920</citation>
	</citations>
	</document>
	<document id= '1919'>
	<title>An Efficient Algorithm for Sorting with Minimal Storage (Algorithm 347 [M1])</title>
	<conference>CACM March, 1969</conference>
	<authors>
	<author>Singleton, R. C.</author>
	</authors>
	<keywords>sorting, minimal storage sorting, digital computer sorting</keywords>
	<version>5.31</version>
	<location>CA690308 JB February 20, 1978  8:48 AM</location>
	<citations>
	<citation>1175	4	1919</citation>
	<citation>1175	4	1919</citation>
	<citation>1919	4	1919</citation>
	<citation>1919	4	1919</citation>
	<citation>1919	4	1919</citation>
	<citation>1919	4	1919</citation>
	<citation>1919	4	1919</citation>
	<citation>1919	4	1919</citation>
	<citation>1969	4	1919</citation>
	<citation>1969	4	1919</citation>
	<citation>1997	4	1919</citation>
	<citation>2017	4	1919</citation>
	<citation>2041	4	1919</citation>
	<citation>2118	4	1919</citation>
	<citation>2191	4	1919</citation>
	<citation>2191	4	1919</citation>
	<citation>2216	4	1919</citation>
	<citation>2388	4	1919</citation>
	<citation>2388	4	1919</citation>
	<citation>2348	4	1919</citation>
	<citation>2679	4	1919</citation>
	<citation>2679	4	1919</citation>
	<citation>2679	4	1919</citation>
	<citation>2783	4	1919</citation>
	<citation>2784	4	1919</citation>
	<citation>3054	4	1919</citation>
	<citation>3054	4	1919</citation>
	<citation>3054	4	1919</citation>
	<citation>3121	4	1919</citation>
	<citation>3121	4	1919</citation>
	<citation>852	4	1919</citation>
	<citation>864	4	1919</citation>
	<citation>864	4	1919</citation>
	<citation>865	4	1919</citation>
	<citation>1175	5	1919</citation>
	<citation>1919	5	1919</citation>
	<citation>1919	5	1919</citation>
	<citation>1919	5	1919</citation>
	<citation>308	5	1919</citation>
	<citation>309	5	1919</citation>
	<citation>2216	5	1919</citation>
	<citation>74	5	1919</citation>
	<citation>3054	5	1919</citation>
	<citation>3187	5	1919</citation>
	<citation>864	5	1919</citation>
	<citation>864	6	1919</citation>
	<citation>1175	6	1919</citation>
	<citation>1880	6	1919</citation>
	<citation>1919	6	1919</citation>
	<citation>1919	6	1919</citation>
	<citation>1969	6	1919</citation>
	<citation>1969	6	1919</citation>
	<citation>1980	6	1919</citation>
	<citation>1997	6	1919</citation>
	<citation>1997	6	1919</citation>
	<citation>307	6	1919</citation>
	<citation>308	6	1919</citation>
	<citation>309	6	1919</citation>
	<citation>2017	6	1919</citation>
	<citation>2679	6	1919</citation>
	<citation>776	6	1919</citation>
	</citations>
	</document>
	<document id= '1918'>
	<citations>
	<citation>1918	5	1918</citation>
	<citation>1918	5	1918</citation>
	<citation>1918	5	1918</citation>
	</citations>
	<title>Distribution of Indistinguishable Objects into Distinguishable Slots (Algorithm 329 [G6])</title>
	<conference>CACM March, 1969</conference>
	<authors>
	<author>Gray, M.</author>
	</authors>
	<location>CA690309 JB February 20, 1978  8:46 AM</location>
	</document>
	<document id= '1917'>
	<title>An Algol Procedure for the Fast Fourier Transform with Arbitrary Factors (Algorithm 339 [C6])</title>
	<conference>CACM March, 1969</conference>
	<authors>
	<author>Singleton, R. C.</author>
	</authors>
	<keywords>fast Fourier transform, complex Fourier transform, multivariate Fourier transform, Fourier series,  harmonic analysis, spectral analysis, orthogonal polynomials, orthogonal transformation, virtual core  memory, permutation</keywords>
	<version>3.15 3.83 5.12 5.14</version>
	<location>CA690310 JB February 20, 1978  8:43 AM</location>
	<citations>
	<citation>1917	5	1917</citation>
	<citation>1917	5	1917</citation>
	<citation>1917	5	1917</citation>
	</citations>
	</document>
	<document id= '1916'>
	<title>Analysis of Boolean Program Models for Time-Shared, Paged Environments</title>
	<abstract>Directed graphs or their associated matrices are frequently used to represent the logical structure  of sequences of computer instructions.  Such techniques are used and, in addition, data references are  represented in a nondirected model. The complete structural specification of a program is represented  by a combined model.  A transformation of the combined model yields a new model in which additional timing  information is also contained.  Analysis of these models prior to execution yields information valuable  in determining segmentation of instructions and data for a time-shared environment, as well as for initial  page loading; during execution, the analysis may be used for "look ahead" control of page turning.</abstract>
	<conference>CACM April, 1969</conference>
	<authors>
	<author>Lowe, T. C.</author>
	</authors>
	<keywords>time-sharing, paging, segmentation, executive, compiler, monitor, program model</keywords>
	<version>4.39 6.21</version>
	<location>CA690401 JB February 17, 1978  4:50 PM</location>
	<citations>
	<citation>1916	4	1916</citation>
	<citation>1916	4	1916</citation>
	<citation>1533	5	1916</citation>
	<citation>1916	5	1916</citation>
	<citation>1916	5	1916</citation>
	<citation>1916	5	1916</citation>
	<citation>2130	5	1916</citation>
	<citation>666	5	1916</citation>
	<citation>1916	6	1916</citation>
	</citations>
	</document>
	<document id= '1915'>
	<title>An Algorithm for Hidden Line Elimination</title>
	<abstract>The algorithm presented causes the elimination of hidden lines in the representation of a perspective  view of concave and convex plane-faced objects on the picture plane.  All the edges of the objects are  considered sequentially, and all planes which hide every point of an edge are found.  The computing time  increases roughly as the square of the number of edges.  The algorithm takes advantage of a reduced number  of concave points and automatically recognizes if only one object with no concave points is considered.  In this last case, the result is obtained in a much simpler way.</abstract>
	<conference>CACM April, 1969</conference>
	<authors>
	<author>Galimberti, R.</author>
	<author>Montanari, U.</author>
	</authors>
	<keywords>hidden line elimination, back line recognition, three-dimensional representation, plane-faced objects,  perspective view, machine rendering of solids, automatic drawing, displaying techniques, computer graphics,  man/machine interaction, man/machine communication, computer-aided design</keywords>
	<version>4.40 4.41 4.49</version>
	<location>CA690402 JB February 17, 1978  4:44 PM</location>
	<citations>
	<citation>1915	5	1915</citation>
	<citation>1915	5	1915</citation>
	<citation>1915	5	1915</citation>
	<citation>2004	5	1915</citation>
	<citation>2687	5	1915</citation>
	<citation>2692	5	1915</citation>
	<citation>1686	6	1915</citation>
	<citation>1741	6	1915</citation>
	<citation>1915	6	1915</citation>
	<citation>1915	6	1915</citation>
	<citation>1915	6	1915</citation>
	<citation>2004	6	1915</citation>
	</citations>
	</document>
	<document id= '1914'>
	<title>Matrix Scaling by Integer Programming (Algorithm 348 [F1])</title>
	<conference>CACM April, 1969</conference>
	<authors>
	<author>Klimpel, R. R.</author>
	</authors>
	<keywords>integer programming, linear algebra, mathematical programming, matrix condition, matrix scaling</keywords>
	<version>5.14 5.41</version>
	<location>CA690403 JB February 17, 1978  4:38 PM</location>
	<citations>
	<citation>1914	5	1914</citation>
	<citation>1914	5	1914</citation>
	<citation>1914	5	1914</citation>
	</citations>
	</document>
	<document id= '1913'>
	<title>Polygamma Functions with Arbitrary Precision (Algorithm 349 [S14])</title>
	<conference>CACM April, 1969</conference>
	<authors>
	<author>Schwachheim, G.</author>
	</authors>
	<keywords>polygamma function, psi function, digamma function, trigamma function, tetragamma function, pentagamma  function, special functions</keywords>
	<version>5.12</version>
	<location>CA690404 JB February 17, 1978  4:36 PM</location>
	<citations>
	<citation>1913	5	1913</citation>
	<citation>1913	5	1913</citation>
	<citation>1913	5	1913</citation>
	</citations>
	</document>
	<document id= '1912'>
	<title>Simulation of Outpatient Appointment Systems</title>
	<abstract>An experimental computer program is described which simulates appointment systems employed  by outpatient departments of hospitals.  Both major kinds of appointment systems-individual and block-can  be simulated.  The purpose of the Simulator is to enable the user to evaluate the effectiveness of alternative  appointment systems in a given clinical environment.</abstract>
	<conference>CACM April, 1969</conference>
	<authors>
	<author>Katz, J. H.</author>
	</authors>
	<keywords>simulation, scheduling, appointment system, outpatient department, medicine, health, management science, operations research</keywords>
	<version>3.34 3.59</version>
	<location>CA690405 JB February 17, 1978  4:32 PM</location>
	<citations>
	<citation>1805	4	1912</citation>
	<citation>1912	4	1912</citation>
	<citation>1518	5	1912</citation>
	<citation>1912	5	1912</citation>
	<citation>1912	5	1912</citation>
	<citation>1912	5	1912</citation>
	</citations>
	</document>
	<document id= '1911'>
	<title>On Coordination Reduction and Sentence Analysis</title>
	<abstract>A class of coordination phenomena in natural languages is considered within the frame work  of transformational theory.  To account for these phenomena it is proposed that certain machinery be  added to the syntactic component of a transformational grammar. This machinery includes certain rule  schemata, the conditions under which they are to be applied, and conditions determining the sequence  of subtrees on which they are to be performed.  A solution to the syntactic analysis problem for this  class of grammars is outlined.  Precise specification of both the generative procedure of this paper  and its inverse is given in the form of LISP function definitions.</abstract>
	<conference>CACM April, 1969</conference>
	<authors>
	<author>Petrick, S. R.</author>
	<author>Postal, P. M.</author>
	<author>Rosenbaum, P. S.</author>
	</authors>
	<keywords>natural languages, generative grammar, transformational theory, syntax, coordination, sentence  coordination, sentence coordination, coordination reduction, syntactic analysis, grammar testing program,  rule testing</keywords>
	<version>3.42</version>
	<location>CA690406 JB February 17, 1978  4:25 PM</location>
	<citations>
	<citation>1911	5	1911</citation>
	<citation>1911	5	1911</citation>
	<citation>1911	5	1911</citation>
	</citations>
	</document>
	<document id= '1910'>
	<title>An Algorithm for Solving a Special Class of Tridiagonal Systems of Linear Equations</title>
	<abstract>An algorithm is presented for solving a system of linear equation Bu=k where B is tridiagonal  and of a special form.  It is shown that this algorithm is almost twice as fast as the Gaussian elimination  method usually suggested for solving such systems.  In addition, explicit formulas for the inverse and  determinant of the matrix B are given.</abstract>
	<conference>CACM April, 1969</conference>
	<authors>
	<author>Rose, D. J.</author>
	</authors>
	<keywords>tridiagonal, Gaussian elimination, central difference</keywords>
	<version>5.14 5.17</version>
	<location>CA690407 JB February 17, 1978  4:18 PM</location>
	<citations>
	<citation>1910	5	1910</citation>
	<citation>1910	5	1910</citation>
	<citation>1910	5	1910</citation>
	</citations>
	</document>
	<document id= '1909'>
	<title>Computation of Jn(x) by Numerical Integration</title>
	<abstract>It is shown to be practical to compute Jn(x) by numerical integration of its integral representation  using the trapezoidal rule. The error in this approximation was studied empirically.</abstract>
	<conference>CACM April, 1969</conference>
	<authors>
	<author>Stroud, A. H.</author>
	<author>Kohli, J. P.</author>
	</authors>
	<keywords>Bessel Function, numerical integration, trapezoidal rule</keywords>
	<version>5.11 5.12 5.16</version>
	<location>CA690408 JB February 17, 1978  4:13 PM</location>
	<citations>
	<citation>1909	4	1909</citation>
	<citation>1909	4	1909</citation>
	<citation>1909	4	1909</citation>
	<citation>1909	4	1909</citation>
	<citation>2119	4	1909</citation>
	<citation>134	5	1909</citation>
	<citation>1023	5	1909</citation>
	<citation>1284	5	1909</citation>
	<citation>1316	5	1909</citation>
	<citation>1909	5	1909</citation>
	<citation>1909	5	1909</citation>
	<citation>1909	5	1909</citation>
	</citations>
	</document>
	<document id= '1908'>
	<title>Time-Sharing and Batch-Processing:  An Experimental Comparison of Their Values in a Problem -  Solving Situation</title>
	<abstract>An experimental comparison of problem-solving using time-sharing and batch-processing computer  systems conducted at MIT is described in this paper.  This study is the first known attempt to evaluate  two such systems for what may well be the predominant user population within the next decade-the professionals  who, as nonprogrammers, are using the computer as an aid in decision-making and problem-solving rather  than as a programming end in itself.  Statistically and logically significant results indicate equal  cost for usage of the two computer systems; however, a much higher level of performance is attained by  time-sharing users.  There are indications that significantly lower costs would have resulted if the  time-sharing users had stopped work when they reached a performance level equal to that of the batch  users.  The users' speed of problem-solving and their attitudes made time-sharing the more favorable  system.</abstract>
	<conference>CACM May, 1969</conference>
	<authors>
	<author>Gold, M. M.</author>
	</authors>
	<keywords>time-sharing vs batch-processing, user performance, man/machine communications, cost effectiveness,  on-line vs off-line performance, decision-making performance, user/programmer behavior, programming experimental  empirical studies, problem-solving, research in man/machine communications, man/machine symbiosis</keywords>
	<version>2.11 2.40 3.36 3.51 3.80</version>
	<location>CA690501 JB February 17, 1978  4:10 PM</location>
	<citations>
	<citation>1792	4	1908</citation>
	<citation>1908	4	1908</citation>
	<citation>1908	4	1908</citation>
	<citation>1550	5	1908</citation>
	<citation>1605	5	1908</citation>
	<citation>1908	5	1908</citation>
	<citation>1908	5	1908</citation>
	<citation>1908	5	1908</citation>
	<citation>2705	5	1908</citation>
	<citation>2984	5	1908</citation>
	<citation>1908	6	1908</citation>
	<citation>1908	6	1908</citation>
	<citation>3185	6	1908</citation>
	</citations>
	</document>
	<document id= '1907'>
	<title>A Note on Reliable Full-Duplex Transmission over Half-Duplex Links</title>
	<abstract>A simple procedure for achieving reliable full-duplex transmission over half-duplex links is  proposed. The scheme is compared with another of the same type, which has recently been described in  the literature.  Finally, some comments are made on another group of related transmission procedures  which have been shown to be unreliable under some circumstances.</abstract>
	<conference>CACM May, 1969</conference>
	<authors>
	<author>Bartlett, K. A.</author>
	<author>Scantlebury, R. A.</author>
	</authors>
	<keywords>data transmission, error correction, full-duplex, half-duplex, transmission control, communications</keywords>
	<version>3.81</version>
	<location>CA690502 JB February 17, 1978  4:01 PM</location>
	<citations>
	<citation>1907	4	1907</citation>
	<citation>1743	5	1907</citation>
	<citation>1907	5	1907</citation>
	<citation>1907	5	1907</citation>
	<citation>1907	5	1907</citation>
	</citations>
	</document>
	<document id= '1906'>
	<title>Automated Printed Circuit Routing with a Stepping Aperture</title>
	<abstract>A computer program for routing interconnections on a two-sided printed circuit board with a  regular pattern of lines, pins (terminals), and vias (feed-through holes) is described.  In this program,  each interconnection is given a planned routing-typically, down from the upper pin, through a via, and  horizontally to the lower pin.  From the top, a virtual aperture (i.e. a long horizontal slit) is stepped  down the board.  The planned routing is the basis for rerouting interconnections within the aperture  to resolve conflicts for lines and vias below the aperture and to maximize the effective line usage.   If a conflict has not been resolved before the aperture arrives at the lower pin,interconnections are  deleted to resolve the conflict.  Extensions of this technique to the control of crosstalk between routed  interconnections and to the problem of obtaining 100 percent interconnect are also discussed.</abstract>
	<conference>CACM May, 1969</conference>
	<authors>
	<author>Lass, S.E.</author>
	</authors>
	<keywords>routing, printed circuit, interconnections, aperture, stepping aperture, computer program, circuit  board, lines, vias, pins</keywords>
	<version>3.24 6.30</version>
	<location>CA690503 JB February 17, 1978  3:57 PM</location>
	<citations>
	<citation>1211	4	1906</citation>
	<citation>1549	4	1906</citation>
	<citation>1906	4	1906</citation>
	<citation>2902	4	1906</citation>
	<citation>1051	5	1906</citation>
	<citation>1906	5	1906</citation>
	<citation>1906	5	1906</citation>
	<citation>1906	5	1906</citation>
	</citations>
	</document>
	<document id= '1905'>
	<title>The Simplex Method of Linear Programming Using LU Decomposition</title>
	<abstract>Standard computer implementations of Dantzig's simplex method for linear programming are based  upon forming the inverse of the basic matrix and updating the inverse after every step of the method.   These implementations have bad round-off error properties.  This paper gives the theoretical background  for an implementation which is based upon the LU decomposition, computed with row interchanges, of the  basic matrix.  The implementation is slow, but has good round-off error behavior.  The implementation  appears as CACM Algorithm 350.</abstract>
	<conference>CACM May, 1969</conference>
	<authors>
	<author>Bartels, R. H.</author>
	<author>Goulub, G. H.</author>
	</authors>
	<keywords>simplex method, linear programming, LU decomposition, round-off errors, computational stability</keywords>
	<version>5.41</version>
	<location>CA690504 JB February 17, 1978  3:49 PM</location>
	<citations>
	<citation>1905	4	1905</citation>
	<citation>1744	5	1905</citation>
	<citation>1905	5	1905</citation>
	<citation>1905	5	1905</citation>
	<citation>1905	5	1905</citation>
	</citations>
	</document>
	<document id= '1904'>
	<title>Rough and Ready Error Estimates in Gaussian Integration of Analytic Functions</title>
	<conference>CACM May, 1969</conference>
	<authors>
	<author>Rabinowitz, P.</author>
	</authors>
	<keywords>numerical integration, analytic functions, error estimates, Gaussian integration, tabulated error  coefficients, computable error coefficients, Cauchy integral formula, Chebyshev polynomials</keywords>
	<version>5.11 5.16</version>
	<location>CA690505 JB February 17, 1978  3:44 PM</location>
	<citations>
	<citation>1904	5	1904</citation>
	<citation>1904	5	1904</citation>
	<citation>1904	5	1904</citation>
	</citations>
	</document>
	<document id= '1903'>
	<title>Chebyshev Interpolation and Quadrature Formulas of Very High Degree</title>
	<conference>CACM May, 1969</conference>
	<authors>
	<author>Salzer, H. E.</author>
	</authors>
	<keywords>Chebyshev polynomials, Chebyshev interpolation, Chebyshev quadrature, Chebyshev points, Chebyshev  zeros, interpolation, quadrature, definite integrals</keywords>
	<version>5.13 5.16</version>
	<location>CA690506 JB February 17, 1978  3:42 PM</location>
	<citations>
	<citation>1903	5	1903</citation>
	<citation>1903	5	1903</citation>
	<citation>1903	5	1903</citation>
	<citation>2394	5	1903</citation>
	<citation>1872	6	1903</citation>
	<citation>1903	6	1903</citation>
	</citations>
	</document>
	<document id= '1902'>
	<title>An Automatic Grading Scheme for Simple Programming Exercises</title>
	<abstract>A discussion is given of alterations that were made to a typical university operating system  to record the results of programming exercises in three different languages, including assembly language.   In this computer-controlled grading scheme provision is made for testing with programmer-supplied data  and for final runs with system-supplied data.  Exercises run under the scheme may be mixed with other  programs, and no special recognition of exercises by the operators is necessary.</abstract>
	<conference>CACM May, 1969</conference>
	<authors>
	<author>Hext, J. B.</author>
	<author>Winings, J. W.</author>
	</authors>
	<keywords>automatic grading program, programming exercises</keywords>
	<version>1.5 2.43 4.39</version>
	<location>CA690507 JB February 17, 1978  3:35 PM</location>
	<citations>
	<citation>1270	4	1902</citation>
	<citation>1413	4	1902</citation>
	<citation>1902	4	1902</citation>
	<citation>1902	4	1902</citation>
	<citation>145	5	1902</citation>
	<citation>1270	5	1902</citation>
	<citation>1902	5	1902</citation>
	<citation>1902	5	1902</citation>
	<citation>1902	5	1902</citation>
	</citations>
	</document>
	<document id= '1901'>
	<title>Dynamic Space-Sharing in Computer Systems</title>
	<abstract>A formalization of relationships between space-shading program behavior, and processor efficiency  in computer systems is presented.  Concepts of value and cost of space allocation per task are defined  and then value and cost are combined to develop a single parameter termed value per unit cost.  The intent  is to illustrate a possible analytic approach to the investigation of the problems of space-sharing and  to demonstrate the method on sample problems.</abstract>
	<conference>CACM May, 1969</conference>
	<authors>
	<author>Belady, L. A.</author>
	<author>Kuehner, C. J.</author>
	</authors>
	<keywords>space-sharing, storage allocation, memory allocation, storage management, memory management, program  behavior, multiprogramming, computer system design, allocation strategies, replacement strategies, demand-paging,  time-sharing</keywords>
	<version>4.32 6.2 6.20</version>
	<location>CA690508 JB February 17, 1978  3:31 PM</location>
	<citations>
	<citation>1713	4	1901</citation>
	<citation>1713	4	1901</citation>
	<citation>1879	4	1901</citation>
	<citation>1884	4	1901</citation>
	<citation>1892	4	1901</citation>
	<citation>1901	4	1901</citation>
	<citation>1901	4	1901</citation>
	<citation>1901	4	1901</citation>
	<citation>1901	4	1901</citation>
	<citation>2085	4	1901</citation>
	<citation>2095	4	1901</citation>
	<citation>2095	4	1901</citation>
	<citation>2218	4	1901</citation>
	<citation>2277	4	1901</citation>
	<citation>2277	4	1901</citation>
	<citation>2297	4	1901</citation>
	<citation>2319	4	1901</citation>
	<citation>2329	4	1901</citation>
	<citation>2358	4	1901</citation>
	<citation>2365	4	1901</citation>
	<citation>2373	4	1901</citation>
	<citation>2380	4	1901</citation>
	<citation>2434	4	1901</citation>
	<citation>2499	4	1901</citation>
	<citation>2501	4	1901</citation>
	<citation>2582	4	1901</citation>
	<citation>491	4	1901</citation>
	<citation>491	4	1901</citation>
	<citation>2669	4	1901</citation>
	<citation>2828	4	1901</citation>
	<citation>2863	4	1901</citation>
	<citation>2881	4	1901</citation>
	<citation>2928	4	1901</citation>
	<citation>2996	4	1901</citation>
	<citation>3006	4	1901</citation>
	<citation>3067	4	1901</citation>
	<citation>168	5	1901</citation>
	<citation>185	5	1901</citation>
	<citation>1751	5	1901</citation>
	<citation>1754	5	1901</citation>
	<citation>1901	5	1901</citation>
	<citation>1901	5	1901</citation>
	<citation>1901	5	1901</citation>
	<citation>2374	5	1901</citation>
	<citation>2481	5	1901</citation>
	<citation>2669	5	1901</citation>
	<citation>2863	5	1901</citation>
	<citation>3016	5	1901</citation>
	<citation>3052	5	1901</citation>
	<citation>1728	6	1901</citation>
	<citation>1728	6	1901</citation>
	<citation>1751	6	1901</citation>
	<citation>1751	6	1901</citation>
	<citation>1901	6	1901</citation>
	<citation>1901	6	1901</citation>
	<citation>1901	6	1901</citation>
	<citation>1901	6	1901</citation>
	<citation>1901	6	1901</citation>
	<citation>1901	6	1901</citation>
	<citation>2017	6	1901</citation>
	<citation>2358	6	1901</citation>
	<citation>2373	6	1901</citation>
	<citation>2741	6	1901</citation>
	<citation>2863	6	1901</citation>
	</citations>
	</document>
	<document id= '1900'>
	<title>Clarification of Fortran Standards-Initial Progress</title>
	<abstract>In 1966 after four years of effort, FORTRAN became the first programming language standardized  in the United States.  Since that initial achievement, study and application of the standard specifications  have revealed the need for maintenance of the standards.  As the result of work initiated in 1967, an  initial set of clarifying interpretations has been prepared.  The nature of the maintenance, corrections  to the standard specifications, and completed interpretations are reported.</abstract>
	<conference>CACM May, 1969</conference>
	<keywords>USA Standard, FORTRAN, Basic FORTRAN, programming language, standardization, language standard  specification, language standard maintenance, language standard clarification, language standard interpretation,  standardization committee</keywords>
	<version>1.2 2.0 2.19 2.2 2.3 4.0 4.12 4.19 4.20 4.22 4.29 4.43 5.23 5.9 6.9</version>
	<location>CA690509 JB February 17, 1978  3:26 PM</location>
	<citations>
	<citation>1613	4	1900</citation>
	<citation>1646	4	1900</citation>
	<citation>1845	4	1900</citation>
	<citation>1900	4	1900</citation>
	<citation>1900	4	1900</citation>
	<citation>1955	4	1900</citation>
	<citation>2025	4	1900</citation>
	<citation>2083	4	1900</citation>
	<citation>2154	4	1900</citation>
	<citation>2154	4	1900</citation>
	<citation>2270	4	1900</citation>
	<citation>2365	4	1900</citation>
	<citation>2506	4	1900</citation>
	<citation>2693	4	1900</citation>
	<citation>3060	4	1900</citation>
	<citation>987	5	1900</citation>
	<citation>988	5	1900</citation>
	<citation>1900	5	1900</citation>
	<citation>1900	5	1900</citation>
	<citation>1900	5	1900</citation>
	<citation>2154	5	1900</citation>
	<citation>2915	5	1900</citation>
	<citation>3060	5	1900</citation>
	<citation>987	6	1900</citation>
	<citation>987	6	1900</citation>
	<citation>988	6	1900</citation>
	<citation>1502	6	1900</citation>
	<citation>1900	6	1900</citation>
	<citation>1900	6	1900</citation>
	<citation>1900	6	1900</citation>
	<citation>2154	6	1900</citation>
	</citations>
	</document>
	<document id= '1899'>
	<title>Simplex Method Procedure Employing Lu Decomposition (Algorithm 350 [H])</title>
	<conference>CACM May, 1969</conference>
	<authors>
	<author>Bartels, R. H.</author>
	<author>Golub, G. H.</author>
	</authors>
	<keywords>simplex method, linear programming, LU decomposition, round-off errors, computational stability</keywords>
	<version>5.41</version>
	<location>CA690510 JB February 17, 1978  3:21 PM</location>
	<citations>
	<citation>1899	5	1899</citation>
	<citation>1899	5	1899</citation>
	<citation>1899	5	1899</citation>
	</citations>
	</document>
	<document id= '1898'>
	<title>Regular Coulomb Wave Functions (Algorithm 292 [S22])</title>
	<conference>CACM May, 1969</conference>
	<authors>
	<author>Kolbig, K. S.</author>
	</authors>
	<keywords>Coulomb wave functions, wave functions, regular Coulomb wave functions</keywords>
	<version>5.12</version>
	<location>CA690511 JB February 17, 1978  3:19 PM</location>
	<citations>
	<citation>1898	5	1898</citation>
	<citation>1898	5	1898</citation>
	<citation>1898	5	1898</citation>
	</citations>
	</document>
	<document id= '1897'>
	<title>Coulomb Wave Functions (Algorithm 300 [S22])</title>
	<conference>CACM May, 1969</conference>
	<authors>
	<author>Kolbig, K. S.</author>
	</authors>
	<keywords>Coulomb wave functions, wave functions</keywords>
	<version>5.12</version>
	<location>CA690512 JB February 17, 1978  3:17 PM</location>
	<citations>
	<citation>1897	5	1897</citation>
	<citation>1897	5	1897</citation>
	<citation>1897	5	1897</citation>
	</citations>
	</document>
	<document id= '1896'>
	<title>Regular Coulomb Wave Functions (Algorithm 292 S22])</title>
	<conference>CACM May, 1969</conference>
	<authors>
	<author>Gautschi, W.</author>
	</authors>
	<keywords>Coulomb wave functions, wave functions, regular Coulomb wave functions</keywords>
	<version>5.12</version>
	<location>CA690513 JB February 17, 1978  3:15 PM</location>
	<citations>
	<citation>1896	5	1896</citation>
	<citation>1896	5	1896</citation>
	<citation>1896	5	1896</citation>
	</citations>
	</document>
	<document id= '1895'>
	<title>Gaussian Quadrature Formulas (Algorithm 331 [D1])</title>
	<conference>CACM May, 1969</conference>
	<authors>
	<author>Hill, I. D.</author>
	</authors>
	<keywords>quadrature, Gaussian quadrature, numerical integration, weight function, orthogonal polynomials</keywords>
	<version>5.16</version>
	<location>CA690514 JB February 17, 1978  3:13 PM</location>
	<citations>
	<citation>1895	5	1895</citation>
	<citation>1895	5	1895</citation>
	<citation>1895	5	1895</citation>
	</citations>
	</document>
	<document id= '1894'>
	<title>Normal Random Deviates (Algorithm 334 [G5])</title>
	<conference>CACM May, 1969</conference>
	<authors>
	<author>Knop, R.</author>
	</authors>
	<keywords>normal deviates, normal distribution, random number, random number generator, simulation, probability  distribution, frequency distribution, random</keywords>
	<version>5.13 5.5</version>
	<location>CA690516 JB February 17, 1978  2:31 PM</location>
	<citations>
	<citation>1894	5	1894</citation>
	<citation>1894	5	1894</citation>
	<citation>1894	5	1894</citation>
	<citation>2057	5	1894</citation>
	<citation>2349	5	1894</citation>
	<citation>1600	6	1894</citation>
	<citation>1648	6	1894</citation>
	<citation>1716	6	1894</citation>
	<citation>1794	6	1894</citation>
	<citation>1894	6	1894</citation>
	<citation>1894	6	1894</citation>
	<citation>2043	6	1894</citation>
	<citation>2055	6	1894</citation>
	<citation>501	6	1894</citation>
	<citation>613	6	1894</citation>
	<citation>774	6	1894</citation>
	</citations>
	</document>
	<document id= '1893'>
	<title>Roots of Polynomials by a Root-Squaring and Resultant routine (Algorithm 340 [C2])</title>
	<conference>CACM May, 1969</conference>
	<authors>
	<author>Noltemeier, A.</author>
	</authors>
	<keywords>root finders, roots of polynomial equations, polynomial zeros, root-squaring operations, Graeffe  method, resultant procedure, subresultant procedure, testing of roots, acceptance criteria</keywords>
	<version>5.15</version>
	<location>CA690517 JB February 17, 1978  2:29 PM</location>
	<citations>
	<citation>1893	5	1893</citation>
	<citation>1893	5	1893</citation>
	<citation>1893	5	1893</citation>
	</citations>
	</document>
	<document id= '1892'>
	<title>Degree of Multiprogramming in Page-on-Demand Systems</title>
	<abstract>A simple stochastic model is described which offers a base for understanding the relationship  between the number of programs permitted to share memory (the degree of multiprogramming), drum traffic  rates, and central processing unit utilization in page-on-demand, multiprogrammed, time-shared computer  systems.  The model preserves, as a key feature, the property of page-demand statistics which implies  a "burst" of page demands at the beginning of any job or quantum execution.  The model, a Markov chain,  is analyzed numerically and the results are presented graphically for a wide range of key environment-descriptive  parameters.  Implications of the results to time-shared system design and programming are discussed,  and a calculation of the optimal degree of multiprogramming for a wide range of parameters is presented  graphically.</abstract>
	<conference>CACM June, 1969</conference>
	<authors>
	<author>Wallace, V. L.</author>
	<author>Mason, D. L.</author>
	</authors>
	<keywords>page-on-demand, demand paging, time-sharing multiprogramming, Markovian computer models, scheduling  strategies, operating systems, memory management</keywords>
	<version>2.44 4.32 4.39 6.20 6.21</version>
	<location>CA690601 JB February 17, 1978  1:43 PM</location>
	<citations>
	<citation>1751	4	1892</citation>
	<citation>1805	4	1892</citation>
	<citation>1846	4	1892</citation>
	<citation>1892	4	1892</citation>
	<citation>1892	4	1892</citation>
	<citation>1892	4	1892</citation>
	<citation>1892	4	1892</citation>
	<citation>1892	4	1892</citation>
	<citation>1901	4	1892</citation>
	<citation>1924	4	1892</citation>
	<citation>2068	4	1892</citation>
	<citation>2085	4	1892</citation>
	<citation>2095	4	1892</citation>
	<citation>2095	4	1892</citation>
	<citation>2128	4	1892</citation>
	<citation>2188	4	1892</citation>
	<citation>2218	4	1892</citation>
	<citation>2218	4	1892</citation>
	<citation>2218	4	1892</citation>
	<citation>2218	4	1892</citation>
	<citation>2277	4	1892</citation>
	<citation>2297	4	1892</citation>
	<citation>2317	4	1892</citation>
	<citation>2319	4	1892</citation>
	<citation>2329	4	1892</citation>
	<citation>2358	4	1892</citation>
	<citation>2373	4	1892</citation>
	<citation>2374	4	1892</citation>
	<citation>2380	4	1892</citation>
	<citation>2434	4	1892</citation>
	<citation>2499	4	1892</citation>
	<citation>2501	4	1892</citation>
	<citation>2526	4	1892</citation>
	<citation>2582	4	1892</citation>
	<citation>2667	4	1892</citation>
	<citation>2668	4	1892</citation>
	<citation>2669	4	1892</citation>
	<citation>2741	4	1892</citation>
	<citation>2828	4	1892</citation>
	<citation>2862	4	1892</citation>
	<citation>2863	4	1892</citation>
	<citation>2863	4	1892</citation>
	<citation>2881	4	1892</citation>
	<citation>2928	4	1892</citation>
	<citation>2996	4	1892</citation>
	<citation>3006	4	1892</citation>
	<citation>3067	4	1892</citation>
	<citation>1526	5	1892</citation>
	<citation>1572	5	1892</citation>
	<citation>1728	5	1892</citation>
	<citation>1751	5	1892</citation>
	<citation>1752	5	1892</citation>
	<citation>1892	5	1892</citation>
	<citation>1892	5	1892</citation>
	<citation>1892	5	1892</citation>
	</citations>
	</document>
	<document id= '1891'>
	<title>Three-Dimensional Computer Display</title>
	<abstract>A stereographic display terminal has been produced using the raster display (BRAD) recently  developed at Brookhaven.  The system uses a rotating refresh memory to feed standard television monitors.   To produce a stereographic display the computer calculates the projected video images of an object,  viewed from two separate points.  The resulting video maps are stored on separate refresh bands of the  rotating memory.  The two output signals are connected to separate color guns of a color television monitor,  thus creating a superimposed image on the screen.  Optical separation is achieved by viewing the image  through color filters.  The display is interactive and can be viewed by a large group of people at the  same time.</abstract>
	<conference>CACM June, 1969</conference>
	<authors>
	<author>Ophir, D.</author>
	<author>Shepherd, B. J.</author>
	<author>Spinrad, R. J.</author>
	</authors>
	<keywords>computer graphics, three-dimensional display, swept raster display, interactive stereographic terminal,  video map, color separation</keywords>
	<version>2.0 4.49 6.35</version>
	<location>CA690602 JB February 17, 1978  1:34 PM</location>
	<citations>
	<citation>1891	4	1891</citation>
	<citation>2211	4	1891</citation>
	<citation>2421	4	1891</citation>
	<citation>2674	4	1891</citation>
	<citation>2687	4	1891</citation>
	<citation>1741	5	1891</citation>
	<citation>1891	5	1891</citation>
	<citation>1891	5	1891</citation>
	<citation>1891	5	1891</citation>
	</citations>
	</document>
	<document id= '1890'>
	<title>Simulation of Traffic Flows in a Network</title>
	<abstract>A computer simulation program which deals with traffic flows in the network of a large area  is described.  Each road is segmented into blocks of several ten-meter lengths and is represented by  a bidirectional list in computer memory.  The movement of cars, i.e. the transfer of cars from one block  to the next, is expressed by a proper formula.  This formula is based on the supposition that the speed  of cars in a block is determined only by the density of cars in the block, and this speed-versus-density  curve is empirically given the numerical values.  This simulation scheme has its excellent point in that  it makes it possible to trace the dynamic behavior of traffic flows in a variety of situations, some  examples of which are given for an actual area of the city of Kyoto, Japan.</abstract>
	<conference>June, 1969</conference>
	<authors>
	<author>Sakai, T.</author>
	<author>Nagao, M.</author>
	</authors>
	<keywords>traffic simulation, traffic flow, traffic network traffic control, traffic density, intersection,  signal setting, vehicle, road network, list structure, computer simulation</keywords>
	<version>3.57 3.23</version>
	<location>CA690603 JB February 17, 1978  1:26 PM</location>
	<citations>
	<citation>1890	4	1890</citation>
	<citation>1890	5	1890</citation>
	<citation>1890	5	1890</citation>
	<citation>1890	5	1890</citation>
	<citation>757	5	1890</citation>
	</citations>
	</document>
	<document id= '1889'>
	<title>Introducing Computing to Smaller Colleges and Universities -- A Progress Report</title>
	<abstract>By technical means that are now routine, computer service for smaller colleges and universities  can be provided by remote terminals of a central facility.  Access, however, is not enough-effective  organizational and educational methodology for introducing computing at such institutions must also be  developed.  The experience of two years with a statewide network involving-41 institutions is discussed.   Lessons include the importance of a separate organization representing the small colleges, the necessity  for on-campus training for the institutions, the need for some special programming and documentation  to support such users,and the development of curriculum by evolutionary means.</abstract>
	<conference>CACM June, 1969</conference>
	<authors>
	<author>Gallie, T. M.</author>
	<author>Ferrel, J. K.</author>
	</authors>
	<keywords>regional network, introducing computing, under-graduate education, instructional usage, academic  applications, curriculum development, orientation project, regional center, consortium, remote computing</keywords>
	<version>1.50 1.52 1.59 2.49</version>
	<location>CA690604 JB February 17, 1978  11:21 AM</location>
	<citations>
	<citation>1889	5	1889</citation>
	<citation>1889	5	1889</citation>
	<citation>1889	5	1889</citation>
	</citations>
	</document>
	<document id= '1888'>
	<title>Spline Function Methods for Nonlinear Boundary-Value Problems</title>
	<abstract>The solution of the nonlinear differential equation Y"=F(x,Y,Y') with two-point boundary conditions  is approximated by a quintic or cubic spline function y(x).  The method is well suited to nonuniform  mesh size and dynamic mesh size allocation.  For uniform mesh size h, the error in the quintic spline  y(x) is O(h^4), with typical error one-third that from Numerov's method.  Requiring the differential  equation to be satisfied at the mesh points results in a set of difference equations, which are block  tridiagonal and so are easily solved by relaxation or other standard methods.</abstract>
	<conference>CACM June, 1969</conference>
	<authors>
	<author>Blue, J. L.</author>
	</authors>
	<keywords>boundary value problems, differential equations, finite differences, functional approximation,  iterative methods, nonlinear equations, spline functions</keywords>
	<version>5.13 5.15 5.17</version>
	<location>CA690605 JB February 17, 1978  11:07 AM</location>
	<citations>
	<citation>1888	5	1888</citation>
	<citation>1888	5	1888</citation>
	<citation>1888	5	1888</citation>
	</citations>
	</document>
	<document id= '1887'>
	<title>A Recursive Relation for the Determinant of a Pentadiagonal Matrix</title>
	<abstract>A recursive relation, relating leading principal minors, is developed for the determinant of  a pentadiagonal matrix.  A numerical example is included to indicate its use in calculating eigenvalues.</abstract>
	<conference>CACM June, 1969</conference>
	<authors>
	<author>Sweet, R. A.</author>
	</authors>
	<keywords>pentadiagonal matrix, quindiagonal matrix, quindiagonal matrix, band matrix, determinant, characteristic  polynomial, eigenvalues</keywords>
	<version>5.14</version>
	<location>CA690606 JB February 17, 1978  11:00 AM</location>
	<citations>
	<citation>1887	5	1887</citation>
	<citation>1887	5	1887</citation>
	<citation>1887	5	1887</citation>
	</citations>
	</document>
	<document id= '1886'>
	<title>Generation of Optimal Code for Expressions via Factorization</title>
	<abstract>Given a set of expressions which are to be compiled, methods are presented for increasing the  efficiency of the object code produced by first factoring the expressions, i.e. finding a set of subexpressions  each of which occurs in two or more other expressions or subexpressions.  Once all the factors have been  ascertained, a sequencing procedure is applied which orders the factors and expressions such that all  information is computed in the correct sequence and factors need be retained in memory a minimal amount  of time.  An assignment algorithm is then executed in order to minimize the total number of temporary  storage cells required to hold the results of evaluating the factors.  In order to make these techniques  computationally feasible, heuristic procedures are applied, and hence global optimal results are not  necessarily generated.  The factorization algorithms are also applicable to the problem of factoring  Boolean switching expressions and of factoring polynomials encountered in symbol manipulating systems.</abstract>
	<conference>CACM June, 1969</conference>
	<authors>
	<author>Breuer, M. A.</author>
	</authors>
	<keywords>factorization algorithms, code optimization, sequencing of operations, detection of common subexpressions,  factorization of Boolean expressions</keywords>
	<version>4.12 6.1</version>
	<location>CA690607JB February 17, 1978  10:57 AM</location>
	<citations>
	<citation>1030	4	1886</citation>
	<citation>1886	4	1886</citation>
	<citation>1939	4	1886</citation>
	<citation>1886	5	1886</citation>
	<citation>1886	5	1886</citation>
	<citation>1886	5	1886</citation>
	<citation>2175	5	1886</citation>
	<citation>678	5	1886</citation>
	<citation>1551	6	1886</citation>
	<citation>1613	6	1886</citation>
	<citation>1886	6	1886</citation>
	</citations>
	</document>
	<document id= '1885'>
	<title>A Computer System for Transformational Grammar</title>
	<abstract>A comprehensive system for transformational grammar has been designed and implemented on the  IBM 360/67 computer.  The system deals with the transformational model of syntax, along the lines of  Chomsky's Aspects of the Theory of Syntax. The major innovations include a full,formal description of  the syntax of a transformational grammar, a directed random phrase structure generator, a lexical insertion  algorithm, an extended definition of analysis, and a simple problem-oriented programming language in  which the algorithm for application of transformations can be expressed.  In this paper we present the  system as a whole, first discussing the general attitudes underlying the development of the system, then  outlining the system and discussing its more important special features.  References are given to papers  which consider some particular aspect of the system in detail.</abstract>
	<conference>CACM June, 1969</conference>
	<authors>
	<author>Friedman, J.</author>
	</authors>
	<keywords>transformational grammar, natural language syntax, language processing, language analysis, sentence  generation, lexical insertion, computational linguistics, syntax</keywords>
	<version>3.42</version>
	<location>CA690608 JB February 17, 1978  10:36 AM</location>
	<citations>
	<citation>1885	4	1885</citation>
	<citation>2795	4	1885</citation>
	<citation>1885	5	1885</citation>
	<citation>1885	5	1885</citation>
	<citation>1885	5	1885</citation>
	<citation>1928	5	1885</citation>
	</citations>
	</document>
	<document id= '1884'>
	<title>An Anomaly in Space-Time Characteristics of Certain Programs Running in a Paging Machine</title>
	<abstract>The running time of programs in a paging machine generally increases as the store in which  programs are constrained to run decreases.  Experiments, however, have revealed cases in which the reverse  is true: a decrease in the size of the store is accompanied by a decrease in running time.  An informal  discussion of the anomalous behavior is given, and for the case of the FIFO replacement algorithm a formal  treatment is presented.</abstract>
	<conference>CACM June, 1969</conference>
	<authors>
	<author>Belady, L. A.</author>
	<author>Nelson, R. A.</author>
	<author>Shedler, G. S.</author>
	</authors>
	<keywords>paging machines, demand paging, replacement algorithm</keywords>
	<version>4.30</version>
	<location>CA690609 JB February 17, 1978  9:59 AM</location>
	<citations>
	<citation>1879	4	1884</citation>
	<citation>1884	4	1884</citation>
	<citation>1901	4	1884</citation>
	<citation>2095	4	1884</citation>
	<citation>2277	4	1884</citation>
	<citation>2297	4	1884</citation>
	<citation>2365	4	1884</citation>
	<citation>1754	5	1884</citation>
	<citation>1884	5	1884</citation>
	<citation>1884	5	1884</citation>
	<citation>1884	5	1884</citation>
	<citation>2022	5	1884</citation>
	<citation>2085	5	1884</citation>
	<citation>3006	5	1884</citation>
	<citation>1751	6	1884</citation>
	<citation>1751	6	1884</citation>
	<citation>1884	6	1884</citation>
	<citation>1884	6	1884</citation>
	<citation>1884	6	1884</citation>
	<citation>2374	6	1884</citation>
	<citation>2373	6	1884</citation>
	<citation>2595	6	1884</citation>
	</citations>
	</document>
	<document id= '1883'>
	<title>Modified Romberg Quadrature(Algorithm [D1])</title>
	<conference>CACM June, 1969</conference>
	<authors>
	<author>weather, G.</author>
	</authors>
	<keywords>numerical integration, Romberg quadrature, trapezoid values, rectangle values, error bound</keywords>
	<version>5.16</version>
	<location>CA690610 JB February 17, 1978  9:55 AM</location>
	<citations>
	<citation>1352	4	1883</citation>
	<citation>1356	4	1883</citation>
	<citation>1883	4	1883</citation>
	<citation>2040	4	1883</citation>
	<citation>1241	5	1883</citation>
	<citation>1883	5	1883</citation>
	<citation>1883	5	1883</citation>
	<citation>1883	5	1883</citation>
	<citation>1982	5	1883</citation>
	<citation>2355	5	1883</citation>
	<citation>1	6	1883</citation>
	<citation>1273	6	1883</citation>
	<citation>1418	6	1883</citation>
	<citation>1521	6	1883</citation>
	<citation>1597	6	1883</citation>
	<citation>1883	6	1883</citation>
	<citation>1883	6	1883</citation>
	<citation>324	6	1883</citation>
	<citation>2040	6	1883</citation>
	<citation>2350	6	1883</citation>
	<citation>2354	6	1883</citation>
	</citations>
	</document>
	<document id= '1882'>
	<title>Determination of the Square Root of a Positive Definite Matrix (Algorithm 298 [F1])</title>
	<conference>CACM June, 1969</conference>
	<authors>
	<author>Duke, B. J.</author>
	</authors>
	<keywords>matrix, symmetric matrix, positive definite matrix, matrix square root</keywords>
	<version>5.14</version>
	<location>CA690611 JB February 17, 1978  9:53 AM</location>
	<citations>
	<citation>1882	5	1882</citation>
	<citation>1882	5	1882</citation>
	<citation>1882	5	1882</citation>
	</citations>
	</document>
	<document id= '1881'>
	<title>Transpose Vector Stored Array (Algorithm 302 [K2])</title>
	<conference>CACM June, 1969</conference>
	<authors>
	<author>MacLeod, I. D. G.</author>
	</authors>
	<keywords>matrix transposition, array transposition, vector stored array</keywords>
	<version>5.39</version>
	<location>CA690612 JB February 17, 1978  9:51 AM</location>
	<citations>
	<citation>1881	5	1881</citation>
	<citation>1881	5	1881</citation>
	<citation>1881	5	1881</citation>
	</citations>
	</document>
	<document id= '1880'>
	<title>Chebyshev Solution to an Overdetermined Linear System (Algorithm 328 [F4])</title>
	<conference>CACM June, 1969</conference>
	<authors>
	<author>Golub, G. H.</author>
	</authors>
	<keywords>Chebyshev solutions, over-determined linear systems, linear equations, exchange algorithm</keywords>
	<version>5.13 5.14 5.41</version>
	<location>CA690613 JB February 17, 1978  9:49 AM</location>
	<citations>
	<citation>1880	5	1880</citation>
	<citation>1880	5	1880</citation>
	<citation>1880	5	1880</citation>
	<citation>3054	5	1880</citation>
	<citation>1175	6	1880</citation>
	<citation>1880	6	1880</citation>
	<citation>1919	6	1880</citation>
	<citation>1969	6	1880</citation>
	<citation>1980	6	1880</citation>
	<citation>1997	6	1880</citation>
	<citation>307	6	1880</citation>
	<citation>308	6	1880</citation>
	<citation>309	6	1880</citation>
	<citation>2017	6	1880</citation>
	<citation>2679	6	1880</citation>
	<citation>776	6	1880</citation>
	</citations>
	</document>
	<document id= '1879'>
	<title>A Note on Storage Fragmentation and Program Segmentation</title>
	<abstract>The main purpose of this paper is the presentation of some of the results of a series of simulation  experiments investigating the phenomenon of storage fragmentation.  Two different types of storage fragmentation  are distinguished: (1) external fragmentation, namely the loss in storage utilization caused by the inability  to make use of all available storage after it has been fragmented into a large number of separate blocks;  and (2) internal fragmentation, the loss of utilization caused by rounding up a request for storage,  rather than allocating only the exact number of words required.  The most striking result is the apparently  general rule that rounding up requests for storage, to reduce the number of different sizes of blocks  coexisting in storage, causes more loss of storage by increased internal fragmentation than is saved  by decreased external fragmentation.  Described also are a method of segment allocation and an accompanying  technique for segment addressing which take advantage of the above result.  Evidence is presented of  possible advantages of the method over conventional paging techniques.</abstract>
	<conference>CACM July, 1969</conference>
	<authors>
	<author>Randell, B.</author>
	</authors>
	<keywords>storage allocation, storage fragmentation, paging, segmentation, addressing</keywords>
	<version>6.2 6.20</version>
	<location>CA690701 JB February 17, 1978  9:46 AM</location>
	<citations>
	<citation>1879	4	1879</citation>
	<citation>1884	4	1879</citation>
	<citation>1901	4	1879</citation>
	<citation>2095	4	1879</citation>
	<citation>2277	4	1879</citation>
	<citation>2297	4	1879</citation>
	<citation>2365	4	1879</citation>
	<citation>1754	5	1879</citation>
	<citation>1879	5	1879</citation>
	<citation>1879	5	1879</citation>
	<citation>1879	5	1879</citation>
	<citation>2095	5	1879</citation>
	<citation>2218	5	1879</citation>
	<citation>2498	5	1879</citation>
	<citation>2596	5	1879</citation>
	<citation>2734	5	1879</citation>
	<citation>2902	5	1879</citation>
	<citation>2911	5	1879</citation>
	<citation>3000	5	1879</citation>
	<citation>1051	6	1879</citation>
	<citation>1062	6	1879</citation>
	<citation>1184	6	1879</citation>
	<citation>1184	6	1879</citation>
	<citation>1211	6	1879</citation>
	<citation>1380	6	1879</citation>
	<citation>1552	6	1879</citation>
	<citation>1572	6	1879</citation>
	<citation>1728	6	1879</citation>
	<citation>1728	6	1879</citation>
	<citation>1751	6	1879</citation>
	<citation>1751	6	1879</citation>
	<citation>1754	6	1879</citation>
	<citation>1752	6	1879</citation>
	<citation>1810	6	1879</citation>
	<citation>1879	6	1879</citation>
	<citation>1879	6	1879</citation>
	<citation>1879	6	1879</citation>
	<citation>1879	6	1879</citation>
	<citation>1879	6	1879</citation>
	<citation>1879	6	1879</citation>
	<citation>1879	6	1879</citation>
	<citation>1879	6	1879</citation>
	<citation>273	6	1879</citation>
	<citation>2095	6	1879</citation>
	<citation>2095	6	1879</citation>
	<citation>2095	6	1879</citation>
	<citation>2435	6	1879</citation>
	<citation>2435	6	1879</citation>
	<citation>2435	6	1879</citation>
	<citation>2498	6	1879</citation>
	<citation>2596	6	1879</citation>
	<citation>2734	6	1879</citation>
	<citation>2734	6	1879</citation>
	<citation>2747	6	1879</citation>
	<citation>2768	6	1879</citation>
	<citation>2773	6	1879</citation>
	<citation>2864	6	1879</citation>
	<citation>2983	6	1879</citation>
	</citations>
	</document>
	<document id= '1878'>
	<title>Recovery of Reentrant List Structures in SLIP</title>
	<abstract>One consequence of the reference-count-based space-recovery system employed by SLIP is that  reentrant list structures are not recovered even when explicitly erased.  LISP-like garbage-collection  schemes are free of this impediment.  They however, depend on being able to find and mark nodes that  are reachable from program variables.  By tracing all descendants from program variables may then be  identified and collected.  The list-creating function LIST of SLIP may be amended to mark those lists  for which the programmer wishes to assume responsibility.  Given this modification, a LISP-like garbage  collector that recovers abandoned reentrant list structures may then be appended to the SLIP system.</abstract>
	<conference>CACM July, 1969</conference>
	<authors>
	<author>Weizenbaum, J.</author>
	</authors>
	<keywords>list processing, SLIP, garbage-collection</keywords>
	<version>4.22 4.40</version>
	<location>CA690702 JB February 17, 1978  9:39 AM</location>
	<citations>
	<citation>1024	4	1878</citation>
	<citation>1024	4	1878</citation>
	<citation>1051	4	1878</citation>
	<citation>1051	4	1878</citation>
	<citation>1098	4	1878</citation>
	<citation>1102	4	1878</citation>
	<citation>1132	4	1878</citation>
	<citation>1214	4	1878</citation>
	<citation>1380	4	1878</citation>
	<citation>1388	4	1878</citation>
	<citation>1390	4	1878</citation>
	<citation>1393	4	1878</citation>
	<citation>1485	4	1878</citation>
	<citation>1486	4	1878</citation>
	<citation>1487	4	1878</citation>
	<citation>1549	4	1878</citation>
	<citation>1549	4	1878</citation>
	<citation>1570	4	1878</citation>
	<citation>1706	4	1878</citation>
	<citation>1826	4	1878</citation>
	<citation>1878	4	1878</citation>
	<citation>1878	4	1878</citation>
	<citation>1946	4	1878</citation>
	<citation>1957	4	1878</citation>
	<citation>378	4	1878</citation>
	<citation>2060	4	1878</citation>
	<citation>2155	4	1878</citation>
	<citation>2168	4	1878</citation>
	<citation>2168	4	1878</citation>
	<citation>2719	4	1878</citation>
	<citation>2723	4	1878</citation>
	<citation>2723	4	1878</citation>
	<citation>2838	4	1878</citation>
	<citation>2842	4	1878</citation>
	<citation>2855	4	1878</citation>
	<citation>2857	4	1878</citation>
	<citation>2879	4	1878</citation>
	<citation>3077	4	1878</citation>
	<citation>3080	4	1878</citation>
	<citation>3106	4	1878</citation>
	<citation>3112	4	1878</citation>
	<citation>627	4	1878</citation>
	<citation>106	4	1878</citation>
	<citation>210	5	1878</citation>
	<citation>1878	5	1878</citation>
	<citation>1878	5	1878</citation>
	<citation>1878	5	1878</citation>
	<citation>2023	5	1878</citation>
	<citation>2168	5	1878</citation>
	<citation>731	5	1878</citation>
	<citation>106	6	1878</citation>
	<citation>1626	6	1878</citation>
	<citation>1826	6	1878</citation>
	<citation>210	6	1878</citation>
	<citation>1878	6	1878</citation>
	<citation>1878	6	1878</citation>
	<citation>731	6	1878</citation>
	</citations>
	</document>
	<document id= '1877'>
	<title>Prevention of System Deadlocks</title>
	<abstract>A well-known problem in the design of operating systems is the selection of a resource allocation  policy that will prevent deadlock.  Deadlock is the situation in which resources have been allocated  to various tasks in such a way that none of the tasks can continue.  The various published solutions  have been somewhat restrictive: either they do not handle the problem in sufficient generality or they  suggest policies which will on occasion refuse a request which could have been safely granted.  Algorithms  are presented which examine a request in the light of the current allocation of resources and determine  whether or not the granting of the request will introduce the possibility of a deadlock.  Proofs given  in the appendixes show that the conditions imposed by the algorithms are both necessary and sufficient  to prevent deadlock.  The algorithms have been successfully used in the THE system.</abstract>
	<conference>CACM July, 1969</conference>
	<authors>
	<author>Habermann, A. N.</author>
	</authors>
	<keywords>multiprogramming, time-sharing, scheduling, resource allocation</keywords>
	<version>3.72 4.32 6.20</version>
	<location>CA690703 JB February 17, 1978  9:33 AM</location>
	<citations>
	<citation>1458	4	1877</citation>
	<citation>1523	4	1877</citation>
	<citation>1603	4	1877</citation>
	<citation>1698	4	1877</citation>
	<citation>1747	4	1877</citation>
	<citation>1748	4	1877</citation>
	<citation>1828	4	1877</citation>
	<citation>1854	4	1877</citation>
	<citation>1854	4	1877</citation>
	<citation>1877	4	1877</citation>
	<citation>1877	4	1877</citation>
	<citation>1960	4	1877</citation>
	<citation>1960	4	1877</citation>
	<citation>2150	4	1877</citation>
	<citation>2317	4	1877</citation>
	<citation>2319	4	1877</citation>
	<citation>2377	4	1877</citation>
	<citation>2377	4	1877</citation>
	<citation>2378	4	1877</citation>
	<citation>2342	4	1877</citation>
	<citation>2376	4	1877</citation>
	<citation>2379	4	1877</citation>
	<citation>2424	4	1877</citation>
	<citation>2482	4	1877</citation>
	<citation>2497	4	1877</citation>
	<citation>2558	4	1877</citation>
	<citation>2618	4	1877</citation>
	<citation>2625	4	1877</citation>
	<citation>2632	4	1877</citation>
	<citation>2632	4	1877</citation>
	<citation>2704	4	1877</citation>
	<citation>2723	4	1877</citation>
	<citation>2738	4	1877</citation>
	<citation>2740	4	1877</citation>
	<citation>2741	4	1877</citation>
	<citation>2840	4	1877</citation>
	<citation>2867	4	1877</citation>
	<citation>2941	4	1877</citation>
	<citation>3105	4	1877</citation>
	<citation>3144	4	1877</citation>
	<citation>3184	4	1877</citation>
	<citation>1471	5	1877</citation>
	<citation>1749	5	1877</citation>
	<citation>1877	5	1877</citation>
	<citation>1877	5	1877</citation>
	<citation>1877	5	1877</citation>
	<citation>2228	5	1877</citation>
	<citation>2280	5	1877</citation>
	<citation>2379	5	1877</citation>
	<citation>2482	5	1877</citation>
	<citation>2740	5	1877</citation>
	<citation>2851	5	1877</citation>
	<citation>2920	5	1877</citation>
	<citation>1198	6	1877</citation>
	<citation>1338	6	1877</citation>
	<citation>1749	6	1877</citation>
	<citation>1749	6	1877</citation>
	<citation>1749	6	1877</citation>
	<citation>1877	6	1877</citation>
	<citation>1877	6	1877</citation>
	<citation>1877	6	1877</citation>
	<citation>1877	6	1877</citation>
	<citation>1877	6	1877</citation>
	<citation>1877	6	1877</citation>
	<citation>1877	6	1877</citation>
	<citation>2080	6	1877</citation>
	<citation>2150	6	1877</citation>
	<citation>2228	6	1877</citation>
	<citation>2228	6	1877</citation>
	<citation>2228	6	1877</citation>
	</citations>
	</document>
	<document id= '1876'>
	<title>Generation of Test Matrices Having Certain Sign Patterns and Prescribed Positive Spectra</title>
	<abstract>A class of orthogonal transformations is presented whose members transform a given positive  diagonal matrix into a matrix having one of four special sign patterns.</abstract>
	<conference>CACM July, 1969</conference>
	<authors>
	<author>Schneider, A. J.</author>
	</authors>
	<keywords>test matrices, positive matrices, sign patterns, orthogonal transformations, positive eigenvalues</keywords>
	<version>5.1 5.14</version>
	<location>CA690704 JB February 17, 1978  9:26 AM</location>
	<citations>
	<citation>1876	4	1876</citation>
	<citation>2099	4	1876</citation>
	<citation>1707	5	1876</citation>
	<citation>1876	5	1876</citation>
	<citation>1876	5	1876</citation>
	<citation>1876	5	1876</citation>
	</citations>
	</document>
	<document id= '1875'>
	<title>Polynomial and Spline Approximation by Quadratic Programming</title>
	<abstract>The problem of approximation to a given function, or of fitting a given set of data, where  the approximating function is required to have certain of its derivations of specified sign over the  whole range of approximation, is studied.  Two approaches are presented, in each of which quadratic programming  is used to provide both the constraints on the derivatives and the selection of the function which yields  the best fit.  The first is a modified Bernstein polynomial scheme, and the second is a spline fit.</abstract>
	<conference>CACM July, 1969</conference>
	<authors>
	<author>Amos, D. E.</author>
	<author>Slater, M. L.</author>
	</authors>
	<keywords>constant sign derivatives, Bernstein polynomials, linear concavity constraints, quadratic programming  splines</keywords>
	<version>5.13 5.41</version>
	<location>CA690705 JB February 17, 1978  9:22 AM</location>
	<citations>
	<citation>1875	5	1875</citation>
	<citation>1875	5	1875</citation>
	<citation>1875	5	1875</citation>
	</citations>
	</document>
	<document id= '1874'>
	<title>Generating Pseudorandom Numbers on a Two's Complement Machine such as the IBM 360</title>
	<abstract>The familiar multiplicative congruential generator is examined in the context of the type of  two's complement arithmetic used in the IBM 360 series.  Different sequences of residues are considered  and relationships established among them.  It is shown that a sequence of positive and negative residues  may be produced more simply and economically than with the conventional approach and yet have twice the  period of the latter without loss of desirable statistical properties.  Another easily generated sequence  involving absolute values is also shown to have twice the period but with less attractive statistical  properties.  The statistical properties of these sequences are given and related to previously established  criteria.</abstract>
	<conference>CACM July, 1969</conference>
	<authors>
	<author>Hemmerle, W. J.</author>
	</authors>
	<keywords>random number, uniform distribution, pseudo-random number, random number generator, multiplicative  congruential generator, power residue, two's complement arithmetic, IBM 360 arithmetic</keywords>
	<version>3.15 5.5 6.32</version>
	<location>CA690706 JB February 17, 1978  9:17 AM</location>
	<citations>
	<citation>1874	5	1874</citation>
	<citation>1874	5	1874</citation>
	<citation>1874	5	1874</citation>
	</citations>
	</document>
	<document id= '1873'>
	<title>Accelerating LP Algorithms</title>
	<abstract>It is shown how a novel method for computing (related) inner products can accelerate the pricing  phase of LP algorithms.  Other LP applications are indicated.</abstract>
	<conference>CACM July, 1969</conference>
	<authors>
	<author>Fox, B. L.</author>
	</authors>
	<keywords>linear programming, revised simplex method, multiple pricing, inner product</keywords>
	<version>5.19 5.41</version>
	<location>CA690707 JB February 17, 19789:08 AM</location>
	<citations>
	<citation>1873	5	1873</citation>
	<citation>1873	5	1873</citation>
	<citation>1873	5	1873</citation>
	</citations>
	</document>
	<document id= '1872'>
	<citations>
	<citation>1872	5	1872</citation>
	<citation>1872	5	1872</citation>
	<citation>1872	5	1872</citation>
	<citation>2394	5	1872</citation>
	<citation>1872	6	1872</citation>
	<citation>1903	6	1872</citation>
	</citations>
	<title>Chebyshev Interpolation and Quadrature Formulas of Very High Degree (Errata)</title>
	<conference>CACM July, 1969</conference>
	<authors>
	<author>Salzer, H. E.</author>
	</authors>
	<location>CA690708 JB February 17, 1978  9:01 AM</location>
	</document>
	<document id= '1871'>
	<title>Automatic Contour Map</title>
	<abstract>Some methods for contour mapping by means of a digital plotter are discussed, and a new method  is presented that is simple enough to be implemented by programs with a rather small number of instructions  (about 120 FORTRAN IV instructions are required).  Comparisons with some methods proposed by other authors  are also performed,  A FORTRAN IV program implementing the proposed method is available at the Istituto  di Elettrotecnica ed Elettronica, Politencnico di Milano.</abstract>
	<conference>CACM July, 1969</conference>
	<authors>
	<author>Cottafava, G.</author>
	<author>LeMoli, G.</author>
	</authors>
	<keywords>contour map, level lines, digital plotting, function scanning</keywords>
	<version>3.10 3.13 3.14 3.16 3.20 3.24</version>
	<location>CA690709 JB February 17, 1978  8:59 AM</location>
	<citations>
	<citation>1871	5	1871</citation>
	<citation>1871	5	1871</citation>
	<citation>1871	5	1871</citation>
	<citation>3062	5	1871</citation>
	<citation>1871	6	1871</citation>
	<citation>1925	6	1871</citation>
	</citations>
	</document>
	<document id= '1870'>
	<title>Some Techniques for Using Pseudorandom Numbers in Computer Simulation</title>
	<abstract>An algorithm is described by which uniform pseudorandom integers may be used to construct binary  "numbers" in which the probability that each bit in the word is a 1-bit and can assume any desired parameter  value.  Techniques for making use of such "numbers" in simulation programming are described.</abstract>
	<conference>CACM July, 1969</conference>
	<authors>
	<author>Donnelly, T.</author>
	</authors>
	<keywords>random numbers,  simulation, Boolean algebra, bit manipulation</keywords>
	<version>5.19 5.39</version>
	<location>CA690710 JB February 17, 1978  8:54 AM</location>
	<citations>
	<citation>1794	4	1870</citation>
	<citation>1870	4	1870</citation>
	<citation>2122	4	1870</citation>
	<citation>1674	5	1870</citation>
	<citation>1870	5	1870</citation>
	<citation>1870	5	1870</citation>
	<citation>1870	5	1870</citation>
	</citations>
	</document>
	<document id= '1869'>
	<title>Block Structures, Indirect Addressing, and Garbage Collection</title>
	<abstract>Programming languages have included explicit or implicit block structures to provide a naming  convenience for the programmer.  However, when indirect addressing is used, as in SNOBOL, naming constraints  may be introduced.  Two modifications to SNOBOL are described, resulting in two desirable consequences:  (1) naming constraints disappear even when there is indirect addressing within function definitions;  and (2) there is a significant saving in the number of calls to the garbage collector, because some garbage  is collected, at little expense, each time a function returns to its calling program.  These modifications  have been implemented as an extension to a SNOBOL dialect.</abstract>
	<conference>CACM July, 1969</conference>
	<authors>
	<author>Kain, R. Y.</author>
	</authors>
	<keywords>block structures, indirect addressing, garbage collection, local names, SNOBOL</keywords>
	<version>4.22</version>
	<location>CA690711 JB February 15, 1978  6:49 PM</location>
	<citations>
	<citation>1869	4	1869</citation>
	<citation>1869	4	1869</citation>
	<citation>2513	4	1869</citation>
	<citation>2665	4	1869</citation>
	<citation>2723	4	1869</citation>
	<citation>2855	4	1869</citation>
	<citation>3106	4	1869</citation>
	<citation>1549	5	1869</citation>
	<citation>1570	5	1869</citation>
	<citation>1869	5	1869</citation>
	<citation>1869	5	1869</citation>
	<citation>1869	5	1869</citation>
	<citation>2060	5	1869</citation>
	<citation>2770	5	1869</citation>
	<citation>1380	6	1869</citation>
	<citation>1421	6	1869</citation>
	<citation>1469	6	1869</citation>
	<citation>1477	6	1869</citation>
	<citation>1491	6	1869</citation>
	<citation>1786	6	1869</citation>
	<citation>210	6	1869</citation>
	<citation>1869	6	1869</citation>
	<citation>1869	6	1869</citation>
	<citation>1973	6	1869</citation>
	<citation>1992	6	1869</citation>
	<citation>2018	6	1869</citation>
	<citation>2109	6	1869</citation>
	<citation>2110	6	1869</citation>
	<citation>2673	6	1869</citation>
	</citations>
	</document>
	<document id= '1868'>
	<title>On Obtaining Correct Input:A New Approach</title>
	<abstract>Most information put into machine readable form, whether from scientific or business origins,  is still keypunched.  This paper is addressed toward the difficulty of obtaining correctly keypunched  and key verified data and an alternative method is suggested in which the computer itself is used to rule  out the possibility of errors in input.  This technique is explained and illustrated by reference to  a working program which involves essentially two phases: in the first phase errors are detected by the  machine, and subsequently, in the second phase, they are corrected by it.</abstract>
	<conference>CACM July, 1969</conference>
	<authors>
	<author>Kennedy, M.</author>
	</authors>
	<keywords>correct data, correct input, data correction, keypunch, key verifier, verifier</keywords>
	<version>2.40 2.42 2.43 3.10 3.20 3.50 4.41</version>
	<location>CA690712 JB February 15, 1978  6:43 PM</location>
	<citations>
	<citation>1868	5	1868</citation>
	<citation>1868	5	1868</citation>
	<citation>1868	5	1868</citation>
	</citations>
	</document>
	<document id= '1867'>
	<title>On the Expected Lengths of Sequences Generated in Sorting by Replacement Selecting</title>
	<abstract>In the replacement-selecting technique of sorting, one is interested in the ratio L(j) of the  expected length of the j-th sequence generated by the technique to the number of memory cells used.   Using complex-variable theory, it is shown that L(j) -> 2 and that, asymptotically, the average interval  between sign changes of L(j)-2 is 2.6662.</abstract>
	<conference>CACM July, 1969</conference>
	<authors>
	<author>Hooker, W. W.</author>
	</authors>
	<keywords>replacement selecting, sorting, sequence lengths, asymptotic expected length, recursion relation,  generating function, meromorphic function</keywords>
	<version>3.74 5.31</version>
	<location>CA690713 JB February 15, 1978  6:37 PM</location>
	<citations>
	<citation>1867	4	1867</citation>
	<citation>2272	4	1867</citation>
	<citation>1638	5	1867</citation>
	<citation>1867	5	1867</citation>
	<citation>1867	5	1867</citation>
	<citation>1867	5	1867</citation>
	</citations>
	</document>
	<document id= '1866'>
	<title>Characteristic Values and Associated Solutions of Mathieu's Differential Equation (Algorithm  352 [S22])</title>
	<conference>CACM July, 1969</conference>
	<authors>
	<author>Clemm, D. S.</author>
	</authors>
	<keywords>Mathieu's differential equation, Mathieu function, characteristic value, periodic solution, radial  solution</keywords>
	<version>5.12</version>
	<location>CA690714 JB February 15, 1978  6:30 PM</location>
	<citations>
	<citation>1866	5	1866</citation>
	<citation>1866	5	1866</citation>
	<citation>1866	5	1866</citation>
	</citations>
	</document>
	<document id= '1865'>
	<title>Algol 60 Reference Language Editor (Algorithm 268 [R2])</title>
	<conference>CACM July, 1969</conference>
	<authors>
	<author>Sauer, G.</author>
	</authors>
	<keywords>symbol manipulation</keywords>
	<version>4.49</version>
	<location>CA690715 JB February 15, 1978  6:26 PM</location>
	<citations>
	<citation>1865	5	1865</citation>
	<citation>1865	5	1865</citation>
	<citation>1865	5	1865</citation>
	</citations>
	</document>
	<document id= '1864'>
	<title>Generation of Hilbert Derived Test Matrix (Algorithm 274 [F1])</title>
	<conference>CACM July, 1969</conference>
	<authors>
	<author>Boothroyd, J.</author>
	</authors>
	<keywords>test matrix, Hilbert matrix</keywords>
	<version>5.14</version>
	<location>CA690716 JB February 15, 1978  6:25 PM</location>
	<citations>
	<citation>1864	5	1864</citation>
	<citation>1864	5	1864</citation>
	<citation>1864	5	1864</citation>
	</citations>
	</document>
	<document id= '1863'>
	<title>Minit Algorithm for Linear Programming (Algorithm 333 [H])</title>
	<conference>CACM July, 1969</conference>
	<authors>
	<author>Messham, D. K.</author>
	</authors>
	<keywords>linear programming, dual simplex method, primal problem, dual problem</keywords>
	<version>5.41</version>
	<location>CA690717 JB February 15, 1978  6:23 PM</location>
	<citations>
	<citation>1863	5	1863</citation>
	<citation>1863	5	1863</citation>
	<citation>1863	5	1863</citation>
	</citations>
	</document>
	<document id= '1862'>
	<title>Computing Capabilities at Argentine and Chilean Universities</title>
	<abstract>The author reports on a trip to universities in Argentina and Chile during November 1968, describing  university conditions and computing activities.  As elsewhere, these universities are experiencing student  discontent with the status quo and the solutions they are attempting contrast: Argentina is excluding  students from participating in university government; Chile is allowing such participation.  University  computing service and academic activities are limited.  The number of computers is small and so is the  capacity, none larger than an IBM 360/40; with some exception, computing science academic programs are  rare. This situation is by no means attributable to those responsible for computing developments, who  strive for excellence; rather the "system" is hard to over-come.  Universities, especially those with  strong European traditions, adapt slowly to new academic resources and disciplines; superimposed are  the severe technological and economic constraints of the developing nation.  Consequently, in the absence  of conscious government emphasis on strengthening computing capabilities, future progress may be retarded.</abstract>
	<conference>CACM August, 1969</conference>
	<authors>
	<author>Finerman, A.</author>
	</authors>
	<keywords>university education, computing science academic programs, university computing centers, surveys  of computing centers, university computing capabilities, university-student relationship, Argentine universities,  Chilean universities, South American universities, developing nations</keywords>
	<version>1.52 2.0 2.45</version>
	<location>CA690801 JB February 15, 1978  6:21 PM</location>
	<citations>
	<citation>1862	4	1862</citation>
	<citation>1349	5	1862</citation>
	<citation>1862	5	1862</citation>
	<citation>1862	5	1862</citation>
	<citation>1862	5	1862</citation>
	</citations>
	</document>
	<document id= '1861'>
	<title>The MAD Definition Facility</title>
	<abstract>One of the first definition facilities for higher level languages is described.  Users of the  language can define new operators and/or data types into the MAD language, so that their use appears  as if they were predefined.  Information is given on how one writes definitions, as well as on much of  the motivation behind the form in which definitions are written. Some conclusions are drawn about future  definitional facilities.</abstract>
	<conference>CACM August, 1969</conference>
	<authors>
	<author>Arden, B. W.</author>
	<author>Galler, B. A.</author>
	<author>Graham, R. M.</author>
	</authors>
	<keywords>MAD, definitions, operators, macros, higher level language</keywords>
	<version>4.12 4.22</version>
	<location>CA690802 JB February 15, 1978  6:07 PM</location>
	<citations>
	<citation>1134	4	1861</citation>
	<citation>1179	4	1861</citation>
	<citation>1665	4	1861</citation>
	<citation>1693	4	1861</citation>
	<citation>1768	4	1861</citation>
	<citation>1781	4	1861</citation>
	<citation>1787	4	1861</citation>
	<citation>1824	4	1861</citation>
	<citation>1824	4	1861</citation>
	<citation>1825	4	1861</citation>
	<citation>1836	4	1861</citation>
	<citation>1861	4	1861</citation>
	<citation>1861	4	1861</citation>
	<citation>1861	4	1861</citation>
	<citation>2015	4	1861</citation>
	<citation>2110	4	1861</citation>
	<citation>2126	4	1861</citation>
	<citation>2127	4	1861</citation>
	<citation>2187	4	1861</citation>
	<citation>2317	4	1861</citation>
	<citation>2545	4	1861</citation>
	<citation>2698	4	1861</citation>
	<citation>2733	4	1861</citation>
	<citation>1614	5	1861</citation>
	<citation>1781	5	1861</citation>
	<citation>1861	5	1861</citation>
	<citation>1861	5	1861</citation>
	<citation>1861	5	1861</citation>
	<citation>408	5	1861</citation>
	</citations>
	</document>
	<document id= '1860'>
	<title>An Algol-Based Associative Language</title>
	<abstract>A high level programming language for large, complex associative structures has been designed  and implemented.  The underlying data structure has been implemented using a hash-coding technique.   The discussion includes a comparison with other work and examples of applications of the language.</abstract>
	<conference>CACM August, 1969</conference>
	<authors>
	<author>Feldman, J. A.</author>
	</authors>
	<keywords>ALGOL, associative, programming language, data structure</keywords>
	<version>4.22</version>
	<location>CA690803 JB February 15, 1978  6:02 PM</location>
	<citations>
	<citation>1051	4	1860</citation>
	<citation>1086	4	1860</citation>
	<citation>1132	4	1860</citation>
	<citation>1234	4	1860</citation>
	<citation>1263	4	1860</citation>
	<citation>1265	4	1860</citation>
	<citation>1270	4	1860</citation>
	<citation>1323	4	1860</citation>
	<citation>1358	4	1860</citation>
	<citation>1379	4	1860</citation>
	<citation>1380	4	1860</citation>
	<citation>1380	4	1860</citation>
	<citation>1396	4	1860</citation>
	<citation>1453	4	1860</citation>
	<citation>1464	4	1860</citation>
	<citation>1484	4	1860</citation>
	<citation>1491	4	1860</citation>
	<citation>1498	4	1860</citation>
	<citation>1503	4	1860</citation>
	<citation>1552	4	1860</citation>
	<citation>1552	4	1860</citation>
	<citation>1613	4	1860</citation>
	<citation>1614	4	1860</citation>
	<citation>1626	4	1860</citation>
	<citation>1665	4	1860</citation>
	<citation>1676	4	1860</citation>
	<citation>1682	4	1860</citation>
	<citation>1693	4	1860</citation>
	<citation>1708	4	1860</citation>
	<citation>1708	4	1860</citation>
	<citation>1728	4	1860</citation>
	<citation>1767	4	1860</citation>
	<citation>1781	4	1860</citation>
	<citation>1781	4	1860</citation>
	<citation>1781	4	1860</citation>
	<citation>1781	4	1860</citation>
	<citation>1781	4	1860</citation>
	<citation>1781	4	1860</citation>
	<citation>1787	4	1860</citation>
	<citation>1825	4	1860</citation>
	<citation>1826	4	1860</citation>
	<citation>1854	4	1860</citation>
	<citation>1860	4	1860</citation>
	<citation>1860	4	1860</citation>
	<citation>1860	4	1860</citation>
	<citation>1860	4	1860</citation>
	<citation>1860	4	1860</citation>
	<citation>1860	4	1860</citation>
	<citation>1860	4	1860</citation>
	<citation>1860	4	1860</citation>
	<citation>1860	4	1860</citation>
	<citation>1860	4	1860</citation>
	<citation>1945	4	1860</citation>
	<citation>1957	4	1860</citation>
	<citation>1973	4	1860</citation>
	<citation>1973	4	1860</citation>
	<citation>1988	4	1860</citation>
	<citation>1992	4	1860</citation>
	<citation>2018	4	1860</citation>
	<citation>2018	4	1860</citation>
	<citation>2032	4	1860</citation>
	<citation>2033	4	1860</citation>
	<citation>2033	4	1860</citation>
	<citation>2060	4	1860</citation>
	<citation>2083	4	1860</citation>
	<citation>2091	4	1860</citation>
	<citation>2107	4	1860</citation>
	<citation>2107	4	1860</citation>
	<citation>2109	4	1860</citation>
	<citation>2109	4	1860</citation>
	<citation>2155	4	1860</citation>
	<citation>2155	4	1860</citation>
	<citation>2156	4	1860</citation>
	<citation>2162	4	1860</citation>
	<citation>2168	4	1860</citation>
	<citation>2178	4	1860</citation>
	<citation>2179	4	1860</citation>
	<citation>2203	4	1860</citation>
	<citation>2203	4	1860</citation>
	<citation>2249	4	1860</citation>
	<citation>2251	4	1860</citation>
	<citation>2251	4	1860</citation>
	<citation>2252	4	1860</citation>
	<citation>2252	4	1860</citation>
	<citation>2299	4	1860</citation>
	<citation>2314	4	1860</citation>
	<citation>2325	4	1860</citation>
	<citation>2341	4	1860</citation>
	<citation>2359	4	1860</citation>
	<citation>2524	4	1860</citation>
	<citation>2543	4	1860</citation>
	<citation>2543	4	1860</citation>
	<citation>2546	4	1860</citation>
	<citation>2552	4	1860</citation>
	<citation>2559	4	1860</citation>
	<citation>2573	4	1860</citation>
	<citation>2645	4	1860</citation>
	<citation>2652	4	1860</citation>
	<citation>2684	4	1860</citation>
	<citation>2719	4	1860</citation>
	<citation>2736	4	1860</citation>
	<citation>2770	4	1860</citation>
	<citation>2833	4	1860</citation>
	<citation>2842	4	1860</citation>
	<citation>2929	4	1860</citation>
	<citation>2934	4	1860</citation>
	<citation>2991	4	1860</citation>
	<citation>557	4	1860</citation>
	<citation>3053	4	1860</citation>
	<citation>3069	4	1860</citation>
	<citation>669	4	1860</citation>
	<citation>679	4	1860</citation>
	<citation>691	4	1860</citation>
	<citation>761	4	1860</citation>
	<citation>949	4	1860</citation>
	<citation>989	4	1860</citation>
	<citation>1389	5	1860</citation>
	<citation>1366	5	1860</citation>
	<citation>1421	5	1860</citation>
	<citation>1496	5	1860</citation>
	<citation>1626	5	1860</citation>
	<citation>1641	5	1860</citation>
	<citation>1785	5	1860</citation>
	<citation>1786	5	1860</citation>
	<citation>1860	5	1860</citation>
	<citation>1860	5	1860</citation>
	<citation>1860	5	1860</citation>
	<citation>1957	5	1860</citation>
	<citation>378	5	1860</citation>
	<citation>2151	5	1860</citation>
	<citation>3103	5	1860</citation>
	<citation>3148	5	1860</citation>
	<citation>3184	5	1860</citation>
	<citation>1389	6	1860</citation>
	<citation>1653	6	1860</citation>
	<citation>1747	6	1860</citation>
	<citation>1860	6	1860</citation>
	<citation>1860	6	1860</citation>
	<citation>1860	6	1860</citation>
	<citation>1860	6	1860</citation>
	<citation>2817	6	1860</citation>
	<citation>2865	6	1860</citation>
	<citation>2877	6	1860</citation>
	<citation>2939	6	1860</citation>
	<citation>3073	6	1860</citation>
	<citation>731	6	1860</citation>
	</citations>
	</document>
	<document id= '1859'>
	<title>Error Bounds for Periodic Quintic Splines</title>
	<abstract>Explicit error bounds for periodic quintic spline interpolation are developed.  The first (third)  derivative of the periodic spline is shown to be a sixth (fourth) order approximation at the mesh points  to the first (third) derivative of the function being interpolated.</abstract>
	<conference>CACM August, 1969</conference>
	<authors>
	<author>Hall, C. A.</author>
	</authors>
	<keywords>spline, interpolation, error bounds</keywords>
	<version>5.1 5.13</version>
	<location>CA690804 JB February 15, 1978  5:58 PM</location>
	<citations>
	<citation>1859	5	1859</citation>
	<citation>1859	5	1859</citation>
	<citation>1859	5	1859</citation>
	</citations>
	</document>
	<document id= '1858'>
	<title>An Algorithm for Filon Quadrature</title>
	<abstract>An algorithm for Filon quadrature is described.  Considerable attention has been devoted to  an analysis of the round-off and truncation errors.  The algorithm includes an automatic error control  feature.</abstract>
	<conference>CACM August, 1969</conference>
	<authors>
	<author>Chase, S. M.</author>
	<author>Fosdick, L. D.</author>
	</authors>
	<keywords>quadrature, Filon quadrature, integration, Filon integration, Fourier coefficients, Fourier series</keywords>
	<version>5.16</version>
	<location>CA690805 JB February 15, 1978  5:55 PM</location>
	<citations>
	<citation>1858	4	1858</citation>
	<citation>1858	4	1858</citation>
	<citation>1268	5	1858</citation>
	<citation>1858	5	1858</citation>
	<citation>1858	5	1858</citation>
	<citation>1858	5	1858</citation>
	<citation>1857	5	1858</citation>
	<citation>2393	5	1858</citation>
	<citation>1858	6	1858</citation>
	<citation>1858	6	1858</citation>
	<citation>2071	6	1858</citation>
	</citations>
	</document>
	<document id= '1857'>
	<title>Filon Quadrature (Algorithm [D1])</title>
	<conference>CACM August, 1969</conference>
	<authors>
	<author>Chase, S. M.</author>
	<author>Fosdick, L. D.</author>
	</authors>
	<keywords>quadrature, Filon quadrature, integration, Filon integration, Fourier coefficients, Fourier series</keywords>
	<version>5.16</version>
	<location>CA690806 JB February 15, 1978  5:52 PM</location>
	<citations>
	<citation>1857	4	1857</citation>
	<citation>2393	4	1857</citation>
	<citation>1858	5	1857</citation>
	<citation>1857	5	1857</citation>
	<citation>1857	5	1857</citation>
	<citation>1857	5	1857</citation>
	<citation>1268	6	1857</citation>
	<citation>1857	6	1857</citation>
	</citations>
	</document>
	<document id= '1856'>
	<title>The Teachable Language Comprehender:  A Simulation Program and Theory of Language</title>
	<abstract>The Teachable Language Comprehender (TLC) is a program designed to be capable of being taught  to "comprehend" English text.  When text which the program has not seen before is input to it, it comprehends  that text by correctly relating each (explicit or implicit) assertion of the new text to a large memory.   This memory is a "semantic network" representing factual assertions about the world.  The program also  creates copies of the parts of its memory which have been found to relate to the new text, adapting and  combining these copies to represent the meaning of the new text.  By this means, the meaning of all text  the program successfully comprehends is encoded into the same format as that of the memory.  In this  form it can be added into the memory.  Both factual assertions for the memory and the capabilities for  correctly relating text to the memory's prior content are to be taught to the program as they are needed.   TLC presently contains a relatively small number of examples of such assertions and capabilities, but  within the system, notations for expressing either of these are provided.  Thus the program now corresponds  to a general process for comprehending language, and it provides a methodology for adding the additional  information this process requires to actually comprehend text of any particular kind.  The memory structure  and comprehension process of TLC allow new factual assertions and capabilities for relating text to such  stored assertions to generalize automatically.  That is, once such an assertion or capability is put  into the system, it becomes available to help comprehend a great many other sentences in the future.   Thus the addition of a single factual assertion or linguistic capability will often provide a large  increment in TLC's effective knowledge of the world and in its overall ability to comprehend text.  The  program's strategy is presented as a general theory of language comprehension.</abstract>
	<conference>CACM August,1969</conference>
	<authors>
	<author>Quillian, M. R.</author>
	</authors>
	<keywords>natural language processing, natural language comprehension, teachable computer program, psychological  simulation, human memory simulation, computer linguistics, linguistic performance theory</keywords>
	<version>3.36 3.42 3.62 3.65 3.74</version>
	<location>CA690807 JB February 15, 1978  5:46 PM</location>
	<citations>
	<citation>1155	4	1856</citation>
	<citation>1350	4	1856</citation>
	<citation>1456	4	1856</citation>
	<citation>1468	4	1856</citation>
	<citation>1515	4	1856</citation>
	<citation>1659	4	1856</citation>
	<citation>1699	4	1856</citation>
	<citation>1856	4	1856</citation>
	<citation>1856	4	1856</citation>
	<citation>1856	4	1856</citation>
	<citation>2050	4	1856</citation>
	<citation>2127	4	1856</citation>
	<citation>1225	5	1856</citation>
	<citation>1324	5	1856</citation>
	<citation>1553	5	1856</citation>
	<citation>1856	5	1856</citation>
	<citation>1856	5	1856</citation>
	<citation>1856	5	1856</citation>
	<citation>2127	5	1856</citation>
	<citation>2309	5	1856</citation>
	<citation>2310	5	1856</citation>
	<citation>2396	5	1856</citation>
	<citation>1155	6	1856</citation>
	<citation>1324	6	1856</citation>
	<citation>1487	6	1856</citation>
	<citation>1487	6	1856</citation>
	<citation>1527	6	1856</citation>
	<citation>1781	6	1856</citation>
	<citation>1856	6	1856</citation>
	<citation>1856	6	1856</citation>
	<citation>1856	6	1856</citation>
	<citation>1856	6	1856</citation>
	<citation>2092	6	1856</citation>
	<citation>2127	6	1856</citation>
	<citation>2398	6	1856</citation>
	</citations>
	</document>
	<document id= '1855'>
	<title>A Program for the Syntactic Analysis of English Sentences</title>
	<abstract>A program is described which produces syntactic analyses of English sentences with respect  to a transformational grammar.  The main features of the analyzer are that it uses only a limited dictionary  of English words and that it pursues all analysis paths simultaneously while processing the sentence  from left to right.  The form of representation used for the dictionary and the grammar is indicated  and an outline account is given of the analysis procedure.  Techniques for keeping the size of the analysis  record within reasonable limits and for avoiding the need for dynamic application of certain transformational  rules are described.   A number of examples of output produced by the program are given.  The output  includes timing information.</abstract>
	<conference>CACM August, 1969</conference>
	<authors>
	<author>Dewar, H.</author>
	<author>Bratley, P.</author>
	</authors>
	<keywords>syntactic analysis, language processing, language analysis, parsing, analysis procedure, recognition  procedure, English sentences, linguistics, psycholinguistics, transformational grammar, limited dictionary,  predictive analysis</keywords>
	<version>3.42 3.36</version>
	<location>CA690808 JB February 15, 1978  5:24 PM</location>
	<citations>
	<citation>1855	5	1855</citation>
	<citation>1855	5	1855</citation>
	<citation>1855	5	1855</citation>
	</citations>
	</document>
	<document id= '1854'>
	<title>On Multiprogramming, Machine Coding, and Computer Organization</title>
	<abstract>The author feels that the interrupt feature which is available in most modern computers is  a potent source of programming pitfalls and errors, and that it therefore may heavily contribute to the  unreliability of programs making use of it.  A programming scheme is presented which avoids the concept  of the interrupt and permits the specification of concurrent (or pseudoconcurrent) activities in a supposedly  more perspicuous manner.  It is intended to serve as a basis for the construction of operating systems,  which are prime examples of programs with concurrent activities.  The scheme includes a set of basic  instructions for the generation, termination, and synchronization of parallel processes.  A set of routines  representing these instructions and thereby simulating a hypothetical machine organization has been implemented  and test on the IBM System/360.  Two programs using these instructions, written in PL360, are presented.</abstract>
	<conference>CACM September, 1969</conference>
	<authors>
	<author>Wirth, N.</author>
	</authors>
	<keywords>multiprogramming, parallelism, interrupt, input-output, computer organization, file handling, PL360</keywords>
	<version>4.21 4.22 4.32 4.41 6.21</version>
	<location>CA690901 JB February 15, 1978  5:14 PM</location>
	<citations>
	<citation>1380	4	1854</citation>
	<citation>1458	4	1854</citation>
	<citation>1523	4	1854</citation>
	<citation>1552	4	1854</citation>
	<citation>1603	4	1854</citation>
	<citation>1693	4	1854</citation>
	<citation>1698	4	1854</citation>
	<citation>1747	4	1854</citation>
	<citation>1748	4	1854</citation>
	<citation>1781	4	1854</citation>
	<citation>1805	4	1854</citation>
	<citation>1828	4	1854</citation>
	<citation>1828	4	1854</citation>
	<citation>1854	4	1854</citation>
	<citation>1854	4	1854</citation>
	<citation>1854	4	1854</citation>
	<citation>1854	4	1854</citation>
	<citation>1860	4	1854</citation>
	<citation>1877	4	1854</citation>
	<citation>1877	4	1854</citation>
	<citation>1960	4	1854</citation>
	<citation>1960	4	1854</citation>
	<citation>2060	4	1854</citation>
	<citation>2150	4	1854</citation>
	<citation>2187	4	1854</citation>
	<citation>2317	4	1854</citation>
	<citation>2319	4	1854</citation>
	<citation>2377	4	1854</citation>
	<citation>2377	4	1854</citation>
	<citation>2378	4	1854</citation>
	<citation>2342	4	1854</citation>
	<citation>2376	4	1854</citation>
	<citation>2379	4	1854</citation>
	<citation>2424	4	1854</citation>
	<citation>2482	4	1854</citation>
	<citation>2497	4	1854</citation>
	<citation>2558	4	1854</citation>
	<citation>2618	4	1854</citation>
	<citation>2625	4	1854</citation>
	<citation>2632	4	1854</citation>
	<citation>2632	4	1854</citation>
	<citation>2704	4	1854</citation>
	<citation>2723	4	1854</citation>
	<citation>2738	4	1854</citation>
	<citation>2740	4	1854</citation>
	<citation>2741	4	1854</citation>
	<citation>2840	4	1854</citation>
	<citation>2867	4	1854</citation>
	<citation>2941	4	1854</citation>
	<citation>557	4	1854</citation>
	<citation>3105	4	1854</citation>
	<citation>3144	4	1854</citation>
	<citation>3184	4	1854</citation>
	<citation>1421	5	1854</citation>
	<citation>1471	5	1854</citation>
	<citation>1748	5	1854</citation>
	<citation>1749	5	1854</citation>
	<citation>1854	5	1854</citation>
	<citation>1854	5	1854</citation>
	<citation>1854	5	1854</citation>
	<citation>1960	5	1854</citation>
	<citation>1471	6	1854</citation>
	<citation>1749	6	1854</citation>
	<citation>1854	6	1854</citation>
	</citations>
	</document>
	<document id= '1853'>
	<title>Compact List Representation: Definition, Garbage Collection, and System Implementation</title>
	<abstract>Compact lists are stored sequentially in memory, rather than chained with pointers.  Since  this is not always convenient, the Swym system permits a list to be chained, compact, or any combination  of the two.  A description is given of that list representation and the operators implemented (most are  similar to those of LISP 1.5).  The system garbage collector attempts to make all lists compact; it relocates  and rearranges all of list storage using temporary storage.  This unique list-compacting garbage collection  algorithm is presented in detail.  Several classes of the macros used to implement the system are described.   Finally, consideration is given to those design factors essential to the success of a plex processing  system implementation.</abstract>
	<conference>CACM September, 1969</conference>
	<authors>
	<author>Hansen, W. J.</author>
	</authors>
	<keywords>data structure, data representation, list structure, list representation, list, compact list, garbage  collection, relocation, storage reclamation, macro, primitive list operations, plex processing, plex,  pointer, list processing system, LISP, free storage</keywords>
	<version>3.49 4.20 4.22 4.49 4.9</version>
	<location>CA690902 JB February 15, 1978  5:01 PM</location>
	<citations>
	<citation>1853	4	1853</citation>
	<citation>2003	4	1853</citation>
	<citation>1710	5	1853</citation>
	<citation>1853	5	1853</citation>
	<citation>1853	5	1853</citation>
	<citation>1853	5	1853</citation>
	<citation>1972	5	1853</citation>
	<citation>2249	5	1853</citation>
	<citation>2736	5	1853</citation>
	<citation>3074	5	1853</citation>
	<citation>1626	6	1853</citation>
	<citation>1626	6	1853</citation>
	<citation>1708	6	1853</citation>
	<citation>1826	6	1853</citation>
	<citation>1826	6	1853</citation>
	<citation>1826	6	1853</citation>
	<citation>1853	6	1853</citation>
	<citation>1853	6	1853</citation>
	<citation>1853	6	1853</citation>
	<citation>1853	6	1853</citation>
	<citation>1972	6	1853</citation>
	<citation>1972	6	1853</citation>
	<citation>2723	6	1853</citation>
	</citations>
	</document>
	<document id= '1852'>
	<title>A Base for a Mobile Programming System</title>
	<abstract>An algorithm for a macro processor which has been used as the base of an implementation, by  bootstrapping, of processors for programming languages is described.  This algorithm can be easily implemented  on contemporary computing machines.  Experience with programming languages whose implementation is based on this algorithm indicates that such a language can be transferred to a new machine in less than one  man-week without using the old machine.</abstract>
	<conference>CACM September, 1969</conference>
	<authors>
	<author>Orgass, R. J.</author>
	<author>Waite, W. M.</author>
	</authors>
	<keywords>bootstrapping, macro processing, machine independence, programming languages, implementation techniques</keywords>
	<version>4.12 4.22</version>
	<location>CA690903 JB February 15, 1978  4:54 PM</location>
	<citations>
	<citation>1530	4	1852</citation>
	<citation>1781	4	1852</citation>
	<citation>1852	4	1852</citation>
	<citation>2034	4	1852</citation>
	<citation>1565	5	1852</citation>
	<citation>1852	5	1852</citation>
	<citation>1852	5	1852</citation>
	<citation>1852	5	1852</citation>
	<citation>2034	5	1852</citation>
	<citation>984	6	1852</citation>
	<citation>1231	6	1852</citation>
	<citation>1565	6	1852</citation>
	<citation>1852	6	1852</citation>
	<citation>1926	6	1852</citation>
	<citation>1947	6	1852</citation>
	</citations>
	</document>
	<document id= '1851'>
	<title>Generator of Spanning Trees (Algorithms 354 [H])</title>
	<conference>CACM September, 1969</conference>
	<authors>
	<author>McIlroy, M. D.</author>
	</authors>
	<keywords>spanning trees, trees, graphs</keywords>
	<version>5.32</version>
	<location>CA690904 JB February 15, 1978  4:50 PM</location>
	<citations>
	<citation>1851	5	1851</citation>
	<citation>1851	5	1851</citation>
	<citation>1851	5	1851</citation>
	</citations>
	</document>
	<document id= '1850'>
	<title>Generation of Permutations in Lexicographic Order (Algorithm 323 [G6])</title>
	<conference>CACM September, 1969</conference>
	<authors>
	<author>Leitch, I. M.</author>
	</authors>
	<keywords>permutations, direct lexicographic order, reverse lexicographic order, lexicographic generation</keywords>
	<version>5.39</version>
	<location>CA690905 JB February 15, 1978  4:48 PM</location>
	<citations>
	<citation>1850	5	1850</citation>
	<citation>1850	5	1850</citation>
	<citation>1850	5	1850</citation>
	</citations>
	</document>
	<document id= '1849'>
	<title>Function Minimization (Algorithm 251 [E4])</title>
	<conference>CACM September, 1969</conference>
	<authors>
	<author>Hamilton, P. A.</author>
	<author>Boothroyd, J.</author>
	</authors>
	<keywords>function minimization</keywords>
	<version>5.19</version>
	<location>CA690906 JB February 15, 1978  4:38 PM</location>
	<citations>
	<citation>1849	5	1849</citation>
	<citation>1849	5	1849</citation>
	<citation>1849	5	1849</citation>
	<citation>2190	5	1849</citation>
	<citation>1372	6	1849</citation>
	<citation>1849	6	1849</citation>
	</citations>
	</document>
	<document id= '1848'>
	<title>The Damped Taylor's Series Method for Minimizing a Sum of Squares and for Solving Systems of  Nonlinear Equations (Algorithm 315 [E4, C5])</title>
	<conference>CACM September, 1969</conference>
	<authors>
	<author>Silverman, G.</author>
	</authors>
	<keywords>solution of equations, least squares approximation, Newton's method</keywords>
	<version>5.13 5.14 5.15</version>
	<location>CA690907 JB February 15, 1978  4:32 PM</location>
	<citations>
	<citation>1848	5	1848</citation>
	<citation>1848	5	1848</citation>
	<citation>1848	5	1848</citation>
	</citations>
	</document>
	<document id= '1847'>
	<title>An Algorithm for Finding a Fundamental Set of Cycles of a Graph</title>
	<abstract>A fast method is presented for finding a fundamental set of cycles for an undirected finite  graph.  A spanning tree is grown and the vertices examined in turn, unexamined vertices being stored  in a pushdown list to await examination.  One stage in the process is to take the top element v of the  pushdown list and examine it, i.e. inspect all those edges (v,z) of the graph for which z has not yet  been examined.  If z is already in the tree, a fundamental cycle is added; if not, the edge (v,z) is  placed in the tree.  There is exactly one such stage for each of the n vertices of the graph.  For large  n, the store required in creases as n^2 and the time as n^g where g depends on the type of graph involved.   g is bounded below by 2 and above by 3, and it is shown that both bounds are attained.  In terms of  storage our algorithm is similar to that of Gotlieb and Corneil and superior to that of Welch; in terms  of speed it is similar to that of Welch and superior to that of Gotlieb and Corneil.  Testsshow our  algorithm to be remarkably efficient (g=2) on random graphs.</abstract>
	<conference>CACM September, 1969</conference>
	<authors>
	<author>Paton, K.</author>
	</authors>
	<keywords>fundamental cycle set, graph, algorithm, cycle, spanning tree</keywords>
	<version>5.32</version>
	<location>CA690909 JB February 15, 1978  4:29 PM</location>
	<citations>
	<citation>1847	4	1847</citation>
	<citation>1961	4	1847</citation>
	<citation>2052	4	1847</citation>
	<citation>1504	5	1847</citation>
	<citation>1847	5	1847</citation>
	<citation>1847	5	1847</citation>
	<citation>1847	5	1847</citation>
	<citation>1961	5	1847</citation>
	<citation>2177	5	1847</citation>
	<citation>2763	5	1847</citation>
	<citation>1369	6	1847</citation>
	<citation>1504	6	1847</citation>
	<citation>1847	6	1847</citation>
	<citation>1847	6	1847</citation>
	<citation>1847	6	1847</citation>
	</citations>
	</document>
	<document id= '1846'>
	<title>On Simulating Networks of Parallel Processes in Which Simultaneous Events May Occur</title>
	<abstract>Some of the problems of simulating discrete event systems, particularly computer systems, on  a conventional digital computer are dealt with.  The systems are assumed to be described as a network  of interconnected sequential processes.  Briefly reviewed are the common techniques used to handle such  simulations when simultaneous events do not occur, can be ignored, or can be handled by simple priority  rules.  Following this, the problem of dealing with simultaneous events in separate processes is introduced.   An abstraction of this problem is developed which admits solution for a majority of commonly encountered problems.  The technique will either find a method of simulating the parallel events or report that none  can be found.  In some of the latter cases it is shown to be possible to find a solution by extending  the information available to the solution technique, but in many cases the technique becomes computationally  unfeasible when the additional information is provided.</abstract>
	<conference>CACM September, 1969</conference>
	<authors>
	<author>Parnas, D. L.</author>
	</authors>
	<keywords>simulation, parallel processes, simultaneous events, picture processing, computer system simulation</keywords>
	<version>3.19 3.24 4.24 5.9 6.9</version>
	<location>CA690910 JB February 15, 1978  4:21 PM</location>
	<citations>
	<citation>1541	4	1846</citation>
	<citation>1805	4	1846</citation>
	<citation>1846	4	1846</citation>
	<citation>1846	4	1846</citation>
	<citation>1846	4	1846</citation>
	<citation>1846	4	1846</citation>
	<citation>1846	4	1846</citation>
	<citation>1892	4	1846</citation>
	<citation>2060	4	1846</citation>
	<citation>2188	4	1846</citation>
	<citation>2218	4	1846</citation>
	<citation>2218	4	1846</citation>
	<citation>2317	4	1846</citation>
	<citation>2630	4	1846</citation>
	<citation>2650	4	1846</citation>
	<citation>3112	4	1846</citation>
	<citation>1380	5	1846</citation>
	<citation>1424	5	1846</citation>
	<citation>1484	5	1846</citation>
	<citation>1572	5	1846</citation>
	<citation>1846	5	1846</citation>
	<citation>1846	5	1846</citation>
	<citation>1846	5	1846</citation>
	<citation>576	5	1846</citation>
	<citation>3064	5	1846</citation>
	<citation>1846	6	1846</citation>
	<citation>1939	6	1846</citation>
	<citation>2742	6	1846</citation>
	<citation>2767	6	1846</citation>
	<citation>2936	6	1846</citation>
	</citations>
	</document>
	<document id= '1845'>
	<title>Loader Standardization for Overlay Programs</title>
	<abstract>The overlay capability is described for four of the third generation computer systems: CDC-6000,  GE-635, IBM-360, and UNIVAC-1108.  A critique of the first three systems is based on actual experience  with a large overlaid trajectory simulation program; a short history and description of this program  is presented.  A standardization of minimum capabilities for loaders is recommended so that programs  which must operate under more than one computer system may be easily converted and maintained.  A proposal  that overlay software incorporates a memory occupation specification concept instead of the conditional  tree structure is delineated.  This concept provides more efficient and cost-effective utilization of  the memory as well as increased flexibility in program structure.</abstract>
	<conference>CACM October, 1969</conference>
	<authors>
	<author>Lanzano, B. C.</author>
	</authors>
	<keywords>loader, overlay, partition, region, segmentation, linkage, linkage editor, standardization, memory  utilization, memory occupation, tree structure, CDC-6000, GE-635, IBM-360, UNIVAC-1108</keywords>
	<version>4.10 4.12 4.19 4.40</version>
	<location>CA691001 JB February 15, 1978  4:09 PM</location>
	<citations>
	<citation>1845	4	1845</citation>
	<citation>1900	4	1845</citation>
	<citation>2083	4	1845</citation>
	<citation>2154	4	1845</citation>
	<citation>2270	4	1845</citation>
	<citation>2693	4	1845</citation>
	<citation>988	5	1845</citation>
	<citation>1845	5	1845</citation>
	<citation>1845	5	1845</citation>
	<citation>1845	5	1845</citation>
	<citation>2343	5	1845</citation>
	<citation>1173	6	1845</citation>
	<citation>1774	6	1845</citation>
	<citation>1845	6	1845</citation>
	</citations>
	</document>
	<document id= '1844'>
	<title>A Modular Computer Sharing System</title>
	<abstract>An alternative approach to the design and organization of a general purpose interactive multiterminal  computing system is presented.  The system organization described is a conceptually simple arrangement  of a bank of interchangeable computers, each of which is a memory/processor pair, that are assigned to  process terminal jobs as they arrive.  One of the computers serves as the master or control computer  and supervises the collection and distribution of messages from and to the remote terminals.  In the  simplest form there is a disk drive for each connected terminal.  A crosspoint switching network allows  any such disk drive to be connected to any computer.  Thus, while each active terminal user "occupies"  a dedicated disk drive, he may share the computer with many other terminal users in a simple manner.   The ratio of users to computers is dependent on both the size and power of the machines used and the  computation requirements of the particular mix of users.  This system organization is inherently a simpler  and therefore more reliable approach to time-sharing computers and has the potential of a highly available  system at relatively low cost.  Economic configurations are possible for a range of systems sizes that  span at least one order of magnitude.  Finally, problem programs developed by remote terminal users can  be run on a dedicated batch system if compatible computers are used.</abstract>
	<conference>CACM October, 1969</conference>
	<authors>
	<author>Baskin, H. B.</author>
	<author>Horowitz, E. B.</author>
	<author>Tennison, R. D.</author>
	<author>Rittenhouse, L. E.</author>
	</authors>
	<keywords>multiple terminal systems, terminal oriented systems, multiple processor systems, high availability,  conversational systems, general purpose time-sharing systems, real-time response system, modular constructed  systems, modular computer-sharing systems, graphics, file switch, intercomputer communications, control  computer, problem computer, roll-in, roll-out</keywords>
	<version>6.21</version>
	<location>CA691002 JB February 15, 1978  3:52 PM</location>
	<citations>
	<citation>1844	5	1844</citation>
	<citation>1844	5	1844</citation>
	<citation>1844	5	1844</citation>
	</citations>
	</document>
	<document id= '1843'>
	<title>The Choice of Base</title>
	<abstract>A digital computer is considered, whose memory words are composed on N r-state devices plus  two sign bits (two state devices).  The choice of base B for the internal representation of floating-point  numbers on such a computer is discussed.  It is shown that in a certain sense B= r is best.</abstract>
	<conference>CACM October, 1969</conference>
	<authors>
	<author>Brown, W. S.</author>
	<author>Richman, P. L.</author>
	</authors>
	<keywords>floating-point, accuracy, base choice, number representations</keywords>
	<version>5.11 6.32</version>
	<location>CA691003 JB February 15, 1978  3:33 PM</location>
	<citations>
	<citation>1783	4	1843</citation>
	<citation>1843	4	1843</citation>
	<citation>1843	4	1843</citation>
	<citation>1634	5	1843</citation>
	<citation>1783	5	1843</citation>
	<citation>1843	5	1843</citation>
	<citation>1843	5	1843</citation>
	<citation>1843	5	1843</citation>
	</citations>
	</document>
	<document id= '1842'>
	<title>An Algorithm for Generating Ising Configurations (Algorithm 355 [Z])</title>
	<conference>CACM October, 1969</conference>
	<authors>
	<author>Simoes, J. M. S.</author>
	</authors>
	<keywords>Ising problem, zero-one sequences</keywords>
	<version>5.39</version>
	<location>CA691004 JB February 15, 1978  3:27 PM</location>
	<citations>
	<citation>1842	5	1842</citation>
	<citation>1842	5	1842</citation>
	<citation>1842	5	1842</citation>
	<citation>2066	5	1842</citation>
	<citation>1833	6	1842</citation>
	<citation>1842	6	1842</citation>
	</citations>
	</document>
	<document id= '1841'>
	<title>A Prime Number Generator Using The Treesort Principle (Algorithm 356 [A1])</title>
	<conference>CACM October, 1969</conference>
	<authors>
	<author>Singleton, R. C.</author>
	</authors>
	<keywords>prime numbers, number theory, sorting</keywords>
	<version>3.15 5.30 5.31</version>
	<location>CA691005 JB February 15, 1978  3:25 PM</location>
	<citations>
	<citation>1841	4	1841</citation>
	<citation>1841	4	1841</citation>
	<citation>1841	4	1841</citation>
	<citation>1967	4	1841</citation>
	<citation>2120	4	1841</citation>
	<citation>2120	4	1841</citation>
	<citation>2927	4	1841</citation>
	<citation>2927	4	1841</citation>
	<citation>1539	5	1841</citation>
	<citation>1841	5	1841</citation>
	<citation>1841	5	1841</citation>
	<citation>1841	5	1841</citation>
	<citation>1841	5	1841</citation>
	<citation>377	5	1841</citation>
	<citation>2927	5	1841</citation>
	<citation>1537	6	1841</citation>
	<citation>1539	6	1841</citation>
	<citation>1539	6	1841</citation>
	<citation>1538	6	1841</citation>
	<citation>1840	6	1841</citation>
	<citation>1841	6	1841</citation>
	<citation>1841	6	1841</citation>
	<citation>377	6	1841</citation>
	</citations>
	</document>
	<document id= '1840'>
	<title>An Efficient Prime Number Generator (Algorithm 357 [A1])</title>
	<conference>CACM October, 1969</conference>
	<authors>
	<author>Singleton, R. C.</author>
	</authors>
	<keywords>prime numbers, factoring, number theory</keywords>
	<version>3.15 5.30</version>
	<location>CA691006 JB February 15, 1978  3:23 PM</location>
	<citations>
	<citation>1840	5	1840</citation>
	<citation>1840	5	1840</citation>
	<citation>1840	5	1840</citation>
	<citation>2927	5	1840</citation>
	<citation>1537	6	1840</citation>
	<citation>1539	6	1840</citation>
	<citation>1538	6	1840</citation>
	<citation>1840	6	1840</citation>
	<citation>1841	6	1840</citation>
	</citations>
	</document>
	<document id= '1839'>
	<title>Singular Value Decomposition of a Complex Matrix (Algorithm 358 [F1, 4,5])</title>
	<conference>CACM October, 1969</conference>
	<authors>
	<author>Businger, P. A.</author>
	<author>Goulub, G. H.</author>
	</authors>
	<keywords>singular values, matrix decomposition, least squares solution, pseudoinverse</keywords>
	<version>5.14</version>
	<location>CA691007 JB February 15, 1978  3:22 PM</location>
	<citations>
	<citation>1839	5	1839</citation>
	<citation>1839	5	1839</citation>
	<citation>1839	5	1839</citation>
	</citations>
	</document>
	<document id= '1838'>
	<title>Normal Curve Integral (Algorithm 304 [S15])</title>
	<conference>CACM October, 1969</conference>
	<authors>
	<author>Adams, A. G.</author>
	</authors>
	<keywords>normal curve integral, probability, special functions</keywords>
	<version>5.5 5.12</version>
	<location>CA691008 JB February 15, 1978  3:19 PM</location>
	<citations>
	<citation>1838	4	1838</citation>
	<citation>1760	5	1838</citation>
	<citation>1838	5	1838</citation>
	<citation>1838	5	1838</citation>
	<citation>1838	5	1838</citation>
	</citations>
	</document>
	<document id= '1837'>
	<title>An Algol Convolution Procedure Based on the Fast Fourier Transform (Algorithm 345 [C6])</title>
	<conference>CACM October, 1969</conference>
	<authors>
	<author>Singleton, R. C.</author>
	</authors>
	<keywords>fast Fourier transform, complex Fourier transform, multivariate Fourier transform, Fourier series,  harmonic analysis, spectral analysis, orthogonal polynomials, orthogonal transformation, convolution,  auto covariance, autocorrelation, cross-correlation, digital filtering, permutation</keywords>
	<version>3.15 3.83 5.12 5.14</version>
	<location>CA691009 JB February 15, 1978  3:17 PM</location>
	<citations>
	<citation>1837	5	1837</citation>
	<citation>1837	5	1837</citation>
	<citation>1837	5	1837</citation>
	</citations>
	</document>
	<document id= '1836'>
	<title>A New Method for Determining Linear Precedence Functions for Precedence Grammars</title>
	<abstract>The precedence relations of a precedence grammar can be precisely described by a two-dimensional  precedence matrix.  Often the information in the matrix can be represented more concisely by a pair of  vectors, called linear precedence functions.  A new algorithm is presented for obtaining the linear precedence functions when given the precedence matrix; this algorithm is shown to possess several computational  advantages.</abstract>
	<conference>CACM October, 1969</conference>
	<authors>
	<author>Bell, J. R.</author>
	</authors>
	<keywords>Boolean matrices, syntax, precedence grammar context-free parsing, transition matrix, precedence  functions</keywords>
	<version>4.12</version>
	<location>CA691010 JB February 15, 1978  3:13 PM</location>
	<citations>
	<citation>1379	4	1836</citation>
	<citation>1542	4	1836</citation>
	<citation>1665	4	1836</citation>
	<citation>1683	4	1836</citation>
	<citation>1693	4	1836</citation>
	<citation>1693	4	1836</citation>
	<citation>1768	4	1836</citation>
	<citation>1781	4	1836</citation>
	<citation>1781	4	1836</citation>
	<citation>1787	4	1836</citation>
	<citation>1787	4	1836</citation>
	<citation>1824	4	1836</citation>
	<citation>1825	4	1836</citation>
	<citation>1836	4	1836</citation>
	<citation>1836	4	1836</citation>
	<citation>1836	4	1836</citation>
	<citation>1836	4	1836</citation>
	<citation>1836	4	1836</citation>
	<citation>1861	4	1836</citation>
	<citation>1945	4	1836</citation>
	<citation>1945	4	1836</citation>
	<citation>2015	4	1836</citation>
	<citation>2015	4	1836</citation>
	<citation>2060	4	1836</citation>
	<citation>2060	4	1836</citation>
	<citation>2061	4	1836</citation>
	<citation>2061	4	1836</citation>
	<citation>2082	4	1836</citation>
	<citation>2091	4	1836</citation>
	<citation>2091	4	1836</citation>
	<citation>2110	4	1836</citation>
	<citation>2127	4	1836</citation>
	<citation>2152	4	1836</citation>
	<citation>2179	4	1836</citation>
	<citation>2179	4	1836</citation>
	<citation>2187	4	1836</citation>
	<citation>2317	4	1836</citation>
	<citation>2340	4	1836</citation>
	<citation>2340	4	1836</citation>
	<citation>2356	4	1836</citation>
	<citation>2545	4	1836</citation>
	<citation>2546	4	1836</citation>
	<citation>2546	4	1836</citation>
	<citation>2603	4	1836</citation>
	<citation>2698	4	1836</citation>
	<citation>2698	4	1836</citation>
	<citation>2698	4	1836</citation>
	<citation>2708	4	1836</citation>
	<citation>2708	4	1836</citation>
	<citation>2733	4	1836</citation>
	<citation>2824	4	1836</citation>
	<citation>2982	4	1836</citation>
	<citation>2986	4	1836</citation>
	<citation>3045	4	1836</citation>
	<citation>3045	4	1836</citation>
	<citation>3093	4	1836</citation>
	<citation>1191	5	1836</citation>
	<citation>1477	5	1836</citation>
	<citation>1491	5	1836</citation>
	<citation>1781	5	1836</citation>
	<citation>1836	5	1836</citation>
	<citation>1836	5	1836</citation>
	<citation>1836	5	1836</citation>
	<citation>2340	5	1836</citation>
	<citation>2982	5	1836</citation>
	<citation>2986	5	1836</citation>
	<citation>577	5	1836</citation>
	<citation>1191	6	1836</citation>
	<citation>1491	6	1836</citation>
	<citation>1491	6	1836</citation>
	<citation>1491	6	1836</citation>
	<citation>1683	6	1836</citation>
	<citation>1683	6	1836</citation>
	<citation>1836	6	1836</citation>
	<citation>1836	6	1836</citation>
	<citation>1836	6	1836</citation>
	<citation>2179	6	1836</citation>
	<citation>2340	6	1836</citation>
	<citation>2340	6	1836</citation>
	</citations>
	</document>
	<document id= '1835'>
	<title>The IITRAN Programming Language</title>
	<abstract>The IITRAN language, developed to be used by students, and its important important features  are described. IITRAN is a procedure-oriented language with a one-level block structure and a variety  of data types.  Several novel and powerful features are included.  A discussion of design principles  to be followed in a student language is given.</abstract>
	<conference>CACM October, 1969</conference>
	<authors>
	<author>Dewar, R. B. K.</author>
	<author>Hochsprung, R. R.</author>
	</authors>
	<keywords>languages programming languages, student programming systems, language design, high school programs,  college courses</keywords>
	<version>1.51 1.52 4.12 4.22</version>
	<location>CA691011 JB February 15, 1978  1:54 PM</location>
	<citations>
	<citation>1835	5	1835</citation>
	<citation>1835	5	1835</citation>
	<citation>1835	5	1835</citation>
	<citation>2971	5	1835</citation>
	<citation>1835	6	1835</citation>
	<citation>1974	6	1835</citation>
	<citation>2534	6	1835</citation>
	</citations>
	</document>
	<document id= '1834'>
	<title>An Axiomatic Basis for Computer Programming</title>
	<abstract>In this paper an attempt is made to explore the logical foundations of computer programming  by use of techniques which were first applied in the study of geometry and have later been extended to  other branches of mathematics.  This involves the elucidation of sets of axioms and rules of inference  which can be used in proofs of the properties of computer programs.  Examples are given of such axioms  and rules, and a formal proof of a simple theorem is displayed.  Finally, it is argued that important  advantages, both theoretical and practical, may follow from a pursuance of these topics.</abstract>
	<conference>CACM October, 1969</conference>
	<authors>
	<author>Hoare, C. A. R.</author>
	</authors>
	<keywords>axiomatic method, theory of programming, proofs of programs, formal language definition, programming  language design, machine-independent programming, program documentation</keywords>
	<version>4.0 4.21 4.22 5.20 5.21 5.23 5.24</version>
	<location>CA691012 JB February 15, 1978  1:48 PM</location>
	<citations>
	<citation>1834	5	1834</citation>
	<citation>1834	5	1834</citation>
	<citation>1834	5	1834</citation>
	<citation>2021	5	1834</citation>
	<citation>2222	5	1834</citation>
	<citation>2227	5	1834</citation>
	<citation>2315	5	1834</citation>
	<citation>2326	5	1834</citation>
	<citation>2470	5	1834</citation>
	<citation>2732	5	1834</citation>
	<citation>2865	5	1834</citation>
	<citation>2896	5	1834</citation>
	<citation>2943	5	1834</citation>
	<citation>3014	5	1834</citation>
	<citation>3068	5	1834</citation>
	<citation>3077	5	1834</citation>
	<citation>3143	5	1834</citation>
	<citation>196	6	1834</citation>
	<citation>970	6	1834</citation>
	<citation>1303	6	1834</citation>
	<citation>1303	6	1834</citation>
	<citation>1323	6	1834</citation>
	<citation>1348	6	1834</citation>
	<citation>1469	6	1834</citation>
	<citation>1800	6	1834</citation>
	<citation>1818	6	1834</citation>
	<citation>210	6	1834</citation>
	<citation>1834	6	1834</citation>
	<citation>1834	6	1834</citation>
	<citation>1834	6	1834</citation>
	<citation>1834	6	1834</citation>
	<citation>1834	6	1834</citation>
	<citation>1834	6	1834</citation>
	<citation>1834	6	1834</citation>
	<citation>1834	6	1834</citation>
	<citation>1834	6	1834</citation>
	<citation>1834	6	1834</citation>
	<citation>1834	6	1834</citation>
	<citation>1834	6	1834</citation>
	<citation>1834	6	1834</citation>
	<citation>1834	6	1834</citation>
	<citation>1987	6	1834</citation>
	<citation>307	6	1834</citation>
	<citation>2042	6	1834</citation>
	<citation>2060	6	1834</citation>
	<citation>2192	6	1834</citation>
	<citation>2227	6	1834</citation>
	<citation>2264	6	1834</citation>
	<citation>2457	6	1834</citation>
	<citation>2597	6	1834</citation>
	<citation>2723	6	1834</citation>
	<citation>2732	6	1834</citation>
	<citation>2869	6	1834</citation>
	<citation>2981	6	1834</citation>
	<citation>3186	6	1834</citation>
	<citation>728	6	1834</citation>
	</citations>
	</document>
	<document id= '1833'>
	<title>An Ambiguity in the Description of ALGOL 60</title>
	<conference>CACM October, 1969</conference>
	<authors>
	<author>Herriot, J. G.</author>
	</authors>
	<keywords>Ising problem, zero-one sequences</keywords>
	<version>5.39</version>
	<location>CA691013 JB February 15, 1978  1:40 PM</location>
	<citations>
	<citation>1833	5	1833</citation>
	<citation>1833	5	1833</citation>
	<citation>1833	5	1833</citation>
	<citation>2066	5	1833</citation>
	<citation>1833	6	1833</citation>
	<citation>1842	6	1833</citation>
	</citations>
	</document>
	<document id= '1832'>
	<title>Minimax Logarithmic Error</title>
	<conference>CACM October, 1969</conference>
	<authors>
	<author>Dunham, C. B.</author>
	</authors>
	<keywords>logarithmic error, transformed rational approximation, square root</keywords>
	<version>5.10</version>
	<location>CA691014 JB February 15, 1978  1:38 PM</location>
	<citations>
	<citation>1832	4	1832</citation>
	<citation>1999	4	1832</citation>
	<citation>2159	4	1832</citation>
	<citation>1832	5	1832</citation>
	<citation>1832	5	1832</citation>
	<citation>1832	5	1832</citation>
	<citation>1932	5	1832</citation>
	</citations>
	</document>
	<document id= '1831'>
	<title>A Comment on Optimal Tree Structures</title>
	<conference>CACM October, 1969</conference>
	<authors>
	<author>Stanfel, L. E.</author>
	</authors>
	<keywords>information retrieval, file searching, tree structures, double chaining</keywords>
	<version>3.70 3.73 3.74</version>
	<location>CA691015 JB February 15, 1978  1:31 PM</location>
	<citations>
	<citation>1831	5	1831</citation>
	<citation>1831	5	1831</citation>
	<citation>1831	5	1831</citation>
	<citation>2257	5	1831</citation>
	<citation>2360	5	1831</citation>
	<citation>849	6	1831</citation>
	<citation>849	6	1831</citation>
	<citation>1831	6	1831</citation>
	<citation>1831	6	1831</citation>
	<citation>1936	6	1831</citation>
	<citation>1936	6	1831</citation>
	<citation>2360	6	1831</citation>
	</citations>
	</document>
	<document id= '1830'>
	<title>Retrieval Times for a Packed Direct Access Inverted File</title>
	<conference>CACM October, 1969</conference>
	<authors>
	<author>Bayes, A. J.</author>
	</authors>
	<keywords>information retrieval, direct access memory, data base, inverted list</keywords>
	<version>3.70 4.41</version>
	<location>CA691016 JB February 15, 1978  1:27 PM</location>
	<citations>
	<citation>1830	5	1830</citation>
	<citation>1830	5	1830</citation>
	<citation>1830	5	1830</citation>
	</citations>
	</document>
	<document id= '1829'>
	<title>An Interactive Graphical Display Monitor in a Batch-Processing Environment with Remote Entry</title>
	<abstract>A graphic monitor program is described.  It was developed at Carnegie-Mellon University for  the CDC G21 computer, which is a general purpose, batch-processing system with remote entry.  The existing  G21 system and the graphics hardware are described.  The graphic monitor is a resident auxiliary monitor  which provides comprehensive managerial capability over the graphical system in response to commands  from the human user.  It also will respond to commands from a user program through a similar interface,  where routine calls take the place of manual actions.  Thus the human and program can interact on a symmetrical  and equal basis through the medium of the graphic monitor.  The choice made in designing the graphic  monitor, given the constraints of the existing hardware and computer system, are discussed.  The structure  of the monitor program and the human and program interfaces are described.  There is also a transient  swapping version with a small resident part, and provision for swapped used submonitors.</abstract>
	<conference>CACM November, 1969</conference>
	<authors>
	<author>Bond, A. H.</author>
	<author>Rightnour, J.</author>
	</authors>
	<keywords>graphic monitor, man/machine interaction, graphic interface, graphic in batch environment, design  of graphical system</keywords>
	<version>4.30 4.31 4.39 4.41</version>
	<location>CA691101 JB February 15, 1978  1:22 PM</location>
	<citations>
	<citation>1829	5	1829</citation>
	<citation>1829	5	1829</citation>
	<citation>1829	5	1829</citation>
	<citation>2357	5	1829</citation>
	<citation>1523	6	1829</citation>
	<citation>1829	6	1829</citation>
	<citation>2035	6	1829</citation>
	</citations>
	</document>
	<document id= '1828'>
	<title>Synchronization in a Parallel-Accessed Data Base</title>
	<abstract>The following problem is considered:  Given a data base which can be manipulated simultaneously  by more than one process, what are the rules for synchronization which will maximize the amount of parallel  activity allowed.  It is assumed that the data base can be represented as a graph.  An example of such  a data base is a hierarchy of directories for an on-line file system.  Methods for synchronization of  processes are examined; their validity is discussed and their performance compared.</abstract>
	<conference>CACM November, 1969</conference>
	<authors>
	<author>Shoshani, A.</author>
	<author>Bernstein, A. J.</author>
	</authors>
	<keywords>parallel accessing, parallel search, file search, data base, synchronization, locking, deadlock</keywords>
	<version>3.73 3.74 4.32</version>
	<location>CA691102 JB February 15, 1978  1:13 PM</location>
	<citations>
	<citation>1805	4	1828</citation>
	<citation>1828	4	1828</citation>
	<citation>1828	4	1828</citation>
	<citation>1854	4	1828</citation>
	<citation>1854	4	1828</citation>
	<citation>1877	4	1828</citation>
	<citation>1960	4	1828</citation>
	<citation>2150	4	1828</citation>
	<citation>2187	4	1828</citation>
	<citation>2317	4	1828</citation>
	<citation>2319	4	1828</citation>
	<citation>2377	4	1828</citation>
	<citation>2342	4	1828</citation>
	<citation>2376	4	1828</citation>
	<citation>2379	4	1828</citation>
	<citation>2424	4	1828</citation>
	<citation>2482	4	1828</citation>
	<citation>2618	4	1828</citation>
	<citation>2632	4	1828</citation>
	<citation>2704	4	1828</citation>
	<citation>2723	4	1828</citation>
	<citation>2738	4	1828</citation>
	<citation>2740	4	1828</citation>
	<citation>2741	4	1828</citation>
	<citation>2867	4	1828</citation>
	<citation>3184	4	1828</citation>
	<citation>1748	5	1828</citation>
	<citation>1749	5	1828</citation>
	<citation>1828	5	1828</citation>
	<citation>1828	5	1828</citation>
	<citation>1828	5	1828</citation>
	</citations>
	</document>
	<document id= '1827'>
	<title>Performance Monitoring in a Time-Sharing System</title>
	<abstract>A software measurement facility which is part of a general purpose time-sharing system is described.   The Date Collection Facility (DCF) has been implemented in the Michigan Terminal System (MTS) for the  System/360 model 67.  It exists for the purpose of monitoring operating system and user program behavior  and performance.  The overall structure of MTS is outlined in order to explain the implementation of  the DCF.  Events in the system are identified and recorded from within the supervisor, and dumped to  magnetic tape by an auxiliary program for off-line processing.  Events in user programs which are unrelated  to system actions are recorded with a supervisor call.  The time of occurrence of each event is accurately  recorded, and data items are further identified by job and type.  The overhead associated with data collection  and its interference with normal jobs is carefully analyzed, and both are shown to be minimal.  Several  examples are given of information obtained with the facility and of applications in which it has been  useful.  Some general guidelines are offered for the construction of future monitoring programs.</abstract>
	<conference>CACM November, 1969</conference>
	<authors>
	<author>Pinkerton, T. B.</author>
	</authors>
	<keywords>performance monitoring, performance measurement, program behavior, performance data, multiprogramming  performance, software measurement, time-sharing performance, system evaluation, software monitor, software  instrumentation</keywords>
	<version>4.31 4.32 4.39 4.42 4.43</version>
	<location>CA691103 JB February 15, 1978  1:07 PM</location>
	<citations>
	<citation>1827	5	1827</citation>
	<citation>1827	5	1827</citation>
	<citation>1827	5	1827</citation>
	<citation>2667	5	1827</citation>
	<citation>2668	5	1827</citation>
	<citation>1604	6	1827</citation>
	<citation>1604	6	1827</citation>
	<citation>1728	6	1827</citation>
	<citation>1728	6	1827</citation>
	<citation>1761	6	1827</citation>
	<citation>1827	6	1827</citation>
	<citation>1827	6	1827</citation>
	<citation>2677	6	1827</citation>
	</citations>
	</document>
	<document id= '1826'>
	<title>A LISP Garbage-Collector for Virtual-Memory Computer Systems</title>
	<abstract>In this paper a garbage-collection algorithm for list-processing systems which operate within  very large virtual memories is described.  The object of the algorithm is more the compaction of active  storage than the discovery of free storage.  Because free storage is never really exhausted, the decision  to garbage collect is not easily made; therefore, various criteria of this decision are discussed.</abstract>
	<conference>CACM November, 1969</conference>
	<authors>
	<author>Fenichel, R. R.</author>
	<author>Yochelson, J. C.</author>
	</authors>
	<keywords>garbage-collector, virtual memory, list-processing, storage-allocation</keywords>
	<version>4.19 4.49</version>
	<location>CA691104 JB February 15, 1978  12:57 PM</location>
	<citations>
	<citation>1024	4	1826</citation>
	<citation>1051	4	1826</citation>
	<citation>1102	4	1826</citation>
	<citation>1132	4	1826</citation>
	<citation>1390	4	1826</citation>
	<citation>1486	4	1826</citation>
	<citation>1549	4	1826</citation>
	<citation>1706	4	1826</citation>
	<citation>1708	4	1826</citation>
	<citation>1781	4	1826</citation>
	<citation>1826	4	1826</citation>
	<citation>1826	4	1826</citation>
	<citation>1860	4	1826</citation>
	<citation>1878	4	1826</citation>
	<citation>378	4	1826</citation>
	<citation>2060	4	1826</citation>
	<citation>2155	4	1826</citation>
	<citation>2156	4	1826</citation>
	<citation>2168	4	1826</citation>
	<citation>2168	4	1826</citation>
	<citation>2249	4	1826</citation>
	<citation>2314	4	1826</citation>
	<citation>2719	4	1826</citation>
	<citation>2719	4	1826</citation>
	<citation>2723	4	1826</citation>
	<citation>2736	4	1826</citation>
	<citation>2833	4	1826</citation>
	<citation>2838	4	1826</citation>
	<citation>2842	4	1826</citation>
	<citation>2855	4	1826</citation>
	<citation>2879	4	1826</citation>
	<citation>3077	4	1826</citation>
	<citation>3080	4	1826</citation>
	<citation>3106	4	1826</citation>
	<citation>627	4	1826</citation>
	<citation>106	4	1826</citation>
	<citation>210	5	1826</citation>
	<citation>1626	5	1826</citation>
	<citation>1826	5	1826</citation>
	<citation>1826	5	1826</citation>
	<citation>1826	5	1826</citation>
	<citation>1972	5	1826</citation>
	<citation>2156	5	1826</citation>
	<citation>2168	5	1826</citation>
	<citation>2438	5	1826</citation>
	<citation>2723	5	1826</citation>
	<citation>2736	5	1826</citation>
	<citation>2833	5	1826</citation>
	<citation>2855	5	1826</citation>
	<citation>3074	5	1826</citation>
	<citation>3112	5	1826</citation>
	<citation>106	6	1826</citation>
	<citation>1380	6	1826</citation>
	<citation>1549	6	1826</citation>
	<citation>1549	6	1826</citation>
	<citation>1626	6	1826</citation>
	<citation>1626	6	1826</citation>
	<citation>1626	6	1826</citation>
	<citation>1626	6	1826</citation>
	<citation>1749	6	1826</citation>
	<citation>1826	6	1826</citation>
	<citation>1826	6	1826</citation>
	<citation>1826	6	1826</citation>
	<citation>1826	6	1826</citation>
	<citation>1826	6	1826</citation>
	<citation>1826	6	1826</citation>
	<citation>1826	6	1826</citation>
	<citation>1826	6	1826</citation>
	<citation>1826	6	1826</citation>
	<citation>1826	6	1826</citation>
	<citation>210	6	1826</citation>
	<citation>210	6	1826</citation>
	<citation>210	6	1826</citation>
	<citation>1853	6	1826</citation>
	<citation>1853	6	1826</citation>
	<citation>1853	6	1826</citation>
	<citation>1878	6	1826</citation>
	<citation>1972	6	1826</citation>
	<citation>1972	6	1826</citation>
	<citation>1972	6	1826</citation>
	<citation>1972	6	1826</citation>
	<citation>1972	6	1826</citation>
	<citation>2314	6	1826</citation>
	<citation>2438	6	1826</citation>
	<citation>2513	6	1826</citation>
	<citation>2651	6	1826</citation>
	<citation>2723	6	1826</citation>
	<citation>2723	6	1826</citation>
	<citation>2736	6	1826</citation>
	<citation>2736	6	1826</citation>
	<citation>2766	6	1826</citation>
	<citation>2833	6	1826</citation>
	<citation>2833	6	1826</citation>
	<citation>2838	6	1826</citation>
	<citation>2998	6	1826</citation>
	<citation>627	6	1826</citation>
	<citation>731	6	1826</citation>
	<citation>731	6	1826</citation>
	<citation>731	6	1826</citation>
	</citations>
	</document>
	<document id= '1825'>
	<title>A Practical Method for Constructing LR(k) Processors</title>
	<abstract>A practical method for constructing LR(k) processors is developed.  These processors are capable  of recognizing and parsing an input during a single no-backup scan in a number of steps equal to the  length of the input plus the number of steps in its derivation.  The technique presented here is based  on the original method described by Knuth, but decreases both the effort required to construct the processor  and the size of the processor produced.  This procedure involves partitioning the given grammar into  a number of smaller parts.  If an LR(k) processor can be constructed for each part (using Knuth's algorithm)  and if certain conditions relating these individual processors are satisfied, then an LR(k) processor  for the entire grammar can be constructed for them.  Using this procedure, an LR(1) parser for ALGOL  has been obtained.</abstract>
	<conference>CACM November, 1969</conference>
	<authors>
	<author>Korenjak, A. J.</author>
	</authors>
	<keywords>LR(k) grammar, syntactic analysis, parser, deterministic language, syntax-directed compiler, language processor, context-free language ALGOL</keywords>
	<version>4.12 5.2 5.23</version>
	<location>CA691105 JB February 15, 1978  12:52 PM</location>
	<citations>
	<citation>1086	4	1825</citation>
	<citation>1132	4	1825</citation>
	<citation>1234	4	1825</citation>
	<citation>1263	4	1825</citation>
	<citation>1265	4	1825</citation>
	<citation>1270	4	1825</citation>
	<citation>1323	4	1825</citation>
	<citation>1358	4	1825</citation>
	<citation>1379	4	1825</citation>
	<citation>1380	4	1825</citation>
	<citation>1453	4	1825</citation>
	<citation>1464	4	1825</citation>
	<citation>1484	4	1825</citation>
	<citation>1491	4	1825</citation>
	<citation>1498	4	1825</citation>
	<citation>1613	4	1825</citation>
	<citation>1614	4	1825</citation>
	<citation>1665	4	1825</citation>
	<citation>1768	4	1825</citation>
	<citation>1781	4	1825</citation>
	<citation>1787	4	1825</citation>
	<citation>1824	4	1825</citation>
	<citation>1825	4	1825</citation>
	<citation>1825	4	1825</citation>
	<citation>1836	4	1825</citation>
	<citation>1860	4	1825</citation>
	<citation>1861	4	1825</citation>
	<citation>2015	4	1825</citation>
	<citation>2083	4	1825</citation>
	<citation>2110	4	1825</citation>
	<citation>2127	4	1825</citation>
	<citation>2178	4	1825</citation>
	<citation>2179	4	1825</citation>
	<citation>2187	4	1825</citation>
	<citation>2252	4	1825</citation>
	<citation>2317	4	1825</citation>
	<citation>2325	4	1825</citation>
	<citation>2341	4	1825</citation>
	<citation>2545	4	1825</citation>
	<citation>2546	4	1825</citation>
	<citation>2645	4	1825</citation>
	<citation>2652	4	1825</citation>
	<citation>2684	4	1825</citation>
	<citation>2698	4	1825</citation>
	<citation>2733	4	1825</citation>
	<citation>2842	4	1825</citation>
	<citation>2929	4	1825</citation>
	<citation>2934	4	1825</citation>
	<citation>3069	4	1825</citation>
	<citation>669	4	1825</citation>
	<citation>679	4	1825</citation>
	<citation>691	4	1825</citation>
	<citation>761	4	1825</citation>
	<citation>949	4	1825</citation>
	<citation>989	4	1825</citation>
	<citation>1781	5	1825</citation>
	<citation>1825	5	1825</citation>
	<citation>1825	5	1825</citation>
	<citation>1825	5	1825</citation>
	<citation>2061	5	1825</citation>
	<citation>2179	5	1825</citation>
	<citation>3184	5	1825</citation>
	<citation>1140	6	1825</citation>
	<citation>1141	6	1825</citation>
	<citation>1477	6	1825</citation>
	<citation>1477	6	1825</citation>
	<citation>1491	6	1825</citation>
	<citation>1491	6	1825</citation>
	<citation>1825	6	1825</citation>
	<citation>1825	6	1825</citation>
	<citation>2015	6	1825</citation>
	<citation>2110	6	1825</citation>
	<citation>3184	6	1825</citation>
	<citation>773	6	1825</citation>
	</citations>
	</document>
	<document id= '1824'>
	<title>APAREL-A Parse-Request Language</title>
	<abstract>APAREL is described: this language is an extension to an algorithmic language (PL/I) that provides  the pattern-matching capabilities normally found only in special purpose languages such as SNOBOL4 and  TMG.  This capability is provided through parse-requests stated in a BNF-like format.  These parse-requests  form their own programming language with special sequencing rules.  Upon successfully completing a parse-request,  an associated piece of PL/I code is executed.  This code has available for use, as normal PL/I strings  the various pieces (at all levels) of the parse.  It also has available as normal PL/I variables, the information concerning which of the various alternatives were successful.  Convenient facilities for  multiple input-output streams, the initiation of sequences of parse-requests as a subroutine, and parse-time  semantic checks are also included.  APAREL has proven convenient  in building a powerful SYNTAX and FUNCTION  macro system, an algebraic language preprocessor debugging system, an on-line command parser, a translator  for Dataless Programming, and as a general string manipulator.</abstract>
	<conference>CACM November, 1969</conference>
	<authors>
	<author>Balzer, R. M.</author>
	<author>Farber, D. J.</author>
	</authors>
	<keywords>text processing, string processing, symbol manipulation, PL/I, BNF, syntax, parser, translator,  pattern matching</keywords>
	<version>4.12 4.13 4.20 4.22 4.29</version>
	<location>CA691106 JB February 15, 1978  12:44 PM</location>
	<citations>
	<citation>1046	4	1824</citation>
	<citation>1105	4	1824</citation>
	<citation>1139	4	1824</citation>
	<citation>1140	4	1824</citation>
	<citation>1234	4	1824</citation>
	<citation>1263	4	1824</citation>
	<citation>1265	4	1824</citation>
	<citation>1496	4	1824</citation>
	<citation>1541	4	1824</citation>
	<citation>1565	4	1824</citation>
	<citation>1665	4	1824</citation>
	<citation>1693	4	1824</citation>
	<citation>1768	4	1824</citation>
	<citation>1781	4	1824</citation>
	<citation>1781	4	1824</citation>
	<citation>1781	4	1824</citation>
	<citation>1787	4	1824</citation>
	<citation>1824	4	1824</citation>
	<citation>1824	4	1824</citation>
	<citation>1824	4	1824</citation>
	<citation>1824	4	1824</citation>
	<citation>1825	4	1824</citation>
	<citation>1836	4	1824</citation>
	<citation>1861	4	1824</citation>
	<citation>1861	4	1824</citation>
	<citation>2015	4	1824</citation>
	<citation>2110	4	1824</citation>
	<citation>2126	4	1824</citation>
	<citation>2126	4	1824</citation>
	<citation>2127	4	1824</citation>
	<citation>2187	4	1824</citation>
	<citation>2252	4	1824</citation>
	<citation>2317	4	1824</citation>
	<citation>2545	4	1824</citation>
	<citation>2546	4	1824</citation>
	<citation>464	4	1824</citation>
	<citation>2698	4	1824</citation>
	<citation>2733	4	1824</citation>
	<citation>584	4	1824</citation>
	<citation>631	4	1824</citation>
	<citation>653	4	1824</citation>
	<citation>680	4	1824</citation>
	<citation>763	4	1824</citation>
	<citation>795	4	1824</citation>
	<citation>799	4	1824</citation>
	<citation>945	4	1824</citation>
	<citation>1358	5	1824</citation>
	<citation>1614	5	1824</citation>
	<citation>1781	5	1824</citation>
	<citation>1824	5	1824</citation>
	<citation>1824	5	1824</citation>
	<citation>1824	5	1824</citation>
	<citation>404	5	1824</citation>
	</citations>
	</document>
	<document id= '1823'>
	<title>Factorial Analysis of Variance (Algorithm [G1])</title>
	<conference>CACM November, 1969</conference>
	<authors>
	<author>Howell, J. R.</author>
	</authors>
	<keywords>factorial variance analysis, variance, statistical analysis</keywords>
	<version>5.5</version>
	<location>CA691107 JB February 15, 1978  12:22 PM</location>
	<citations>
	<citation>1823	5	1823</citation>
	<citation>1823	5	1823</citation>
	<citation>1823	5	1823</citation>
	</citations>
	</document>
	<document id= '1822'>
	<title>Shortest-Path Forest with Topological Ordering (Algorithm [H])</title>
	<conference>CACM November, 1969</conference>
	<authors>
	<author>Dial, R. B.</author>
	</authors>
	<keywords>shortest path, tree, network, directed graph</keywords>
	<version>5.32 5.42</version>
	<location>CA691108 JB February 15, 1978  12:21 PM</location>
	<citations>
	<citation>1822	5	1822</citation>
	<citation>1822	5	1822</citation>
	<citation>1822	5	1822</citation>
	</citations>
	</document>
	<document id= '1821'>
	<title>Permanent Function of a Square Matrix I and II (Algorithm 361 [G6])</title>
	<conference>CACM November, 1969</conference>
	<authors>
	<author>Shriver, B.</author>
	<author>Eberlein, P. J.</author>
	<author>Dixon, R. D.</author>
	</authors>
	<keywords>matrix, permanent, determinant</keywords>
	<version>5.30</version>
	<location>CA691109 JB February 15, 197812:18 PM</location>
	<citations>
	<citation>1821	5	1821</citation>
	<citation>1821	5	1821</citation>
	<citation>1821	5	1821</citation>
	</citations>
	</document>
	<document id= '1820'>
	<title>Generation of Random Permutations (Algorithm 362 [G6])</title>
	<conference>CACM November, 1969</conference>
	<authors>
	<author>Robson, J. M.</author>
	</authors>
	<keywords>permutation, random permutation, transposition</keywords>
	<version>5.5</version>
	<location>CA691110 JB February 15, 1978  12:15 PM</location>
	<citations>
	<citation>1820	4	1820</citation>
	<citation>1511	5	1820</citation>
	<citation>1820	5	1820</citation>
	<citation>1820	5	1820</citation>
	<citation>1820	5	1820</citation>
	</citations>
	</document>
	<document id= '1819'>
	<title>Complex Error Function (Algorithm 363 [S15])</title>
	<conference>CACM November, 1969</conference>
	<authors>
	<author>Gautschi, W.</author>
	</authors>
	<keywords>error function for complex argument, Voigt function, Laplace continued fraction, Gauss-Hermite  quadrature, recursive computation</keywords>
	<version>5.12</version>
	<location>CA691111 JB February 15, 1978  12:13 PM</location>
	<citations>
	<citation>1819	5	1819</citation>
	<citation>1819	5	1819</citation>
	<citation>1819	5	1819</citation>
	</citations>
	</document>
	<document id= '1818'>
	<title>Associated Legendre Functions of the First Kind for Real or Imaginary Arguments (Algorithm 47  [S16])</title>
	<conference>CACM November, 1969</conference>
	<authors>
	<author>Cobb, S. M.</author>
	</authors>
	<keywords>Legendre function, associated Legendre function, real or imaginary arguments</keywords>
	<version>5.12</version>
	<location>CA691112 JB February 15, 1978  12:11 PM</location>
	<citations>
	<citation>1818	4	1818</citation>
	<citation>1818	5	1818</citation>
	<citation>1818	5	1818</citation>
	<citation>1818	5	1818</citation>
	<citation>2222	5	1818</citation>
	<citation>778	5	1818</citation>
	<citation>970	6	1818</citation>
	<citation>1800	6	1818</citation>
	<citation>1818	6	1818</citation>
	<citation>1834	6	1818</citation>
	<citation>2042	6	1818</citation>
	</citations>
	</document>
	<document id= '1817'>
	<title>Computation of Fourier Coefficients (Algorithm 255 [C6])</title>
	<conference>CACM November, 1969</conference>
	<authors>
	<author>Hall, G.</author>
	<author>Ray, V. A.</author>
	</authors>
	<keywords>numerical integration, Fourier coefficients, Filon's method</keywords>
	<version>5.16</version>
	<location>CA691113 JB February 15, 1978  12:08 PM</location>
	<citations>
	<citation>1817	5	1817</citation>
	<citation>1817	5	1817</citation>
	<citation>1817	5	1817</citation>
	</citations>
	</document>
	<document id= '1816'>
	<title>Generalized Least Squares Fit By Orthogonal Polynomials (Algorithm 296 [E2])</title>
	<conference>CACM November, 1969</conference>
	<authors>
	<author>Watson, W. T.</author>
	</authors>
	<keywords>least squares, curve fitting, orthogonal polynomials, three-term recurrence, polynomial regression,  approximation, Forsythe's method</keywords>
	<version>5.13 5.5</version>
	<location>CA691114 JB February 15, 1978  12:06 PM</location>
	<citations>
	<citation>1816	4	1816</citation>
	<citation>125	5	1816</citation>
	<citation>1816	5	1816</citation>
	<citation>1816	5	1816</citation>
	<citation>1816	5	1816</citation>
	</citations>
	</document>
	<document id= '1815'>
	<title>Direct Search (Algorithm 178 [E4])</title>
	<conference>CACM November, 1969</conference>
	<authors>
	<author>Tomlin, F. K.</author>
	<author>Smith, L. B.</author>
	</authors>
	<keywords>function minimization, search direct search</keywords>
	<version>5.19</version>
	<location>CA691115 JB February 15, 1978  12:02 PM</location>
	<citations>
	<citation>1815	4	1815</citation>
	<citation>1715	5	1815</citation>
	<citation>1815	5	1815</citation>
	<citation>1815	5	1815</citation>
	<citation>1815	5	1815</citation>
	</citations>
	</document>
	<document id= '1814'>
	<title>Direct Search (Algorithm 178 [E4])</title>
	<conference>CACM November, 1969</conference>
	<authors>
	<author>Smith, L. B.</author>
	</authors>
	<keywords>function minimization, search, direct search</keywords>
	<version>5.19</version>
	<location>CA691117 JB February 15, 1978 12:00 PM</location>
	<citations>
	<citation>1814	4	1814</citation>
	<citation>1777	5	1814</citation>
	<citation>1814	5	1814</citation>
	<citation>1814	5	1814</citation>
	<citation>1814	5	1814</citation>
	</citations>
	</document>
	<document id= '1813'>
	<title>Generation of Permutations in Pseudo-Lexicographic Order (Algorithm 308 [G6])</title>
	<conference>CACM November, 1969</conference>
	<authors>
	<author>Smith, R. J.</author>
	</authors>
	<keywords>permutations, lexicographic order, lexicographic generation, permutation generation</keywords>
	<version>5.39</version>
	<location>CA691117 JB February 15, 1978  11:59 AM</location>
	<citations>
	<citation>1813	4	1813</citation>
	<citation>1370	5	1813</citation>
	<citation>1813	5	1813</citation>
	<citation>1813	5	1813</citation>
	<citation>1813	5	1813</citation>
	<citation>1978	5	1813</citation>
	<citation>1307	6	1813</citation>
	<citation>1589	6	1813</citation>
	<citation>1813	6	1813</citation>
	</citations>
	</document>
	<document id= '1812'>
	<title>More on Fortran Random Number Generators</title>
	<conference>CACM November, 1969</conference>
	<authors>
	<author>Grosenbaugh, L. R.</author>
	</authors>
	<keywords>random number generation, Monte Carlo, simulation</keywords>
	<version>5.5</version>
	<location>CA691118 JB February 15, 1978  11:57 AM</location>
	<citations>
	<citation>1812	5	1812</citation>
	<citation>1812	5	1812</citation>
	<citation>1812	5	1812</citation>
	</citations>
	</document>
	<document id= '1811'>
	<title>A Case Study in Programming for Parallel-Processors</title>
	<abstract>An affirmative partial answer is provided to the question of whether it is possible to program  parallel-processor computing systems to efficiently decrease execution time for useful problems.  Parallel-processor  systems are multiprocessor systems in which several of the processors can simultaneously execute separate  tasks of a single job, thus cooperating to decrease the solution time of a computational problem. The  processors have independent instruction counters, meaning that each processor executes its own task program  relatively independently of the other processors.  Communication between cooperating processors is by  means of data in storage shared by all processors.  A program for the determination of the distribution  of current in an electrical network was written for a parallel-processor computing system, and execution  of this program was simulated.  The data gathered from simulation runs demonstrate the efficient solution  of this problem, typical of a large class of important problems.  It is shown that, with proper programming,  solution time when N processors are applied approaches 1/N times the solution time for a single processor,  while improper programming can actually lead to an increase of solution time with the number of processors.   Stability of the method of solution was also investigated.</abstract>
	<conference>CACM December, 1969</conference>
	<authors>
	<author>Rosenfeld, J. L.</author>
	</authors>
	<keywords>parallel-processor, parallelism, parallel programming, multiprocessor, multiprogramming, tasking,  storage interference, electrical network, simulation, relaxation, Jacobi, Gauss-Seidel, convergence</keywords>
	<version>3.24 4.9 5.14 5.17 6.21</version>
	<location>CA691201 JB February 15, 1978  4:45 PM</location>
	<citations>
	<citation>1811	5	1811</citation>
	<citation>1811	5	1811</citation>
	<citation>1811	5	1811</citation>
	</citations>
	</document>
	<document id= '1810'>
	<title>Is Automatic "Folding" of Programs Efficient Enough To Displace Manual?</title>
	<abstract>The operation of "folding" a program into the available memory is discussed.  Measurements  by Brown et al. and by Nelson on an automatic folding mechanism of simple design, a demand paging unit  built at the IBM Research Center by Belady, Nelson, O'Neil, and others, permitting its quality to be  compared with that of manual folding, are discussed, and it is shown that given some care in use the  unit performs satisfactorily under the conditions tested, even though it is operating across a memory-to-storage  interface with a very large speed difference.  The disadvantages of prefolding, which is required when  the folding is manual, are examined, and a number of the important troubles which beset computing today  are shown to arise from, or be aggravated by, this source.  It is concluded that a folding mechanism  will probably become a normal part of most computing systems.</abstract>
	<conference>CACM December, 1969</conference>
	<authors>
	<author>Sayre, D.</author>
	</authors>
	<keywords>paging, automatic paging, demand paging, folding, automatic folding, storage hierarchies, memory  hierarchies, replacement algorithms, performance, measurement</keywords>
	<version>4.0 4.19 4.39 6.20 6.34</version>
	<location>CA691202 JB February 15, 1978  4:33 PM</location>
	<citations>
	<citation>1810	5	1810</citation>
	<citation>1810	5	1810</citation>
	<citation>1810	5	1810</citation>
	<citation>2218	5	1810</citation>
	<citation>2373	5	1810</citation>
	<citation>1380	6	1810</citation>
	<citation>1410	6	1810</citation>
	<citation>1572	6	1810</citation>
	<citation>1728	6	1810</citation>
	<citation>1751	6	1810</citation>
	<citation>1751	6	1810</citation>
	<citation>1752	6	1810</citation>
	<citation>1810	6	1810</citation>
	<citation>1810	6	1810</citation>
	<citation>1879	6	1810</citation>
	<citation>1951	6	1810</citation>
	<citation>2095	6	1810</citation>
	<citation>2374	6	1810</citation>
	</citations>
	</document>
	<document id= '1809'>
	<title>Numerical Analysis in a Ph.D. Computer Science Program</title>
	<abstract>Numerical Analysis is the study of methods and procedures used to obtain "approximate solutions"  to mathematical problems.  Much of the emphasis is on scientific calculation.  The difficulties of education  in such a broad area center around the question of background and emphasis.  The Numerical Analysis program  in the Computer Science Department should emphasize an awareness of the problems of computer implementation  and experimental procedures.  Nevertheless, there is a need for a solid background in applied mathematics.</abstract>
	<conference>CACM December, 1969</conference>
	<authors>
	<author>Parter, S. V.</author>
	</authors>
	<keywords>Ph.D. program, numerical analysis, course separation, education</keywords>
	<version>1.52</version>
	<location>CA691203 JB February 15, 1978  4:25 PM</location>
	<citations>
	<citation>1809	5	1809</citation>
	<citation>1809	5	1809</citation>
	<citation>1809	5	1809</citation>
	</citations>
	</document>
	<document id= '1808'>
	<title>Advanced Cryptographic Techniques for Computers</title>
	<abstract>Cryptographic techniques which can be used to maintain the confidentiality of information processed  by computers are dealt with.  Special emphasis is paid to the unique characteristics of computer files  that make many cryptographic methods of little use.  Relative security, costs, and preferred methods  are included in this paper.</abstract>
	<conference>CACM December, 1969</conference>
	<authors>
	<author>Tassel, D.</author>
	</authors>
	<keywords>cryptographic, cryptanalysis, ciphers secrecy systems, security systems, confidential information  processing</keywords>
	<version>1.3 2.12 2.19 3.73 3.81 4.41</version>
	<location>CA691204 JB February 15, 1978  4:20 PM</location>
	<citations>
	<citation>1808	5	1808</citation>
	<citation>1808	5	1808</citation>
	<citation>1808	5	1808</citation>
	</citations>
	</document>
	<document id= '1807'>
	<title>Optimization of Expressions in Fortran</title>
	<abstract>A method of optimizing the computation of arithmetic and indexing expressions of a Fortran  program is presented.  The method is based on a linear analysis of the definition points of the variables  and the branching and DO loop structure of the program.  The objectives of the processing are (1) to  eliminate redundant calculations when references are made to common subexpression values, (2) to remove  invariant calculations from DO loops, (3) to efficiently compute subscripts containing DO iteration variables,  and (4) to provide efficient index register usage.  The method presented requires at least a three-pass  compiler, the second of which is scanned backward.  It has been used in the development of several FORTRAN  compilers that have proved to produce excellent object code without significantly reducing the compilation  speed.</abstract>
	<conference>CACM December, 1969</conference>
	<authors>
	<author>Busam, V. A.</author>
	<author>England, D. E.</author>
	</authors>
	<keywords>FORTRAN, optimization, expressions, compilers, compilation, subscripts, register allocation, DO  loops, common subexpressions, invariant calculations</keywords>
	<version>4.12</version>
	<location>CA691205 JB February 15, 1978  4:16 PM</location>
	<citations>
	<citation>1625	4	1807</citation>
	<citation>1781	4	1807</citation>
	<citation>1807	4	1807</citation>
	<citation>1807	4	1807</citation>
	<citation>1807	4	1807</citation>
	<citation>1807	4	1807</citation>
	<citation>1934	4	1807</citation>
	<citation>1945	4	1807</citation>
	<citation>1947	4	1807</citation>
	<citation>1947	4	1807</citation>
	<citation>2034	4	1807</citation>
	<citation>2175	4	1807</citation>
	<citation>2290	4	1807</citation>
	<citation>2579	4	1807</citation>
	<citation>2923	4	1807</citation>
	<citation>2945	4	1807</citation>
	<citation>1223	5	1807</citation>
	<citation>1248	5	1807</citation>
	<citation>1551	5	1807</citation>
	<citation>1807	5	1807</citation>
	<citation>1807	5	1807</citation>
	<citation>1807	5	1807</citation>
	<citation>1947	5	1807</citation>
	<citation>2579	5	1807</citation>
	<citation>2923	5	1807</citation>
	<citation>1535	6	1807</citation>
	<citation>1807	6	1807</citation>
	<citation>1807	6	1807</citation>
	<citation>1947	6	1807</citation>
	<citation>1947	6	1807</citation>
	</citations>
	</document>
	<document id= '1806'>
	<title>On the Downhill Method</title>
	<abstract>The downhill method is a numerical method for solving complex equations f(z) = 0 on which the  only restriction is that the function w = f(z) must be analytical.  An introduction to this method is  given and a critical review of relating literature is presented.  Although in theory the method always  converges, it is shown that a fundamental dilemma exists which may cause a breakdown in practical applications.   To avoid this difficulty and to improve the rate of convergence toward a root, some modifications of  the original method are proposed and a program (FORTRAN) based on the modified method is given in Algorithm  365.  Some numerical examples are included.</abstract>
	<conference>CACM December, 1969</conference>
	<authors>
	<author>Bach, H.</author>
	</authors>
	<keywords>downhill method, complex relaxation method, complex iteration, complex equation, transcendental  complex equation, algebraic complex equation</keywords>
	<version>5.15</version>
	<location>CA691206 JB February 15, 1978  2:54 PM</location>
	<citations>
	<citation>1806	4	1806</citation>
	<citation>1806	5	1806</citation>
	<citation>1806	5	1806</citation>
	<citation>1806	5	1806</citation>
	<citation>1803	5	1806</citation>
	<citation>535	5	1806</citation>
	<citation>1806	6	1806</citation>
	</citations>
	</document>
	<document id= '1805'>
	<title>Productivity of Multiprogrammed Computers-Progress in Developing an Analytic Prediction Method</title>
	<abstract>Multiprogramming as it is discussed here is a mode of computer operation in which two or more programs are concurrently in processor memory and proceeding, each using the same central processor unit  (CPU) and input-output (I/O) channels.  These programs are actually proceeding intermittently and singly,  according to eligibility (readiness to proceed) and priority.  It is useful to be able to represent them  as proceeding continuously and simultaneously, each at an effective rate, which may be a fraction of  that which it would enjoy in the absence of the other programs.  The effective progress rate of each  program is sensitive to many detailed characteristics of itself and its co-residents and simulation has  been the best available method of predicting it.  This paper presents the results of progress in developing  an alternative to simulation, a simulation-tested iterative computation of these rates under certain  situations.  The algorithm is sensitive to most of the factors that control the phenomenon, including  nonquantitative or topological features of the programs' structures.</abstract>
	<conference>CACM December, 1969</conference>
	<authors>
	<author>Lasser, D. J.</author>
	</authors>
	<keywords>productivity, prediction, multiprogramming, simulation, equipment  evaluation, hardware, evaluation,  monitor, operating system, system software, supervisors, performance, time sharing, time slicing</keywords>
	<version>2.43 2.44 4.32</version>
	<location>CA691207 JB February 15, 1978  2:47 PM</location>
	<citations>
	<citation>1805	4	1805</citation>
	<citation>1805	4	1805</citation>
	<citation>1805	4	1805</citation>
	<citation>1828	4	1805</citation>
	<citation>1846	4	1805</citation>
	<citation>1854	4	1805</citation>
	<citation>1892	4	1805</citation>
	<citation>1912	4	1805</citation>
	<citation>2187	4	1805</citation>
	<citation>2188	4	1805</citation>
	<citation>2218	4	1805</citation>
	<citation>2317	4	1805</citation>
	<citation>1518	5	1805</citation>
	<citation>1572	5	1805</citation>
	<citation>1748	5	1805</citation>
	<citation>1805	5	1805</citation>
	<citation>1805	5	1805</citation>
	<citation>1805	5	1805</citation>
	<citation>3070	5	1805</citation>
	<citation>1805	6	1805</citation>
	<citation>2454	6	1805</citation>
	<citation>2741	6	1805</citation>
	<citation>2988	6	1805</citation>
	</citations>
	</document>
	<document id= '1804'>
	<title>Coloring Polygonal Regions (Algorithm 364 [Z])</title>
	<conference>CACM December, 1969</conference>
	<authors>
	<author>Herriot, R. G.</author>
	</authors>
	<keywords>coloring polygonal regions, coloring planar surfaces, drawing pictures, shading enclosed regions</keywords>
	<version>4.9</version>
	<location>CA691208 JB February 15, 1978  2:27 PM</location>
	<citations>
	<citation>1804	4	1804</citation>
	<citation>1804	4	1804</citation>
	<citation>2987	4	1804</citation>
	<citation>2987	4	1804</citation>
	<citation>1804	5	1804</citation>
	<citation>1804	5	1804</citation>
	<citation>1804	5	1804</citation>
	<citation>421	5	1804</citation>
	<citation>524	5	1804</citation>
	</citations>
	</document>
	<document id= '1803'>
	<title>Complex Root Finding (Algorithm 365 [C5])</title>
	<conference>CACM December, 1969</conference>
	<authors>
	<author>Bach, H.</author>
	</authors>
	<keywords>downhill method, complex relaxation method, complex iteration, complex equation, transcendental  complex equation, algebraic complex equation</keywords>
	<version>5.15</version>
	<location>CA691209 JB February 15, 1978  2:25 PM</location>
	<citations>
	<citation>1803	4	1803</citation>
	<citation>1806	5	1803</citation>
	<citation>1803	5	1803</citation>
	<citation>1803	5	1803</citation>
	<citation>1803	5	1803</citation>
	</citations>
	</document>
	<document id= '1802'>
	<title>Regression Using Certain Direct Product Matrices (Algorithm 366 [G2])</title>
	<conference>CACM December, 1969</conference>
	<authors>
	<author>Claringbold, P. J.</author>
	</authors>
	<keywords>analysis of variance, analysis of covariance, regression analysis, experimental design, matrix  direct product, protection operator, orthogonal matrix</keywords>
	<version>5.14 5.5</version>
	<location>CA691210 JB February 15, 1978  2:23 PM</location>
	<citations>
	<citation>1801	5	1802</citation>
	<citation>1802	5	1802</citation>
	<citation>1802	5	1802</citation>
	<citation>1802	5	1802</citation>
	<citation>1802	6	1802</citation>
	</citations>
	</document>
	<document id= '1801'>
	<title>Analysis of Variance for Balanced Experiments (Algorithm 367 [G2])</title>
	<conference>CACM December, 1969</conference>
	<authors>
	<author>Claringbold, P. J.</author>
	</authors>
	<keywords>analysis of variance, analysis of covariance, regression analysis, experimental design, balanced  experiment, missing data, interblock estimate, intra block estimate</keywords>
	<version>5.14 5.5</version>
	<location>CA691211 JB February 15, 1978  2:14 PM</location>
	<citations>
	<citation>1801	4	1801</citation>
	<citation>1801	5	1801</citation>
	<citation>1801	5	1801</citation>
	<citation>1801	5	1801</citation>
	<citation>1802	5	1801</citation>
	</citations>
	</document>
	<document id= '1800'>
	<title>PSIF (Algorithm 147 [S14])</title>
	<conference>CACM December, 1969</conference>
	<authors>
	<author>Parsons, R. G.</author>
	</authors>
	<keywords>gamma function, logarithmic derivative, factorial function, psi function</keywords>
	<version>5.12</version>
	<location>CA691212 JB February 15, 1978  2:11 PM</location>
	<citations>
	<citation>1800	4	1800</citation>
	<citation>1800	5	1800</citation>
	<citation>1800	5	1800</citation>
	<citation>1800	5	1800</citation>
	<citation>2222	5	1800</citation>
	<citation>871	5	1800</citation>
	<citation>970	6	1800</citation>
	<citation>1800	6	1800</citation>
	<citation>1818	6	1800</citation>
	<citation>1834	6	1800</citation>
	<citation>2042	6	1800</citation>
	</citations>
	</document>
	<document id= '1799'>
	<title>Elementary Functions by Continued Fractions (Algorithm 229 [B1])</title>
	<conference>CACM December, 1969</conference>
	<authors>
	<author>Bray, T. A.</author>
	</authors>
	<keywords>continued factions, Pade table</keywords>
	<version>5.19</version>
	<location>CA691213 JB February 15, 1978  2:09 PM</location>
	<citations>
	<citation>1799	5	1799</citation>
	<citation>1799	5	1799</citation>
	<citation>1799	5	1799</citation>
	</citations>
	</document>
	<document id= '1798'>
	<title>Coulomb Wave Functions (Algorithm 300 [S22])</title>
	<conference>CACM December, 1969</conference>
	<authors>
	<author>Kolbig, K. S.</author>
	</authors>
	<keywords>Coulomb wave functions, wave functions, special functions, function evaluation</keywords>
	<version>5.12</version>
	<location>CA691214 JB February 15, 1978  2:08 PM</location>
	<citations>
	<citation>1798	5	1798</citation>
	<citation>1798	5	1798</citation>
	<citation>1798	5	1798</citation>
	</citations>
	</document>
	<document id= '1797'>
	<title>Solution of Linear programs in 0-1 (Algorithm 341 [H])</title>
	<conference>CACM December, 1969</conference>
	<authors>
	<author>Proll, L. G.</author>
	</authors>
	<keywords>linear programming, zero-one variables, partial enumeration</keywords>
	<version>5.41</version>
	<location>CA691215 JB February 15, 1978  2:06 PM</location>
	<citations>
	<citation>1797	5	1797</citation>
	<citation>1797	5	1797</citation>
	<citation>1797	5	1797</citation>
	</citations>
	</document>
	<document id= '1796'>
	<citations>
	<citation>1796	5	1796</citation>
	<citation>1796	5	1796</citation>
	<citation>1796	5	1796</citation>
	</citations>
	<title>Index by Subject to Algorithms, 1969</title>
	<conference>CACM December, 1969</conference>
	<keywords>This 1969 index is the first supplement to the Index by Subject to Algorithms, 1960 1968 (Comm.  ACM 11, 12 (Dec. 1968), 827 830).</keywords>
	<location>CA691216 JB February 15, 1978  2:03 PM</location>
	</document>
	<document id= '1795'>
	<title>Optimal Code for Serial and Parallel Computation</title>
	<conference>CACM December, 1969</conference>
	<authors>
	<author>Fateman, R. J.</author>
	</authors>
	<keywords>code optimization, sequencing of operations, detection of common subexpressions</keywords>
	<version>4.12</version>
	<location>CA691217 JB February 15, 1978  1:59 PM</location>
	<citations>
	<citation>1795	5	1795</citation>
	<citation>1795	5	1795</citation>
	<citation>1795	5	1795</citation>
	</citations>
	</document>
	<document id= '1794'>
	<title>A Fast Random Number Generator for IBM 360</title>
	<conference>CACM December, 1969</conference>
	<authors>
	<author>Seraphin, D. S.</author>
	</authors>
	<keywords>pseudorandom number, modulus, period, float, normalization, characteristic, chi-square test</keywords>
	<version>4.49 5.19 5.5</version>
	<location>CA691218 JB February 15, 1978  1:58 PM</location>
	<citations>
	<citation>1794	4	1794</citation>
	<citation>1870	4	1794</citation>
	<citation>2122	4	1794</citation>
	<citation>1674	5	1794</citation>
	<citation>1794	5	1794</citation>
	<citation>1794	5	1794</citation>
	<citation>1794	5	1794</citation>
	<citation>2349	5	1794</citation>
	<citation>1648	6	1794</citation>
	<citation>1716	6	1794</citation>
	<citation>1794	6	1794</citation>
	<citation>1894	6	1794</citation>
	<citation>2043	6	1794</citation>
	<citation>501	6	1794</citation>
	<citation>613	6	1794</citation>
	<citation>774	6	1794</citation>
	</citations>
	</document>
	<document id= '1793'>
	<title>Presentation of Alphameric Characters for Information Processing* (Proposed American National  Standard)</title>
	<conference>CACM December, 1969</conference>
	<keywords>alphameric, handwritten input, encoding transcription, numerals, upper case, hand printed</keywords>
	<version>2.43 4.41</version>
	<location>CA691219 JB February 15, 1978  1:55 PM</location>
	<citations>
	<citation>1793	5	1793</citation>
	<citation>1793	5	1793</citation>
	<citation>1793	5	1793</citation>
	<citation>2333	5	1793</citation>
	<citation>1793	6	1793</citation>
	<citation>87	6	1793</citation>
	<citation>88	6	1793</citation>
	</citations>
	</document>
	<document id= '1792'>
	<title>Exploratory Experimental Studies Comparing Online and Off line Programming Performance</title>
	<abstract>Two exploratory experiments were conducted at System Development Corporation to compare debugging  performance of programmers working under conditions of on-line and off line access to a computer.  These  are the first known studies that measure programmers' performance under controlled conditions for standard  tasks.  Statistically significant results of both experiments indicated faster debugging under online  conditions, but perhaps the most important practical finding involves the striking individual differences  in programmer performance.  Methodological problems encountered in designing and conducting these experiments  are described; limitations of the findings are pointed out; hypotheses are presented to account for results;  and suggestions are made for further research.</abstract>
	<conference>CACM January, 1968</conference>
	<authors>
	<author>Sackman, H.</author>
	<author>Erikson, W. J.</author>
	<author>Grant, E. E.</author>
	</authors>
	<keywords>online vs. off line performance, programmer/computer communication, programming experimental-empirical  studies, programming cost effectiveness, programming performance, debugging effectiveness, time sharing  vs. batch processing, factor analysis application, programmer trainee performance, basic programming  knowledge test, experienced programmer study, analysis of variance, programmer individual differences</keywords>
	<version>2.40</version>
	<location>CA680101 JB February 23, 1978  2:58 PM</location>
	<citations>
	<citation>267	4	1792</citation>
	<citation>1139	4	1792</citation>
	<citation>1141	4	1792</citation>
	<citation>1215	4	1792</citation>
	<citation>1223	4	1792</citation>
	<citation>1647	4	1792</citation>
	<citation>1781	4	1792</citation>
	<citation>1787	4	1792</citation>
	<citation>1792	4	1792</citation>
	<citation>1792	4	1792</citation>
	<citation>1908	4	1792</citation>
	<citation>364	4	1792</citation>
	<citation>405	4	1792</citation>
	<citation>438	4	1792</citation>
	<citation>763	4	1792</citation>
	<citation>224	5	1792</citation>
	<citation>1605	5	1792</citation>
	<citation>1792	5	1792</citation>
	<citation>1792	5	1792</citation>
	<citation>1792	5	1792</citation>
	<citation>3091	5	1792</citation>
	<citation>1792	6	1792</citation>
	</citations>
	</document>
	<document id= '1791'>
	<title>Triangular Factors of Modified Matrices (Algorithm 319 [F1])</title>
	<conference>CACM January, 1968</conference>
	<authors>
	<author>Green, D. R.</author>
	</authors>
	<keywords>matrix decomposition, matrix factors, matrix modifier, matrix perturbation</keywords>
	<version>5.14</version>
	<location>CA680102 JB February 23, 1978  2:50 PM</location>
	<citations>
	<citation>1791	5	1791</citation>
	<citation>1791	5	1791</citation>
	<citation>1791	5	1791</citation>
	</citations>
	</document>
	<document id= '1790'>
	<title>Muller's Method for Finding roots of an Arbitrary Function  (Algorithm 196 [C5])</title>
	<conference>CACM January, 1968</conference>
	<authors>
	<author>Whitley, V. W.</author>
	</authors>
	<keywords>equation roots, function zeros</keywords>
	<version>5.15</version>
	<location>CA680103 JB February 23, 1978  2:47 PM</location>
	<citations>
	<citation>1790	5	1790</citation>
	<citation>1790	5	1790</citation>
	<citation>1790	5	1790</citation>
	</citations>
	</document>
	<document id= '1789'>
	<citations>
	<citation>1789	5	1789</citation>
	<citation>1789	5	1789</citation>
	<citation>1789	5	1789</citation>
	</citations>
	<title>Logarithm of Gamma Function (Algorithm 291 [S14])</title>
	<conference>CACM January, 1968</conference>
	<authors>
	<author>Hoare, M. R.</author>
	</authors>
	<location>CA680104 JB February 23, 1978  2:45 PM</location>
	</document>
	<document id= '1788'>
	<title>Toward a General Processor for Programming Languages</title>
	<abstract>Many efforts have been made to develop a better way of implementing a higher level programming  language than by the construction of a whole new compiler, but so far none has proved generally satisfactory.   In this paper, it is contended that a programming language is best described functionally as a body  of macro instructions, and that the macro call constitutes a canonical form in terms of which a programming  notation may be described.  A supporting discussion of the logical and his torical role of the macro instruction  is presented.  Also discussed are the conflict between machine independence and object program efficiency,  and the question of where the greatest difficulties lie in compiler construction.</abstract>
	<conference>CACM January, 1968</conference>
	<authors>
	<author>Halpern, M. J.</author>
	</authors>
	<keywords>programming language translator, programming language processor, general translator, general processor,  macro instruction processor; meta processor, meta language translator, meta language processor, compiler-compiler,  writing system, translator writing system</keywords>
	<version>4.10 4.11 4.12 4.20</version>
	<location>CA680106 JB February 23, 1978  2:42 PM</location>
	<citations>
	<citation>1358	4	1788</citation>
	<citation>1565	4	1788</citation>
	<citation>1781	4	1788</citation>
	<citation>1781	4	1788</citation>
	<citation>1788	4	1788</citation>
	<citation>1788	4	1788</citation>
	<citation>1788	4	1788</citation>
	<citation>1788	4	1788</citation>
	<citation>1006	5	1788</citation>
	<citation>1007	5	1788</citation>
	<citation>205	5	1788</citation>
	<citation>1781	5	1788</citation>
	<citation>1788	5	1788</citation>
	<citation>1788	5	1788</citation>
	<citation>1788	5	1788</citation>
	<citation>3189	5	1788</citation>
	<citation>123	6	1788</citation>
	<citation>196	6	1788</citation>
	<citation>919	6	1788</citation>
	<citation>990	6	1788</citation>
	<citation>1007	6	1788</citation>
	<citation>1046	6	1788</citation>
	<citation>1131	6	1788</citation>
	<citation>1139	6	1788</citation>
	<citation>1140	6	1788</citation>
	<citation>1149	6	1788</citation>
	<citation>1198	6	1788</citation>
	<citation>1215	6	1788</citation>
	<citation>1223	6	1788</citation>
	<citation>1265	6	1788</citation>
	<citation>1303	6	1788</citation>
	<citation>1323	6	1788</citation>
	<citation>1358	6	1788</citation>
	<citation>1366	6	1788</citation>
	<citation>1421	6	1788</citation>
	<citation>1460	6	1788</citation>
	<citation>1462	6	1788</citation>
	<citation>1463	6	1788</citation>
	<citation>1467	6	1788</citation>
	<citation>1468	6	1788</citation>
	<citation>1477	6	1788</citation>
	<citation>1491	6	1788</citation>
	<citation>1496	6	1788</citation>
	<citation>1531	6	1788</citation>
	<citation>1535	6	1788</citation>
	<citation>1565	6	1788</citation>
	<citation>1601	6	1788</citation>
	<citation>1602	6	1788</citation>
	<citation>1613	6	1788</citation>
	<citation>1614	6	1788</citation>
	<citation>1626	6	1788</citation>
	<citation>1641	6	1788</citation>
	<citation>1787	6	1788</citation>
	<citation>1788	6	1788</citation>
	<citation>205	6	1788</citation>
	<citation>224	6	1788</citation>
	<citation>249	6	1788</citation>
	<citation>288	6	1788</citation>
	<citation>316	6	1788</citation>
	<citation>381	6	1788</citation>
	<citation>398	6	1788</citation>
	<citation>11	6	1788</citation>
	<citation>404	6	1788</citation>
	<citation>410	6	1788</citation>
	<citation>463	6	1788</citation>
	<citation>464	6	1788</citation>
	<citation>483	6	1788</citation>
	<citation>3184	6	1788</citation>
	<citation>3188	6	1788</citation>
	<citation>584	6	1788</citation>
	<citation>600	6	1788</citation>
	<citation>680	6	1788</citation>
	<citation>691	6	1788</citation>
	<citation>763	6	1788</citation>
	<citation>799	6	1788</citation>
	</citations>
	</document>
	<document id= '1787'>
	<title>Use of Transition Matrices in Compiling</title>
	<abstract>An algorithms is described which constructs from a suitable BNF grammar an efficient left-right  recognizer for sentences of the corresponding language.  The type of recognizer, used in a number of  compilers, operates with a pushdown stack and with a transition matrix.  Two examples illustrate how  such recognizers may be used effectively for other purposes besides the usual syntax checking.</abstract>
	<conference>CACM January, 1968</conference>
	<authors>
	<author>Gries, D.</author>
	</authors>
	<keywords>transition matrices, compilation, translation, grammar, context-free language, formal language,  parsing</keywords>
	<version>4.12 5.23</version>
	<location>CA680107 JB February 23, 1978  2:35 PM</location>
	<citations>
	<citation>249	4	1787</citation>
	<citation>254	4	1787</citation>
	<citation>267	4	1787</citation>
	<citation>272	4	1787</citation>
	<citation>1102	4	1787</citation>
	<citation>1109	4	1787</citation>
	<citation>1139	4	1787</citation>
	<citation>1140	4	1787</citation>
	<citation>1141	4	1787</citation>
	<citation>1188	4	1787</citation>
	<citation>1215	4	1787</citation>
	<citation>1215	4	1787</citation>
	<citation>1223	4	1787</citation>
	<citation>1306	4	1787</citation>
	<citation>1323	4	1787</citation>
	<citation>1358	4	1787</citation>
	<citation>1380	4	1787</citation>
	<citation>1396	4	1787</citation>
	<citation>1464	4	1787</citation>
	<citation>1491	4	1787</citation>
	<citation>1496	4	1787</citation>
	<citation>1498	4	1787</citation>
	<citation>1542	4	1787</citation>
	<citation>1647	4	1787</citation>
	<citation>1665	4	1787</citation>
	<citation>1665	4	1787</citation>
	<citation>1683	4	1787</citation>
	<citation>1683	4	1787</citation>
	<citation>1693	4	1787</citation>
	<citation>1767	4	1787</citation>
	<citation>1767	4	1787</citation>
	<citation>1768	4	1787</citation>
	<citation>1768	4	1787</citation>
	<citation>1781	4	1787</citation>
	<citation>1781	4	1787</citation>
	<citation>1781	4	1787</citation>
	<citation>1781	4	1787</citation>
	<citation>1781	4	1787</citation>
	<citation>1781	4	1787</citation>
	<citation>1781	4	1787</citation>
	<citation>1787	4	1787</citation>
	<citation>1787	4	1787</citation>
	<citation>1787	4	1787</citation>
	<citation>1787	4	1787</citation>
	<citation>1787	4	1787</citation>
	<citation>1787	4	1787</citation>
	<citation>1787	4	1787</citation>
	<citation>1787	4	1787</citation>
	<citation>1787	4	1787</citation>
	<citation>1792	4	1787</citation>
	<citation>1824	4	1787</citation>
	<citation>1825	4	1787</citation>
	<citation>1836	4	1787</citation>
	<citation>1836	4	1787</citation>
	<citation>1860	4	1787</citation>
	<citation>1861	4	1787</citation>
	<citation>1945	4	1787</citation>
	<citation>1945	4	1787</citation>
	<citation>1945	4	1787</citation>
	<citation>1945	4	1787</citation>
	<citation>1949	4	1787</citation>
	<citation>1988	4	1787</citation>
	<citation>1989	4	1787</citation>
	<citation>321	4	1787</citation>
	<citation>364	4	1787</citation>
	<citation>2015	4	1787</citation>
	<citation>2059	4	1787</citation>
	<citation>2060	4	1787</citation>
	<citation>2061	4	1787</citation>
	<citation>2061	4	1787</citation>
	<citation>2082	4	1787</citation>
	<citation>2091	4	1787</citation>
	<citation>2110	4	1787</citation>
	<citation>2112	4	1787</citation>
	<citation>2126	4	1787</citation>
	<citation>2127	4	1787</citation>
	<citation>2152	4	1787</citation>
	<citation>2179	4	1787</citation>
	<citation>2187	4	1787</citation>
	<citation>2252	4	1787</citation>
	<citation>2317	4	1787</citation>
	<citation>2340	4	1787</citation>
	<citation>2356	4	1787</citation>
	<citation>2534	4	1787</citation>
	<citation>405	4	1787</citation>
	<citation>2541	4	1787</citation>
	<citation>2545	4	1787</citation>
	<citation>2546	4	1787</citation>
	<citation>435	4	1787</citation>
	<citation>437	4	1787</citation>
	<citation>438	4	1787</citation>
	<citation>463	4	1787</citation>
	<citation>483	4	1787</citation>
	<citation>491	4	1787</citation>
	<citation>2603	4	1787</citation>
	<citation>2603	4	1787</citation>
	<citation>2698	4	1787</citation>
	<citation>2698	4	1787</citation>
	<citation>2698	4	1787</citation>
	<citation>2708	4	1787</citation>
	<citation>2732	4	1787</citation>
	<citation>2733	4	1787</citation>
	<citation>2733	4	1787</citation>
	<citation>2820	4	1787</citation>
	<citation>2824	4	1787</citation>
	<citation>2982	4	1787</citation>
	<citation>2986	4	1787</citation>
	<citation>560	4	1787</citation>
	<citation>583	4	1787</citation>
	<citation>3045	4	1787</citation>
	<citation>3073	4	1787</citation>
	<citation>3073	4	1787</citation>
	<citation>3093	4	1787</citation>
	<citation>3155	4	1787</citation>
	<citation>627	4	1787</citation>
	<citation>631	4	1787</citation>
	<citation>632	4	1787</citation>
	<citation>642	4	1787</citation>
	<citation>644	4	1787</citation>
	<citation>653	4	1787</citation>
	<citation>680	4	1787</citation>
	<citation>761	4	1787</citation>
	<citation>762	4	1787</citation>
	<citation>763	4	1787</citation>
	<citation>763	4	1787</citation>
	<citation>123	4	1787</citation>
	<citation>140	4	1787</citation>
	<citation>919	4	1787</citation>
	<citation>989	4	1787</citation>
	<citation>196	5	1787</citation>
	<citation>1141	5	1787</citation>
	<citation>1215	5	1787</citation>
	<citation>224	5	1787</citation>
	<citation>1491	5	1787</citation>
	<citation>1496	5	1787</citation>
	<citation>1781	5	1787</citation>
	<citation>1787	5	1787</citation>
	<citation>1787	5	1787</citation>
	<citation>1787	5	1787</citation>
	<citation>2534	5	1787</citation>
	<citation>2708	5	1787</citation>
	<citation>763	5	1787</citation>
	<citation>799	5	1787</citation>
	<citation>830	6	1787</citation>
	<citation>123	6	1787</citation>
	<citation>196	6	1787</citation>
	<citation>919	6	1787</citation>
	<citation>990	6	1787</citation>
	<citation>1007	6	1787</citation>
	<citation>1046	6	1787</citation>
	<citation>1131	6	1787</citation>
	<citation>1139	6	1787</citation>
	<citation>1140	6	1787</citation>
	<citation>1149	6	1787</citation>
	<citation>1198	6	1787</citation>
	<citation>1215	6	1787</citation>
	<citation>1223	6	1787</citation>
	<citation>1265	6	1787</citation>
	<citation>1303	6	1787</citation>
	<citation>1323	6	1787</citation>
	<citation>1358	6	1787</citation>
	<citation>1366	6	1787</citation>
	<citation>1421	6	1787</citation>
	<citation>1460	6	1787</citation>
	<citation>1462	6	1787</citation>
	<citation>1463	6	1787</citation>
	<citation>1467	6	1787</citation>
	<citation>1468	6	1787</citation>
	<citation>1477	6	1787</citation>
	<citation>1477	6	1787</citation>
	<citation>1491	6	1787</citation>
	<citation>1491	6	1787</citation>
	<citation>1496	6	1787</citation>
	<citation>1531	6	1787</citation>
	<citation>1535	6	1787</citation>
	<citation>1565	6	1787</citation>
	<citation>1601	6	1787</citation>
	<citation>1602	6	1787</citation>
	<citation>1613	6	1787</citation>
	<citation>1614	6	1787</citation>
	<citation>1626	6	1787</citation>
	<citation>1641	6	1787</citation>
	<citation>1787	6	1787</citation>
	<citation>1787	6	1787</citation>
	<citation>1787	6	1787</citation>
	<citation>1788	6	1787</citation>
	<citation>205	6	1787</citation>
	<citation>224	6	1787</citation>
	<citation>249	6	1787</citation>
	<citation>288	6	1787</citation>
	<citation>1959	6	1787</citation>
	<citation>1973	6	1787</citation>
	<citation>316	6	1787</citation>
	<citation>381	6	1787</citation>
	<citation>398	6	1787</citation>
	<citation>2111	6	1787</citation>
	<citation>2111	6	1787</citation>
	<citation>11	6	1787</citation>
	<citation>2182	6	1787</citation>
	<citation>2534	6	1787</citation>
	<citation>2556	6	1787</citation>
	<citation>404	6	1787</citation>
	<citation>410	6	1787</citation>
	<citation>463	6	1787</citation>
	<citation>464	6	1787</citation>
	<citation>483	6	1787</citation>
	<citation>3184	6	1787</citation>
	<citation>3188	6	1787</citation>
	<citation>584	6	1787</citation>
	<citation>600	6	1787</citation>
	<citation>680	6	1787</citation>
	<citation>680	6	1787</citation>
	<citation>691	6	1787</citation>
	<citation>763	6	1787</citation>
	<citation>799	6	1787</citation>
	<citation>799	6	1787</citation>
	</citations>
	</document>
	<document id= '1786'>
	<title>An Improved Hash Code for Scatter Storage</title>
	<abstract>Introduced is a hash coding method based on fixed-point division rather than multiplication  or logical operations.  This new method allows the hash table to have almost any length.  Also a new  method of handling collisions is discussed.  Known as quadratic search, this method is faster than random  search and free from the "clusters" that build up with a linear search.</abstract>
	<conference>CACM January, 1968</conference>
	<authors>
	<author>Maurer, W. D.</author>
	</authors>
	<keywords>hash code, hash table, scatter storage, searching</keywords>
	<version>3.74 4.11 4.12 4.9</version>
	<location>CA680108 JB February 23, 1978  2:31 PM</location>
	<citations>
	<citation>1786	5	1786</citation>
	<citation>1786	5	1786</citation>
	<citation>1786	5	1786</citation>
	<citation>1860	5	1786</citation>
	<citation>1973	5	1786</citation>
	<citation>1992	5	1786</citation>
	<citation>2018	5	1786</citation>
	<citation>2033	5	1786</citation>
	<citation>2107	5	1786</citation>
	<citation>2109	5	1786</citation>
	<citation>2203	5	1786</citation>
	<citation>2251	5	1786</citation>
	<citation>2543	5	1786</citation>
	<citation>2573	5	1786</citation>
	<citation>2770	5	1786</citation>
	<citation>911	6	1786</citation>
	<citation>1314	6	1786</citation>
	<citation>1366	6	1786</citation>
	<citation>1389	6	1786</citation>
	<citation>1421	6	1786</citation>
	<citation>1496	6	1786</citation>
	<citation>1626	6	1786</citation>
	<citation>1641	6	1786</citation>
	<citation>1785	6	1786</citation>
	<citation>1785	6	1786</citation>
	<citation>1785	6	1786</citation>
	<citation>1785	6	1786</citation>
	<citation>1785	6	1786</citation>
	<citation>1785	6	1786</citation>
	<citation>1785	6	1786</citation>
	<citation>1785	6	1786</citation>
	<citation>1785	6	1786</citation>
	<citation>1786	6	1786</citation>
	<citation>1786	6	1786</citation>
	<citation>1786	6	1786</citation>
	<citation>1786	6	1786</citation>
	<citation>1786	6	1786</citation>
	<citation>1786	6	1786</citation>
	<citation>1786	6	1786</citation>
	<citation>1786	6	1786</citation>
	<citation>1786	6	1786</citation>
	<citation>1786	6	1786</citation>
	<citation>1786	6	1786</citation>
	<citation>1786	6	1786</citation>
	<citation>1869	6	1786</citation>
	<citation>1973	6	1786</citation>
	<citation>1973	6	1786</citation>
	<citation>1973	6	1786</citation>
	<citation>1992	6	1786</citation>
	<citation>332	6	1786</citation>
	<citation>378	6	1786</citation>
	<citation>2018	6	1786</citation>
	<citation>2018	6	1786</citation>
	<citation>2018	6	1786</citation>
	<citation>2107	6	1786</citation>
	<citation>2107	6	1786</citation>
	<citation>2107	6	1786</citation>
	<citation>2107	6	1786</citation>
	<citation>2107	6	1786</citation>
	<citation>2107	6	1786</citation>
	<citation>2109	6	1786</citation>
	<citation>2109	6	1786</citation>
	<citation>2109	6	1786</citation>
	<citation>2109	6	1786</citation>
	<citation>2109	6	1786</citation>
	<citation>2109	6	1786</citation>
	<citation>2673	6	1786</citation>
	<citation>492	6	1786</citation>
	<citation>3184	6	1786</citation>
	</citations>
	</document>
	<document id= '1785'>
	<title>Scatter Storage Techniques</title>
	<abstract>Scatter storage techniques as a method for implementing the symbol tables of assemblers and  compilers are reviewed and a number of ways of using them more effectively are presented.  Many of the  most useful variants of the techniques are documented.</abstract>
	<conference>CACM January, 1968</conference>
	<authors>
	<author>Morris, R.</author>
	</authors>
	<keywords>scatter storage, hash addressing, searching, file searching, file addressing, storage layout</keywords>
	<version>3.73 3.74</version>
	<location>CA680109 JB February 23, 1978  2:26 PM</location>
	<citations>
	<citation>1271	4	1785</citation>
	<citation>1785	4	1785</citation>
	<citation>1785	4	1785</citation>
	<citation>1785	4	1785</citation>
	<citation>2203	4	1785</citation>
	<citation>2203	4	1785</citation>
	<citation>2543	4	1785</citation>
	<citation>2552	4	1785</citation>
	<citation>2552	4	1785</citation>
	<citation>2860	4	1785</citation>
	<citation>911	4	1785</citation>
	<citation>911	4	1785</citation>
	<citation>911	5	1785</citation>
	<citation>1676	5	1785</citation>
	<citation>1682	5	1785</citation>
	<citation>1728	5	1785</citation>
	<citation>1785	5	1785</citation>
	<citation>1785	5	1785</citation>
	<citation>1785	5	1785</citation>
	<citation>1860	5	1785</citation>
	<citation>1973	5	1785</citation>
	<citation>332	5	1785</citation>
	<citation>2018	5	1785</citation>
	<citation>2032	5	1785</citation>
	<citation>2033	5	1785</citation>
	<citation>2107	5	1785</citation>
	<citation>2109	5	1785</citation>
	<citation>2203	5	1785</citation>
	<citation>2251	5	1785</citation>
	<citation>2359	5	1785</citation>
	<citation>2524	5	1785</citation>
	<citation>2543	5	1785</citation>
	<citation>2552	5	1785</citation>
	<citation>2559	5	1785</citation>
	<citation>2991	5	1785</citation>
	<citation>492	5	1785</citation>
	<citation>3053	5	1785</citation>
	<citation>849	6	1785</citation>
	<citation>911	6	1785</citation>
	<citation>911	6	1785</citation>
	<citation>1025	6	1785</citation>
	<citation>1314	6	1785</citation>
	<citation>1329	6	1785</citation>
	<citation>1366	6	1785</citation>
	<citation>1389	6	1785</citation>
	<citation>1421	6	1785</citation>
	<citation>1496	6	1785</citation>
	<citation>1525	6	1785</citation>
	<citation>1626	6	1785</citation>
	<citation>1641	6	1785</citation>
	<citation>1647	6	1785</citation>
	<citation>1785	6	1785</citation>
	<citation>1785	6	1785</citation>
	<citation>1785	6	1785</citation>
	<citation>1785	6	1785</citation>
	<citation>1785	6	1785</citation>
	<citation>1785	6	1785</citation>
	<citation>1785	6	1785</citation>
	<citation>1785	6	1785</citation>
	<citation>1785	6	1785</citation>
	<citation>1785	6	1785</citation>
	<citation>1785	6	1785</citation>
	<citation>1785	6	1785</citation>
	<citation>1785	6	1785</citation>
	<citation>1785	6	1785</citation>
	<citation>1785	6	1785</citation>
	<citation>1785	6	1785</citation>
	<citation>1785	6	1785</citation>
	<citation>1785	6	1785</citation>
	<citation>1785	6	1785</citation>
	<citation>1786	6	1785</citation>
	<citation>1786	6	1785</citation>
	<citation>1786	6	1785</citation>
	<citation>1786	6	1785</citation>
	<citation>1786	6	1785</citation>
	<citation>1786	6	1785</citation>
	<citation>1786	6	1785</citation>
	<citation>1786	6	1785</citation>
	<citation>1786	6	1785</citation>
	<citation>1973	6	1785</citation>
	<citation>1973	6	1785</citation>
	<citation>1973	6	1785</citation>
	<citation>1973	6	1785</citation>
	<citation>1992	6	1785</citation>
	<citation>332	6	1785</citation>
	<citation>332	6	1785</citation>
	<citation>378	6	1785</citation>
	<citation>2018	6	1785</citation>
	<citation>2107	6	1785</citation>
	<citation>2107	6	1785</citation>
	<citation>2107	6	1785</citation>
	<citation>2107	6	1785</citation>
	<citation>2107	6	1785</citation>
	<citation>2107	6	1785</citation>
	<citation>2107	6	1785</citation>
	<citation>2109	6	1785</citation>
	<citation>2109	6	1785</citation>
	<citation>2109	6	1785</citation>
	<citation>2109	6	1785</citation>
	<citation>2109	6	1785</citation>
	<citation>2109	6	1785</citation>
	<citation>2203	6	1785</citation>
	<citation>2203	6	1785</citation>
	<citation>2203	6	1785</citation>
	<citation>2412	6	1785</citation>
	<citation>2543	6	1785</citation>
	<citation>2673	6	1785</citation>
	<citation>2707	6	1785</citation>
	<citation>2770	6	1785</citation>
	<citation>492	6	1785</citation>
	<citation>3184	6	1785</citation>
	</citations>
	</document>
	<document id= '1784'>
	<title>Practical Error Coefficients for Estimating Quadrature Errors for Analytic Functions</title>
	<abstract>All published error coefficients for estimating quadrature errors for analytic functions were  computed on the assumption that the quadrature rule was exact for polynomials up to a given degree.   Since these rules use rounded values for the abscissas and weights and since the true values of the integrals  of some of the polynomials in question have an infinite binary expression, the quadrature rule is not  exact.  Hence these errors must be taken into consideration in computing practical error coefficients.</abstract>
	<conference>CACM January, 1968</conference>
	<authors>
	<author>Rabinowitz, P.</author>
	</authors>
	<keywords>numerical integration, quadrature, truncation error, theoretical error coefficients, practical  error coefficients, integration analytical functions, roundoff error</keywords>
	<version>5.11 5.16</version>
	<location>CA680110 JB February 23, 1978  2:22 PM</location>
	<citations>
	<citation>1672	5	1784</citation>
	<citation>1784	5	1784</citation>
	<citation>1784	5	1784</citation>
	<citation>1784	5	1784</citation>
	<citation>1784	6	1784</citation>
	</citations>
	</document>
	<document id= '1783'>
	<title>In-and-Out Conversions</title>
	<abstract>Byan in-and-out conversion we mean that a floating-point number in one base is converted into  a floating-point number in another base and then converted back to a floating-point number in the original  base.  For all combinations of rounding and truncation conversions the question is considered of how  many significant digits are needed in the intermediate base to allow such in-and-out conversions to return  the original number (when possible), or at least significant digit.</abstract>
	<conference>CACM January, 1968</conference>
	<authors>
	<author>Matula, D. W.</author>
	</authors>
	<keywords>floating-point numbers, significance, base conversion, rounding, truncation</keywords>
	<version>3.15 5.11</version>
	<location>CA680111 JB February 23, 1978  2:14 PM</location>
	<citations>
	<citation>1783	4	1783</citation>
	<citation>1843	4	1783</citation>
	<citation>1634	5	1783</citation>
	<citation>1783	5	1783</citation>
	<citation>1783	5	1783</citation>
	<citation>1783	5	1783</citation>
	<citation>1843	5	1783</citation>
	<citation>1634	6	1783</citation>
	<citation>1783	6	1783</citation>
	</citations>
	</document>
	<document id= '1782'>
	<title>A Numerical Integration Formula Useful in Fourier Analysis</title>
	<abstract>A numerical integration formula is presented which uses unequal sampling intervals.  The intervals  are equally spaced on a log scale.  Such a formulation is useful in Fourier analysis to improve accuracy  and ease of usage.  A complete set of formulas for numerical Fourier analysis is given.</abstract>
	<conference>CACM January, 1968</conference>
	<authors>
	<author>Meisel, W. S.</author>
	</authors>
	<keywords>numerical integration, Fourier analysis, integration</keywords>
	<version>5.16</version>
	<location>CA680112 JB February 23, 1978  2:05 PM</location>
	<citations>
	<citation>1782	5	1782</citation>
	<citation>1782	5	1782</citation>
	<citation>1782	5	1782</citation>
	</citations>
	</document>
	<document id= '1781'>
	<title>Translator Writing systems</title>
	<abstract>A critical review of recent efforts to automate the writing of translators of programming languages  is presented.  The formal study of syntax and its application to translator writing are discussed in  Section II.  Various approaches to automating the post syntactic (semantic) aspects of translator writing  are discussed in Section III, and several related topics in Section IV.</abstract>
	<conference>CACM February, 1968</conference>
	<authors>
	<author>Feldman, J.</author>
	<author>Gries, D.</author>
	</authors>
	<keywords>compiler, compiler-compiler, translator, translator writing systems, metacompiler, syntax, semantics,  syntax-directed, meta-assembler, macroprocessor, parser, syntactic analysis, generator</keywords>
	<version>4.1 4.10 4.12 4.22 5.23</version>
	<location>CA680201 JB February 23, 1978  2:02 PM</location>
	<citations>
	<citation>249	4	1781</citation>
	<citation>254	4	1781</citation>
	<citation>267	4	1781</citation>
	<citation>272	4	1781</citation>
	<citation>1046	4	1781</citation>
	<citation>1062	4	1781</citation>
	<citation>1072	4	1781</citation>
	<citation>1086	4	1781</citation>
	<citation>1102	4	1781</citation>
	<citation>1102	4	1781</citation>
	<citation>1105	4	1781</citation>
	<citation>1109	4	1781</citation>
	<citation>1121	4	1781</citation>
	<citation>1132	4	1781</citation>
	<citation>1139	4	1781</citation>
	<citation>1139	4	1781</citation>
	<citation>1139	4	1781</citation>
	<citation>1140	4	1781</citation>
	<citation>1140	4	1781</citation>
	<citation>1141	4	1781</citation>
	<citation>1142	4	1781</citation>
	<citation>1188	4	1781</citation>
	<citation>1215	4	1781</citation>
	<citation>1215	4	1781</citation>
	<citation>1223	4	1781</citation>
	<citation>1225	4	1781</citation>
	<citation>1234	4	1781</citation>
	<citation>1234	4	1781</citation>
	<citation>1263	4	1781</citation>
	<citation>1263	4	1781</citation>
	<citation>1265	4	1781</citation>
	<citation>1265	4	1781</citation>
	<citation>1265	4	1781</citation>
	<citation>1270	4	1781</citation>
	<citation>1306	4	1781</citation>
	<citation>1306	4	1781</citation>
	<citation>1323	4	1781</citation>
	<citation>1323	4	1781</citation>
	<citation>1350	4	1781</citation>
	<citation>1350	4	1781</citation>
	<citation>1358	4	1781</citation>
	<citation>1358	4	1781</citation>
	<citation>1358	4	1781</citation>
	<citation>1358	4	1781</citation>
	<citation>1379	4	1781</citation>
	<citation>1379	4	1781</citation>
	<citation>1380	4	1781</citation>
	<citation>1380	4	1781</citation>
	<citation>1380	4	1781</citation>
	<citation>1396	4	1781</citation>
	<citation>1399	4	1781</citation>
	<citation>1425	4	1781</citation>
	<citation>1453	4	1781</citation>
	<citation>1464	4	1781</citation>
	<citation>1464	4	1781</citation>
	<citation>1469	4	1781</citation>
	<citation>1484	4	1781</citation>
	<citation>1486	4	1781</citation>
	<citation>1491	4	1781</citation>
	<citation>1491	4	1781</citation>
	<citation>1491	4	1781</citation>
	<citation>1491	4	1781</citation>
	<citation>1496	4	1781</citation>
	<citation>1498	4	1781</citation>
	<citation>1498	4	1781</citation>
	<citation>1503	4	1781</citation>
	<citation>1530	4	1781</citation>
	<citation>1541	4	1781</citation>
	<citation>1542	4	1781</citation>
	<citation>1552	4	1781</citation>
	<citation>1565	4	1781</citation>
	<citation>1565	4	1781</citation>
	<citation>1612	4	1781</citation>
	<citation>1613	4	1781</citation>
	<citation>1614	4	1781</citation>
	<citation>1626	4	1781</citation>
	<citation>1646	4	1781</citation>
	<citation>1647	4	1781</citation>
	<citation>1659	4	1781</citation>
	<citation>1665	4	1781</citation>
	<citation>1683	4	1781</citation>
	<citation>1693	4	1781</citation>
	<citation>1693	4	1781</citation>
	<citation>1693	4	1781</citation>
	<citation>1693	4	1781</citation>
	<citation>1708	4	1781</citation>
	<citation>1708	4	1781</citation>
	<citation>1767	4	1781</citation>
	<citation>1767	4	1781</citation>
	<citation>1767	4	1781</citation>
	<citation>1767	4	1781</citation>
	<citation>1768	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1781	4	1781</citation>
	<citation>1787	4	1781</citation>
	<citation>1787	4	1781</citation>
	<citation>1787	4	1781</citation>
	<citation>1787	4	1781</citation>
	<citation>1787	4	1781</citation>
	<citation>1787	4	1781</citation>
	<citation>1787	4	1781</citation>
	<citation>1788	4	1781</citation>
	<citation>1788	4	1781</citation>
	<citation>1792	4	1781</citation>
	<citation>1807	4	1781</citation>
	<citation>1824	4	1781</citation>
	<citation>1824	4	1781</citation>
	<citation>1824	4	1781</citation>
	<citation>1825	4	1781</citation>
	<citation>1826	4	1781</citation>
	<citation>1836	4	1781</citation>
	<citation>1836	4	1781</citation>
	<citation>1852	4	1781</citation>
	<citation>1854	4	1781</citation>
	<citation>1860	4	1781</citation>
	<citation>1860	4	1781</citation>
	<citation>1860	4	1781</citation>
	<citation>1860	4	1781</citation>
	<citation>1860	4	1781</citation>
	<citation>1860	4	1781</citation>
	<citation>1861	4	1781</citation>
	<citation>1945	4	1781</citation>
	<citation>1945	4	1781</citation>
	<citation>1945	4	1781</citation>
	<citation>1945	4	1781</citation>
	<citation>1945	4	1781</citation>
	<citation>1945	4	1781</citation>
	<citation>1945	4	1781</citation>
	<citation>1945	4	1781</citation>
	<citation>1945	4	1781</citation>
	<citation>1945	4	1781</citation>
	<citation>1945	4	1781</citation>
	<citation>1947	4	1781</citation>
	<citation>1949	4	1781</citation>
	<citation>1988	4	1781</citation>
	<citation>1988	4	1781</citation>
	<citation>1988	4	1781</citation>
	<citation>1989	4	1781</citation>
	<citation>321	4	1781</citation>
	<citation>364	4	1781</citation>
	<citation>2015	4	1781</citation>
	<citation>2034	4	1781</citation>
	<citation>2059	4	1781</citation>
	<citation>2060	4	1781</citation>
	<citation>2060	4	1781</citation>
	<citation>2060	4	1781</citation>
	<citation>2061	4	1781</citation>
	<citation>2061	4	1781</citation>
	<citation>2061	4	1781</citation>
	<citation>2083	4	1781</citation>
	<citation>2082	4	1781</citation>
	<citation>2091	4	1781</citation>
	<citation>2091	4	1781</citation>
	<citation>2091	4	1781</citation>
	<citation>2110	4	1781</citation>
	<citation>2112	4	1781</citation>
	<citation>2126	4	1781</citation>
	<citation>2126	4	1781</citation>
	<citation>2126	4	1781</citation>
	<citation>2150	4	1781</citation>
	<citation>2152	4	1781</citation>
	<citation>2156	4	1781</citation>
	<citation>2168	4	1781</citation>
	<citation>2175	4	1781</citation>
	<citation>2178	4	1781</citation>
	<citation>2178	4	1781</citation>
	<citation>2178	4	1781</citation>
	<citation>2179	4	1781</citation>
	<citation>2179	4	1781</citation>
	<citation>2179	4	1781</citation>
	<citation>2228	4	1781</citation>
	<citation>2249	4	1781</citation>
	<citation>2252	4	1781</citation>
	<citation>2252	4	1781</citation>
	<citation>2252	4	1781</citation>
	<citation>2256	4	1781</citation>
	<citation>2299	4	1781</citation>
	<citation>2314	4	1781</citation>
	<citation>2317	4	1781</citation>
	<citation>2325	4	1781</citation>
	<citation>2326	4	1781</citation>
	<citation>2326	4	1781</citation>
	<citation>2341	4	1781</citation>
	<citation>2341	4	1781</citation>
	<citation>2341	4	1781</citation>
	<citation>2340	4	1781</citation>
	<citation>2356	4	1781</citation>
	<citation>2342	4	1781</citation>
	<citation>2376	4	1781</citation>
	<citation>2470	4	1781</citation>
	<citation>2534	4	1781</citation>
	<citation>2534	4	1781</citation>
	<citation>405	4	1781</citation>
	<citation>2541	4	1781</citation>
	<citation>2546	4	1781</citation>
	<citation>2546	4	1781</citation>
	<citation>2546	4	1781</citation>
	<citation>2546	4	1781</citation>
	<citation>435	4	1781</citation>
	<citation>437	4	1781</citation>
	<citation>438	4	1781</citation>
	<citation>438	4	1781</citation>
	<citation>2579	4	1781</citation>
	<citation>463	4	1781</citation>
	<citation>464	4	1781</citation>
	<citation>483	4	1781</citation>
	<citation>491	4	1781</citation>
	<citation>2603	4	1781</citation>
	<citation>2603	4	1781</citation>
	<citation>2618	4	1781</citation>
	<citation>2645	4	1781</citation>
	<citation>2650	4	1781</citation>
	<citation>2652	4	1781</citation>
	<citation>2684	4	1781</citation>
	<citation>2684	4	1781</citation>
	<citation>2684	4	1781</citation>
	<citation>2698	4	1781</citation>
	<citation>2698	4	1781</citation>
	<citation>2698	4	1781</citation>
	<citation>2698	4	1781</citation>
	<citation>2708	4	1781</citation>
	<citation>2708	4	1781</citation>
	<citation>2708	4	1781</citation>
	<citation>2708	4	1781</citation>
	<citation>2719	4	1781</citation>
	<citation>2732	4	1781</citation>
	<citation>2733	4	1781</citation>
	<citation>2736	4	1781</citation>
	<citation>2820	4	1781</citation>
	<citation>2824	4	1781</citation>
	<citation>2833	4	1781</citation>
	<citation>2842	4	1781</citation>
	<citation>2929	4	1781</citation>
	<citation>2934	4	1781</citation>
	<citation>2982	4	1781</citation>
	<citation>2986	4	1781</citation>
	<citation>557	4	1781</citation>
	<citation>560	4	1781</citation>
	<citation>583	4	1781</citation>
	<citation>584	4	1781</citation>
	<citation>3044	4	1781</citation>
	<citation>3045	4	1781</citation>
	<citation>3045	4	1781</citation>
	<citation>3069	4	1781</citation>
	<citation>3073	4	1781</citation>
	<citation>3073	4	1781</citation>
	<citation>3093	4	1781</citation>
	<citation>3093	4	1781</citation>
	<citation>3094	4	1781</citation>
	<citation>3155	4	1781</citation>
	<citation>3184	4	1781</citation>
	<citation>627	4	1781</citation>
	<citation>631	4	1781</citation>
	<citation>631	4	1781</citation>
	<citation>632	4	1781</citation>
	<citation>637	4	1781</citation>
	<citation>642	4	1781</citation>
	<citation>644	4	1781</citation>
	<citation>653	4	1781</citation>
	<citation>653	4	1781</citation>
	<citation>669	4	1781</citation>
	<citation>669	4	1781</citation>
	<citation>679	4	1781</citation>
	<citation>680	4	1781</citation>
	<citation>680	4	1781</citation>
	<citation>691	4	1781</citation>
	<citation>720	4	1781</citation>
	<citation>729	4	1781</citation>
	<citation>759	4	1781</citation>
	<citation>761	4	1781</citation>
	<citation>761	4	1781</citation>
	<citation>762	4	1781</citation>
	<citation>762	4	1781</citation>
	<citation>762	4	1781</citation>
	<citation>763	4	1781</citation>
	<citation>763	4	1781</citation>
	<citation>763	4	1781</citation>
	<citation>795	4	1781</citation>
	<citation>799	4	1781</citation>
	<citation>123	4	1781</citation>
	<citation>140	4	1781</citation>
	<citation>919	4	1781</citation>
	<citation>945	4	1781</citation>
	<citation>949	4	1781</citation>
	<citation>949	4	1781</citation>
	<citation>949	4	1781</citation>
	<citation>989	4	1781</citation>
	<citation>989	4	1781</citation>
	<citation>989	4	1781</citation>
	<citation>123	5	1781</citation>
	<citation>196	5	1781</citation>
	<citation>919	5	1781</citation>
	<citation>990	5	1781</citation>
	<citation>1007	5	1781</citation>
	<citation>1046	5	1781</citation>
	<citation>1131	5	1781</citation>
	<citation>1139	5	1781</citation>
	<citation>1140	5	1781</citation>
	<citation>1149	5	1781</citation>
	<citation>1198	5	1781</citation>
	<citation>1215	5	1781</citation>
	<citation>1223	5	1781</citation>
	<citation>1265	5	1781</citation>
	<citation>1303	5	1781</citation>
	<citation>1323	5	1781</citation>
	<citation>205	5	1781</citation>
	<citation>1358	5	1781</citation>
	<citation>224	5	1781</citation>
	<citation>249	5	1781</citation>
	<citation>1366	5	1781</citation>
	<citation>288	5	1781</citation>
	<citation>1421	5	1781</citation>
	<citation>1460	5	1781</citation>
	<citation>1462	5	1781</citation>
	<citation>1463	5	1781</citation>
	<citation>1468	5	1781</citation>
	<citation>1467	5	1781</citation>
	<citation>1477	5	1781</citation>
	<citation>1491	5	1781</citation>
	<citation>1496	5	1781</citation>
	<citation>1531	5	1781</citation>
	<citation>1535	5	1781</citation>
	<citation>1565	5	1781</citation>
	<citation>1601	5	1781</citation>
	<citation>1602	5	1781</citation>
	<citation>1613	5	1781</citation>
	<citation>1614	5	1781</citation>
	<citation>1626	5	1781</citation>
	<citation>1641	5	1781</citation>
	<citation>1665	5	1781</citation>
	<citation>1768	5	1781</citation>
	<citation>1781	5	1781</citation>
	<citation>1781	5	1781</citation>
	<citation>1781	5	1781</citation>
	<citation>1787	5	1781</citation>
	<citation>1788	5	1781</citation>
	<citation>1824	5	1781</citation>
	<citation>1825	5	1781</citation>
	<citation>1836	5	1781</citation>
	<citation>1861	5	1781</citation>
	<citation>316	5	1781</citation>
	<citation>381	5	1781</citation>
	<citation>398	5	1781</citation>
	<citation>2015	5	1781</citation>
	<citation>2110	5	1781</citation>
	<citation>2127	5	1781</citation>
	<citation>2187	5	1781</citation>
	<citation>2317	5	1781</citation>
	<citation>2545	5	1781</citation>
	<citation>2698	5	1781</citation>
	<citation>2733	5	1781</citation>
	<citation>404	5	1781</citation>
	<citation>410	5	1781</citation>
	<citation>463	5	1781</citation>
	<citation>464	5	1781</citation>
	<citation>483	5	1781</citation>
	<citation>11	5	1781</citation>
	<citation>584	5	1781</citation>
	<citation>3184	5	1781</citation>
	<citation>3188	5	1781</citation>
	<citation>600	5	1781</citation>
	<citation>680	5	1781</citation>
	<citation>691	5	1781</citation>
	<citation>763	5	1781</citation>
	<citation>799	5	1781</citation>
	<citation>196	6	1781</citation>
	<citation>1141	6	1781</citation>
	<citation>1141	6	1781</citation>
	<citation>1155	6	1781</citation>
	<citation>1191	6	1781</citation>
	<citation>1198	6	1781</citation>
	<citation>1215	6	1781</citation>
	<citation>1265	6	1781</citation>
	<citation>1265	6	1781</citation>
	<citation>1324	6	1781</citation>
	<citation>1358	6	1781</citation>
	<citation>1477	6	1781</citation>
	<citation>1477	6	1781</citation>
	<citation>1477	6	1781</citation>
	<citation>1487	6	1781</citation>
	<citation>1491	6	1781</citation>
	<citation>1491	6	1781</citation>
	<citation>1491	6	1781</citation>
	<citation>1496	6	1781</citation>
	<citation>1527	6	1781</citation>
	<citation>1572	6	1781</citation>
	<citation>1614	6	1781</citation>
	<citation>1614	6	1781</citation>
	<citation>1693	6	1781</citation>
	<citation>1739	6	1781</citation>
	<citation>1748	6	1781</citation>
	<citation>1749	6	1781</citation>
	<citation>1753	6	1781</citation>
	<citation>1781	6	1781</citation>
	<citation>1781	6	1781</citation>
	<citation>1781	6	1781</citation>
	<citation>1781	6	1781</citation>
	<citation>1781	6	1781</citation>
	<citation>1781	6	1781</citation>
	<citation>1781	6	1781</citation>
	<citation>1781	6	1781</citation>
	<citation>1781	6	1781</citation>
	<citation>1781	6	1781</citation>
	<citation>1781	6	1781</citation>
	<citation>1781	6	1781</citation>
	<citation>1781	6	1781</citation>
	<citation>1781	6	1781</citation>
	<citation>1781	6	1781</citation>
	<citation>224	6	1781</citation>
	<citation>1856	6	1781</citation>
	<citation>378	6	1781</citation>
	<citation>2110	6	1781</citation>
	<citation>2126	6	1781</citation>
	<citation>2148	6	1781</citation>
	<citation>2179	6	1781</citation>
	<citation>2341	6	1781</citation>
	<citation>2423	6	1781</citation>
	<citation>2556	6	1781</citation>
	<citation>2786	6	1781</citation>
	<citation>404	6	1781</citation>
	<citation>408	6	1781</citation>
	<citation>3184	6	1781</citation>
	<citation>577	6	1781</citation>
	<citation>631	6	1781</citation>
	<citation>680	6	1781</citation>
	<citation>763	6	1781</citation>
	<citation>799	6	1781</citation>
	<citation>799	6	1781</citation>
	<citation>799	6	1781</citation>
	<citation>799	6	1781</citation>
	</citations>
	</document>
	<document id= '1780'>
	<title>Harmonic Analysis for Symmetrically Distributed Data (Algorithm 320 [C6])</title>
	<conference>CACM February, 1968</conference>
	<authors>
	<author>Hunter, D. B.</author>
	</authors>
	<keywords>harmonic analysis, cosine series, sine series, function approximation, curve fitting, trigonometric  series</keywords>
	<version>5.13</version>
	<location>CA680202 JB February 23, 1978  1:34 PM</location>
	<citations>
	<citation>1780	5	1780</citation>
	<citation>1780	5	1780</citation>
	<citation>1780	5	1780</citation>
	</citations>
	</document>
	<document id= '1779'>
	<title>t-Test Probabilities (Algorithm [S14])</title>
	<conference>CACM February, 1968</conference>
	<authors>
	<author>Morris, J.</author>
	</authors>
	<keywords>T-test, Student's t-statistic, distribution function</keywords>
	<version>5.5</version>
	<location>CA680203 JB February 23, 1978  1:33 PM</location>
	<citations>
	<citation>1157	4	1779</citation>
	<citation>1779	4	1779</citation>
	<citation>1920	4	1779</citation>
	<citation>1944	4	1779</citation>
	<citation>1987	4	1779</citation>
	<citation>2548	4	1779</citation>
	<citation>1779	5	1779</citation>
	<citation>1779	5	1779</citation>
	<citation>1779	5	1779</citation>
	<citation>1944	5	1779</citation>
	<citation>1987	5	1779</citation>
	<citation>714	5	1779</citation>
	<citation>1561	6	1779</citation>
	<citation>1581	6	1779</citation>
	<citation>1779	6	1779</citation>
	<citation>1779	6	1779</citation>
	<citation>1944	6	1779</citation>
	<citation>714	6	1779</citation>
	<citation>714	6	1779</citation>
	</citations>
	</document>
	<document id= '1778'>
	<title>F-Distribution (Algorithm 322 [S14])</title>
	<conference>CACM February, 1968</conference>
	<authors>
	<author>Dorrer, E.</author>
	</authors>
	<keywords>Fisher's  F-distribution, Student's t-distribution</keywords>
	<version>5.5</version>
	<location>CA680204 JB February 23, 1978  12:06 PM</location>
	<citations>
	<citation>1778	5	1778</citation>
	<citation>1778	5	1778</citation>
	<citation>1778	5	1778</citation>
	<citation>1920	5	1778</citation>
	<citation>1778	6	1778</citation>
	<citation>714	6	1778</citation>
	</citations>
	</document>
	<document id= '1777'>
	<title>Generation of Permutations in Lexicographic Order (Algorithm 323 [G6])</title>
	<conference>CACM February, 1968</conference>
	<authors>
	<author>Smith, R. J.</author>
	</authors>
	<keywords>permutations, lexicographic order, lexicographic generation, permutation generation</keywords>
	<version>5.39</version>
	<location>CA680205 JB February 23, 1978  12:04 PM</location>
	<citations>
	<citation>1777	5	1777</citation>
	<citation>1777	5	1777</citation>
	<citation>1777	5	1777</citation>
	<citation>1814	5	1777</citation>
	<citation>1777	6	1777</citation>
	</citations>
	</document>
	<document id= '1776'>
	<title>Maxflow (Algorithm 324 [H])</title>
	<conference>CACM February, 1968</conference>
	<authors>
	<author>Bayer, G.</author>
	</authors>
	<keywords>network,liner programming, maximum flow</keywords>
	<version>5.41</version>
	<location>CA680206 JB February 23, 1978  12:02 PM</location>
	<citations>
	<citation>1776	5	1776</citation>
	<citation>1776	5	1776</citation>
	<citation>1776	5	1776</citation>
	</citations>
	</document>
	<document id= '1775'>
	<title>Adjustment of the Inverse of a Symmetric Matrix when Two Symmetric Elements are Changed (Algorithm  325 [F1])</title>
	<conference>CACM February, 1968</conference>
	<authors>
	<author>Zielke, G.</author>
	</authors>
	<keywords>symmetric matrix, matrix inverse, matrix perturbation, matrix modification</keywords>
	<version>5.14</version>
	<location>CA680207 JB February 23, 1978  12:01 PM</location>
	<citations>
	<citation>1775	5	1775</citation>
	<citation>1775	5	1775</citation>
	<citation>1775	5	1775</citation>
	</citations>
	</document>
	<document id= '1774'>
	<title>Program Overlay Techniques</title>
	<abstract>The general features of program overlay systems are described.  Three main types -- automatic,  semiautomatic and nonautomatic -- are classified, and the programming techniques are explained as a function  of machine hardware and other system features.  The implementation of semiautomatic overlay facility  in a multiprogrammed system on the CDC 6600 is described in detail, with special reference to real time  applications.</abstract>
	<conference>CACM February, 1968</conference>
	<authors>
	<author>Pankhurst, R. J.</author>
	</authors>
	<keywords>loaders, multiprogramming, overlay techniques, storage allocation and segmentation</keywords>
	<version>4.39</version>
	<location>CA680208 JB February 23, 1978  11:59 AM</location>
	<citations>
	<citation>1471	4	1774</citation>
	<citation>1774	4	1774</citation>
	<citation>1774	4	1774</citation>
	<citation>1774	4	1774</citation>
	<citation>2343	4	1774</citation>
	<citation>560	4	1774</citation>
	<citation>972	4	1774</citation>
	<citation>1173	5	1774</citation>
	<citation>271	5	1774</citation>
	<citation>1774	5	1774</citation>
	<citation>1774	5	1774</citation>
	<citation>1774	5	1774</citation>
	<citation>2343	5	1774</citation>
	<citation>800	5	1774</citation>
	<citation>1173	6	1774</citation>
	<citation>1774	6	1774</citation>
	<citation>1845	6	1774</citation>
	</citations>
	</document>
	<document id= '1773'>
	<citations>
	<citation>1773	5	1773</citation>
	<citation>1773	5	1773</citation>
	<citation>1773	5	1773</citation>
	</citations>
	<title>General Purpose Alphanumeric Keyboard Arrangement for Information Interchange* (Proposed USA  Standard)</title>
	<conference>CACM February, 1968</conference>
	<location>CA680209 JB February 23, 1978  11:56 AM</location>
	</document>
	<document id= '1772'>
	<citations>
	<citation>1772	5	1772</citation>
	<citation>1772	5	1772</citation>
	<citation>1772	5	1772</citation>
	</citations>
	<title>USASCSOCR Dual Case Keyboard Arrangement* (Proposed USA Standard)</title>
	<conference>CACM February, 1968</conference>
	<location>CA680210 JB February 23, 1978  11:54 AM</location>
	</document>
	<document id= '1771'>
	<title>CURRICULUM 68 -- Recommendations for Academic Programs in Computer Science -- A Report of the  ACM Curriculum Committee on Computer science</title>
	<abstract>This report contains recommendations on academic programs in computer science which were developed  by the ACM Curriculum Committee on Computer Science.  A classification of the subject areas contained  in computer science is presented and twenty-two courses in these areas are described.  Prerequisites,  catalog descriptions, detailed outlines, and annotated bibliographies for these courses are included.   Specific recommendations which have evolved from the Committee's 1965 Preliminary Recommendations are  given for undergraduate programs.  Graduate programs in computer science are discussed and some recommendations  are presented for the development of master's degree programs.  Ways of developing guidelines for doctoral  programs are discussed, but no specific recommendations are made. The importance of service courses,  minors, and continuing education in computer science is emphasized.  Attention is given to the organization,  staff requirements, computer resources, and other facilities needed to implement computer science educational  programs.</abstract>
	<conference>CACM March, 1968</conference>
	<keywords>computer science courses, computer science curriculum, computer science education, computer science  academic programs, computer science graduate programs, computer science undergraduate programs, computer  science course bibliographies</keywords>
	<version>1.52</version>
	<location>CA680301 JB February 23, 1978  11:52 AM</location>
	<citations>
	<citation>1413	4	1771</citation>
	<citation>1654	4	1771</citation>
	<citation>1720	4	1771</citation>
	<citation>1771	4	1771</citation>
	<citation>1771	4	1771</citation>
	<citation>2478	4	1771</citation>
	<citation>1205	5	1771</citation>
	<citation>1654	5	1771</citation>
	<citation>1720	5	1771</citation>
	<citation>1771	5	1771</citation>
	<citation>1771	5	1771</citation>
	<citation>1771	5	1771</citation>
	<citation>1927	5	1771</citation>
	<citation>2147	5	1771</citation>
	<citation>2163	5	1771</citation>
	<citation>2345	5	1771</citation>
	<citation>2478	5	1771</citation>
	<citation>2594	5	1771</citation>
	<citation>2852	5	1771</citation>
	<citation>2899	5	1771</citation>
	<citation>3130	5	1771</citation>
	<citation>1205	6	1771</citation>
	<citation>1417	6	1771</citation>
	<citation>1654	6	1771</citation>
	<citation>1659	6	1771</citation>
	<citation>1720	6	1771</citation>
	<citation>1771	6	1771</citation>
	<citation>1771	6	1771</citation>
	<citation>1771	6	1771</citation>
	<citation>1771	6	1771</citation>
	<citation>1771	6	1771</citation>
	<citation>1771	6	1771</citation>
	<citation>1771	6	1771</citation>
	<citation>1771	6	1771</citation>
	<citation>1771	6	1771</citation>
	<citation>1771	6	1771</citation>
	<citation>1927	6	1771</citation>
	<citation>2155	6	1771</citation>
	<citation>2181	6	1771</citation>
	<citation>2181	6	1771</citation>
	<citation>2204	6	1771</citation>
	<citation>2329	6	1771</citation>
	<citation>2345	6	1771</citation>
	<citation>2387	6	1771</citation>
	<citation>2479	6	1771</citation>
	<citation>2538	6	1771</citation>
	<citation>3003	6	1771</citation>
	<citation>3186	6	1771</citation>
	</citations>
	</document>
	<document id= '1770'>
	<title>Rules of Ethics in Information Processing</title>
	<abstract>The background and motivation for the adoption by the ACM Council on November 11, 1966, of  a set of Guidelines for Professional Conduct in Information Processing are described.  A brief his tory  is given of ethical codes in other professions.  Some reasons for and against adoption of ethical rules  are considered, and several sections of the ACM Guidelines are analyzed.  The purpose is to inform about  this important aspect of our profession, as well as to stimulate thought and interest.</abstract>
	<conference>CACM March, 1968</conference>
	<authors>
	<author>Parker, D. B.</author>
	</authors>
	<keywords>ethics, professional conduct, code of ethics, ACM guidelines, professionalism, professional societies,  unethical conduct</keywords>
	<version>1.3 2.2</version>
	<location>CA680302 JB February 23, 1978  11:41 AM</location>
	<citations>
	<citation>1770	4	1770</citation>
	<citation>1628	5	1770</citation>
	<citation>1770	5	1770</citation>
	<citation>1770	5	1770</citation>
	<citation>1770	5	1770</citation>
	</citations>
	</document>
	<document id= '1769'>
	<title>The Expanding World of Computers</title>
	<abstract>The onward sweep of automatic processing of information is impeded by nine principal barriers:  geography, cost, problem complexity, man-machine communication, inadequate sensors, lack of understanding,  distance, time, and size.  The main incentive for breaching these barriers is the universal need for  processing information, ever more urgent as the greater part of human work activity changes from production  to service.  Computer developments in hardware, programming, time-sharing, education, data communication,  and displays are judged by how effectively they remove these barriers, and their barrier-smashing potentialities  indicate continued rapid expansion.  Problem-oriented languages are particularly effective over the entire  front.  Online computers and time-sharing also rate high by this measure.  Education and increased understanding  are basic to all progress with the computer.  This complex but powerful tool is the most important one  available to governments and scientists to use in studying the problems being created by the population  explosion, and in analyzing possible solutions.</abstract>
	<conference>CACM April, 1968</conference>
	<authors>
	<author>Harder, E. L.</author>
	</authors>
	<keywords>barriers, philosophy, developments, computer-aided design, problem-oriented languages, data communication,  education, computer science, forecast, survey, introduction</keywords>
	<version>1.0 1.3 2.1 3.24 4.0 6.20 6.30</version>
	<location>CA680401 JB February 23, 1978  11:36 AM</location>
	<citations>
	<citation>1769	5	1769</citation>
	<citation>1769	5	1769</citation>
	<citation>1769	5	1769</citation>
	</citations>
	</document>
	<document id= '1768'>
	<title>A Global Parser for Context-Free Phrase Structure Grammars</title>
	<abstract>An algorithm for analyzing any context-free phrase structure grammar and for generating a program  which can then parse any sentence in the language (or indicate that the given sentence is invalid) is  described. The parser is of the "top-to-bottom" type and is recursive . A number of heuristic procedures  whose purpose is to shorten the basic algorithm by quickly ascertaining that certain substrings of the  input sentence cannot correspond to the target nonterminal symbols are included.  Both the generating  algorithm and the parser have been implemented in RCA SNOBOL and have been tested successfully on a number  of artificial grammars and on a subset of ALGOL.  A number of the routines for extracting data about  a grammar, such as minimum lengths of N-derivable strings and possible prefixes, are given and may be  of interest apart from their application in this particular context.</abstract>
	<conference>CACM April, 1968</conference>
	<authors>
	<author>Unger, S. H.</author>
	</authors>
	<keywords>parser, syntax-directed compiler, context-free grammars, syntactic analysis, translators</keywords>
	<version>3.42 4.12 5.24</version>
	<location>CA680402 JB February 23, 1978  11:27 AM</location>
	<citations>
	<citation>1350	4	1768</citation>
	<citation>1399	4	1768</citation>
	<citation>1496	4	1768</citation>
	<citation>1659	4	1768</citation>
	<citation>1665	4	1768</citation>
	<citation>1683	4	1768</citation>
	<citation>1768	4	1768</citation>
	<citation>1768	4	1768</citation>
	<citation>1768	4	1768</citation>
	<citation>1781	4	1768</citation>
	<citation>1787	4	1768</citation>
	<citation>1787	4	1768</citation>
	<citation>1824	4	1768</citation>
	<citation>1825	4	1768</citation>
	<citation>1836	4	1768</citation>
	<citation>1861	4	1768</citation>
	<citation>1945	4	1768</citation>
	<citation>1945	4	1768</citation>
	<citation>2015	4	1768</citation>
	<citation>2061	4	1768</citation>
	<citation>2110	4	1768</citation>
	<citation>2110	4	1768</citation>
	<citation>2127	4	1768</citation>
	<citation>2187	4	1768</citation>
	<citation>2317	4	1768</citation>
	<citation>2545	4	1768</citation>
	<citation>2698	4	1768</citation>
	<citation>2733	4	1768</citation>
	<citation>3094	4	1768</citation>
	<citation>1141	5	1768</citation>
	<citation>1265	5	1768</citation>
	<citation>1768	5	1768</citation>
	<citation>1768	5	1768</citation>
	<citation>1768	5	1768</citation>
	<citation>1781	5	1768</citation>
	</citations>
	</document>
	<document id= '1767'>
	<title>A General Purpose Graphic Language</title>
	<abstract>Interactive use of computers with graphic terminals will permit many new problems to be solved  using machines.  In order to handle a variety of applications, it is expedient to develop a general purpose  graphic language that is useful on a number of graphic devices.  A system has been designed to produce  such a language quickly and cheaply.  A model graphic language which has been developed with the system  is presented.</abstract>
	<conference>CACM April, 1968</conference>
	<authors>
	<author>Kulsrud, H. E.</author>
	</authors>
	<keywords>graphic language, interactive, incremental compilation, language design, metacompiler, syntax specified  language</keywords>
	<version>4.12 4.22</version>
	<location>CA680403 JB February 23, 1978  11:17 AM</location>
	<citations>
	<citation>249	4	1767</citation>
	<citation>254	4	1767</citation>
	<citation>272	4	1767</citation>
	<citation>1102	4	1767</citation>
	<citation>1109	4	1767</citation>
	<citation>1140	4	1767</citation>
	<citation>1188	4	1767</citation>
	<citation>1306	4	1767</citation>
	<citation>1396	4	1767</citation>
	<citation>1464	4	1767</citation>
	<citation>1491	4	1767</citation>
	<citation>1767	4	1767</citation>
	<citation>1767	4	1767</citation>
	<citation>1767	4	1767</citation>
	<citation>1767	4	1767</citation>
	<citation>1781	4	1767</citation>
	<citation>1781	4	1767</citation>
	<citation>1781	4	1767</citation>
	<citation>1781	4	1767</citation>
	<citation>1787	4	1767</citation>
	<citation>1787	4	1767</citation>
	<citation>1860	4	1767</citation>
	<citation>1945	4	1767</citation>
	<citation>1949	4	1767</citation>
	<citation>1988	4	1767</citation>
	<citation>321	4	1767</citation>
	<citation>2059	4	1767</citation>
	<citation>2126	4	1767</citation>
	<citation>2252	4	1767</citation>
	<citation>2341	4	1767</citation>
	<citation>435	4	1767</citation>
	<citation>437	4	1767</citation>
	<citation>463	4	1767</citation>
	<citation>483	4	1767</citation>
	<citation>491	4	1767</citation>
	<citation>2732	4	1767</citation>
	<citation>560	4	1767</citation>
	<citation>583	4	1767</citation>
	<citation>3073	4	1767</citation>
	<citation>627	4	1767</citation>
	<citation>631	4	1767</citation>
	<citation>632	4	1767</citation>
	<citation>642	4	1767</citation>
	<citation>644	4	1767</citation>
	<citation>653	4	1767</citation>
	<citation>680	4	1767</citation>
	<citation>761	4	1767</citation>
	<citation>762	4	1767</citation>
	<citation>763	4	1767</citation>
	<citation>123	4	1767</citation>
	<citation>140	4	1767</citation>
	<citation>919	4	1767</citation>
	<citation>989	4	1767</citation>
	<citation>196	5	1767</citation>
	<citation>1468	5	1767</citation>
	<citation>1467	5	1767</citation>
	<citation>1496	5	1767</citation>
	<citation>1767	5	1767</citation>
	<citation>1767	5	1767</citation>
	<citation>1767	5	1767</citation>
	<citation>2002	5	1767</citation>
	<citation>2003	5	1767</citation>
	<citation>2152	5	1767</citation>
	<citation>1491	6	1767</citation>
	<citation>1710	6	1767</citation>
	<citation>1767	6	1767</citation>
	<citation>1767	6	1767</citation>
	<citation>1767	6	1767</citation>
	<citation>1937	6	1767</citation>
	<citation>2105	6	1767</citation>
	</citations>
	</document>
	<document id= '1766'>
	<title>Quasilinearization and the Estimation of Differential Operators from Eigenvalues</title>
	<abstract>Given a linear ordinary differential operator containing several unknown constants and a number  of its eigenvalues, the values of the unknown constants are estimated.  A precise formulation is provided,  and an effective numerical procedure for solution is indicated.   The results of some computational experiments  are given.</abstract>
	<conference>CACM April, 1968</conference>
	<authors>
	<author>Bellman, R. E.</author>
	<author>Kagiwada, H. H.</author>
	<author>Kalaba, R. E.</author>
	<author>Vasudenvan, R.</author>
	</authors>
	<keywords>quasilinearization, eigenvalues, differential operators, nonlinear boundary-value problems, inverse  problems,differential equations, system identification</keywords>
	<version>3.15 3.17 5.17</version>
	<location>CA680404 JB February 23, 1978  11:12 AM</location>
	<citations>
	<citation>1766	4	1766</citation>
	<citation>1401	5	1766</citation>
	<citation>1766	5	1766</citation>
	<citation>1766	5	1766</citation>
	<citation>1766	5	1766</citation>
	</citations>
	</document>
	<document id= '1765'>
	<title>Expenditures, Sources of Funds, and Utilization of Digital Computers for Research and Instruction  in Higher Education: 1964-65 with Projections for 1968-69</title>
	<abstract>The Southern Regional Education Board published a complete report on a survey it conducted  to determine the funding and characterize the utilization of computers used for research and instruction  in institutions of higher education in the United States. The sampling survey is described and the estimates  for this total population are presented.</abstract>
	<conference>CACM April, 1968</conference>
	<authors>
	<author>Hamblen, J. W.</author>
	</authors>
	<keywords>computing centers, research, instruction, utilization, expenditures, support, sources of funds,  higher education, post secondary education, colleges, universities</keywords>
	<version>1.52 2.45</version>
	<location>CA680405 JB February 23, 1978  11:07 AM</location>
	<citations>
	<citation>1765	5	1765</citation>
	<citation>1765	5	1765</citation>
	<citation>1765	5	1765</citation>
	</citations>
	</document>
	<document id= '1764'>
	<title>Panel Discussion on Computer Appreciation</title>
	<abstract>Session 19 of the ACM 20 th Anniversary Conference on August 31, 1967, was entitled Education,  Design Experiments, and Computer Appreciation.  Its second half consisted of a panel discussion on computer  appreciation, organized and chaired by Elliot I. Organick.  The four panelists were Charles H. Davidson,  Bernard A. Galler, Richard, W. Hamming, and Alan J. Perlis.  After making prepared statements, the panelists  were joined in discussion by Andries van Dam and Arthur B.Kohn, who had presented papers in the first  half.  This is a transcript of the panel discussion, condensed by Dr. Organick and edited by him and  the panelists.  Some remarks referred to papers by van Dam and Kahn or to the discussion during the first  half of the session.  Pertinent papers are included in the references.</abstract>
	<conference>CACM April, 1968</conference>
	<authors>
	<author>Organick, E. I.</author>
	</authors>
	<keywords>computer appreciation, students' liberal arts courses, survey courses, beginning programming, course  content, computer courses dropout rates, college versus precollege, teaching and social responsibility</keywords>
	<version>1.1 1.51 1.52</version>
	<location>CA680406 JB February 23, 1978  10:34 AM</location>
	<citations>
	<citation>1764	5	1764</citation>
	<citation>1764	5	1764</citation>
	<citation>1764	5	1764</citation>
	</citations>
	</document>
	<document id= '1763'>
	<title>Roots of Low-Order Polynomial Equations (Algorithm 326 [C2])</title>
	<conference>CACM April, 1968</conference>
	<authors>
	<author>Nonweiler, T. F.</author>
	</authors>
	<keywords>root finders, polynomial equation roots, quadratic equation roots, cubic equation roots, biquadratic  equation roots, polynomial zeros</keywords>
	<version>5.15</version>
	<location>CA680407 JB February 23, 1978  10:27 AM</location>
	<citations>
	<citation>1763	5	1763</citation>
	<citation>1763	5	1763</citation>
	<citation>1763	5	1763</citation>
	</citations>
	</document>
	<document id= '1762'>
	<title>Dilogarithm (Algorithm 327 [S22])</title>
	<conference>CACM April, 1968</conference>
	<authors>
	<author>Kolbig, K. S.</author>
	</authors>
	<keywords>dilogarithm function, special functions</keywords>
	<version>5.12</version>
	<location>CA680408 JB February 23, 1978  10:25 AM</location>
	<citations>
	<citation>1762	5	1762</citation>
	<citation>1762	5	1762</citation>
	<citation>1762	5	1762</citation>
	</citations>
	</document>
	<document id= '1761'>
	<title>Chi-Squared Integral (Algorithm 299 [S15])</title>
	<conference>CACM April, 1968</conference>
	<authors>
	<author>Brien, W. M.</author>
	<author>Wood, J.</author>
	</authors>
	<keywords>chi-squared integral, probability, special functions</keywords>
	<version>5.5 5.12</version>
	<location>CA680409 JB February 23, 1978  10:24 AM</location>
	<citations>
	<citation>1761	5	1761</citation>
	<citation>1761	5	1761</citation>
	<citation>1761	5	1761</citation>
	<citation>2668	5	1761</citation>
	<citation>1604	6	1761</citation>
	<citation>1728	6	1761</citation>
	<citation>1761	6	1761</citation>
	<citation>1827	6	1761</citation>
	<citation>2677	6	1761</citation>
	</citations>
	</document>
	<document id= '1760'>
	<title>Normal Curve Integral (Algorithm 304 [S15])</title>
	<conference>CACM April, 1968</conference>
	<authors>
	<author>Bergson, A.</author>
	</authors>
	<keywords>normal curve integral, probability, special functions</keywords>
	<version>5.5 5.12</version>
	<location>CA680410 JB February 23, 1978  10:22 AM</location>
	<citations>
	<citation>1760	5	1760</citation>
	<citation>1760	5	1760</citation>
	<citation>1760	5	1760</citation>
	<citation>1838	5	1760</citation>
	<citation>1760	6	1760</citation>
	</citations>
	</document>
	<document id= '1759'>
	<title>Transportation Problem (Algorithm 293 [H])</title>
	<conference>CACM April, 1968</conference>
	<authors>
	<author>Bayer, G.</author>
	</authors>
	<keywords>transportation problem, linear programming</keywords>
	<version>5.41</version>
	<location>CA680411 JB February 23, 1978  10:20 AM</location>
	<citations>
	<citation>1759	5	1759</citation>
	<citation>1759	5	1759</citation>
	<citation>1759	5	1759</citation>
	</citations>
	</document>
	<document id= '1758'>
	<title>Symmetric Polynomials, (Algorithm 305 [C1])</title>
	<conference>CACM April, 1968</conference>
	<authors>
	<author>McKay, S.</author>
	</authors>
	<keywords>symmetric polynomials, symmetric sum, unitary symmetric functions, Schur functions</keywords>
	<version>5.39</version>
	<location>CA680412 JB February 23, 1978  10:19 AM</location>
	<citations>
	<citation>1758	5	1758</citation>
	<citation>1758	5	1758</citation>
	<citation>1758	5	1758</citation>
	</citations>
	</document>
	<document id= '1757'>
	<title>Data Code for Calendar Date for Machine-to-Machine Data Interchange* (Proposed USA Standard)</title>
	<conference>CACM April, 1968</conference>
	<keywords>USA Standard, data code, calendar date, machine-to-machine data interchange, recording calendar  date, data group identifier</keywords>
	<version>2.0 2.11 2.19 2.3 2.40 2.43 2.49 3.50 3.52 3.53 3.55 3.56 3.59 3.70 3.71 3.73 3.74, 3.79, 3.81, 4.1, 4.9</version>
	<location>CA680413 JB February 23, 1978  10:18 AM</location>
	<citations>
	<citation>1757	5	1757</citation>
	<citation>1757	5	1757</citation>
	<citation>1757	5	1757</citation>
	</citations>
	</document>
	<document id= '1756'>
	<title>Hollerith Punched Card Code* (Proposed USA Standard)</title>
	<conference>CACM April, 1968</conference>
	<keywords>USA Standard, card code, punched card, punched card code, hole-patterns, hole-patterns assignment,  punched card systems</keywords>
	<version>1.4 2.0 2.2 2.43 2.9 3.15 3.24 3.50 3.57 3.7 3.80 3.81 3.82 4.11 4.12</version>
	<location>CA680414 JB February 23, 1978  10:14 AM</location>
	<citations>
	<citation>1756	5	1756</citation>
	<citation>1756	5	1756</citation>
	<citation>1756	5	1756</citation>
	</citations>
	</document>
	<document id= '1755'>
	<citations>
	<citation>1755	5	1755</citation>
	<citation>1755	5	1755</citation>
	<citation>1755	5	1755</citation>
	</citations>
	<title>Proceedings of the ACM Symposium on Operating system Principles</title>
	<conference>CACM May, 1968</conference>
	<authors>
	</authors>
	<location>CA680501 JB February 23, 1978  9:56 AM</location>
	</document>
	<document id= '1754'>
	<title>Dynamic Storage Allocation Systems</title>
	<abstract>In many recent computer system designs, hardware facilities have been provided for easing the  problems of storage allocation.  A method of characterizing dynamic storage allocation systems-according  to the functional capabilities provided and the underlying techniques used-is presented.  The basic purpose  of the paper is to provide a useful perspective from which the utility of various hardware facilities  may be assessed.  A brief survey of storage allocation facilities in several representative computer  systems is included as an appendix.</abstract>
	<conference>CACM May, 1968</conference>
	<authors>
	<author>Randell, B.</author>
	<author>Kuehner, C. J.</author>
	</authors>
	<keywords>segmentation, paging, multiprogramming, storage allocation, storage management, virtual memories,  storage fragmentation, storage hierarchies, addressing mechanisms</keywords>
	<version>4.30 6.20</version>
	<location>CA680502 JB February 23, 1978  9:49 AM</location>
	<citations>
	<citation>1754	4	1754</citation>
	<citation>1754	4	1754</citation>
	<citation>2358	4	1754</citation>
	<citation>488	4	1754</citation>
	<citation>274	5	1754</citation>
	<citation>1754	5	1754</citation>
	<citation>1754	5	1754</citation>
	<citation>1754	5	1754</citation>
	<citation>1879	5	1754</citation>
	<citation>1884	5	1754</citation>
	<citation>1901	5	1754</citation>
	<citation>376	5	1754</citation>
	<citation>2095	5	1754</citation>
	<citation>2277	5	1754</citation>
	<citation>2297	5	1754</citation>
	<citation>2365	5	1754</citation>
	<citation>168	6	1754</citation>
	<citation>185	6	1754</citation>
	<citation>987	6	1754</citation>
	<citation>1728	6	1754</citation>
	<citation>1728	6	1754</citation>
	<citation>1751	6	1754</citation>
	<citation>1751	6	1754</citation>
	<citation>1751	6	1754</citation>
	<citation>1754	6	1754</citation>
	<citation>1754	6	1754</citation>
	<citation>1754	6	1754</citation>
	<citation>1754	6	1754</citation>
	<citation>1754	6	1754</citation>
	<citation>1754	6	1754</citation>
	<citation>1754	6	1754</citation>
	<citation>1879	6	1754</citation>
	<citation>1924	6	1754</citation>
	<citation>2362	6	1754</citation>
	</citations>
	</document>
	<document id= '1753'>
	<title>Virtual Memory, Processes, and Sharing in MULTICS</title>
	<abstract>Some basic concepts involved in the design of the MULTICS operating system are introduced.   MULTICS concepts of processes, address space, and virtual memory are defined and the use of paging and  segmentation is explained.  The means by which users may share procedures and data is discussed and the  mechanism by which symbolic references are dynamically transformed into virtual machine addresses is  described in detail.</abstract>
	<conference>CACM May, 1968</conference>
	<authors>
	<author>Daley, R. C.</author>
	<author>Dennis, J. B.</author>
	</authors>
	<keywords>virtual memory, information sharing, shared procedures, data sharing, dynamic linking, segmentation,  paging, multiprogramming, storage management, storage hierarchies, file maintenance</keywords>
	<version>3.73 4.32</version>
	<location>CA680503 JB February 23, 1978  9:44 AM</location>
	<citations>
	<citation>1753	4	1753</citation>
	<citation>2358	4	1753</citation>
	<citation>2377	4	1753</citation>
	<citation>2372	4	1753</citation>
	<citation>2626	4	1753</citation>
	<citation>2840	4	1753</citation>
	<citation>1746	5	1753</citation>
	<citation>1753	5	1753</citation>
	<citation>1753	5	1753</citation>
	<citation>1753	5	1753</citation>
	<citation>2317	5	1753</citation>
	<citation>2358	5	1753</citation>
	<citation>2625	5	1753</citation>
	<citation>1198	6	1753</citation>
	<citation>1471	6	1753</citation>
	<citation>1572	6	1753</citation>
	<citation>1693	6	1753</citation>
	<citation>1746	6	1753</citation>
	<citation>1749	6	1753</citation>
	<citation>1751	6	1753</citation>
	<citation>1753	6	1753</citation>
	<citation>1753	6	1753</citation>
	<citation>1753	6	1753</citation>
	<citation>1781	6	1753</citation>
	<citation>274	6	1753</citation>
	<citation>2126	6	1753</citation>
	<citation>2148	6	1753</citation>
	<citation>2358	6	1753</citation>
	<citation>2438	6	1753</citation>
	</citations>
	</document>
	<document id= '1752'>
	<title>Resource Management for a Medium Scale Time-Sharing Operating system</title>
	<abstract>Task scheduling and resource balancing for a medium size virtual memory paging machine are  discussed in relation to a combined batch processing and time-sharing environment.  A synopsis is given  of the task scheduling and paging algorithms that were implemented, and the results of comparative simulation  are given by tracing the development of the algorithms through six predecessor versions.  Throughout  the discussion particular emphasis is placed on balancing the system performance relative to the characteristics  of all the system resources.  Simulation results relative to alternate hardware characteristics and the  effects of program mix and loading variations are also presented.</abstract>
	<conference>CACM May, 1968</conference>
	<authors>
	<author>Oppenheimer, G.</author>
	<author>Weizer, N.</author>
	</authors>
	<keywords>time-sharing, operating systems, resource management, task scheduling, paging, system simulation,  memory management, virtual memories</keywords>
	<version>4.30 4.31 4.32</version>
	<location>CA680504 JB February 23, 1978  9:39 AM</location>
	<citations>
	<citation>1751	5	1752</citation>
	<citation>1752	5	1752</citation>
	<citation>1752	5	1752</citation>
	<citation>1752	5	1752</citation>
	<citation>1892	5	1752</citation>
	<citation>2128	5	1752</citation>
	<citation>2218	5	1752</citation>
	<citation>1380	6	1752</citation>
	<citation>1526	6	1752</citation>
	<citation>1572	6	1752</citation>
	<citation>1572	6	1752</citation>
	<citation>1728	6	1752</citation>
	<citation>1728	6	1752</citation>
	<citation>1751	6	1752</citation>
	<citation>1751	6	1752</citation>
	<citation>1752	6	1752</citation>
	<citation>1752	6	1752</citation>
	<citation>1752	6	1752</citation>
	<citation>1752	6	1752</citation>
	<citation>1810	6	1752</citation>
	<citation>1879	6	1752</citation>
	<citation>2095	6	1752</citation>
	</citations>
	</document>
	<document id= '1751'>
	<title>The Working Set Model for Program Behavior</title>
	<abstract>Probably the most basic reason behind the absence of a general treatment of resource allocation  in modern computer systems is an adequate model for program behavior.  In this paper a new model, the  "working set model," is developed. The working set of pages associated with a process, defined to be  the collection of its most recently used pages, provides knowledge vital to the dynamic management of  paged memories.  "Process" and "working set" are shown to be manifestations of the same ongoing computational  activity; then "processor demand" and "memory demand" are defined; and resource allocation is formulated  as the problem of balancing demands against available equipment.</abstract>
	<conference>CACM May, 1968</conference>
	<authors>
	<author>Denning, P. J.</author>
	</authors>
	<keywords>general operating system concepts, multiprocessing, multiprogramming, operating systems, program  behavior, program models, resource allocation, scheduling, storage allocation</keywords>
	<version>4.30 4.32</version>
	<location>CA680505 JB February 23, 1978  9:33 AM</location>
	<citations>
	<citation>1751	4	1751</citation>
	<citation>1892	4	1751</citation>
	<citation>2128	4	1751</citation>
	<citation>2218	4	1751</citation>
	<citation>1751	5	1751</citation>
	<citation>1751	5	1751</citation>
	<citation>1751	5	1751</citation>
	<citation>1752	5	1751</citation>
	<citation>1892	5	1751</citation>
	<citation>1901	5	1751</citation>
	<citation>2085	5	1751</citation>
	<citation>2095	5	1751</citation>
	<citation>2218	5	1751</citation>
	<citation>2277	5	1751</citation>
	<citation>2319	5	1751</citation>
	<citation>2329	5	1751</citation>
	<citation>2358	5	1751</citation>
	<citation>2373	5	1751</citation>
	<citation>2380	5	1751</citation>
	<citation>2434	5	1751</citation>
	<citation>2499	5	1751</citation>
	<citation>2501	5	1751</citation>
	<citation>2582	5	1751</citation>
	<citation>2669	5	1751</citation>
	<citation>2828	5	1751</citation>
	<citation>2863	5	1751</citation>
	<citation>2881	5	1751</citation>
	<citation>2928	5	1751</citation>
	<citation>2996	5	1751</citation>
	<citation>3006	5	1751</citation>
	<citation>3067	5	1751</citation>
	<citation>168	6	1751</citation>
	<citation>185	6	1751</citation>
	<citation>1380	6	1751</citation>
	<citation>1408	6	1751</citation>
	<citation>1410	6	1751</citation>
	<citation>1502	6	1751</citation>
	<citation>1526	6	1751</citation>
	<citation>1572	6	1751</citation>
	<citation>1572	6	1751</citation>
	<citation>1719	6	1751</citation>
	<citation>1728	6	1751</citation>
	<citation>1728	6	1751</citation>
	<citation>1728	6	1751</citation>
	<citation>1728	6	1751</citation>
	<citation>1746	6	1751</citation>
	<citation>1749	6	1751</citation>
	<citation>1751	6	1751</citation>
	<citation>1751	6	1751</citation>
	<citation>1751	6	1751</citation>
	<citation>1751	6	1751</citation>
	<citation>1751	6	1751</citation>
	<citation>1751	6	1751</citation>
	<citation>1751	6	1751</citation>
	<citation>1751	6	1751</citation>
	<citation>1751	6	1751</citation>
	<citation>1751	6	1751</citation>
	<citation>1751	6	1751</citation>
	<citation>1751	6	1751</citation>
	<citation>1751	6	1751</citation>
	<citation>1751	6	1751</citation>
	<citation>1751	6	1751</citation>
	<citation>1751	6	1751</citation>
	<citation>1751	6	1751</citation>
	<citation>1751	6	1751</citation>
	<citation>1751	6	1751</citation>
	<citation>1751	6	1751</citation>
	<citation>1751	6	1751</citation>
	<citation>1751	6	1751</citation>
	<citation>1751	6	1751</citation>
	<citation>1753	6	1751</citation>
	<citation>1754	6	1751</citation>
	<citation>1754	6	1751</citation>
	<citation>1754	6	1751</citation>
	<citation>1752	6	1751</citation>
	<citation>1752	6	1751</citation>
	<citation>1810	6	1751</citation>
	<citation>1810	6	1751</citation>
	<citation>1879	6	1751</citation>
	<citation>1879	6	1751</citation>
	<citation>1884	6	1751</citation>
	<citation>1884	6	1751</citation>
	<citation>274	6	1751</citation>
	<citation>1901	6	1751</citation>
	<citation>1901	6	1751</citation>
	<citation>1924	6	1751</citation>
	<citation>1951	6	1751</citation>
	<citation>2004	6	1751</citation>
	<citation>2016	6	1751</citation>
	<citation>2017	6	1751</citation>
	<citation>2017	6	1751</citation>
	<citation>2017	6	1751</citation>
	<citation>2080	6	1751</citation>
	<citation>2095	6	1751</citation>
	<citation>2130	6	1751</citation>
	<citation>2188	6	1751</citation>
	<citation>2203	6	1751</citation>
	<citation>2204	6	1751</citation>
	<citation>2277	6	1751</citation>
	<citation>2358	6	1751</citation>
	<citation>2374	6	1751</citation>
	<citation>2374	6	1751</citation>
	<citation>2374	6	1751</citation>
	<citation>2373	6	1751</citation>
	<citation>2373	6	1751</citation>
	<citation>2373	6	1751</citation>
	<citation>2373	6	1751</citation>
	<citation>2380	6	1751</citation>
	<citation>2522	6	1751</citation>
	<citation>2569	6	1751</citation>
	<citation>2595	6	1751</citation>
	<citation>2595	6	1751</citation>
	<citation>2595	6	1751</citation>
	<citation>2682	6	1751</citation>
	<citation>2751	6	1751</citation>
	<citation>2841	6	1751</citation>
	<citation>2863	6	1751</citation>
	<citation>2863	6	1751</citation>
	<citation>2864	6	1751</citation>
	<citation>3006	6	1751</citation>
	</citations>
	</document>
	<document id= '1750'>
	<title>Considerations in the Design of a Multiple Computer System with Extended Core Storage</title>
	<abstract>The use of large quantities of addressable (but not executable) fast random access memory to  heighten the multiprogramming performance of a multicomputer system is discussed.  The general design  of the hardware arrangement and the software components and functions of such a system are based on a  planned configuration of dual CDC 6600's that share one million words of extended core storage.  In the  generalization of such a design, special emphasis is placed on estimating expected gains when compared  with the traditional configuration of separate and independent computers without extended core storage.   An observation is made on the use of conventional, slower speed, random access storage devices in place  of the faster memory.</abstract>
	<conference>CACM May, 1968</conference>
	<authors>
	<author>Fuchel, K.</author>
	<author>Heller, S.</author>
	</authors>
	<keywords>multiple computer systems, extended core storage, multiprogrammed operating systems, multiprocessor  operating systems, control data corporation 6600, operating system with ECS</keywords>
	<version>4.30 4.32</version>
	<location>CA680506 JB February 23, 1978  9:27 AM</location>
	<citations>
	<citation>1750	5	1750</citation>
	<citation>1750	5	1750</citation>
	<citation>1750	5	1750</citation>
	<citation>2988	5	1750</citation>
	<citation>1750	6	1750</citation>
	</citations>
	</document>
	<document id= '1749'>
	<title>The Structure of the "THE"-Multiprogramming System</title>
	<abstract>A multiprogramming system is described in which all activities are divided over a number of  sequential processes.  These sequential processes are placed at various hierarchical levels, in each  of which one or more independent abstractions have been implemented.  The hierarchical structure proved  to be vital for the verification of the logical soundness of the design and the correctness of its implementation.</abstract>
	<conference>CACM May, 1968</conference>
	<authors>
	<author>Dijkstra, E. W.</author>
	</authors>
	<keywords>operating system, multiprogramming system, system hierarchy, system structure, real-time debugging,  program verification, synchronizing primitives, cooperating sequential processes, system levels, input-output  buffering, multiprogramming, processor sharing, multiprocessing</keywords>
	<version>4.30 4.32</version>
	<location>CA680507 JB February 23, 1978  9:20 AM</location>
	<citations>
	<citation>1749	5	1749</citation>
	<citation>1749	5	1749</citation>
	<citation>1749	5	1749</citation>
	<citation>1828	5	1749</citation>
	<citation>1854	5	1749</citation>
	<citation>1877	5	1749</citation>
	<citation>1960	5	1749</citation>
	<citation>2150	5	1749</citation>
	<citation>2317	5	1749</citation>
	<citation>2319	5	1749</citation>
	<citation>2342	5	1749</citation>
	<citation>2376	5	1749</citation>
	<citation>2377	5	1749</citation>
	<citation>2379	5	1749</citation>
	<citation>2424	5	1749</citation>
	<citation>2482	5	1749</citation>
	<citation>2618	5	1749</citation>
	<citation>2632	5	1749</citation>
	<citation>2704	5	1749</citation>
	<citation>2723	5	1749</citation>
	<citation>2738	5	1749</citation>
	<citation>2740	5	1749</citation>
	<citation>2741	5	1749</citation>
	<citation>2867	5	1749</citation>
	<citation>3184	5	1749</citation>
	<citation>1198	6	1749</citation>
	<citation>1198	6	1749</citation>
	<citation>1198	6	1749</citation>
	<citation>1198	6	1749</citation>
	<citation>1198	6	1749</citation>
	<citation>1198	6	1749</citation>
	<citation>1247	6	1749</citation>
	<citation>1338	6	1749</citation>
	<citation>1338	6	1749</citation>
	<citation>1338	6	1749</citation>
	<citation>1408	6	1749</citation>
	<citation>1421	6	1749</citation>
	<citation>1471	6	1749</citation>
	<citation>1471	6	1749</citation>
	<citation>1471	6	1749</citation>
	<citation>1471	6	1749</citation>
	<citation>1471	6	1749</citation>
	<citation>1526	6	1749</citation>
	<citation>1549	6	1749</citation>
	<citation>1552	6	1749</citation>
	<citation>1572	6	1749</citation>
	<citation>1693	6	1749</citation>
	<citation>1719	6	1749</citation>
	<citation>1746	6	1749</citation>
	<citation>1748	6	1749</citation>
	<citation>1748	6	1749</citation>
	<citation>1749	6	1749</citation>
	<citation>1749	6	1749</citation>
	<citation>1749	6	1749</citation>
	<citation>1749	6	1749</citation>
	<citation>1749	6	1749</citation>
	<citation>1749	6	1749</citation>
	<citation>1749	6	1749</citation>
	<citation>1749	6	1749</citation>
	<citation>1749	6	1749</citation>
	<citation>1749	6	1749</citation>
	<citation>1749	6	1749</citation>
	<citation>1749	6	1749</citation>
	<citation>1749	6	1749</citation>
	<citation>1749	6	1749</citation>
	<citation>1749	6	1749</citation>
	<citation>1749	6	1749</citation>
	<citation>1749	6	1749</citation>
	<citation>1749	6	1749</citation>
	<citation>1749	6	1749</citation>
	<citation>1749	6	1749</citation>
	<citation>1749	6	1749</citation>
	<citation>1749	6	1749</citation>
	<citation>1751	6	1749</citation>
	<citation>1753	6	1749</citation>
	<citation>1781	6	1749</citation>
	<citation>1826	6	1749</citation>
	<citation>210	6	1749</citation>
	<citation>1854	6	1749</citation>
	<citation>1877	6	1749</citation>
	<citation>1877	6	1749</citation>
	<citation>1877	6	1749</citation>
	<citation>1960	6	1749</citation>
	<citation>2016	6	1749</citation>
	<citation>2017	6	1749</citation>
	<citation>2080	6	1749</citation>
	<citation>2080	6	1749</citation>
	<citation>2080	6	1749</citation>
	<citation>2080	6	1749</citation>
	<citation>2126	6	1749</citation>
	<citation>2148	6	1749</citation>
	<citation>2188	6	1749</citation>
	<citation>2203	6	1749</citation>
	<citation>2204	6	1749</citation>
	<citation>2228	6	1749</citation>
	<citation>2228	6	1749</citation>
	<citation>2247	6	1749</citation>
	<citation>2247	6	1749</citation>
	<citation>2256	6	1749</citation>
	<citation>2356	6	1749</citation>
	<citation>2356	6	1749</citation>
	<citation>2358	6	1749</citation>
	<citation>2379	6	1749</citation>
	<citation>2379	6	1749</citation>
	<citation>2454	6	1749</citation>
	<citation>2651	6	1749</citation>
	<citation>2673	6	1749</citation>
	<citation>2777	6	1749</citation>
	<citation>557	6	1749</citation>
	<citation>627	6	1749</citation>
	<citation>731	6	1749</citation>
	</citations>
	</document>
	<document id= '1748'>
	<title>A Scheduling Philosophy for Multiprocessing Systems</title>
	<abstract>A collection of basic ideas is presented, which have been evolved by various workers over the  past four years to provide a suitable framework for the design and analysis of multiprocessing systems.   The notions of process and state vector are discussed, and the nature of basic operations on processes  is considered.  Some of the connections between processes and protection are analyzed.  A very general  approach to priority-oriented scheduling is described, and its relationship to conventional interrupt  systems is explained.  Some aspects of time-oriented scheduling are considered. The implementation of  the scheduling mechanism is analyzed in detail and the feasibility of embodying it in hardware established.   Finally, several methods for interlocking the execution of independent processes are presented and compared.</abstract>
	<conference>CACM May, 1968</conference>
	<authors>
	<author>Lampson, B. W.</author>
	</authors>
	<keywords>time-sharing, multiprocessing, process, scheduling, interlocks, protection, priority, interrupt  systems</keywords>
	<version>4.31 4.32 6.21</version>
	<location>CA680508 JB February 23, 1978  9:13 AM</location>
	<citations>
	<citation>1458	4	1748</citation>
	<citation>1523	4	1748</citation>
	<citation>1603	4	1748</citation>
	<citation>1698	4	1748</citation>
	<citation>1747	4	1748</citation>
	<citation>1748	4	1748</citation>
	<citation>1854	4	1748</citation>
	<citation>1877	4	1748</citation>
	<citation>1960	4	1748</citation>
	<citation>2377	4	1748</citation>
	<citation>2378	4	1748</citation>
	<citation>2497	4	1748</citation>
	<citation>2558	4	1748</citation>
	<citation>2625	4	1748</citation>
	<citation>2632	4	1748</citation>
	<citation>2840	4	1748</citation>
	<citation>2941	4	1748</citation>
	<citation>3105	4	1748</citation>
	<citation>3144	4	1748</citation>
	<citation>1471	5	1748</citation>
	<citation>1748	5	1748</citation>
	<citation>1748	5	1748</citation>
	<citation>1748	5	1748</citation>
	<citation>1805	5	1748</citation>
	<citation>1828	5	1748</citation>
	<citation>1854	5	1748</citation>
	<citation>2187	5	1748</citation>
	<citation>1421	6	1748</citation>
	<citation>1471	6	1748</citation>
	<citation>1518	6	1748</citation>
	<citation>1572	6	1748</citation>
	<citation>1748	6	1748</citation>
	<citation>1748	6	1748</citation>
	<citation>1748	6	1748</citation>
	<citation>1748	6	1748</citation>
	<citation>1749	6	1748</citation>
	<citation>1749	6	1748</citation>
	<citation>1781	6	1748</citation>
	</citations>
	</document>
	<document id= '1747'>
	<title>Three Criteria for Designing Computing Systems to Facilitate Debugging</title>
	<abstract>The designer of a computing system should adopt explicit criteria for accepting or rejecting  proposed system features.  Three possible criteria of this kind are input recordability, input specifiability,  and asynchronous reproducibility of output.  These criteria imply that a user can, if he desires, either  know or control all the influences affecting the content and extent of his computer's output.  To define  the scope of the criteria, the notion of an abstract machine of a programming language and the notion  of a virtual computer are explained.  Examples of applications of the criteria concern the reading of  a time-of-day clock,  the synchronization of parallel processes, protection in multiprogrammed systems,  and the assignment of capability indexes.</abstract>
	<conference>CACM May, 1968</conference>
	<authors>
	<author>Horn, E. C.</author>
	</authors>
	<keywords>computer design, computer design criteria, computer systems, computer systems design, input equipment,  input equipment design, operating systems, operating systems design, multiprogramming, multiprogrammed  systems, multiprogrammed system design, virtual computers, programming languages, programming language  design, program semantics, programming language semantics, determinism, reproducibility, repeatability,  deterministic computers, protection, memory protection, information security, information privacy, computing  reliability, debugging, program debugging, program testing, parallel processing, parallel programming,  multiprocessing</keywords>
	<version>2.11 4.12 4.13 4.20 4.30 4.42 4.43 5.24 6.20 6.35</version>
	<location>CA680509 JB February 23, 1978  9:06 AM</location>
	<citations>
	<citation>1458	4	1747</citation>
	<citation>1523	4	1747</citation>
	<citation>1603	4	1747</citation>
	<citation>1698	4	1747</citation>
	<citation>1747	4	1747</citation>
	<citation>1748	4	1747</citation>
	<citation>1854	4	1747</citation>
	<citation>1877	4	1747</citation>
	<citation>1960	4	1747</citation>
	<citation>2377	4	1747</citation>
	<citation>2378	4	1747</citation>
	<citation>2497	4	1747</citation>
	<citation>2558	4	1747</citation>
	<citation>2625	4	1747</citation>
	<citation>2632	4	1747</citation>
	<citation>2840	4	1747</citation>
	<citation>2941	4	1747</citation>
	<citation>3105	4	1747</citation>
	<citation>3144	4	1747</citation>
	<citation>1471	5	1747</citation>
	<citation>1747	5	1747</citation>
	<citation>1747	5	1747</citation>
	<citation>1747	5	1747</citation>
	<citation>2151	5	1747</citation>
	<citation>1653	6	1747</citation>
	<citation>1747	6	1747</citation>
	<citation>1860	6	1747</citation>
	</citations>
	</document>
	<document id= '1746'>
	<title>Protection in an Information Processing Utility</title>
	<abstract>One of the critical problems in the design of an information processing utility that permits  flexible sharing of user information is privacy.  One solution for this problem is discussed.</abstract>
	<conference>CACM May, 1968</conference>
	<authors>
	<author>Graham, R.M.</author>
	</authors>
	<keywords>protection, privacy, information processing utility, time-sharing, multi-user, multiprogramming,  multiprocessing, security, shared information, controlled access, reliable operation, segmentation</keywords>
	<version>4.32 4.39</version>
	<location>CA680510 JB February 23, 1978 8:52 AM</location>
	<citations>
	<citation>1746	5	1746</citation>
	<citation>1746	5	1746</citation>
	<citation>1746	5	1746</citation>
	<citation>1753	5	1746</citation>
	<citation>2358	5	1746</citation>
	<citation>2377	5	1746</citation>
	<citation>2372	5	1746</citation>
	<citation>2626	5	1746</citation>
	<citation>2840	5	1746</citation>
	<citation>1471	6	1746</citation>
	<citation>1471	6	1746</citation>
	<citation>1746	6	1746</citation>
	<citation>1746	6	1746</citation>
	<citation>1746	6	1746</citation>
	<citation>1746	6	1746</citation>
	<citation>1746	6	1746</citation>
	<citation>1746	6	1746</citation>
	<citation>1749	6	1746</citation>
	<citation>1751	6	1746</citation>
	<citation>1753	6	1746</citation>
	<citation>274	6	1746</citation>
	<citation>2358	6	1746</citation>
	<citation>2358	6	1746</citation>
	<citation>2377	6	1746</citation>
	<citation>2436	6	1746</citation>
	<citation>2625	6	1746</citation>
	<citation>2626	6	1746</citation>
	<citation>2629	6	1746</citation>
	<citation>2629	6	1746</citation>
	</citations>
	</document>
	<document id= '1745'>
	<title>A Position Paper on Computing and Communications</title>
	<abstract>The effective operation of free enterprise in creating the envisioned information service industry  is dependent upon three accomplishments: (1) the restructuring of our information processing industry  so that a clear division of costs is made among computing, communications, and the development of information  services; (2) the wide use of multiaccess system concepts so that information services may share in the  use of computer installations and so that the cost of their construction is reasonable; and (3) the development  of public, message-switched communications services so that adequate provisions are made for information  security.</abstract>
	<conference>CACM May, 1968</conference>
	<authors>
	<author>Dennis, J. B.</author>
	</authors>
	<keywords>information networks, information systems, computing and free enterprise, computing economics,  computer installation management, government regulation, communications services, distributed data base,  program leasing</keywords>
	<version>2.3 2.40 3.80 4.30</version>
	<location>CA680511 JB February 23, 1978  8:49 AM</location>
	<citations>
	<citation>1745	5	1745</citation>
	<citation>1745	5	1745</citation>
	<citation>1745	5	1745</citation>
	</citations>
	</document>
	<document id= '1744'>
	<title>Stable Numerical Methods for Obtaining the Chebyshev Solution to an Overdetermined System of  Equations</title>
	<abstract>An implementation of Stiefel's exchange algorithm for determining a Chebyshev solution to an  overdetermined system of linear equations is presented, that uses Gaussian LU decomposition with row  interchanges.  The implementation is computationally more stable than those usually given in the literature.   A generalization of Stiefel's algorithm is developed which permits the occasional exchange of two equations  simultaneously.</abstract>
	<conference>CACM June, 1968</conference>
	<authors>
	<author>Bartels, R. H.</author>
	<author>Golub, G. H.</author>
	</authors>
	<keywords>Chebyshev solutions, overdetermined linear systems, linear equations,exchange algorithm</keywords>
	<version>5.13 5.14 5.41</version>
	<location>CA680601 JB February 22, 1978  4:50 PM</location>
	<citations>
	<citation>1744	5	1744</citation>
	<citation>1744	5	1744</citation>
	<citation>1744	5	1744</citation>
	<citation>1905	5	1744</citation>
	<citation>1744	6	1744</citation>
	</citations>
	</document>
	<document id= '1743'>
	<title>Reliable Full-Duplex file Transmission over Half-Duplex Telephone Lines</title>
	<abstract>A field-proven scheme for achieving reliable duplex transmission over a half-duplex communication  line is presented, and to demonstrate the difficulty of the problem, another similar scheme, which is  only slightly unreliable, is also presented.  A flowchart for the reliable scheme and some interesting  examples are given.</abstract>
	<conference>CACM June, 1968</conference>
	<authors>
	<author>Lynch, W. C.</author>
	</authors>
	<keywords>telephone communication, half duplex, transmission, error correction, full duplex, telephone errors</keywords>
	<version>3.81 4.41 6.35</version>
	<location>CA680602 JB February 22, 1978  4:45 PM</location>
	<citations>
	<citation>1743	5	1743</citation>
	<citation>1743	5	1743</citation>
	<citation>1743	5	1743</citation>
	<citation>1907	5	1743</citation>
	<citation>1743	6	1743</citation>
	</citations>
	</document>
	<document id= '1742'>
	<title>On the Design of Display Processors</title>
	<abstract>The flexibility and power needed in the data channel for a computer display are considered.   To work efficiently, such a channel must have a sufficient number of instructions that it is best understood  as a small processor rather than a powerful channel.  As it was found that successive improvements to  the display processor design lie on a circular path, by making improvements one can return to the original  simple design plus one new general purpose computer for each trip around.  The degree of physical separation  between display and parent computer is a key factor in display processor design.</abstract>
	<conference>CACM June, 1968</conference>
	<authors>
	<author>Myer, T. H.</author>
	</authors>
	<keywords>display processor design, display system, computer graphics, graphic terminal, displays, graphics,  display generator, display channel, display programming, graphical interaction, remote displays</keywords>
	<version>2.44 6.22 6.29 6.35</version>
	<location>CA680603 JB February 22, 1978  4:41 PM</location>
	<citations>
	<citation>1742	5	1742</citation>
	<citation>1742	5	1742</citation>
	<citation>1742	5	1742</citation>
	</citations>
	</document>
	<document id= '1741'>
	<title>BRAD: The Brookhaven Raster Display</title>
	<abstract>A multiconsole computer display system has been designed that provides very rich displays at  low unit cost.  Each BRAD (Brookhaven Raster Display) console can plot tens of thousands of points, or  up to 4000 characters at 30 frames per second.  After an initial display system investment of $50,000  each display, with teletype, costs less than $3,000.  The technique employed is that of programmatically  generating a binary image of the desired display in a computer.  The image is written on a rotating drum  memory.  Independent read heads continuously display the picture, which is generated by swept horizontal  lines.  A standard TV monitor serves as the display device.  The technique has two drawbacks.  A computer  must compute any image to be displayed.  Also, the "pointing" interaction is more difficult.  This is  because the pointing function gives only the coordinates of the point on the screen.  The inverse of  the map generation process is required to calculate the coordinates of the point on the screen.  The  inverse of the map generation process is required to calculate the coordinates at the selected point  in the input space.</abstract>
	<conference>CACM June, 1968</conference>
	<authors>
	<author>Ophir, D.</author>
	<author>Rankowitz, S.</author>
	<author>Shepherd, B. J.</author>
	<author>Spinrad, R. J.</author>
	</authors>
	<keywords>computer display, computer graphics, computer raster display, TV display console, digital TV display,  swept raster computer display, swept raster TV computer display, TV graphics terminal, multiconsole computer  graphics, inexpensive graphic terminal</keywords>
	<version>2.0 4.49 6.35</version>
	<location>CA680604 JB February 22, 1978  4:35 PM</location>
	<citations>
	<citation>1741	5	1741</citation>
	<citation>1741	5	1741</citation>
	<citation>1741	5	1741</citation>
	<citation>1891	5	1741</citation>
	<citation>2211	5	1741</citation>
	<citation>2421	5	1741</citation>
	<citation>2674	5	1741</citation>
	<citation>2687	5	1741</citation>
	<citation>1554	6	1741</citation>
	<citation>1741	6	1741</citation>
	<citation>1741	6	1741</citation>
	<citation>1741	6	1741</citation>
	<citation>1741	6	1741</citation>
	<citation>1741	6	1741</citation>
	<citation>1915	6	1741</citation>
	<citation>2004	6	1741</citation>
	<citation>2004	6	1741</citation>
	<citation>2211	6	1741</citation>
	<citation>2421	6	1741</citation>
	<citation>2687	6	1741</citation>
	</citations>
	</document>
	<document id= '1740'>
	<title>An Inexpensive Braille Terminal Device</title>
	<abstract>The active use of time-shared facilities for blind programmers requires a braille terminal  system.  Details are given for the construction of a brailler from a model 33 teletype by modifying the  print head and increasing the resiliency of the platen.  A description of the programming needed to drive  the brailler is presented.</abstract>
	<conference>CACM June, 1968</conference>
	<authors>
	<author>Anderson, G. B.</author>
	<author>Rogers, D. W.</author>
	</authors>
	<keywords>blind communication, blind programming aid, braille, braille computer communication, braille output,  braille teletype, braille terminal, braille type head, embosser, tactile computer communication, tactile  teletype, tactile terminal</keywords>
	<version>4.41 6.35</version>
	<location>CA680605 JB February 22, 1978  4:23 PM</location>
	<citations>
	<citation>1264	4	1740</citation>
	<citation>1740	4	1740</citation>
	<citation>1099	5	1740</citation>
	<citation>1740	5	1740</citation>
	<citation>1740	5	1740</citation>
	<citation>1740	5	1740</citation>
	<citation>2279	5	1740</citation>
	<citation>1740	6	1740</citation>
	</citations>
	</document>
	<document id= '1739'>
	<title>Regular Expression Search Algorithm</title>
	<abstract>A method for locating specific character strings embedded in character text is described and  an implementation of this method in the form of a compiler is discussed.  The compiler accepts a regular  expression as source language and produces an IBM 7094 program as object language.  The object program  then accepts the text to be searched as input and produces a signal every time an embedded string in  the text matches the given regular expression.  Examples, problems, and solution are also presented.</abstract>
	<conference>CACM June, 1968</conference>
	<authors>
	<author>Thompson, K.</author>
	</authors>
	<keywords>search, match, regular expression</keywords>
	<version>3.74 4.49 5.32</version>
	<location>CA680606 JB February 22, 1978  4:18 PM</location>
	<citations>
	<citation>1739	5	1739</citation>
	<citation>1739	5	1739</citation>
	<citation>1739	5	1739</citation>
	<citation>2545	5	1739</citation>
	<citation>2746	5	1739</citation>
	<citation>1665	6	1739</citation>
	<citation>1739	6	1739</citation>
	<citation>1739	6	1739</citation>
	<citation>1781	6	1739</citation>
	<citation>2139	6	1739</citation>
	<citation>2341	6	1739</citation>
	<citation>2545	6	1739</citation>
	<citation>2786	6	1739</citation>
	</citations>
	</document>
	<document id= '1738'>
	<title>Writing an Outline Debugging Program for the Experienced User</title>
	<abstract>Presently available online debugging routines are often unsatisfactory for the experienced  user because they require unnecessarily rigid and complicated typing formats, make it difficult for the  user to correct typing errors, and consume excessive memory with intricate features.  In a debugging  program it is of prime importance that the program be simple, flexible, and highly efficient to use.   Communication between the user and the debugging program can be improved by using certain techniques  applicable to most online debugging programs.  These techniques are presented and are illustrated by  their use in OPAK (octal package), a debugging program coded for the PDP-5/8 and the SDS-930.  The compromise  between economy of utility program core storage and incorporation of elegant debugging features is discussed.</abstract>
	<conference>CACM June, 1968</conference>
	<authors>
	<author>Brady, P. T.</author>
	</authors>
	<keywords>debugging, utility program, programming languages</keywords>
	<version>4.42</version>
	<location>CA680607 JB February 22, 1978  4:14 PM</location>
	<citations>
	<citation>1738	4	1738</citation>
	<citation>1257	5	1738</citation>
	<citation>1738	5	1738</citation>
	<citation>1738	5	1738</citation>
	<citation>1738	5	1738</citation>
	</citations>
	</document>
	<document id= '1737'>
	<citations>
	<citation>1737	5	1737</citation>
	<citation>1737	5	1737</citation>
	<citation>1737	5	1737</citation>
	</citations>
	<title>A Global Parser for Context-Free Phrase Structure Grammars</title>
	<conference>CACM June, 1968</conference>
	<authors>
	<author>Unger, S. H.</author>
	</authors>
	<location>CA680608 JB February 22, 1978  4:08 PM</location>
	</document>
	<document id= '1736'>
	<title>Heading Format for Data Transmission (A USAAI Tutorial -- Standards)</title>
	<conference>CACM June, 1968</conference>
	<keywords>data transmission heading format, heading format, message format, data transmission, message headings</keywords>
	<version>3.57 3.81 6.39</version>
	<location>CA680609 JB February 22, 1978  4:07 PM</location>
	<citations>
	<citation>1736	5	1736</citation>
	<citation>1736	5	1736</citation>
	<citation>1736	5	1736</citation>
	</citations>
	</document>
	<document id= '1735'>
	<title>A Futures Market in Computer time</title>
	<abstract>An auction method is described for allocating computer time that allows the price of computer  time to fluctuate with the demand and the relative priority of users to be controlled so that more important  projects get better access.  This auction is free of the periodic fluctuation in computer use often associated  with monthly time allocation schemes.</abstract>
	<conference>CACM June, 1968</conference>
	<authors>
	<author>Sutherland, I. E.</author>
	</authors>
	<keywords>computer scheduling, auction, time allocation, operating efficiency</keywords>
	<version>2.40</version>
	<location>CA680610 JB February 22, 1978  4:04 PM</location>
	<citations>
	<citation>1735	5	1735</citation>
	<citation>1735	5	1735</citation>
	<citation>1735	5	1735</citation>
	<citation>2020	5	1735</citation>
	<citation>1735	6	1735</citation>
	</citations>
	</document>
	<document id= '1734'>
	<title>Chebyshev Solution to an Overdetermined Linear System (Algorithm 328 [F4])</title>
	<conference>CACM June, 1968</conference>
	<authors>
	<author>Bartels, R. H.</author>
	<author>Goulub, H. G.</author>
	</authors>
	<keywords>Chebyshev solutions, overdetermined linear systems, linear equations, exchange algorithm</keywords>
	<version>5.13 5.14 5.41</version>
	<location>CA680611 JB February 22, 1978  4:01 PM</location>
	<citations>
	<citation>1734	5	1734</citation>
	<citation>1734	5	1734</citation>
	<citation>1734	5	1734</citation>
	<citation>2143	5	1734</citation>
	<citation>1734	6	1734</citation>
	</citations>
	</document>
	<document id= '1733'>
	<title>Distribution of Indistinguishable Objects into Distinguishable slots (Algorithm [G6])</title>
	<conference>CACM June, 1968</conference>
	<authors>
	<author>Fenichel, R. R.</author>
	</authors>
	<keywords>object distributions, combinations, distribution numbers</keywords>
	<version>5.39</version>
	<location>CA680612 JB February 22, 1978  3:58 PM</location>
	<citations>
	<citation>1733	5	1733</citation>
	<citation>1733	5	1733</citation>
	<citation>1733	5	1733</citation>
	</citations>
	</document>
	<document id= '1732'>
	<title>Factorial Analysis of Variance (Algorithm 330 [G1])</title>
	<conference>CACM June, 1968</conference>
	<authors>
	</authors>
	<keywords>factorial variance analysis, variance, statistical analysis</keywords>
	<version>5.5</version>
	<location>CA680613 JB February 22, 1978  3:21 PM</location>
	<citations>
	<citation>1732	5	1732</citation>
	<citation>1732	5	1732</citation>
	<citation>1732	5	1732</citation>
	</citations>
	</document>
	<document id= '1731'>
	<title>Gaussian Quadrature Formulas (Algorithm 331 [D1])</title>
	<conference>CACM June, 1968</conference>
	<authors>
	<author>Gautschi, W.</author>
	</authors>
	<keywords>quadrature, Gaussian quadrature, numerical integration, weight function, orthogonal polynomials</keywords>
	<version>5.16</version>
	<location>CA680614 JB February 22, 1978  3:20 PM</location>
	<citations>
	<citation>1731	5	1731</citation>
	<citation>1731	5	1731</citation>
	<citation>1731	5	1731</citation>
	</citations>
	</document>
	<document id= '1730'>
	<title>Jacobi Polynomials (Algorithm 332 [S22])</title>
	<conference>CACM June, 1968</conference>
	<authors>
	<author>Witte, B. F. W.</author>
	</authors>
	<keywords>Jacobi polynomials, orthogonal polynomials, three-term recurrences, special functions</keywords>
	<version>5.12</version>
	<location>CA680615 JB February 22, 1978  3:17 PM</location>
	<citations>
	<citation>1730	5	1730</citation>
	<citation>1730	5	1730</citation>
	<citation>1730	5	1730</citation>
	</citations>
	</document>
	<document id= '1729'>
	<title>Minit Algorithm for Linear Programming (Algorithm 333 [H])</title>
	<conference>CACM June, 1968</conference>
	<authors>
	<author>Salazar, R. C.</author>
	<author>Sen, S.K.</author>
	</authors>
	<keywords>linear programming, dual simplex method, primal problem, dual problem</keywords>
	<version>5.41</version>
	<location>CA680616 JB February 22, 19783:15 PM</location>
	<citations>
	<citation>1729	5	1729</citation>
	<citation>1729	5	1729</citation>
	<citation>1729	5	1729</citation>
	<citation>2784	5	1729</citation>
	<citation>1729	6	1729</citation>
	<citation>309	6	1729</citation>
	<citation>2783	6	1729</citation>
	</citations>
	</document>
	<document id= '1728'>
	<title>Further Experimental Data on the Behavior of Programs in a Paging Environment</title>
	<abstract>Results are summarized from an empirical study directed at the measurement of program operating  behavior in those multiprogramming systems in which programs are organized into fixed length pages.   The data collected from the interpretive execution of a number of paged programs are used to describe  the frequency of page faults, i.e. the frequency of those instants at which an executing program requires  a page of data or instructions not in main (core) memory.  These data are used also for the evaluation  of page replacement algorithms and for assessing the effects on performance of changes in the amount  of storage allocated to executing programs.</abstract>
	<conference>CACM JUly, 1968</conference>
	<authors>
	<author>Coffman, E. G.</author>
	<author>Varian, L. C.</author>
	</authors>
	<keywords>paging systems, paging, dynamic program behavior, program behavior, virtual memory systems, single-level  storage, one-level storage, operating system simulation, operating systems, supervisor simulation, machine  language program interpretation</keywords>
	<version>4.13 4.32 4.39 4.9</version>
	<location>CA680701 JB February 22, 1978  3:13 PM</location>
	<citations>
	<citation>1646	4	1728</citation>
	<citation>1668	4	1728</citation>
	<citation>1669	4	1728</citation>
	<citation>1676	4	1728</citation>
	<citation>1679	4	1728</citation>
	<citation>1682	4	1728</citation>
	<citation>1728	4	1728</citation>
	<citation>1728	4	1728</citation>
	<citation>1728	4	1728</citation>
	<citation>1860	4	1728</citation>
	<citation>1973	4	1728</citation>
	<citation>2018	4	1728</citation>
	<citation>2032	4	1728</citation>
	<citation>2033	4	1728</citation>
	<citation>2107	4	1728</citation>
	<citation>2109	4	1728</citation>
	<citation>2203	4	1728</citation>
	<citation>2251	4	1728</citation>
	<citation>2359	4	1728</citation>
	<citation>2524	4	1728</citation>
	<citation>2543	4	1728</citation>
	<citation>2552	4	1728</citation>
	<citation>2559	4	1728</citation>
	<citation>2859	4	1728</citation>
	<citation>2991	4	1728</citation>
	<citation>3053	4	1728</citation>
	<citation>1525	5	1728</citation>
	<citation>1647	5	1728</citation>
	<citation>1728	5	1728</citation>
	<citation>1728	5	1728</citation>
	<citation>1728	5	1728</citation>
	<citation>1785	5	1728</citation>
	<citation>1892	5	1728</citation>
	<citation>1924	5	1728</citation>
	<citation>2095	5	1728</citation>
	<citation>2218	5	1728</citation>
	<citation>2297	5	1728</citation>
	<citation>2374	5	1728</citation>
	<citation>2526	5	1728</citation>
	<citation>2667	5	1728</citation>
	<citation>2668	5	1728</citation>
	<citation>2862	5	1728</citation>
	<citation>2863	5	1728</citation>
	<citation>1380	6	1728</citation>
	<citation>1526	6	1728</citation>
	<citation>1572	6	1728</citation>
	<citation>1572	6	1728</citation>
	<citation>1604	6	1728</citation>
	<citation>1604	6	1728</citation>
	<citation>1728	6	1728</citation>
	<citation>1728	6	1728</citation>
	<citation>1728	6	1728</citation>
	<citation>1728	6	1728</citation>
	<citation>1728	6	1728</citation>
	<citation>1728	6	1728</citation>
	<citation>1728	6	1728</citation>
	<citation>1728	6	1728</citation>
	<citation>1728	6	1728</citation>
	<citation>1728	6	1728</citation>
	<citation>1728	6	1728</citation>
	<citation>1751	6	1728</citation>
	<citation>1751	6	1728</citation>
	<citation>1751	6	1728</citation>
	<citation>1751	6	1728</citation>
	<citation>1754	6	1728</citation>
	<citation>1754	6	1728</citation>
	<citation>1752	6	1728</citation>
	<citation>1752	6	1728</citation>
	<citation>1761	6	1728</citation>
	<citation>1810	6	1728</citation>
	<citation>1827	6	1728</citation>
	<citation>1827	6	1728</citation>
	<citation>1879	6	1728</citation>
	<citation>1879	6	1728</citation>
	<citation>1901	6	1728</citation>
	<citation>1901	6	1728</citation>
	<citation>2095	6	1728</citation>
	<citation>2373	6	1728</citation>
	<citation>2677	6	1728</citation>
	<citation>2863	6	1728</citation>
	</citations>
	</document>
	<document id= '1727'>
	<title>One Way of Estimating Frequencies of Jumps in a Program</title>
	<abstract>For the segmentation of a program it is useful to have a reasonable estimation of the values  of S(ij), where S(ij) is the mean value of the number of jumps from the i-th instruction on to the j-th  instruction in the run time.  In the cases where the S(ij) are estimated directly, the structure of the  whole program must be generally taken into account; therefore it is very difficult for the programmer  and/or the translator to obtain a good estimation of the S(ij).  It is easier to estimate not S(ij) but  the quantities P(ij)=S(ij)*C(i)/SUM[S(ij), j=1,N], where C(i) is an arbitrary positive constant for each  i.  Although the P(ij) are, for each i, proportional to S(ij), the estimation of P(ij) is easier, because  we must estimate only the "probabilities" of events where instruction i is executed after instruction  I(i).  This estimation can often be done without considering the structure of the whole program.  In  the first part of the paper, using the theory of the Markov chains, an algorithm for the computation  of the S(ij) from the P(ij) is found, and some ways of obtaining estimates of the P(ij) are given.  In  the second part a variant of this algorithm is derived, avoiding the necessity of computation involving  large matrices.</abstract>
	<conference>CACM July, 1968</conference>
	<authors>
	<author>Kral, J.</author>
	</authors>
	<keywords>object program reduction, supervisor calls decreasing, jump frequencies estimation, control transfers  estimation, optimal program segmentation, Markov chain program correspondence, program graph, one-entry  subgraph, locally estimated jump frequencies, supervisor overhead decreasing, program segmentation algorithm,  jump frequencies, program segmentation problem</keywords>
	<version>4.11 4.19 4.39 4.49</version>
	<location>CA680702 JB February 22, 1978  3:05 PM</location>
	<citations>
	<citation>1727	5	1727</citation>
	<citation>1727	5	1727</citation>
	<citation>1727	5	1727</citation>
	</citations>
	</document>
	<document id= '1726'>
	<title>Preliminary Investigation of Techniques for Automated Reading of Unformatted Text</title>
	<abstract>Methods for converting unstructured printed material into computer code are experimentally  investigated.  An operator-controlled mode, depending on human demarcation of the various regions of  the page for guiding the scanner, is implemented by means of a joystick and a CRT display.  This mode,  for which some performance figures are obtained, is thought to be suitable for processing very complicated  material, such as technical journals.  For simpler material, for instance the "claims" sections of patents,  and in applications where the utmost accuracy is not necessary, an unsupervised mode is advocated.  Here,  the textual portions of the page are located during a rapid prescan by a rudimentary form of frequency  analysis.  These areas are then rescanned at a higher resolution suitable for character recognition.   Error rates of the order of 0.1 percent are obtained in a simple problem involving photographs of telephone  company meter boards.  Other matters related to the design of a general purpose page reader, such as  the segmentation of printed text, the possibility of time-sharing the scanner, interactive man-machine  operation, and the facsimile reproduction of illustrations, are discussed.</abstract>
	<conference>CACM July, 1968</conference>
	<authors>
	<author>Nagy, G.</author>
	</authors>
	<keywords>pattern recognition, character recognition, text reading, information retrieval, unformatted text  operator-controlled reader, online reader, text-image discrimination, reading machine</keywords>
	<version>3.63 3.79 3.89 6.29 6.35</version>
	<location>CA680703 JB February 22, 1978  2:52 PM</location>
	<citations>
	<citation>1726	5	1726</citation>
	<citation>1726	5	1726</citation>
	<citation>1726	5	1726</citation>
	<citation>2370	5	1726</citation>
	<citation>1726	6	1726</citation>
	</citations>
	</document>
	<document id= '1725'>
	<title>A Simple Proof of Lewin's Ordered-Retrieval Theorem for Associative Memories</title>
	<abstract>An efficient method of ordered retrieval of binary words from an associative memory, as described by Lewin, is based on the use of special readout circuits which indicate the digit values present in  the individual digit columns of the memory.  Thus the circuits indicate whether the individual digit  columns contain digits of both values, or of only one value, or contain no digits at all (i.e. that the  memory is empty).  The use of these circuits, which in this paper are termed column value indicators,  reduces considerably the number of memory accesses necessary to retrieve in order a number of distinct  words from the memory.  Lewin proves that, for the readout by the described method of m distinct binary  words, 2m - 1 memory accesses are necessary.  (Thus he proves that the number of necessary memory accesses  of his method, unlike those of other methods, is independent of the word length.)  In this paper a very  simple proof of this theorem derived from some elementary aspects of the structure of sets of binary  numbers is presented.</abstract>
	<conference>CACM July, 1968</conference>
	<authors>
	<author>Wolinsky, A.</author>
	</authors>
	<keywords>associative memories, content-addressed memories, ordered lists, ordered information retrieval,  ordered retrieval theorem, column digit values, digit value variety, column sensing arrangement, digit  value readout, digit variety readout, memory access, memory access frequency, ordered retrieval efficiency,  access frequency proof, retrieval theorem proof</keywords>
	<version>3.74 3.79 5.29 5.31 6.31 6.36</version>
	<location>CA680704 JB February 22, 1978  12:24 PM</location>
	<citations>
	<citation>1725	5	1725</citation>
	<citation>1725	5	1725</citation>
	<citation>1725	5	1725</citation>
	</citations>
	</document>
	<document id= '1724'>
	<title>A Generalized Partial Pass Block Sort</title>
	<abstract>The design of a partial pass block sort with arbitrary range of key and number of work files  is described. The design is a generalization of the Partial Pass Column Sort by Ashenhurst and the Amphisbaenic  Sort by Nagler. The power of the sort is tabulated for various sizes of input file and number of work  files. consideration is given to the problem of combining a block sort with internal sorts, and to the  best use of direct access storage devices.</abstract>
	<conference>CACM July, 1968</conference>
	<authors>
	<author>Bayes, A.</author>
	</authors>
	<keywords>block sort, partial pass sort, direct access devices, column sort, chaining, reverse chaining,  sort, amphisbaenic</keywords>
	<version>5.31</version>
	<location>CA680705 JB February 22, 1978  12:12 PM</location>
	<citations>
	<citation>1724	5	1724</citation>
	<citation>1724	5	1724</citation>
	<citation>1724	5	1724</citation>
	</citations>
	</document>
	<document id= '1723'>
	<title>Computer Construction of Project Networks</title>
	<abstract>Project networks are used in PERT and CPM.  An algorithm is given for constructing project  networks directly from the project precedence relations.  The algorithm creates "dummy" activities and  topologically orders the arcs and nodes.  The number of nodes created is minimal for the given precedence  relations.  It has been experimentally programmed in FORTRAN II for the IBM 7094.</abstract>
	<conference>CACM July, 1968</conference>
	<authors>
	<author>Fisher, A. C.</author>
	<author>Liebman, J. S.</author>
	<author>Nemhauser, G. L.</author>
	</authors>
	<keywords>project networks, PERT, CPM, topological ordering, network construction by computer</keywords>
	<version>5.32</version>
	<location>CA680706 JB February 22, 1978  12:07 PM</location>
	<citations>
	<citation>1723	4	1723</citation>
	<citation>758	4	1723</citation>
	<citation>1723	5	1723</citation>
	<citation>1723	5	1723</citation>
	<citation>1723	5	1723</citation>
	<citation>2515	5	1723</citation>
	<citation>441	5	1723</citation>
	<citation>1723	6	1723</citation>
	</citations>
	</document>
	<document id= '1722'>
	<title>Methods of Convergence Improvement for Some Improper Integrals</title>
	<abstract>In the numerical integration of an improper integral of the first kind, it is customary to  truncate the integral when the change yielded by the last iteration is less than some predetermined constant.  The efficiency of such integration schemes can often be improved by use of recent advances in the theory  of nonlinear transformations; however, for several important integrals, e.g. integrals whose integrands  are rational polynomials, these transformations fail to yield much improvement.  In this paper, several  methods of convergence improvement are developed which greatly improve convergence of some improper integrals,  including the integrals of rational polynomials.</abstract>
	<conference>CACM July, 1968</conference>
	<authors>
	<author>McWilliams, G. V.</author>
	<author>Thompson, R. W.</author>
	</authors>
	<keywords>approximation, nonlinear, improper integral, convergence improvement, numerical integration, rational  polynomials, truncation</keywords>
	<version>3.15 5.13 5.16 5.19</version>
	<location>CA680707 JB February 22, 1978  11:58 AM</location>
	<citations>
	<citation>1722	5	1722</citation>
	<citation>1722	5	1722</citation>
	<citation>1722	5	1722</citation>
	</citations>
	</document>
	<document id= '1721'>
	<title>Determination of the Intersection Points of Two Plane Curves by Means of Differential Equations</title>
	<abstract>A new method is proposed to calculate the intersection points of two plane curves.  The theory  of singular points off a system of two differential equations is used in developing the method. The intersection  point to be determined is identified with such a singular point and appropriate modifications are applied  to the system to ensure that the singular point be stable, i.e. all integrals which start in the neighborhood  of the singular point will always approach this point if the integral parameter tends to infinity.  In  addition a method is described for systematically searching for all intersection points in a prescribed  rectangular area.</abstract>
	<conference>CACM July, 1968</conference>
	<authors>
	<author>Kuiken, H. K.</author>
	</authors>
	<keywords>plane curves, intersection points, intersections plane curves, integration, differential equations,  matrix iteration, singular points, nonlinear differential equations, eigenvalues, complex roots, roots,  stationary points, Runge Kutta, stable singularity, unstable singularity</keywords>
	<version>2.0 3.10 3.20 3.50 5.10</version>
	<location>CA680708 JB February 22, 1978  11:51 AM</location>
	<citations>
	<citation>1721	5	1721</citation>
	<citation>1721	5	1721</citation>
	<citation>1721	5	1721</citation>
	</citations>
	</document>
	<document id= '1720'>
	<title>Master's Level Computer Science Curricula</title>
	<abstract>The results of a survey of the course work done by master's degree candidates at 25 US universities  are presented, and some general comments concerning the emphasis of these programs are given.</abstract>
	<conference>CACM July, 1968</conference>
	<authors>
	<author>Elliott, R. W.</author>
	</authors>
	<keywords>surveys, education, computer science curricula</keywords>
	<version>1.52</version>
	<location>CA680709 JB February 22, 1978  11:44 AM</location>
	<citations>
	<citation>1720	4	1720</citation>
	<citation>1720	4	1720</citation>
	<citation>1771	4	1720</citation>
	<citation>1927	4	1720</citation>
	<citation>2147	4	1720</citation>
	<citation>2163	4	1720</citation>
	<citation>2345	4	1720</citation>
	<citation>2478	4	1720</citation>
	<citation>2594	4	1720</citation>
	<citation>2852	4	1720</citation>
	<citation>2899	4	1720</citation>
	<citation>3130	4	1720</citation>
	<citation>1654	5	1720</citation>
	<citation>1720	5	1720</citation>
	<citation>1720	5	1720</citation>
	<citation>1720	5	1720</citation>
	<citation>1771	5	1720</citation>
	<citation>2163	5	1720</citation>
	<citation>1720	6	1720</citation>
	<citation>1771	6	1720</citation>
	<citation>1927	6	1720</citation>
	<citation>2181	6	1720</citation>
	</citations>
	</document>
	<document id= '1719'>
	<title>A Methodology for Calculating and Optimizing Real-Time System Performance</title>
	<abstract>The continually increasing size, complexity, number of types, and cost of data processing systems  are causing serious re-examination within government and industry of the criteria for and methods of  calculating and optimizing data processing system cost and performance.  Real-time data processing systems  as typified by the automated airline reservation system are discussed in this paper.  Criteria for evaluating  performance are described; a methodology for calculating and optimizing is outlined; and the method is  illustrated by carrying out a portion of the performance calculation and the optimization of a drum-oriented  message switching system.</abstract>
	<conference>CACM July, 1968</conference>
	<authors>
	<author>Stimler, S.</author>
	<author>Brons, K. A.</author>
	</authors>
	<keywords>real-time system analysis, real-time system design, real-time system performance criteria, real-time  system cost performance ratio</keywords>
	<version>3.27 3.80 3.81 3.89 6.9</version>
	<location>CA680710 JB February 22, 1978  11:40 AM</location>
	<citations>
	<citation>1719	5	1719</citation>
	<citation>1719	5	1719</citation>
	<citation>1719	5	1719</citation>
	<citation>2319	5	1719</citation>
	<citation>1408	6	1719</citation>
	<citation>1719	6	1719</citation>
	<citation>1749	6	1719</citation>
	<citation>1751	6	1719</citation>
	<citation>2016	6	1719</citation>
	<citation>2017	6	1719</citation>
	<citation>2080	6	1719</citation>
	<citation>2188	6	1719</citation>
	<citation>2203	6	1719</citation>
	<citation>2204	6	1719</citation>
	</citations>
	</document>
	<document id= '1718'>
	<title>"Logical" Arithmetic on Computers with Two's Complement Binary Arithmetic</title>
	<abstract>Algorithms are presented for multiplication and division of unsigned integer operands in which  the digits normally reserved for signs participate as significant arithmetic digits with positive weight.</abstract>
	<conference>CACM July, 1968</conference>
	<authors>
	<author>Ehrman, J. R.</author>
	</authors>
	<keywords>binary arithmetic, unsigned operand arithmetic, maximum significance arithmetic, full-precision  arithmetic</keywords>
	<version>3.15 5.11</version>
	<location>CA680711 JB February 22, 1978  11:34 AM</location>
	<citations>
	<citation>1718	5	1718</citation>
	<citation>1718	5	1718</citation>
	<citation>1718	5	1718</citation>
	<citation>1965	5	1718</citation>
	<citation>2200	5	1718</citation>
	<citation>1718	6	1718</citation>
	<citation>1718	6	1718</citation>
	</citations>
	</document>
	<document id= '1717'>
	<title>Generating Prime Implicants Via Ternary Encoding and Decimal Arithmetic</title>
	<abstract>Decimal arithmetic, ternary encoding of cubes, and topological considerations are used in an  algorithm to obtain the extremals and prime implicants of Boolean functions. The algorithm, which has  been programmed in the FORTRAN language, generally requires less memory than other minimization procedures,  and treats DON'T CARE terms in an efficient manner.</abstract>
	<conference>CACM July, 1968</conference>
	<authors>
	<author>Dietmeyer, D. L.</author>
	<author>Duley, J. R.</author>
	</authors>
	<keywords>prime implicants, extremal, switching function, minimization, cubical complexes, ternary encoding</keywords>
	<version>3.24 6.1</version>
	<location>CA680712 JB February 22, 1978  11:30 AM</location>
	<citations>
	<citation>1717	5	1717</citation>
	<citation>1717	5	1717</citation>
	<citation>1717	5	1717</citation>
	</citations>
	</document>
	<document id= '1716'>
	<title>Normal Random Deviates (Algorithm 334 [G5])</title>
	<conference>CACM July, 1968</conference>
	<authors>
	<author>Bell, J. R.</author>
	</authors>
	<keywords>normal deviates, normal distribution, random number, random number generator, simulation, probability  distribution, frequency distribution, random</keywords>
	<version>5.5 5.13</version>
	<location>CA680713 JB February 22, 1978  11:26 AM</location>
	<citations>
	<citation>1716	4	1716</citation>
	<citation>1189	5	1716</citation>
	<citation>1716	5	1716</citation>
	<citation>1716	5	1716</citation>
	<citation>1716	5	1716</citation>
	<citation>2349	5	1716</citation>
	<citation>2565	5	1716</citation>
	<citation>1648	6	1716</citation>
	<citation>1716	6	1716</citation>
	<citation>1716	6	1716</citation>
	<citation>1794	6	1716</citation>
	<citation>1894	6	1716</citation>
	<citation>2043	6	1716</citation>
	<citation>2276	6	1716</citation>
	<citation>501	6	1716</citation>
	<citation>613	6	1716</citation>
	<citation>774	6	1716</citation>
	</citations>
	</document>
	<document id= '1715'>
	<title>Direct Search (Algorithm 178 [E4])</title>
	<conference>CACM July, 1968</conference>
	<authors>
	<author>Vogelaere, R.</author>
	</authors>
	<keywords>function minimization, search, direct search</keywords>
	<version>5.19</version>
	<location>CA680714 JB February 22, 1978  11:24 AM</location>
	<citations>
	<citation>1715	5	1715</citation>
	<citation>1715	5	1715</citation>
	<citation>1715	5	1715</citation>
	<citation>1815	5	1715</citation>
	<citation>1715	6	1715</citation>
	</citations>
	</document>
	<document id= '1714'>
	<title>Procedure for the Normal Distribution (Algorithm 272 [S15])</title>
	<conference>CACM July, 1968</conference>
	<authors>
	<author>MacLaren, M. D.</author>
	</authors>
	<keywords>normal distribution function, error function, normal function, normal curve integral</keywords>
	<version>5.5 5.12</version>
	<location>CA680715 JB February 22, 1978  11:21 AM</location>
	<citations>
	<citation>1714	4	1714</citation>
	<citation>1585	5	1714</citation>
	<citation>1714	5	1714</citation>
	<citation>1714	5	1714</citation>
	<citation>1714	5	1714</citation>
	</citations>
	</document>
	<document id= '1713'>
	<title>On Overcoming High-Priority Paralysis in Multiprogramming Systems: A Case His tory</title>
	<abstract>High-priority paralysis is the degradation that can occur in multiprogramming systems when  scheduling is based primarily on preassigned priorities.  It can be alleviated by modifying the scheduling  algorithm to maximize the number of programs active at one time.  The case his tory given in this paper  indicates two general methods by which simultaneity can be increased.  Possible refinements in the scheduling  algorithm for future improvements are considered briefly.</abstract>
	<conference>CACM August, 1968</conference>
	<authors>
	<author>Stevens, D. F.</author>
	</authors>
	<keywords>multiprogram scheduling, dynamic priority assignment scheduling</keywords>
	<version>4.30 4.32 4.39</version>
	<location>CA680801 JB February 22, 1978  11:19 AM</location>
	<citations>
	<citation>1713	4	1713</citation>
	<citation>1713	4	1713</citation>
	<citation>1901	4	1713</citation>
	<citation>1901	4	1713</citation>
	<citation>491	4	1713</citation>
	<citation>491	4	1713</citation>
	<citation>168	5	1713</citation>
	<citation>185	5	1713</citation>
	<citation>1713	5	1713</citation>
	<citation>1713	5	1713</citation>
	<citation>1713	5	1713</citation>
	<citation>3072	5	1713</citation>
	<citation>1713	6	1713</citation>
	<citation>2219	6	1713</citation>
	<citation>2245	6	1713</citation>
	<citation>2375	6	1713</citation>
	</citations>
	</document>
	<document id= '1712'>
	<title>Recovery of Disk Contents After System Failure</title>
	<abstract>A method is discussed by which, after a system malfunction, the contents of disk files can  be restored to their status at the time of the failure.</abstract>
	<conference>CACM August, 1968</conference>
	<authors>
	<author>Lockemann, P. C.</author>
	<author>Knutsen, W. D.</author>
	</authors>
	<keywords>data acquisitition, disk file organization, error recovery, file organization</keywords>
	<version>3.73</version>
	<location>CA680802 JB February 22, 1978  11:14 AM</location>
	<citations>
	<citation>1712	4	1712</citation>
	<citation>1507	5	1712</citation>
	<citation>1712	5	1712</citation>
	<citation>1712	5	1712</citation>
	<citation>1712	5	1712</citation>
	<citation>3164	5	1712</citation>
	<citation>1712	6	1712</citation>
	</citations>
	</document>
	<document id= '1711'>
	<title>When Your Computer Needs a Lawyer</title>
	<abstract>Possible liability for negligence, for other torts (such as slander of credit) and for liability  under theories of express or implied warranty (guarantees) are discussed, and legal complications are  explained, so that users, operators, owners, and leasors of computers may be alerted to potential legal  problems. Focus is also on trouble spots in contracting for data processing services, in automating record  keeping operations, in deciding whether or not to automate certain operations, and in complying with  statutes and regulation relating to record keeping.  Information is given on patents, copyrights and  trade secret protection for programs, and the problem of using copyrighted material in information storage  and retrieval systems, including the pending copyright and patent revision bills.</abstract>
	<conference>CACM August, 1968</conference>
	<authors>
	<author>III, J. F.</author>
	</authors>
	<keywords>law, legal, lawyer, liability, torts, negligence, contracts, warrantees, guarantees, accounting,  regulations, simulation, income tax, copyrights, patents, trade secrets, standard of care, slander of  credit, crime, criminals, record keeping records, evidence, copying</keywords>
	<version>1.3 2.11 2.12 2.2 3.33</version>
	<location>CA680803 JB February 22, 1978  11:12 AM</location>
	<citations>
	<citation>1711	4	1711</citation>
	<citation>1711	4	1711</citation>
	<citation>997	5	1711</citation>
	<citation>1001	5	1711</citation>
	<citation>1711	5	1711</citation>
	<citation>1711	5	1711</citation>
	<citation>1711	5	1711</citation>
	</citations>
	</document>
	<document id= '1710'>
	<title>ASP-A Ring Implemented Associative Structure Package</title>
	<abstract>ASP is a general purpose Associative Data Structure Package in which an arbitrary number of  data items and an arbitrary number of the relationships between these data items may be represented.   A special picture language is described which has proved very useful for drawing ASP structures on paper.   ASP structures are built and manipulated by means of a series of macro calls, which are outlined in  the Appendix.  Emphasis is on the philosophy of the system rather than a particular implementation, though  sufficient information is included to enable the reader to produce his own implementation of ASP.</abstract>
	<conference>CACM August, 1968</conference>
	<authors>
	<author>Lang, C. A.</author>
	<author>Gray, J. C.</author>
	</authors>
	<keywords>associative, data structure, ring structure lists, list structure, set languages, modeling, graphics</keywords>
	<version>4.20 4.22</version>
	<location>CA680804 JB February 22, 1978  11:02 AM</location>
	<citations>
	<citation>1710	5	1710</citation>
	<citation>1710	5	1710</citation>
	<citation>1710	5	1710</citation>
	<citation>1853	5	1710</citation>
	<citation>2003	5	1710</citation>
	<citation>1710	6	1710</citation>
	<citation>1710	6	1710</citation>
	<citation>1767	6	1710</citation>
	<citation>2105	6	1710</citation>
	</citations>
	</document>
	<document id= '1709'>
	<title>A Modification of Efroymson's Technique for Stepwise Regression Analysis</title>
	<abstract>The computational technique conventionally used for stepwise multiple linear regression requires  the storage of an n X n matrix of data.  When the number of variables, n, is large, this requirement  taxes the storage capacity of presently used machinery.  The near symmetry of the matrices involved permits  a modification requiring only half the storage and computations of the conventional algorithm and this  additional storage allows the analysis of problems containing more variables.  Alternatively, it permits  the analysis of problems containing the same number of variables but with all computations performed  in double precision.</abstract>
	<conference>CACM August, 1968</conference>
	<authors>
	<author>Breaux, H. J.</author>
	</authors>
	<keywords>multiple linear regression, statistical recurrence formulas, correlation, linear statistical models,  statistical computer programs, curve fitting</keywords>
	<version>4.0 4.40 5.0 5.5 5.10 5.13</version>
	<location>CA680805 JB February 22, 1978  10:52 AM</location>
	<citations>
	<citation>1709	5	1709</citation>
	<citation>1709	5	1709</citation>
	<citation>1709	5	1709</citation>
	</citations>
	</document>
	<document id= '1708'>
	<title>A Note on the Efficiency of a LISP Computation in a Paged Machine</title>
	<abstract>The problem of the use of two levels of storage for programs is explored in the context of  a LISP system which uses core memory as a buffer for a large virtual memory stored on a drum.  Details  of timing are given for one particular problem.</abstract>
	<conference>CACM August, 1968</conference>
	<authors>
	<author>Borrow, D. G.</author>
	<author>Murphy, D. L.</author>
	</authors>
	<keywords>storage management, list processor implementation, LISP, paging, secondary storage utilization,  efficiency of paged computation</keywords>
	<version>3.7 4.1 4.2</version>
	<location>CA680806 JB February 22, 1978 10:45 AM</location>
	<citations>
	<citation>1626	4	1708</citation>
	<citation>1708	4	1708</citation>
	<citation>1708	4	1708</citation>
	<citation>1781	4	1708</citation>
	<citation>1781	4	1708</citation>
	<citation>1826	4	1708</citation>
	<citation>1860	4	1708</citation>
	<citation>1860	4	1708</citation>
	<citation>2156	4	1708</citation>
	<citation>2168	4	1708</citation>
	<citation>2249	4	1708</citation>
	<citation>2299	4	1708</citation>
	<citation>2314	4	1708</citation>
	<citation>2719	4	1708</citation>
	<citation>2736	4	1708</citation>
	<citation>2833	4	1708</citation>
	<citation>1626	5	1708</citation>
	<citation>1641	5	1708</citation>
	<citation>1708	5	1708</citation>
	<citation>1708	5	1708</citation>
	<citation>1708	5	1708</citation>
	<citation>2249	5	1708</citation>
	<citation>1626	6	1708</citation>
	<citation>1708	6	1708</citation>
	<citation>1853	6	1708</citation>
	</citations>
	</document>
	<document id= '1707'>
	<title>Generation of Positive Test Matrices with Known Positive Spectra</title>
	<abstract>Sufficient conditions are given for a real matrix to be similar to a positive matrix.  This  result is used to construct a similarity transformation which, when applied to a particular upper triangular  matrix, yields a positive matrix with a preassigned positive spectrum.</abstract>
	<conference>CACM August, 1968</conference>
	<authors>
	<author>Hall, C. A.</author>
	<author>Porsching, T. A.</author>
	</authors>
	<keywords>test matrices, positive matrices, similarity transformation, positive eigenvalues</keywords>
	<version>5.1 5.14</version>
	<location>CA680807 JB February 22, 1978  10:42 AM</location>
	<citations>
	<citation>1707	4	1707</citation>
	<citation>1707	4	1707</citation>
	<citation>1047	5	1707</citation>
	<citation>1707	5	1707</citation>
	<citation>1707	5	1707</citation>
	<citation>1707	5	1707</citation>
	<citation>1876	5	1707</citation>
	<citation>2099	5	1707</citation>
	<citation>511	5	1707</citation>
	<citation>1662	6	1707</citation>
	<citation>1707	6	1707</citation>
	<citation>1707	6	1707</citation>
	</citations>
	</document>
	<document id= '1706'>
	<title>CHAMP-Character Manipulation Procedures</title>
	<abstract>A new programming language facility for symbol manipulation is described.  String procedures  may be declared and called in a standard ALGOL context.  ALGOL procedures can in turn be called by string  procedures so that numeric and symbolic processes may conveniently be programmed together.  Concatenation  and a variant of SNOBOL's pattern matching make up a set of primitive commands.  These are assembled  together into conditional expressions which are to be used to provide alternative computational patterns.   Arrays of strings are processed using quantifiers.  The class of things which may be assigned to an  identifier can be restricted by a procedure expressed in the notation.  The language facilities have  been implemented in the ALGOL compiler for the Burroughs B5500.</abstract>
	<conference>CACM August, 1968</conference>
	<authors>
	<author>Storm, E. F.</author>
	</authors>
	<keywords>symbol manipulation, string handling, character manipulation, conditional expressions, procedures,  structure matching, recursive programming, quantifiers</keywords>
	<version>4.22 4.13</version>
	<location>CA680808 JB February 22, 1978  10:39 AM</location>
	<citations>
	<citation>1024	4	1706</citation>
	<citation>1051	4	1706</citation>
	<citation>1102	4	1706</citation>
	<citation>1132	4	1706</citation>
	<citation>1390	4	1706</citation>
	<citation>1395	4	1706</citation>
	<citation>1486	4	1706</citation>
	<citation>1549	4	1706</citation>
	<citation>1706	4	1706</citation>
	<citation>1706	4	1706</citation>
	<citation>1826	4	1706</citation>
	<citation>1878	4	1706</citation>
	<citation>378	4	1706</citation>
	<citation>2060	4	1706</citation>
	<citation>2155	4	1706</citation>
	<citation>2168	4	1706</citation>
	<citation>2719	4	1706</citation>
	<citation>2723	4	1706</citation>
	<citation>2838	4	1706</citation>
	<citation>2842	4	1706</citation>
	<citation>2855	4	1706</citation>
	<citation>2879	4	1706</citation>
	<citation>3077	4	1706</citation>
	<citation>3080	4	1706</citation>
	<citation>3106	4	1706</citation>
	<citation>627	4	1706</citation>
	<citation>106	4	1706</citation>
	<citation>1180	5	1706</citation>
	<citation>210	5	1706</citation>
	<citation>1706	5	1706</citation>
	<citation>1706	5	1706</citation>
	<citation>1706	5	1706</citation>
	</citations>
	</document>
	<document id= '1705'>
	<title>A Set of Basic Input-Output Procedures (Algorithm 335 [15])</title>
	<abstract>By means of the primitives in symbol, outsymbol and length, as requested by this journal's  Algorithms Policy [Comm. ACM 10 (Nov. 67), 729] a basic set of input-output procedures is defined aiming  at quality and flexibility.  Outreal, for instance, is written as a derived procedure; it outputs using  the fixed point or the floating point representation, and rounds properly.  Variants can easily be written  because of the explicit call of the procedures decompose integer and decompose real.  The highly recommended  practice of echoing input is made easy with one subset of derived procedures (ioi, ior, iob, ioa).  The  documentation of output in the form of equivalent ALGOL statements is also provided when use is made  of the subset oti, otr, otb, ota.  The Berkeley style of providing information on the form of output  using prior calls of procedures such as real format is defined.  A use of the parameter outchannel to  provide information for simultaneous output to several channels is suggested.  Interrelationship between  the declared procedures is furnished in tabular form.</abstract>
	<conference>CACM August, 1968</conference>
	<authors>
	<author>Vogelaere, R.</author>
	</authors>
	<keywords>input output, transput, input output procedures, input echo, quality output, decompose integer,  decompose real, style, Berkeley style, procedures relationship, output documentation, equivalent ALGOL  statements, ALGOL, ALGOL 60, integer format, real format,out integer, read real, input output Boolean,  input output array, fixed point representation, floating point representation, output channel interpretation</keywords>
	<version>4.0 4.41</version>
	<location>CA680809 JB February 22, 1978  10:32 AM</location>
	<citations>
	<citation>1705	4	1705</citation>
	<citation>1705	4	1705</citation>
	<citation>1705	4	1705</citation>
	<citation>1705	4	1705</citation>
	<citation>1945	4	1705</citation>
	<citation>2034	4	1705</citation>
	<citation>984	5	1705</citation>
	<citation>986	5	1705</citation>
	<citation>1020	5	1705</citation>
	<citation>1321	5	1705</citation>
	<citation>1705	5	1705</citation>
	<citation>1705	5	1705</citation>
	<citation>1705	5	1705</citation>
	</citations>
	</document>
	<document id= '1704'>
	<title>Minimum Excess Cost Curve (ALgorithm 217 [H])</title>
	<conference>CACM August, 1968</conference>
	<authors>
	<author>Muth, J. F.</author>
	</authors>
	<keywords>critical path scheduling, PERT, cost/time tradeoffs, network flows</keywords>
	<version>3.59 5.41</version>
	<location>CA680810 JB February 22, 1978  9:52 AM</location>
	<citations>
	<citation>1704	5	1704</citation>
	<citation>1704	5	1704</citation>
	<citation>1704	5	1704</citation>
	</citations>
	</document>
	<document id= '1703'>
	<title>Accommodating Standards and Identification of Programming Languages</title>
	<abstract>The user public wants standardization and reliable identification of programming languages  and related services.  One way of achieving these goals illustrated by the methods adopted for TRAC T-64  interactive language, and its related family of languages.  Oppressive rigidity usually associated with  standardization is avoided by a new accommodation technique accessible to the user to allow local variations  with the language.  Explicit standardization of the language is undertaken at the organizational source  of the language.  Use of the organizational trademark (TRAC) on the published standards, and services  relying upon them, provides a reliable public identification.  These methods can be usefully applied  to other programming languages and computer services.</abstract>
	<conference>CACM August, 1968</conference>
	<authors>
	<author>Mooers, C. N.</author>
	</authors>
	<keywords>standardization, programming languages, TRAC T-64 language, tranemark, public identification of  programming languages, standards which accommodate</keywords>
	<version>2.12 4.2 2.9</version>
	<location>CA680811 JB February 22, 1978  9:50 AM</location>
	<citations>
	<citation>1530	4	1703</citation>
	<citation>1531	4	1703</citation>
	<citation>1565	4	1703</citation>
	<citation>1703	4	1703</citation>
	<citation>1945	4	1703</citation>
	<citation>2036	4	1703</citation>
	<citation>1455	5	1703</citation>
	<citation>1703	5	1703</citation>
	<citation>1703	5	1703</citation>
	<citation>1703	5	1703</citation>
	</citations>
	</document>
	<document id= '1702'>
	<citations>
	<citation>1702	5	1702</citation>
	<citation>1702	5	1702</citation>
	<citation>1702	5	1702</citation>
	</citations>
	<title>Commentary on Mr. Mooers' Paper</title>
	<conference>CACM August, 1968</conference>
	<authors>
	</authors>
	<location>CA680812 JB February 22, 1978  9:42 AM</location>
	</document>
	<document id= '1701'>
	<citations>
	<citation>1701	5	1701</citation>
	<citation>1701	5	1701</citation>
	<citation>1701	5	1701</citation>
	</citations>
	<title>Synchronous Signaling Rates for Data Transmission* (Proposed USA STandard)</title>
	<conference>CACM August, 1968</conference>
	<location>CA680813 JB February 22, 1978  9:41 AM</location>
	</document>
	<document id= '1700'>
	<title>PEEKABIT, Computer Offspring of Punched Card PEEKABOO, for Natural Language Searching</title>
	<abstract>The "peekaboo" idea from punched card information retrieval methods has been mated with the  idea of superimposed punching to produce a programming technique which cuts computer run time in half  on a test search of 33,000 subject index entries.  A search program using the device has been operational  since late 1963.  As an item is entered in the store, an 18-byte mask is created from the item's meaningful  words using the inclusive OR operation.  If, at search time, the logical product (using the AND operation)  of this mask and a similarly constructed question mask is not equal to the question mask, then one or  more question words are not present in the store item.  An equality is in conclusive; the words of the  store item must be unpacked and compared with question words.  The present store is made up of over 600,000  subject index entries estimated to average 60 characters each.  Longer texts, such as abstracts, could  be handled by multiple masks.</abstract>
	<conference>CACM September,1968</conference>
	<authors>
	<author>Hutton, F. C.</author>
	</authors>
	<keywords>peekaboo, superimposed coding, natural language searching text searching, information compaction,  computer search technique</keywords>
	<version>3.74</version>
	<location>CA680901 JB February 22, 1978  9:38 AM</location>
	<citations>
	<citation>1700	5	1700</citation>
	<citation>1700	5	1700</citation>
	<citation>1700	5	1700</citation>
	</citations>
	</document>
	<document id= '1699'>
	<title>Experimental Evaluation of Information Retrieval Through a Teletypewriter</title>
	<abstract>Experiments designed to evaluate the capabilities of mechanized information retrieval systems,  with emphasis on interactive (man-machine) language and on some of the mechanical and psychological limitations  in their design, were conducted at the Moore School information Systems Laboratory.  The basic assumption  of the research is that an information retrieval system that provides for man-machine dialogue at a remote  inquiry terminal should provide a searcher with many of the tools which would be available to him were  he actually performing his search at a library or repository of documents.  Factors involved in evaluation  of such a system include ease of use, learning time, and effectiveness of actual retrieval.  Three experiments  and the conclusions resulting from them are detailed.</abstract>
	<conference>CACM September, 1968</conference>
	<authors>
	<author>Rubinoff, M.</author>
	<author>Bergman, S.</author>
	<author>Franks, W.</author>
	<author>Rubinoff, E.R.</author>
	</authors>
	<keywords>information retrieval testing,  information system evaluation, experimental document retrieval,  document retrieval, document perusal, man-machine communication, remote console communication, teletypewriter  communication, remote terminal communication, retrieval command language, symbolic command language,  interactive systems, user learning factors, on-line searching</keywords>
	<version>3.72 3.74 3.79 3.81</version>
	<location>CA680902 JB February 22, 1978  9:30 AM</location>
	<citations>
	<citation>1155	4	1699</citation>
	<citation>1456	4	1699</citation>
	<citation>1468	4	1699</citation>
	<citation>1515	4	1699</citation>
	<citation>1681	4	1699</citation>
	<citation>1699	4	1699</citation>
	<citation>1699	4	1699</citation>
	<citation>1699	4	1699</citation>
	<citation>1856	4	1699</citation>
	<citation>2127	4	1699</citation>
	<citation>1194	5	1699</citation>
	<citation>1324	5	1699</citation>
	<citation>1681	5	1699</citation>
	<citation>1699	5	1699</citation>
	<citation>1699	5	1699</citation>
	<citation>1699	5	1699</citation>
	</citations>
	</document>
	<document id= '1698'>
	<title>A Statistical Model for Console Behavior in Multiuser Computers</title>
	<abstract>The ability of a computer system to communicate with the outside world efficiently is as important  as its ability to perform computations efficiently.  It is quite difficult to characterize a particular  user, but rather easy to characterize the entire user community.  Based on the properties of this community  we have postulated a hypothetical "virtual console."  No claim is made that a virtual console behaves  like any actual console, but the entire collection of virtual consoles models the collection of actual  consoles.  Using the model we answer questions like:  How many processes are suspended waiting for console  input?  What is the maximum rate at which a process can execute?  What bounds can be set on overall buffer  requirements?  Answers to these and similar questions are needed in certain aspects of operating system  design.</abstract>
	<conference>CACM September, 1968</conference>
	<authors>
	<author>Denning, P. J.</author>
	</authors>
	<keywords>statistical models for input-output, operating system design, input-output design</keywords>
	<version>4.30 4.41 5.5</version>
	<location>CA680903 JB February 22, 1978  9:21 AM</location>
	<citations>
	<citation>1458	4	1698</citation>
	<citation>1523	4	1698</citation>
	<citation>1603	4	1698</citation>
	<citation>1698	4	1698</citation>
	<citation>1747	4	1698</citation>
	<citation>1748	4	1698</citation>
	<citation>1854	4	1698</citation>
	<citation>1877	4	1698</citation>
	<citation>1960	4	1698</citation>
	<citation>2377	4	1698</citation>
	<citation>2378	4	1698</citation>
	<citation>2497	4	1698</citation>
	<citation>2558	4	1698</citation>
	<citation>2625	4	1698</citation>
	<citation>2632	4	1698</citation>
	<citation>2840	4	1698</citation>
	<citation>2941	4	1698</citation>
	<citation>3105	4	1698</citation>
	<citation>3144	4	1698</citation>
	<citation>1471	5	1698</citation>
	<citation>1698	5	1698</citation>
	<citation>1698	5	1698</citation>
	<citation>1698	5	1698</citation>
	</citations>
	</document>
	<document id= '1697'>
	<title>Graphical Input/Output of Nonstandard Characters</title>
	<abstract>A system developed at Harvard for graphically inputting and outputting nonstandard characters  on a computer is printed.  In principle, the system can deal with any orthography, although at present  it is limited to 4000 Chinese characters and some mathematical symbols.  New characters can be added  to the repertoire of the system by graphical input on a display scope.  Text inputting is accomplished  via a display scope or a Rand Tablet.  The organization and operation of the current system are described,  and a discussion of the relative merits of such a system is given.  Illustrations of the computer input  and output of Chinese characters are included.</abstract>
	<conference>CACM September, 1968</conference>
	<authors>
	<author>Hayashl, H.</author>
	<author>Duncan, S.</author>
	<author>Kuno, S.</author>
	</authors>
	<keywords>Chinese characters, input/output, orthography, Rand Tablet, PDP-1, automatic typesetting, man-machine  communication, computer graphics, graphical input, on-line editing</keywords>
	<version>3.40 4.41</version>
	<location>CA680904 JB February 22, 1978  9:13 AM</location>
	<citations>
	<citation>1697	4	1697</citation>
	<citation>1528	5	1697</citation>
	<citation>1659	5	1697</citation>
	<citation>1697	5	1697</citation>
	<citation>1697	5	1697</citation>
	<citation>1697	5	1697</citation>
	<citation>1225	6	1697</citation>
	<citation>1265	6	1697</citation>
	<citation>1350	6	1697</citation>
	<citation>1671	6	1697</citation>
	<citation>1697	6	1697</citation>
	</citations>
	</document>
	<document id= '1696'>
	<title>An Algorithm for Identifying the Ergodic Subchains and Transient States of a Stochastic Matrix</title>
	<abstract>An algorithm for identifying the ergodic subchains and transient states of a stochastic matrix is presented.  Applications in Markov renewal programming and in the construction of variable length  codes are reviewed, and an updating procedure for dealing with certain sequences of stochastic matrices  is discussed.  Computation times are investigated experimentally and compared with those of another recently  propose method.</abstract>
	<conference>CACM September, 1968</conference>
	<authors>
	<author>Fox, B. L.</author>
	<author>Landi, D. M.</author>
	</authors>
	<keywords>stochastic matrix, ergodic, chain identification</keywords>
	<version>5.39 5.5</version>
	<location>CA680905 JB February 22, 1978  9:04 AM</location>
	<citations>
	<citation>1696	5	1696</citation>
	<citation>1696	5	1696</citation>
	<citation>1696	5	1696</citation>
	</citations>
	</document>
	<document id= '1695'>
	<title>PLEXUS-An On-Line System for Modeling Neural Networks</title>
	<abstract>A description is presented of PLEXUS, a system which enables a user to construct and specify  a neural network, to analyze the output data produced by the network, and to store and retrieve networks  and data from a library.  The system, operated entirely from a digital display unit, interacts directly  with the user and permits easy and rapid transitions between the various phases of the modeling process.   PLEXUS is designed to complement neurophysiological research so that the systematic development of neural  models can be coordinated with experimental work.  PLEXUS networks are built up from components representing  individual neurons, external stimuli, and interconnecting fibers, each component being of a relatively  detailed nature.  Provision is also made for the use of experimental data as input to a network.  Convenient  means for specification and modification of a network and extensive error-checking capabilities are provided.  Data resulting from the simulation of a network may be analyzed by a variety of techniques ranging from  examinations of the gross characteristics of the data to the determination of detailed statistical properties.</abstract>
	<conference>CACM September, 1968</conference>
	<authors>
	<author>Dill, J. C.</author>
	<author>Randall, D. L.</author>
	<author>Richer, I.</author>
	</authors>
	<keywords>biological modeling, data analysis, discrete system simulation, library systems, modeling, network  simulation, neural networks, neurophysiological models, on-line simulation, simulation</keywords>
	<version>3.12 3.19 3.29 3.65</version>
	<location>CA680906 JB February 22, 1978  8:56 AM</location>
	<citations>
	<citation>1695	5	1695</citation>
	<citation>1695	5	1695</citation>
	<citation>1695	5	1695</citation>
	</citations>
	</document>
	<document id= '1694'>
	<title>An Algorithm for the Probability of the Union of a Large Number of Events</title>
	<abstract>An algorithm is presented which efficiently evaluates the probability for the union of n independent  and not mutually exclusive events. The problem is that of evaluating the sums of the products of all  possible combinations of n variables in minimum time and storage space.</abstract>
	<conference>CACM September, 1968</conference>
	<authors>
	<author>Miller, G. D.</author>
	</authors>
	<keywords>algorithm, probability, optimum, storage vs. time compromise, set union, mutually exclusive events</keywords>
	<version>5.12 5.5 5.6</version>
	<location>CA680907 JB February 22, 1978  8:45 AM</location>
	<citations>
	<citation>1694	5	1694</citation>
	<citation>1694	5	1694</citation>
	<citation>1694	5	1694</citation>
	</citations>
	</document>
	<document id= '1693'>
	<title>GPL, a Truly General Purpose Language</title>
	<abstract>A truly general purpose programming language, GPL, is described which contains facilities for  constructing (within the language) new data types as well as facilities for operations performed upon  them.  The basic language is minimal in the sense that no basic element can be derived from the others  with high efficiency in the object programs.  Constructs like the ALGOL 60 for-statements,and if-statements  are not basic; they are special types of procedures.  New "symbols" (underlined words in ALGOL 60) are  implicitly defined by usage in other declarations.  As part words are definable, packed words are handled  as easily as full words.  "Address" variables (pointers) are included in full generality.</abstract>
	<conference>CACM September, 1968</conference>
	<authors>
	<author>Garwick, J. V.</author>
	</authors>
	<keywords>programming language, general purpose, self-extending, macro, ALGOL</keywords>
	<version>4.20</version>
	<location>CA680908 JB February 22, 1978  8:40 AM</location>
	<citations>
	<citation>1379	4	1693</citation>
	<citation>1380	4	1693</citation>
	<citation>1542	4	1693</citation>
	<citation>1552	4	1693</citation>
	<citation>1683	4	1693</citation>
	<citation>1693	4	1693</citation>
	<citation>1693	4	1693</citation>
	<citation>1693	4	1693</citation>
	<citation>1693	4	1693</citation>
	<citation>1781	4	1693</citation>
	<citation>1781	4	1693</citation>
	<citation>1781	4	1693</citation>
	<citation>1781	4	1693</citation>
	<citation>1787	4	1693</citation>
	<citation>1824	4	1693</citation>
	<citation>1836	4	1693</citation>
	<citation>1836	4	1693</citation>
	<citation>1854	4	1693</citation>
	<citation>1860	4	1693</citation>
	<citation>1861	4	1693</citation>
	<citation>1945	4	1693</citation>
	<citation>1945	4	1693</citation>
	<citation>2015	4	1693</citation>
	<citation>2060	4	1693</citation>
	<citation>2060	4	1693</citation>
	<citation>2060	4	1693</citation>
	<citation>2061	4	1693</citation>
	<citation>2061	4	1693</citation>
	<citation>2082	4	1693</citation>
	<citation>2091	4	1693</citation>
	<citation>2091	4	1693</citation>
	<citation>2126	4	1693</citation>
	<citation>2152	4	1693</citation>
	<citation>2179	4	1693</citation>
	<citation>2179	4	1693</citation>
	<citation>2340	4	1693</citation>
	<citation>2356	4	1693</citation>
	<citation>2546	4	1693</citation>
	<citation>2546	4	1693</citation>
	<citation>2603	4	1693</citation>
	<citation>2698	4	1693</citation>
	<citation>2698	4	1693</citation>
	<citation>2708	4	1693</citation>
	<citation>2708	4	1693</citation>
	<citation>2824	4	1693</citation>
	<citation>2982	4	1693</citation>
	<citation>2986	4	1693</citation>
	<citation>557	4	1693</citation>
	<citation>3045	4	1693</citation>
	<citation>3045	4	1693</citation>
	<citation>3093	4	1693</citation>
	<citation>1421	5	1693</citation>
	<citation>1477	5	1693</citation>
	<citation>1491	5	1693</citation>
	<citation>1614	5	1693</citation>
	<citation>1693	5	1693</citation>
	<citation>1693	5	1693</citation>
	<citation>1693	5	1693</citation>
	<citation>2126	5	1693</citation>
	<citation>2317	5	1693</citation>
	<citation>823	6	1693</citation>
	<citation>196	6	1693</citation>
	<citation>1198	6	1693</citation>
	<citation>1572	6	1693</citation>
	<citation>1614	6	1693</citation>
	<citation>1693	6	1693</citation>
	<citation>1693	6	1693</citation>
	<citation>1749	6	1693</citation>
	<citation>1753	6	1693</citation>
	<citation>1781	6	1693</citation>
	<citation>2126	6	1693</citation>
	<citation>2148	6	1693</citation>
	<citation>404	6	1693</citation>
	</citations>
	</document>
	<document id= '1692'>
	<title>Numerical Solution of a Thin Plate Heat Transfer Problem</title>
	<abstract>The numerical solution of a system of linear equations resulting from a discrete approximation  to a thin plate heat transfer problem is considered.  The slow convergence of point iterative methods  is analyzed and shown to be caused by one of the boundary conditions. The difficulty may be removed by  a standard line iterative technique.</abstract>
	<conference>CACM September, 1968</conference>
	<authors>
	<author>III, G.W.</author>
	<author>Lick, D. W.</author>
	</authors>
	<keywords>heat transfer problem, Poisson equation, boundary value problem, thin domain, successive overrelaxation  (SOR), block SOR</keywords>
	<version>3.20 5.17</version>
	<location>CA680909 JB February 21, 1978  4:48 PM</location>
	<citations>
	<citation>1692	5	1692</citation>
	<citation>1692	5	1692</citation>
	<citation>1692	5	1692</citation>
	</citations>
	</document>
	<document id= '1691'>
	<title>A Comparison of the Correlational Behavior of Random Number Generators for the IBM 360</title>
	<abstract>Hutchinson states that the "new" (prime modulo) multiplicative congruential pseudorandom generator,  attributed to D. H. Lehmer, has passed the usual statistical tests for random number generators.  It  is here empirically shown that generators of this type can produce sequences whose autocorrelation functions  up to lag 50 exhibit evidence of nonrandomness for many multiplicative constants.  An alternative generator  proposed by Tausworthe, which uses irreducible polynomials over the field of characteristic two, is shown  to be free from this defect.  The applicability of these two generators to the IBM 360 is then discussed.   Since computer word size can affect a generator's statistical behavior the older mixed and simple congruential  generators, although extensively tested on computers having 36 or more bits per word, may not be optimum  generators for the IBM 360.</abstract>
	<conference>CACM September, 1968</conference>
	<authors>
	<author>Whittlesey, J. R.</author>
	</authors>
	<keywords>random numbers, pseudorandom number generators, autocorrelation function, serial correlation, digital  shift-register generators, linear recurrence modulo two, irreducible polynomials, primitive trinomials  modulo two, congruential generators, prime numbers, statistical tests for randomness, IBM 360, 32-bit  versus 36-bit word size</keywords>
	<version>5.5</version>
	<location>CA680910 JB February 21, 1978  4:44 PM</location>
	<citations>
	<citation>1674	4	1691</citation>
	<citation>1691	4	1691</citation>
	<citation>1691	4	1691</citation>
	<citation>1691	4	1691</citation>
	<citation>1293	5	1691</citation>
	<citation>1420	5	1691</citation>
	<citation>1631	5	1691</citation>
	<citation>1691	5	1691</citation>
	<citation>1691	5	1691</citation>
	<citation>1691	5	1691</citation>
	<citation>2115	5	1691</citation>
	<citation>2122	5	1691</citation>
	<citation>1674	6	1691</citation>
	<citation>1691	6	1691</citation>
	<citation>1691	6	1691</citation>
	<citation>1930	6	1691</citation>
	</citations>
	</document>
	<document id= '1690'>
	<title>Netflow (Algorithm 336 [H])</title>
	<conference>CACM September, 1968</conference>
	<authors>
	<author>Bray, T. A.</author>
	<author>Witzgall, C.</author>
	</authors>
	<keywords>capacitated network, linear programming, minimum-cost flow, network flow, out-of-kilter</keywords>
	<version>5.32 5.41</version>
	<location>CA680911 JB February 21, 1978  4:35 PM</location>
	<citations>
	<citation>1690	4	1690</citation>
	<citation>1322	5	1690</citation>
	<citation>1690	5	1690</citation>
	<citation>1690	5	1690</citation>
	<citation>1690	5	1690</citation>
	</citations>
	</document>
	<document id= '1689'>
	<title>Calculation of a Polynomial and its Derivative Values by Horner Scheme (Algorithm 337 [C1])</title>
	<conference>CACM September, 1968</conference>
	<authors>
	<author>Pankiewicz, W.</author>
	</authors>
	<keywords>function evaluation, polynomial evaluation, Algol procedure, Horner's scheme</keywords>
	<version>5.12 4.22</version>
	<location>CA680912 JB February 21, 1978  4:33 PM</location>
	<citations>
	<citation>1689	5	1689</citation>
	<citation>1689	5	1689</citation>
	<citation>1689	5	1689</citation>
	</citations>
	</document>
	<document id= '1688'>
	<title>Netflow (Algorithm 248 [H])</title>
	<conference>CACM September, 1968</conference>
	<authors>
	<author>Henderson, J. H.</author>
	</authors>
	<keywords>capacitated network, linear programming, minimum-cost flow, network flow, out-of-kilter</keywords>
	<version>5.32 5.41</version>
	<location>CA680913 JB February 21, 19784:31 PM</location>
	<citations>
	<citation>1688	5	1688</citation>
	<citation>1688	5	1688</citation>
	<citation>1688	5	1688</citation>
	</citations>
	</document>
	<document id= '1687'>
	<title>Netflow (Algorithm 248 [H])</title>
	<conference>CACM September, 1968</conference>
	<authors>
	<author>Bray, T. A.</author>
	<author>Witzgall, C.</author>
	</authors>
	<keywords>capacitated network, linear programming, minimum-cost flow, network flow, out-of-kilter</keywords>
	<version>5.32 5.41</version>
	<location>CA680914 JB February 21, 1978 4:29 PM</location>
	<citations>
	<citation>1687	5	1687</citation>
	<citation>1687	5	1687</citation>
	<citation>1687	5	1687</citation>
	</citations>
	</document>
	<document id= '1686'>
	<title>Computer Synthesis of Holograms for 3-D Display</title>
	<abstract>Optical and digital holography are reviewed.  The mathematical model and computational techniques  of the authors' digital holographic process are discussed, and applications of computer holography are  suggested.  Computer holograms have been made of three-dimensional objects which give faithful reconstructions,  even in white light.  A new approach based on point apertures for the image is discussed.  Photographs  of the images reconstructed from digital holograms are presented.</abstract>
	<conference>CACM October, 1968</conference>
	<authors>
	<author>Lesem, L. B.</author>
	<author>Hirsch, P. M.</author>
	</authors>
	<keywords>holography, optics, Fourier transforms, computer applications, display device, photography, physics,  mathematics, image processing</keywords>
	<version>3.17 3.19 5.19</version>
	<location>CA681001 JB February 21, 1978  4:27 PM</location>
	<citations>
	<citation>1686	5	1686</citation>
	<citation>1686	5	1686</citation>
	<citation>1686	5	1686</citation>
	<citation>2004	5	1686</citation>
	<citation>1686	6	1686</citation>
	<citation>1915	6	1686</citation>
	</citations>
	</document>
	<document id= '1685'>
	<title>GAN, a System for Generating and Analyzing Activity Networks</title>
	<abstract>GAN, a system for generating activity networks, is designed to save time in the preparation  of activity networks and to deal conveniently with network programs.  A defining description of a programming  language designed for generating activity network from a set of standard networks is presented.  Also,  a general idea of a language for performing calculations on activity networks (scheduling activity networks)  is given.</abstract>
	<conference>CACM October, 1968</conference>
	<authors>
	<author>Schurmann, A.</author>
	</authors>
	<keywords>activity network, management project, standard network, network generator, network assembler, activity  network analysis, network calculation, network program</keywords>
	<version>3.50 3.53 4.11 4.12 4.29</version>
	<location>CA681002 JB February 21, 1978  4:22 PM</location>
	<citations>
	<citation>1685	4	1685</citation>
	<citation>1685	5	1685</citation>
	<citation>1685	5	1685</citation>
	<citation>1685	5	1685</citation>
	<citation>3059	5	1685</citation>
	</citations>
	</document>
	<document id= '1684'>
	<title>Ambiguity in Limited Entry Decision Tables</title>
	<abstract>The use of decision tables as a tool in systems analysis and for program specification is now  becoming accepted.  Rules on redundancy, contradiction, and completeness for limited entry tables were  published in 1963.  These are usually used for checking, preceded if necessary by a conversion from extended  to limited entry form.  Processors which automatically translate tables to more conventional program  usually base their diagnostic facilities on these rules.  In this paper it is suggested that these rules  are unsatisfactory and that the important aspect of checking is to eliminate ambiguity from tables.   Ambiguity is defined and discussed, and a procedure for producing checked-out decision tables is proposed.   The theoretical basis of the algorithm used is established. The importance of well-designed diagnostic  facilities in decision table processors is emphasized.</abstract>
	<conference>CACM October, 1968</conference>
	<authors>
	<author>King, P. J. H.</author>
	</authors>
	<keywords>decision tables, DETAB-65, systems analysis</keywords>
	<version>3.50 4.19 4.49</version>
	<location>CA681003 JB February 21, 1978  4:17 PM</location>
	<citations>
	<citation>1684	4	1684</citation>
	<citation>1684	4	1684</citation>
	<citation>2053	4	1684</citation>
	<citation>2220	4	1684</citation>
	<citation>2273	4	1684</citation>
	<citation>2453	4	1684</citation>
	<citation>2726	4	1684</citation>
	<citation>2856	4	1684</citation>
	<citation>3113	4	1684</citation>
	<citation>1354	5	1684</citation>
	<citation>1564	5	1684</citation>
	<citation>1684	5	1684</citation>
	<citation>1684	5	1684</citation>
	<citation>1684	5	1684</citation>
	<citation>2053	5	1684</citation>
	<citation>2517	5	1684</citation>
	<citation>2518	5	1684</citation>
	<citation>2616	5	1684</citation>
	<citation>3034	5	1684</citation>
	<citation>931	6	1684</citation>
	<citation>1172	6	1684</citation>
	<citation>1237	6	1684</citation>
	<citation>1327	6	1684</citation>
	<citation>1354	6	1684</citation>
	<citation>1548	6	1684</citation>
	<citation>1548	6	1684</citation>
	<citation>1684	6	1684</citation>
	<citation>1684	6	1684</citation>
	<citation>1684	6	1684</citation>
	<citation>1684	6	1684</citation>
	<citation>1684	6	1684</citation>
	<citation>2053	6	1684</citation>
	<citation>2053	6	1684</citation>
	<citation>2221	6	1684</citation>
	<citation>2517	6	1684</citation>
	<citation>2517	6	1684</citation>
	</citations>
	</document>
	<document id= '1683'>
	<title>Boolean matrix Methods for the Detection of Simple Precedence Grammars</title>
	<abstract>A mechanical procedure is derived for determining whether a given context-free phrase structure  grammar is a simple precedence grammar.  This procedure consists of elementary operations on suitably  defined Boolean matrices.  Application of the procedure to operator grammars is also given.</abstract>
	<conference>CACM October, 1968</conference>
	<authors>
	<author>Martin, D. F.</author>
	</authors>
	<keywords>syntax analysis, precedence analysis, simple precedence grammar, simple precedence language, operator  grammar, operator precedence, compilers, bounded-context syntactic analysis, Boolean matrices, relations</keywords>
	<version>4.12 5.23</version>
	<location>CA681004 JB February 21, 1978  4:09 PM</location>
	<citations>
	<citation>1496	4	1683</citation>
	<citation>1542	4	1683</citation>
	<citation>1683	4	1683</citation>
	<citation>1683	4	1683</citation>
	<citation>1693	4	1683</citation>
	<citation>1768	4	1683</citation>
	<citation>1781	4	1683</citation>
	<citation>1787	4	1683</citation>
	<citation>1787	4	1683</citation>
	<citation>1836	4	1683</citation>
	<citation>1945	4	1683</citation>
	<citation>1945	4	1683</citation>
	<citation>2060	4	1683</citation>
	<citation>2061	4	1683</citation>
	<citation>2061	4	1683</citation>
	<citation>2082	4	1683</citation>
	<citation>2091	4	1683</citation>
	<citation>2152	4	1683</citation>
	<citation>2179	4	1683</citation>
	<citation>2340	4	1683</citation>
	<citation>2356	4	1683</citation>
	<citation>2546	4	1683</citation>
	<citation>2603	4	1683</citation>
	<citation>2698	4	1683</citation>
	<citation>2708	4	1683</citation>
	<citation>2824	4	1683</citation>
	<citation>2982	4	1683</citation>
	<citation>2986	4	1683</citation>
	<citation>3045	4	1683</citation>
	<citation>3093	4	1683</citation>
	<citation>1141	5	1683</citation>
	<citation>1491	5	1683</citation>
	<citation>1683	5	1683</citation>
	<citation>1683	5	1683</citation>
	<citation>1683	5	1683</citation>
	<citation>2221	5	1683</citation>
	<citation>2340	5	1683</citation>
	<citation>2824	5	1683</citation>
	<citation>2986	5	1683</citation>
	<citation>1191	6	1683</citation>
	<citation>1491	6	1683</citation>
	<citation>1491	6	1683</citation>
	<citation>1491	6	1683</citation>
	<citation>1683	6	1683</citation>
	<citation>1683	6	1683</citation>
	<citation>1683	6	1683</citation>
	<citation>1683	6	1683</citation>
	<citation>1836	6	1683</citation>
	<citation>1836	6	1683</citation>
	<citation>2053	6	1683</citation>
	<citation>2179	6	1683</citation>
	<citation>2340	6	1683</citation>
	<citation>2340	6	1683</citation>
	</citations>
	</document>
	<document id= '1682'>
	<title>The Implementation of a BASIC System in a Multiprogramming Environment</title>
	<abstract>The implementation of a remote terminal BASIC system within the context of an existing multiprogramming  computer system, the Burroughs B5500, is described.  This implementation combines a unique mixture of  machine language and interpretive techniques with an incremental compiler.</abstract>
	<conference>CACM October, 1968</conference>
	<authors>
	<author>Braden, H. V.</author>
	<author>Wulf, W. A.</author>
	</authors>
	<keywords>multiprogramming, incremental compilation, compilers, interpreters</keywords>
	<version>4.1 4.12 4.2 4.22 4.3 4.32</version>
	<location>CA681005 JB February 21, 1978  4:04 PM</location>
	<citations>
	<citation>1215	4	1682</citation>
	<citation>1676	4	1682</citation>
	<citation>1682	4	1682</citation>
	<citation>1682	4	1682</citation>
	<citation>1728	4	1682</citation>
	<citation>1860	4	1682</citation>
	<citation>1973	4	1682</citation>
	<citation>2018	4	1682</citation>
	<citation>2032	4	1682</citation>
	<citation>2033	4	1682</citation>
	<citation>2107	4	1682</citation>
	<citation>2109	4	1682</citation>
	<citation>2203	4	1682</citation>
	<citation>2251	4	1682</citation>
	<citation>2359	4	1682</citation>
	<citation>2524	4	1682</citation>
	<citation>2543	4	1682</citation>
	<citation>2552	4	1682</citation>
	<citation>2559	4	1682</citation>
	<citation>2991	4	1682</citation>
	<citation>3053	4	1682</citation>
	<citation>1025	5	1682</citation>
	<citation>1682	5	1682</citation>
	<citation>1682	5	1682</citation>
	<citation>1682	5	1682</citation>
	<citation>1785	5	1682</citation>
	<citation>2874	5	1682</citation>
	<citation>1682	6	1682</citation>
	<citation>2227	6	1682</citation>
	<citation>2317	6	1682</citation>
	<citation>2683	6	1682</citation>
	<citation>2871	6	1682</citation>
	<citation>521	6	1682</citation>
	</citations>
	</document>
	<document id= '1681'>
	<title>Easy English,a Language for Information Retrieval Through a Remote Typewriter Console</title>
	<abstract>Easy English is a natural command language designed to simplify communication between man and  machine through remote typewriter console.  It has been developed for retrieval of documents from a computerized  data base, the Moore School Information Systems Laboratory files.  Requests are formulated in a standardized  syntactical form (examples of which are presented), and this form is then transformed into an equivalent  query expressed in the retrieval system's original Symbolic Command Language, which is briefly described.   Operation of easy English is detailed by illustration of the transformations performed upon a sample  request up to the point at which the request string is sent to the system.  A macro flowchart of Easy  English is included, and an Appendix provides the printout of a retrieval demonstration.</abstract>
	<conference>CACM October, 1968</conference>
	<authors>
	<author>Rubinoff, M.</author>
	<author>Bergman, S.</author>
	<author>Cautin, H.</author>
	<author>Rapp, F.</author>
	</authors>
	<keywords>natural language communication, on-line searching, remote console communication, information retrieval,  man-machine communication, remote terminal communication, translator, document retrieval, conversational  mode, information retrieval language, symbolic command language</keywords>
	<version>3.74 3.81 4.19</version>
	<location>CA681006 JB February 21, 1978  3:59 PM</location>
	<citations>
	<citation>1681	4	1681</citation>
	<citation>1699	4	1681</citation>
	<citation>1194	5	1681</citation>
	<citation>1681	5	1681</citation>
	<citation>1681	5	1681</citation>
	<citation>1681	5	1681</citation>
	<citation>1699	5	1681</citation>
	<citation>1194	6	1681</citation>
	<citation>1324	6	1681</citation>
	<citation>1681	6	1681</citation>
	</citations>
	</document>
	<document id= '1680'>
	<title>A General-Purpose Display Processing and Tutorial System</title>
	<abstract>ADEPT (A display-Expedited Processing and Tutorial) system is described.  This system was designed  to improve man-computer communications by employing a display unit to interleave tutoring with other  computer operations such as simulation, programming, and information retrieval.  It is written in FORTRAN  IV (G) for the IBM System/360, Model 40, and the IBM 2250 display Unit under Operating System/360.  Adept  is a cataloged program that controls the standard operating system by terminating and rescheduling itself  automatically, relinquishing computer resources allocated to it, and surrendering control to the operating  system to perform other jobs.  It expands the power and flexibility of computer-assisted instruction  by making immediately available to students, teachers, and other users, the full resources (system-cataloged  programs) of the operating system.  Language processors and compilers, simulation models, mathematical  solution techniques, stored data, and all other library and user programs can be incorporated into instructional  material without reprogramming.  Illustrations of the various applications are presented and their implications  are discussed.</abstract>
	<conference>CACM October, 1968</conference>
	<authors>
	<author>Engvold, K. J.</author>
	<author>Hughes, J. L.</author>
	</authors>
	<keywords>computer-assisted instruction, tutorial systems, programming, simulation, modeling, information  retrieval operating systems, graphics, displays, man-machine interface, on-line computing, graphic programming</keywords>
	<version>1.5 3.3 3.5 3.8 4.0 4.3</version>
	<location>CA681007 JB February 21, 1978  3:36 PM</location>
	<citations>
	<citation>1680	4	1680</citation>
	<citation>1591	5	1680</citation>
	<citation>1680	5	1680</citation>
	<citation>1680	5	1680</citation>
	<citation>1680	5	1680</citation>
	</citations>
	</document>
	<document id= '1679'>
	<title>A Fast Fourier Transform Algorithm for Real-Valued Series</title>
	<abstract>A new procedure is presented for calculating the complex, discrete Fourier transform of real-valued  time series.  This procedure is described for an example where the number of points in the series is  an integral power of two.  This algorithm preserves the order and symmetry of the Cooley-Turkey fast  Fourier transform algorithm while effecting the two-to-one reduction in computation and storage which  can be achieved when the series is real.  Also discussed are hardware and software implementations of  the algorithm which perform only (N/4) log2 (N/2) complex multiply and add operations, and which require  only N real storage locations in analyzing each N-point record.</abstract>
	<conference>CACM October, 1968</conference>
	<authors>
	<author>Bergland, G. D.</author>
	</authors>
	<keywords>fast Fourier transform, time series analysis, digital filtering, spectral analysis, real-time spectrum  analyzers, Fourier analysis, discrete Fourier transform, digital spectrum analysis, Fourier analysis  algorithm, Fourier synthesis algorithm</keywords>
	<version>3.80 3.81 4.9 5.49 6.22</version>
	<location>CA681008 JB February 21, 1978  3:23 PM</location>
	<citations>
	<citation>1668	4	1679</citation>
	<citation>1669	4	1679</citation>
	<citation>1679	4	1679</citation>
	<citation>1728	4	1679</citation>
	<citation>2859	4	1679</citation>
	<citation>1525	5	1679</citation>
	<citation>1679	5	1679</citation>
	<citation>1679	5	1679</citation>
	<citation>1679	5	1679</citation>
	<citation>2354	5	1679</citation>
	<citation>1418	6	1679</citation>
	<citation>1521	6	1679</citation>
	<citation>1597	6	1679</citation>
	<citation>1679	6	1679</citation>
	<citation>2350	6	1679</citation>
	<citation>2355	6	1679</citation>
	</citations>
	</document>
	<document id= '1678'>
	<title>Automata, Formal Languages, Abstract Switching, and Computability in a Ph.D. Computer Science  Program</title>
	<abstract>A number of courses are listed in the area describe as automata, formal languages, abstract  switching, and computability, that might be available to a Ph.D. student in computer science.  A brief  catalog description of each course is applied and the role of each of the courses in the graduate program  is discussed.</abstract>
	<conference>CACM November, 1968</conference>
	<authors>
	<author>McNaughton, R.</author>
	</authors>
	<keywords>Ph.D. computer-science curriculum, Ph.D. computer science program, automata, formal languages,  switching theory, theory of computability</keywords>
	<version>1.5 5.2 6.1</version>
	<location>CA681101 JB February 21, 1978  3:16 PM</location>
	<citations>
	<citation>1678	5	1678</citation>
	<citation>1678	5	1678</citation>
	<citation>1678	5	1678</citation>
	<citation>3003	5	1678</citation>
	<citation>1659	6	1678</citation>
	<citation>1678	6	1678</citation>
	<citation>1927	6	1678</citation>
	<citation>1945	6	1678</citation>
	<citation>2097	6	1678</citation>
	<citation>2147	6	1678</citation>
	<citation>2163	6	1678</citation>
	<citation>2187	6	1678</citation>
	<citation>2329	6	1678</citation>
	<citation>2345	6	1678</citation>
	<citation>2367	6	1678</citation>
	<citation>2407	6	1678</citation>
	<citation>2478	6	1678</citation>
	<citation>2479	6	1678</citation>
	<citation>2480	6	1678</citation>
	<citation>2538	6	1678</citation>
	</citations>
	</document>
	<document id= '1677'>
	<title>Storage Organization in Programming Systems</title>
	<abstract>The system of program and data representation that has been in use on the Rice University computer  for five years is described.  Each logical entity in storage occupies a block of consecutive memory locations.   Each block is labeled by a codeword and may contain a program, a data vector, or codewords which in  turn label blocks to form arrays.  This storage arrangement is discussed with its realized advantages  or programming systems: simplicity of programmed addressing, flexibility of data structures, efficiency  of memory utilization, variability of system composition during execution, means of linkage between programs  and from programs to data, and basis for storage protection.  The application of labeled blocks may be  extended to areas of time-sharing and multimedia storage control.  On the basis of experience at rice,  some ideas on such extensions are presented.</abstract>
	<conference>CACM November, 1968</conference>
	<authors>
	<author>Jodeit, J. G.</author>
	</authors>
	<keywords>storage allocation, storage organization, storage control, codewords, data representation, program  representation, data structures, storage protection, addressing mechanisms, paging, segmentation, file  handling</keywords>
	<version>4.30 4.40 6.20</version>
	<location>CA681102 JB February 21, 1978  3:11 PM</location>
	<citations>
	<citation>1677	5	1677</citation>
	<citation>1677	5	1677</citation>
	<citation>1677	5	1677</citation>
	<citation>2064	5	1677</citation>
	<citation>1677	6	1677</citation>
	</citations>
	</document>
	<document id= '1676'>
	<title>The LRLTRAN Compiler</title>
	<abstract>Extensive software problems confront an organization which possesses a number of different  computers and which frequently acquires new ones.  To maintain cohesion, a system must be developed,  written in a high level language, which minimizes machine dependencies and isolates those which are necessary.   A language and a compiler for the language are discussed here.  The language, called LRLTRAN, is a heavily  augmented FORTRAN.  The tree-pass compiler makes use internally of a postfix Polish notation (pass I  to pass II) and a tree representation referred to as a "composite blocking table" (pass I to pass III).   Machine-independent optimization occurs in pass II and DO-loop and machine-dependent optimization in  pass III.</abstract>
	<conference>CACM November, 1968</conference>
	<authors>
	<author>Mendicino, S. F.</author>
	<author>Martin, J. T.</author>
	<author>Ranelletti, J. E.</author>
	<author>Zwakenberg, R. G.</author>
	</authors>
	<keywords>compiler, compiler-compiler, machine independence, scatter storage technique, Polish processor,  common subsegments, tree representation, optimization</keywords>
	<version>4.12 4.20</version>
	<location>CA681103 JB February 21, 1978  3:03 PM</location>
	<citations>
	<citation>1676	4	1676</citation>
	<citation>1682	4	1676</citation>
	<citation>1728	4	1676</citation>
	<citation>1860	4	1676</citation>
	<citation>1973	4	1676</citation>
	<citation>2018	4	1676</citation>
	<citation>2032	4	1676</citation>
	<citation>2033	4	1676</citation>
	<citation>2107	4	1676</citation>
	<citation>2109	4	1676</citation>
	<citation>2203	4	1676</citation>
	<citation>2251	4	1676</citation>
	<citation>2359	4	1676</citation>
	<citation>2524	4	1676</citation>
	<citation>2543	4	1676</citation>
	<citation>2552	4	1676</citation>
	<citation>2559	4	1676</citation>
	<citation>2991	4	1676</citation>
	<citation>3053	4	1676</citation>
	<citation>1676	5	1676</citation>
	<citation>1676	5	1676</citation>
	<citation>1676	5	1676</citation>
	<citation>1785	5	1676</citation>
	<citation>2859	5	1676</citation>
	<citation>1525	6	1676</citation>
	<citation>1676	6	1676</citation>
	</citations>
	</document>
	<document id= '1675'>
	<title>A Note on a Relevance Estimate and Its Improvement</title>
	<abstract>In this paper the effect of iterating the improvement procedure is examined.  It is shown that  applications of the improvement factor beyond the first time are ineffectual, and that the factor is  but a scale factor.</abstract>
	<conference>CACM November, 1968</conference>
	<authors>
	<author>Korfhage, R. R.</author>
	</authors>
	<keywords>information retrieval, relevance, indexing, classification</keywords>
	<version>3.70 3.71 3.74</version>
	<location>CA681104 JB February 21, 1978  2:57 PM</location>
	<citations>
	<citation>1675	5	1675</citation>
	<citation>1675	5	1675</citation>
	<citation>1675	5	1675</citation>
	</citations>
	</document>
	<document id= '1674'>
	<title>One-Line Random Number Generators and Their Use in Combinations</title>
	<abstract>Some one-line random number generators, i.e. generators requiring a single FORTRAN instruction  are discussed, and some short FORTRAN programs which mix several such generators are described.  The  aim is to provide methods for incorporating random number generators directly in FORTRAN programs, by  means of a few in-line instructions.  The advantages are speed (avoiding linkage to and from a subroutine),  convenience, and versatility.  Anyone wishing to experiment with generators, either using congruential  generators by themselves or mixing several generators to provide a composite with potentially better  statistical properties than the library generators currently available, may wish to consider some of  the simple FORTRAN program discussed here.</abstract>
	<conference>CACM November, 1968</conference>
	<authors>
	<author>Marsaglia, G.</author>
	<author>Bray, T. A.</author>
	</authors>
	<keywords>random number generation, Monte Carlo, simulation</keywords>
	<version>5.5</version>
	<location>CA681105 JB February 21, 1978  2:54 PM</location>
	<citations>
	<citation>1674	4	1674</citation>
	<citation>1691	4	1674</citation>
	<citation>1293	5	1674</citation>
	<citation>1674	5	1674</citation>
	<citation>1674	5	1674</citation>
	<citation>1674	5	1674</citation>
	<citation>1794	5	1674</citation>
	<citation>1870	5	1674</citation>
	<citation>2122	5	1674</citation>
	<citation>1674	6	1674</citation>
	<citation>1674	6	1674</citation>
	<citation>1674	6	1674</citation>
	<citation>1691	6	1674</citation>
	</citations>
	</document>
	<document id= '1673'>
	<title>Approximate Solution of Initial Boundary Wave Equation Problems by Boundary-Value Techniques</title>
	<abstract>A new boundary-value technique is proposed for the treatment of initial-boundary-value problems  for linear and mildly nonlinear wave equations.   Several illustrative examples are offered to demonstrate  the ease with which the method can be applied.</abstract>
	<conference>CACM November, 1968</conference>
	<authors>
	<author>Greenspan, D.</author>
	</authors>
	<keywords>initial-boundary-value problem, wave equation, boundary-value technique</keywords>
	<version>5.15 5.17</version>
	<location>CA681106 JB February 21, 1978  2:48 PM</location>
	<citations>
	<citation>1673	5	1673</citation>
	<citation>1673	5	1673</citation>
	<citation>1673	5	1673</citation>
	</citations>
	</document>
	<document id= '1672'>
	<title>Practical Error Coefficients in the Integration of Periodic Analytic Functions by the Trapezoidal  Rule</title>
	<abstract>Theoretical and practical values of error coefficients useful in bounding the error in integrating  periodic analytic functions with the trapezoidal rule are tabulated for various ranges of the parameters.</abstract>
	<conference>CACM November, 1968</conference>
	<authors>
	<author>Rabinowitz, P.</author>
	</authors>
	<keywords>theoretical error coefficients, practical error coefficients, numerical integration, periodic analytic  functions, trapezoidal rule, roundoff error, truncation error, integration algorithm</keywords>
	<version>5.11 5.16</version>
	<location>CA681107 JB February 21, 1978  2:45 PM</location>
	<citations>
	<citation>1672	4	1672</citation>
	<citation>1672	5	1672</citation>
	<citation>1672	5	1672</citation>
	<citation>1672	5	1672</citation>
	<citation>1784	5	1672</citation>
	</citations>
	</document>
	<document id= '1671'>
	<title>A Phonological Rule Tester</title>
	<abstract>The design and implementation of a system to alleviate the problem of rule evaluation for the  linguist in the area of phonology are presented.  It permits the user to define, on-line, sets of rules  statable within the framework presented in The Sound Patterns of English by Chomsky and Halle, 1968,  to define phonemes as bundles of specified distinctive features, to define data as strings of phonemes  with associated grammatical structure, to test the effect of applying rules to the data, and to store  both the definitions and results.  The rule application facility described in detail was implemented  by translating linguistic rules to rules in FLIP, a format-directed list processor embedded in LISP.   This made the system construction easy while providing sophisticated capabilities for the linguist.   The system is written in BBN LISP on the Scientific Data System 940 computer and is designed to be used  on-line in interactive fashion, with control returned to the user after each command is executed.</abstract>
	<conference>CACM November, 1968</conference>
	<authors>
	<author>Borrow, D. G.</author>
	<author>Fraser, J. B.</author>
	</authors>
	<keywords>phonology, rule tester, linguistics, transformational grammar, LISP, format-directed list processing,  on-line systems</keywords>
	<version>3.42 4.13 4.22</version>
	<location>CA681108 JB February 21, 1978  2:41 PM</location>
	<citations>
	<citation>1659	5	1671</citation>
	<citation>1671	5	1671</citation>
	<citation>1671	5	1671</citation>
	<citation>1671	5	1671</citation>
	<citation>1225	6	1671</citation>
	<citation>1265	6	1671</citation>
	<citation>1350	6	1671</citation>
	<citation>1671	6	1671</citation>
	<citation>1697	6	1671</citation>
	</citations>
	</document>
	<document id= '1670'>
	<title>Correspondences of 8-Bit and Hollerith Codes for Computer Environments (A USASI Tutorial Standard)</title>
	<conference>CACM November, 1968</conference>
	<keywords>USA standard, card code, punched card, punched card code, hole-patterns, hole-patterns assignment,  punched card systems</keywords>
	<version>1.1 1.4 2.0 2.12 2.43 2.44 3.10 3.20 3.30 3.31 3.42 3.50 3.56 3.70 3.72 3.73  3.74, 3.80, 3.81, 4.0, 4.1, 4.2, 4.20, 4.40, 5.0</version>
	<location>CA681109 JB February 21, 1978  2:33 PM</location>
	<citations>
	<citation>1670	5	1670</citation>
	<citation>1670	5	1670</citation>
	<citation>1670	5	1670</citation>
	</citations>
	</document>
	<document id= '1669'>
	<title>Algol Procedures for the Fast Fourier Transform (Algorithm 338 [C6])</title>
	<conference>CACM November, 1968</conference>
	<authors>
	<author>Singleton, R. C.</author>
	</authors>
	<keywords>fast Fourier transform, complex Fourier transform, multivariate Fourier transform, Fourier series,  harmonic analysis, spectral analysis, orthogonal polynomials, orthogonal transformation, virtual core  memory, permutation</keywords>
	<version>3.15 3.83 5.12 5.14</version>
	<location>CA681110 JB February 21, 1978  2:29 PM</location>
	<citations>
	<citation>1668	4	1669</citation>
	<citation>1669	4	1669</citation>
	<citation>1679	4	1669</citation>
	<citation>1728	4	1669</citation>
	<citation>2859	4	1669</citation>
	<citation>1525	5	1669</citation>
	<citation>1668	5	1669</citation>
	<citation>1669	5	1669</citation>
	<citation>1669	5	1669</citation>
	<citation>1669	5	1669</citation>
	<citation>1525	6	1669</citation>
	<citation>1669	6	1669</citation>
	</citations>
	</document>
	<document id= '1668'>
	<title>An Algol Procedure for the Fast Fourier Transform with Arbitrary Factors (Algorithm 339 [C6])</title>
	<conference>CACM November, 1968</conference>
	<authors>
	<author>Singleton, R. C.</author>
	</authors>
	<keywords>fast Fourier transform, multivariate Fourier transform, Fourier series, harmonic analysis, spectral  analysis, orthogonal polynomials, orthogonal transformation, virtual core memory, permutation</keywords>
	<version>3.15 3.83 5.12 5.14</version>
	<location>CA681111 JB February 21, 1978  2:26 PM</location>
	<citations>
	<citation>1668	4	1668</citation>
	<citation>1668	4	1668</citation>
	<citation>1669	4	1668</citation>
	<citation>1679	4	1668</citation>
	<citation>1728	4	1668</citation>
	<citation>2859	4	1668</citation>
	<citation>1525	5	1668</citation>
	<citation>1668	5	1668</citation>
	<citation>1668	5	1668</citation>
	<citation>1668	5	1668</citation>
	<citation>1669	5	1668</citation>
	</citations>
	</document>
	<document id= '1667'>
	<title>Roots of Polynomials by a Root-Squaring and Resultant Routine (Algorithm 340 [C2])</title>
	<conference>CACM November, 1968</conference>
	<authors>
	<author>Noltemeier, A.</author>
	</authors>
	<keywords>root finders, roots of polynomial equations, polynomial zeros, root-squaring operations, Graeffe  method, resultant procedure, subresultant procedure, testing of roots, acceptance criteria</keywords>
	<version>5.15</version>
	<location>CA681112 JB February 21, 1978  2:24 PM</location>
	<citations>
	<citation>1667	4	1667</citation>
	<citation>1667	4	1667</citation>
	<citation>1667	4	1667</citation>
	<citation>178	5	1667</citation>
	<citation>1242	5	1667</citation>
	<citation>1667	5	1667</citation>
	<citation>1667	5	1667</citation>
	<citation>1667	5	1667</citation>
	<citation>327	5	1667</citation>
	</citations>
	</document>
	<document id= '1666'>
	<title>Solution of Linear Programs in 0-1 Variables by Implicit Enumeration (Algorithm 341 [H])</title>
	<conference>CACM November, 1968</conference>
	<authors>
	<author>Byrne, J. L.</author>
	<author>Proll, L. G.</author>
	</authors>
	<keywords>linear programming, zero-one variables, partial enumeration</keywords>
	<version>5.41</version>
	<location>CA681113 JB February 21, 1978  2:21 PM</location>
	<citations>
	<citation>1666	5	1666</citation>
	<citation>1666	5	1666</citation>
	<citation>1666	5	1666</citation>
	<citation>2226	5	1666</citation>
	<citation>1658	6	1666</citation>
	<citation>1666	6	1666</citation>
	</citations>
	</document>
	<document id= '1665'>
	<title>Automatic Generation of Efficient Lexical Processors Using Finite State Techniques</title>
	<abstract>The practical application of the theory of finite-state automata to automatically generate  lexical processors is dealt with in this tutorial article by the use of the AED RWORD system, developed  at M.I.T. as part of the AED-1 system.  This system accepts as input description of the multicharacter  items or of words allowable in a language given in terms of a subset of regular expressions. The output  of the system is a lexical processor which reads a string of characters and combines them into the items  as defined by the regular expressions.  Each output item is identified by a code number together with  a pointer to a block of storage containing the characters and character count in the item.  The processors  produced by the system are based on finite-state machines.  Each state of a "machine" corresponds to  a unique condition in the lexical processing of a character string.  At each state a character is read,  and the machine changes to a new state.  At each transition appropriate actions are taken based on the  particular character read.  The system has been in operation since 1966, and processors generated have  compared favorably in speed to carefully hand-coded programs to accomplish the same task.  Lexical processors  for AED-O and MAD are among the many which have been produced.  The techniques employed are independent  of the nature of the items being evaluated.  If the word "events" is substituted for character string,  these processors may be described as generalized decision-making mechanisms based upon an ordered sequence  of events.  This allows the system to be used in a range of applications outside the area of lexical  processing.  However convenient these advantages may be, speed is the most important consideration.   In designing a system for automatic generation of a lexical processor, the goal was a processor which  completely eliminated backup or rereading, which was nearly as fast as hand-coded processors, which would  analyze the language and detect errors, and which would be convenient and easy to use.</abstract>
	<conference>CACM December, 1968</conference>
	<authors>
	<author>Johnson, W. L.</author>
	<author>Porter, J. H.</author>
	<author>Ackley, S. I.</author>
	<author>Ross, D. T.</author>
	</authors>
	<keywords>character string, compiler, finite-state automata, finite-state machine, lexical processor, nondeterministic  machine, parsing, plex structure, regular expressions,sequential machine, syntactic analysis</keywords>
	<version>3.63 3.75 4.12 5.22 5.24 5.31</version>
	<location>CA681201 JB February 21, 1978  2:19 PM</location>
	<citations>
	<citation>1051	4	1665</citation>
	<citation>1139	4	1665</citation>
	<citation>1265	4	1665</citation>
	<citation>1323	4	1665</citation>
	<citation>1358	4	1665</citation>
	<citation>1380	4	1665</citation>
	<citation>1552	4	1665</citation>
	<citation>1665	4	1665</citation>
	<citation>1665	4	1665</citation>
	<citation>1665	4	1665</citation>
	<citation>1665	4	1665</citation>
	<citation>1768	4	1665</citation>
	<citation>1781	4	1665</citation>
	<citation>1787	4	1665</citation>
	<citation>1787	4	1665</citation>
	<citation>1824	4	1665</citation>
	<citation>1825	4	1665</citation>
	<citation>1836	4	1665</citation>
	<citation>1860	4	1665</citation>
	<citation>1861	4	1665</citation>
	<citation>1989	4	1665</citation>
	<citation>2015	4	1665</citation>
	<citation>2110	4	1665</citation>
	<citation>2112	4	1665</citation>
	<citation>2127	4	1665</citation>
	<citation>2155	4	1665</citation>
	<citation>2187	4	1665</citation>
	<citation>2317	4	1665</citation>
	<citation>2534	4	1665</citation>
	<citation>2541	4	1665</citation>
	<citation>2545	4	1665</citation>
	<citation>2698	4	1665</citation>
	<citation>2698	4	1665</citation>
	<citation>2733	4	1665</citation>
	<citation>2733	4	1665</citation>
	<citation>2820	4	1665</citation>
	<citation>3073	4	1665</citation>
	<citation>3155	4	1665</citation>
	<citation>763	4	1665</citation>
	<citation>1665	5	1665</citation>
	<citation>1665	5	1665</citation>
	<citation>1665	5	1665</citation>
	<citation>1781	5	1665</citation>
	<citation>378	5	1665</citation>
	<citation>2746	5	1665</citation>
	<citation>631	5	1665</citation>
	<citation>799	5	1665</citation>
	<citation>1665	6	1665</citation>
	<citation>1739	6	1665</citation>
	<citation>2139	6	1665</citation>
	<citation>2545	6	1665</citation>
	<citation>2786	6	1665</citation>
	</citations>
	</document>
	<document id= '1664'>
	<title>An Algorithm for Deriving the Equations of Mathematical Physics by Symbolic Manipulation</title>
	<abstract>A method is described whereby a digital computer can be used to derive the equations of mathematical  physics in any curvilinear coordinate system requested by the user.  The effectiveness of the technique  is demonstrated by using it to derive the Navier-Stokes equations of fluid motion and the continuity  equation.  To derive these equations by this method, the user need know only the coordinate transformation  equations relating the curvilinear coordinates of interest to an orthogonal Cartesian triad. When this  program is used and the coordinate transformation equations are supplied as input, the computer will  derive the Navier-Stokes equations and the continuity equation.  The equations obtained will be relative  to the curvilinear coordinate system specified by the transformation equations used as input.  In this  paper the emphasis is on theoretical considerations and methodology rather than on programming details.   Results are presented for cylindrical polar and spherical polar coordinate systems.</abstract>
	<conference>CACM December, 1968</conference>
	<authors>
	<author>Howard, J. C.</author>
	<author>Tashjian, H.</author>
	</authors>
	<keywords>FORMAC, Navier-Strokes equations, continuity equation, tensor, tensor equation, curvilinear coordinate  systems, FORTRAN, symbolic manipulation</keywords>
	<version>3.21 3.25 3.29 4.12 4.29</version>
	<location>CA681202 JB February 21, 1978  2:02 PM</location>
	<citations>
	<citation>1543	4	1664</citation>
	<citation>1543	4	1664</citation>
	<citation>1664	4	1664</citation>
	<citation>1664	4	1664</citation>
	<citation>1664	4	1664</citation>
	<citation>1345	5	1664</citation>
	<citation>1543	5	1664</citation>
	<citation>1616	5	1664</citation>
	<citation>1664	5	1664</citation>
	<citation>1664	5	1664</citation>
	<citation>1664	5	1664</citation>
	</citations>
	</document>
	<document id= '1663'>
	<title>Generator of Random Numbers Satisfying the Poisson distribution [G5])</title>
	<conference>CACM December, 1968</conference>
	<authors>
	<author>Snow, R. H.</author>
	</authors>
	<keywords>Poisson distribution, random number generator, Monte Carlo</keywords>
	<version>5.12 5.5</version>
	<location>CA681203 JB February 21, 1978  1:45 PM</location>
	<citations>
	<citation>1663	4	1663</citation>
	<citation>1663	4	1663</citation>
	<citation>2195	4	1663</citation>
	<citation>2349	4	1663</citation>
	<citation>2679	4	1663</citation>
	<citation>1190	5	1663</citation>
	<citation>1648	5	1663</citation>
	<citation>1663	5	1663</citation>
	<citation>1663	5	1663</citation>
	<citation>1663	5	1663</citation>
	<citation>2123	5	1663</citation>
	<citation>1663	6	1663</citation>
	</citations>
	</document>
	<document id= '1662'>
	<title>Eigenvalues and Eigenvectors of a Real General Matrix [F2])</title>
	<conference>CACM December, 1968</conference>
	<authors>
	<author>Grad, J.</author>
	<author>Brebner, M. A.</author>
	</authors>
	<keywords>eigenvalues, eigenvectors, latent roots, latent vectors, Householder's method, QR algorithm, inverse  iteration</keywords>
	<version>5.14</version>
	<location>CA681204 JB February 21, 1978  1:42 PM</location>
	<citations>
	<citation>1662	5	1662</citation>
	<citation>1662	5	1662</citation>
	<citation>1662	5	1662</citation>
	<citation>1968	5	1662</citation>
	<citation>2099	5	1662</citation>
	<citation>2335	5	1662</citation>
	<citation>1662	6	1662</citation>
	<citation>1662	6	1662</citation>
	<citation>1662	6	1662</citation>
	<citation>1707	6	1662</citation>
	<citation>2099	6	1662</citation>
	</citations>
	</document>
	<document id= '1661'>
	<title>Multint (Algorithm 32 [D1])</title>
	<conference>CACM December, 1968</conference>
	<authors>
	<author>Kolbig, K. S.</author>
	</authors>
	<keywords>numerical integration, multidimensional integration, Gaussian integration</keywords>
	<version>5.16</version>
	<location>CA681205 JB February 21, 1978  1:41 PM</location>
	<citations>
	<citation>1661	5	1661</citation>
	<citation>1661	5	1661</citation>
	<citation>1661	5	1661</citation>
	</citations>
	</document>
	<document id= '1660'>
	<citations>
	<citation>1660	5	1660</citation>
	<citation>1660	5	1660</citation>
	<citation>1660	5	1660</citation>
	</citations>
	<title>Index By Subject To algorithms, 1960-1968</title>
	<conference>CACM December, 1968</conference>
	<location>CA681206 JB February 21, 1978  1:39 PM</location>
	</document>
	<document id= '1659'>
	<title>Computational Linguistics in a Ph.D. Computer Science Program</title>
	<abstract>This report contains recommendations for a course curriculum on computational linguistics in  a Ph.D. computer science program.  A classification of the subject areas contained in computational linguistics  is presented, and ten courses in these areas are described.  A basic bibliography in computational linguistics  is appended.</abstract>
	<conference>CACM December, 1968</conference>
	<authors>
	<author>Kuno, S.</author>
	<author>Oettinger, A. G.</author>
	</authors>
	<keywords>computational linguistics, mathematical linguistics, language and computer, language data processing,  computational linguistics course curriculum, computational linguistics graduate program, computational  linguistics bibliography, computer science curriculum</keywords>
	<version>1.52 3.42 3.43</version>
	<location>CA681207 JB February 21, 1978  1:37 PM</location>
	<citations>
	<citation>1350	4	1659</citation>
	<citation>1350	4	1659</citation>
	<citation>1399	4	1659</citation>
	<citation>1659	4	1659</citation>
	<citation>1659	4	1659</citation>
	<citation>1659	4	1659</citation>
	<citation>1659	4	1659</citation>
	<citation>1659	4	1659</citation>
	<citation>1768	4	1659</citation>
	<citation>1781	4	1659</citation>
	<citation>1856	4	1659</citation>
	<citation>1945	4	1659</citation>
	<citation>2050	4	1659</citation>
	<citation>2110	4	1659</citation>
	<citation>3094	4	1659</citation>
	<citation>1225	5	1659</citation>
	<citation>1265	5	1659</citation>
	<citation>1350	5	1659</citation>
	<citation>1659	5	1659</citation>
	<citation>1659	5	1659</citation>
	<citation>1659	5	1659</citation>
	<citation>1671	5	1659</citation>
	<citation>1697	5	1659</citation>
	<citation>1927	5	1659</citation>
	<citation>3003	5	1659</citation>
	<citation>1659	6	1659</citation>
	<citation>1659	6	1659</citation>
	<citation>1678	6	1659</citation>
	<citation>1771	6	1659</citation>
	<citation>1927	6	1659</citation>
	<citation>1945	6	1659</citation>
	<citation>2097	6	1659</citation>
	<citation>2147	6	1659</citation>
	<citation>2163	6	1659</citation>
	<citation>2187	6	1659</citation>
	<citation>2329	6	1659</citation>
	<citation>2345	6	1659</citation>
	<citation>2367	6	1659</citation>
	<citation>2407	6	1659</citation>
	<citation>2478	6	1659</citation>
	<citation>2479	6	1659</citation>
	<citation>2480	6	1659</citation>
	<citation>2538	6	1659</citation>
	</citations>
	</document>
	<document id= '1658'>
	<title>Analysis of Algorithms for the Zero-One Programming Problem</title>
	<abstract>This paper is concerned with a review and examination of several existing algorithms for the  zero-one programming problem.  Computational experience is summarized.  The machine time and storage  requirements of several of the algorithms are compared over several test problems of small and intermediate  size.  Computer experiments still provide little hope of solving problems with over 100 variables with  a reasonable amount of machine time.</abstract>
	<conference>CACM December, 1968</conference>
	<authors>
	<author>Gue, R. L.</author>
	<author>Liggett, J. C.</author>
	<author>Cain, K. C.</author>
	</authors>
	<keywords>operations research, optimization theory, integer programming, zero-one variables, algorithms</keywords>
	<version>5.39 5.41</version>
	<location>CA681208 JB February 21, 1978  1:31 PM</location>
	<citations>
	<citation>1658	4	1658</citation>
	<citation>1088	5	1658</citation>
	<citation>1658	5	1658</citation>
	<citation>1658	5	1658</citation>
	<citation>1658	5	1658</citation>
	<citation>2226	5	1658</citation>
	<citation>1658	6	1658</citation>
	<citation>1666	6	1658</citation>
	</citations>
	</document>
	<document id= '1657'>
	<title>Implementation of the SHARER2 Time-Sharing System</title>
	<abstract>A simple mechanism is described for the execution of part of a program with its own memory  protection.  This allows such a program to act as a suboperating system.  An improved version of the  SHARER time-sharing system using this feature is described.</abstract>
	<conference>CACM December, 1968</conference>
	<authors>
	<author>Harrison, M. C.</author>
	</authors>
	<keywords>operating system, memory protection, time-sharing, multiprogramming, monitor, submonitor, suboperating  system</keywords>
	<version>4.32 4.31 4.32</version>
	<location>CA681209 JB February 21, 1978  1:27 PM</location>
	<citations>
	<citation>1657	4	1657</citation>
	<citation>2080	4	1657</citation>
	<citation>2357	4	1657</citation>
	<citation>2536	4	1657</citation>
	<citation>1523	5	1657</citation>
	<citation>1657	5	1657</citation>
	<citation>1657	5	1657</citation>
	<citation>1657	5	1657</citation>
	</citations>
	</document>
	<document id= '1656'>
	<title>Procedures for the Standardization Process* (Proposed USA Standard)</title>
	<conference>CACM December, 1968</conference>
	<keywords>standardization, procedures, criteria</keywords>
	<version>2.3 4.2</version>
	<location>CA681210 JB February 21, 1978  12:21 PM</location>
	<citations>
	<citation>1656	5	1656</citation>
	<citation>1656	5	1656</citation>
	<citation>1656	5	1656</citation>
	</citations>
	</document>
	<document id= '1655'>
	<title>Code Extension Procedures for Information Interchange* (Proposed USA Standard)</title>
	<conference>CACM December, 1968</conference>
	<keywords>standard code, code, information interchange, characters, shift out, shift in, escape, data link  escape, control functions, standard procedures, code extension, code table, bit pattern</keywords>
	<version>1.0 2.0 2.43 3.20 3.24 3.50 3.51 3.52 3.53 3.54 3.55 3.56 3.57 3.70 3.71 3.72  3.73, 3.74, 3.75, 3.80, 3.81, 3.82, 3.83, 5.0, 5.1, 6.2, 6.21, 6.22</version>
	<location>CA681211 JB February 21, 1978  12:16 PM</location>
	<citations>
	<citation>1655	5	1655</citation>
	<citation>1655	5	1655</citation>
	<citation>1655	5	1655</citation>
	</citations>
	</document>
	<document id= '1654'>
	<title>A University's Educational Program in Computer Science</title>
	<abstract>After a review of the power of contemporary computers, computer science is defined in several  ways.  The objectives of computer science education are stated, and it is asserted that in a North American  university these will be achieved only through a computer science department.  The program at Stanford  University is reviewed as an example.  The appendices include syllabic of Ph.D. qualifying examinations  for Stanford's Computer Science Department.</abstract>
	<conference>CACM January, 1967</conference>
	<authors>
	<author>Forsythe, G. E.</author>
	</authors>
	<location>CA670101 JB March 1, 1978  9:13 AM</location>
	<citations>
	<citation>1413	4	1654</citation>
	<citation>1654	4	1654</citation>
	<citation>1771	4	1654</citation>
	<citation>2478	4	1654</citation>
	<citation>1205	5	1654</citation>
	<citation>1654	5	1654</citation>
	<citation>1654	5	1654</citation>
	<citation>1654	5	1654</citation>
	<citation>1720	5	1654</citation>
	<citation>1771	5	1654</citation>
	<citation>1205	6	1654</citation>
	<citation>1654	6	1654</citation>
	<citation>1654	6	1654</citation>
	<citation>1771	6	1654</citation>
	</citations>
	</document>
	<document id= '1653'>
	<title>System Performance Evaluation: Survey and Appraisal</title>
	<abstract>The state of the art of system performance evaluation is reviewed and evaluation goals and  problems are examined.  Throughput, turnaround, and availability are defined as fundamental measures  of performance; overhead and CPU speed are placed in perspective.  The appropriateness of instruction  mixes, kernels, simulators, and other tools is discussed, as well as pitfalls which may be encountered  when using them.  Analysis, simulation, and synthesis are presented as three levels of approach to evaluation,  requiring successively greater amounts of information.  The central role of measurement in performance  evaluation and in the development of evaluation methods is explored.</abstract>
	<conference>CACM January, 1967</conference>
	<authors>
	<author>Calingaert, P.</author>
	</authors>
	<location>CA670102 JB March 1, 1978  9:10 AM</location>
	<citations>
	<citation>1653	4	1653</citation>
	<citation>1653	4	1653</citation>
	<citation>1653	4	1653</citation>
	<citation>2387	4	1653</citation>
	<citation>2852	4	1653</citation>
	<citation>2989	4	1653</citation>
	<citation>963	5	1653</citation>
	<citation>1069	5	1653</citation>
	<citation>1417	5	1653</citation>
	<citation>1653	5	1653</citation>
	<citation>1653	5	1653</citation>
	<citation>1653	5	1653</citation>
	<citation>2151	5	1653</citation>
	<citation>2318	5	1653</citation>
	<citation>1653	6	1653</citation>
	<citation>1653	6	1653</citation>
	<citation>1747	6	1653</citation>
	<citation>1860	6	1653</citation>
	</citations>
	</document>
	<document id= '1652'>
	<title>A Code for Non-numeric Information Processing Applications in Online Systems</title>
	<abstract>A code has been specifically designed to simplify the internal information processing operations  within an online computer system with respect to non-numeric applications, and to maximize the transfer  rate of the information channel linking the system and the system user.  The code has direct application  to problems in area such as information retrieval, document classification, computer-aided teaching and  text editing.  This code, called IPC (Information Processing Code), is an 8-bit code set constructed  so that 7, 6, 5 and 4-bit subsets can be easily derived from the basic set.  The code set is organized  so that simple binary operations can distinguish between the numeric alphabetic, special symbol and control  character codes.  The number of usable characters within the basic set size may be expanded either by  use of escape codes included in the set, or by suitable interpretation of otherwise unassigned codes  on the basis of the requirements of local environments.</abstract>
	<conference>CACM January, 1967</conference>
	<authors>
	<author>Morenoff, E.</author>
	<author>McLean, J. B.</author>
	</authors>
	<location>CA670103 JB March 1, 1978  9:05 AM</location>
	<citations>
	<citation>1652	5	1652</citation>
	<citation>1652	5	1652</citation>
	<citation>1652	5	1652</citation>
	</citations>
	</document>
	<document id= '1651'>
	<title>An Interpretive Input Routine for Linear Programming</title>
	<abstract>In this descriptive article an input code is presented which greatly simplifies data input  to any linear programming solution routine, for subsequent use either as a pedagogical device or for  solving rather small LP problems.  This latter (limited) use derives not at all from inherent limitations  in the code itself, but from an efficiency evaluation: large LP problems would doubtless benefit from  an input system more suited for bulk data handling than the input code described.  From a user's standpoint,  input appears almost exactly as a textbook presentation of the LP problem (limited only by a keypunch's  inability to write subscripts, etc.).  The input interpreter scans column wise, thus no fixed format  data preparation is required.  The user may also, under very general requirements only, liberally use  editorial comments throughout the input deck as an aid in identification, e.g., of row constraints.   The article includes examples of input, output from a solution routine presently in use, and a skeleton  flowchart of the input interpreter.</abstract>
	<conference>CACM January, 1967</conference>
	<authors>
	<author>Aigner, D. J.</author>
	</authors>
	<location>CA670104 JB March 1, 1978  8:58 AM</location>
	<citations>
	<citation>1651	5	1651</citation>
	<citation>1651	5	1651</citation>
	<citation>1651	5	1651</citation>
	</citations>
	</document>
	<document id= '1650'>
	<title>A Unifying Computational Method for the Analysis of Complete Factorial Experiments</title>
	<abstract>A computational method which may be used for the calculation of sums of squares in the analysis  of variance of complete factorial experiments and in the computation of main effect or interaction means  is described.  The method is elucidated as unifying since one method can be used for a variety of purposes  each previously requiring different methods.  The programming advantages of such a method are obvious.   The following variants are discussed: (1) the standard analysis of variance; (2) analyses omitting certain  levels of one or more factors; (3) separate analyses for some levels of a factor or for combinations  of levels of more than one factor.  These are performed simultaneously; (4) the calculation of main effect  or interaction means.  The mean expects the data in standard order and it leaves the data in that order  so that many analyses of the same data can be performed without rearrangement.  The total sum of squares,  excluding a replication sum of squares, is partitioned into all polynomial partitions and their interactions  each with one degree of freedom.  This is so even if factors have unequally spaced factor levels.</abstract>
	<conference>CACM January, 1967</conference>
	<authors>
	<author>Cooper, B. E.</author>
	</authors>
	<location>CA670105 JB February 28, 1978  4:49 PM</location>
	<citations>
	<citation>1650	5	1650</citation>
	<citation>1650	5	1650</citation>
	<citation>1650	5	1650</citation>
	</citations>
	</document>
	<document id= '1649'>
	<title>Data Directed Input-Output in FORTRAN</title>
	<abstract>A statement which is similar to the NAMELIST statement of FORTRAN IV has been incorporated  in the FORTRAN 63 compiler.  The FORTRAN 63 implementation allows a greater flexibility and simplicity  than the FORTRAN IV feature.  The Hollerith names, the location, the mode and the dimensions of a variable  can be discovered by means of standard FORTRAN statements.  Methods of using this information are illustrated  in relation to general purpose data directed input and output routines; some other uses such as matrix  manipulation are discussed.</abstract>
	<conference>CACM January, 1967</conference>
	<authors>
	<author>Hassitt, A.</author>
	</authors>
	<location>CA670106 JB February 28, 1978  4:41 PM</location>
	<citations>
	<citation>1649	4	1649</citation>
	<citation>1053	5	1649</citation>
	<citation>1649	5	1649</citation>
	<citation>1649	5	1649</citation>
	<citation>1649	5	1649</citation>
	</citations>
	</document>
	<document id= '1648'>
	<citations>
	<citation>1648	5	1648</citation>
	<citation>1648	5	1648</citation>
	<citation>1648	5	1648</citation>
	<citation>1663	5	1648</citation>
	<citation>2349	5	1648</citation>
	<citation>1190	6	1648</citation>
	<citation>1648	6	1648</citation>
	<citation>1648	6	1648</citation>
	<citation>1716	6	1648</citation>
	<citation>1794	6	1648</citation>
	<citation>1894	6	1648</citation>
	<citation>2043	6	1648</citation>
	<citation>501	6	1648</citation>
	<citation>613	6	1648</citation>
	<citation>774	6	1648</citation>
	</citations>
	<title>Uniform Random (Algorithm 294 [G5])</title>
	<conference>CACM January, 1967</conference>
	<authors>
	<author>Strome, W. M.</author>
	</authors>
	<location>CA670107 JB February 28, 1978  4:37 PM</location>
	</document>
	<document id= '1647'>
	<title>WATFOR-The University of Waterloo FORTRAN IV Compiler</title>
	<abstract>WATFOR is an in-core, load-and-go compiler which has been implemented within the IBM 7040/44  operating system.  FORTRAN IV was selected as the source language in order to achieve maximum language  compatibility with other available compiling systems, in particular the IBM 7040/44 FORTRAN IV system.   The principal advantage of the WATFOR compiler is that it translates FORTRAN IV programs at speeds of  up to 100 statements per second.  Since the compiler resides core there is virtually no system overhead,  and hence large batches of "student" programs may be processed very efficiently.  The compiler also provides  extensive error diagnostics, during both the compilation and the execution phases of a program run.   This feature makes the system attractive to both learners and learned users alike.</abstract>
	<conference>CACM January, 1967</conference>
	<authors>
	<author>Shantz, P. W.</author>
	<author>German, R. A.</author>
	<author>Mitchell, J. G.</author>
	</authors>
	<location>CA670108 JB February 28, 1978  4:36 PM</location>
	<citations>
	<citation>267	4	1647</citation>
	<citation>1139	4	1647</citation>
	<citation>1141	4	1647</citation>
	<citation>1215	4	1647</citation>
	<citation>1223	4	1647</citation>
	<citation>1646	4	1647</citation>
	<citation>1647	4	1647</citation>
	<citation>1647	4	1647</citation>
	<citation>1781	4	1647</citation>
	<citation>1787	4	1647</citation>
	<citation>1792	4	1647</citation>
	<citation>364	4	1647</citation>
	<citation>405	4	1647</citation>
	<citation>438	4	1647</citation>
	<citation>763	4	1647</citation>
	<citation>1179	5	1647</citation>
	<citation>224	5	1647</citation>
	<citation>1646	5	1647</citation>
	<citation>1647	5	1647</citation>
	<citation>1647	5	1647</citation>
	<citation>1647	5	1647</citation>
	<citation>1728	5	1647</citation>
	<citation>830	6	1647</citation>
	<citation>987	6	1647</citation>
	<citation>1072	6	1647</citation>
	<citation>1179	6	1647</citation>
	<citation>1525	6	1647</citation>
	<citation>1647	6	1647</citation>
	<citation>1647	6	1647</citation>
	<citation>1785	6	1647</citation>
	<citation>680	6	1647</citation>
	</citations>
	</document>
	<document id= '1646'>
	<title>DITRAN-A Compiler Emphasizing Diagnostics</title>
	<abstract>DITRAN (Diagnostic FORTRAN) is an implementation of ASA Basic FORTRAN with rather extensive  error checking capabilities both at compilation time and during execution of a program.  The need for  improved diagnostic capabilities and some objectives to be met by any compiler are discussed.  Attention  is given to the design and implementation of DITRAN and the particular techniques employed to provide  the diagnostic features.  The handling of error messages by a general macro approach is described.  Special  features which provide teaching aids for use by instructors are noted.</abstract>
	<conference>CACM January, 1967</conference>
	<authors>
	<author>Moulton, P. G.</author>
	<author>Muller, M. E.</author>
	</authors>
	<location>CA670109 JB February 28, 1978  4:30 PM</location>
	<citations>
	<citation>1179	4	1646</citation>
	<citation>1225	4	1646</citation>
	<citation>1288	4	1646</citation>
	<citation>1350	4	1646</citation>
	<citation>1544	4	1646</citation>
	<citation>1613	4	1646</citation>
	<citation>1646	4	1646</citation>
	<citation>1646	4	1646</citation>
	<citation>1646	4	1646</citation>
	<citation>1646	4	1646</citation>
	<citation>1646	4	1646</citation>
	<citation>1646	4	1646</citation>
	<citation>1647	4	1646</citation>
	<citation>1728	4	1646</citation>
	<citation>1781	4	1646</citation>
	<citation>1900	4	1646</citation>
	<citation>1945	4	1646</citation>
	<citation>1955	4	1646</citation>
	<citation>2025	4	1646</citation>
	<citation>2111	4	1646</citation>
	<citation>2154	4	1646</citation>
	<citation>2365	4	1646</citation>
	<citation>2506	4	1646</citation>
	<citation>2534	4	1646</citation>
	<citation>2556	4	1646</citation>
	<citation>2650	4	1646</citation>
	<citation>2650	4	1646</citation>
	<citation>2698	4	1646</citation>
	<citation>2708	4	1646</citation>
	<citation>3060	4	1646</citation>
	<citation>3093	4	1646</citation>
	<citation>987	5	1646</citation>
	<citation>1072	5	1646</citation>
	<citation>1179	5	1646</citation>
	<citation>1646	5	1646</citation>
	<citation>1646	5	1646</citation>
	<citation>1646	5	1646</citation>
	<citation>1647	5	1646</citation>
	<citation>2887	5	1646</citation>
	<citation>680	5	1646</citation>
	<citation>830	5	1646</citation>
	<citation>1646	6	1646</citation>
	<citation>2111	6	1646</citation>
	</citations>
	</document>
	<document id= '1645'>
	<title>A Note on Computing Approximations to the Exponential Function</title>
	<abstract>Two methods are discussed which result in near minimax rational approximations to the exponential  function and at the same time retain the desirable property that the approximation for negative values  of the argument is the reciprocal of the approximation for corresponding positive values.  These methods  lead to approximations which are much superior to the commonly used convergents of the Gaussian continued  fraction for the exponential.  Coefficients and errors are given for the intervals [-.5*ln 2, .5*ln 2]  and [-ln 2, ln 2].</abstract>
	<conference>CACM January, 1967</conference>
	<authors>
	<author>Cody, W. J.</author>
	<author>Ralston, A.</author>
	</authors>
	<location>CA670110JB February 28, 1978  4:25 PM</location>
	<citations>
	<citation>1015	4	1645</citation>
	<citation>1346	4	1645</citation>
	<citation>1440	4	1645</citation>
	<citation>1645	4	1645</citation>
	<citation>951	4	1645</citation>
	<citation>1645	5	1645</citation>
	<citation>1645	5	1645</citation>
	<citation>1645	5	1645</citation>
	<citation>532	5	1645</citation>
	</citations>
	</document>
	<document id= '1644'>
	<title>On the Computation of Least Squares Polynomials</title>
	<abstract>Rounding error accumulated during digital computation of a least squares polynomial makes the  computed polynomial only an approximation to the true least square polynomial.  A simple method for adjust ing  the constant term of the computed polynomial to get a better approximation to the true least squares  polynomial is described.</abstract>
	<conference>CACM January, 1967</conference>
	<authors>
	<author>Goldberg, M.</author>
	</authors>
	<location>CA670111 JB February 28, 1978  4:24 PM</location>
	<citations>
	<citation>1644	5	1644</citation>
	<citation>1644	5	1644</citation>
	<citation>1644	5	1644</citation>
	</citations>
	</document>
	<document id= '1643'>
	<title>An Improvement to Iterative Methods of Polynomial Factorization</title>
	<abstract>Methods of polynomial factorization which find the zeros one at a time require the division  of the polynomial by the accepted factor.  It is shown how the accuracy of this division may be increased  by dividing in order of both ascending and descending powers of the variable and choosing a crossover  point which minimizes a very simply calculated error criterion.</abstract>
	<conference>CACM January, 1967</conference>
	<authors>
	<author>Bingham, J. A. C.</author>
	</authors>
	<location>CA670112 JB February 28, 1978  4:20 PM</location>
	<citations>
	<citation>1643	5	1643</citation>
	<citation>1643	5	1643</citation>
	<citation>1643	5	1643</citation>
	</citations>
	</document>
	<document id= '1642'>
	<title>Time Sharing on a Computer with a Small Memory</title>
	<abstract>Techniques to make time sharing attractive on a computer with a small central memory are presented.   "Small" is taken to mean that only one user program plus a monitor will fit into the memory at any time.   The techniques depend on having two levels of secondary storage: level 1, several times larger than  the main memory and quite fast; and level 2, many times larger and slower than level 1.</abstract>
	<conference>CACM February, 1967</conference>
	<authors>
	<author>Fisher, R. O.</author>
	<author>Shepard, C. D.</author>
	</authors>
	<location>CA670201 JB February 28, 1978  4:10 PM</location>
	<citations>
	<citation>1642	5	1642</citation>
	<citation>1642	5	1642</citation>
	<citation>1642	5	1642</citation>
	</citations>
	</document>
	<document id= '1641'>
	<title>A Use of Fast and Slow Memories in List-Processing Languages</title>
	<abstract>A scheme is described which permitting a substantial increase in memory space utilized to store  list-structured data.  It consists in reducing to one level a nonhomogeneous store composed of fast (core)  and slow (disk or drum) memories.  The space available in slow memory is divided into pages each containing  a given number of machine words.  The reduction to a one-level memory is performed by a program which  leaves the most often called pages in the fast memory.  When a new page from slow store is requested,  the page in core having the longest period of inactivity is transferred back to the slow store.  The  complete scheme has been implemented in connection with a LISP embedding into ALGOL, using an IBM 7044  with 32k of core memory and disks.  Gains in memory space were about 100-fold.  As often happens in programming  applications the price of the additional space is computer time.  Although the disks have an access time  10^4 times slower than core, tests indicate that the actual slow down varied from 3 to 10, depending  on the number of pages available in the fast store.</abstract>
	<conference>CACM February, 1967</conference>
	<authors>
	<author>Cohen, J.</author>
	</authors>
	<location>CA670202 JB February 28, 1978  4:06 PM</location>
	<citations>
	<citation>1626	5	1641</citation>
	<citation>1641	5	1641</citation>
	<citation>1641	5	1641</citation>
	<citation>1641	5	1641</citation>
	<citation>1708	5	1641</citation>
	<citation>1781	5	1641</citation>
	<citation>1860	5	1641</citation>
	<citation>2299	5	1641</citation>
	<citation>123	6	1641</citation>
	<citation>196	6	1641</citation>
	<citation>919	6	1641</citation>
	<citation>990	6	1641</citation>
	<citation>1007	6	1641</citation>
	<citation>1046	6	1641</citation>
	<citation>1131	6	1641</citation>
	<citation>1139	6	1641</citation>
	<citation>1140	6	1641</citation>
	<citation>1149	6	1641</citation>
	<citation>1198	6	1641</citation>
	<citation>1215	6	1641</citation>
	<citation>1223	6	1641</citation>
	<citation>1265	6	1641</citation>
	<citation>1303	6	1641</citation>
	<citation>1323	6	1641</citation>
	<citation>1358	6	1641</citation>
	<citation>1366	6	1641</citation>
	<citation>1366	6	1641</citation>
	<citation>1389	6	1641</citation>
	<citation>1421	6	1641</citation>
	<citation>1421	6	1641</citation>
	<citation>1460	6	1641</citation>
	<citation>1462	6	1641</citation>
	<citation>1463	6	1641</citation>
	<citation>1467	6	1641</citation>
	<citation>1468	6	1641</citation>
	<citation>1477	6	1641</citation>
	<citation>1491	6	1641</citation>
	<citation>1496	6	1641</citation>
	<citation>1496	6	1641</citation>
	<citation>1502	6	1641</citation>
	<citation>1531	6	1641</citation>
	<citation>1535	6	1641</citation>
	<citation>1565	6	1641</citation>
	<citation>1601	6	1641</citation>
	<citation>1602	6	1641</citation>
	<citation>1613	6	1641</citation>
	<citation>1614	6	1641</citation>
	<citation>1626	6	1641</citation>
	<citation>1626	6	1641</citation>
	<citation>1626	6	1641</citation>
	<citation>1641	6	1641</citation>
	<citation>1641	6	1641</citation>
	<citation>1641	6	1641</citation>
	<citation>1641	6	1641</citation>
	<citation>1641	6	1641</citation>
	<citation>1785	6	1641</citation>
	<citation>1786	6	1641</citation>
	<citation>1787	6	1641</citation>
	<citation>1788	6	1641</citation>
	<citation>205	6	1641</citation>
	<citation>224	6	1641</citation>
	<citation>249	6	1641</citation>
	<citation>288	6	1641</citation>
	<citation>316	6	1641</citation>
	<citation>378	6	1641</citation>
	<citation>381	6	1641</citation>
	<citation>398	6	1641</citation>
	<citation>11	6	1641</citation>
	<citation>404	6	1641</citation>
	<citation>410	6	1641</citation>
	<citation>463	6	1641</citation>
	<citation>464	6	1641</citation>
	<citation>483	6	1641</citation>
	<citation>3184	6	1641</citation>
	<citation>3184	6	1641</citation>
	<citation>3188	6	1641</citation>
	<citation>584	6	1641</citation>
	<citation>600	6	1641</citation>
	<citation>680	6	1641</citation>
	<citation>691	6	1641</citation>
	<citation>763	6	1641</citation>
	<citation>799	6	1641</citation>
	</citations>
	</document>
	<document id= '1640'>
	<citations>
	<citation>1640	5	1640</citation>
	<citation>1640	5	1640</citation>
	<citation>1640	5	1640</citation>
	</citations>
	<title>Generalized Least Squared Fit By Orthogonal Polynomials (Algorithm 296 [E2])</title>
	<conference>CACM February, 1967</conference>
	<authors>
	<author>Makinson, G. J.</author>
	</authors>
	<location>CA670203b JB March 23, 1978  4:13 PM</location>
	</document>
	<document id= '1639'>
	<citations>
	<citation>1639	4	1639</citation>
	<citation>1480	5	1639</citation>
	<citation>1639	5	1639</citation>
	<citation>1639	5	1639</citation>
	<citation>1639	5	1639</citation>
	<citation>2101	5	1639</citation>
	<citation>2102	5	1639</citation>
	<citation>1639	6	1639</citation>
	<citation>1639	6	1639</citation>
	</citations>
	<title>Exponential Curve Fit (Algorithm 295 [E2])</title>
	<conference>CACM February, 1967</conference>
	<authors>
	<author>Spath, H.</author>
	</authors>
	<location>CA670203a JB February 28, 1978  3:57 PM</location>
	</document>
	<document id= '1638'>
	<title>Sorting by Replacement Selecting</title>
	<abstract>In sorting by replacement selecting, the expected length of a sequence beginning with the i-th  element (i>1) is proved to be 2F, in accordance with a conjecture of E. H. Friend, where F is the number  of memory cells used.  The expected length of the j-th sequence is determined to be F times a j-th degree  polynomial in e, such that the value of this polynomial approaches 2 as j approaches infinity.  Recursive  formulas are obtained for both the mean and the standard deviation of the length of the j-th sequence.   The mathematical proofs of these results are based upon the assumption that n, the number of items to  be sorted, is infinite, but it is shown that the error due to the finiteness of n approaches zero rapidly  as n increases.</abstract>
	<conference>CACM February, 1967</conference>
	<authors>
	<author>Gasner, B. J.</author>
	</authors>
	<location>CA670204 JB February 28, 1978  3:56 PM</location>
	<citations>
	<citation>1638	4	1638</citation>
	<citation>2176	4	1638</citation>
	<citation>2272	4	1638</citation>
	<citation>1638	5	1638</citation>
	<citation>1638	5	1638</citation>
	<citation>1638	5	1638</citation>
	<citation>1867	5	1638</citation>
	<citation>2272	5	1638</citation>
	<citation>677	5	1638</citation>
	<citation>1638	6	1638</citation>
	<citation>1638	6	1638</citation>
	<citation>677	6	1638</citation>
	</citations>
	</document>
	<document id= '1637'>
	<title>Problems in the Statistical Analysis of Simulation Experiments: The Comparison of Means and the  Length of Sample Records</title>
	<abstract>Research is continued into statistical analysis of simulation experiments containing autocorrelated  time series.  It is shown how to estimate the lengths of sample records needed to use certain large sample  results in measuring stability.  Analogies between autocorrelated data and independent observations are  described.  A way to test the difference of the mean of two experiments is suggested.  It is shown how  the variance of the sample mean relates to the spectrum of the generating process, and estimation of  the quantities of interest is described. The results expand the possibilities of statistical spectral  analysis as applied to simulation experiments.</abstract>
	<conference>CACM February, 1967</conference>
	<authors>
	<author>Fishman, G. S.</author>
	</authors>
	<location>CA670205 JB February 28, 1978  3:34 PM</location>
	<citations>
	<citation>1637	5	1637</citation>
	<citation>1637	5	1637</citation>
	<citation>1637	5	1637</citation>
	</citations>
	</document>
	<document id= '1636'>
	<title>Invariant Imbeding and the Numerical Integration of Boundary-Value Problems for Unstable Linear  Systems of Ordinary Differential Equations</title>
	<abstract>In such diverse areas as radiative transfer in planetary atmospheres and optimal guidance and  control, two-point boundary-value problems for unstable systems arise, greatly complicating the numerical  solution.  An invariant imbeding technique is presented which is useful in overcoming these frequently  encountered instabilities, and the results of some numerical experiments are given.</abstract>
	<conference>CACM February, 1967</conference>
	<authors>
	<author>Belman, R. E.</author>
	<author>Kagiwada, H. H.</author>
	<author>Kalaba, R. E.</author>
	</authors>
	<location>CA670206 JB February 28, 1978  3:28 PM</location>
	<citations>
	<citation>1636	5	1636</citation>
	<citation>1636	5	1636</citation>
	<citation>1636	5	1636</citation>
	<citation>2427	5	1636</citation>
	<citation>1581	6	1636</citation>
	<citation>1636	6	1636</citation>
	</citations>
	</document>
	<document id= '1635'>
	<title>Parameters for Pseudo Runge-Kutta Methods</title>
	<abstract>The object of this note is to present a choice of the free parameters in the third- and fourth-order  pseudo Runge-Kutta methods involving two points. This choice of parameters causes a bound on the principal  part of the truncation error term to be near the minimum for the fourth-order method and at the minimum  for the third-order method.</abstract>
	<conference>CACM February, 1967</conference>
	<authors>
	<author>Byrne, G. D.</author>
	</authors>
	<location>CA670207 JB February 28, 1978  3:20 PM</location>
	<citations>
	<citation>1635	5	1635</citation>
	<citation>1635	5	1635</citation>
	<citation>1635	5	1635</citation>
	</citations>
	</document>
	<document id= '1634'>
	<title>27 bits Are Not Enough for 8-digit Accuracy</title>
	<abstract>From the inequality 10^8 &amp;lt; 2^27, we are likely to conclude that we can represent 8-digit decimal  floating-point numbers accurately by 27-bit floating-point numbers.  However, we need 28 significant  bits to represent some 8-digit numbers accurately.  In general, we can show that if 10^p &amp;lt; 2^q-1, then  q significant bits are always enough for p-digit decimal accuracy.  Finally, we can define a compact  27-bit floating-point representation that will give 28 significant bits, for numbers of practical importance.</abstract>
	<conference>CACM February, 1967</conference>
	<authors>
	<author>Goldberg, I. B.</author>
	</authors>
	<location>CA670208 JB February 28, 1978  2:38 PM</location>
	<citations>
	<citation>1634	5	1634</citation>
	<citation>1634	5	1634</citation>
	<citation>1634	5	1634</citation>
	<citation>1783	5	1634</citation>
	<citation>1843	5	1634</citation>
	<citation>1634	6	1634</citation>
	<citation>1634	6	1634</citation>
	<citation>1783	6	1634</citation>
	</citations>
	</document>
	<document id= '1633'>
	<title>A Modified Newton Method for Polynomials</title>
	<abstract>A modified Newton method for polynomials is discussed.  It is assumed one has approximations  for all the roots of the polynomial.  Three variations are described.  If the roots are simple, it is  shown that under appropriate conditions, two of the variations are cubically convergent.</abstract>
	<conference>CACM February, 1967</conference>
	<authors>
	<author>Ehrlich, L. W.</author>
	</authors>
	<location>CA670209 JB February 28, 1978  2:33 PM</location>
	<citations>
	<citation>1633	4	1633</citation>
	<citation>1452	5	1633</citation>
	<citation>1633	5	1633</citation>
	<citation>1633	5	1633</citation>
	<citation>1633	5	1633</citation>
	</citations>
	</document>
	<document id= '1632'>
	<title>Programming the Tabular Method of Analysis of Variance for Factorial Experiments</title>
	<abstract>The ease of programming the tabular method of analysis of variance for complete factorial experiments  in a FORTRAN language is demonstrated.  In this method, the total sum of squares is partitioned into  orthogonal single degree of freedom sums of squares; main effect and interaction sums of squares are  then obtained by appropriate pooling of the single degree of freedom sums of squares.  Program segments  to accomplish the procedure are presented.  Modifications to handle hierarchical designs and replicated  experiments are mentioned. A FORTRAN II program for an IBM 7094 is described briefly.</abstract>
	<conference>CACM February, 1967</conference>
	<authors>
	<author>Carmer, S. G.</author>
	</authors>
	<location>CA670210 JB February 28, 1978  2:33 PM</location>
	<citations>
	<citation>1632	5	1632</citation>
	<citation>1632	5	1632</citation>
	<citation>1632	5	1632</citation>
	</citations>
	</document>
	<document id= '1631'>
	<title>Testing a Random Number Generator</title>
	<abstract>The first 1,000,000 numbers produced by the random number generator used in the General Purpose  Systems Simulator (GPSS) were subjected to statistical tests.  The tests are described and the results  of the tests are presented.  These particular tests indicate that the numbers are satisfactory.  It is  recommended that suitable tests be applied to all random numbers used in computer simulations.</abstract>
	<conference>CACM February, 1967</conference>
	<authors>
	<author>Gorenstein, S.</author>
	</authors>
	<location>CA670211 JB February 28, 1978  2:10 PM</location>
	<citations>
	<citation>1631	5	1631</citation>
	<citation>1631	5	1631</citation>
	<citation>1631	5	1631</citation>
	<citation>1691	5	1631</citation>
	<citation>1293	6	1631</citation>
	<citation>1420	6	1631</citation>
	<citation>1631	6	1631</citation>
	</citations>
	</document>
	<document id= '1630'>
	<title>Computer Representation of Planar Regions by Their Skeletons</title>
	<abstract>Any region can be regarded as a union of maximal neighborhoods of its points, and can be specified  by the centers and radii of these neighborhoods; this set is a sort of"skeleton" of the region.  The  storage required to represent a region in this way is comparable to that required when it is represented  by encoding its boundary.  Moreover, the skeleton representation seems to have advantages when it is  necessary to determine repeatedly whether points are inside or outside the region, or to perform set-theoretic  operations on regions.</abstract>
	<conference>CACM February, 1967</conference>
	<authors>
	<author>Pfaltz, J. L.</author>
	<author>Rosenfeld, A.</author>
	</authors>
	<location>CA670212 JB February 28, 1978  2:07 PM</location>
	<citations>
	<citation>1630	4	1630</citation>
	<citation>2547	4	1630</citation>
	<citation>2987	4	1630</citation>
	<citation>3165	4	1630</citation>
	<citation>1326	5	1630</citation>
	<citation>1630	5	1630</citation>
	<citation>1630	5	1630</citation>
	<citation>1630	5	1630</citation>
	<citation>2987	5	1630</citation>
	<citation>1326	6	1630</citation>
	<citation>1630	6	1630</citation>
	<citation>2125	6	1630</citation>
	<citation>2547	6	1630</citation>
	<citation>2633	6	1630</citation>
	<citation>421	6	1630</citation>
	<citation>524	6	1630</citation>
	</citations>
	</document>
	<document id= '1629'>
	<title>Stat-Pack: A Biostatistical Programming Package</title>
	<abstract>A package of FORTRAN statistical programs for use on almost any small to medium size (40k characters  or 8k words) for which a FORTRAN II compiler exists is described and its availability is announced.   The major design criteria of ease of use, ease of modification, flexibility of input and detail of output  are described.</abstract>
	<conference>CACM February, 1967</conference>
	<authors>
	<author>Shannon, S.</author>
	<author>Henschke, C.</author>
	</authors>
	<location>CA670213 JB February 28,1978  1:57 PM</location>
	<citations>
	<citation>1629	5	1629</citation>
	<citation>1629	5	1629</citation>
	<citation>1629	5	1629</citation>
	</citations>
	</document>
	<document id= '1628'>
	<title>The Emergence of a Profession</title>
	<abstract>Computer programming deals with an enormous variety of activities and is carried on by people  with a great variety of backgrounds.  It seems clear that part but not all of this activity is evolving  toward a distinct professional field, but that the scope of this emerging profession, and some of its  economic, social, and educational characteristics are as yet by no means well defined.  In this paper,  these issues are examined and some opinions about them are expressed.</abstract>
	<conference>CACM March, 1967</conference>
	<authors>
	<author>Orden, A.</author>
	</authors>
	<location>CA670301 JB February 28, 1978  1:47 PM</location>
	<citations>
	<citation>1628	5	1628</citation>
	<citation>1628	5	1628</citation>
	<citation>1628	5	1628</citation>
	<citation>1770	5	1628</citation>
	<citation>1628	6	1628</citation>
	</citations>
	</document>
	<document id= '1627'>
	<title>Application of Level Changing to a Multilevel Storage Organization</title>
	<abstract>A technique for organizing the devices of a computer storage system is described.  This technique,  called the multilevel store, provides a means for economically satisfying the requirements for very large  storage capacities of certain data management and information retrieval systems.  The concept of level  changing is introduced and its application to the multilevel store is discussed.  A possible means for  physically organizing the information for efficient use of the multilevel store is presented.</abstract>
	<conference>CACM March, 1967</conference>
	<authors>
	<author>Morenoff, E.</author>
	<author>McLean, J. B.</author>
	</authors>
	<location>CA670302 JB February 28, 1978  1:43 PM</location>
	<citations>
	<citation>1627	5	1627</citation>
	<citation>1627	5	1627</citation>
	<citation>1627	5	1627</citation>
	</citations>
	</document>
	<document id= '1626'>
	<title>Structure of a LISP System Using Two-Level Storage</title>
	<abstract>In an ideal list-processing system there would be enough core memory to contain all the data  and programs.  Described in this paper are a number of techniques that have been used to build a LISP  system utilizing a drum for its principal storage medium,  with a surprisingly low time penalty for use  of this slow storage device.  The techniques include careful segmentation of system programs, allocation  of virtual memory to allow address arithmetic for type determination, and a special algorithm for building  reasonably linearized lists.  A scheme for binding variables is described which is good in this environment  and allows for complete compatibility between compiled and interpreted programs with no special declarations.</abstract>
	<conference>CACM March, 1967</conference>
	<authors>
	<author>Bobrow, D. G.</author>
	<author>Murphy, D. L.</author>
	</authors>
	<location>CA670303 JB February 28, 1978  1:39 PM</location>
	<citations>
	<citation>1626	4	1626</citation>
	<citation>1708	4	1626</citation>
	<citation>1781	4	1626</citation>
	<citation>1860	4	1626</citation>
	<citation>2299	4	1626</citation>
	<citation>1626	5	1626</citation>
	<citation>1626	5	1626</citation>
	<citation>1626	5	1626</citation>
	<citation>1641	5	1626</citation>
	<citation>1708	5	1626</citation>
	<citation>1781	5	1626</citation>
	<citation>1826	5	1626</citation>
	<citation>1860	5	1626</citation>
	<citation>2156	5	1626</citation>
	<citation>2168	5	1626</citation>
	<citation>2249	5	1626</citation>
	<citation>2314	5	1626</citation>
	<citation>2719	5	1626</citation>
	<citation>2736	5	1626</citation>
	<citation>2833	5	1626</citation>
	<citation>123	6	1626</citation>
	<citation>196	6	1626</citation>
	<citation>919	6	1626</citation>
	<citation>990	6	1626</citation>
	<citation>1007	6	1626</citation>
	<citation>1046	6	1626</citation>
	<citation>1098	6	1626</citation>
	<citation>1131	6	1626</citation>
	<citation>1139	6	1626</citation>
	<citation>1140	6	1626</citation>
	<citation>1149	6	1626</citation>
	<citation>1198	6	1626</citation>
	<citation>1215	6	1626</citation>
	<citation>1223	6	1626</citation>
	<citation>1265	6	1626</citation>
	<citation>1303	6	1626</citation>
	<citation>1323	6	1626</citation>
	<citation>1358	6	1626</citation>
	<citation>1366	6	1626</citation>
	<citation>1366	6	1626</citation>
	<citation>1389	6	1626</citation>
	<citation>1421	6	1626</citation>
	<citation>1421	6	1626</citation>
	<citation>1460	6	1626</citation>
	<citation>1462	6	1626</citation>
	<citation>1463	6	1626</citation>
	<citation>1467	6	1626</citation>
	<citation>1468	6	1626</citation>
	<citation>1477	6	1626</citation>
	<citation>1491	6	1626</citation>
	<citation>1496	6	1626</citation>
	<citation>1496	6	1626</citation>
	<citation>1531	6	1626</citation>
	<citation>1535	6	1626</citation>
	<citation>1565	6	1626</citation>
	<citation>1601	6	1626</citation>
	<citation>1602	6	1626</citation>
	<citation>1613	6	1626</citation>
	<citation>1614	6	1626</citation>
	<citation>1626	6	1626</citation>
	<citation>1626	6	1626</citation>
	<citation>1626	6	1626</citation>
	<citation>1626	6	1626</citation>
	<citation>1626	6	1626</citation>
	<citation>1626	6	1626</citation>
	<citation>1626	6	1626</citation>
	<citation>1626	6	1626</citation>
	<citation>1626	6	1626</citation>
	<citation>1626	6	1626</citation>
	<citation>1626	6	1626</citation>
	<citation>1641	6	1626</citation>
	<citation>1641	6	1626</citation>
	<citation>1641	6	1626</citation>
	<citation>1708	6	1626</citation>
	<citation>1785	6	1626</citation>
	<citation>1786	6	1626</citation>
	<citation>1787	6	1626</citation>
	<citation>1788	6	1626</citation>
	<citation>205	6	1626</citation>
	<citation>1826	6	1626</citation>
	<citation>1826	6	1626</citation>
	<citation>1826	6	1626</citation>
	<citation>1826	6	1626</citation>
	<citation>210	6	1626</citation>
	<citation>210	6	1626</citation>
	<citation>210	6	1626</citation>
	<citation>224	6	1626</citation>
	<citation>1853	6	1626</citation>
	<citation>1853	6	1626</citation>
	<citation>249	6	1626</citation>
	<citation>1878	6	1626</citation>
	<citation>288	6	1626</citation>
	<citation>1972	6	1626</citation>
	<citation>1972	6	1626</citation>
	<citation>316	6	1626</citation>
	<citation>378	6	1626</citation>
	<citation>381	6	1626</citation>
	<citation>398	6	1626</citation>
	<citation>2082	6	1626</citation>
	<citation>11	6	1626</citation>
	<citation>2148	6	1626</citation>
	<citation>2151	6	1626</citation>
	<citation>2167	6	1626</citation>
	<citation>2210	6	1626</citation>
	<citation>2645	6	1626</citation>
	<citation>2657	6	1626</citation>
	<citation>2736	6	1626</citation>
	<citation>404	6	1626</citation>
	<citation>410	6	1626</citation>
	<citation>463	6	1626</citation>
	<citation>464	6	1626</citation>
	<citation>483	6	1626</citation>
	<citation>3184	6	1626</citation>
	<citation>3184	6	1626</citation>
	<citation>3188	6	1626</citation>
	<citation>584	6	1626</citation>
	<citation>600	6	1626</citation>
	<citation>680	6	1626</citation>
	<citation>691	6	1626</citation>
	<citation>731	6	1626</citation>
	<citation>763	6	1626</citation>
	<citation>799	6	1626</citation>
	</citations>
	</document>
	<document id= '1625'>
	<title>On the Automatic Simplification of Source-Language Programs</title>
	<abstract>Methods of simplification that can be applied automatically to programs written in an ALGOL-like  language are discussed.  The simplifications are based on the form of the program and the knowledge obtained  by a processor, without any understanding of what the program is supposed to do.  These methods have  been implemented in a processor called SURE that accepts a program written in JOVIAL and outputs an equivalent  JOVIAL program that may be shorter and may be executed faster than the original.  SURE is described,  some of the problems encountered in automatic improvement at the source-language level are discussed,  and further types of automatic program improvement are suggested.</abstract>
	<conference>CACM March, 1967</conference>
	<authors>
	<author>Clark, E. R.</author>
	</authors>
	<location>CA670304 JB February 28, 1978  1:33 PM</location>
	<citations>
	<citation>1084	4	1625</citation>
	<citation>1379	4	1625</citation>
	<citation>1625	4	1625</citation>
	<citation>1625	4	1625</citation>
	<citation>1807	4	1625</citation>
	<citation>1945	4	1625</citation>
	<citation>1947	4	1625</citation>
	<citation>1248	5	1625</citation>
	<citation>1625	5	1625</citation>
	<citation>1625	5	1625</citation>
	<citation>1625	5	1625</citation>
	<citation>669	5	1625</citation>
	</citations>
	</document>
	<document id= '1624'>
	<title>Automatic Dimensioning</title>
	<abstract>Examples of algorithm that will accomplish automatic storage reservation without the need for  explicit array declarations are described.</abstract>
	<conference>CACM March, 1967</conference>
	<authors>
	<author>Klerer, M.</author>
	<author>May, J.</author>
	</authors>
	<location>CA670305 JB February 28, 1978  1:28 PM</location>
	<citations>
	<citation>1396	4	1624</citation>
	<citation>1624	4	1624</citation>
	<citation>1083	5	1624</citation>
	<citation>1624	5	1624</citation>
	<citation>1624	5	1624</citation>
	<citation>1624	5	1624</citation>
	</citations>
	</document>
	<document id= '1623'>
	<title>An Application of FORMAC</title>
	<abstract>A nonlinear circuit analysis problem is stated and the way in which it was solved using FORMAC  is indicated.  The solution of the problem using FORMAC was notable since several other methods that  were tried failed.  The problem is straightforward (although untenable by hand) but nevertheless involved  an elaborate use of the FORMAC language.  The program was fairly large and utilized practically every  command.  In particular, it made extensive use of the PART command.  Several tricks were necessary in  order to circumvent some of the shortcomings of the FORMAC system.  This paper is more concerned with  the use of programming techniques in FORMAC than with the actual engineering problem, although readers  may be interested in the problem because it is stated in a general (mathematical) sense and could be  of interest in areas other than circuit analysis.</abstract>
	<conference>CACM March, 1967</conference>
	<authors>
	<author>Neidleman, L. D.</author>
	</authors>
	<location>CA670306 JB February 28, 1978  1:27 PM</location>
	<citations>
	<citation>1623	5	1623</citation>
	<citation>1623	5	1623</citation>
	<citation>1623	5	1623</citation>
	</citations>
	</document>
	<document id= '1622'>
	<title>An Efficient Procedure for the Generation of Closed Subsets</title>
	<abstract>An efficient algorithm is described for generating subsets of a set S which satisfy constraints  of the form: "If s(i) is a member of the subset, then s(j) must also be a member of the subset."  The  algorithm has been programmed in the WISP language and successfully run on the IBM 7094 in connection  with a routine to detect feedback in multidimensional iterative networks.</abstract>
	<conference>CACM March, 1967</conference>
	<authors>
	<author>Waite, W. M.</author>
	</authors>
	<location>CA670307 JB February 28, 1978  1:18 PM</location>
	<citations>
	<citation>1622	5	1622</citation>
	<citation>1622	5	1622</citation>
	<citation>1622	5	1622</citation>
	</citations>
	</document>
	<document id= '1621'>
	<title>Computer Typesetting of ALGOL</title>
	<abstract>An application of computer-aided typesetting is introduced.  A working method is described  for publishing ALGOL by computerized translation from Hardware into Reference representation, computerized  planning of typographical lay-out and computerized control of a typesetting machine.  The point is made  that experts in science, technology, and programming are guaranteed a correct ALGOL documentation without  spending valuable time and power on typographic considerations and proofreading.</abstract>
	<conference>CACM March, 1967</conference>
	<authors>
	<author>Sydow, L. V.</author>
	</authors>
	<location>CA670308 JB February 28, 1978  1:12 PMB</location>
	<citations>
	<citation>1621	5	1621</citation>
	<citation>1621	5	1621</citation>
	<citation>1621	5	1621</citation>
	</citations>
	</document>
	<document id= '1620'>
	<title>Methods of Evaluating Polynomial Approximations in Function Evaluation Routines</title>
	<abstract>The method of nested multiplication is commonly used in function evaluation routines to evaluate  approximation polynomials.  New polynomial evaluation methods have been developed in recent years which  require fewer multiplications than nested multiplication and may therefore be preferable for use in function  evaluation routines.  Although some of these methods do not appear to be practically useful because of  rounding-error difficulties, several methods of evaluating low-degree polynomials have been found to  be satisfactory.  Three such methods are described and illustrated.</abstract>
	<conference>CACM March, 1967</conference>
	<authors>
	<author>File, C. T.</author>
	</authors>
	<location>CA670309 JB February 28, 1978  1:08 PM</location>
	<citations>
	<citation>1620	4	1620</citation>
	<citation>1620	4	1620</citation>
	<citation>819	4	1620</citation>
	<citation>1620	5	1620</citation>
	<citation>1620	5	1620</citation>
	<citation>1620	5	1620</citation>
	<citation>436	5	1620</citation>
	<citation>819	5	1620</citation>
	</citations>
	</document>
	<document id= '1619'>
	<title>Error-Free Methods for Statistical Computations</title>
	<abstract>Neely has discussed computational error generated by some algorithms used to compute various  statistics.  In the present paper methods are described which are error-free, simple in concept, and  usually less costly in machine time than those mentioned by Neely.</abstract>
	<conference>CACM March, 1967</conference>
	<authors>
	<author>Rodden, B. E.</author>
	</authors>
	<location>CA670310 JB February 28, 1978  1:02 PM</location>
	<citations>
	<citation>1619	4	1619</citation>
	<citation>3166	4	1619</citation>
	<citation>1411	5	1619</citation>
	<citation>1619	5	1619</citation>
	<citation>1619	5	1619</citation>
	<citation>1619	5	1619</citation>
	</citations>
	</document>
	<document id= '1618'>
	<citations>
	<citation>1618	5	1618</citation>
	<citation>1618	5	1618</citation>
	<citation>1618	5	1618</citation>
	</citations>
	<title>Determination of the Square-Root of a Positive Definite Matrix (Algorithm 298 [F1])</title>
	<conference>CACM March, 1967</conference>
	<authors>
	<author>Spath, H.</author>
	</authors>
	<location>CA670311b JB March 23, 1978  4:09 PM</location>
	</document>
	<document id= '1617'>
	<citations>
	<citation>1617	5	1617</citation>
	<citation>1617	5	1617</citation>
	<citation>1617	5	1617</citation>
	</citations>
	<title>Eigenvalues and Eigenvectors of the Symmetric System (Algorithm 297 [F2])</title>
	<conference>CACM March, 1967</conference>
	<authors>
	<author>Boothroyd, J.</author>
	</authors>
	<location>CA670311a JB February 28, 1978  12:59 PM</location>
	</document>
	<document id= '1616'>
	<title>Tensor Calculations on Computer: Appendix</title>
	<abstract>In the main text of the paper [Comm. ACM 9, 12 (Dec. 196), 864], a FORMAC program was discussed  which is capable of calculating various quantities of interest in tensor calculus.  This Appendix is  intended as an example of the program output.  Chrisoffel symbols calculated for 12 basic orthogonal  coordinate systems are listed.</abstract>
	<conference>CACM March, 1967</conference>
	<authors>
	<author>Walton, J. J.</author>
	</authors>
	<location>CA670312 JB February 28, 1978  12:58 PM</location>
	<citations>
	<citation>1543	5	1616</citation>
	<citation>1616	5	1616</citation>
	<citation>1616	5	1616</citation>
	<citation>1616	5	1616</citation>
	<citation>1664	5	1616</citation>
	<citation>1345	6	1616</citation>
	<citation>1345	6	1616</citation>
	<citation>1543	6	1616</citation>
	<citation>1616	6	1616</citation>
	<citation>1616	6	1616</citation>
	</citations>
	</document>
	<document id= '1615'>
	<title>An Algorithm for Generating Root Locus Diagrams</title>
	<abstract>A technique for using a digital computer to draw both ordinary and time-lag root locus diagrams  is described.  Ordinary diagrams are drawn much faster and more accurately than ever before.  Time-lag  diagrams, which had been impossible to obtain, are drawn with the same speed and accuracy as ordinary  diagrams.</abstract>
	<conference>CACM March, 1967</conference>
	<authors>
	<author>Krall, A. M.</author>
	<author>Fornaro, R.</author>
	</authors>
	<location>CA670313 JB February 28, 1978  12:57 PM</location>
	<citations>
	<citation>1615	5	1615</citation>
	<citation>1615	5	1615</citation>
	<citation>1615	5	1615</citation>
	</citations>
	</document>
	<document id= '1614'>
	<title>A Proposal for Definitions in ALGOL</title>
	<abstract>An extension to ALGOL is proposed for adding new data types and operators to the language.   Definitions may occur in any block heading and terminate with the block.  They are an integral part  of the program and are not fixed in the language.  Even the behavior of existing operators may be redefined.   The processing of text containing defined contexts features a "replacement rule" that eliminates unnecessary  iterations and temporary storage.  Examples of definition sets are given for real and complex matrices,  complex numbers, file processing, and list manipulation.</abstract>
	<conference>CACM April, 1967</conference>
	<authors>
	<author>Galler, B. A.</author>
	<author>Perlis, A. J.</author>
	</authors>
	<location>CA670401 JB February 28, 1978  11:43 AM</location>
	<citations>
	<citation>1086	4	1614</citation>
	<citation>1132	4	1614</citation>
	<citation>1234	4	1614</citation>
	<citation>1263	4	1614</citation>
	<citation>1265	4	1614</citation>
	<citation>1270	4	1614</citation>
	<citation>1323	4	1614</citation>
	<citation>1358	4	1614</citation>
	<citation>1379	4	1614</citation>
	<citation>1380	4	1614</citation>
	<citation>1453	4	1614</citation>
	<citation>1464	4	1614</citation>
	<citation>1484	4	1614</citation>
	<citation>1491	4	1614</citation>
	<citation>1498	4	1614</citation>
	<citation>1613	4	1614</citation>
	<citation>1614	4	1614</citation>
	<citation>1614	4	1614</citation>
	<citation>1781	4	1614</citation>
	<citation>1825	4	1614</citation>
	<citation>1860	4	1614</citation>
	<citation>2083	4	1614</citation>
	<citation>2178	4	1614</citation>
	<citation>2179	4	1614</citation>
	<citation>2252	4	1614</citation>
	<citation>2253	4	1614</citation>
	<citation>2325	4	1614</citation>
	<citation>2341	4	1614</citation>
	<citation>2546	4	1614</citation>
	<citation>2557	4	1614</citation>
	<citation>2645	4	1614</citation>
	<citation>2652	4	1614</citation>
	<citation>2684	4	1614</citation>
	<citation>2842	4	1614</citation>
	<citation>2929	4	1614</citation>
	<citation>2934	4	1614</citation>
	<citation>3069	4	1614</citation>
	<citation>669	4	1614</citation>
	<citation>679	4	1614</citation>
	<citation>691	4	1614</citation>
	<citation>761	4	1614</citation>
	<citation>949	4	1614</citation>
	<citation>989	4	1614</citation>
	<citation>1614	5	1614</citation>
	<citation>1614	5	1614</citation>
	<citation>1614	5	1614</citation>
	<citation>1693	5	1614</citation>
	<citation>1781	5	1614</citation>
	<citation>1824	5	1614</citation>
	<citation>1861	5	1614</citation>
	<citation>2126	5	1614</citation>
	<citation>437	5	1614</citation>
	<citation>3184	5	1614</citation>
	<citation>823	6	1614</citation>
	<citation>123	6	1614</citation>
	<citation>196	6	1614</citation>
	<citation>196	6	1614</citation>
	<citation>919	6	1614</citation>
	<citation>990	6	1614</citation>
	<citation>1007	6	1614</citation>
	<citation>1046	6	1614</citation>
	<citation>1131	6	1614</citation>
	<citation>1139	6	1614</citation>
	<citation>1140	6	1614</citation>
	<citation>1149	6	1614</citation>
	<citation>1198	6	1614</citation>
	<citation>1215	6	1614</citation>
	<citation>1223	6	1614</citation>
	<citation>1265	6	1614</citation>
	<citation>1303	6	1614</citation>
	<citation>1323	6	1614</citation>
	<citation>1358	6	1614</citation>
	<citation>1358	6	1614</citation>
	<citation>1366	6	1614</citation>
	<citation>1421	6	1614</citation>
	<citation>1421	6	1614</citation>
	<citation>1460	6	1614</citation>
	<citation>1462	6	1614</citation>
	<citation>1463	6	1614</citation>
	<citation>1467	6	1614</citation>
	<citation>1468	6	1614</citation>
	<citation>1477	6	1614</citation>
	<citation>1477	6	1614</citation>
	<citation>1491	6	1614</citation>
	<citation>1491	6	1614</citation>
	<citation>1496	6	1614</citation>
	<citation>1531	6	1614</citation>
	<citation>1535	6	1614</citation>
	<citation>1565	6	1614</citation>
	<citation>1601	6	1614</citation>
	<citation>1602	6	1614</citation>
	<citation>1613	6	1614</citation>
	<citation>1614	6	1614</citation>
	<citation>1614	6	1614</citation>
	<citation>1614	6	1614</citation>
	<citation>1614	6	1614</citation>
	<citation>1614	6	1614</citation>
	<citation>1626	6	1614</citation>
	<citation>1641	6	1614</citation>
	<citation>1693	6	1614</citation>
	<citation>1781	6	1614</citation>
	<citation>1781	6	1614</citation>
	<citation>1787	6	1614</citation>
	<citation>1788	6	1614</citation>
	<citation>205	6	1614</citation>
	<citation>224	6	1614</citation>
	<citation>249	6	1614</citation>
	<citation>288	6	1614</citation>
	<citation>316	6	1614</citation>
	<citation>381	6	1614</citation>
	<citation>398	6	1614</citation>
	<citation>11	6	1614</citation>
	<citation>404	6	1614</citation>
	<citation>404	6	1614</citation>
	<citation>404	6	1614</citation>
	<citation>408	6	1614</citation>
	<citation>410	6	1614</citation>
	<citation>463	6	1614</citation>
	<citation>464	6	1614</citation>
	<citation>483	6	1614</citation>
	<citation>3184	6	1614</citation>
	<citation>3188	6	1614</citation>
	<citation>584	6	1614</citation>
	<citation>600	6	1614</citation>
	<citation>680	6	1614</citation>
	<citation>691	6	1614</citation>
	<citation>763	6	1614</citation>
	<citation>799	6	1614</citation>
	</citations>
	</document>
	<document id= '1613'>
	<title>One-Pass Compilation of Arithmetic Expressions for a Parallel Processor</title>
	<abstract>Under the assumption that a processor may have a multiplicity of arithmetic units, a compiler  for such a processor should produce object code to take advantage of possible parallelism of operation.   Most of the presently known compilation techniques are inadequate for such a processor because they  produce expression structures that must be evaluated serially.  A technique is presented here for compiling  arithmetic expressions into structures that can be evaluated with a high degree of parallelism.  The  algorithm is a variant of the so-called "top-down" analysis technique, and requires only one pass of  the input text.</abstract>
	<conference>CACM April, 1967</conference>
	<authors>
	<author>Stone, H. S.</author>
	</authors>
	<location>CA670402 JB February 28, 1978  11:36 AM</location>
	<citations>
	<citation>1086	4	1613</citation>
	<citation>1132	4	1613</citation>
	<citation>1234	4	1613</citation>
	<citation>1263	4	1613</citation>
	<citation>1265	4	1613</citation>
	<citation>1270	4	1613</citation>
	<citation>1323	4	1613</citation>
	<citation>1358	4	1613</citation>
	<citation>1379	4	1613</citation>
	<citation>1380	4	1613</citation>
	<citation>1453	4	1613</citation>
	<citation>1464	4	1613</citation>
	<citation>1484	4	1613</citation>
	<citation>1491	4	1613</citation>
	<citation>1498	4	1613</citation>
	<citation>1613	4	1613</citation>
	<citation>1613	4	1613</citation>
	<citation>1613	4	1613</citation>
	<citation>1613	4	1613</citation>
	<citation>1613	4	1613</citation>
	<citation>1614	4	1613</citation>
	<citation>1646	4	1613</citation>
	<citation>1781	4	1613</citation>
	<citation>1825	4	1613</citation>
	<citation>1860	4	1613</citation>
	<citation>1900	4	1613</citation>
	<citation>1947	4	1613</citation>
	<citation>1955	4	1613</citation>
	<citation>2025	4	1613</citation>
	<citation>2083	4	1613</citation>
	<citation>2154	4	1613</citation>
	<citation>2178	4	1613</citation>
	<citation>2179	4	1613</citation>
	<citation>2252	4	1613</citation>
	<citation>2325	4	1613</citation>
	<citation>2341	4	1613</citation>
	<citation>2365	4	1613</citation>
	<citation>2506	4	1613</citation>
	<citation>2546	4	1613</citation>
	<citation>2645	4	1613</citation>
	<citation>2652	4	1613</citation>
	<citation>2684	4	1613</citation>
	<citation>2842	4	1613</citation>
	<citation>2929	4	1613</citation>
	<citation>2934	4	1613</citation>
	<citation>3060	4	1613</citation>
	<citation>3069	4	1613</citation>
	<citation>669	4	1613</citation>
	<citation>679	4	1613</citation>
	<citation>691	4	1613</citation>
	<citation>761	4	1613</citation>
	<citation>949	4	1613</citation>
	<citation>989	4	1613</citation>
	<citation>987	5	1613</citation>
	<citation>1086	5	1613</citation>
	<citation>1134	5	1613</citation>
	<citation>1453	5	1613</citation>
	<citation>1613	5	1613</citation>
	<citation>1613	5	1613</citation>
	<citation>1613	5	1613</citation>
	<citation>1781	5	1613</citation>
	<citation>2175	5	1613</citation>
	<citation>3184	5	1613</citation>
	<citation>123	6	1613</citation>
	<citation>196	6	1613</citation>
	<citation>919	6	1613</citation>
	<citation>990	6	1613</citation>
	<citation>1007	6	1613</citation>
	<citation>1046	6	1613</citation>
	<citation>1131	6	1613</citation>
	<citation>1139	6	1613</citation>
	<citation>1140	6	1613</citation>
	<citation>1149	6	1613</citation>
	<citation>1198	6	1613</citation>
	<citation>1215	6	1613</citation>
	<citation>1223	6	1613</citation>
	<citation>1265	6	1613</citation>
	<citation>1303	6	1613</citation>
	<citation>1323	6	1613</citation>
	<citation>1358	6	1613</citation>
	<citation>1366	6	1613</citation>
	<citation>1421	6	1613</citation>
	<citation>1460	6	1613</citation>
	<citation>1462	6	1613</citation>
	<citation>1463	6	1613</citation>
	<citation>1467	6	1613</citation>
	<citation>1468	6	1613</citation>
	<citation>1477	6	1613</citation>
	<citation>1491	6	1613</citation>
	<citation>1496	6	1613</citation>
	<citation>1531	6	1613</citation>
	<citation>1535	6	1613</citation>
	<citation>1551	6	1613</citation>
	<citation>1565	6	1613</citation>
	<citation>1601	6	1613</citation>
	<citation>1602	6	1613</citation>
	<citation>1613	6	1613</citation>
	<citation>1613	6	1613</citation>
	<citation>1614	6	1613</citation>
	<citation>1626	6	1613</citation>
	<citation>1641	6	1613</citation>
	<citation>1787	6	1613</citation>
	<citation>1788	6	1613</citation>
	<citation>205	6	1613</citation>
	<citation>224	6	1613</citation>
	<citation>249	6	1613</citation>
	<citation>1886	6	1613</citation>
	<citation>288	6	1613</citation>
	<citation>316	6	1613</citation>
	<citation>381	6	1613</citation>
	<citation>398	6	1613</citation>
	<citation>11	6	1613</citation>
	<citation>404	6	1613</citation>
	<citation>410	6	1613</citation>
	<citation>463	6	1613</citation>
	<citation>464	6	1613</citation>
	<citation>483	6	1613</citation>
	<citation>3184	6	1613</citation>
	<citation>3188	6	1613</citation>
	<citation>584	6	1613</citation>
	<citation>600	6	1613</citation>
	<citation>680	6	1613</citation>
	<citation>691	6	1613</citation>
	<citation>763	6	1613</citation>
	<citation>799	6	1613</citation>
	</citations>
	</document>
	<document id= '1612'>
	<title>Top-to-bottom Parsing Rehabilitated?</title>
	<abstract>This note is concerned with the efficiency of the Top-to-Bottom parsing algorithm as used in  connection with programming language grammars.  It is shown, for instance, that retracing of unprofitable  paths can often be eliminated by a suitable rearrangement of the productions defining the grammar.  The  essential weakness of the method is in dealing with complicated syntactic structures which are in practice  only sparsely occupied, e.g., arithmetic expressions.</abstract>
	<conference>CACM April, 1967</conference>
	<authors>
	<author>Brooker, R. A.</author>
	</authors>
	<location>CA670403 JB February 28, 1978  11:32 AM</location>
	<citations>
	<citation>1612	4	1612</citation>
	<citation>1781	4	1612</citation>
	<citation>1945	4	1612</citation>
	<citation>1139	5	1612</citation>
	<citation>1612	5	1612</citation>
	<citation>1612	5	1612</citation>
	<citation>1612	5	1612</citation>
	</citations>
	</document>
	<document id= '1611'>
	<title>Scheduling Project Networks</title>
	<abstract>Some of the basic concepts and terminology of project networking are developed.  The Critical  Path Algorithm incorporated in the C-E-I-R proprietary scheduling system RAMPS (Resource Allocation and  Multi-Project Scheduling) is described.  The error detection and network analysis features of the algorithm  are also described.</abstract>
	<conference>CACM April, 1967</conference>
	<authors>
	<author>Klein, M. M.</author>
	</authors>
	<location>CA670404 JB February 28, 1978  11:31 AM</location>
	<citations>
	<citation>1611	4	1611</citation>
	<citation>1611	4	1611</citation>
	<citation>1295	5	1611</citation>
	<citation>1611	5	1611</citation>
	<citation>1611	5	1611</citation>
	<citation>1611	5	1611</citation>
	<citation>340	5	1611</citation>
	</citations>
	</document>
	<document id= '1610'>
	<title>A Method for the Solution of Transportation Problems with Tall Matrices</title>
	<abstract>A method is presented for the solution of the transportation problem having a cost matrix with  few columns.  The computer implementation of this method shows it to be very fast and efficient.  Application  are indicted for the personnel classification problem as well as the classical transportation problem.   An example is worked out in detail.</abstract>
	<conference>CACM April, 1967</conference>
	<authors>
	<author>Dwyer, P. S.</author>
	<author>Galler, B. A.</author>
	</authors>
	<location>CA670405 JB February 28, 1978  11:25 AM</location>
	<citations>
	<citation>1610	5	1610</citation>
	<citation>1610	5	1610</citation>
	<citation>1610	5	1610</citation>
	</citations>
	</document>
	<document id= '1609'>
	<title>Scheduling University Course Examinations by Computer</title>
	<abstract>A new approach to the problem of scheduling course examinations is presented.  In principle,  an examination schedule which requires a minimum number of examination periods and satisfies the constraint  that no student be required to take two examinations simultaneously can be found in two steps.  First,  course which may have their examinations scheduled at the same period are grouped together in all possible  ways.  Then a minimum number of these groups, such that each course is included at least once, are selected.   By removing multiple occurrences of courses and then scheduling each group at a different period a minimal  schedule can be obtained.  Known algorithms for carrying out these procedures are prohibitively expensive.   Approximations to the ideal procedure outlined above are given which yield nonminimal but feasible schedules  with a very small expenditure of time.  Results of experiments using these techniques are given.  These  are encouraging and indicate that further experimentation would be worthwhile.</abstract>
	<conference>CACM April, 1967</conference>
	<authors>
	<author>Acton, F. S.</author>
	</authors>
	<location>CA670406 JB February 28, 1978  11:22 AM</location>
	<citations>
	<citation>1609	4	1609</citation>
	<citation>2052	4	1609</citation>
	<citation>1013	5	1609</citation>
	<citation>1609	5	1609</citation>
	<citation>1609	5	1609</citation>
	<citation>1609	5	1609</citation>
	</citations>
	</document>
	<document id= '1608'>
	<title>Numerical Integration of Function That Has a Pole</title>
	<abstract>It is common to need to integrate numerically functions that diverge somewhere outside the  range of integration.  Even if the divergence occurs quite far away, integration formulas like Simpson's,  that depend on fitting a polynomial, usually will be inaccurate: near a pole they will be very bad.   A method is described that gives formulas that will integrate functions of this kind accurately if the  orders and positions of the poles are known.  Explicit formulas are given that are easy to use on an  automatic computer.  It is shown that they can be used for some other singularities as well as poles.   If the integral converges, integration can be carried to the singularity.  The accuracy of the integration  with a pole of second order is discussed, and, as an example, the new formula is compared with Simpson's.   The new formulas are useful even far from the pole, while near the pole their advantage is overwhelming.</abstract>
	<conference>CACM April, 1967</conference>
	<authors>
	<author>Eisner, E.</author>
	</authors>
	<location>CA670407 JB February 28, 1978  11:20 AM</location>
	<citations>
	<citation>1608	5	1608</citation>
	<citation>1608	5	1608</citation>
	<citation>1608	5	1608</citation>
	</citations>
	</document>
	<document id= '1607'>
	<citations>
	<citation>1607	5	1607</citation>
	<citation>1607	5	1607</citation>
	<citation>1607	5	1607</citation>
	</citations>
	<title>Coulomb Wave Functions (Algorithm 300 [S22])</title>
	<conference>CACM April, 1967</conference>
	<authors>
	<author>Gunn, J. H.</author>
	</authors>
	<location>CA670408b JB March 23, 1978  4:06 PM</location>
	</document>
	<document id= '1606'>
	<citations>
	<citation>1606	5	1606</citation>
	<citation>1606	5	1606</citation>
	<citation>1606	5	1606</citation>
	<citation>2467	5	1606</citation>
	<citation>2793	5	1606</citation>
	<citation>1606	6	1606</citation>
	<citation>1606	6	1606</citation>
	</citations>
	<title>Chi-Squared Integral (Algorithm 299 [S15])</title>
	<conference>CACM April, 1967</conference>
	<authors>
	<author>Hill, I. D.</author>
	<author>Pike, M. C.</author>
	</authors>
	<location>CA670408a JB February 28, 1978  11:10 AM</location>
	</document>
	<document id= '1605'>
	<title>An Experimental Comparison of Time Sharing and Batch Processing</title>
	<abstract>The effectiveness for program development of the MIT Compatible Time-Sharing System (CTSS)  was compared with that of the IBM IBSYS batch-processing system by means of a statistically designed  experiment.  An identical set of four programming problems was assigned to each of a group of four programming  subjects.  Influences external to the systems, such as the sequence of problem solution, and programmer  and problem characteristics, were specified as design factors in the experiment.  Data was obtained for  six variables (e.g., programmer time, computer time, elapsed time, etc.) which were considered to be  definitive of "system effectiveness," and analysis of variance techniques were employed to estimate system  differences in these variables after differences due to the design factors had been eliminated.  Statistical  analysis of the experimental results provided strong evidence of important system differences, as well  as a critique of the experimental design itself with implications for further experimentation.</abstract>
	<conference>CACM May, 1967</conference>
	<authors>
	<author>Schatzoff, M.</author>
	<author>Tsao, R.</author>
	<author>Wiig, R.</author>
	</authors>
	<location>CA670501 JB February 28, 1978  11:09 AM</location>
	<citations>
	<citation>1605	5	1605</citation>
	<citation>1605	5	1605</citation>
	<citation>1605	5	1605</citation>
	<citation>1792	5	1605</citation>
	<citation>1908	5	1605</citation>
	<citation>1550	6	1605</citation>
	<citation>1605	6	1605</citation>
	<citation>1605	6	1605</citation>
	<citation>224	6	1605</citation>
	</citations>
	</document>
	<document id= '1604'>
	<title>Further Analysis of a Computing Center Environment</title>
	<abstract>Empirical distributions of program lengths, execution times, processing times, and loading  times of over 10,000 jobs serviced in a university computing center environment are presented.  The data  are subdivided according to certain characteristics of users and jobs to obtain selected empirical conditional  distributions of those time properties as well as statistical measures of other interesting properties.   The results are interpreted in terms of the properties of the system studied.</abstract>
	<conference>CACM May, 1967</conference>
	<authors>
	<author>Walter, E. S.</author>
	<author>Wallace, V. L.</author>
	</authors>
	<location>CA670502 JB February 28, 1978  11:02 AM</location>
	<citations>
	<citation>1533	4	1604</citation>
	<citation>1604	4	1604</citation>
	<citation>1604	4	1604</citation>
	<citation>1951	4	1604</citation>
	<citation>2373	4	1604</citation>
	<citation>1224	5	1604</citation>
	<citation>1410	5	1604</citation>
	<citation>1533	5	1604</citation>
	<citation>1604	5	1604</citation>
	<citation>1604	5	1604</citation>
	<citation>1604	5	1604</citation>
	<citation>1951	5	1604</citation>
	<citation>2667	5	1604</citation>
	<citation>2668	5	1604</citation>
	<citation>1224	6	1604</citation>
	<citation>1410	6	1604</citation>
	<citation>1604	6	1604</citation>
	<citation>1604	6	1604</citation>
	<citation>1604	6	1604</citation>
	<citation>1604	6	1604</citation>
	<citation>1728	6	1604</citation>
	<citation>1728	6	1604</citation>
	<citation>1761	6	1604</citation>
	<citation>1827	6	1604</citation>
	<citation>1827	6	1604</citation>
	<citation>2677	6	1604</citation>
	</citations>
	</document>
	<document id= '1603'>
	<title>A Multiprogramming Monitor for Small Machines</title>
	<abstract>INT, a combination hardware/software monitor designed to control a wide variety of real-time  input/output devices, is described.  The simple hardware additions provide a uniform device to machine  interface for such elements as keyboards graphic input devices, and interval timers.  The software relieves  the user program from the details of input/output timing, buffering, and task scheduling and provides  parallel processing capability.  User programs communicate with the monitor through a small set of meta-instruction  which consists mostly of machine-language subroutine calls.</abstract>
	<conference>CACM May, 1967</conference>
	<authors>
	<author>Hornbuckle, G. D.</author>
	</authors>
	<location>CA670503 JB February 28, 1978  10:57 AM</location>
	<citations>
	<citation>1458	4	1603</citation>
	<citation>1523	4	1603</citation>
	<citation>1603	4	1603</citation>
	<citation>1698	4	1603</citation>
	<citation>1747	4	1603</citation>
	<citation>1748	4	1603</citation>
	<citation>1854	4	1603</citation>
	<citation>1877	4	1603</citation>
	<citation>1960	4	1603</citation>
	<citation>2377	4	1603</citation>
	<citation>2378	4	1603</citation>
	<citation>2497	4	1603</citation>
	<citation>2558	4	1603</citation>
	<citation>2625	4	1603</citation>
	<citation>2632	4	1603</citation>
	<citation>2840	4	1603</citation>
	<citation>2941	4	1603</citation>
	<citation>3105	4	1603</citation>
	<citation>3144	4	1603</citation>
	<citation>1471	5	1603</citation>
	<citation>1603	5	1603</citation>
	<citation>1603	5	1603</citation>
	<citation>1603	5	1603</citation>
	</citations>
	</document>
	<document id= '1602'>
	<title>POSE: A Language for Posing Problems to a Computer</title>
	<abstract>A language, POSE, is described which is a drastic departure from the FORTRAN/ALGOL type, though  it does utilize FORTRAN formula and logic representations (and actually contains FORTRAN VI as a subset).   With the new language, the user need only describe his problem in "equation-like" form. The method  of solution is automatically provided in conjunction with the translation from equation form to computer  instruction. In this way the POSE language user can solve difficult computational problems (like the  solution of differential equation) without requiring a knowledge of numerical methods or the intricacies  of computer subroutine logic. Essentially all clerical operations now required for FORTRAN programming  have been automated so that the POSE programmer need not be concerned with these details.</abstract>
	<conference>CACM May, 1967</conference>
	<authors>
	<author>Schlesinger, S.</author>
	<author>Sashkin, L.</author>
	</authors>
	<location>CA670504 JB February 28, 1978  10:53 AM</location>
	<citations>
	<citation>1602	5	1602</citation>
	<citation>1602	5	1602</citation>
	<citation>1602	5	1602</citation>
	<citation>1781	5	1602</citation>
	<citation>123	6	1602</citation>
	<citation>196	6	1602</citation>
	<citation>919	6	1602</citation>
	<citation>990	6	1602</citation>
	<citation>1007	6	1602</citation>
	<citation>1046	6	1602</citation>
	<citation>1131	6	1602</citation>
	<citation>1139	6	1602</citation>
	<citation>1140	6	1602</citation>
	<citation>1149	6	1602</citation>
	<citation>1198	6	1602</citation>
	<citation>1215	6	1602</citation>
	<citation>1223	6	1602</citation>
	<citation>1265	6	1602</citation>
	<citation>1303	6	1602</citation>
	<citation>1323	6	1602</citation>
	<citation>1358	6	1602</citation>
	<citation>1366	6	1602</citation>
	<citation>1421	6	1602</citation>
	<citation>1460	6	1602</citation>
	<citation>1462	6	1602</citation>
	<citation>1463	6	1602</citation>
	<citation>1467	6	1602</citation>
	<citation>1468	6	1602</citation>
	<citation>1477	6	1602</citation>
	<citation>1491	6	1602</citation>
	<citation>1496	6	1602</citation>
	<citation>1531	6	1602</citation>
	<citation>1535	6	1602</citation>
	<citation>1565	6	1602</citation>
	<citation>1601	6	1602</citation>
	<citation>1602	6	1602</citation>
	<citation>1613	6	1602</citation>
	<citation>1614	6	1602</citation>
	<citation>1626	6	1602</citation>
	<citation>1641	6	1602</citation>
	<citation>1787	6	1602</citation>
	<citation>1788	6	1602</citation>
	<citation>205	6	1602</citation>
	<citation>224	6	1602</citation>
	<citation>249	6	1602</citation>
	<citation>288	6	1602</citation>
	<citation>316	6	1602</citation>
	<citation>381	6	1602</citation>
	<citation>398	6	1602</citation>
	<citation>11	6	1602</citation>
	<citation>404	6	1602</citation>
	<citation>410	6	1602</citation>
	<citation>463	6	1602</citation>
	<citation>464	6	1602</citation>
	<citation>483	6	1602</citation>
	<citation>3184	6	1602</citation>
	<citation>3188	6	1602</citation>
	<citation>584	6	1602</citation>
	<citation>600	6	1602</citation>
	<citation>680	6	1602</citation>
	<citation>691	6	1602</citation>
	<citation>763	6	1602</citation>
	<citation>799	6	1602</citation>
	</citations>
	</document>
	<document id= '1601'>
	<title>Parallel Numerical Methods for the Solution of Equations</title>
	<abstract>Classical iterative procedures for the numerical solution of equations provide at each stage  a single new approximation to the root in question.  A technique is given for the development of numerical  procedures which provide, at each stage, several approximations to a solution of an equation.  The s8everal  approximations obtained in any iteration are computationally independent, making the methods of interest  in a parallel processing environment.  Convergence is insured by extracting the "best information" at  each iteration.  Several families of numerical procedures which use the technique of the procedures in  a parallel processing environment are developed and measurements of these statistics are reported.  These  measurements are interpreted in a parallel processing environment.  In such an environment the procedures  obtained are superior to standard algorithms.</abstract>
	<conference>CACM May, 1967</conference>
	<authors>
	<author>Shedler, G. S.</author>
	</authors>
	<location>CA670505 JB February 28, 1978  10:44 AM</location>
	<citations>
	<citation>1601	5	1601</citation>
	<citation>1601	5	1601</citation>
	<citation>1601	5	1601</citation>
	<citation>1781	5	1601</citation>
	<citation>123	6	1601</citation>
	<citation>196	6	1601</citation>
	<citation>919	6	1601</citation>
	<citation>990	6	1601</citation>
	<citation>1007	6	1601</citation>
	<citation>1046	6	1601</citation>
	<citation>1131	6	1601</citation>
	<citation>1139	6	1601</citation>
	<citation>1140	6	1601</citation>
	<citation>1149	6	1601</citation>
	<citation>1198	6	1601</citation>
	<citation>1215	6	1601</citation>
	<citation>1223	6	1601</citation>
	<citation>1265	6	1601</citation>
	<citation>1303	6	1601</citation>
	<citation>1323	6	1601</citation>
	<citation>1358	6	1601</citation>
	<citation>1366	6	1601</citation>
	<citation>1421	6	1601</citation>
	<citation>1460	6	1601</citation>
	<citation>1462	6	1601</citation>
	<citation>1463	6	1601</citation>
	<citation>1467	6	1601</citation>
	<citation>1468	6	1601</citation>
	<citation>1477	6	1601</citation>
	<citation>1491	6	1601</citation>
	<citation>1496	6	1601</citation>
	<citation>1531	6	1601</citation>
	<citation>1535	6	1601</citation>
	<citation>1565	6	1601</citation>
	<citation>1601	6	1601</citation>
	<citation>1602	6	1601</citation>
	<citation>1613	6	1601</citation>
	<citation>1614	6	1601</citation>
	<citation>1626	6	1601</citation>
	<citation>1641	6	1601</citation>
	<citation>1787	6	1601</citation>
	<citation>1788	6	1601</citation>
	<citation>205	6	1601</citation>
	<citation>224	6	1601</citation>
	<citation>249	6	1601</citation>
	<citation>288	6	1601</citation>
	<citation>316	6	1601</citation>
	<citation>381	6	1601</citation>
	<citation>398	6	1601</citation>
	<citation>11	6	1601</citation>
	<citation>404	6	1601</citation>
	<citation>410	6	1601</citation>
	<citation>463	6	1601</citation>
	<citation>464	6	1601</citation>
	<citation>483	6	1601</citation>
	<citation>3184	6	1601</citation>
	<citation>3188	6	1601</citation>
	<citation>584	6	1601</citation>
	<citation>600	6	1601</citation>
	<citation>680	6	1601</citation>
	<citation>691	6	1601</citation>
	<citation>763	6	1601</citation>
	<citation>799	6	1601</citation>
	</citations>
	</document>
	<document id= '1600'>
	<citations>
	<citation>1600	5	1600</citation>
	<citation>1600	5	1600</citation>
	<citation>1600	5	1600</citation>
	<citation>2057	5	1600</citation>
	<citation>2058	5	1600</citation>
	<citation>2392	5	1600</citation>
	<citation>2416	5	1600</citation>
	<citation>1600	6	1600</citation>
	<citation>1600	6	1600</citation>
	<citation>1600	6	1600</citation>
	<citation>1600	6	1600</citation>
	<citation>1894	6	1600</citation>
	<citation>2055	6	1600</citation>
	<citation>2055	6	1600</citation>
	<citation>2058	6	1600</citation>
	</citations>
	<title>Chebyshev Quadrature (Algorithm 279 [D1])</title>
	<conference>CACM May, 1967</conference>
	<authors>
	<author>Hillstrom, K.</author>
	</authors>
	<location>CA670506e JB March 23, 1978  4:04 PM</location>
	</document>
	<document id= '1599'>
	<citations>
	<citation>1599	5	1599</citation>
	<citation>1599	5	1599</citation>
	<citation>1599	5	1599</citation>
	</citations>
	<title>Numerical Solution of the Polynomial Equation (Algorithm 300 [C2])</title>
	<conference>CACM May, 1967</conference>
	<authors>
	<author>Kohfeld, J. J.</author>
	</authors>
	<location>CA670506d JB March 23, 1978  4:03 PM</location>
	</document>
	<document id= '1598'>
	<citations>
	<citation>1598	5	1598</citation>
	<citation>1598	5	1598</citation>
	<citation>1598	5	1598</citation>
	</citations>
	<title>Least Squares Fit By Orthogonal Polynomials (Algorithm 28 [E2])</title>
	<conference>CACM May, 1967</conference>
	<authors>
	<author>Makinson, G. J.</author>
	</authors>
	<location>CA670506c JB March 23, 1978  4:02 PM</location>
	</document>
	<document id= '1597'>
	<citations>
	<citation>1597	5	1597</citation>
	<citation>1597	5	1597</citation>
	<citation>1597	5	1597</citation>
	<citation>2354	5	1597</citation>
	<citation>2355	5	1597</citation>
	<citation>1418	6	1597</citation>
	<citation>1418	6	1597</citation>
	<citation>1521	6	1597</citation>
	<citation>1521	6	1597</citation>
	<citation>1597	6	1597</citation>
	<citation>1597	6	1597</citation>
	<citation>1679	6	1597</citation>
	<citation>1883	6	1597</citation>
	<citation>2040	6	1597</citation>
	<citation>2350	6	1597</citation>
	<citation>2350	6	1597</citation>
	<citation>2354	6	1597</citation>
	<citation>2355	6	1597</citation>
	</citations>
	<title>Transpose Vector Stored Array (Algorithm 302 [K2])</title>
	<conference>CACM May, 1967</conference>
	<authors>
	<author>Boothroyd, J.</author>
	</authors>
	<location>CA670506b JB March 23, 1978  4:00 PM</location>
	</document>
	<document id= '1596'>
	<citations>
	<citation>1596	5	1596</citation>
	<citation>1596	5	1596</citation>
	<citation>1596	5	1596</citation>
	</citations>
	<title>Airy Function (Algorithm 301 [S20])</title>
	<conference>CACM May, 1967</conference>
	<authors>
	<author>Bond, G.</author>
	<author>Pitteway, M. L. V.</author>
	</authors>
	<location>CA670506a JB February 28, 1978  10:38 AM</location>
	</document>
	<document id= '1595'>
	<title>On the Computer Enumeration of Finite Topologies</title>
	<abstract>The problem of enumerating the number of topologies which can be formed from a finite point  set is considered both theoretically and computationally.  Certain fundamental results are established,  leading to an algorithm for enumerating finite topologies, and computed results are given for n &amp;lt;= 7.   An interesting side result of the computational work was the unearthing of a theoretical error which  had been induced into the literature; the use of the computer in combinatorics represents, chronologically,  an early application, and this side result underscores its continuing usefulness in this area.</abstract>
	<conference>CACM May, 1967</conference>
	<authors>
	<author>Evans, J. W.</author>
	<author>Harary, F.</author>
	<author>Lynn, M. S.</author>
	</authors>
	<location>CA670507 JB February 28, 1978  10:37 AM</location>
	<citations>
	<citation>1595	5	1595</citation>
	<citation>1595	5	1595</citation>
	<citation>1595	5	1595</citation>
	</citations>
	</document>
	<document id= '1594'>
	<title>An Algorithm for Generating Permutations</title>
	<abstract>An algorithm is described which under repeated application generates all permutations of K  elements.  Only the previously generated permutation, the constant K, and a temporary index are needed.   Starting with a particular ordering of K elements (abcd), repeated application of the algorithm will  generate K-1 additional permutations by K-1 successive rotations.  From the initial circular ordering  of K objects, another circular ordering can be obtained by rotating the K-1 lowest elements.  For each  new K-1 circular ordering, another K-2 can be obtained by rotating the K-2 lowest elements.  By continuing  in this manner, applications of the algorithm will generate all (K-1)! circular orderings, or since each  circular ordering yields K permutations the algorithm generates all K! permutations.</abstract>
	<conference>CACM May, 1967</conference>
	<authors>
	</authors>
	<location>CA670508 JB February 28, 197810:35 AM</location>
	<citations>
	<citation>1594	5	1594</citation>
	<citation>1594	5	1594</citation>
	<citation>1594	5	1594</citation>
	<citation>2087	5	1594</citation>
	<citation>2189	5	1594</citation>
	<citation>3188	5	1594</citation>
	<citation>1594	6	1594</citation>
	<citation>1594	6	1594</citation>
	<citation>1594	6	1594</citation>
	<citation>2087	6	1594</citation>
	<citation>3191	6	1594</citation>
	<citation>521	6	1594</citation>
	<citation>612	6	1594</citation>
	</citations>
	</document>
	<document id= '1593'>
	<title>A Simple Technique for Digital Division</title>
	<abstract>A simple and economical method for digital division is described.  The method is suitable for  divisors whose leading character is either radix less one or is unity with the next character equal to  zero; also the method is direct and needs only half the number of arithmetic operations needed by a variant  of the Harvard iterative method, described by Gilman, which is suitable for similar divisors.</abstract>
	<conference>CACM June, 1967</conference>
	<authors>
	<author>Nandi, S. K.</author>
	<author>Krishnamurthy, E. V.</author>
	</authors>
	<location>CA670509 JB February 28, 1978  10:30 AM</location>
	<citations>
	<citation>214	4	1593</citation>
	<citation>1497	4	1593</citation>
	<citation>1593	4	1593</citation>
	<citation>1593	4	1593</citation>
	<citation>1975	4	1593</citation>
	<citation>1292	5	1593</citation>
	<citation>1497	5	1593</citation>
	<citation>1593	5	1593</citation>
	<citation>1593	5	1593</citation>
	<citation>1593	5	1593</citation>
	<citation>91	5	1593</citation>
	<citation>107	6	1593</citation>
	<citation>1026	6	1593</citation>
	<citation>1292	6	1593</citation>
	<citation>1593	6	1593</citation>
	</citations>
	</document>
	<document id= '1592'>
	<title>String Similarity and Misspellings</title>
	<abstract>The problem of programming a computer to determine whether or not a string of characters is  a misspelling of a given word was considered.  A numberof algorithms were evaluated-some proposed by  other writers, some by the author.  These techniques were tested on a collection of misspellings made  by students at various grade levels.  While many of the methods were clearly unsatisfactory, some gave  as few as 2.1 percent incorrect determinations.</abstract>
	<conference>CACM June, 1967</conference>
	<authors>
	<author>Alberga, C. N.</author>
	</authors>
	<location>CA670510 JB February 28, 1978  10:28 AM</location>
	<citations>
	<citation>1112	4	1592</citation>
	<citation>1592	4	1592</citation>
	<citation>1592	4	1592</citation>
	<citation>1592	4	1592</citation>
	<citation>2111	4	1592</citation>
	<citation>2111	4	1592</citation>
	<citation>2339	4	1592</citation>
	<citation>2339	4	1592</citation>
	<citation>440	4	1592</citation>
	<citation>982	5	1592</citation>
	<citation>1112	5	1592</citation>
	<citation>1592	5	1592</citation>
	<citation>1592	5	1592</citation>
	<citation>1592	5	1592</citation>
	<citation>2111	5	1592</citation>
	<citation>2339	5	1592</citation>
	<citation>619	5	1592</citation>
	<citation>830	6	1592</citation>
	<citation>1112	6	1592</citation>
	<citation>1112	6	1592</citation>
	<citation>1592	6	1592</citation>
	<citation>1592	6	1592</citation>
	<citation>440	6	1592</citation>
	<citation>619	6	1592</citation>
	<citation>619	6	1592</citation>
	</citations>
	</document>
	<document id= '1591'>
	<title>A Model for a Multifunctional Teaching System</title>
	<abstract>A teaching system model that was incorporated into an operating system of a large computer  is described.  The model transferred control to the operating system to execute functions other than  teaching, and then recovered control in order to resume teaching.  The teaching system (ABAC-II) was  written to run under the operating system (IBSYS) for the IBM 7044 Graphic System.  Because the teaching  system automatically terminated and rescheduled itself, a student studying a course presented at a cathode-ray  display terminal could switch readily between student mode and programmer mode.  During the latter, the  full resources of the operating system (language processors, compilers, library and user's programs)  were at his disposal.  He could for example, write, assemble, debug, and execute at the terminal a program  written in any language processed by the operating system.  A course could therefore include text material  interleaved with programming problems which the student could solve without leaving the terminal.  Exercises  in simulation and gaming could also be provided.  The implications of a teaching system with this degree  of flexibility for industrial and executive training as well as academic education are discussed.  In  addition, the advantages of this type of system for computer programming and operation are also considered.</abstract>
	<conference>CACM June, 1967</conference>
	<authors>
	<author>Engvold, K. J.</author>
	<author>Hughes, J. L.</author>
	</authors>
	<location>CA670601 JB February 28, 1978  10:24 AM</location>
	<citations>
	<citation>1591	5	1591</citation>
	<citation>1591	5	1591</citation>
	<citation>1591	5	1591</citation>
	<citation>1680	5	1591</citation>
	<citation>1591	6	1591</citation>
	</citations>
	</document>
	<document id= '1590'>
	<title>Pitch Period Determination of Speech Sounds</title>
	<abstract>A computer procedure which determines pitch periods by the recognition of the peak structure  of the speech waveform is described.  Speech sounds were sampled by a microphone and an analog-to-digital  converter attached to an interconnected IBM 7090-PDP-1 system.  These utterances were recorded at the  normal noise level of the computer room but were not band-compressed or phase-distorted in any manner.   A sequence of operations defined on the speech wave selects a list of points along the waveform as candidates  for pitch markers.  These markers are validated by an error detection and correction procedure.About  95 percent of the pitch periods were recognized correctly within 1 to 2 times real-time on the IBM 7090.</abstract>
	<conference>CACM June,1967</conference>
	<authors>
	<author>Reddy, D. R.</author>
	</authors>
	<location>CA670602 JB February 28, 1978  9:42 AM</location>
	<citations>
	<citation>1590	5	1590</citation>
	<citation>1590	5	1590</citation>
	<citation>1590	5	1590</citation>
	</citations>
	</document>
	<document id= '1589'>
	<title>DIALOG: A Conversational Programming System with a Graphical Orientation</title>
	<abstract>DIALOG is an algebraic language for online use with a graphical input-output console device.   It is a computational aid for the casual user, which provides basic facilities for graphical and numeric  input and display, online and off line program preparation and storage, and hard copy presentation of  results.  Use of the system requires a minimum of experience or instruction, since the growth of an overlaying  system control language has been prevented, and there are no processor-oriented statements, like variable  type or dimension declarations.  Moreover, in the online situation the processor interacts with the graphical  keyboard on a character-by-character basis so as to restrict the programmer's choice of input symbols  to those which are syntactically correct. DIALOG has been in daily operation at the IIT Research Institute  since February, 1966.</abstract>
	<conference>CACM June, 1967</conference>
	<authors>
	<author>Cameron, S. H.</author>
	<author>Ewing, D.</author>
	<author>Liveright, M.</author>
	</authors>
	<location>CA670603 JB February 28, 1978  9:36 AM</location>
	<citations>
	<citation>1589	5	1589</citation>
	<citation>1589	5	1589</citation>
	<citation>1589	5	1589</citation>
	<citation>1978	5	1589</citation>
	<citation>1307	6	1589</citation>
	<citation>1589	6	1589</citation>
	<citation>1813	6	1589</citation>
	</citations>
	</document>
	<document id= '1588'>
	<title>PL/I List Processing</title>
	<abstract>The concepts of list processing have been introduced into the PL/I language.  With these new  facilities, it is possible to write PL/I procedures that operate on simple and complex data list organizations.   Most list-processing languages have suffered from their inability to deal directly with complex data  structures and/or from their inability to perform the complete range of programming language operations  upon the data list structures.  These two problems have been eliminated in the list-processing facilities  of PL/I.  The basic concepts of list processing and the philosophy of the PL/I language extensions are  discussed.  In addition, several detailed list-processing examples are provided.</abstract>
	<conference>CACM June, 1967</conference>
	<authors>
	</authors>
	<location>CA670604 JB February 28, 1978  9:30 AM</location>
	<citations>
	<citation>1588	5	1588</citation>
	<citation>1588	5	1588</citation>
	<citation>1588	5	1588</citation>
	</citations>
	</document>
	<document id= '1587'>
	<title>Storage Allocation in a Certain Iterative Process</title>
	<abstract>A method of core storage allocation in a certain iterative process is described and estimates  of the machine time required are given.  The method is applicable to iterative processes in which input  data items once chosen are never again needed.  In this method the input data is continuously relocated  and the space made available apportioned to the output tables when an overflow occurs.  Some important  special cases are considered in which considerable simplification occurs.</abstract>
	<conference>CACM June, 1967</conference>
	<authors>
	<author>Abramowich, J.</author>
	</authors>
	<location>CA670605 JB February 28, 1978  9:25 AM</location>
	<citations>
	<citation>1587	5	1587</citation>
	<citation>1587	5	1587</citation>
	<citation>1587	5	1587</citation>
	</citations>
	</document>
	<document id= '1586'>
	<title>A Generalized Bairstow Algorithm</title>
	<abstract>The Bairstow algorithm is generalized to the case of a polynomial which is itself a linear  combination of polynomials satisfying a three-term recursion.  Convergence properties of the method are  derived.</abstract>
	<conference>CACM June, 1967</conference>
	<authors>
	<author>Golub, G. H.</author>
	<author>Robertson, T. N.</author>
	</authors>
	<location>CA670606 JB February 28, 1978  9:21 AM</location>
	<citations>
	<citation>1586	5	1586</citation>
	<citation>1586	5	1586</citation>
	<citation>1586	5	1586</citation>
	</citations>
	</document>
	<document id= '1585'>
	<citations>
	<citation>1585	5	1585</citation>
	<citation>1585	5	1585</citation>
	<citation>1585	5	1585</citation>
	<citation>1714	5	1585</citation>
	<citation>1585	6	1585</citation>
	</citations>
	<title>Normal Curve Integral (Algorithm 304 [S15])</title>
	<conference>CACM June, 1967</conference>
	<authors>
	<author>Hill, I. D.</author>
	<author>Joyce, S. A.</author>
	</authors>
	<location>CA670607m JB March 23, 1978  3:41 PM</location>
	</document>
	<document id= '1584'>
	<citations>
	<citation>1584	5	1584</citation>
	<citation>1584	5	1584</citation>
	<citation>1584	5	1584</citation>
	</citations>
	<title>Procedure for the Normal Distribution Functions (Algorithm 272 [S15])</title>
	<conference>CACM June, 1967</conference>
	<authors>
	<author>Hill, I. D.</author>
	<author>Joyce, S. A.</author>
	</authors>
	<location>CA670607l JB March 23, 1978  3:40 PM</location>
	</document>
	<document id= '1583'>
	<citations>
	<citation>1583	4	1583</citation>
	<citation>1583	4	1583</citation>
	<citation>1583	4	1583</citation>
	<citation>1583	4	1583</citation>
	<citation>967	5	1583</citation>
	<citation>1126	5	1583</citation>
	<citation>1583	5	1583</citation>
	<citation>1583	5	1583</citation>
	<citation>1583	5	1583</citation>
	<citation>707	5	1583</citation>
	<citation>831	5	1583</citation>
	</citations>
	<title>Normal Distribution Function (Algorithm 226 [S15])</title>
	<conference>CACM June, 1967</conference>
	<authors>
	<author>Hill, I. D.</author>
	<author>Joyce, S. A.</author>
	</authors>
	<location>CA670607k JB March 23, 1978  3:39 PM</location>
	</document>
	<document id= '1582'>
	<citations>
	<citation>1582	5	1582</citation>
	<citation>1582	5	1582</citation>
	<citation>1582	5	1582</citation>
	</citations>
	<title>GAUSS (Algorithm 209 [S15])</title>
	<conference>CACM June, 1967</conference>
	<authors>
	<author>Hill, I. D.</author>
	<author>Joyce, S. A.</author>
	</authors>
	<location>CA670607j JB March 23, 1978  3:38 PM</location>
	</document>
	<document id= '1581'>
	<citations>
	<citation>1581	5	1581</citation>
	<citation>1581	5	1581</citation>
	<citation>1581	5	1581</citation>
	<citation>1987	5	1581</citation>
	<citation>2427	5	1581</citation>
	<citation>1561	6	1581</citation>
	<citation>1581	6	1581</citation>
	<citation>1581	6	1581</citation>
	<citation>1636	6	1581</citation>
	<citation>1779	6	1581</citation>
	<citation>1944	6	1581</citation>
	<citation>714	6	1581</citation>
	</citations>
	<title>Complementary Error Function-Large X (Algorithm 181 [S15])</title>
	<conference>CACM June, 1967</conference>
	<authors>
	<author>Hill, I. D.</author>
	<author>Joyce, S. A.</author>
	</authors>
	<location>CA670607i JB March 23, 1978  3:37 PM</location>
	</document>
	<document id= '1580'>
	<citations>
	<citation>1580	5	1580</citation>
	<citation>1580	5	1580</citation>
	<citation>1580	5	1580</citation>
	<citation>2334	5	1580</citation>
	<citation>1580	6	1580</citation>
	</citations>
	<title>Error Function-Large X (Algorithm 180 [S15])</title>
	<conference>CACM June, 1967</conference>
	<authors>
	<author>Hill, I. D.</author>
	<author>Joyce, S. A.</author>
	</authors>
	<location>CA670607h JB March 23, 1978  3:35 PM</location>
	</document>
	<document id= '1579'>
	<citations>
	<citation>1579	5	1579</citation>
	<citation>1579	5	1579</citation>
	<citation>1579	5	1579</citation>
	</citations>
	<title>Real Error Function, ERF(x) (Algorithm 123 [S15])</title>
	<conference>CACM June, 1967</conference>
	<authors>
	<author>Hill, I. D.</author>
	<author>Joyce, S. A.</author>
	</authors>
	<location>CA670607g JB March 23, 1978  3:34 PM</location>
	</document>
	<document id= '1578'>
	<citations>
	<citation>1578	5	1578</citation>
	<citation>1578	5	1578</citation>
	<citation>1578	5	1578</citation>
	</citations>
	<title>Generalized Least Squares Fit By Orthogonal Polynomials (Algorithm 296 [E2])</title>
	<conference>CACM June, 1967</conference>
	<authors>
	<author>Makinson, G. J.</author>
	</authors>
	<location>CA670607f JB March 23, 1978  3:33 PM</location>
	</document>
	<document id= '1577'>
	<citations>
	<citation>1577	5	1577</citation>
	<citation>1577	5	1577</citation>
	<citation>1577	5	1577</citation>
	</citations>
	<title>Eigenvalues and Eigenvectors of a Real Symmetric Matrix by the QR Method (Algorithm 254 [F2])</title>
	<conference>CACM June, 1967</conference>
	<authors>
	<author>Welsch, J. H.</author>
	</authors>
	<location>CA670607e JB March 23, 1978  3:31 PM</location>
	</document>
	<document id= '1576'>
	<citations>
	<citation>1576	5	1576</citation>
	<citation>1576	5	1576</citation>
	<citation>1576	5	1576</citation>
	</citations>
	<title>Eigenvalues of a Real Symmetric Matrix by the QR Method (Algorithm 253 [F2])</title>
	<conference>CACM June, 1967</conference>
	<authors>
	<author>Welsch, J. H.</author>
	</authors>
	<location>CA670607d JB March 23, 1978  3:30 PM</location>
	</document>
	<document id= '1575'>
	<citations>
	<citation>1575	5	1575</citation>
	<citation>1575	5	1575</citation>
	<citation>1575	5	1575</citation>
	</citations>
	<title>Incomplete Beta Ratio (Algorithm 179 [S14])</title>
	<conference>CACM June, 1967</conference>
	<authors>
	<author>Pike, M. C.</author>
	<author>Hill, I. D.</author>
	</authors>
	<location>CA670607c JB March 23, 1978  3:29 PM</location>
	</document>
	<document id= '1574'>
	<citations>
	<citation>1574	5	1574</citation>
	<citation>1574	5	1574</citation>
	<citation>1574	5	1574</citation>
	</citations>
	<title>Normal Curve Integral (Algorithm 304 [S15])</title>
	<conference>CACM June, 1967</conference>
	<authors>
	<author>Hill, I. D.</author>
	<author>Joyce, S. A.</author>
	</authors>
	<location>CA670607b JB March 23, 1978  3:27 PM</location>
	</document>
	<document id= '1573'>
	<citations>
	<citation>1573	5	1573</citation>
	<citation>1573	5	1573</citation>
	<citation>1573	5	1573</citation>
	<citation>2093	5	1573</citation>
	<citation>2550	5	1573</citation>
	<citation>834	6	1573</citation>
	<citation>872	6	1573</citation>
	<citation>1092	6	1573</citation>
	<citation>1298	6	1573</citation>
	<citation>1573	6	1573</citation>
	<citation>1573	6	1573</citation>
	<citation>2074	6	1573</citation>
	<citation>429	6	1573</citation>
	<citation>429	6	1573</citation>
	</citations>
	<title>An Adaptive Quadrature Procedure with Random Panel Sizes (Algorithm [D1])</title>
	<conference>CACM June, 1967</conference>
	<authors>
	<author>Gallaher, L. J.</author>
	</authors>
	<location>CA670607a JB February 28, 1978  9:17 AM</location>
	</document>
	<document id= '1572'>
	<title>The Simulation of Time sharing Systems</title>
	<abstract>The development of new large scale time-sharing systems has raised a number of problems for  computation center management.  Not only is it necessary to develop an appropriate hardware configuration  for these systems, but appropriate software adjustments must be made.  Unfortunately, these systems often  do not respond to changes in the manner that intuition would suggest, and there are few guides to assist  in the analysis of performance characteristics.  The development of a comprehensive simulation model  to assist in the investigation of these questions is described in this paper.  The resulting model has  a general purpose design and can be used to study a variety of time-sharing systems.  It can also be  used to assist in the design and development of new time-sharing algorithms or techniques.  For the sake  of efficiency and greater applicability, the model was implemented in a limited FORTRAN subset that is  compatible with most FORTRAN IV compilers. The use of the simulation is demonstrated by a study of the  IBM 360/67 time-sharing system.</abstract>
	<conference>CACM July, 1967</conference>
	<authors>
	<author>Nielsen, N. R.</author>
	</authors>
	<location>CA670701 JB February 28, 1978  9:15 AM</location>
	<citations>
	<citation>1572	5	1572</citation>
	<citation>1572	5	1572</citation>
	<citation>1572	5	1572</citation>
	<citation>1805	5	1572</citation>
	<citation>1846	5	1572</citation>
	<citation>1892	5	1572</citation>
	<citation>2188	5	1572</citation>
	<citation>2218	5	1572</citation>
	<citation>2317	5	1572</citation>
	<citation>1198	6	1572</citation>
	<citation>1380	6	1572</citation>
	<citation>1380	6	1572</citation>
	<citation>1424	6	1572</citation>
	<citation>1484	6	1572</citation>
	<citation>1518	6	1572</citation>
	<citation>1526	6	1572</citation>
	<citation>1572	6	1572</citation>
	<citation>1572	6	1572</citation>
	<citation>1572	6	1572</citation>
	<citation>1572	6	1572</citation>
	<citation>1572	6	1572</citation>
	<citation>1572	6	1572</citation>
	<citation>1693	6	1572</citation>
	<citation>1728	6	1572</citation>
	<citation>1728	6	1572</citation>
	<citation>1748	6	1572</citation>
	<citation>1749	6	1572</citation>
	<citation>1751	6	1572</citation>
	<citation>1751	6	1572</citation>
	<citation>1753	6	1572</citation>
	<citation>1752	6	1572</citation>
	<citation>1752	6	1572</citation>
	<citation>1781	6	1572</citation>
	<citation>1810	6	1572</citation>
	<citation>1879	6	1572</citation>
	<citation>2095	6	1572</citation>
	<citation>2126	6	1572</citation>
	<citation>2148	6	1572</citation>
	<citation>576	6	1572</citation>
	</citations>
	</document>
	<document id= '1571'>
	<title>A User-Oriented Time-Shared Online System</title>
	<abstract>An existing system and planned additions within the Data Processing Laboratory of the Brain  Research Institute at UCLA is described.  The system represents an attempt to provide research workers  of the Institute with the ability to interact directly with a highly sophisticated digital computing  complex in the most direct and simple fashion possible.  It is anticipated that, with the accumulation  of experience using the present system, significant advances will be possible in the system design through  determination of interface parameters between the biological scientist and the digital computer.</abstract>
	<conference>CACM July, 1967</conference>
	<authors>
	<author>Betyar, L.</author>
	</authors>
	<location>CA670702 JB February 28, 1978  9:08 AM</location>
	<citations>
	<citation>1571	5	1571</citation>
	<citation>1571	5	1571</citation>
	<citation>1571	5	1571</citation>
	</citations>
	</document>
	<document id= '1570'>
	<title>String Processing Techniques</title>
	<abstract>The internal organization of string processing systems is discussed.  Six techniques for data  structures are presented and evaluated on the basis of: (1) creation of strings; (2) examination of strings;  and (3) alteration of strings.  Speed of operation, storage requirements, effect on paging, and programmer  convenience are also considered.  One of the techniques, single-word linked blocks, is used in an example  demonstrating an implementation of a SNOBOL string processing language on an IBM System/360.</abstract>
	<conference>CACM July, 1967</conference>
	<authors>
	<author>Madnick, S. E.</author>
	</authors>
	<location>CA670703 JB February 28, 1978  9:04 AM</location>
	<citations>
	<citation>1024	4	1570</citation>
	<citation>1051	4	1570</citation>
	<citation>1098	4	1570</citation>
	<citation>1214	4	1570</citation>
	<citation>1380	4	1570</citation>
	<citation>1388	4	1570</citation>
	<citation>1393	4	1570</citation>
	<citation>1485	4	1570</citation>
	<citation>1487	4	1570</citation>
	<citation>1549	4	1570</citation>
	<citation>1570	4	1570</citation>
	<citation>1570	4	1570</citation>
	<citation>1878	4	1570</citation>
	<citation>1945	4	1570</citation>
	<citation>1946	4	1570</citation>
	<citation>1957	4	1570</citation>
	<citation>2168	4	1570</citation>
	<citation>2314	4	1570</citation>
	<citation>2723	4	1570</citation>
	<citation>2857	4	1570</citation>
	<citation>3112	4	1570</citation>
	<citation>1098	5	1570</citation>
	<citation>1570	5	1570</citation>
	<citation>1570	5	1570</citation>
	<citation>1570	5	1570</citation>
	<citation>1869	5	1570</citation>
	<citation>731	5	1570</citation>
	<citation>1549	6	1570</citation>
	<citation>1570	6	1570</citation>
	</citations>
	</document>
	<document id= '1569'>
	<title>Implementing Phrase-Structure Productions in PL/I</title>
	<abstract>A method is described for implementing the productions of a context-free phrase structure grammar  in a PL/I procedure whose structure and statements parallel the structure and notation of the grammar.</abstract>
	<conference>CACM July, 1967</conference>
	<authors>
	<author>Irwin, L.</author>
	</authors>
	<location>CA670704 JB February 28, 1978  9:01 AM</location>
	<citations>
	<citation>1569	5	1569</citation>
	<citation>1569	5	1569</citation>
	<citation>1569	5	1569</citation>
	</citations>
	</document>
	<document id= '1568'>
	<title>Plotting a Function of Three Independent Variables</title>
	<abstract>A method is developed for constructing an approximate plot of a function of three independent  variables.  The plot is similar to a conventional contour map except that there are three scales to represent  the independent variables.  Scale values of the three independent variables are added vectorially, and  the value of the function is then read from the values associated with nearby contours.</abstract>
	<conference>CACM July,1967</conference>
	<authors>
	<author>Stineman, R. W.</author>
	</authors>
	<location>CA670705 JB February 28, 1978  8:59 AM</location>
	<citations>
	<citation>1568	5	1568</citation>
	<citation>1568	5	1568</citation>
	<citation>1568	5	1568</citation>
	</citations>
	</document>
	<document id= '1567'>
	<title>On the Representation of Symmetric Polynomials</title>
	<abstract>Relations are given between certain symmetric polynomials in the light of the theory of the  symmetric group.  Such an approach unifies earlier work and lends insight to previously published work  by Aaron Booker.  A generalization of Graeffe's root-squaring technique for the determination of the  roots of a polynomial is suggested.</abstract>
	<conference>CACM July, 1967</conference>
	<authors>
	<author>McKay, J. K. S.</author>
	</authors>
	<location>CA670706 JB February 28, 1978  8:56 AM</location>
	<citations>
	<citation>1567	4	1567</citation>
	<citation>1948	4	1567</citation>
	<citation>1559	5	1567</citation>
	<citation>1567	5	1567</citation>
	<citation>1567	5	1567</citation>
	<citation>1567	5	1567</citation>
	</citations>
	</document>
	<document id= '1566'>
	<title>Optimal Starting Values for Newton-Raphson Calculation of SQRT(x)</title>
	<abstract>The problem of obtaining starting values for the Newton-Raphson calculation of SQRT(x) on a  digital computer is considered.  It is shown that the conventionally used best uniform approximations  to SQRT(x) do not provide optimal starting values.  The problem of obtaining optimal starting values.   The problem of obtaining optimal starting values is stated, and several basic results are proved.  A  table of optimal polynomial starting values is given.</abstract>
	<conference>CACM July, 1967</conference>
	<authors>
	<author>Moursund, D. G.</author>
	</authors>
	<location>CA670707 JB February 28, 1978  8:53 AM</location>
	<citations>
	<citation>1566	4	1566</citation>
	<citation>1440	5	1566</citation>
	<citation>1566	5	1566</citation>
	<citation>1566	5	1566</citation>
	<citation>1566	5	1566</citation>
	<citation>1932	5	1566</citation>
	<citation>2094	5	1566</citation>
	<citation>962	6	1566</citation>
	<citation>1566	6	1566</citation>
	<citation>1566	6	1566</citation>
	</citations>
	</document>
	<document id= '1565'>
	<title>A Language-Independent Macro Processor</title>
	<abstract>A macro processor is described which can be used with almost any source language.  It provides  all features normally associated with a macro facility, plus the ability to make arbitrary transformations  of the argument strings.  The program is used at the Basser Computing Department, University of Sydney,  Sydney, Australia, to process text for eight different compilers.</abstract>
	<conference>CACM July, 1967</conference>
	<authors>
	<author>Waite, W. M.</author>
	</authors>
	<location>CA670708 JB February 28, 1978  8:35 AM</location>
	<citations>
	<citation>1358	4	1565</citation>
	<citation>1530	4	1565</citation>
	<citation>1531	4	1565</citation>
	<citation>1541	4	1565</citation>
	<citation>1565	4	1565</citation>
	<citation>1565	4	1565</citation>
	<citation>1565	4	1565</citation>
	<citation>1565	4	1565</citation>
	<citation>1703	4	1565</citation>
	<citation>1781	4	1565</citation>
	<citation>1781	4	1565</citation>
	<citation>1788	4	1565</citation>
	<citation>1824	4	1565</citation>
	<citation>1945	4	1565</citation>
	<citation>2036	4	1565</citation>
	<citation>2252	4	1565</citation>
	<citation>1162	5	1565</citation>
	<citation>205	5	1565</citation>
	<citation>1358	5	1565</citation>
	<citation>1455	5	1565</citation>
	<citation>1530	5	1565</citation>
	<citation>1565	5	1565</citation>
	<citation>1565	5	1565</citation>
	<citation>1565	5	1565</citation>
	<citation>1781	5	1565</citation>
	<citation>1852	5	1565</citation>
	<citation>2034	5	1565</citation>
	<citation>123	6	1565</citation>
	<citation>196	6	1565</citation>
	<citation>919	6	1565</citation>
	<citation>984	6	1565</citation>
	<citation>990	6	1565</citation>
	<citation>1007	6	1565</citation>
	<citation>1046	6	1565</citation>
	<citation>1131	6	1565</citation>
	<citation>1139	6	1565</citation>
	<citation>1140	6	1565</citation>
	<citation>1149	6	1565</citation>
	<citation>1198	6	1565</citation>
	<citation>1215	6	1565</citation>
	<citation>1223	6	1565</citation>
	<citation>1231	6	1565</citation>
	<citation>1265	6	1565</citation>
	<citation>1303	6	1565</citation>
	<citation>1323	6	1565</citation>
	<citation>1358	6	1565</citation>
	<citation>1366	6	1565</citation>
	<citation>1421	6	1565</citation>
	<citation>1455	6	1565</citation>
	<citation>1460	6	1565</citation>
	<citation>1462	6	1565</citation>
	<citation>1463	6	1565</citation>
	<citation>1467	6	1565</citation>
	<citation>1468	6	1565</citation>
	<citation>1477	6	1565</citation>
	<citation>1491	6	1565</citation>
	<citation>1496	6	1565</citation>
	<citation>1531	6	1565</citation>
	<citation>1535	6	1565</citation>
	<citation>1565	6	1565</citation>
	<citation>1565	6	1565</citation>
	<citation>1565	6	1565</citation>
	<citation>1565	6	1565</citation>
	<citation>1601	6	1565</citation>
	<citation>1602	6	1565</citation>
	<citation>1613	6	1565</citation>
	<citation>1614	6	1565</citation>
	<citation>1626	6	1565</citation>
	<citation>1641	6	1565</citation>
	<citation>1787	6	1565</citation>
	<citation>1788	6	1565</citation>
	<citation>205	6	1565</citation>
	<citation>224	6	1565</citation>
	<citation>1852	6	1565</citation>
	<citation>249	6	1565</citation>
	<citation>288	6	1565</citation>
	<citation>1926	6	1565</citation>
	<citation>1947	6	1565</citation>
	<citation>316	6	1565</citation>
	<citation>381	6	1565</citation>
	<citation>398	6	1565</citation>
	<citation>11	6	1565</citation>
	<citation>404	6	1565</citation>
	<citation>410	6	1565</citation>
	<citation>463	6	1565</citation>
	<citation>464	6	1565</citation>
	<citation>483	6	1565</citation>
	<citation>3184	6	1565</citation>
	<citation>3188	6	1565</citation>
	<citation>584	6	1565</citation>
	<citation>600	6	1565</citation>
	<citation>680	6	1565</citation>
	<citation>691	6	1565</citation>
	<citation>763	6	1565</citation>
	<citation>799	6	1565</citation>
	</citations>
	</document>
	<document id= '1564'>
	<title>Description of Basic Algorithm in DETAB/65 Preprocessor</title>
	<abstract>The basic algorithm for the conversion of decision tables into COBOL code is contained in the generator portion of the DETAB/65 preprocessor.  The generator analyzes a decision table and produces  simple COBOL conditional statements.  Core storage is saved by using queueing techniques and extensive  indexing and also by outputting the code as it is generated, a line at a time.  The only optimization  attempted is the elimination of obviously unnecessary tests on certain conditions in the decision table.   Since the preprocessor and this language associated with it were developed for COBOL users, the preprocessor  was written in a modular form in required COBOL-61.</abstract>
	<conference>CACM July, 1967</conference>
	<authors>
	<author>Callahan, M. D.</author>
	<author>Chapman, A. E.</author>
	</authors>
	<location>CA670709 JB February 28, 1978  8:33 AM</location>
	<citations>
	<citation>1237	4	1564</citation>
	<citation>1549	4	1564</citation>
	<citation>1564	4	1564</citation>
	<citation>2453	4	1564</citation>
	<citation>1564	5	1564</citation>
	<citation>1564	5	1564</citation>
	<citation>1564	5	1564</citation>
	<citation>1684	5	1564</citation>
	<citation>753	5	1564</citation>
	<citation>1354	6	1564</citation>
	<citation>1564	6	1564</citation>
	</citations>
	</document>
	<document id= '1563'>
	<title>A Method for Finding Hamilton Paths and Knight's Tours</title>
	<abstract>The use of Warnsdorff's rule for finding a knight's tour is generalized and applied to the  problem of finding a Hamilton path in a graph.  A graph-theoretic justification for the method is given.</abstract>
	<conference>CACM July, 1967</conference>
	<authors>
	<author>Pohl, I.</author>
	</authors>
	<location>CA670710 JB February 28, 1978  8:28 AM</location>
	<citations>
	<citation>1563	5	1563</citation>
	<citation>1563	5	1563</citation>
	<citation>1563	5	1563</citation>
	</citations>
	</document>
	<document id= '1562'>
	<citations>
	<citation>1562	5	1562</citation>
	<citation>1562	5	1562</citation>
	<citation>1562	5	1562</citation>
	</citations>
	<title>Airy Function (Algorithm 301 [S20])</title>
	<conference>CACM July, 1967</conference>
	<authors>
	<author>Pitteway, M. L. V.</author>
	</authors>
	<location>CA670711h JB March 23, 1978  3:22 PM</location>
	</document>
	<document id= '1561'>
	<citations>
	<citation>1561	5	1561</citation>
	<citation>1561	5	1561</citation>
	<citation>1561	5	1561</citation>
	<citation>1987	5	1561</citation>
	<citation>1561	6	1561</citation>
	<citation>1581	6	1561</citation>
	<citation>1779	6	1561</citation>
	<citation>1944	6	1561</citation>
	<citation>714	6	1561</citation>
	</citations>
	<title>The Mutual Primal-Dual Method (Algorithm 285 [H])</title>
	<conference>CACM July, 1967</conference>
	<authors>
	<author>Spath, H.</author>
	</authors>
	<location>CA670711g JB March 23, 1978  3:21 PM</location>
	</document>
	<document id= '1560'>
	<citations>
	<citation>1560	5	1560</citation>
	<citation>1560	5	1560</citation>
	<citation>1560	5	1560</citation>
	</citations>
	<title>Transport; Transportation Problem (Algorithm 258[H]; Algorithm 293[H])</title>
	<conference>CACM July, 1967</conference>
	<authors>
	<author>Sims, L. S.</author>
	</authors>
	<location>CA670711f JB March 23, 1978  3:20 PM</location>
	</document>
	<document id= '1559'>
	<citations>
	<citation>1559	5	1559</citation>
	<citation>1559	5	1559</citation>
	<citation>1559	5	1559</citation>
	<citation>1567	5	1559</citation>
	<citation>1948	5	1559</citation>
	<citation>1391	6	1559</citation>
	<citation>1559	6	1559</citation>
	<citation>1559	6	1559</citation>
	</citations>
	<title>Permutation Generator; Permutation in Lexicographical Order; Permute; Generation of Permutations  in Lexicographical Order (Algorithm 87[G6]; Algorithm 102[G6]; Algorithm 130[G6]; Algorithm 202[G6])</title>
	<conference>CACM July, 1967</conference>
	<authors>
	<author>Smith, R. J.</author>
	</authors>
	<location>CA670711e JB March 23, 1978  3:19 PM</location>
	</document>
	<document id= '1558'>
	<citations>
	<citation>1558	5	1558</citation>
	<citation>1558	5	1558</citation>
	<citation>1558	5	1558</citation>
	<citation>2044	5	1558</citation>
	<citation>996	6	1558</citation>
	<citation>1558	6	1558</citation>
	<citation>2230	6	1558</citation>
	<citation>521	6	1558</citation>
	</citations>
	<title>Generation of Permutations in Pseudo-Lexicographic Order (Algorithm  [G6])</title>
	<conference>CACM July, 1967</conference>
	<authors>
	<author>Smith, R. J.</author>
	</authors>
	<location>CA670711d JB March 23, 1978  3:16 PM</location>
	</document>
	<document id= '1557'>
	<citations>
	<citation>1557	5	1557</citation>
	<citation>1557	5	1557</citation>
	<citation>1557	5	1557</citation>
	</citations>
	<title>Symmetric Group Characters (Algorithm 307 [A1])</title>
	<conference>CACM July, 1967</conference>
	<authors>
	<author>McKay, J. K. S.</author>
	</authors>
	<location>CA670711c JB March 23, 1978  3:15 PM</location>
	</document>
	<document id= '1556'>
	<citations>
	<citation>1556	5	1556</citation>
	<citation>1556	5	1556</citation>
	<citation>1556	5	1556</citation>
	</citations>
	<title>Permutations with Repetitions (Algorithm 306 [G6])</title>
	<conference>CACM July, 1967</conference>
	<authors>
	<author>Bratley, P.</author>
	</authors>
	<location>CA670711b JB March 23, 1978  3:14 PM</location>
	</document>
	<document id= '1555'>
	<citations>
	<citation>1555	5	1555</citation>
	<citation>1555	5	1555</citation>
	<citation>1555	5	1555</citation>
	</citations>
	<title>Symmetric Polynomials (Algorithm 305 [C1])</title>
	<conference>CACM July, 1967</conference>
	<authors>
	<author>Bratley, P.</author>
	<author>McKay, J. K. S.</author>
	</authors>
	<location>CA670711a JB February 28, 1978  8:26 AM</location>
	</document>
	<document id= '1554'>
	<title>A Computer Technique for Displaying n-Dimensional Hyperobjects</title>
	<abstract>A digital computer and automatic plotter have been used to generate three-dimensional stereoscopic  movies of the three-dimensional parallel and perspective projections of four-dimensional hyperobjects  rotating in four-dimensional space.  The observed projections and their motions were a direct extension of three-dimensional experience, but no profound "feeling" or insight into the fourth spatial dimension  was obtained.  The technique can be generalized to n-dimensions and applied to any n-dimensional hyperobject  or hypersurface.</abstract>
	<conference>CACM August, 1967</conference>
	<authors>
	<author>Noll, A. M.</author>
	</authors>
	<location>CA670801 JB February 27, 1978  4:48 PM</location>
	<citations>
	<citation>1554	5	1554</citation>
	<citation>1554	5	1554</citation>
	<citation>1554	5	1554</citation>
	<citation>2211	5	1554</citation>
	<citation>1554	6	1554</citation>
	<citation>1741	6	1554</citation>
	</citations>
	</document>
	<document id= '1553'>
	<title>Contextual Understanding by Computers</title>
	<abstract>A further development of a computer program (ELIZA) capable of conversing in natural language  is discussed.  The importance of context to both human and machine understanding is stressed.  It is  argued that the adequacy of the level of understanding achieved in a particular conversation depends  on the purpose of that conversation, and that absolute understanding on the part of either humans or  machines is impossible.</abstract>
	<conference>CACM August, 1967</conference>
	<authors>
	<author>Weizenbaum, J.</author>
	</authors>
	<location>CA670802 JB February 27, 19784:44 PM</location>
	<citations>
	<citation>1400	4	1553</citation>
	<citation>1553	4	1553</citation>
	<citation>1945	4	1553</citation>
	<citation>2127	4	1553</citation>
	<citation>2396	4	1553</citation>
	<citation>2730	4	1553</citation>
	<citation>1487	5	1553</citation>
	<citation>1553	5	1553</citation>
	<citation>1553	5	1553</citation>
	<citation>1553	5	1553</citation>
	<citation>1856	5	1553</citation>
	<citation>1225	6	1553</citation>
	<citation>1324	6	1553</citation>
	<citation>1553	6	1553</citation>
	</citations>
	</document>
	<document id= '1552'>
	<title>The AED Free Storage Package</title>
	<abstract>The most fundamental underlying problem in sophisticated software systems involving elaborate,  changing data structure is dynamic storage allocation for flexible problem modeling.  The Free Storage  Package of the AED-1 Compiler Systems allows blocks of available storage to be obtained and returned  for reuse.  The total available space is partitioned into a hierarchy of free storage zones, each of  which has its own characteristics.  Blocks may be of any size, and special provisions allow efficient  handling of selected sizes, control of shattering and garbage collection, and sharing of physical space  between zones.  The routines of the package perform high level functions automatically, but also allow  access and control of fine internal details as well.</abstract>
	<conference>CACM August, 1967</conference>
	<authors>
	<author>Ross, D. T.</author>
	</authors>
	<location>CA670803 JB February 27, 1978  4:40 PM</location>
	<citations>
	<citation>1051	4	1552</citation>
	<citation>1380	4	1552</citation>
	<citation>1389	4	1552</citation>
	<citation>1552	4	1552</citation>
	<citation>1552	4	1552</citation>
	<citation>1552	4	1552</citation>
	<citation>1665	4	1552</citation>
	<citation>1693	4	1552</citation>
	<citation>1781	4	1552</citation>
	<citation>1854	4	1552</citation>
	<citation>1860	4	1552</citation>
	<citation>1860	4	1552</citation>
	<citation>2060	4	1552</citation>
	<citation>2155	4	1552</citation>
	<citation>2162	4	1552</citation>
	<citation>2435	4	1552</citation>
	<citation>2596	4	1552</citation>
	<citation>2768	4	1552</citation>
	<citation>2845	4	1552</citation>
	<citation>2902	4	1552</citation>
	<citation>2955	4	1552</citation>
	<citation>557	4	1552</citation>
	<citation>1184	5	1552</citation>
	<citation>1421	5	1552</citation>
	<citation>1552	5	1552</citation>
	<citation>1552	5	1552</citation>
	<citation>1552	5	1552</citation>
	<citation>378	5	1552</citation>
	<citation>2704	5	1552</citation>
	<citation>2902	5	1552</citation>
	<citation>1051	6	1552</citation>
	<citation>1062	6	1552</citation>
	<citation>1184	6	1552</citation>
	<citation>1211	6	1552</citation>
	<citation>1247	6	1552</citation>
	<citation>1552	6	1552</citation>
	<citation>1552	6	1552</citation>
	<citation>1749	6	1552</citation>
	<citation>1879	6	1552</citation>
	<citation>2356	6	1552</citation>
	<citation>2379	6	1552</citation>
	<citation>2435	6	1552</citation>
	<citation>2596	6	1552</citation>
	<citation>2673	6	1552</citation>
	<citation>2734	6	1552</citation>
	<citation>2747	6	1552</citation>
	<citation>2768	6	1552</citation>
	</citations>
	</document>
	<document id= '1551'>
	<title>On Compiling Algorithms for Arithmetic Expressions</title>
	<abstract>This paper deals with algorithms concerning arithmetic expressions used in a FORTRAN IV compiler  for a HITAC-5020 computer having n accumulators.  The algorithms generate an object code which minimizes  the frequency of storing and recovering the partial results of the arithmetic expressions in cases where  there are several accumulators.</abstract>
	<conference>CACM August, 1967</conference>
	<authors>
	<author>Nakata, I.</author>
	</authors>
	<location>CA670804 JB February 27, 1978  4:35 PM</location>
	<citations>
	<citation>1551	4	1551</citation>
	<citation>1945	4	1551</citation>
	<citation>1122	5	1551</citation>
	<citation>1551	5	1551</citation>
	<citation>1551	5	1551</citation>
	<citation>1551	5	1551</citation>
	<citation>1807	5	1551</citation>
	<citation>1934	5	1551</citation>
	<citation>2175	5	1551</citation>
	<citation>1223	6	1551</citation>
	<citation>1248	6	1551</citation>
	<citation>1551	6	1551</citation>
	<citation>1551	6	1551</citation>
	<citation>1551	6	1551</citation>
	<citation>1613	6	1551</citation>
	<citation>1886	6	1551</citation>
	<citation>1947	6	1551</citation>
	</citations>
	</document>
	<document id= '1550'>
	<title>A Comparison of Batch Processing and Instant Turnaround</title>
	<abstract>A study of the programming efforts of students in an introductory programming course is presented  and the effects of having instant turnaround (a few minutes) as opposed to conventional batch processing  with turnaround times of a few hours are examined.  Among the items compared are the number of computer  runs per trip to the computation center, program preparation time, keypunching time, debugging time,  number of runs, and elapsed time from the first run to the last run on each problem.  Even though the  results are influenced by the fact that "bonus points" were given for completion of a programming problem in less than a specified number of runs, there is evidence to support "Instant" over "Batch".</abstract>
	<conference>CACM August, 1967</conference>
	<authors>
	<author>Smith, L. B.</author>
	</authors>
	<location>CA670805 JB February 27, 1978  4:32 PM</location>
	<citations>
	<citation>1550	4	1550</citation>
	<citation>1550	4	1550</citation>
	<citation>1304	5	1550</citation>
	<citation>1472	5	1550</citation>
	<citation>1550	5	1550</citation>
	<citation>1550	5	1550</citation>
	<citation>1550	5	1550</citation>
	<citation>1908	5	1550</citation>
	<citation>1550	6	1550</citation>
	<citation>1605	6	1550</citation>
	</citations>
	</document>
	<document id= '1549'>
	<title>An Efficient Machine-Independent Procedure for Garbage Collection in Various List Structures</title>
	<abstract>A method for returning registers to the free list is an essential part of any list processing  system.  In this paper, past solutions of the recovery problem are reviewed and compared.  A new algorithm  is presented which offers significant advantages of speed and storage utilization.  The routine for implementing  this algorithm can be written in the list language with which it is to be used, thus insuring a degree  of machine independence.  Finally, the application of the algorithm to a number of different list structures  appearing in the literature is indicated.</abstract>
	<conference>CACM August, 1967</conference>
	<authors>
	<author>Schorr, H.</author>
	<author>Waite, W. M.</author>
	</authors>
	<location>CA670806 JB February 27, 1978  4:28 PM</location>
	<citations>
	<citation>1024	4	1549</citation>
	<citation>1024	4	1549</citation>
	<citation>1050	4	1549</citation>
	<citation>1050	4	1549</citation>
	<citation>1051	4	1549</citation>
	<citation>1051	4	1549</citation>
	<citation>1051	4	1549</citation>
	<citation>1098	4	1549</citation>
	<citation>1102	4	1549</citation>
	<citation>1102	4	1549</citation>
	<citation>1132	4	1549</citation>
	<citation>1211	4	1549</citation>
	<citation>1214	4	1549</citation>
	<citation>1237	4	1549</citation>
	<citation>1380	4	1549</citation>
	<citation>1388	4	1549</citation>
	<citation>1390	4	1549</citation>
	<citation>1393	4	1549</citation>
	<citation>1393	4	1549</citation>
	<citation>1485	4	1549</citation>
	<citation>1486	4	1549</citation>
	<citation>1487	4	1549</citation>
	<citation>1549	4	1549</citation>
	<citation>1549	4	1549</citation>
	<citation>1549	4	1549</citation>
	<citation>1549	4	1549</citation>
	<citation>1549	4	1549</citation>
	<citation>1549	4	1549</citation>
	<citation>1549	4	1549</citation>
	<citation>1564	4	1549</citation>
	<citation>1570	4	1549</citation>
	<citation>1706	4	1549</citation>
	<citation>1826	4	1549</citation>
	<citation>1878	4	1549</citation>
	<citation>1878	4	1549</citation>
	<citation>1906	4	1549</citation>
	<citation>1946	4	1549</citation>
	<citation>1957	4	1549</citation>
	<citation>378	4	1549</citation>
	<citation>2023	4	1549</citation>
	<citation>2060	4	1549</citation>
	<citation>2155	4	1549</citation>
	<citation>2168	4	1549</citation>
	<citation>2168	4	1549</citation>
	<citation>2453	4	1549</citation>
	<citation>2719	4	1549</citation>
	<citation>2723	4	1549</citation>
	<citation>2723	4	1549</citation>
	<citation>2723	4	1549</citation>
	<citation>2838	4	1549</citation>
	<citation>2842	4	1549</citation>
	<citation>2855	4	1549</citation>
	<citation>2857	4	1549</citation>
	<citation>2879	4	1549</citation>
	<citation>2882	4	1549</citation>
	<citation>2902	4	1549</citation>
	<citation>3077	4	1549</citation>
	<citation>3080	4	1549</citation>
	<citation>3106	4	1549</citation>
	<citation>3112	4	1549</citation>
	<citation>3112	4	1549</citation>
	<citation>627	4	1549</citation>
	<citation>627	4	1549</citation>
	<citation>731	4	1549</citation>
	<citation>793	4	1549</citation>
	<citation>106	4	1549</citation>
	<citation>106	5	1549</citation>
	<citation>1051	5	1549</citation>
	<citation>210	5	1549</citation>
	<citation>1549	5	1549</citation>
	<citation>1549	5	1549</citation>
	<citation>1549	5	1549</citation>
	<citation>1869	5	1549</citation>
	<citation>2513	5	1549</citation>
	<citation>2665	5	1549</citation>
	<citation>2723	5	1549</citation>
	<citation>2855	5	1549</citation>
	<citation>406	5	1549</citation>
	<citation>3106	5	1549</citation>
	<citation>627	5	1549</citation>
	<citation>731	5	1549</citation>
	<citation>753	5	1549</citation>
	<citation>1383	6	1549</citation>
	<citation>1549	6	1549</citation>
	<citation>1549	6	1549</citation>
	<citation>1549	6	1549</citation>
	<citation>1549	6	1549</citation>
	<citation>1549	6	1549</citation>
	<citation>1549	6	1549</citation>
	<citation>1570	6	1549</citation>
	<citation>1749	6	1549</citation>
	<citation>1826	6	1549</citation>
	<citation>1826	6	1549</citation>
	<citation>210	6	1549</citation>
	<citation>210	6	1549</citation>
	<citation>210	6	1549</citation>
	<citation>1972	6	1549</citation>
	<citation>1972	6	1549</citation>
	<citation>1972	6	1549</citation>
	<citation>2513	6	1549</citation>
	<citation>2651	6	1549</citation>
	<citation>2665	6	1549</citation>
	<citation>2766	6	1549</citation>
	<citation>2766	6	1549</citation>
	<citation>2833	6	1549</citation>
	<citation>2855	6	1549</citation>
	<citation>2954	6	1549</citation>
	<citation>2998	6	1549</citation>
	<citation>2998	6	1549</citation>
	<citation>627	6	1549</citation>
	<citation>731	6	1549</citation>
	</citations>
	</document>
	<document id= '1548'>
	<title>Parsing of Decision Tables</title>
	<abstract>Reduction in the size of decision tables can be accomplished by several techniques.  The techniques  considered in this paper are on the parsing of decision tables with regard to horizontal and vertical  data structures, job identity, hardware and job priorities, and context relationships.  Such parsing  rests upon some conventions for the linkage of decision tables.</abstract>
	<conference>CACM August, 1967</conference>
	<authors>
	<author>Chapin, N.</author>
	</authors>
	<location>CA670807 JB February 27, 1978  4:14 PM</location>
	<citations>
	<citation>1548	4	1548</citation>
	<citation>1548	4	1548</citation>
	<citation>2220	4	1548</citation>
	<citation>2726	4	1548</citation>
	<citation>2726	4	1548</citation>
	<citation>1488	5	1548</citation>
	<citation>1489	5	1548</citation>
	<citation>1548	5	1548</citation>
	<citation>1548	5	1548</citation>
	<citation>1548	5	1548</citation>
	<citation>2220	5	1548</citation>
	<citation>2492	5	1548</citation>
	<citation>2518	5	1548</citation>
	<citation>2598	5	1548</citation>
	<citation>2616	5	1548</citation>
	<citation>2726	5	1548</citation>
	<citation>931	6	1548</citation>
	<citation>1172	6	1548</citation>
	<citation>1172	6	1548</citation>
	<citation>1172	6	1548</citation>
	<citation>1237	6	1548</citation>
	<citation>1327	6	1548</citation>
	<citation>1327	6	1548</citation>
	<citation>1354	6	1548</citation>
	<citation>1354	6	1548</citation>
	<citation>1488	6	1548</citation>
	<citation>1489	6	1548</citation>
	<citation>1489	6	1548</citation>
	<citation>1548	6	1548</citation>
	<citation>1548	6	1548</citation>
	<citation>1548	6	1548</citation>
	<citation>1548	6	1548</citation>
	<citation>1548	6	1548</citation>
	<citation>1548	6	1548</citation>
	<citation>1684	6	1548</citation>
	<citation>1684	6	1548</citation>
	<citation>250	6	1548</citation>
	<citation>2220	6	1548</citation>
	<citation>2220	6	1548</citation>
	<citation>2221	6	1548</citation>
	<citation>2263	6	1548</citation>
	<citation>2263	6	1548</citation>
	<citation>2453	6	1548</citation>
	<citation>2517	6	1548</citation>
	<citation>2691	6	1548</citation>
	</citations>
	</document>
	<document id= '1547'>
	<citations>
	<citation>1547	5	1547</citation>
	<citation>1547	5	1547</citation>
	<citation>1547	5	1547</citation>
	<citation>2224	5	1547</citation>
	<citation>1547	6	1547</citation>
	</citations>
	<title>Gamma Function with Arbitrary Precision (Algorithm 309 [S14])</title>
	<conference>CACM August, 1967</conference>
	<authors>
	<author>Filho, A. M.S.</author>
	<author>Schwachheim, G.</author>
	</authors>
	<location>CA670808 JB February 27, 1978  4:10 PM</location>
	</document>
	<document id= '1546'>
	<citations>
	<citation>1546	5	1546</citation>
	<citation>1546	5	1546</citation>
	<citation>1546	5	1546</citation>
	</citations>
	<title>Toward Standards for Handwritten Zero and Oh</title>
	<conference>CACM August, 1967</conference>
	<authors>
	<author>Bemer, R. W.</author>
	</authors>
	<location>CA670809 JB February 27, 1978  4:08 PM</location>
	</document>
	<document id= '1545'>
	<citations>
	<citation>1545	5	1545</citation>
	<citation>1545	5	1545</citation>
	<citation>1545	5	1545</citation>
	</citations>
	<title>Legal Safeguards to Insure Privacy in a Computer Society</title>
	<conference>CACM September,1967</conference>
	<authors>
	<author>Westin, A. F.</author>
	</authors>
	<location>CA670901 JB February 27, 1978  4:06 PM</location>
	</document>
	<document id= '1544'>
	<title>Tele-CUPL: A Telephone Time Sharing System</title>
	<abstract>A general purpose, remote access, computing system is described, that employs twelve-key keyboard  telephones as terminals.  Audio output is provided directly to the telephone terminals, but the system  will normally be used in conjunction with remotely located high speed printing devices.  The system is  a compatible extension of an existing batch processing system.  A significant element of the system is  a scheme for transmitting alphanumeric information by single strokes on a numeric keyboard.  The programmed  scanner uses context to eliminate the ambiguity in transmission.</abstract>
	<conference>CACM September, 1967</conference>
	<authors>
	<author>Conway, R. W.</author>
	<author>Morgan, H. L.</author>
	</authors>
	<location>CA670902 JB February 27, 1978  4:04 PM</location>
	<citations>
	<citation>1179	4	1544</citation>
	<citation>1288	4	1544</citation>
	<citation>1544	4	1544</citation>
	<citation>1646	4	1544</citation>
	<citation>2111	4	1544</citation>
	<citation>2534	4	1544</citation>
	<citation>2556	4	1544</citation>
	<citation>2650	4	1544</citation>
	<citation>1544	5	1544</citation>
	<citation>1544	5	1544</citation>
	<citation>1544	5	1544</citation>
	<citation>2054	5	1544</citation>
	<citation>830	5	1544</citation>
	<citation>1544	6	1544</citation>
	</citations>
	</document>
	<document id= '1543'>
	<title>Computer Formulation of the Equations of Motion Using Tensor Notation</title>
	<abstract>A means is described for extending the area of application of digital computers beyond the  numerical data processing stage and reducing the need for human participation in the formulation of certain  types of computer problems.  By the use of tensor calculus and a computer language designed to facilitate  symbolic mathematical computation, a method has been devised whereby a digital computer can be used to  do non-numeric work, that is, symbolic algebraic manipulation and differentiation. To illustrate the  techniques involved, a digital computer has been used to derive the equations of motion of a point mass  in a general orthogonal curvilinear coordinate system.  Since this operation involves a formulation in  terms of first- and second-order differential coefficients, it provides a good demonstration of a computer's  capability to do non-numeric work and to assist in the formulation process which normally precedes the  numerical data processing stage.  Moreover, this particular problem serves to illustrate the advantages  of the mathematical techniques employed.  With the program prepared for this purpose the computer will  derive the equations of motion in any coordinate system requested by the user.   Results are presented  for the following coordinate systems: cylindrical polar, spherical polar, and prolate spheroidal.</abstract>
	<conference>CACM September, 1967</conference>
	<authors>
	<author>Howard, J. C.</author>
	</authors>
	<location>CA670903 JB February 27, 1978  3:58 PM</location>
	<citations>
	<citation>1543	4	1543</citation>
	<citation>1543	4	1543</citation>
	<citation>1664	4	1543</citation>
	<citation>1664	4	1543</citation>
	<citation>1345	5	1543</citation>
	<citation>1543	5	1543</citation>
	<citation>1543	5	1543</citation>
	<citation>1543	5	1543</citation>
	<citation>1616	5	1543</citation>
	<citation>1664	5	1543</citation>
	<citation>1345	6	1543</citation>
	<citation>1543	6	1543</citation>
	<citation>1616	6	1543</citation>
	</citations>
	</document>
	<document id= '1542'>
	<title>A Microprogrammed Implementation of EULER on IBM System/360 Model 30</title>
	<abstract>An experimental processing system for the algorithmic language EULER has been implemented in  microprogramming on an IBM System/360 Model 30 using a second Read-Only Storage unit.  The system consists  of a microprogrammed compiler and a microprogrammed String Language Interpreter, and of an I/O control  program written in 360 machine language.  The system is described and results are given in terms of microprogram  and main storage space required and compiler and interpreter performance obtained.  The role of microprogramming  is stressed, which opens a new dimension in the processing of interpretive code.  The structure and content  of a higher level language can be matched by an appropriate interpretive language which can be executed  efficiently by microprograms on existing computer hardware.</abstract>
	<conference>CACM September, 1967</conference>
	<authors>
	<author>Weber, H.</author>
	</authors>
	<location>CA670904 JB February 27, 1978  3:44 PM</location>
	<citations>
	<citation>1542	4	1542</citation>
	<citation>1542	4	1542</citation>
	<citation>1683	4	1542</citation>
	<citation>1693	4	1542</citation>
	<citation>1781	4	1542</citation>
	<citation>1787	4	1542</citation>
	<citation>1836	4	1542</citation>
	<citation>1945	4	1542</citation>
	<citation>2060	4	1542</citation>
	<citation>2061	4	1542</citation>
	<citation>2082	4	1542</citation>
	<citation>2091	4	1542</citation>
	<citation>2152	4	1542</citation>
	<citation>2179	4	1542</citation>
	<citation>2340	4	1542</citation>
	<citation>2356	4	1542</citation>
	<citation>2546	4	1542</citation>
	<citation>2603	4	1542</citation>
	<citation>2698	4	1542</citation>
	<citation>2708	4	1542</citation>
	<citation>2824	4	1542</citation>
	<citation>2982	4	1542</citation>
	<citation>2986	4	1542</citation>
	<citation>3045	4	1542</citation>
	<citation>3093	4	1542</citation>
	<citation>1491	5	1542</citation>
	<citation>1542	5	1542</citation>
	<citation>1542	5	1542</citation>
	<citation>1542	5	1542</citation>
	<citation>2202	5	1542</citation>
	<citation>2527	5	1542</citation>
	<citation>3198	5	1542</citation>
	<citation>1542	6	1542</citation>
	<citation>1542	6	1542</citation>
	</citations>
	</document>
	<document id= '1541'>
	<title>A Language for Modeling and Simulating Dynamic Systems</title>
	<abstract>The general objective of this language is to facilitate both the modeling and experimental  aspects of simulation studies.  The ability to represent systems containing highly interactive processes  is an essential feature.  The nature of the language, and the role of the process concept, is presented  by means of an extended example.</abstract>
	<conference>CACM September, 1967</conference>
	<authors>
	<author>Parente, R. J.</author>
	<author>Krasnow, H. S.</author>
	</authors>
	<location>CA670905 JB February 27, 1978  3:18 PM</location>
	<citations>
	<citation>1541	4	1541</citation>
	<citation>1541	4	1541</citation>
	<citation>1565	4	1541</citation>
	<citation>1781	4	1541</citation>
	<citation>1824	4	1541</citation>
	<citation>1846	4	1541</citation>
	<citation>2060	4	1541</citation>
	<citation>2218	4	1541</citation>
	<citation>2252	4	1541</citation>
	<citation>3112	4	1541</citation>
	<citation>1358	5	1541</citation>
	<citation>1380	5	1541</citation>
	<citation>1541	5	1541</citation>
	<citation>1541	5	1541</citation>
	<citation>1541	5	1541</citation>
	</citations>
	</document>
	<document id= '1540'>
	<title>An Algorithm for Class Scheduling With Section Preference</title>
	<abstract>An algorithm for assignment of students to classes in a fixed time schedule that allows students  to give a preference for sections within courses is given.  If consistent with the objective of balanced  sections, these preferences will be honored.  The algorithm is more stochastic than Monte Carlo in nature.   Results are given that compare it to a nonpreference assignment algorithm.</abstract>
	<conference>CACM September, 1967</conference>
	<authors>
	<author>Busam, V. A.</author>
	</authors>
	<location>CA670906 JB February 27, 1978  3:15 PM</location>
	<citations>
	<citation>1540	4	1540</citation>
	<citation>2209	4	1540</citation>
	<citation>1434	5	1540</citation>
	<citation>1540	5	1540</citation>
	<citation>1540	5	1540</citation>
	<citation>1540	5	1540</citation>
	<citation>2052	5	1540</citation>
	<citation>2209	5	1540</citation>
	<citation>1008	6	1540</citation>
	<citation>1013	6	1540</citation>
	<citation>1434	6	1540</citation>
	<citation>1504	6	1540</citation>
	<citation>1540	6	1540</citation>
	<citation>1540	6	1540</citation>
	</citations>
	</document>
	<document id= '1539'>
	<citations>
	<citation>1539	5	1539</citation>
	<citation>1539	5	1539</citation>
	<citation>1539	5	1539</citation>
	<citation>1841	5	1539</citation>
	<citation>1967	5	1539</citation>
	<citation>2120	5	1539</citation>
	<citation>2927	5	1539</citation>
	<citation>1537	6	1539</citation>
	<citation>1537	6	1539</citation>
	<citation>1539	6	1539</citation>
	<citation>1539	6	1539</citation>
	<citation>1539	6	1539</citation>
	<citation>1539	6	1539</citation>
	<citation>1538	6	1539</citation>
	<citation>1840	6	1539</citation>
	<citation>1841	6	1539</citation>
	<citation>1841	6	1539</citation>
	<citation>377	6	1539</citation>
	<citation>377	6	1539</citation>
	<citation>2120	6	1539</citation>
	</citations>
	<title>Prime Number Generator 1; Prime Number Generator 2 (Algorithm 35[A1]; Algorithm 310[A1]; Algorithm  311[A1])</title>
	<conference>CACM September, 1967</conference>
	<authors>
	<author>Chartres, B. A.</author>
	</authors>
	<location>CA670907c JB March 23, 1978  2:37 PM</location>
	</document>
	<document id= '1538'>
	<citations>
	<citation>1538	5	1538</citation>
	<citation>1538	5	1538</citation>
	<citation>1538	5	1538</citation>
	<citation>2927	5	1538</citation>
	<citation>1537	6	1538</citation>
	<citation>1539	6	1538</citation>
	<citation>1538	6	1538</citation>
	<citation>1840	6	1538</citation>
	<citation>1841	6	1538</citation>
	</citations>
	<title>Prime Number Generator 2 (Algorithm 311 [A1])</title>
	<conference>CACM September, 1967</conference>
	<authors>
	<author>Chartres, B. A.</author>
	</authors>
	<location>CA670907b JB March 23, 1978  2:34 PM</location>
	</document>
	<document id= '1537'>
	<citations>
	<citation>1537	5	1537</citation>
	<citation>1537	5	1537</citation>
	<citation>1537	5	1537</citation>
	<citation>2120	5	1537</citation>
	<citation>2927	5	1537</citation>
	<citation>1537	6	1537</citation>
	<citation>1537	6	1537</citation>
	<citation>1539	6	1537</citation>
	<citation>1539	6	1537</citation>
	<citation>1538	6	1537</citation>
	<citation>1840	6	1537</citation>
	<citation>1841	6	1537</citation>
	<citation>377	6	1537</citation>
	</citations>
	<title>Prime Number Generator 1 (Algorithm 310 [A1])</title>
	<conference>CACM September, 1967</conference>
	<authors>
	<author>Chartres, B. A.</author>
	</authors>
	<location>CA670907a JB February 27, 1978  3:12 PM</location>
	</document>
	<document id= '1536'>
	<title>Dynamic Computation of Derivatives</title>
	<abstract>It is shown how Wengert's procedure for computation of derivatives can be implemented conveniently  by use of compiler-generated complex addition, subtraction, and linkage to complex arithmetic subroutines.  Evaluation of a function and derivative proceed in parallel, as in Wengert's procedure, but with the  "imaginary" parts of variables declared complex bearing the values of the derivatives of the real parts.   This technique provides a simple way to compute the derivatives of a function, without the need for  deriving and programming the evaluation of explicit formulas for the derivatives.</abstract>
	<conference>CACM September, 1967</conference>
	<authors>
	<author>Lesk, A. M.</author>
	</authors>
	<location>CA670908 JB February 27, 1978  3:11 PM</location>
	<citations>
	<citation>1028	4	1536</citation>
	<citation>1216	4	1536</citation>
	<citation>1278	4	1536</citation>
	<citation>1347	4	1536</citation>
	<citation>1396	4	1536</citation>
	<citation>1536	4	1536</citation>
	<citation>1029	5	1536</citation>
	<citation>1536	5	1536</citation>
	<citation>1536	5	1536</citation>
	<citation>1536	5	1536</citation>
	</citations>
	</document>
	<document id= '1535'>
	<title>A Comment on Index Register Allocation</title>
	<abstract>A technique is presented to reduce the enumeration required by a known procedure for optimal  index register allocation in straight-line programs.  This technique is based on the construction of  a link diagram, which shows at any step the future occurrences of indexes which must be loaded into index  registers.  This diagram determines in advance the required register configuration at certain steps of  the program, so that the program is subdivided into separate portions to which the allocation procedure  may be applied independently.</abstract>
	<conference>CACM September, 1967</conference>
	<authors>
	<author>Luccio, F.</author>
	</authors>
	<location>CA670909 JB February 27, 1978  3:06 PM</location>
	<citations>
	<citation>1535	5	1535</citation>
	<citation>1535	5	1535</citation>
	<citation>1535	5	1535</citation>
	<citation>1781	5	1535</citation>
	<citation>2579	5	1535</citation>
	<citation>123	6	1535</citation>
	<citation>196	6	1535</citation>
	<citation>919	6	1535</citation>
	<citation>990	6	1535</citation>
	<citation>1007	6	1535</citation>
	<citation>1046	6	1535</citation>
	<citation>1131	6	1535</citation>
	<citation>1139	6	1535</citation>
	<citation>1140	6	1535</citation>
	<citation>1149	6	1535</citation>
	<citation>1198	6	1535</citation>
	<citation>1215	6	1535</citation>
	<citation>1223	6	1535</citation>
	<citation>1265	6	1535</citation>
	<citation>1303	6	1535</citation>
	<citation>1323	6	1535</citation>
	<citation>1358	6	1535</citation>
	<citation>1366	6	1535</citation>
	<citation>1421	6	1535</citation>
	<citation>1460	6	1535</citation>
	<citation>1462	6	1535</citation>
	<citation>1463	6	1535</citation>
	<citation>1467	6	1535</citation>
	<citation>1468	6	1535</citation>
	<citation>1477	6	1535</citation>
	<citation>1491	6	1535</citation>
	<citation>1496	6	1535</citation>
	<citation>1531	6	1535</citation>
	<citation>1535	6	1535</citation>
	<citation>1535	6	1535</citation>
	<citation>1565	6	1535</citation>
	<citation>1601	6	1535</citation>
	<citation>1602	6	1535</citation>
	<citation>1613	6	1535</citation>
	<citation>1614	6	1535</citation>
	<citation>1626	6	1535</citation>
	<citation>1641	6	1535</citation>
	<citation>1787	6	1535</citation>
	<citation>1788	6	1535</citation>
	<citation>1807	6	1535</citation>
	<citation>205	6	1535</citation>
	<citation>224	6	1535</citation>
	<citation>249	6	1535</citation>
	<citation>288	6	1535</citation>
	<citation>1947	6	1535</citation>
	<citation>316	6	1535</citation>
	<citation>381	6	1535</citation>
	<citation>398	6	1535</citation>
	<citation>11	6	1535</citation>
	<citation>404	6	1535</citation>
	<citation>410	6	1535</citation>
	<citation>463	6	1535</citation>
	<citation>464	6	1535</citation>
	<citation>483	6	1535</citation>
	<citation>3184	6	1535</citation>
	<citation>3188	6	1535</citation>
	<citation>584	6	1535</citation>
	<citation>600	6	1535</citation>
	<citation>680	6	1535</citation>
	<citation>691	6	1535</citation>
	<citation>763	6	1535</citation>
	<citation>799	6	1535</citation>
	</citations>
	</document>
	<document id= '1534'>
	<title>DAD, The C.S.I.R.O. Operating System</title>
	<abstract>The design and implementation of the C.S.I.R.O. operating system, DAD, is described in detail.   This system is designed for the Control Data 3600 using a large drum backing store and is intended to  allow the integration of a remote console (display) subsystem into a conventional job stack environment.   The use of the drums, the buffering of input and output on slow peripherals, and the execution of normal  job stack work are described.  The display subsystem is described only as it integrates into the rest  of the system.  The techniques found useful in the development of DAD are given, and an assessment is  made of the validity of various design decisions.  Performance figures based on several months of operation  are tabulated.</abstract>
	<conference>CACM September, 1967</conference>
	<authors>
	<author>Austin, B. J.</author>
	<author>Holden, T. S.</author>
	<author>Hudson, R. H.</author>
	</authors>
	<location>CA670910 JB February 27, 1978  2:58 PM</location>
	<citations>
	<citation>1534	5	1534</citation>
	<citation>1534	5	1534</citation>
	<citation>1534	5	1534</citation>
	</citations>
	</document>
	<document id= '1533'>
	<title>A Marovian Model of the University of Michigan Executive System</title>
	<abstract>A mathematical model of a computer's executive system is postulated and its parameters estimated  with the aid of extensive data on the system's operation.  Although simplifying assumptions are made,  the results predicted by the model agree reasonable well with actual results.  The model is used to study  the effects of changes in the executive system and in one of its compilers.  Further applications of  the model are discussed.</abstract>
	<conference>CACM September, 1967</conference>
	<authors>
	<author>Foley, J. D.</author>
	</authors>
	<location>CA670911 JB February 27, 1978  2:50 PM</location>
	<citations>
	<citation>1533	4	1533</citation>
	<citation>1533	4	1533</citation>
	<citation>1604	4	1533</citation>
	<citation>1951	4	1533</citation>
	<citation>2667	4	1533</citation>
	<citation>2668	4	1533</citation>
	<citation>1224	5	1533</citation>
	<citation>1533	5	1533</citation>
	<citation>1533	5	1533</citation>
	<citation>1533	5	1533</citation>
	<citation>1604	5	1533</citation>
	<citation>1916	5	1533</citation>
	<citation>1533	6	1533</citation>
	<citation>666	6	1533</citation>
	</citations>
	</document>
	<document id= '1532'>
	<citations>
	<citation>1532	5	1532</citation>
	<citation>1532	5	1532</citation>
	<citation>1532	5	1532</citation>
	</citations>
	<title>The Hardware-Software Complementarity</title>
	<conference>CACM October, 1967</conference>
	<authors>
	<author>Oettinger, A. G.</author>
	</authors>
	<location>CA671001 JB February 27, 1978  2:42 PM</location>
	</document>
	<document id= '1531'>
	<title>The Remaining Trouble Spots in ALGOL 60</title>
	<abstract>This paper lists the ambiguities remaining in the language ALGOL 60, which have been noticed  since the publication of the Revised ALGOL 60 Report in 1963.</abstract>
	<conference>CACM October, 1967</conference>
	<authors>
	<author>Knuth, D. E.</author>
	</authors>
	<location>CA671002 JB February 27, 1978  2:40 PM</location>
	<citations>
	<citation>1530	4	1531</citation>
	<citation>1531	4	1531</citation>
	<citation>1531	4	1531</citation>
	<citation>1565	4	1531</citation>
	<citation>1703	4	1531</citation>
	<citation>1945	4	1531</citation>
	<citation>2036	4	1531</citation>
	<citation>2707	4	1531</citation>
	<citation>2753	4	1531</citation>
	<citation>1185	5	1531</citation>
	<citation>1455	5	1531</citation>
	<citation>1531	5	1531</citation>
	<citation>1531	5	1531</citation>
	<citation>1531	5	1531</citation>
	<citation>1781	5	1531</citation>
	<citation>123	6	1531</citation>
	<citation>196	6	1531</citation>
	<citation>919	6	1531</citation>
	<citation>990	6	1531</citation>
	<citation>1007	6	1531</citation>
	<citation>1046	6	1531</citation>
	<citation>1131	6	1531</citation>
	<citation>1139	6	1531</citation>
	<citation>1140	6	1531</citation>
	<citation>1149	6	1531</citation>
	<citation>1198	6	1531</citation>
	<citation>1215	6	1531</citation>
	<citation>1223	6	1531</citation>
	<citation>1265	6	1531</citation>
	<citation>1303	6	1531</citation>
	<citation>1323	6	1531</citation>
	<citation>1358	6	1531</citation>
	<citation>1366	6	1531</citation>
	<citation>1421	6	1531</citation>
	<citation>1460	6	1531</citation>
	<citation>1462	6	1531</citation>
	<citation>1463	6	1531</citation>
	<citation>1467	6	1531</citation>
	<citation>1468	6	1531</citation>
	<citation>1477	6	1531</citation>
	<citation>1491	6	1531</citation>
	<citation>1496	6	1531</citation>
	<citation>1531	6	1531</citation>
	<citation>1535	6	1531</citation>
	<citation>1565	6	1531</citation>
	<citation>1601	6	1531</citation>
	<citation>1602	6	1531</citation>
	<citation>1613	6	1531</citation>
	<citation>1614	6	1531</citation>
	<citation>1626	6	1531</citation>
	<citation>1641	6	1531</citation>
	<citation>1787	6	1531</citation>
	<citation>1788	6	1531</citation>
	<citation>205	6	1531</citation>
	<citation>224	6	1531</citation>
	<citation>249	6	1531</citation>
	<citation>288	6	1531</citation>
	<citation>316	6	1531</citation>
	<citation>381	6	1531</citation>
	<citation>398	6	1531</citation>
	<citation>11	6	1531</citation>
	<citation>404	6	1531</citation>
	<citation>410	6	1531</citation>
	<citation>463	6	1531</citation>
	<citation>464	6	1531</citation>
	<citation>483	6	1531</citation>
	<citation>3184	6	1531</citation>
	<citation>3188	6	1531</citation>
	<citation>584	6	1531</citation>
	<citation>600	6	1531</citation>
	<citation>680	6	1531</citation>
	<citation>691	6	1531</citation>
	<citation>763	6	1531</citation>
	<citation>799	6	1531</citation>
	</citations>
	</document>
	<document id= '1530'>
	<title>The ML/I Macro Processor</title>
	<abstract>A general purpose macro processor called ML/I is described.  ML/I has been implemented on the  PDP-7 and I.C.T. Atlas 2 computers and is intended as a tool to allow users to extend any existing programming  language by incorporating new statements and other syntactic forms of their own choosing and in their  own notation.  This allows a complete user-oriented language to be built up with relative ease.</abstract>
	<conference>CACM October, 1967</conference>
	<authors>
	<author>Brown, P. J.</author>
	</authors>
	<location>CA671003 JB February 27, 1978  2:38 PM</location>
	<citations>
	<citation>1530	4	1530</citation>
	<citation>1530	4	1530</citation>
	<citation>1531	4	1530</citation>
	<citation>1565	4	1530</citation>
	<citation>1703	4	1530</citation>
	<citation>1781	4	1530</citation>
	<citation>1852	4	1530</citation>
	<citation>1945	4	1530</citation>
	<citation>2034	4	1530</citation>
	<citation>2036	4	1530</citation>
	<citation>1455	5	1530</citation>
	<citation>1530	5	1530</citation>
	<citation>1530	5	1530</citation>
	<citation>1530	5	1530</citation>
	<citation>1565	5	1530</citation>
	</citations>
	</document>
	<document id= '1529'>
	<title>Decomposition Programming An Analysis of Matrix Substructure</title>
	<abstract>A petroleum blending problem was analyzed in order to compare the primal and primal-dual decomposition  algorithms.  In the course of the analysis, a substructure was discovered which has relevance to the  relative performance of the two algorithms and to their absolute performance as compared with a standard  primal-Simplex solution without decomposition.</abstract>
	<conference>CACM October, 1967</conference>
	<authors>
	<author>Bell, E. J.</author>
	</authors>
	<location>CA671004 JB February 27, 1978  2:33 PM</location>
	<citations>
	<citation>1529	5	1529</citation>
	<citation>1529	5	1529</citation>
	<citation>1529	5	1529</citation>
	</citations>
	</document>
	<document id= '1528'>
	<title>Three Fonts of Computer Drawn Letters</title>
	<abstract>Detailed descriptions are given for three fonts of letters.  Letter shapes are entirely described  by numbers.  The basic vectors are in a general form so the fonts may be easily drawn on a variety of  computers and cathode-ray tubes.  The fonts include both upper and lower case Roman letters, mathematical  signs, and upper and lower case Greek letters.  Design of the fonts is described.  However, the principal  contribution of this paper concerns the fonts themselves.</abstract>
	<conference>CACM October, 1967</conference>
	<authors>
	<author>Mathews, M. V.</author>
	<author>Lochbaum, C.</author>
	<author>Moss, J. A.</author>
	</authors>
	<location>CA671005 JB February 27, 1978  2:24 PM</location>
	<citations>
	<citation>1528	5	1528</citation>
	<citation>1528	5	1528</citation>
	<citation>1528	5	1528</citation>
	<citation>1697	5	1528</citation>
	<citation>1528	6	1528</citation>
	</citations>
	</document>
	<document id= '1527'>
	<title>A Grammar Base Question Answering Procedure</title>
	<abstract>The subject of this paper is a procedure for the automatic retrieval of certain segments of  stored information, either explicitly or implicitly represented, through questions posed in natural language  sentences.  This procedure makes use of a sentence recognition device for the class of grammars which  will correctly decide between the grammatical and ungrammatical sentences of a natural language.  It  is possible to make use of a recognition device of this sort for the following reason: Much data is fully  expressible as a set of sentences in a natural language, a set which can be exhaustively and exclusively  generated by a grammar.  Based upon the rules of this grammar, a sentence recognizer will evaluate sentences,  questions in the normal situation.  Since the recognition function succeeds just in case the posed question  is drawn from the set of sentences expressing the data, or, more correctly, is grammatical in terms of  the grammar for this set of sentences, sentence recognition itself is a procedure for retrieving information.   When the recognition function succeeds, its value represents the requested information.</abstract>
	<conference>CACM October, 1967</conference>
	<authors>
	<author>Rosenbaum, P.</author>
	</authors>
	<location>CA671006 JB February 27, 1978  2:14 PM</location>
	<citations>
	<citation>1527	5	1527</citation>
	<citation>1527	5	1527</citation>
	<citation>1527	5	1527</citation>
	<citation>2092	5	1527</citation>
	<citation>2127	5	1527</citation>
	<citation>1155	6	1527</citation>
	<citation>1324	6	1527</citation>
	<citation>1487	6	1527</citation>
	<citation>1527	6	1527</citation>
	<citation>1527	6	1527</citation>
	<citation>1781	6	1527</citation>
	<citation>1856	6	1527</citation>
	</citations>
	</document>
	<document id= '1526'>
	<title>Multiprogramming under a Page on Demand Strategy</title>
	<abstract>A model of multiprogramming for a particular computer system using a page on demand strategy  is developed.  Analysis of this model is used to predict performance (measured by the average usage of  the CPU) when user programs are typical of those arising from an interactive time sharing environment.   The effect of several hardware modifications is also analyzed.  A parameter, readily calculated from  the hardware characteristics and the program statistics, is proposed for gauging the effect of multiprogramming.</abstract>
	<conference>CACM October, 1967</conference>
	<authors>
	<author>Smith, J. L.</author>
	</authors>
	<location>CA671007 JB February 27, 1978  2:07 PM</location>
	<citations>
	<citation>1526	5	1526</citation>
	<citation>1526	5	1526</citation>
	<citation>1526	5	1526</citation>
	<citation>1892	5	1526</citation>
	<citation>2068	5	1526</citation>
	<citation>2741	5	1526</citation>
	<citation>1526	6	1526</citation>
	<citation>1526	6	1526</citation>
	<citation>1526	6	1526</citation>
	<citation>1572	6	1526</citation>
	<citation>1728	6	1526</citation>
	<citation>1749	6	1526</citation>
	<citation>1751	6	1526</citation>
	<citation>1752	6	1526</citation>
	<citation>2454	6	1526</citation>
	</citations>
	</document>
	<document id= '1525'>
	<title>On Computing The Fast Fourier Transform</title>
	<abstract>Cooley and Tukey have proposed a fast algorithm for computing complex Fourier transform and  have shown major time savings in using it to compute large transforms on a digital computer.  With n  a power of two, computing time for this algorithm is proportional to n log2 n, a major improvement over  other methods with computing time proportional to n^2.  In this paper, the fast Fourier transform algorithm  is briefly reviewed and fast difference equation methods for accurately computing the needed trigonometric  function values are given.  The problem of computing a large Fourier transform on a system with virtual  memory is considered, and a solution is proposed.  This method has been used to compute complex Fourier  transforms of size n = 2^16 on a computer with 2^15 words of core storage; this exceeds by a factor of  eight the maximum radix two transform size with fixed allocation of this amount of core storage.  The  method has also been used to compute large mixed radix transforms.  A scaling plan for computing the  fast Fourier transform with fixed-point arithmetic is also given.</abstract>
	<conference>CACM October, 1967</conference>
	<authors>
	<author>Singleton, R. C.</author>
	</authors>
	<location>CA671008 JB February 27, 1978  2:03 PM</location>
	<citations>
	<citation>1525	5	1525</citation>
	<citation>1525	5	1525</citation>
	<citation>1525	5	1525</citation>
	<citation>1668	5	1525</citation>
	<citation>1669	5	1525</citation>
	<citation>1679	5	1525</citation>
	<citation>1728	5	1525</citation>
	<citation>2859	5	1525</citation>
	<citation>1525	6	1525</citation>
	<citation>1525	6	1525</citation>
	<citation>1525	6	1525</citation>
	<citation>1525	6	1525</citation>
	<citation>1525	6	1525</citation>
	<citation>1647	6	1525</citation>
	<citation>1669	6	1525</citation>
	<citation>1676	6	1525</citation>
	<citation>1785	6	1525</citation>
	</citations>
	</document>
	<document id= '1524'>
	<title>A Stopping Criterion for Polynomial Root Finding</title>
	<abstract>When searching for the root of a polynomial, it is generally difficult to know just when to  accept a number as an adequate approximation to the root.  In this paper an algorithm is presented which  allows one to terminate the iteration process on the basis of calculated bounds for the roundoff error  which occurs in evaluating the polynomial.  This stopping criterion has been tested on numerous examples  and has been found to serve as a satisfactory means for accepting a complex number as a zero of a real  polynomial.</abstract>
	<conference>CACM October, 1967</conference>
	<authors>
	<author>Adams, D. A.</author>
	</authors>
	<location>CA671009 JB February 27, 1978  1:56 PM</location>
	<citations>
	<citation>1524	4	1524</citation>
	<citation>1524	4	1524</citation>
	<citation>1524	4	1524</citation>
	<citation>1931	4	1524</citation>
	<citation>2214	4	1524</citation>
	<citation>2544	4	1524</citation>
	<citation>1197	5	1524</citation>
	<citation>1524	5	1524</citation>
	<citation>1524	5	1524</citation>
	<citation>1524	5	1524</citation>
	<citation>311	5	1524</citation>
	<citation>2544	5	1524</citation>
	<citation>879	5	1524</citation>
	<citation>1524	6	1524</citation>
	<citation>311	6	1524</citation>
	<citation>2214	6	1524</citation>
	</citations>
	</document>
	<document id= '1523'>
	<title>SHARER, a Time Sharing System for the CDC 6600</title>
	<abstract>A time sharing system embedded within the standard batch processing system for the CDC 6600  is described.  The system is general purpose and file-based, providing facilities for file input, manipulation,  editing, compilation, and conversational execution.  It uses a simple scheme for system extension for  a machine with only one relocation and memory bound register.  No attempt was made to use reentrant code,  or to simulate segmentation or paging.  Implementation time was approximately six man-years, with the  majority of the code being written in FORTRAN.</abstract>
	<conference>CACM October, 1967</conference>
	<authors>
	<author>Harrison, M. C.</author>
	<author>Schwartz, J. T.</author>
	</authors>
	<location>CA671011 JB February 27, 1978 1:53 PM</location>
	<citations>
	<citation>1458	4	1523</citation>
	<citation>1523	4	1523</citation>
	<citation>1603	4	1523</citation>
	<citation>1698	4	1523</citation>
	<citation>1747	4	1523</citation>
	<citation>1748	4	1523</citation>
	<citation>1854	4	1523</citation>
	<citation>1877	4	1523</citation>
	<citation>1960	4	1523</citation>
	<citation>2377	4	1523</citation>
	<citation>2378	4	1523</citation>
	<citation>2497	4	1523</citation>
	<citation>2558	4	1523</citation>
	<citation>2625	4	1523</citation>
	<citation>2632	4	1523</citation>
	<citation>2840	4	1523</citation>
	<citation>2941	4	1523</citation>
	<citation>3105	4	1523</citation>
	<citation>3144	4	1523</citation>
	<citation>1471	5	1523</citation>
	<citation>1523	5	1523</citation>
	<citation>1523	5	1523</citation>
	<citation>1523	5	1523</citation>
	<citation>1657	5	1523</citation>
	<citation>2080	5	1523</citation>
	<citation>2357	5	1523</citation>
	<citation>2536	5	1523</citation>
	<citation>1523	6	1523</citation>
	<citation>1523	6	1523</citation>
	<citation>1523	6	1523</citation>
	<citation>1523	6	1523</citation>
	<citation>1829	6	1523</citation>
	<citation>2035	6	1523</citation>
	</citations>
	</document>
	<document id= '1522'>
	<citations>
	<citation>1522	5	1522</citation>
	<citation>1522	5	1522</citation>
	<citation>1522	5	1522</citation>
	</citations>
	<title>Chebyschev Quadrature (Algorithm 279 [D1])</title>
	<conference>CACM October, 1967</conference>
	<authors>
	<author>Hillstrom, K.</author>
	</authors>
	<location>CA671012c JB March 23, 1978  2:31 PM</location>
	</document>
	<document id= '1521'>
	<citations>
	<citation>1521	5	1521</citation>
	<citation>1521	5	1521</citation>
	<citation>1521	5	1521</citation>
	<citation>2354	5	1521</citation>
	<citation>2355	5	1521</citation>
	<citation>1418	6	1521</citation>
	<citation>1418	6	1521</citation>
	<citation>1521	6	1521</citation>
	<citation>1521	6	1521</citation>
	<citation>1597	6	1521</citation>
	<citation>1597	6	1521</citation>
	<citation>1679	6	1521</citation>
	<citation>1883	6	1521</citation>
	<citation>2040	6	1521</citation>
	<citation>2350	6	1521</citation>
	<citation>2350	6	1521</citation>
	<citation>2354	6	1521</citation>
	<citation>2355	6	1521</citation>
	</citations>
	<title>Multi-Dimensional Partition Generator (Algorithm 313 [A1])</title>
	<conference>CACM October, 1967</conference>
	<authors>
	<author>Bratley, P.</author>
	<author>McKay, J. K. S.</author>
	</authors>
	<location>CA671012b JB March 23, 1978  2:26 PM</location>
	</document>
	<document id= '1520'>
	<citations>
	<citation>1520	5	1520</citation>
	<citation>1520	5	1520</citation>
	<citation>1520	5	1520</citation>
	</citations>
	<title>Absolute Value and Square Root of a Complex Number (Algorithm 312 [A2])</title>
	<conference>CACM October, 1967</conference>
	<authors>
	<author>Friedland, P.</author>
	</authors>
	<location>CA671012a JB February 27, 1978  1:49 PM</location>
	</document>
	<document id= '1519'>
	<title>GEORGE 3-A General Purpose Time Sharing and Operating System</title>
	<abstract>An Operating System is described which will run on a wide variety of configurations of the  I.C.T. 1900, and can handle a large number of online console users while at the same time running several  off line (background) jobs.  The system is not oriented towards either mode and can be either a batch  processing system (such as the ATLAS Supervisor, IBSYS, or GECOS), or a multiaccess system (resembling,  to the user, CTSS or MULTICS), or both simultaneously, depending on the installation, which can adjust  the Schedulers.  Both online users and off line jobs use a common Command Language.  The system includes  a Multilevel device-independent File Store.</abstract>
	<conference>CACM November, 1967</conference>
	<authors>
	<author>Oestreicher, M. D.</author>
	<author>Bailey, M. J.</author>
	<author>Strauss, J. I.</author>
	</authors>
	<location>CA671101 JB February 27, 1978  1:47 PM</location>
	<citations>
	<citation>1519	5	1519</citation>
	<citation>1519	5	1519</citation>
	<citation>1519	5	1519</citation>
	</citations>
	</document>
	<document id= '1518'>
	<title>An Experimental Model of System/360</title>
	<abstract>The problem of predicting the performance of modern computer systems is formidable.  One general  technique which can ease this problem is macroscopic simulation.  This paper reports on the applicability  of that technique to System/360.  The paper describes an experimental model of System/360-its hardware,  software, and its environment.  The measures of system performance produced by the model consist of statistics  relating to turnaround time, throughput, hardware utilization, software utilization, and queueing processes.   The model is mechanized in SIMSCRIPT and consists of some 1750 statements.  An auxiliary programs, the  Job Generator, creates automatically the properties of System/360 jobs that get simulated.</abstract>
	<conference>CACM November, 1967</conference>
	<authors>
	<author>Katz, J. H.</author>
	</authors>
	<location>CA671102 JB February 26,1978  3:20 PM</location>
	<citations>
	<citation>1518	5	1518</citation>
	<citation>1518	5	1518</citation>
	<citation>1518	5	1518</citation>
	<citation>1805	5	1518</citation>
	<citation>1912	5	1518</citation>
	<citation>1518	6	1518</citation>
	<citation>1518	6	1518</citation>
	<citation>1572	6	1518</citation>
	<citation>1748	6	1518</citation>
	</citations>
	</document>
	<document id= '1517'>
	<title>Methods for Analyzing Data from Computer Simulation Experiments</title>
	<abstract>This paper addresses itself to the problem of analyzing data generated by computer simulations  of economic systems.  We first turn to a hypothetical firm, whose operation is represented by  single-channel,  multistation queueing model.  The firm seeks to maximize total expected profit for the coming period  by selecting one of five operating plans, where each plan incorporates a certain marketing strategy,  an allocation of productive inputs, and a total cost.  The results of the simulated activity under each  plan are subjected to an F-test, two multiple comparison methods, and a multiple ranking method.  We  illustrate, compare, and evaluate these techniques.  The paper adopts the position that the particular  technique of analysis (possibly not any one of the above) chosen by the experimenter should be an expression  of his experimental objective: The F-test tests the homogeneity of the plans; multiple comparison methods  quantify their differences; and multiple ranking methods directly identify the one best plan or best  plans.</abstract>
	<conference>CACM November, 1967</conference>
	<authors>
	<author>Naylor, T. H.</author>
	<author>Wertz, K.</author>
	<author>Wonnacott, T. H.</author>
	</authors>
	<location>CA671103 JB February 26, 1978  3:15 PM</location>
	<citations>
	<citation>1517	4	1517</citation>
	<citation>1435	5	1517</citation>
	<citation>1517	5	1517</citation>
	<citation>1517	5	1517</citation>
	<citation>1517	5	1517</citation>
	</citations>
	</document>
	<document id= '1516'>
	<title>Automatic Data Compression</title>
	<abstract>The "information explosion" noted in recent years makes it essential that storage requirements  for all information be kept to a minimum.  A fully automatic and rapid three-part compressor which can  be used with "any" body of information to greatly reduce slow external storage requirements and to increase  the rate of information transmission through a computer is described in this paper.  The system will  also automatically decode the compressed information on an item-by-item basis when it is required.  The  three component compressors, which can be used separately to accomplish their specific tasks, are discussed:  NUPAK for the automatic compression of numerical data, ANPAK for the automatic compression of "any" information,  and IOPAK for further compression of information to be stored on tape or cards.</abstract>
	<conference>CACM November, 1967</conference>
	<authors>
	<author>Marron, B. A.</author>
	<author>DeMaine, P. A. D.</author>
	</authors>
	<location>CA671104 JB February 26, 1978  3:08 PM</location>
	<citations>
	<citation>1516	5	1516</citation>
	<citation>1516	5	1516</citation>
	<citation>1516	5	1516</citation>
	</citations>
	</document>
	<document id= '1515'>
	<title>A Computer System for Inference Execution and Data Retrieval</title>
	<abstract>This paper presents a RAND project concerned with the use of computers as assistants in the  logical analysis of large collections of factual data.  A system called Relational Data File was developed  for this purpose.  The Relational Data File is briefly detailed and problems arising from its implementation  are discussed.</abstract>
	<conference>CACM November, 1967</conference>
	<authors>
	<author>Levien, R. E.</author>
	</authors>
	<location>CA671105 JB February 26, 1978  3:02 PM</location>
	<citations>
	<citation>1155	4	1515</citation>
	<citation>1456	4	1515</citation>
	<citation>1468	4	1515</citation>
	<citation>1515	4	1515</citation>
	<citation>1515	4	1515</citation>
	<citation>1699	4	1515</citation>
	<citation>1856	4	1515</citation>
	<citation>2096	4	1515</citation>
	<citation>2127	4	1515</citation>
	<citation>2127	4	1515</citation>
	<citation>2210	4	1515</citation>
	<citation>1155	5	1515</citation>
	<citation>1324	5	1515</citation>
	<citation>1515	5	1515</citation>
	<citation>1515	5	1515</citation>
	<citation>1515	5	1515</citation>
	<citation>2046	5	1515</citation>
	<citation>2710	5	1515</citation>
	<citation>1515	6	1515</citation>
	<citation>1515	6	1515</citation>
	<citation>2046	6	1515</citation>
	<citation>2715	6	1515</citation>
	<citation>616	6	1515</citation>
	</citations>
	</document>
	<document id= '1514'>
	<title>On the Expected Gain From Adjust ing Matched Term Retrieval Systems</title>
	<abstract>A file adjustment procedure based on maximizing the Bayes expected gain proposed for matched  term retrieval systems.  The expected gain and its probability distribution are derived as a function  of: (1) the prior proportion of omitted terms, and (2) the coefficient of separation between two distributions  corresponding to values of an adjustment statistic.  An example evaluates the gain parameters for a typical  information retrieval system.</abstract>
	<conference>CACM November, 1967</conference>
	<authors>
	<author>Shumway, R. H.</author>
	</authors>
	<location>CA671106 JB February 26, 1978  2:59 PM</location>
	<citations>
	<citation>1514	5	1514</citation>
	<citation>1514	5	1514</citation>
	<citation>1514	5	1514</citation>
	</citations>
	</document>
	<document id= '1513'>
	<citations>
	<citation>1513	5	1513</citation>
	<citation>1513	5	1513</citation>
	<citation>1513	5	1513</citation>
	</citations>
	<title>PERMUTATION (Algorithm 317 [G6])</title>
	<conference>CACM November, 1967</conference>
	<authors>
	<author>Robinson, C. L.</author>
	</authors>
	<location>CA671107d JB March 23, 1978  2:21 PM</location>
	</document>
	<document id= '1512'>
	<citations>
	<citation>1512	5	1512</citation>
	<citation>1512	5	1512</citation>
	<citation>1512	5	1512</citation>
	</citations>
	<title>Solution of Simultaneous Non-Linear Equations (Algorithm 316[C5])</title>
	<conference>CACM November, 1967</conference>
	<authors>
	<author>Brown, K. M.</author>
	</authors>
	<location>CA671107c JB March 23, 1978  2:19 PM</location>
	</document>
	<document id= '1511'>
	<citations>
	<citation>1511	5	1511</citation>
	<citation>1511	5	1511</citation>
	<citation>1511	5	1511</citation>
	<citation>1820	5	1511</citation>
	<citation>1511	6	1511</citation>
	</citations>
	<title>The Damped Taylor's Series Method for Minimizing a Sum of Squares and for Solving Systems of  Nonlinear Equations</title>
	<conference>CACM November, 1967</conference>
	<authors>
	<author>Spath, H.</author>
	</authors>
	<location>CA671107b JB March 23, 1978  2:17 PM</location>
	</document>
	<document id= '1510'>
	<citations>
	<citation>1510	5	1510</citation>
	<citation>1510	5	1510</citation>
	<citation>1510	5	1510</citation>
	</citations>
	<title>Finding a Solution of N Functional Equations in N Unknown (Algorithm 314 [C5])</title>
	<conference>CACM November, 1967</conference>
	<authors>
	<author>Dulley, D.B.</author>
	<author>Pitteway, L. V.</author>
	</authors>
	<location>CA671107a JB February 26, 1978  2:54 PM</location>
	</document>
	<document id= '1509'>
	<citations>
	<citation>1509	5	1509</citation>
	<citation>1509	5	1509</citation>
	<citation>1509	5	1509</citation>
	</citations>
	<title>Recorded Magnetic Tape for Information Interchange (200 CPI, NRZI) (Proposed USA Standard)</title>
	<conference>CACM November, 1967</conference>
	<location>CA671108 JB February 26, 1978  2:52 PM</location>
	</document>
	<document id= '1508'>
	<citations>
	<citation>1508	5	1508</citation>
	<citation>1508	5	1508</citation>
	<citation>1508	5	1508</citation>
	</citations>
	<title>Magnetic Tape Labels for Information Interchange (Proposed USA Standard)</title>
	<conference>CACM November, 1967</conference>
	<location>CA671109 JB February 26, 1978  2:49 PM</location>
	</document>
	<document id= '1507'>
	<title>A Multiprogramming Environment for Online Data Acquis ition and Analysis</title>
	<abstract>An experimental system for acquis ition and analysis of large bodies of data derived from scientific  experiments is described.  Its architecture and implementation is largely based on certain objectives  and characteristics of a general data analysis scheme.  Early applications have been oriented towards  the investigation of data obtained in biological research.  Some of the problems encountered by the chosen  approach are discussed.</abstract>
	<conference>CACM December, 1967</conference>
	<authors>
	<author>Lockemann, P. C.</author>
	<author>Knutsen, W. D.</author>
	</authors>
	<location>CA671201 JB February 26, 1978  2:48 PM</location>
	<citations>
	<citation>1507	5	1507</citation>
	<citation>1507	5	1507</citation>
	<citation>1507	5	1507</citation>
	<citation>1712	5	1507</citation>
	<citation>1507	6	1507</citation>
	</citations>
	</document>
	<document id= '1506'>
	<title>The LACONIQ Monitor: Time Sharing for Online Dialogues</title>
	<abstract>The LACONIQ (Laboratory Computer Online Inquiry) Monitor was developed primarily to support  non-numerical applications such as retrieval from very large files by means of a "dialogue" between a  system user and a retrieval application.  The monitor was designed so that it could work with a small  computer (an IBM System 360/30).  Therefore techniques for resource allocation were important.  For this  reason the use of core storage, computational facilities, and input-output were all scheduled.  An unusual  feature of the system is that it is event-driven rather than clock-driven.  The program segments called  into execution by the remote CRT consoles are invariably run to completion rather than "rolled-out" to  be brought back at a later time.</abstract>
	<conference>CACM December, 1967</conference>
	<authors>
	<author>Drew, D. L.</author>
	</authors>
	<location>CA671202 JB February 26, 1978  2:45 PM</location>
	<citations>
	<citation>1506	5	1506</citation>
	<citation>1506	5	1506</citation>
	<citation>1506	5	1506</citation>
	</citations>
	</document>
	<document id= '1505'>
	<title>A System Organization for Resource Allocation</title>
	<abstract>This paper introduces a system for resource management using the concepts of "process," facility,"  and "event."  Except for the processor no attempt has been made to give serious suggestions for the policy  to be followed for resource allocation.  However, a basic framework is provided in which a system analyst  can express solutions to resource management problems.  The paper is divided into a tutorial presentation,  a description of the system primitives, and a small collection of examples of the use of the primitives.</abstract>
	<conference>CACM December, 1967</conference>
	<authors>
	<author>Dahm, D. M.</author>
	<author>Gerbstadt, F. H.</author>
	<author>Pacelli, M. M.</author>
	</authors>
	<location>CA671203 JB February 26, 1978  2:40 PM</location>
	<citations>
	<citation>1505	5	1505</citation>
	<citation>1505	5	1505</citation>
	<citation>1505	5	1505</citation>
	</citations>
	</document>
	<document id= '1504'>
	<title>Algorithms for Finding a Fundamental Set of Cycles for an Undirected Linear Graph</title>
	<abstract>Given the adjacency matrix of the graph, the algorithm presented in this paper finds a spanning  tree and then constructs the set of fundamental cycles.  Our algorithm is slower than an algorithm presented  by Welch by a ratio of N/3 (N is the number of nodes) but requires less storage.  For graphs with a large  number of nodes and edges, when storage is limited our algorithm is superior to Welch's; however, when  the graphs are small, or machine storage is very large, Welch's algorithm is superior.  Timing estimates  and storage requirements for both methods are presented.</abstract>
	<conference>CACM December, 1967</conference>
	<authors>
	<author>Gotlieb, C. C.</author>
	<author>Corneil, D. G.</author>
	</authors>
	<location>CA671204 JB February 26, 19782:35 PM</location>
	<citations>
	<citation>1504	4	1504</citation>
	<citation>3040	4	1504</citation>
	<citation>1145	5	1504</citation>
	<citation>1504	5	1504</citation>
	<citation>1504	5	1504</citation>
	<citation>1504	5	1504</citation>
	<citation>1847	5	1504</citation>
	<citation>1961	5	1504</citation>
	<citation>2052	5	1504</citation>
	<citation>1008	6	1504</citation>
	<citation>1013	6	1504</citation>
	<citation>1369	6	1504</citation>
	<citation>1504	6	1504</citation>
	<citation>1504	6	1504</citation>
	<citation>1504	6	1504</citation>
	<citation>1540	6	1504</citation>
	<citation>1847	6	1504</citation>
	</citations>
	</document>
	<document id= '1503'>
	<title>A SIMSCRIPT-FORTRAN Case Study</title>
	<abstract>Two programs for a vehicle dispatching model, one written in 7040 SIMSCRIPT and the other in  7040 FORTRAN IV are compared. The comparison is made in terms of basic program design decisions, storage  requirements, computer time used, and the ease of making changes.  In the SIMSCRIPT program, the primary  design considerations center around the choice of model variables, model changing events, and model testing.   In the FORTRAN program, basic design problems relate to the representation of the passage of time, the  allocation of storage, and the organization of input data.  The comparison of these differently designed  programs shows that the SIMSCRIPT program uses more computer storage and more computer time, but requires  fewer program changes to introduce model revisions.</abstract>
	<conference>CACM December, 1967</conference>
	<authors>
	<author>Weinert, A. E.</author>
	</authors>
	<location>CA671205 JB February 26, 1978  2:30 PM</location>
	<citations>
	<citation>1503	4	1503</citation>
	<citation>1781	4	1503</citation>
	<citation>1860	4	1503</citation>
	<citation>2091	4	1503</citation>
	<citation>1366	5	1503</citation>
	<citation>1503	5	1503</citation>
	<citation>1503	5	1503</citation>
	<citation>1503	5	1503</citation>
	</citations>
	</document>
	<document id= '1502'>
	<title>An Online Editor</title>
	<abstract>An online, interactive system for test editing is described in detail, with remarks on the  theoretical and experimental justification for its form.  Emphasis throughout the system is on providing  maximum convenience and power for the user.  Notable features are its ability to handle any piece of  text, the content-searching facility, and the character-by-character editing operations.  The editor  can be programmed to a limited extent.</abstract>
	<conference>CACM December, 1967</conference>
	<authors>
	<author>Deutsch, L. P.</author>
	<author>Lampson, B. W.</author>
	</authors>
	<location>CA671206 JB February 26, 1978  2:25 PM</location>
	<citations>
	<citation>1502	5	1502</citation>
	<citation>1502	5	1502</citation>
	<citation>1502	5	1502</citation>
	<citation>2299	5	1502</citation>
	<citation>2501	5	1502</citation>
	<citation>2629	5	1502</citation>
	<citation>2915	5	1502</citation>
	<citation>3114	5	1502</citation>
	<citation>1502	6	1502</citation>
	<citation>1502	6	1502</citation>
	<citation>1502	6	1502</citation>
	<citation>1502	6	1502</citation>
	<citation>1502	6	1502</citation>
	<citation>1641	6	1502</citation>
	<citation>1751	6	1502</citation>
	<citation>1900	6	1502</citation>
	<citation>2380	6	1502</citation>
	<citation>2499	6	1502</citation>
	<citation>2745	6	1502</citation>
	</citations>
	</document>
	<document id= '1501'>
	<title>Eigenvectors of a 2n x 2n Matrix</title>
	<abstract>It has been known that the eigenvalues of a certain 2n x 2n matrix can be obtained by use of  two smaller matrices of order n which can be easily constructed.  An algorithm is given to obtain the  eigenvectors of the 2n x 2n matrix by use of the eigenvectors of the smaller matrices.</abstract>
	<conference>CACM December, 1967</conference>
	<authors>
	<author>Charmonman, S.</author>
	</authors>
	<location>CA671207 JB February 26, 1978  2:22 PM</location>
	<citations>
	<citation>1501	5	1501</citation>
	<citation>1501	5	1501</citation>
	<citation>1501	5	1501</citation>
	</citations>
	</document>
	<document id= '1500'>
	<citations>
	<citation>1500	5	1500</citation>
	<citation>1500	5	1500</citation>
	<citation>1500	5	1500</citation>
	</citations>
	<title>Chebyschev Curve-Fit (Algorithm 91 [E2])</title>
	<conference>CACM December, 1967</conference>
	<authors>
	<author>Boothroyd, J.</author>
	</authors>
	<location>CA671208b JB March 23, 1978  2:11 PM</location>
	</document>
	<document id= '1499'>
	<citations>
	<citation>1499	5	1499</citation>
	<citation>1499	5	1499</citation>
	<citation>1499	5	1499</citation>
	</citations>
	<title>Chebyschev Curve-Fit (revised) (Algorithm 318 [E2])</title>
	<conference>CACM December, 1967</conference>
	<authors>
	<author>Boothroyd, J.</author>
	</authors>
	<location>CA671208a JB February 26, 1978  2:20 PM</location>
	</document>
	<document id= '1498'>
	<title>The ALCOR Illinois 7090/7094 Post Mortem Dump</title>
	<abstract>A dump technique for programs written in ALGOL 60 is described.  This technique provides an  intelligible analysis of an unsuccessful computation process in terms of the original source program.</abstract>
	<conference>CACM December, 1967</conference>
	<authors>
	<author>Bayer, R.</author>
	<author>Gries, D.</author>
	<author>Paul, M.</author>
	<author>Wiehle, H. R.</author>
	</authors>
	<location>CA671209 JB February 26, 1978  2:18 PM</location>
	<citations>
	<citation>1086	4	1498</citation>
	<citation>1132	4	1498</citation>
	<citation>1234	4	1498</citation>
	<citation>1263	4	1498</citation>
	<citation>1265	4	1498</citation>
	<citation>1270	4	1498</citation>
	<citation>1323	4	1498</citation>
	<citation>1358	4	1498</citation>
	<citation>1379	4	1498</citation>
	<citation>1380	4	1498</citation>
	<citation>1453	4	1498</citation>
	<citation>1464	4	1498</citation>
	<citation>1484	4	1498</citation>
	<citation>1491	4	1498</citation>
	<citation>1498	4	1498</citation>
	<citation>1498	4	1498</citation>
	<citation>1613	4	1498</citation>
	<citation>1614	4	1498</citation>
	<citation>1781	4	1498</citation>
	<citation>1781	4	1498</citation>
	<citation>1787	4	1498</citation>
	<citation>1825	4	1498</citation>
	<citation>1860	4	1498</citation>
	<citation>2083	4	1498</citation>
	<citation>2178	4	1498</citation>
	<citation>2179	4	1498</citation>
	<citation>2252	4	1498</citation>
	<citation>2325	4	1498</citation>
	<citation>2341	4	1498</citation>
	<citation>2546	4	1498</citation>
	<citation>2645	4	1498</citation>
	<citation>2652	4	1498</citation>
	<citation>2684	4	1498</citation>
	<citation>2842	4	1498</citation>
	<citation>2929	4	1498</citation>
	<citation>2934	4	1498</citation>
	<citation>3069	4	1498</citation>
	<citation>669	4	1498</citation>
	<citation>679	4	1498</citation>
	<citation>691	4	1498</citation>
	<citation>761	4	1498</citation>
	<citation>949	4	1498</citation>
	<citation>989	4	1498</citation>
	<citation>1215	5	1498</citation>
	<citation>1498	5	1498</citation>
	<citation>1498	5	1498</citation>
	<citation>1498	5	1498</citation>
	<citation>3184	5	1498</citation>
	</citations>
	</document>
	<document id= '1497'>
	<title>On the Normalization Requirement of Divisor in Divide- and- Correct Methods</title>
	<abstract>This paper presents an analysis on the normalization requirement of the divisor in a divide-and-correct  method.  This analysis is made subject to the condition that not more than one correction is required  to obtain the true quotient character, from the trial estimate got from the division of a two-precision  segment of every partial remainder by a suitably rounded single-precision divisor.  (This segmented division  is denoted here as a (2, 1) precision basic division.)  It is found that the normalization requirement  could be narrowed down to a smaller range of divisors, provided the magnitude of the character next to  the leading character of the divisor is known.  If, however, the normalization is to be eliminated one  has to choose proper higher precision segments of operands for the basic division.  Also considered is  the possibility of eliminating the normalization by an increase on the number of corrections on the quotient  estimate got from a (2, 1) precision basic division.  It is shown that such a scheme is economical only  for small radices.</abstract>
	<conference>CACM December, 1967</conference>
	<authors>
	<author>Krishnamurthy, E. V.</author>
	<author>Nandi, S. K.</author>
	</authors>
	<location>CA671210 JB February 26, 1978  2:15 PM</location>
	<citations>
	<citation>1026	4	1497</citation>
	<citation>1258	4	1497</citation>
	<citation>1258	4	1497</citation>
	<citation>1292	4	1497</citation>
	<citation>1292	4	1497</citation>
	<citation>1497	4	1497</citation>
	<citation>1497	4	1497</citation>
	<citation>1497	4	1497</citation>
	<citation>1497	4	1497</citation>
	<citation>1593	4	1497</citation>
	<citation>1975	4	1497</citation>
	<citation>1975	4	1497</citation>
	<citation>2605	4	1497</citation>
	<citation>107	5	1497</citation>
	<citation>1026	5	1497</citation>
	<citation>1292	5	1497</citation>
	<citation>1497	5	1497</citation>
	<citation>1497	5	1497</citation>
	<citation>1497	5	1497</citation>
	<citation>1593	5	1497</citation>
	<citation>1975	5	1497</citation>
	<citation>1026	6	1497</citation>
	<citation>1292	6	1497</citation>
	<citation>1497	6	1497</citation>
	</citations>
	</document>
	<document id= '1496'>
	<title>A Formal Semantics for Computer Languages and its Application In a Compiler-Compiler</title>
	<abstract>A semantic meta-language has been developed for representing the meanings of statements in  a large class of computer languages.  This meta-language has been the basis for construction of an efficient,  functioning compiler-compiler.  An informal discussion of the meta-language based on the example of a  complete translator for a small language is presented.</abstract>
	<conference>CACM January, 1966</conference>
	<authors>
	<author>Feldman, J. A.</author>
	</authors>
	<location>CA660101 JB March 3, 1978  4:31 PM</location>
	<citations>
	<citation>1046	4	1496</citation>
	<citation>1086	4	1496</citation>
	<citation>1105	4	1496</citation>
	<citation>1139	4	1496</citation>
	<citation>1140	4	1496</citation>
	<citation>1234	4	1496</citation>
	<citation>1263	4	1496</citation>
	<citation>1265	4	1496</citation>
	<citation>1496	4	1496</citation>
	<citation>1496	4	1496</citation>
	<citation>1496	4	1496</citation>
	<citation>1683	4	1496</citation>
	<citation>1768	4	1496</citation>
	<citation>1781	4	1496</citation>
	<citation>1787	4	1496</citation>
	<citation>1824	4	1496</citation>
	<citation>1945	4	1496</citation>
	<citation>2061	4	1496</citation>
	<citation>2126	4	1496</citation>
	<citation>2546	4	1496</citation>
	<citation>464	4	1496</citation>
	<citation>584	4	1496</citation>
	<citation>631	4	1496</citation>
	<citation>653	4	1496</citation>
	<citation>680	4	1496</citation>
	<citation>763	4	1496</citation>
	<citation>795	4	1496</citation>
	<citation>799	4	1496</citation>
	<citation>945	4	1496</citation>
	<citation>1137	5	1496</citation>
	<citation>1141	5	1496</citation>
	<citation>1396	5	1496</citation>
	<citation>1496	5	1496</citation>
	<citation>1496	5	1496</citation>
	<citation>1496	5	1496</citation>
	<citation>1767	5	1496</citation>
	<citation>1781	5	1496</citation>
	<citation>1787	5	1496</citation>
	<citation>1860	5	1496</citation>
	<citation>1945	5	1496</citation>
	<citation>1988	5	1496</citation>
	<citation>2252	5	1496</citation>
	<citation>404	5	1496</citation>
	<citation>823	6	1496</citation>
	<citation>123	6	1496</citation>
	<citation>196	6	1496</citation>
	<citation>196	6	1496</citation>
	<citation>196	6	1496</citation>
	<citation>914	6	1496</citation>
	<citation>915	6	1496</citation>
	<citation>917	6	1496</citation>
	<citation>919	6	1496</citation>
	<citation>964	6	1496</citation>
	<citation>984	6	1496</citation>
	<citation>989	6	1496</citation>
	<citation>990	6	1496</citation>
	<citation>990	6	1496</citation>
	<citation>1007	6	1496</citation>
	<citation>1012	6	1496</citation>
	<citation>1028	6	1496</citation>
	<citation>1029	6	1496</citation>
	<citation>1046	6	1496</citation>
	<citation>1083	6	1496</citation>
	<citation>1084	6	1496</citation>
	<citation>1098	6	1496</citation>
	<citation>1122	6	1496</citation>
	<citation>1131	6	1496</citation>
	<citation>1132	6	1496</citation>
	<citation>1138	6	1496</citation>
	<citation>1139	6	1496</citation>
	<citation>1139	6	1496</citation>
	<citation>1140	6	1496</citation>
	<citation>1141	6	1496</citation>
	<citation>1141	6	1496</citation>
	<citation>1149	6	1496</citation>
	<citation>1198	6	1496</citation>
	<citation>1200	6	1496</citation>
	<citation>1214	6	1496</citation>
	<citation>1215	6	1496</citation>
	<citation>1215	6	1496</citation>
	<citation>1223	6	1496</citation>
	<citation>1223	6	1496</citation>
	<citation>1265	6	1496</citation>
	<citation>1265	6	1496</citation>
	<citation>1278	6	1496</citation>
	<citation>1303	6	1496</citation>
	<citation>1323	6	1496</citation>
	<citation>1334	6	1496</citation>
	<citation>1336	6	1496</citation>
	<citation>1358	6	1496</citation>
	<citation>1358	6	1496</citation>
	<citation>1365	6	1496</citation>
	<citation>1366	6	1496</citation>
	<citation>1366	6	1496</citation>
	<citation>1386	6	1496</citation>
	<citation>1387	6	1496</citation>
	<citation>1388	6	1496</citation>
	<citation>1389	6	1496</citation>
	<citation>1392	6	1496</citation>
	<citation>1393	6	1496</citation>
	<citation>1394	6	1496</citation>
	<citation>1395	6	1496</citation>
	<citation>1396	6	1496</citation>
	<citation>1396	6	1496</citation>
	<citation>1397	6	1496</citation>
	<citation>1421	6	1496</citation>
	<citation>1421	6	1496</citation>
	<citation>1455	6	1496</citation>
	<citation>1460	6	1496</citation>
	<citation>1462	6	1496</citation>
	<citation>1463	6	1496</citation>
	<citation>1467	6	1496</citation>
	<citation>1467	6	1496</citation>
	<citation>1468	6	1496</citation>
	<citation>1468	6	1496</citation>
	<citation>1477	6	1496</citation>
	<citation>1477	6	1496</citation>
	<citation>1487	6	1496</citation>
	<citation>1491	6	1496</citation>
	<citation>1491	6	1496</citation>
	<citation>1491	6	1496</citation>
	<citation>1496	6	1496</citation>
	<citation>1496	6	1496</citation>
	<citation>1496	6	1496</citation>
	<citation>1496	6	1496</citation>
	<citation>1496	6	1496</citation>
	<citation>1496	6	1496</citation>
	<citation>1496	6	1496</citation>
	<citation>1496	6	1496</citation>
	<citation>1531	6	1496</citation>
	<citation>1535	6	1496</citation>
	<citation>1565	6	1496</citation>
	<citation>1601	6	1496</citation>
	<citation>1602	6	1496</citation>
	<citation>1613	6	1496</citation>
	<citation>1614	6	1496</citation>
	<citation>1626	6	1496</citation>
	<citation>1626	6	1496</citation>
	<citation>1641	6	1496</citation>
	<citation>1641	6	1496</citation>
	<citation>1781	6	1496</citation>
	<citation>1785	6	1496</citation>
	<citation>1786	6	1496</citation>
	<citation>1787	6	1496</citation>
	<citation>1788	6	1496</citation>
	<citation>205	6	1496</citation>
	<citation>224	6	1496</citation>
	<citation>224	6	1496</citation>
	<citation>249	6	1496</citation>
	<citation>284	6	1496</citation>
	<citation>288	6	1496</citation>
	<citation>316	6	1496</citation>
	<citation>378	6	1496</citation>
	<citation>381	6	1496</citation>
	<citation>381	6	1496</citation>
	<citation>398	6	1496</citation>
	<citation>11	6	1496</citation>
	<citation>11	6	1496</citation>
	<citation>14	6	1496</citation>
	<citation>2155	6	1496</citation>
	<citation>404	6	1496</citation>
	<citation>407	6	1496</citation>
	<citation>410	6	1496</citation>
	<citation>463	6	1496</citation>
	<citation>464	6	1496</citation>
	<citation>483	6	1496</citation>
	<citation>483	6	1496</citation>
	<citation>3184	6	1496</citation>
	<citation>3184	6	1496</citation>
	<citation>3184	6	1496</citation>
	<citation>3188	6	1496</citation>
	<citation>3199	6	1496</citation>
	<citation>3200	6	1496</citation>
	<citation>3201	6	1496</citation>
	<citation>3202	6	1496</citation>
	<citation>3203	6	1496</citation>
	<citation>3204	6	1496</citation>
	<citation>561	6	1496</citation>
	<citation>584	6	1496</citation>
	<citation>584	6	1496</citation>
	<citation>600	6	1496</citation>
	<citation>669	6	1496</citation>
	<citation>680	6	1496</citation>
	<citation>680	6	1496</citation>
	<citation>691	6	1496</citation>
	<citation>730	6	1496</citation>
	<citation>763	6	1496</citation>
	<citation>763	6	1496</citation>
	<citation>763	6	1496</citation>
	<citation>799	6	1496</citation>
	<citation>799	6	1496</citation>
	</citations>
	</document>
	<document id= '1495'>
	<title>Solution of Transcendental Equations by Series Reversion</title>
	<abstract>An algorithm is developed for expressing the solution Y, of the equation F(Y) = G(X) as a power  series in (X - X0) when f and g are given as power series,and the root Y0, is known at Y=X0.  The algorithm  is illustrated for the equation Y^Y = X, i.e., (1+y)*ln(1+y) = ln(1+x).</abstract>
	<conference>CACM January, 1966</conference>
	<authors>
	</authors>
	<location>CA660102 JB March 3, 1978  4:27 PM</location>
	<citations>
	<citation>1495	4	1495</citation>
	<citation>1494	5	1495</citation>
	<citation>1495	5	1495</citation>
	<citation>1495	5	1495</citation>
	<citation>1495	5	1495</citation>
	<citation>1495	6	1495</citation>
	</citations>
	</document>
	<document id= '1494'>
	<citations>
	<citation>1494	4	1494</citation>
	<citation>1494	5	1494</citation>
	<citation>1494	5	1494</citation>
	<citation>1494	5	1494</citation>
	<citation>1495	5	1494</citation>
	<citation>1494	6	1494</citation>
	</citations>
	<title>Complete Elliptic Integral of the Second Kind (Algorithm 56 [S21])</title>
	<conference>CACM January, 1966</conference>
	<authors>
	<author>Larssen, G. M.</author>
	</authors>
	<location>CA660103c JB March 23, 1978  7:33 PM</location>
	</document>
	<document id= '1493'>
	<citations>
	<citation>1493	5	1493</citation>
	<citation>1493	5	1493</citation>
	<citation>1493	5	1493</citation>
	</citations>
	<title>Generation of Hilbert Derived Test Matrix (Algorithm 274 [F1])</title>
	<conference>CACM January, 1966</conference>
	<authors>
	<author>Boothroyd, J.</author>
	</authors>
	<location>CA660103b JB March 23, 1978  7:32 PM</location>
	</document>
	<document id= '1492'>
	<citations>
	<citation>1492	5	1492</citation>
	<citation>1492	5	1492</citation>
	<citation>1492	5	1492</citation>
	</citations>
	<title>Serrev (Algorithm 273 [C1])</title>
	<conference>CACM January, 1966</conference>
	<authors>
	</authors>
	<location>CA660103a JB March 3, 1978  4:23 PM</location>
	</document>
	<document id= '1491'>
	<title>EULER: A Generalization ALGOL, and its Formal Definition: Part I*</title>
	<abstract>A method for defining programming languages is developed which introduces a rigorous relationship  between structure and meaning.  The structure of a language is defined by a phrase structure syntax,  the meaning in terms of the effects which the execution of a sequence of interpretation rules exerts  upon a fixed set of variables, called the Environment.  There exists a one-to-one correspondence between  syntactic rules and interpretation rules is determined by the sequence of corresponding syntactic reductions  which constitute a parse.  The individual interpretation rules are explained in terms of an elementary  an d obvious algorithmic notation.  A constructive method for evaluating a text is provided, and for  certain decidable classes of languages their unambiguity is proved.  As an example, a generalization  of ALGOL is described in full detail to demonstrate that concepts like block-structure, procedures, parameters,  etc. can be defined adequately and precisely by this method.</abstract>
	<conference>CACM January, 1966</conference>
	<authors>
	<author>Wirth, N.</author>
	<author>Weber, H.</author>
	</authors>
	<location>CA660104 JB March 3, 1978  4:22 PM</location>
	<citations>
	<citation>249	4	1491</citation>
	<citation>254	4	1491</citation>
	<citation>272	4	1491</citation>
	<citation>1037	4	1491</citation>
	<citation>1086	4	1491</citation>
	<citation>1102	4	1491</citation>
	<citation>1109	4	1491</citation>
	<citation>1132	4	1491</citation>
	<citation>1140	4	1491</citation>
	<citation>1188	4	1491</citation>
	<citation>1234	4	1491</citation>
	<citation>1234	4	1491</citation>
	<citation>1263	4	1491</citation>
	<citation>1265	4	1491</citation>
	<citation>1270	4	1491</citation>
	<citation>1306	4	1491</citation>
	<citation>1323	4	1491</citation>
	<citation>1358	4	1491</citation>
	<citation>1358	4	1491</citation>
	<citation>1379	4	1491</citation>
	<citation>1380	4	1491</citation>
	<citation>1453	4	1491</citation>
	<citation>1464	4	1491</citation>
	<citation>1464	4	1491</citation>
	<citation>1469	4	1491</citation>
	<citation>1484	4	1491</citation>
	<citation>1486	4	1491</citation>
	<citation>1491	4	1491</citation>
	<citation>1491	4	1491</citation>
	<citation>1491	4	1491</citation>
	<citation>1491	4	1491</citation>
	<citation>1491	4	1491</citation>
	<citation>1498	4	1491</citation>
	<citation>1613	4	1491</citation>
	<citation>1614	4	1491</citation>
	<citation>1767	4	1491</citation>
	<citation>1781	4	1491</citation>
	<citation>1781	4	1491</citation>
	<citation>1781	4	1491</citation>
	<citation>1781	4	1491</citation>
	<citation>1787	4	1491</citation>
	<citation>1825	4	1491</citation>
	<citation>1860	4	1491</citation>
	<citation>1949	4	1491</citation>
	<citation>321	4	1491</citation>
	<citation>2059	4	1491</citation>
	<citation>2061	4	1491</citation>
	<citation>2083	4	1491</citation>
	<citation>2126	4	1491</citation>
	<citation>2178	4	1491</citation>
	<citation>2178	4	1491</citation>
	<citation>2179	4	1491</citation>
	<citation>2252	4	1491</citation>
	<citation>2325	4	1491</citation>
	<citation>2326	4	1491</citation>
	<citation>2341	4	1491</citation>
	<citation>2470	4	1491</citation>
	<citation>2546	4	1491</citation>
	<citation>435	4	1491</citation>
	<citation>437	4	1491</citation>
	<citation>463	4	1491</citation>
	<citation>483	4	1491</citation>
	<citation>491	4	1491</citation>
	<citation>2645	4	1491</citation>
	<citation>2652	4	1491</citation>
	<citation>2684	4	1491</citation>
	<citation>2684	4	1491</citation>
	<citation>2732	4	1491</citation>
	<citation>2842	4	1491</citation>
	<citation>2929	4	1491</citation>
	<citation>2934	4	1491</citation>
	<citation>560	4	1491</citation>
	<citation>583	4	1491</citation>
	<citation>3044	4	1491</citation>
	<citation>3069	4	1491</citation>
	<citation>3073	4	1491</citation>
	<citation>627	4	1491</citation>
	<citation>631	4	1491</citation>
	<citation>632	4	1491</citation>
	<citation>642	4	1491</citation>
	<citation>644	4	1491</citation>
	<citation>653	4	1491</citation>
	<citation>669	4	1491</citation>
	<citation>679	4	1491</citation>
	<citation>680	4	1491</citation>
	<citation>691	4	1491</citation>
	<citation>761	4	1491</citation>
	<citation>761	4	1491</citation>
	<citation>762	4	1491</citation>
	<citation>763	4	1491</citation>
	<citation>123	4	1491</citation>
	<citation>140	4	1491</citation>
	<citation>919	4	1491</citation>
	<citation>949	4	1491</citation>
	<citation>989	4	1491</citation>
	<citation>989	4	1491</citation>
	<citation>196	5	1491</citation>
	<citation>1140	5	1491</citation>
	<citation>1303	5	1491</citation>
	<citation>1491	5	1491</citation>
	<citation>1491	5	1491</citation>
	<citation>1491	5	1491</citation>
	<citation>1542	5	1491</citation>
	<citation>1683	5	1491</citation>
	<citation>1693	5	1491</citation>
	<citation>1781	5	1491</citation>
	<citation>1787	5	1491</citation>
	<citation>1836	5	1491</citation>
	<citation>1945	5	1491</citation>
	<citation>2060	5	1491</citation>
	<citation>2061	5	1491</citation>
	<citation>2082	5	1491</citation>
	<citation>2091	5	1491</citation>
	<citation>2152	5	1491</citation>
	<citation>2179	5	1491</citation>
	<citation>2340	5	1491</citation>
	<citation>2356	5	1491</citation>
	<citation>2546	5	1491</citation>
	<citation>2603	5	1491</citation>
	<citation>2698	5	1491</citation>
	<citation>2708	5	1491</citation>
	<citation>2824	5	1491</citation>
	<citation>2982	5	1491</citation>
	<citation>2986	5	1491</citation>
	<citation>3045	5	1491</citation>
	<citation>3093	5	1491</citation>
	<citation>3184	5	1491</citation>
	<citation>729	5	1491</citation>
	<citation>823	6	1491</citation>
	<citation>123	6	1491</citation>
	<citation>196	6	1491</citation>
	<citation>196	6	1491</citation>
	<citation>914	6	1491</citation>
	<citation>915	6	1491</citation>
	<citation>917	6	1491</citation>
	<citation>919	6	1491</citation>
	<citation>970	6	1491</citation>
	<citation>984	6	1491</citation>
	<citation>989	6	1491</citation>
	<citation>990	6	1491</citation>
	<citation>990	6	1491</citation>
	<citation>1007	6	1491</citation>
	<citation>1012	6	1491</citation>
	<citation>1046	6	1491</citation>
	<citation>1084	6	1491</citation>
	<citation>1098	6	1491</citation>
	<citation>1122	6	1491</citation>
	<citation>1131	6	1491</citation>
	<citation>1138	6	1491</citation>
	<citation>1139	6	1491</citation>
	<citation>1139	6	1491</citation>
	<citation>1140	6	1491</citation>
	<citation>1140	6	1491</citation>
	<citation>1141	6	1491</citation>
	<citation>1141	6	1491</citation>
	<citation>1141	6	1491</citation>
	<citation>1141	6	1491</citation>
	<citation>1149	6	1491</citation>
	<citation>1191	6	1491</citation>
	<citation>1191	6	1491</citation>
	<citation>1198	6	1491</citation>
	<citation>1200	6	1491</citation>
	<citation>1215	6	1491</citation>
	<citation>1215	6	1491</citation>
	<citation>1223	6	1491</citation>
	<citation>1223	6	1491</citation>
	<citation>1265	6	1491</citation>
	<citation>1265	6	1491</citation>
	<citation>1303	6	1491</citation>
	<citation>1323	6	1491</citation>
	<citation>1336	6	1491</citation>
	<citation>1358	6	1491</citation>
	<citation>1366	6	1491</citation>
	<citation>1366	6	1491</citation>
	<citation>1380	6	1491</citation>
	<citation>1396	6	1491</citation>
	<citation>1421	6	1491</citation>
	<citation>1421	6	1491</citation>
	<citation>1421	6	1491</citation>
	<citation>1455	6	1491</citation>
	<citation>1460	6	1491</citation>
	<citation>1462	6	1491</citation>
	<citation>1463	6	1491</citation>
	<citation>1467	6	1491</citation>
	<citation>1468	6	1491</citation>
	<citation>1469	6	1491</citation>
	<citation>1477	6	1491</citation>
	<citation>1477	6	1491</citation>
	<citation>1477	6	1491</citation>
	<citation>1477	6	1491</citation>
	<citation>1477	6	1491</citation>
	<citation>1477	6	1491</citation>
	<citation>1477	6	1491</citation>
	<citation>1477	6	1491</citation>
	<citation>1477	6	1491</citation>
	<citation>1477	6	1491</citation>
	<citation>1477	6	1491</citation>
	<citation>1477	6	1491</citation>
	<citation>1487	6	1491</citation>
	<citation>1491	6	1491</citation>
	<citation>1491	6	1491</citation>
	<citation>1491	6	1491</citation>
	<citation>1491	6	1491</citation>
	<citation>1491	6	1491</citation>
	<citation>1491	6	1491</citation>
	<citation>1491	6	1491</citation>
	<citation>1491	6	1491</citation>
	<citation>1491	6	1491</citation>
	<citation>1491	6	1491</citation>
	<citation>1491	6	1491</citation>
	<citation>1491	6	1491</citation>
	<citation>1491	6	1491</citation>
	<citation>1491	6	1491</citation>
	<citation>1491	6	1491</citation>
	<citation>1491	6	1491</citation>
	<citation>1491	6	1491</citation>
	<citation>1491	6	1491</citation>
	<citation>1491	6	1491</citation>
	<citation>1491	6	1491</citation>
	<citation>1491	6	1491</citation>
	<citation>1491	6	1491</citation>
	<citation>1491	6	1491</citation>
	<citation>1491	6	1491</citation>
	<citation>1496	6	1491</citation>
	<citation>1496	6	1491</citation>
	<citation>1496	6	1491</citation>
	<citation>1531	6	1491</citation>
	<citation>1535	6	1491</citation>
	<citation>1565	6	1491</citation>
	<citation>1601	6	1491</citation>
	<citation>1602	6	1491</citation>
	<citation>1613	6	1491</citation>
	<citation>1614	6	1491</citation>
	<citation>1614	6	1491</citation>
	<citation>1626	6	1491</citation>
	<citation>1641	6	1491</citation>
	<citation>1683	6	1491</citation>
	<citation>1683	6	1491</citation>
	<citation>1683	6	1491</citation>
	<citation>1767	6	1491</citation>
	<citation>1781	6	1491</citation>
	<citation>1781	6	1491</citation>
	<citation>1781	6	1491</citation>
	<citation>1787	6	1491</citation>
	<citation>1787	6	1491</citation>
	<citation>1788	6	1491</citation>
	<citation>205	6	1491</citation>
	<citation>1825	6	1491</citation>
	<citation>1825	6	1491</citation>
	<citation>210	6	1491</citation>
	<citation>1836	6	1491</citation>
	<citation>1836	6	1491</citation>
	<citation>1836	6	1491</citation>
	<citation>224	6	1491</citation>
	<citation>224	6	1491</citation>
	<citation>249	6	1491</citation>
	<citation>1869	6	1491</citation>
	<citation>288	6	1491</citation>
	<citation>316	6	1491</citation>
	<citation>381	6	1491</citation>
	<citation>398	6	1491</citation>
	<citation>2015	6	1491</citation>
	<citation>2110	6	1491</citation>
	<citation>2110	6	1491</citation>
	<citation>2110	6	1491</citation>
	<citation>2111	6	1491</citation>
	<citation>11	6	1491</citation>
	<citation>2126	6	1491</citation>
	<citation>2179	6	1491</citation>
	<citation>2179	6	1491</citation>
	<citation>2227	6	1491</citation>
	<citation>2340	6	1491</citation>
	<citation>2340	6	1491</citation>
	<citation>2340	6	1491</citation>
	<citation>2534	6	1491</citation>
	<citation>2534	6	1491</citation>
	<citation>2556	6	1491</citation>
	<citation>2556	6	1491</citation>
	<citation>2708	6	1491</citation>
	<citation>404	6	1491</citation>
	<citation>404	6	1491</citation>
	<citation>410	6	1491</citation>
	<citation>463	6	1491</citation>
	<citation>464	6	1491</citation>
	<citation>483	6	1491</citation>
	<citation>483	6	1491</citation>
	<citation>3184	6	1491</citation>
	<citation>3184	6	1491</citation>
	<citation>3184	6	1491</citation>
	<citation>3188	6	1491</citation>
	<citation>3198	6	1491</citation>
	<citation>518	6	1491</citation>
	<citation>577	6	1491</citation>
	<citation>584	6	1491</citation>
	<citation>584	6	1491</citation>
	<citation>600	6	1491</citation>
	<citation>669	6	1491</citation>
	<citation>680	6	1491</citation>
	<citation>680	6	1491</citation>
	<citation>680	6	1491</citation>
	<citation>680	6	1491</citation>
	<citation>680	6	1491</citation>
	<citation>691	6	1491</citation>
	<citation>763	6	1491</citation>
	<citation>763	6	1491</citation>
	<citation>763	6	1491</citation>
	<citation>763	6	1491</citation>
	<citation>773	6	1491</citation>
	<citation>799	6	1491</citation>
	<citation>799	6	1491</citation>
	<citation>799	6	1491</citation>
	</citations>
	</document>
	<document id= '1490'>
	<citations>
	<citation>1490	5	1490</citation>
	<citation>1490	5	1490</citation>
	<citation>1490	5	1490</citation>
	</citations>
	<title>One Inch Perforated Paper Tape for Information Interchange (Proposed American Standard)</title>
	<conference>CACM January, 1966</conference>
	<location>CA660105 JB March 3, 1978  4:14 PM</location>
	</document>
	<document id= '1489'>
	<title>Data, Documentation and Decision Tables</title>
	<abstract>In business data processing systems, it is necessary to be able to define and document data,  files, programs and decision rules in a way that adequately represents both (1) their changing information  content, and (2) their continuous interaction.  Tabular description makes this possible, being notably  objective, through and economical in cost and time when systems must be analyzed and programs prepared  or modified.  To show how quickly tabular techniques make an unfamiliar system manageable, a detailed  example and a self-test are provided.</abstract>
	<conference>CACM January, 1966</conference>
	<authors>
	<author>Fisher, D. L.</author>
	</authors>
	<location>CA660106 JB March 3, 1978  4:13 PM</location>
	<citations>
	<citation>1489	5	1489</citation>
	<citation>1489	5	1489</citation>
	<citation>1489	5	1489</citation>
	<citation>1548	5	1489</citation>
	<citation>2220	5	1489</citation>
	<citation>2726	5	1489</citation>
	<citation>1172	6	1489</citation>
	<citation>1172	6	1489</citation>
	<citation>1237	6	1489</citation>
	<citation>1327	6	1489</citation>
	<citation>1327	6	1489</citation>
	<citation>1354	6	1489</citation>
	<citation>1354	6	1489</citation>
	<citation>1488	6	1489</citation>
	<citation>1488	6	1489</citation>
	<citation>1489	6	1489</citation>
	<citation>1489	6	1489</citation>
	<citation>1489	6	1489</citation>
	<citation>1548	6	1489</citation>
	<citation>1548	6	1489</citation>
	<citation>250	6	1489</citation>
	<citation>2220	6	1489</citation>
	<citation>2221	6	1489</citation>
	<citation>2263	6	1489</citation>
	</citations>
	</document>
	<document id= '1488'>
	<title>Programming Decision Tables in FORTRAN, COBOL or ALGOL</title>
	<abstract>A simple broad-based approach for programming decision tables in FORTRAN or COBOL is developed  and presented.  With inputs in standard form, as defined in the paper, the programming of any decision  table can be done with one or two FORTRAN statements, or with two COBOL statements, if the COMPUTE verb  is available in the COBOL processor.  It is  shown that the method is applicable even when there are  more than two mutually exclusive states of one, two or more table conditions.  It is further shown that  multi-state conditions in decision tables can often simplify the programming.  The method outlined has  the further advantage that all possible combinations of conditions are considered.  It is shown that  the suggested procedure is easily implemented in ALGOL.</abstract>
	<conference>CACM January, 1966</conference>
	<authors>
	<author>Veinott, C. G.</author>
	</authors>
	<location>CA660107 JB March 3, 1978  4:08 PM</location>
	<citations>
	<citation>1354	4	1488</citation>
	<citation>1354	4	1488</citation>
	<citation>1488	4	1488</citation>
	<citation>1488	4	1488</citation>
	<citation>1994	4	1488</citation>
	<citation>2053	4	1488</citation>
	<citation>2053	4	1488</citation>
	<citation>2220	4	1488</citation>
	<citation>2220	4	1488</citation>
	<citation>2273	4	1488</citation>
	<citation>2273	4	1488</citation>
	<citation>2726	4	1488</citation>
	<citation>2856	4	1488</citation>
	<citation>1237	5	1488</citation>
	<citation>1327	5	1488</citation>
	<citation>1488	5	1488</citation>
	<citation>1488	5	1488</citation>
	<citation>1488	5	1488</citation>
	<citation>1548	5	1488</citation>
	<citation>2726	5	1488</citation>
	<citation>1172	6	1488</citation>
	<citation>1327	6	1488</citation>
	<citation>1354	6	1488</citation>
	<citation>1488	6	1488</citation>
	<citation>1488	6	1488</citation>
	<citation>1489	6	1488</citation>
	<citation>1489	6	1488</citation>
	<citation>1548	6	1488</citation>
	<citation>2220	6	1488</citation>
	<citation>2221	6	1488</citation>
	<citation>2263	6	1488</citation>
	</citations>
	</document>
	<document id= '1487'>
	<title>ELIZA-A Computer Program For the Study ofNatural Language Communication Between Man And Machine</title>
	<abstract>ELIZA is a program operating within the MAC time-sharing system at MIT which makes certain  kinds of natural language conversation between man and computer possible.  Input sentences are analyzed  on the basis of decomposition rules which are triggered by key words appearing in the input text.  Responses  are generated by reassembly rules associated with selected decomposition rules.  the fundamental technical  problems with which ELIZA is concerned are: (1)the identification of key words, (2) the discovery of  minimal context, (3) the choice of appropriate transformations, (4) generation of responses in the absence  of key words, and (5) the provision of an editing capability for ELIZA "scripts".  A discussion of some  psychological issues relevant to the ELIZA approach as well as of future developments concludes the paper.</abstract>
	<conference>CACM January, 1966</conference>
	<authors>
	<author>Weizenbaum, J.</author>
	</authors>
	<location>CA660108 JB March 3, 1978  4:00 PM</location>
	<citations>
	<citation>1024	4	1487</citation>
	<citation>1051	4	1487</citation>
	<citation>1098	4	1487</citation>
	<citation>1214	4	1487</citation>
	<citation>1380	4	1487</citation>
	<citation>1388	4	1487</citation>
	<citation>1393	4	1487</citation>
	<citation>1485	4	1487</citation>
	<citation>1487	4	1487</citation>
	<citation>1549	4	1487</citation>
	<citation>1570	4	1487</citation>
	<citation>1878	4	1487</citation>
	<citation>1946	4	1487</citation>
	<citation>1957	4	1487</citation>
	<citation>2168	4	1487</citation>
	<citation>2723	4	1487</citation>
	<citation>2857	4	1487</citation>
	<citation>3112	4	1487</citation>
	<citation>1400	5	1487</citation>
	<citation>1487	5	1487</citation>
	<citation>1487	5	1487</citation>
	<citation>1487	5	1487</citation>
	<citation>1553	5	1487</citation>
	<citation>1945	5	1487</citation>
	<citation>2127	5	1487</citation>
	<citation>2396	5	1487</citation>
	<citation>2730	5	1487</citation>
	<citation>731	5	1487</citation>
	<citation>823	6	1487</citation>
	<citation>914	6	1487</citation>
	<citation>915	6	1487</citation>
	<citation>917	6	1487</citation>
	<citation>984	6	1487</citation>
	<citation>989	6	1487</citation>
	<citation>990	6	1487</citation>
	<citation>1012	6	1487</citation>
	<citation>1084	6	1487</citation>
	<citation>1098	6	1487</citation>
	<citation>1122	6	1487</citation>
	<citation>1138	6	1487</citation>
	<citation>1139	6	1487</citation>
	<citation>1141	6	1487</citation>
	<citation>1155	6	1487</citation>
	<citation>1200	6	1487</citation>
	<citation>1223	6	1487</citation>
	<citation>1265	6	1487</citation>
	<citation>1324	6	1487</citation>
	<citation>1336	6	1487</citation>
	<citation>1396	6	1487</citation>
	<citation>1455	6	1487</citation>
	<citation>1477	6	1487</citation>
	<citation>1487	6	1487</citation>
	<citation>1487	6	1487</citation>
	<citation>1487	6	1487</citation>
	<citation>1487	6	1487</citation>
	<citation>1487	6	1487</citation>
	<citation>1487	6	1487</citation>
	<citation>1491	6	1487</citation>
	<citation>1496	6	1487</citation>
	<citation>1527	6	1487</citation>
	<citation>1781	6	1487</citation>
	<citation>1856	6	1487</citation>
	<citation>1856	6	1487</citation>
	<citation>2092	6	1487</citation>
	<citation>2127	6	1487</citation>
	<citation>483	6	1487</citation>
	<citation>584	6	1487</citation>
	<citation>669	6	1487</citation>
	<citation>680	6	1487</citation>
	<citation>763	6	1487</citation>
	</citations>
	</document>
	<document id= '1486'>
	<title>A Reprogramming Machine</title>
	<abstract>In this paper a description is given of a model programming system which is directed by a programming  language and has a library for storing the user's items.  Rules are given for transforming programs written  in the language and for rearranging the items in the library so that they share their common parts.   Some speculations are made about how the mechanical detection of common parts or patterns of library  items could help a user to solve his problems, and about the relationships between the behavior of the  reprogramming machine and human intelligent behavior.</abstract>
	<conference>CACM February, 1966</conference>
	<authors>
	<author>Burge, W. H.</author>
	</authors>
	<location>CA660201 JB March 3, 1978  3:50 PM</location>
	<citations>
	<citation>1024	4	1486</citation>
	<citation>1051	4	1486</citation>
	<citation>1102	4	1486</citation>
	<citation>1132	4	1486</citation>
	<citation>1390	4	1486</citation>
	<citation>1469	4	1486</citation>
	<citation>1486	4	1486</citation>
	<citation>1486	4	1486</citation>
	<citation>1491	4	1486</citation>
	<citation>1549	4	1486</citation>
	<citation>1706	4	1486</citation>
	<citation>1781	4	1486</citation>
	<citation>1826	4	1486</citation>
	<citation>1878	4	1486</citation>
	<citation>378	4	1486</citation>
	<citation>2060	4	1486</citation>
	<citation>2155	4	1486</citation>
	<citation>2168	4	1486</citation>
	<citation>2178	4	1486</citation>
	<citation>2326	4	1486</citation>
	<citation>2470	4	1486</citation>
	<citation>2684	4	1486</citation>
	<citation>2719	4	1486</citation>
	<citation>2723	4	1486</citation>
	<citation>2838	4	1486</citation>
	<citation>2842	4	1486</citation>
	<citation>2855	4	1486</citation>
	<citation>2879	4	1486</citation>
	<citation>3044	4	1486</citation>
	<citation>3077	4	1486</citation>
	<citation>3080	4	1486</citation>
	<citation>3106	4	1486</citation>
	<citation>627	4	1486</citation>
	<citation>106	4	1486</citation>
	<citation>1303	5	1486</citation>
	<citation>210	5	1486</citation>
	<citation>1486	5	1486</citation>
	<citation>1486	5	1486</citation>
	<citation>1486	5	1486</citation>
	</citations>
	</document>
	<document id= '1485'>
	<title>The Structure of Programming Languages</title>
	<abstract>In this paper the major components of every programming language are identified as: (1) the  elementary program statement, (2) mechanisms for linking elementary statements together, (3) the means  by which a program can obtain data inputs.  Several alternative forms of each of these components are  also described, compared and evaluated.  Many examples, frequently from list processing languages, illustrate  the forms described.  The advantages, disadvantages and factors influencing the choice of a form of component  for a language are discussed, and the paper concludes with the suggestion that programming languages  evolve toward one which will permit all the most convenient ways of structuring programs, organizing  systems and referencing data.</abstract>
	<conference>CACM February, 1966</conference>
	<authors>
	<author>Raphael, B.</author>
	</authors>
	<location>CA660202 JB March 3, 1978  3:46 PM</location>
	<citations>
	<citation>1024	4	1485</citation>
	<citation>1051	4	1485</citation>
	<citation>1098	4	1485</citation>
	<citation>1214	4	1485</citation>
	<citation>1380	4	1485</citation>
	<citation>1388	4	1485</citation>
	<citation>1393	4	1485</citation>
	<citation>1485	4	1485</citation>
	<citation>1487	4	1485</citation>
	<citation>1549	4	1485</citation>
	<citation>1570	4	1485</citation>
	<citation>1878	4	1485</citation>
	<citation>1946	4	1485</citation>
	<citation>1957	4	1485</citation>
	<citation>2168	4	1485</citation>
	<citation>2723	4	1485</citation>
	<citation>2857	4	1485</citation>
	<citation>3112	4	1485</citation>
	<citation>1485	5	1485</citation>
	<citation>1485	5	1485</citation>
	<citation>1485	5	1485</citation>
	<citation>731	5	1485</citation>
	</citations>
	</document>
	<document id= '1484'>
	<title>A Language for Describing the Functions of Synchronous Systems*</title>
	<abstract>Before the design of a system is started, the exact function desired of it should be specified.   It is suggested that a computer-oriented language be used for this purpose.  The inadequacies of the  standard programming languages for the description of systems are discussed, and a dialect of ALGOL which  is suitable for describing synchronous systems is introduced.  These descriptions can be used for simulation  and automatic design of the system described, in addition to communicating system specifications.</abstract>
	<conference>CACM February, 1966</conference>
	<authors>
	<author>Parnas, D. L.</author>
	</authors>
	<location>CA660203 JB March 3, 1978  3:23 PM</location>
	<citations>
	<citation>1086	4	1484</citation>
	<citation>1132	4	1484</citation>
	<citation>1234	4	1484</citation>
	<citation>1263	4	1484</citation>
	<citation>1265	4	1484</citation>
	<citation>1270	4	1484</citation>
	<citation>1323	4	1484</citation>
	<citation>1358	4	1484</citation>
	<citation>1379	4	1484</citation>
	<citation>1380	4	1484</citation>
	<citation>1453	4	1484</citation>
	<citation>1464	4	1484</citation>
	<citation>1484	4	1484</citation>
	<citation>1491	4	1484</citation>
	<citation>1498	4	1484</citation>
	<citation>1613	4	1484</citation>
	<citation>1614	4	1484</citation>
	<citation>1781	4	1484</citation>
	<citation>1825	4	1484</citation>
	<citation>1860	4	1484</citation>
	<citation>2083	4	1484</citation>
	<citation>2178	4	1484</citation>
	<citation>2179	4	1484</citation>
	<citation>2252	4	1484</citation>
	<citation>2325	4	1484</citation>
	<citation>2341	4	1484</citation>
	<citation>2546	4	1484</citation>
	<citation>2645	4	1484</citation>
	<citation>2652	4	1484</citation>
	<citation>2684	4	1484</citation>
	<citation>2842	4	1484</citation>
	<citation>2929	4	1484</citation>
	<citation>2934	4	1484</citation>
	<citation>3069	4	1484</citation>
	<citation>669	4	1484</citation>
	<citation>679	4	1484</citation>
	<citation>691	4	1484</citation>
	<citation>761	4	1484</citation>
	<citation>949	4	1484</citation>
	<citation>989	4	1484</citation>
	<citation>1484	5	1484</citation>
	<citation>1484	5	1484</citation>
	<citation>1484	5	1484</citation>
	<citation>1846	5	1484</citation>
	<citation>3184	5	1484</citation>
	<citation>1380	6	1484</citation>
	<citation>1424	6	1484</citation>
	<citation>1484	6	1484</citation>
	<citation>1572	6	1484</citation>
	<citation>576	6	1484</citation>
	</citations>
	</document>
	<document id= '1483'>
	<title>A Comparison of the FORTRAN Language Implementation for Several Computers</title>
	<abstract>A feature-by-feature comparison is made of five different implementations of FORTRAN IV representing  three different manufacturers.  A table is constructed showing, where possible, the use of each feature  in each implementation.  Only those items which are different from, or have been added to FORTRAN II  are shown.</abstract>
	<conference>CACM February, 1966</conference>
	<authors>
	<author>Wright, D. L.</author>
	</authors>
	<location>CA660204 JB March 3, 1978  3:19 PM</location>
	<citations>
	<citation>1483	5	1483</citation>
	<citation>1483	5	1483</citation>
	<citation>1483	5	1483</citation>
	</citations>
	</document>
	<document id= '1482'>
	<title>BUGSYS: A Programming System for Picture Processing-Not for Debugging</title>
	<abstract>BUGSYS is a picture processing and measuring system that depends upon a pictorial input to  the computer's memory.  BUGSYS can be used for many types of applications.  In particular, the authors  have used the system for the analysis of linear graphs.  The main concept of the system is the use of  a collection of programmable pointers, which are visualized as a family of "bugs."</abstract>
	<conference>CACM February, 1966</conference>
	<authors>
	<author>Ledley, R. S.</author>
	<author>Jacobsen, J.</author>
	<author>Belson, M.</author>
	</authors>
	<location>CA660205 JB March 3, 1978  3:16 PM</location>
	<citations>
	<citation>1482	5	1482</citation>
	<citation>1482	5	1482</citation>
	<citation>1482	5	1482</citation>
	</citations>
	</document>
	<document id= '1481'>
	<citations>
	<citation>1481	5	1481</citation>
	<citation>1481	5	1481</citation>
	<citation>1481	5	1481</citation>
	</citations>
	<title>Graph Plotter (Algorithm 278 [J6])</title>
	<conference>CACM February, 1966</conference>
	<authors>
	<author>Lloyd, P.</author>
	</authors>
	<location>CA660206d JB March 23, 1978  7:30 PM</location>
	</document>
	<document id= '1480'>
	<citations>
	<citation>1480	5	1480</citation>
	<citation>1480	5	1480</citation>
	<citation>1480	5	1480</citation>
	<citation>1639	5	1480</citation>
	<citation>1480	6	1480</citation>
	</citations>
	<title>Computation of Chebyshev Series Coefficients (Algorithm 277[C6])</title>
	<conference>CACM February, 1966</conference>
	<authors>
	<author>Smith, L. B.</author>
	</authors>
	<location>CA660206c JB March 23, 1978  7:28 PM</location>
	</document>
	<document id= '1479'>
	<citations>
	<citation>1479	5	1479</citation>
	<citation>1479	5	1479</citation>
	<citation>1479	5	1479</citation>
	</citations>
	<title>Constrained Exponential Curve Fit (Algorithm 276 [E2])</title>
	<conference>CACM February, 1966</conference>
	<authors>
	<author>Deily, G. R.</author>
	</authors>
	<location>CA660206b JB March 23, 1978  7:27 PM</location>
	</document>
	<document id= '1478'>
	<citations>
	<citation>1478	5	1478</citation>
	<citation>1478	5	1478</citation>
	<citation>1478	5	1478</citation>
	<citation>2694	5	1478</citation>
	<citation>1478	6	1478</citation>
	</citations>
	<title>Exponential Curve Fit (Algorithm 275 [E2])</title>
	<conference>CACM February, 1966</conference>
	<authors>
	<author>Deily, G. R.</author>
	</authors>
	<location>CA660206a JB March 3, 1978  3:11 PM</location>
	</document>
	<document id= '1477'>
	<citations>
	<citation>1379	5	1477</citation>
	<citation>1477	5	1477</citation>
	<citation>1477	5	1477</citation>
	<citation>1477	5	1477</citation>
	<citation>1693	5	1477</citation>
	<citation>1781	5	1477</citation>
	<citation>1836	5	1477</citation>
	<citation>1945	5	1477</citation>
	<citation>2015	5	1477</citation>
	<citation>2060	5	1477</citation>
	<citation>2061	5	1477</citation>
	<citation>2091	5	1477</citation>
	<citation>2179	5	1477</citation>
	<citation>2546	5	1477</citation>
	<citation>2698	5	1477</citation>
	<citation>2708	5	1477</citation>
	<citation>3045	5	1477</citation>
	<citation>823	6	1477</citation>
	<citation>123	6	1477</citation>
	<citation>196	6	1477</citation>
	<citation>914	6	1477</citation>
	<citation>915	6	1477</citation>
	<citation>917	6	1477</citation>
	<citation>919	6	1477</citation>
	<citation>984	6	1477</citation>
	<citation>989	6	1477</citation>
	<citation>990	6	1477</citation>
	<citation>990	6	1477</citation>
	<citation>1007	6	1477</citation>
	<citation>1012	6	1477</citation>
	<citation>1046	6	1477</citation>
	<citation>1084	6	1477</citation>
	<citation>1098	6	1477</citation>
	<citation>1122	6	1477</citation>
	<citation>1131	6	1477</citation>
	<citation>1138	6	1477</citation>
	<citation>1139	6	1477</citation>
	<citation>1139	6	1477</citation>
	<citation>1140	6	1477</citation>
	<citation>1140	6	1477</citation>
	<citation>1141	6	1477</citation>
	<citation>1141	6	1477</citation>
	<citation>1149	6	1477</citation>
	<citation>1191	6	1477</citation>
	<citation>1198	6	1477</citation>
	<citation>1200	6	1477</citation>
	<citation>1215	6	1477</citation>
	<citation>1223	6	1477</citation>
	<citation>1223	6	1477</citation>
	<citation>1263	6	1477</citation>
	<citation>1265	6	1477</citation>
	<citation>1265	6	1477</citation>
	<citation>1303	6	1477</citation>
	<citation>1323	6	1477</citation>
	<citation>1336	6	1477</citation>
	<citation>1358	6	1477</citation>
	<citation>1366	6	1477</citation>
	<citation>1366	6	1477</citation>
	<citation>1380	6	1477</citation>
	<citation>1396	6	1477</citation>
	<citation>1421	6	1477</citation>
	<citation>1421	6	1477</citation>
	<citation>1421	6	1477</citation>
	<citation>1455	6	1477</citation>
	<citation>1460	6	1477</citation>
	<citation>1462	6	1477</citation>
	<citation>1463	6	1477</citation>
	<citation>1467	6	1477</citation>
	<citation>1468	6	1477</citation>
	<citation>1469	6	1477</citation>
	<citation>1477	6	1477</citation>
	<citation>1477	6	1477</citation>
	<citation>1477	6	1477</citation>
	<citation>1477	6	1477</citation>
	<citation>1477	6	1477</citation>
	<citation>1477	6	1477</citation>
	<citation>1477	6	1477</citation>
	<citation>1477	6	1477</citation>
	<citation>1477	6	1477</citation>
	<citation>1477	6	1477</citation>
	<citation>1477	6	1477</citation>
	<citation>1477	6	1477</citation>
	<citation>1477	6	1477</citation>
	<citation>1477	6	1477</citation>
	<citation>1487	6	1477</citation>
	<citation>1491	6	1477</citation>
	<citation>1491	6	1477</citation>
	<citation>1491	6	1477</citation>
	<citation>1491	6	1477</citation>
	<citation>1491	6	1477</citation>
	<citation>1491	6	1477</citation>
	<citation>1491	6	1477</citation>
	<citation>1491	6	1477</citation>
	<citation>1491	6	1477</citation>
	<citation>1491	6	1477</citation>
	<citation>1491	6	1477</citation>
	<citation>1491	6	1477</citation>
	<citation>1496	6	1477</citation>
	<citation>1496	6	1477</citation>
	<citation>1531	6	1477</citation>
	<citation>1535	6	1477</citation>
	<citation>1565	6	1477</citation>
	<citation>1601	6	1477</citation>
	<citation>1602	6	1477</citation>
	<citation>1613	6	1477</citation>
	<citation>1614	6	1477</citation>
	<citation>1614	6	1477</citation>
	<citation>1626	6	1477</citation>
	<citation>1641	6	1477</citation>
	<citation>1781	6	1477</citation>
	<citation>1781	6	1477</citation>
	<citation>1781	6	1477</citation>
	<citation>1787	6	1477</citation>
	<citation>1787	6	1477</citation>
	<citation>1788	6	1477</citation>
	<citation>205	6	1477</citation>
	<citation>1825	6	1477</citation>
	<citation>1825	6	1477</citation>
	<citation>210	6	1477</citation>
	<citation>224	6	1477</citation>
	<citation>249	6	1477</citation>
	<citation>1869	6	1477</citation>
	<citation>288	6	1477</citation>
	<citation>316	6	1477</citation>
	<citation>381	6	1477</citation>
	<citation>398	6	1477</citation>
	<citation>2015	6	1477</citation>
	<citation>2110	6	1477</citation>
	<citation>2110	6	1477</citation>
	<citation>2110	6	1477</citation>
	<citation>2111	6	1477</citation>
	<citation>11	6	1477</citation>
	<citation>2126	6	1477</citation>
	<citation>2534	6	1477</citation>
	<citation>2534	6	1477</citation>
	<citation>2556	6	1477</citation>
	<citation>2556	6	1477</citation>
	<citation>404	6	1477</citation>
	<citation>404	6	1477</citation>
	<citation>410	6	1477</citation>
	<citation>463	6	1477</citation>
	<citation>464	6	1477</citation>
	<citation>483	6	1477</citation>
	<citation>483	6	1477</citation>
	<citation>3184	6	1477</citation>
	<citation>3184	6	1477</citation>
	<citation>3184	6	1477</citation>
	<citation>3184	6	1477</citation>
	<citation>3188	6	1477</citation>
	<citation>577	6	1477</citation>
	<citation>584	6	1477</citation>
	<citation>584	6	1477</citation>
	<citation>600	6	1477</citation>
	<citation>669	6	1477</citation>
	<citation>669	6	1477</citation>
	<citation>680	6	1477</citation>
	<citation>680	6	1477</citation>
	<citation>680	6	1477</citation>
	<citation>680	6	1477</citation>
	<citation>691	6	1477</citation>
	<citation>761	6	1477</citation>
	<citation>763	6	1477</citation>
	<citation>763	6	1477</citation>
	<citation>773	6	1477</citation>
	<citation>799	6	1477</citation>
	<citation>799	6	1477</citation>
	</citations>
	<title>EULER: A Generalization of ALGOL, and its Formal Definition: Part II*</title>
	<conference>CACM February, 1966</conference>
	<authors>
	<author>Wirth, N.</author>
	<author>Weber, H.</author>
	</authors>
	<location>CA660207 JB March 3, 1978  3:10 PM</location>
	</document>
	<document id= '1476'>
	<citations>
	<citation>1476	5	1476</citation>
	<citation>1476	5	1476</citation>
	<citation>1476	5	1476</citation>
	</citations>
	<title>Control Procedures for Data Communication-An ASA Progress Report</title>
	<abstract>Sectional Committee X.3 of the American Standards Association, has charged one of its task  groups, X3.3.4, with the responsibility to "Define and specify functional control requirements and characteristics  governing the operation of digital data generating and receiving systems interconnected by communication  system."  This effort is primarily directed toward systems employing the American Standard Code for Information  Interchange (ASCII).  This paper represents a progress report on the work of this group toward a proposal  for national and international standardization in the field of control procedures.  It describes both  the old and new work of the task group.  The new work is presented in detail, while the work that has  been presented in earlier papers ["Control Procedures for Data Communication," Task Group document X3.3.4/44,  May 1964: "Transparent-Mode Control Procedures for Data Communication," Task Group document X3.3.4/58,  December, 1964: Comm. ACM 8 (Apr. 1965), 203-206; "Control Procedures for Data Communications," Task  Group document X3.3.4/60, March, 1965] is retained here in summary form.  Many of the concepts and principles  described herein have been submitted to the International Organization for Standardization via earlier  papers and are now embodied in working papers of that organization.</abstract>
	<conference>CACM February, 1966</conference>
	<location>CA660208JB March 3, 1978  3:04 PM</location>
	</document>
	<document id= '1475'>
	<title>Dribble Posting a Master File</title>
	<abstract>Many business applications employ sequential magnetic tape rather than random-access storage  techniques to process a very small number of transactions against a voluminous master file.  In such  situations, it may prove economical to avoid creating a new master file during each updating run by producing  instead a dribble ledger containing only those master file accounts which have experienced activity.</abstract>
	<conference>CACM February, 1966</conference>
	<authors>
	<author>Head, R. V.</author>
	</authors>
	<location>CA660209 JB March 3, 1978  2:41 PM</location>
	<citations>
	<citation>1475	5	1475</citation>
	<citation>1475	5	1475</citation>
	<citation>1475	5	1475</citation>
	</citations>
	</document>
	<document id= '1474'>
	<title>Tests of Probabilistic Models for Propagation of Roundoff Errors</title>
	<abstract>In any prolonged computation it is generally assumed that the accumulated effect of roundoff  errors is in some sense statistical.  The purpose of this paper is to give precise descriptions of certain  probabilistic models for roundoff error, and then to describe a series of experiments for testing the  validity of these models.  It is concluded that the models are in general very good.  Discrepancies are  both rare and mild.  The test techniques can also be used to experiment with various types of special  arithmetic.</abstract>
	<conference>CACM February, 1966</conference>
	<authors>
	<author>Hull, T. E.</author>
	<author>Swenson, J. R.</author>
	</authors>
	<location>CA660210 JB March 3, 1978  2:37 PM</location>
	<citations>
	<citation>1474	5	1474</citation>
	<citation>1474	5	1474</citation>
	<citation>1474	5	1474</citation>
	<citation>2525	5	1474</citation>
	<citation>1474	6	1474</citation>
	</citations>
	</document>
	<document id= '1473'>
	<title>The Stability of the Fourth Order Runge-Kutta Method for the Solution of Systems of Differential  Equations</title>
	<abstract>The problem of the region of stability of the fourth order-Runge-Kutta method for the solution  of systems of differential equations is studied.  This region can be characterized by means of linear  transformation but can not be given in a closed form.  In the paper, this region is determined by the  electronic digital computer Z22.</abstract>
	<conference>CACM February, 1966</conference>
	<authors>
	<author>Karim, A. I. A.</author>
	</authors>
	<location>CA660211 JB March 3, 1978  2:31 PM</location>
	<citations>
	<citation>1473	5	1473</citation>
	<citation>1473	5	1473</citation>
	<citation>1473	5	1473</citation>
	</citations>
	</document>
	<document id= '1472'>
	<title>Description of a High Capacity, Fast Turnaround University Computing Center</title>
	<abstract>The operating system for the UNIVAC 1107 at Case Institute is reviewed.  The system is of interest  because of the low turnaround times achieved, the high throughput achieved and the lack of an operating  staff.  Turnaround times below 5 minutes and job volume above 75,000 per quarter year one reported.</abstract>
	<conference>CACM February, 1966</conference>
	<authors>
	<author>Lynch, W.C.</author>
	</authors>
	<location>CA660212 JB March 3, 1978  2:28 PM</location>
	<citations>
	<citation>1472	5	1472</citation>
	<citation>1472	5	1472</citation>
	<citation>1472	5	1472</citation>
	<citation>1550	5	1472</citation>
	<citation>1304	6	1472</citation>
	<citation>1472	6	1472</citation>
	</citations>
	</document>
	<document id= '1471'>
	<title>Programming Semantics for Multiprogrammed computations</title>
	<abstract>The semantics are defined for a number of meta-instructions which perform operation essential  to the writing of programs in multiprogrammed computer systems.  These meta-instructions relate to parallel  processing, protection of separate computations, program debugging, and the sharing among users of memory  segments and other computing objects, the names of which are hierarchically structured.  The language  sophistication contemplated is midway between an assembly language and an advanced algebraic language.</abstract>
	<conference>CACM March, 1966</conference>
	<authors>
	<author>VanHorn, E. C.</author>
	</authors>
	<location>CA660301 JB March 3, 1978  2:25 PM</location>
	<citations>
	<citation>1471	4	1471</citation>
	<citation>1471	4	1471</citation>
	<citation>1774	4	1471</citation>
	<citation>972	4	1471</citation>
	<citation>276	5	1471</citation>
	<citation>1458	5	1471</citation>
	<citation>1471	5	1471</citation>
	<citation>1471	5	1471</citation>
	<citation>1471	5	1471</citation>
	<citation>1523	5	1471</citation>
	<citation>1603	5	1471</citation>
	<citation>1698	5	1471</citation>
	<citation>1747	5	1471</citation>
	<citation>1748	5	1471</citation>
	<citation>1854	5	1471</citation>
	<citation>1877	5	1471</citation>
	<citation>1960	5	1471</citation>
	<citation>2377	5	1471</citation>
	<citation>2378	5	1471</citation>
	<citation>2497	5	1471</citation>
	<citation>2558	5	1471</citation>
	<citation>2625	5	1471</citation>
	<citation>2632	5	1471</citation>
	<citation>2840	5	1471</citation>
	<citation>2941	5	1471</citation>
	<citation>3105	5	1471</citation>
	<citation>3144	5	1471</citation>
	<citation>800	5	1471</citation>
	<citation>1421	6	1471</citation>
	<citation>1471	6	1471</citation>
	<citation>1471	6	1471</citation>
	<citation>1471	6	1471</citation>
	<citation>1471	6	1471</citation>
	<citation>1471	6	1471</citation>
	<citation>1471	6	1471</citation>
	<citation>1471	6	1471</citation>
	<citation>1471	6	1471</citation>
	<citation>1471	6	1471</citation>
	<citation>1471	6	1471</citation>
	<citation>1471	6	1471</citation>
	<citation>1471	6	1471</citation>
	<citation>1471	6	1471</citation>
	<citation>1471	6	1471</citation>
	<citation>1471	6	1471</citation>
	<citation>1471	6	1471</citation>
	<citation>1471	6	1471</citation>
	<citation>1471	6	1471</citation>
	<citation>1471	6	1471</citation>
	<citation>1746	6	1471</citation>
	<citation>1746	6	1471</citation>
	<citation>1748	6	1471</citation>
	<citation>1749	6	1471</citation>
	<citation>1749	6	1471</citation>
	<citation>1749	6	1471</citation>
	<citation>1749	6	1471</citation>
	<citation>1749	6	1471</citation>
	<citation>1753	6	1471</citation>
	<citation>1854	6	1471</citation>
	<citation>2060	6	1471</citation>
	<citation>2080	6	1471</citation>
	<citation>2080	6	1471</citation>
	<citation>2182	6	1471</citation>
	<citation>2298	6	1471</citation>
	<citation>2356	6	1471</citation>
	<citation>2358	6	1471</citation>
	<citation>2358	6	1471</citation>
	<citation>2436	6	1471</citation>
	<citation>2438	6	1471</citation>
	<citation>2491	6	1471</citation>
	<citation>2558	6	1471</citation>
	<citation>2597	6	1471</citation>
	<citation>2624	6	1471</citation>
	<citation>2625	6	1471</citation>
	<citation>2625	6	1471</citation>
	<citation>2626	6	1471</citation>
	<citation>2629	6	1471</citation>
	<citation>2632	6	1471</citation>
	<citation>2632	6	1471</citation>
	<citation>2651	6	1471</citation>
	<citation>2868	6	1471</citation>
	<citation>2939	6	1471</citation>
	<citation>3068	6	1471</citation>
	</citations>
	</document>
	<document id= '1470'>
	<title>The Structure of Programming Languages</title>
	<abstract>The following are identified as major components of every programming language: (1) the elementary  program statement, (2) mechanisms for linking elementary statements together, (3) the means by which  a program can obtain data inputs.  Several alternative forms of each of these components are described,  compared and evaluated.  Many examples, frequently from list processing languages, illustrate the forms  described.  Elementary program statements usually take the form of commands, requirements, or implicit  specifications.  A command is an imperative statement that commands the action to be taken.  A requirement  describes the effect to be achieved without saying anything about the actions to be taken.  An implicit  specification is similar to a requirement, but the programmer must understand what actions will be taken  to achieve the desired effect.  Subroutines may be entered explicitly, by execute call, or by function  composition.  Explicitly called subroutines generally require special linkage conventions.  An execute  subroutine call is syntactically indistinguishable from a basic instruction of the programming language.   Function composition is a convenient alternative to the explicit call.  The three principal ways of  getting inputs for routines are (1) by referring to the data itself, (2) by referring to the data by  a "name", and (3) by referring to it implicitly by means of variables or functions.  Names are useful  entry points into permanent data structures, but can be error-causing distractions in other contexts.  The author discusses advantages, disadvantages, and factors influencing the choice of a form of component  for a language.   He concludes by suggesting the evolution of programming languages toward one which  will permit all the most convenient ways of structuring programs, organizing systems, and referencing  data.</abstract>
	<conference>CACM March, 1966</conference>
	<authors>
	<author>Raphael, B.</author>
	</authors>
	<location>CA660302 JB March 3, 1978  2:20 PM</location>
	<citations>
	<citation>1470	5	1470</citation>
	<citation>1470	5	1470</citation>
	<citation>1470	5	1470</citation>
	</citations>
	</document>
	<document id= '1469'>
	<title>The Next 700 Programming Languages</title>
	<abstract>A family of unimplemented computing languages is described that is intended to span differences  of application area by a unified framework.  This framework dictates the rules about the uses of user-coined  names, and the conventions about characterizing functional relationships.  Within this framework the  design of a specific language splits into two independent parts.  One is the choice of written appearances  of programs (or more generally, their physical representation).  The other is the choice of the abstract  entities (such as numbers, character-strings, lists of them, functional relations among them) that can  be referred to in the language.  The system is biased towards "expressions" rather than "statements."   It includes a nonprocedural(purely functional) subsystem that aims to expand the class of users' needs  that can be met by a single print-instruction, without sacrificing the important properties that make  conventional right-hand-side expressions easy to construct and understand.</abstract>
	<conference>CACM March, 1966</conference>
	<authors>
	<author>Landin, P. J.</author>
	</authors>
	<location>CA660303 JB March 3, 1978  2:05 PM</location>
	<citations>
	<citation>1469	4	1469</citation>
	<citation>1486	4	1469</citation>
	<citation>1491	4	1469</citation>
	<citation>1781	4	1469</citation>
	<citation>2178	4	1469</citation>
	<citation>2326	4	1469</citation>
	<citation>2470	4	1469</citation>
	<citation>2684	4	1469</citation>
	<citation>3044	4	1469</citation>
	<citation>1303	5	1469</citation>
	<citation>1469	5	1469</citation>
	<citation>1469	5	1469</citation>
	<citation>1469	5	1469</citation>
	<citation>2060	5	1469</citation>
	<citation>2294	5	1469</citation>
	<citation>2470	5	1469</citation>
	<citation>3124	5	1469</citation>
	<citation>1303	6	1469</citation>
	<citation>1380	6	1469</citation>
	<citation>1421	6	1469</citation>
	<citation>1469	6	1469</citation>
	<citation>1469	6	1469</citation>
	<citation>1469	6	1469</citation>
	<citation>1469	6	1469</citation>
	<citation>1477	6	1469</citation>
	<citation>1491	6	1469</citation>
	<citation>210	6	1469</citation>
	<citation>1834	6	1469</citation>
	<citation>1869	6	1469</citation>
	<citation>2060	6	1469</citation>
	<citation>2110	6	1469</citation>
	<citation>2264	6	1469</citation>
	</citations>
	</document>
	<document id= '1468'>
	<title>Syntax-Directed Interpretation of Classes of Pictures</title>
	<abstract>A descriptive scheme for classes of pictures based on labeling techniques using parallel processing  algorithms was proposed by the author some years ago.  Since then much work has been done in applying  this to bubble chamber pictures.  The parallel processing simulator, originally written for an IBM 7094 system, has now been rewritten for a CDC 3600 system.  This paper descriptive models by considering their  specific application to bubble chamber pictures.  How the description generated in this phase can be  embedded in a larger "conversation" program is explained by means of a certain specific example that  has been worked out.  A partial generative grammar for "handwritten" English letters is given, as are  also a few computer-generated outputs using this grammar and the parallel processing simulator mentioned  earlier.</abstract>
	<conference>CACM March, 1966</conference>
	<authors>
	<author>Narasimhan, R.</author>
	</authors>
	<location>CA660304 JB March 3, 1978  1:56 PM</location>
	<citations>
	<citation>1155	4	1468</citation>
	<citation>1456	4	1468</citation>
	<citation>1468	4	1468</citation>
	<citation>1515	4	1468</citation>
	<citation>1699	4	1468</citation>
	<citation>1856	4	1468</citation>
	<citation>2127	4	1468</citation>
	<citation>1324	5	1468</citation>
	<citation>1468	5	1468</citation>
	<citation>1468	5	1468</citation>
	<citation>1468	5	1468</citation>
	<citation>1767	5	1468</citation>
	<citation>1781	5	1468</citation>
	<citation>2341	5	1468</citation>
	<citation>123	6	1468</citation>
	<citation>196	6	1468</citation>
	<citation>196	6	1468</citation>
	<citation>919	6	1468</citation>
	<citation>990	6	1468</citation>
	<citation>990	6	1468</citation>
	<citation>1007	6	1468</citation>
	<citation>1046	6	1468</citation>
	<citation>1131	6	1468</citation>
	<citation>1139	6	1468</citation>
	<citation>1140	6	1468</citation>
	<citation>1149	6	1468</citation>
	<citation>1198	6	1468</citation>
	<citation>1215	6	1468</citation>
	<citation>1223	6	1468</citation>
	<citation>1265	6	1468</citation>
	<citation>1303	6	1468</citation>
	<citation>1323	6	1468</citation>
	<citation>1358	6	1468</citation>
	<citation>1366	6	1468</citation>
	<citation>1421	6	1468</citation>
	<citation>1460	6	1468</citation>
	<citation>1462	6	1468</citation>
	<citation>1463	6	1468</citation>
	<citation>1467	6	1468</citation>
	<citation>1467	6	1468</citation>
	<citation>1468	6	1468</citation>
	<citation>1468	6	1468</citation>
	<citation>1468	6	1468</citation>
	<citation>1466	6	1468</citation>
	<citation>1477	6	1468</citation>
	<citation>1491	6	1468</citation>
	<citation>1496	6	1468</citation>
	<citation>1496	6	1468</citation>
	<citation>1531	6	1468</citation>
	<citation>1535	6	1468</citation>
	<citation>1565	6	1468</citation>
	<citation>1601	6	1468</citation>
	<citation>1602	6	1468</citation>
	<citation>1613	6	1468</citation>
	<citation>1614	6	1468</citation>
	<citation>1626	6	1468</citation>
	<citation>1641	6	1468</citation>
	<citation>1787	6	1468</citation>
	<citation>1788	6	1468</citation>
	<citation>205	6	1468</citation>
	<citation>224	6	1468</citation>
	<citation>249	6	1468</citation>
	<citation>288	6	1468</citation>
	<citation>316	6	1468</citation>
	<citation>381	6	1468</citation>
	<citation>398	6	1468</citation>
	<citation>11	6	1468</citation>
	<citation>404	6	1468</citation>
	<citation>410	6	1468</citation>
	<citation>463	6	1468</citation>
	<citation>464	6	1468</citation>
	<citation>483	6	1468</citation>
	<citation>3184	6	1468</citation>
	<citation>3184	6	1468</citation>
	<citation>3188	6	1468</citation>
	<citation>584	6	1468</citation>
	<citation>600	6	1468</citation>
	<citation>680	6	1468</citation>
	<citation>691	6	1468</citation>
	<citation>763	6	1468</citation>
	<citation>799	6	1468</citation>
	</citations>
	</document>
	<document id= '1467'>
	<title>A Graphical ServiceSystem With Variable Syntax</title>
	<abstract>Man-machine interaction in many fields of endeavor should be greatly facilitated in the near  future through the use of interactive graphical languages.  To provide a variety of display scope communication  procedures, a Graphic Service system which functions as a generalized graphical language translator,  is being developed to aid the definition as well as the use of new graphical languages.</abstract>
	<conference>CACM March, 1966</conference>
	<authors>
	<author>Roberts, L. G.</author>
	</authors>
	<location>CA660305 JB March 3, 1978  1:49 PM</location>
	<citations>
	<citation>1467	5	1467</citation>
	<citation>1467	5	1467</citation>
	<citation>1467	5	1467</citation>
	<citation>1767	5	1467</citation>
	<citation>1781	5	1467</citation>
	<citation>123	6	1467</citation>
	<citation>196	6	1467</citation>
	<citation>196	6	1467</citation>
	<citation>919	6	1467</citation>
	<citation>990	6	1467</citation>
	<citation>1007	6	1467</citation>
	<citation>1046	6	1467</citation>
	<citation>1131	6	1467</citation>
	<citation>1139	6	1467</citation>
	<citation>1140	6	1467</citation>
	<citation>1149	6	1467</citation>
	<citation>1198	6	1467</citation>
	<citation>1215	6	1467</citation>
	<citation>1223	6	1467</citation>
	<citation>1265	6	1467</citation>
	<citation>1303	6	1467</citation>
	<citation>1323	6	1467</citation>
	<citation>1358	6	1467</citation>
	<citation>1366	6	1467</citation>
	<citation>1421	6	1467</citation>
	<citation>1460	6	1467</citation>
	<citation>1462	6	1467</citation>
	<citation>1463	6	1467</citation>
	<citation>1467	6	1467</citation>
	<citation>1467	6	1467</citation>
	<citation>1468	6	1467</citation>
	<citation>1468	6	1467</citation>
	<citation>1477	6	1467</citation>
	<citation>1491	6	1467</citation>
	<citation>1496	6	1467</citation>
	<citation>1496	6	1467</citation>
	<citation>1531	6	1467</citation>
	<citation>1535	6	1467</citation>
	<citation>1565	6	1467</citation>
	<citation>1601	6	1467</citation>
	<citation>1602	6	1467</citation>
	<citation>1613	6	1467</citation>
	<citation>1614	6	1467</citation>
	<citation>1626	6	1467</citation>
	<citation>1641	6	1467</citation>
	<citation>1787	6	1467</citation>
	<citation>1788	6	1467</citation>
	<citation>205	6	1467</citation>
	<citation>224	6	1467</citation>
	<citation>249	6	1467</citation>
	<citation>288	6	1467</citation>
	<citation>316	6	1467</citation>
	<citation>381	6	1467</citation>
	<citation>398	6	1467</citation>
	<citation>11	6	1467</citation>
	<citation>404	6	1467</citation>
	<citation>410	6	1467</citation>
	<citation>463	6	1467</citation>
	<citation>464	6	1467</citation>
	<citation>483	6	1467</citation>
	<citation>3184	6	1467</citation>
	<citation>3188	6	1467</citation>
	<citation>584	6	1467</citation>
	<citation>600	6	1467</citation>
	<citation>680	6	1467</citation>
	<citation>691	6	1467</citation>
	<citation>763	6	1467</citation>
	<citation>799	6	1467</citation>
	</citations>
	</document>
	<document id= '1466'>
	<citations>
	<citation>1466	5	1466</citation>
	<citation>1466	5	1466</citation>
	<citation>1466	5	1466</citation>
	<citation>2341	5	1466</citation>
	<citation>990	6	1466</citation>
	<citation>1468	6	1466</citation>
	<citation>1466	6	1466</citation>
	<citation>3184	6	1466</citation>
	</citations>
	<title>Discussion Summary on Graphical Languages</title>
	<conference>CACM March, 1966</conference>
	<location>CA660306 JB March 3, 1978  1:46 PM</location>
	</document>
	<document id= '1465'>
	<title>Program Translation Viewed as a General Data Processing Problem</title>
	<abstract>Efficiency dictates that the overall effectiveness of a compiler be increased by all means  available.  For a compiler to have a substantial useful life it needs a clear logical structure, reliability  and sound data processing techniques.  A compiler must be based on fixed conventions to preserve efficiency  and reliability; empty options and default conventions violate this dictum.  Use of structure to associate  various parts of a program and economy of features promote clarity and reliability.</abstract>
	<conference>CACM March, 1966</conference>
	<authors>
	<author>Naur, P.</author>
	</authors>
	<location>CA660307 JB March 3, 1978  1:45 PM</location>
	<citations>
	<citation>1465	5	1465</citation>
	<citation>1465	5	1465</citation>
	<citation>1465	5	1465</citation>
	</citations>
	</document>
	<document id= '1464'>
	<title>An ALGOL Compiler: Construction and Use in Relation to an Elaborate Operating System</title>
	<abstract>An ALGOL translator has been prepared and integrated into the IBSYS Operating System.  Assembly  and "go" features of IBSYS permit immediate execution with optional listings, decks and debugging information.   Using the chain feature of IBSYS, links written in MAP or FORTRAN as well as ALGOL may be called by  the ALGOL main program.  In addition, procedures coded in MAP may be included in any ALGOL program.   Although assembly plus loading time exceeds compilation time, the total time is satisfactory and the  user gets ease and facility which are fully compensating.</abstract>
	<conference>CACM March, 1966</conference>
	<authors>
	<author>Boussard, J. C.</author>
	</authors>
	<location>CA660308 JB March 3, 1978  1:41 PM</location>
	<citations>
	<citation>249	4	1464</citation>
	<citation>254	4	1464</citation>
	<citation>272	4	1464</citation>
	<citation>1086	4	1464</citation>
	<citation>1102	4	1464</citation>
	<citation>1109	4	1464</citation>
	<citation>1132	4	1464</citation>
	<citation>1140	4	1464</citation>
	<citation>1188	4	1464</citation>
	<citation>1234	4	1464</citation>
	<citation>1263	4	1464</citation>
	<citation>1265	4	1464</citation>
	<citation>1270	4	1464</citation>
	<citation>1306	4	1464</citation>
	<citation>1323	4	1464</citation>
	<citation>1358	4	1464</citation>
	<citation>1379	4	1464</citation>
	<citation>1380	4	1464</citation>
	<citation>1453	4	1464</citation>
	<citation>1464	4	1464</citation>
	<citation>1464	4	1464</citation>
	<citation>1484	4	1464</citation>
	<citation>1491	4	1464</citation>
	<citation>1491	4	1464</citation>
	<citation>1498	4	1464</citation>
	<citation>1613	4	1464</citation>
	<citation>1614	4	1464</citation>
	<citation>1767	4	1464</citation>
	<citation>1781	4	1464</citation>
	<citation>1781	4	1464</citation>
	<citation>1787	4	1464</citation>
	<citation>1825	4	1464</citation>
	<citation>1860	4	1464</citation>
	<citation>1949	4	1464</citation>
	<citation>321	4	1464</citation>
	<citation>2059	4	1464</citation>
	<citation>2083	4	1464</citation>
	<citation>2126	4	1464</citation>
	<citation>2178	4	1464</citation>
	<citation>2179	4	1464</citation>
	<citation>2252	4	1464</citation>
	<citation>2325	4	1464</citation>
	<citation>2341	4	1464</citation>
	<citation>2546	4	1464</citation>
	<citation>435	4	1464</citation>
	<citation>437	4	1464</citation>
	<citation>463	4	1464</citation>
	<citation>483	4	1464</citation>
	<citation>491	4	1464</citation>
	<citation>2645	4	1464</citation>
	<citation>2652	4	1464</citation>
	<citation>2684	4	1464</citation>
	<citation>2732	4	1464</citation>
	<citation>2842	4	1464</citation>
	<citation>2929	4	1464</citation>
	<citation>2934	4	1464</citation>
	<citation>560	4	1464</citation>
	<citation>583	4	1464</citation>
	<citation>3069	4	1464</citation>
	<citation>3073	4	1464</citation>
	<citation>627	4	1464</citation>
	<citation>631	4	1464</citation>
	<citation>632	4	1464</citation>
	<citation>642	4	1464</citation>
	<citation>644	4	1464</citation>
	<citation>653	4	1464</citation>
	<citation>669	4	1464</citation>
	<citation>679	4	1464</citation>
	<citation>680	4	1464</citation>
	<citation>691	4	1464</citation>
	<citation>761	4	1464</citation>
	<citation>761	4	1464</citation>
	<citation>762	4	1464</citation>
	<citation>763	4	1464</citation>
	<citation>123	4	1464</citation>
	<citation>140	4	1464</citation>
	<citation>919	4	1464</citation>
	<citation>949	4	1464</citation>
	<citation>989	4	1464</citation>
	<citation>989	4	1464</citation>
	<citation>196	5	1464</citation>
	<citation>1464	5	1464</citation>
	<citation>1464	5	1464</citation>
	<citation>1464	5	1464</citation>
	<citation>3184	5	1464</citation>
	</citations>
	</document>
	<document id= '1463'>
	<title>More on Extensible Machines</title>
	<abstract>One of the most salient characteristics of extensible machines (EM) is the facility for providing  system control over program-to-program and program-to-data linkage (e.g., address connection).  It is  the intent of this paper to expand and clarify the remarks concerning program-to-program and program-to-data  linkage that were embodied in the authors' previous paper on the EM concepts, and to, finally, trace  the employment of linkage mechanisms through various levels of programming languages.</abstract>
	<conference>CACM March, 1966</conference>
	<authors>
	<author>Leonard, G. F.</author>
	<author>Goodroe, J. R.</author>
	</authors>
	<location>CA660309 JB March 3, 1978  1:34 PM</location>
	<citations>
	<citation>1463	5	1463</citation>
	<citation>1463	5	1463</citation>
	<citation>1463	5	1463</citation>
	<citation>1781	5	1463</citation>
	<citation>123	6	1463</citation>
	<citation>196	6	1463</citation>
	<citation>919	6	1463</citation>
	<citation>990	6	1463</citation>
	<citation>1007	6	1463</citation>
	<citation>1046	6	1463</citation>
	<citation>1131	6	1463</citation>
	<citation>1139	6	1463</citation>
	<citation>1140	6	1463</citation>
	<citation>1149	6	1463</citation>
	<citation>1198	6	1463</citation>
	<citation>1215	6	1463</citation>
	<citation>1223	6	1463</citation>
	<citation>1265	6	1463</citation>
	<citation>1303	6	1463</citation>
	<citation>1323	6	1463</citation>
	<citation>1358	6	1463</citation>
	<citation>1366	6	1463</citation>
	<citation>1421	6	1463</citation>
	<citation>1460	6	1463</citation>
	<citation>1462	6	1463</citation>
	<citation>1463	6	1463</citation>
	<citation>1467	6	1463</citation>
	<citation>1468	6	1463</citation>
	<citation>1477	6	1463</citation>
	<citation>1491	6	1463</citation>
	<citation>1496	6	1463</citation>
	<citation>1531	6	1463</citation>
	<citation>1535	6	1463</citation>
	<citation>1565	6	1463</citation>
	<citation>1601	6	1463</citation>
	<citation>1602	6	1463</citation>
	<citation>1613	6	1463</citation>
	<citation>1614	6	1463</citation>
	<citation>1626	6	1463</citation>
	<citation>1641	6	1463</citation>
	<citation>1787	6	1463</citation>
	<citation>1788	6	1463</citation>
	<citation>205	6	1463</citation>
	<citation>224	6	1463</citation>
	<citation>249	6	1463</citation>
	<citation>288	6	1463</citation>
	<citation>316	6	1463</citation>
	<citation>381	6	1463</citation>
	<citation>398	6	1463</citation>
	<citation>11	6	1463</citation>
	<citation>404	6	1463</citation>
	<citation>410	6	1463</citation>
	<citation>463	6	1463</citation>
	<citation>464	6	1463</citation>
	<citation>483	6	1463</citation>
	<citation>3184	6	1463</citation>
	<citation>3188	6	1463</citation>
	<citation>584	6	1463</citation>
	<citation>600	6	1463</citation>
	<citation>680	6	1463</citation>
	<citation>691	6	1463</citation>
	<citation>763	6	1463</citation>
	<citation>799	6	1463</citation>
	</citations>
	</document>
	<document id= '1462'>
	<title>Multilevel Operating Systems</title>
	<abstract>The Basic software for all newer computers is built on the well-established need for standard  operating systems. This implies that all applications-no matter how large, complex or time consuming-must  operate under (or, more precisely, on top of) the standard system.  Large applications require supervisory  monitors which handle problems similar to those of the operating systems, but at a different level.   Sometimes, still a third or even a fourth such level is required or desirable.  This leads naturally  to the concept of multilevel systems-similar vertically, but different horizontally.  Proper division  of responsibility between levels leads to greater efficiency and less logical complexity, while actually  enhancing capability.</abstract>
	<conference>CACM March, 1966</conference>
	<authors>
	<author>Hays, W.</author>
	</authors>
	<location>CA660310 JB March 3, 1978  1:31 PM</location>
	<citations>
	<citation>1462	5	1462</citation>
	<citation>1462	5	1462</citation>
	<citation>1462	5	1462</citation>
	<citation>1781	5	1462</citation>
	<citation>123	6	1462</citation>
	<citation>196	6	1462</citation>
	<citation>919	6	1462</citation>
	<citation>990	6	1462</citation>
	<citation>1007	6	1462</citation>
	<citation>1046	6	1462</citation>
	<citation>1131	6	1462</citation>
	<citation>1139	6	1462</citation>
	<citation>1140	6	1462</citation>
	<citation>1149	6	1462</citation>
	<citation>1198	6	1462</citation>
	<citation>1215	6	1462</citation>
	<citation>1223	6	1462</citation>
	<citation>1265	6	1462</citation>
	<citation>1303	6	1462</citation>
	<citation>1323	6	1462</citation>
	<citation>1358	6	1462</citation>
	<citation>1366	6	1462</citation>
	<citation>1421	6	1462</citation>
	<citation>1460	6	1462</citation>
	<citation>1462	6	1462</citation>
	<citation>1463	6	1462</citation>
	<citation>1467	6	1462</citation>
	<citation>1468	6	1462</citation>
	<citation>1477	6	1462</citation>
	<citation>1491	6	1462</citation>
	<citation>1496	6	1462</citation>
	<citation>1531	6	1462</citation>
	<citation>1535	6	1462</citation>
	<citation>1565	6	1462</citation>
	<citation>1601	6	1462</citation>
	<citation>1602	6	1462</citation>
	<citation>1613	6	1462</citation>
	<citation>1614	6	1462</citation>
	<citation>1626	6	1462</citation>
	<citation>1641	6	1462</citation>
	<citation>1787	6	1462</citation>
	<citation>1788	6	1462</citation>
	<citation>205	6	1462</citation>
	<citation>224	6	1462</citation>
	<citation>249	6	1462</citation>
	<citation>288	6	1462</citation>
	<citation>316	6	1462</citation>
	<citation>381	6	1462</citation>
	<citation>398	6	1462</citation>
	<citation>11	6	1462</citation>
	<citation>404	6	1462</citation>
	<citation>410	6	1462</citation>
	<citation>463	6	1462</citation>
	<citation>464	6	1462</citation>
	<citation>483	6	1462</citation>
	<citation>3184	6	1462</citation>
	<citation>3188	6	1462</citation>
	<citation>584	6	1462</citation>
	<citation>600	6	1462</citation>
	<citation>680	6	1462</citation>
	<citation>691	6	1462</citation>
	<citation>763	6	1462</citation>
	<citation>799	6	1462</citation>
	</citations>
	</document>
	<document id= '1461'>
	<citations>
	<citation>1461	5	1461</citation>
	<citation>1461	5	1461</citation>
	<citation>1461	5	1461</citation>
	</citations>
	<title>Discussion Summary on Operating Systems</title>
	<conference>CACM March, 1966</conference>
	<location>CA660311 JB March 3, 1978  1:26 PM</location>
	</document>
	<document id= '1460'>
	<title>Evolution of the Meta-Assembly Program</title>
	<abstract>A generalized assembler called a "meta-assembler" is described.  The meta-assembler is defined  and factors which contributed to its evolution are presented.  How a meta-assembler is made to function  as an assembly program is described. Finally, the implication of meta-assemblers on compiler design is  discussed.</abstract>
	<conference>CACM March, 1966</conference>
	<authors>
	<author>Ferguson, D. E.</author>
	</authors>
	<location>CA660312 JB March 3, 1978  11:56 AM</location>
	<citations>
	<citation>1358	5	1460</citation>
	<citation>1460	5	1460</citation>
	<citation>1460	5	1460</citation>
	<citation>1460	5	1460</citation>
	<citation>1781	5	1460</citation>
	<citation>123	6	1460</citation>
	<citation>196	6	1460</citation>
	<citation>919	6	1460</citation>
	<citation>990	6	1460</citation>
	<citation>1007	6	1460</citation>
	<citation>1046	6	1460</citation>
	<citation>1131	6	1460</citation>
	<citation>1139	6	1460</citation>
	<citation>1140	6	1460</citation>
	<citation>1149	6	1460</citation>
	<citation>1198	6	1460</citation>
	<citation>1215	6	1460</citation>
	<citation>1223	6	1460</citation>
	<citation>1265	6	1460</citation>
	<citation>1303	6	1460</citation>
	<citation>1323	6	1460</citation>
	<citation>1358	6	1460</citation>
	<citation>1366	6	1460</citation>
	<citation>1421	6	1460</citation>
	<citation>1460	6	1460</citation>
	<citation>1460	6	1460</citation>
	<citation>1462	6	1460</citation>
	<citation>1463	6	1460</citation>
	<citation>1467	6	1460</citation>
	<citation>1468	6	1460</citation>
	<citation>1477	6	1460</citation>
	<citation>1491	6	1460</citation>
	<citation>1496	6	1460</citation>
	<citation>1531	6	1460</citation>
	<citation>1535	6	1460</citation>
	<citation>1565	6	1460</citation>
	<citation>1601	6	1460</citation>
	<citation>1602	6	1460</citation>
	<citation>1613	6	1460</citation>
	<citation>1614	6	1460</citation>
	<citation>1626	6	1460</citation>
	<citation>1641	6	1460</citation>
	<citation>1787	6	1460</citation>
	<citation>1788	6	1460</citation>
	<citation>205	6	1460</citation>
	<citation>205	6	1460</citation>
	<citation>224	6	1460</citation>
	<citation>249	6	1460</citation>
	<citation>288	6	1460</citation>
	<citation>316	6	1460</citation>
	<citation>381	6	1460</citation>
	<citation>398	6	1460</citation>
	<citation>11	6	1460</citation>
	<citation>404	6	1460</citation>
	<citation>410	6	1460</citation>
	<citation>463	6	1460</citation>
	<citation>464	6	1460</citation>
	<citation>483	6	1460</citation>
	<citation>3184	6	1460</citation>
	<citation>3184	6	1460</citation>
	<citation>3188	6	1460</citation>
	<citation>584	6	1460</citation>
	<citation>600	6	1460</citation>
	<citation>680	6	1460</citation>
	<citation>691	6	1460</citation>
	<citation>729	6	1460</citation>
	<citation>763	6	1460</citation>
	<citation>799	6	1460</citation>
	<citation>799	6	1460</citation>
	</citations>
	</document>
	<document id= '1459'>
	<title>Requirements for Real-Time Languages</title>
	<abstract>Real-time languages have different requirements from other programming languages because of  the special nature of their applications, the environment in which their object programs are executed  and the environment in which they may be compiled.  It may not be the language extensions that ultimately  advance developments in the field.  Progress may be made by attacking the special compiling and executing  system problems that must be solved.</abstract>
	<conference>CACM March, 1966</conference>
	<authors>
	<author>Opler, A.</author>
	</authors>
	<location>CA660313 JB March 3, 1978  11:48 AM</location>
	<citations>
	<citation>1459	5	1459</citation>
	<citation>1459	5	1459</citation>
	<citation>1459	5	1459</citation>
	</citations>
	</document>
	<document id= '1458'>
	<title>Online Programming</title>
	<abstract>When the transition has been made from off line to online programming, there are a number of  changes in the working conditions noted.  These changes in the environment make necessary corresponding  changes in the processes related to producing and checking out programs.  In the main, it it not the  programming language itself which must be changed to provide a facility for the online user; it is the  system surrounding the programming language.  In this paper the online environment and its effect on  programming are discussed.</abstract>
	<conference>CACM March, 1966</conference>
	<authors>
	<author>Schwartz, J. I.</author>
	</authors>
	<location>CA660314 JB March 3, 197811:44 AM</location>
	<citations>
	<citation>1458	4	1458</citation>
	<citation>1523	4	1458</citation>
	<citation>1603	4	1458</citation>
	<citation>1698	4	1458</citation>
	<citation>1747	4	1458</citation>
	<citation>1748	4	1458</citation>
	<citation>1854	4	1458</citation>
	<citation>1877	4	1458</citation>
	<citation>1960	4	1458</citation>
	<citation>2377	4	1458</citation>
	<citation>2378	4	1458</citation>
	<citation>2497	4	1458</citation>
	<citation>2558	4	1458</citation>
	<citation>2625	4	1458</citation>
	<citation>2632	4	1458</citation>
	<citation>2840	4	1458</citation>
	<citation>2941	4	1458</citation>
	<citation>3105	4	1458</citation>
	<citation>3144	4	1458</citation>
	<citation>1458	5	1458</citation>
	<citation>1458	5	1458</citation>
	<citation>1458	5	1458</citation>
	<citation>1471	5	1458</citation>
	</citations>
	</document>
	<document id= '1457'>
	<title>Data Manipulation and Programming Problems in Automatic Information Retrieval</title>
	<abstract>Automatic information retrieval programs require the manipulation of a variety of different  data structures, including linear text, sparse matrices, and tree or list structures.  The main data  manipulations to be performed in automatic information systems are first briefly reviewed.  A variety  of data representations which have been used to describe structured information are then examined, and  the characteristics of various processing languages are outlined in the light of the procedures requiring  implementation.  Advantages of these programming languages for the retrieval application are examined,  and suggestions are made for the design of programming facilities to aid in information retrieval.</abstract>
	<conference>CACM March, 1966</conference>
	<authors>
	<author>Salton, G.</author>
	</authors>
	<location>CA660315 JB March 3, 1978  11:35 AM</location>
	<citations>
	<citation>1457	4	1457</citation>
	<citation>1236	5	1457</citation>
	<citation>1457	5	1457</citation>
	<citation>1457	5	1457</citation>
	<citation>1457	5	1457</citation>
	</citations>
	</document>
	<document id= '1456'>
	<title>Storage and Retrieval of Aspects of Meaning in Directed Graph Structures</title>
	<abstract>An experimental system that uses LISP to make a conceptual dictionary is described.  The dictionary  associates with each English word the syntactic information, definitional material, and references to  the contexts in which it has been used to define other words.  Such relations as class inclusion, possession,  and active or passive actions are used as definitional material.  The resulting structure serves as a  powerful vehicle for research on the logic of question answering.  Examples of methods of inputting information  and answering simple English questions are given.  An important conclusion is that, although LISP and  other list processing languages are ideally suited for producing complex associative structures, they  are inadequate vehicles for language processing on any large scale-at east until they can use auxiliary  memory as a continuous extension of core memory.</abstract>
	<conference>CACM March, 1966</conference>
	<authors>
	<author>Simmons, R. F.</author>
	</authors>
	<location>CA660316 JB March 3, 1978  11:25 AM</location>
	<citations>
	<citation>1155	4	1456</citation>
	<citation>1456	4	1456</citation>
	<citation>1468	4	1456</citation>
	<citation>1515	4	1456</citation>
	<citation>1699	4	1456</citation>
	<citation>1856	4	1456</citation>
	<citation>2127	4	1456</citation>
	<citation>1324	5	1456</citation>
	<citation>1456	5	1456</citation>
	<citation>1456	5	1456</citation>
	<citation>1456	5	1456</citation>
	</citations>
	</document>
	<document id= '1455'>
	<title>TRAC, A Procedure-Describing Language for the Reactive Typewriter</title>
	<abstract>A description of the TRAC (Text Reckoning And Compiling) language and processing algorithm  is given.  The TRAC language was developed as the basis of a software package for the reactive typewriter.   In the TRAC language, one can write procedures for accepting, naming and storing any character string  from the typewriter; for modifying any string in any way; for treating any string at any time as an executable  procedure, or as a name, or as text; and for printing out any string.  The TRAC language is based upon  an extension and generalization to character strings of the programming concept of the "macro."  Through  the ability of TRAC to accept and store definitions of procedures, the capabilities of the language can  be indefinitely extended, and can deal with character strings, integers and Boolean vector variables.</abstract>
	<conference>CACM March, 1966</conference>
	<authors>
	<author>Mooers, C. N.</author>
	</authors>
	<location>CA660317 JB March 3, 1978  11:18 AM</location>
	<citations>
	<citation>1455	5	1455</citation>
	<citation>1455	5	1455</citation>
	<citation>1455	5	1455</citation>
	<citation>1530	5	1455</citation>
	<citation>1531	5	1455</citation>
	<citation>1565	5	1455</citation>
	<citation>1703	5	1455</citation>
	<citation>1945	5	1455</citation>
	<citation>2036	5	1455</citation>
	<citation>823	6	1455</citation>
	<citation>914	6	1455</citation>
	<citation>915	6	1455</citation>
	<citation>917	6	1455</citation>
	<citation>984	6	1455</citation>
	<citation>989	6	1455</citation>
	<citation>990	6	1455</citation>
	<citation>1012	6	1455</citation>
	<citation>1084	6	1455</citation>
	<citation>1098	6	1455</citation>
	<citation>1122	6	1455</citation>
	<citation>1138	6	1455</citation>
	<citation>1139	6	1455</citation>
	<citation>1141	6	1455</citation>
	<citation>1162	6	1455</citation>
	<citation>1185	6	1455</citation>
	<citation>1200	6	1455</citation>
	<citation>1223	6	1455</citation>
	<citation>1265	6	1455</citation>
	<citation>1336	6	1455</citation>
	<citation>1358	6	1455</citation>
	<citation>1396	6	1455</citation>
	<citation>1455	6	1455</citation>
	<citation>1455	6	1455</citation>
	<citation>1455	6	1455</citation>
	<citation>1455	6	1455</citation>
	<citation>1455	6	1455</citation>
	<citation>1455	6	1455</citation>
	<citation>1477	6	1455</citation>
	<citation>1487	6	1455</citation>
	<citation>1491	6	1455</citation>
	<citation>1496	6	1455</citation>
	<citation>1565	6	1455</citation>
	<citation>205	6	1455</citation>
	<citation>483	6	1455</citation>
	<citation>584	6	1455</citation>
	<citation>669	6	1455</citation>
	<citation>680	6	1455</citation>
	<citation>763	6	1455</citation>
	</citations>
	</document>
	<document id= '1454'>
	<title>A Simple User-Oriented Compiler Source Language for Programming Automatic Test Equipment</title>
	<abstract>For the nonprogrammer, difficulty in using a language increases rapidly with the number of  nonproblem-oriented conventions.  A simple language, even if inelegant, which considers the user's background  as part of the problem may be more effective than a source language containing subtle and more powerful  capabilities.  The language described in this paper is used to write computer programs which test electronic  equipment.  Because this testing process contains few complex ideas, there is little need for the elegance  and redundancy of a highly syntax-oriented language.  A simple and direct language will suffice for the  problem.  The eventual users of this language are military depot personnel who cannot he expected to  have computer programming skill or significant programming training.  For this nonprogramming-oriented  user, it was essential to create a language using familiar engineering statements; programming-oriented  conventions would have unnecessarily complicated his task.</abstract>
	<conference>CACM April, 1966</conference>
	<authors>
	<author>Scheff, B. H.</author>
	</authors>
	<location>CA660401 JB March 3, 1978  11:09 AM</location>
	<citations>
	<citation>1454	5	1454</citation>
	<citation>1454	5	1454</citation>
	<citation>1454	5	1454</citation>
	</citations>
	</document>
	<document id= '1453'>
	<title>A Nonrecursive Method of Syntax Specification</title>
	<abstract>The use of the Kleene regular expression notation for describing algebraic language syntax,  in particular of ALGOL, is described in this paper.  A FORTRAN II computer program for carrying out the  elimination algorithm of Gorn,similar to Gaussian elimination for linear systems of algebraic equations,  is described.  This was applied to numerous smaller languages, including some sublanguage of ALGOL.   A hand calculation result of the application of the algorithm to all of ALGOL is given, thus expressing  the Revised ALGOL 1960 syntax in completely nonrecursive terms, as far as its context-free portion is  concerned.  This description in many ways is far more intuitively understood than the previous recursive  description, it is suggested.  The paper also includes results of the machine program, which does not  include a simplification algorithm.</abstract>
	<conference>CACM April, 1966</conference>
	<authors>
	<author>III, J. W.</author>
	<author>Weiland, J.</author>
	</authors>
	<location>CA660402 JB March 3, 1978  11:02 AM</location>
	<citations>
	<citation>1086	4	1453</citation>
	<citation>1132	4	1453</citation>
	<citation>1234	4	1453</citation>
	<citation>1263	4	1453</citation>
	<citation>1263	4	1453</citation>
	<citation>1265	4	1453</citation>
	<citation>1270	4	1453</citation>
	<citation>1323	4	1453</citation>
	<citation>1358	4	1453</citation>
	<citation>1379	4	1453</citation>
	<citation>1380	4	1453</citation>
	<citation>1453	4	1453</citation>
	<citation>1453	4	1453</citation>
	<citation>1464	4	1453</citation>
	<citation>1484	4	1453</citation>
	<citation>1491	4	1453</citation>
	<citation>1498	4	1453</citation>
	<citation>1613	4	1453</citation>
	<citation>1614	4	1453</citation>
	<citation>1781	4	1453</citation>
	<citation>1825	4	1453</citation>
	<citation>1860	4	1453</citation>
	<citation>1945	4	1453</citation>
	<citation>2083	4	1453</citation>
	<citation>2178	4	1453</citation>
	<citation>2179	4	1453</citation>
	<citation>2252	4	1453</citation>
	<citation>2325	4	1453</citation>
	<citation>2341	4	1453</citation>
	<citation>2546	4	1453</citation>
	<citation>2645	4	1453</citation>
	<citation>2652	4	1453</citation>
	<citation>2684	4	1453</citation>
	<citation>2842	4	1453</citation>
	<citation>2929	4	1453</citation>
	<citation>2934	4	1453</citation>
	<citation>3069	4	1453</citation>
	<citation>669	4	1453</citation>
	<citation>679	4	1453</citation>
	<citation>691	4	1453</citation>
	<citation>761	4	1453</citation>
	<citation>949	4	1453</citation>
	<citation>989	4	1453</citation>
	<citation>989	5	1453</citation>
	<citation>1453	5	1453</citation>
	<citation>1453	5	1453</citation>
	<citation>1453	5	1453</citation>
	<citation>1613	5	1453</citation>
	<citation>3184	5	1453</citation>
	<citation>987	6	1453</citation>
	<citation>1086	6	1453</citation>
	<citation>1134	6	1453</citation>
	<citation>1453	6	1453</citation>
	<citation>3184	6	1453</citation>
	</citations>
	</document>
	<document id= '1452'>
	<citations>
	<citation>1452	5	1452</citation>
	<citation>1452	5	1452</citation>
	<citation>1452	5	1452</citation>
	<citation>1633	5	1452</citation>
	<citation>1452	6	1452</citation>
	</citations>
	<title>Kutta-Merson (Algorithm 218 [D2]</title>
	<conference>CACM April, 1966</conference>
	<authors>
	<author>Bayer, G.</author>
	</authors>
	<location>CA660403g JB March 30, 1978  9:31 AM</location>
	</document>
	<document id= '1451'>
	<citations>
	<citation>1451	5	1451</citation>
	<citation>1451	5	1451</citation>
	<citation>1451	5	1451</citation>
	</citations>
	<title>Runge-Kutta Integration (Algorithm 9 [D2])</title>
	<conference>CACM April, 1966</conference>
	<authors>
	</authors>
	<location>CA660403f JB March 23, 1978  7:21 PM</location>
	</document>
	<document id= '1450'>
	<citations>
	<citation>1450	5	1450</citation>
	<citation>1450	5	1450</citation>
	<citation>1450	5	1450</citation>
	</citations>
	<title>Simultaneous Displacement of Polynomial Roots if Real and Simple (Algorithm 283 [C2])</title>
	<conference>CACM April, 1966</conference>
	<authors>
	<author>Kerner, I. O.</author>
	</authors>
	<location>CA660403e JB March 23, 1978  7:19 PM</location>
	</document>
	<document id= '1449'>
	<citations>
	<citation>1449	5	1449</citation>
	<citation>1449	5	1449</citation>
	<citation>1449	5	1449</citation>
	<citation>2129	5	1449</citation>
	<citation>1449	6	1449</citation>
	</citations>
	<title>Derivatives (Algorithm 282 [S22])</title>
	<conference>CACM April, 1966</conference>
	<authors>
	<author>Gautschi, W.</author>
	</authors>
	<location>CA660403d JB March 23, 1978  7:18 PM</location>
	</document>
	<document id= '1448'>
	<citations>
	<citation>1448	5	1448</citation>
	<citation>1448	5	1448</citation>
	<citation>1448	5	1448</citation>
	</citations>
	<title>Abscissas and Weights for Romberg Quadrature (Algorithm 281 [D1])</title>
	<conference>CACM April, 1966</conference>
	<authors>
	<author>Welsch, J. H.</author>
	</authors>
	<location>CA660403c JB March 23, 1978  7:17 PM</location>
	</document>
	<document id= '1447'>
	<citations>
	<citation>1447	5	1447</citation>
	<citation>1447	5	1447</citation>
	<citation>1447	5	1447</citation>
	</citations>
	<title>Abscissas and Weights for Gregory Quadrature [D1])</title>
	<conference>CACM April, 1966</conference>
	<authors>
	<author>Welsch, J. H.</author>
	</authors>
	<location>CA660403b JB March 23, 1978  7:16 PM</location>
	</document>
	<document id= '1446'>
	<citations>
	<citation>1446	5	1446</citation>
	<citation>1446	5	1446</citation>
	<citation>1446	5	1446</citation>
	</citations>
	<title>Chebyshev Quadrature (Algorithm 279 [D1])</title>
	<conference>CACM April, 1966</conference>
	<authors>
	<author>Hopgood, F. R. A.</author>
	<author>Litherland, C.</author>
	</authors>
	<location>CA660403a JB March 3, 1978  10:50 AM</location>
	</document>
	<document id= '1445'>
	<title>Use of the Computer to Teach Introductory Statistics</title>
	<abstract>It has always been obvious that the aid to calculation offered by the computer forces a change  in the curricula of mathematics, statistics, physics, engineering and other courses.  Not so obvious  are the many pedagogic aids the computer can offer in teaching the subject matter.  The possibilities  of giving the student a better technical as well as conceptual understanding of statistics were explored  for a number of years at the College of Medicine of the University of Cincinnati and are reported here.</abstract>
	<conference>CACM April, 1966</conference>
	<authors>
	<author>Sterling, T. D.</author>
	<author>Pollack, S. V.</author>
	</authors>
	<location>CA660404 JB March 3, 1978  10:48 AM</location>
	<citations>
	<citation>1445	5	1445</citation>
	<citation>1445	5	1445</citation>
	<citation>1445	5	1445</citation>
	</citations>
	</document>
	<document id= '1444'>
	<title>An Algorithm for Generating Projective Reduction Formulas for Matrix Elements of Many-Electron  Wavefunctions</title>
	<abstract>An ALGOL procedure is given for automatically generating formulas for matrix elements arising  in the variational solution of the Schrodinger equation for many-electron systems.</abstract>
	<conference>CACM April, 1966</conference>
	<authors>
	<author>Reeves, C. M.</author>
	</authors>
	<location>CA660405 JB March 3, 1978  10:44 AM</location>
	<citations>
	<citation>1334	4	1444</citation>
	<citation>1396	4	1444</citation>
	<citation>1444	4	1444</citation>
	<citation>964	5	1444</citation>
	<citation>1444	5	1444</citation>
	<citation>1444	5	1444</citation>
	<citation>1444	5	1444</citation>
	</citations>
	</document>
	<document id= '1443'>
	<title>A Method for Finding the Least Squares Estimate of the Intersection Point of Two Helices in Space</title>
	<abstract>When the helical trajectories of two charged particles moving away from a common point in a  magnetic field are reconstructed from measurements on the tracks, the reconstructed tracks are perturbed  by measurement and other errors and do not, in general, intersect.  A method is given for adjusting the  reconstructed tracks in a least squares manner so that they do intersect.</abstract>
	<conference>CACM April, 1966</conference>
	<authors>
	<author>Royston, R. J.</author>
	<author>Gregory, J.</author>
	</authors>
	<location>CA660406 JB March 3, 1978  10:42 AM</location>
	<citations>
	<citation>1443	5	1443</citation>
	<citation>1443	5	1443</citation>
	<citation>1443	5	1443</citation>
	</citations>
	</document>
	<document id= '1442'>
	<citations>
	<citation>1442	5	1442</citation>
	<citation>1442	5	1442</citation>
	<citation>1442	5	1442</citation>
	</citations>
	<title>Recorded Magnetic Tape For Information Interchange (800 CPI, NRZI)* (Proposed American Standard)</title>
	<conference>CACM April, 1966</conference>
	<location>CA660407 JB March 3, 1978  10:39 AM</location>
	</document>
	<document id= '1441'>
	<title>Methods of Numerical Integration Applied to a System Having Trivial Function Evaluations</title>
	<abstract>A study has been made to determine which methods of numerical integration require the least  computation time for a given amount of truncation error when applied to a particular system of ordinary  differential equations where function evaluations are relatively trivial.  Recent methods due to Butcher  and Gear are compared with classic Runge-Kutta, Kutta-Nystrom and Adams methods.  Some of the newer one-step  methods due to Butcher are found to be slightly superior, but no one method is found to have any great  advantage over the others in the application to this particular problem.</abstract>
	<conference>CACM April, 1966</conference>
	<authors>
	<author>Waters, J.</author>
	</authors>
	<location>CA660408 JB March 3, 1978  10:37 AM</location>
	<citations>
	<citation>1441	5	1441</citation>
	<citation>1441	5	1441</citation>
	<citation>1441	5	1441</citation>
	</citations>
	</document>
	<document id= '1440'>
	<title>Starting Approximations for Square Root Calculation on IBM System/360</title>
	<abstract>Several starting approximations for square root calculation by Newton's method are presented  in a form to facilitate their use in IBM System/360 square root routines.  These approximations include  several for the range [1/16, 1], which is the interval of primary interest on IBM System/360.</abstract>
	<conference>CACM April, 1966</conference>
	<authors>
	<author>Fike, C. T.</author>
	</authors>
	<location>CA660409 JB March 3, 1978  10:32 AM</location>
	<citations>
	<citation>1015	4	1440</citation>
	<citation>1346	4	1440</citation>
	<citation>1440	4	1440</citation>
	<citation>1440	4	1440</citation>
	<citation>1645	4	1440</citation>
	<citation>1932	4	1440</citation>
	<citation>2159	4	1440</citation>
	<citation>951	4	1440</citation>
	<citation>962	5	1440</citation>
	<citation>1440	5	1440</citation>
	<citation>1440	5	1440</citation>
	<citation>1440	5	1440</citation>
	<citation>1566	5	1440</citation>
	<citation>532	5	1440</citation>
	<citation>1440	6	1440</citation>
	</citations>
	</document>
	<document id= '1439'>
	<title>Mechanization of the Curve Fitting Process: DATAN</title>
	<abstract>A process for fitting a curve to approximate data and the problem it creates for the engineer-programmer  is defined.  An approach has also been defined and a system has been written for the SRU 1107 to mechanize  a major portion of this process.  The techniques developed to accomplish the mechanization are largely  empirical, and are dependent for their information only on the actual data points.</abstract>
	<conference>CACM April, 1966</conference>
	<authors>
	<author>Simonsen, R. H.</author>
	<author>Anketell, D. L.</author>
	</authors>
	<location>CA660410 JB March 3, 1978  10:26 AM</location>
	<citations>
	<citation>1439	5	1439</citation>
	<citation>1439	5	1439</citation>
	<citation>1439	5	1439</citation>
	</citations>
	</document>
	<document id= '1438'>
	<title>A Method for Locating Zeros of Complex Functions</title>
	<abstract>A method for computing the index, or winding number, is developed and applied to the problem  of finding zeros of functions from the plane into the plane.</abstract>
	<conference>CACM April, 1966</conference>
	<authors>
	</authors>
	<location>CA660411 JB March 3, 1978  10:23 AM</location>
	<citations>
	<citation>1438	5	1438</citation>
	<citation>1438	5	1438</citation>
	<citation>1438	5	1438</citation>
	</citations>
	</document>
	<document id= '1437'>
	<citations>
	<citation>1437	5	1437</citation>
	<citation>1437	5	1437</citation>
	<citation>1437	5	1437</citation>
	</citations>
	<title>The Mutual Primal-Dual Method (Algorithm 285 [H])</title>
	<conference>CACM May, 1966</conference>
	<authors>
	<author>Aird, T. J.</author>
	</authors>
	<location>CA660501b JB March 23, 1978  7:12 PM</location>
	</document>
	<document id= '1436'>
	<citations>
	<citation>1436	5	1436</citation>
	<citation>1436	5	1436</citation>
	<citation>1436	5	1436</citation>
	</citations>
	<title>Interchange of Two Blocks of Data (Algorithm 284 [K2])</title>
	<conference>CACM May, 1966</conference>
	<authors>
	<author>Fletcher, W.</author>
	</authors>
	<location>CA660501a JB March 3, 1978  10:21 AM</location>
	</document>
	<document id= '1435'>
	<title>Design of Computer Simulation Experiments for Industrial Systems</title>
	<abstract>The aim of this paper is to provide background information on the existing literature on experimental  design techniques which may be applicable to the design of computer simulation experiments for industrial  systems.  Although major emphasis is placed on analysis of variance techniques, three other techniques  of data analysis are considered-multiple ranking procedures, sequential sampling and spectral analysis.   The paper treats four specific experimental design problems and several techniques for solving them.   The four experimental design problems are: (1) the problem of stochastic convergence, (2) the problem  of factor selection, (3) the problem of motive and (4) the many response problem.</abstract>
	<conference>CACM May, 1966</conference>
	<authors>
	<author>Burdick, D. S.</author>
	<author>Naylor, T. H.</author>
	</authors>
	<location>CA660502 JB March 3, 1978  10:20 AM</location>
	<citations>
	<citation>1435	5	1435</citation>
	<citation>1435	5	1435</citation>
	<citation>1435	5	1435</citation>
	<citation>1517	5	1435</citation>
	<citation>1435	6	1435</citation>
	</citations>
	</document>
	<document id= '1434'>
	<title>A Monte Carlo Algorithm for Assigning Students to Classes</title>
	<abstract>A technique of random choice is illustrated by application to the problem of assigning students  to a fixed schedule of courses.  Using the technique it is possible to reduce or eliminate difficulties  that result when a popular section is filled and closed before all students requesting and requiring  it have been scheduled.  The effectiveness of automatic scheduling is retained without loss of the students  privilege of picking favorite instructors.</abstract>
	<conference>CACM May, 1966</conference>
	<authors>
	<author>Macon, N.</author>
	<author>Walker, E. E.</author>
	</authors>
	<location>CA660503 JB March 3, 1978  10:14 AM</location>
	<citations>
	<citation>1434	5	1434</citation>
	<citation>1434	5	1434</citation>
	<citation>1434	5	1434</citation>
	<citation>1540	5	1434</citation>
	<citation>2209	5	1434</citation>
	<citation>1434	6	1434</citation>
	<citation>1434	6	1434</citation>
	<citation>1540	6	1434</citation>
	</citations>
	</document>
	<document id= '1433'>
	<title>A Note on Linear Programming Algorithm Design: A Combinatorial Problem</title>
	<abstract>As linear programming models grow bigger and bigger in size, much actual data that must be  memorized is often put on magnetic tape or disk, and consequently there is an improportionality fast  rise in the consumption of computer time.To cut down this expense, an ever increasing effort is made  to design more efficient algorithms.  This paper is meant to support the effort.  It is attempted to  find some characteristics of the way a pivot column is found.  The number of repetitions of a certain  transfer of data from tape to core memory is considered.  After some simplification, the problem is restated  in a general way.  The generating function of the probability distribution and the moment generating  function of the number of repetitions is found.  Asymptotic formulas are given for the moments using  a result from a paper of S. Narumi [1].  The results may be applied to write very efficient routines  that search for an extreme value in a table.  Formulas provide a means of calculating the computer timings  in this case.</abstract>
	<conference>CACM May, 1966</conference>
	<authors>
	<author>Roes, P. B. M.</author>
	</authors>
	<location>CA660504 JB March 3, 1978  10:10 AM</location>
	<citations>
	<citation>1433	5	1433</citation>
	<citation>1433	5	1433</citation>
	<citation>1433	5	1433</citation>
	</citations>
	</document>
	<document id= '1432'>
	<title>Incorporation of Nonstandard Input/Output Devices into FORTRAN Systems</title>
	<abstract>A FORTRAN system may readily be modified to handle input/output with nonstandard media on the  same basis on which it handles the standard media.  This is done by providing a character-handling subroutine  suited to the nonstandard medium and arranged to be called by an otherwise unused output statement type  or unit number. This method was used to control output of alphanumeric information on a digital graph  plotter.</abstract>
	<conference>CACM May, 1966</conference>
	<authors>
	<author>Cohn, C. E.</author>
	</authors>
	<location>CA660505 JB March 3, 1978  10:01 AM</location>
	<citations>
	<citation>1432	5	1432</citation>
	<citation>1432	5	1432</citation>
	<citation>1432	5	1432</citation>
	</citations>
	</document>
	<document id= '1431'>
	<title>On a Storage Mapping Function For Data Structures</title>
	<abstract>Some basic facts about certain data structures are reviewed and an efficient algorithm is presented  for constructing a storage mapping function for a structure from the structure's definition.</abstract>
	<conference>CACM May, 1966</conference>
	<authors>
	<author>Deuel, P.</author>
	</authors>
	<location>CA660506 JB March 3, 1978  9:58 AM</location>
	<citations>
	<citation>1431	5	1431</citation>
	<citation>1431	5	1431</citation>
	<citation>1431	5	1431</citation>
	</citations>
	</document>
	<document id= '1430'>
	<title>Multiple Precision Floating-Point Conversion from Decimal-to-Binary and Vice Versa</title>
	<abstract>Decimal-to-binary and binary-to-decimal floating-point conversion is often performed by using  a table of the powers 10^i, (ia positive integer) for converting from base 10 to base 2, and by using  a table of the coefficient of a polynomial approximation of 10^x, (0&amp;lt;=x&amp;lt;1) for converting from base 2  to base 10.  These tables occupy a large storage region in the case of a nonsingle precision conversion.   This paper shows that a single small table suffices for a floating-point conversion from decimal to  binary, and vice versa, in any useful precision.</abstract>
	<conference>CACM May, 1966</conference>
	<authors>
	<author>Mancino, O. G.</author>
	</authors>
	<location>CA660507 JB March 3, 1978  9:56 AM</location>
	<citations>
	<citation>1430	5	1430</citation>
	<citation>1430	5	1430</citation>
	<citation>1430	5	1430</citation>
	</citations>
	</document>
	<document id= '1429'>
	<title>Matrix Reduction Using the Hungarian Method For The Generation of School Timetables</title>
	<abstract>The application of Kuhn's Hungarian Method to the problem of matrix reduction as needed in  Gotlieb's method for timetable generation is described.  The method is suited to both hand and computer  calculation.  Devices to improve the efficiency of the basic algorithm are discussed.</abstract>
	<conference>CACM May, 1966</conference>
	<authors>
	<author>Lions, J.</author>
	</authors>
	<location>CA660508 JB March 3, 1978  9:52 AM</location>
	<citations>
	<citation>1429	5	1429</citation>
	<citation>1429	5	1429</citation>
	<citation>1429	5	1429</citation>
	<citation>2619	5	1429</citation>
	<citation>2772	5	1429</citation>
	<citation>2787	5	1429</citation>
	<citation>1116	6	1429</citation>
	<citation>1116	6	1429</citation>
	<citation>1419	6	1429</citation>
	<citation>1429	6	1429</citation>
	<citation>1429	6	1429</citation>
	<citation>1429	6	1429</citation>
	</citations>
	</document>
	<document id= '1428'>
	<title>SHOCK III, A Computer System As an Aid in the Management of Critically III Patients</title>
	<abstract>SHOCK III, an online digital computer system to assist the physician, nurse and paramedical  personnel in monitoring and reporting on critically ill patients, is described.</abstract>
	<conference>CACM May, 1966</conference>
	<authors>
	<author>Shubin, H.</author>
	<author>Weil, M. H.</author>
	<author>Meagher, P. F.</author>
	</authors>
	<location>CA660509 JB March 3, 1978  9:49 AM</location>
	<citations>
	<citation>1428	5	1428</citation>
	<citation>1428	5	1428</citation>
	<citation>1428	5	1428</citation>
	</citations>
	</document>
	<document id= '1427'>
	<title>Simulation of Radioisotope Scans by Computer</title>
	<abstract>In radioisotope scanning, a field which is assuming increasing importance in medical diagnosis,  the scan is a two-dimensional pattern made up of dots.  Areas of increased source activity are represented  on the scan by areas of increased dot density.  To study the output of scanners with various characteristics,  a program which simulates radioisotope scans has been written  for a PDP-1 computer with auxiliary disk  storage and cathode ray tube display.  Past and present research using the output of the simulator has  shown the flexibility of the system to be important.  The structure of this program can be useful in  the simulation of the output of any quantum-limited system.</abstract>
	<conference>CACM May, 1966</conference>
	<authors>
	<author>Pizer, S. M.</author>
	</authors>
	<location>CA660510 JB March 3, 1978  9:47 AM</location>
	<citations>
	<citation>1427	5	1427</citation>
	<citation>1427	5	1427</citation>
	<citation>1427	5	1427</citation>
	</citations>
	</document>
	<document id= '1426'>
	<title>A Simulation of Hospital Admission Policy</title>
	<abstract>A study is described which simulates different admission policies of a large specialized hospital.   The objective is to determine better policies for stabilization of admission and census rates while  maintaining a reasonably full hospital.  There types of policies were examined: admission based on percentages  of discharge rates, discharge rates plus or minus a constant, and fixed authorizations independent of  discharge rates.  The last type policy produced more stable simulated results, and when put into practice,  improvements were realized.</abstract>
	<conference>CACM May, 1966</conference>
	<authors>
	<author>Smith, W. G.</author>
	</authors>
	<location>CA660511 JB March 3, 1978  9:42 AM</location>
	<citations>
	<citation>1426	5	1426</citation>
	<citation>1426	5	1426</citation>
	<citation>1426	5	1426</citation>
	</citations>
	</document>
	<document id= '1425'>
	<title>Flow Diagrams, Turing Machines And Languages With Only Two Formation Rules</title>
	<abstract>In the first part of the paper, flow diagrams are introduced to represent inter al. mappings  of a set into itself.  Although not every diagram is decomposable into a finite number of given base  diagrams, this becomes true at a semantical level due to a suitable extension of the given set and of  the basic mappings defined in it.  Two normalization methods of flow diagrams are given.  The first has  three base diagrams; the second, only two.  In the second part of the paper, the second method is applied  to the theory of Turing machines.  With every Turing machine provided with a two-way half-tape, there  is associated a similar machine, doing essentially the same job, but working on a tape obtained from  the first one by interspersing alternate blank squares.  The new machine belongs to the family, elsewhere  introduced, generated by composition and iteration from the two machines L and R.  That family is a proper  subfamily of the whole family of Turing machines.</abstract>
	<conference>CACM May, 1966</conference>
	<authors>
	<author>Bohm, C.</author>
	<author>Jacopini, G.</author>
	</authors>
	<location>CA660512 JB March 3, 1978  9:35 AM</location>
	<citations>
	<citation>1425	4	1425</citation>
	<citation>1781	4	1425</citation>
	<citation>438	4	1425</citation>
	<citation>762	4	1425</citation>
	<citation>249	5	1425</citation>
	<citation>1425	5	1425</citation>
	<citation>1425	5	1425</citation>
	<citation>1425	5	1425</citation>
	<citation>2709	5	1425</citation>
	<citation>2802	5	1425</citation>
	<citation>3004	5	1425</citation>
	<citation>1425	6	1425</citation>
	<citation>1425	6	1425</citation>
	<citation>1425	6	1425</citation>
	<citation>2138	6	1425</citation>
	<citation>2204	6	1425</citation>
	<citation>2247	6	1425</citation>
	<citation>2356	6	1425</citation>
	<citation>2456	6	1425</citation>
	<citation>2456	6	1425</citation>
	<citation>2477	6	1425</citation>
	<citation>3186	6	1425</citation>
	</citations>
	</document>
	<document id= '1424'>
	<title>Automatic Analysis of Electronic Digital Circuits Using List Processing</title>
	<abstract>A mapping from black diagrams of digital circuits to list structures is described, together  with a list processing program written for the Control Data 3600 which uses this mapping to automatically  carry out circuit analysis.</abstract>
	<conference>CACM May, 1966</conference>
	<authors>
	<author>Shalla, L.</author>
	</authors>
	<location>CA660513 JB March 3, 1978  9:24 AM</location>
	<citations>
	<citation>1424	5	1424</citation>
	<citation>1424	5	1424</citation>
	<citation>1424	5	1424</citation>
	<citation>1846	5	1424</citation>
	<citation>1380	6	1424</citation>
	<citation>1424	6	1424</citation>
	<citation>1484	6	1424</citation>
	<citation>1572	6	1424</citation>
	<citation>576	6	1424</citation>
	</citations>
	</document>
	<document id= '1423'>
	<title>A Simple Algorithm for Computing the Generalized Inverse of a Matrix</title>
	<abstract>The generalized inverse of a matrix is important in analysis because it provides an extension  of the concept of an inverse which applies to all matrices.  It also has many applications in numerical  analysis, but it is not widely used because the existing algorithms are fairly complicated and require  considerable storage space.  A simple extension has been found to the conventional orthogonalization  method for inverting non-singular matrices, which gives the generalized inverse with little extra effort  and with no additional storage requirements.  The algorithm gives the generalized inverse for any m by  n matrix A, including the special case when m+n and A is non-singular and the case when m>n and rank(A)  = n.  In the first case the algorithm gives the ordinary inverse of A.  In the second case the algorithm  yields the ordinary least squares transformation matrix INV(A'A)A' and has the advantage of avoiding  the loss of significance which results in forming the product A'A explicitly.</abstract>
	<conference>CACM May, 1966</conference>
	<authors>
	<author>Rust, R.</author>
	<author>Burrus, W. R.</author>
	<author>Schneeberger, C.</author>
	</authors>
	<location>CA660514 JB March 3, 1978  9:22 AM</location>
	<citations>
	<citation>1423	5	1423</citation>
	<citation>1423	5	1423</citation>
	<citation>1423	5	1423</citation>
	</citations>
	</document>
	<document id= '1422'>
	<citations>
	<citation>1422	5	1422</citation>
	<citation>1422	5	1422</citation>
	<citation>1422	5	1422</citation>
	</citations>
	<title>Eleven-Sixteenths Inch Perforated Paper Tape (Proposed American Standard)</title>
	<conference>CACM May, 1966</conference>
	<location>CA660515 JB March 3, 1978  9:09 AM</location>
	</document>
	<document id= '1421'>
	<title>A Contribution to the Development of ALGOL</title>
	<abstract>A programming language similar in many respects to ALGOL 60, but incorporating a large number  of improvements based on six years experience with that language, is described in detail.  Part I consists  of an introduction to the new language and a summary of the changes made to ALGOL 60, together with a  discussion of the motives behind there visions.  Part II is a rigorous definition of the proposed language.   Part III describes a set of proposed standard procedures to be used with the language, including facilities  for input/output.</abstract>
	<conference>CACM June, 1966</conference>
	<authors>
	<author>Wirth, N.</author>
	<author>Hoare, C. A. R.</author>
	</authors>
	<location>CA660601 JB March 3, 1978  9:07 AM</location>
	<citations>
	<citation>1380	5	1421</citation>
	<citation>1421	5	1421</citation>
	<citation>1421	5	1421</citation>
	<citation>1421	5	1421</citation>
	<citation>1552	5	1421</citation>
	<citation>1693	5	1421</citation>
	<citation>1781	5	1421</citation>
	<citation>1854	5	1421</citation>
	<citation>1860	5	1421</citation>
	<citation>2060	5	1421</citation>
	<citation>557	5	1421</citation>
	<citation>123	6	1421</citation>
	<citation>196	6	1421</citation>
	<citation>919	6	1421</citation>
	<citation>990	6	1421</citation>
	<citation>1007	6	1421</citation>
	<citation>1046	6	1421</citation>
	<citation>1131	6	1421</citation>
	<citation>1139	6	1421</citation>
	<citation>1140	6	1421</citation>
	<citation>1149	6	1421</citation>
	<citation>1184	6	1421</citation>
	<citation>1198	6	1421</citation>
	<citation>1215	6	1421</citation>
	<citation>1223	6	1421</citation>
	<citation>1265	6	1421</citation>
	<citation>1303	6	1421</citation>
	<citation>1323	6	1421</citation>
	<citation>1358	6	1421</citation>
	<citation>1366	6	1421</citation>
	<citation>1366	6	1421</citation>
	<citation>1380	6	1421</citation>
	<citation>1389	6	1421</citation>
	<citation>1421	6	1421</citation>
	<citation>1421	6	1421</citation>
	<citation>1421	6	1421</citation>
	<citation>1421	6	1421</citation>
	<citation>1421	6	1421</citation>
	<citation>1421	6	1421</citation>
	<citation>1421	6	1421</citation>
	<citation>1421	6	1421</citation>
	<citation>1460	6	1421</citation>
	<citation>1462	6	1421</citation>
	<citation>1463	6	1421</citation>
	<citation>1467	6	1421</citation>
	<citation>1468	6	1421</citation>
	<citation>1469	6	1421</citation>
	<citation>1471	6	1421</citation>
	<citation>1477	6	1421</citation>
	<citation>1477	6	1421</citation>
	<citation>1477	6	1421</citation>
	<citation>1491	6	1421</citation>
	<citation>1491	6	1421</citation>
	<citation>1491	6	1421</citation>
	<citation>1496	6	1421</citation>
	<citation>1496	6	1421</citation>
	<citation>1531	6	1421</citation>
	<citation>1535	6	1421</citation>
	<citation>1565	6	1421</citation>
	<citation>1601	6	1421</citation>
	<citation>1602	6	1421</citation>
	<citation>1613	6	1421</citation>
	<citation>1614	6	1421</citation>
	<citation>1614	6	1421</citation>
	<citation>1626	6	1421</citation>
	<citation>1626	6	1421</citation>
	<citation>1641	6	1421</citation>
	<citation>1641	6	1421</citation>
	<citation>1748	6	1421</citation>
	<citation>1749	6	1421</citation>
	<citation>1785	6	1421</citation>
	<citation>1786	6	1421</citation>
	<citation>1787	6	1421</citation>
	<citation>1788	6	1421</citation>
	<citation>205	6	1421</citation>
	<citation>210	6	1421</citation>
	<citation>224	6	1421</citation>
	<citation>249	6	1421</citation>
	<citation>1869	6	1421</citation>
	<citation>288	6	1421</citation>
	<citation>316	6	1421</citation>
	<citation>378	6	1421</citation>
	<citation>378	6	1421</citation>
	<citation>381	6	1421</citation>
	<citation>398	6	1421</citation>
	<citation>2110	6	1421</citation>
	<citation>11	6	1421</citation>
	<citation>404	6	1421</citation>
	<citation>410	6	1421</citation>
	<citation>463	6	1421</citation>
	<citation>464	6	1421</citation>
	<citation>483	6	1421</citation>
	<citation>3184	6	1421</citation>
	<citation>3184	6	1421</citation>
	<citation>3184	6	1421</citation>
	<citation>3188	6	1421</citation>
	<citation>584	6	1421</citation>
	<citation>600	6	1421</citation>
	<citation>680	6	1421</citation>
	<citation>691	6	1421</citation>
	<citation>731	6	1421</citation>
	<citation>763	6	1421</citation>
	<citation>799	6	1421</citation>
	<citation>799	6	1421</citation>
	</citations>
	</document>
	<document id= '1420'>
	<title>A New Uniform Pseudorandom Number Generator</title>
	<abstract>A new multiplicative congruential pseudorandom number generator is discussed, in which the  modulus is the largest prime within accumulator capacity and the multiplier is a primitive root of that  prime.  This generator passes the usual statistical tests and in addition the least significant bits  appear to be as random as the most significant bits-a property which generators having modulus 2^k do  not possess.</abstract>
	<conference>CACM June, 1966</conference>
	<authors>
	<author>Hutchinson, D. W.</author>
	</authors>
	<location>CA660602 JB March 3, 1978  9:01 AM</location>
	<citations>
	<citation>1420	5	1420</citation>
	<citation>1420	5	1420</citation>
	<citation>1420	5	1420</citation>
	<citation>1691	5	1420</citation>
	<citation>1293	6	1420</citation>
	<citation>1420	6	1420</citation>
	<citation>1631	6	1420</citation>
	</citations>
	</document>
	<document id= '1419'>
	<citations>
	<citation>1355	5	1419</citation>
	<citation>1419	5	1419</citation>
	<citation>1419	5	1419</citation>
	<citation>1419	5	1419</citation>
	<citation>2619	5	1419</citation>
	<citation>1419	6	1419</citation>
	<citation>1419	6	1419</citation>
	<citation>1429	6	1419</citation>
	</citations>
	<title>Chebyshev Quadrature (Algorithm 279 [D1])</title>
	<conference>CACM June, 1966</conference>
	<authors>
	<author>Hopgood, F. R. A.</author>
	<author>Litherland, C.</author>
	</authors>
	<location>CA660603b JB March 23, 1978  7:09 PM</location>
	</document>
	<document id= '1418'>
	<citations>
	<citation>1418	5	1418</citation>
	<citation>1418	5	1418</citation>
	<citation>1418	5	1418</citation>
	<citation>2350	5	1418</citation>
	<citation>2354	5	1418</citation>
	<citation>2355	5	1418</citation>
	<citation>1418	6	1418</citation>
	<citation>1418	6	1418</citation>
	<citation>1418	6	1418</citation>
	<citation>1521	6	1418</citation>
	<citation>1521	6	1418</citation>
	<citation>1597	6	1418</citation>
	<citation>1597	6	1418</citation>
	<citation>1679	6	1418</citation>
	<citation>1883	6	1418</citation>
	<citation>2040	6	1418</citation>
	<citation>2350	6	1418</citation>
	<citation>2350	6	1418</citation>
	<citation>2354	6	1418</citation>
	<citation>2354	6	1418</citation>
	<citation>2355	6	1418</citation>
	<citation>2355	6	1418</citation>
	</citations>
	<title>Examination Scheduling (Algorithm 286 [ZH])</title>
	<conference>CACM June, 1966</conference>
	<authors>
	<author>Peck, J. E. L.</author>
	<author>Williams, M. R.</author>
	</authors>
	<location>CA660603a JB March 3, 1978  8:58 AM</location>
	</document>
	<document id= '1417'>
	<title>Economies of Scale and the IBM System/360</title>
	<abstract>Cost functions among five System/360 models are analyzed through examinations of instruction  times, program kernels and a "typical" instruction mix.  Comparisons are made between the data developed  here and Grosch's Law which seems to be applicable to much of the data.  Sizable economies of scale are  unquestionably present in computing equipment.</abstract>
	<conference>CACM June, 1966</conference>
	<authors>
	</authors>
	<location>CA660604 JB March 3, 1978  8:57 AM</location>
	<citations>
	<citation>1417	5	1417</citation>
	<citation>1417	5	1417</citation>
	<citation>1417	5	1417</citation>
	<citation>1653	5	1417</citation>
	<citation>2387	5	1417</citation>
	<citation>2852	5	1417</citation>
	<citation>963	6	1417</citation>
	<citation>1069	6	1417</citation>
	<citation>1417	6	1417</citation>
	<citation>1417	6	1417</citation>
	<citation>1417	6	1417</citation>
	<citation>1771	6	1417</citation>
	<citation>2345	6	1417</citation>
	<citation>2387	6	1417</citation>
	<citation>2479	6	1417</citation>
	<citation>3190	6	1417</citation>
	</citations>
	</document>
	<document id= '1416'>
	<title>A Fortran Technique for Simplifying Input to Report Generators</title>
	<abstract>Typical report generators allow the production of standard forms when tabulating a magnetic  tape file; the extraction of nonstandard sets of information, with suitable annotation, involves troublesome  forms design.  A method of information extraction involving the calculation of suitable FORTRAN FORMAT  statements, which combats this problem, is described.</abstract>
	<conference>CACM June, 1966</conference>
	<authors>
	<author>Cleary, J. G.</author>
	</authors>
	<location>CA660605 JB March 3, 1978  8:53 AM</location>
	<citations>
	<citation>1416	5	1416</citation>
	<citation>1416	5	1416</citation>
	<citation>1416	5	1416</citation>
	</citations>
	</document>
	<document id= '1415'>
	<title>Automatic Derivation of Microsentences</title>
	<abstract>The decomposition of long complex English sentences into shorter kernel-like constituent sentences  (microsentences)has often been suggested as an avenue toward conducting automatic retrieval of natural  language messages.  To explore the prospects of such a step, the authors attempted in 1963 to prepare  a general program for deriving microsentences from longer sentences that had been syntactically analyzed  by the Harvard Multipath Analysis Program.  The basic idea was to extract the subject, verb and object  (if any) of each clause and to reassemble these materials into a grammatical microsentence.  A program  is described in this paper, which was designed to operate on the tree structure output of the analyzer,  and the microsentences that were produced are exhibited.  The authors conclude that while microsentences  of the quality achieved do not open up immediate prospects for improving the performance of automatic  message retrieval systems, they may have practical value in man-machine systems using human monitors  to select the preferred syntactic interpretation of a sentence.</abstract>
	<conference>CACM June, 1966</conference>
	<authors>
	<author>Carmody, B.</author>
	</authors>
	<location>CA660606 JB March 3, 1978  8:47 AM</location>
	<citations>
	<citation>1415	5	1415</citation>
	<citation>1415	5	1415</citation>
	<citation>1415	5	1415</citation>
	</citations>
	</document>
	<document id= '1414'>
	<citations>
	<citation>1414	5	1414</citation>
	<citation>1414	5	1414</citation>
	<citation>1414	5	1414</citation>
	</citations>
	<title>Twelve-Row Punched-Card Code for Information Interchange* (Proposed American Standard)</title>
	<conference>CACM June, 1966</conference>
	<location>CA660607 JB March 3, 1978  8:39 AM</location>
	</document>
	<document id= '1413'>
	<title>A Vision of Technology and Education</title>
	<abstract>Educational technology is currently quite fashionable.  Here, as in many other branches or  aspects of technology, changes possible in the next generation or two are now known as ideas, discoveries  or inventions.  The unknown is whether the potential will become the actual and, if so, on what time  scale.  This ignorance stems largely from ignorance about the social response to potential technological  change.  The object of this paper is to present a vision of potential educational technology and to raise  questions about the modes of social response and adaptation likely to be evoked by such a vision.</abstract>
	<conference>CACM July, 1966</conference>
	<authors>
	<author>Oettinger, A. G.</author>
	</authors>
	<location>CA660701 JB March 3, 1978  8:38 AM</location>
	<citations>
	<citation>1413	4	1413</citation>
	<citation>1413	4	1413</citation>
	<citation>1654	4	1413</citation>
	<citation>1771	4	1413</citation>
	<citation>1902	4	1413</citation>
	<citation>2478	4	1413</citation>
	<citation>1205	5	1413</citation>
	<citation>1270	5	1413</citation>
	<citation>1413	5	1413</citation>
	<citation>1413	5	1413</citation>
	<citation>1413	5	1413</citation>
	</citations>
	</document>
	<document id= '1412'>
	<title>The Banking Information System Concept</title>
	<abstract>Most large commercial banks have progressed to the  point where their major accounting applications  have been automated and more sophisticated usage of data processing equipment is being sought.  This,  coupled with the availability of equipment well suited to real-time, direct access processing,has led  to development within some banks of the central file of data base approach toward a banking information  system.  The banking information system now serves the two-fold purpose of providing real-time responses  to inquires about individual account stasus and providing more complex combinations of information for  management use.  Both kinds of processing draw upon a common store of data contained in the direct access  central file.  This data base includes indexes which facilitate cross referencing of account information  so that all relationships between bank and customer may be discerned.  In introducing the banking information  system concept, a gradual approach to account cross-referencing and file conversion is most prudent.   Generally, this system must interface with other computer applications already existing within the bank.</abstract>
	<conference>CACM July, 1966</conference>
	<authors>
	<author>Head, R. V.</author>
	</authors>
	<location>CA660702 JB March 2, 1978  9:53 PM</location>
	<citations>
	<citation>1412	5	1412</citation>
	<citation>1412	5	1412</citation>
	<citation>1412	5	1412</citation>
	</citations>
	</document>
	<document id= '1411'>
	<title>Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation  Coefficients</title>
	<abstract>Several algorithms for computation of basic statistics are compared by their performance on  systematically generated test data.  The statistics calculated were the mean, standard deviation and  correlation coefficient.  For each statistic, the algorithm included the usual computing formulas, correction  due to an accumulated error term, and a recursive computation of the current value of the statistic.   The usual computing formulas were also evaluated in double precision.  Large errors were noted for some  calculation using the usual computing formulas.  The most reliable technique was correction of the initial  estimate by use of an accumulated error term.  To eliminate the need for making two passes on the data,  it was suggested that the initial estimate of the mean be obtained from a subset of the data.</abstract>
	<conference>CACM July, 1966</conference>
	<authors>
	<author>Neely, P. M.</author>
	</authors>
	<location>CA660703 JB March 6, 1978  2:54 PM</location>
	<citations>
	<citation>1411	5	1411</citation>
	<citation>1411	5	1411</citation>
	<citation>1411	5	1411</citation>
	<citation>1619	5	1411</citation>
	<citation>3166	5	1411</citation>
	<citation>1411	6	1411</citation>
	<citation>1411	6	1411</citation>
	<citation>2731	6	1411</citation>
	<citation>2799	6	1411</citation>
	<citation>3159	6	1411</citation>
	<citation>3167	6	1411</citation>
	</citations>
	</document>
	<document id= '1410'>
	<title>Interarrival Statistics for Time Sharing Systems</title>
	<abstract>The optimization of time-shared system performance requires the description of the stochastic  processes governing the user inputs and the program activity.  This paper provides a statistical description  of the user input process in the SDC-ARPA general-purpose Time-Sharing System (TSS).  The input process  is assumed to be stationary, and to be defined by the interarrival time distribution.  The data obtained  appear to justify satisfactorily the common assumption that the interarrival times are serially independent.   The data do not appear to justify, except as a very rough approximation, the usual assumption off an  exponential distribution for interarrival time.  A much more satisfactory approximation to the data can  be obtained with a biphase or triphase hyperexponential distribution.</abstract>
	<conference>CACM July, 1966</conference>
	<authors>
	<author>Coffman, E. G.</author>
	<author>Wood, R. C.</author>
	</authors>
	<location>CA660704 JB March 2, 1978  9:45 PM</location>
	<citations>
	<citation>1410	5	1410</citation>
	<citation>1410	5	1410</citation>
	<citation>1410	5	1410</citation>
	<citation>1604	5	1410</citation>
	<citation>1951	5	1410</citation>
	<citation>2373	5	1410</citation>
	<citation>1224	6	1410</citation>
	<citation>1410	6	1410</citation>
	<citation>1410	6	1410</citation>
	<citation>1410	6	1410</citation>
	<citation>1604	6	1410</citation>
	<citation>1751	6	1410</citation>
	<citation>1810	6	1410</citation>
	<citation>1951	6	1410</citation>
	<citation>2374	6	1410</citation>
	</citations>
	</document>
	<document id= '1409'>
	<title>NEBULA: A Digital Computer Using a 20 Mc Glass Delay Line Memory</title>
	<abstract>Oregon State University has designed and constructed a medium-speed serial digital computer  using glass delay lines circulating at 22 Mc as memory.  The design objectives as originally conceived  in a special seminar were: (1) to be a research project in computer design; (2) to be usable as an educational  machine;and (3) to have easily modifiable hardware for basic research in computer systems design.  An  unusual arrangement of information within the 22 Mc memory allows a simple interface with the 340 Kc  arithmetic unit, which results in an effective zero latency time and provides possibilities for an associative  memory.  The arithmetic unit has a command structure similar to large parallel machines, and uses flip-flop  arithmetic and control registers throughout.  All hardware development has been aimed toward the concept  of easy modification, elaborate console controls for effective man-machine interaction and low cost.</abstract>
	<conference>CACM July, 1966</conference>
	<authors>
	<author>Boles, J. A.</author>
	<author>Rux, P. T.</author>
	</authors>
	<location>CA660705 JB March 2, 1978  9:35 PM</location>
	<citations>
	<citation>1409	4	1409</citation>
	<citation>1208	5	1409</citation>
	<citation>1409	5	1409</citation>
	<citation>1409	5	1409</citation>
	<citation>1409	5	1409</citation>
	</citations>
	</document>
	<document id= '1408'>
	<title>The Eschenbach Drum Scheme</title>
	<abstract>The prime function of a drum, operating in real time, is to perform accesses quickly.  The  usual means for increasing this capacity is to incorporate engineering or hardware improvements.  In  this paper the problem is attacked not by changing the drum, but rather by modifying the manner in which  it operates.  At the outset, a drum is given a functional definition.  Then a simple design scheme (Eschenbach)  is introduced which enormously increases the rate of accessing for drums so defined.  This is shown to  enable a system to perform a job by employing fewer or less expensive drums.  It is suggested that although  the design scheme has a specific use, the method underlying it has more general applicability.  The question  of the efficacy of the drum scheme is then raised.  To deal with this, a standard of efficiency is developed  in light of realistic real-time circumstances.  The drum scheme is then modelled in a manner which permits  it to be analyzed as a problem in queueing theory.  Thus one is enabled to ascertain whether the drum  scheme is efficient enough for its application.  Again, whereas the analysis of the drum scheme has a  specific use, the methods underlying it have more general applicability.</abstract>
	<conference>CACM July, 1966</conference>
	<authors>
	<author>Weingarten, A.</author>
	</authors>
	<location>CA660706 JB March 2, 1978  9:29 PM</location>
	<citations>
	<citation>1408	5	1408</citation>
	<citation>1408	5	1408</citation>
	<citation>1408	5	1408</citation>
	<citation>2319	5	1408</citation>
	<citation>1408	6	1408</citation>
	<citation>1719	6	1408</citation>
	<citation>1749	6	1408</citation>
	<citation>1751	6	1408</citation>
	<citation>2016	6	1408</citation>
	<citation>2017	6	1408</citation>
	<citation>2080	6	1408</citation>
	<citation>2188	6	1408</citation>
	<citation>2203	6	1408</citation>
	<citation>2204	6	1408</citation>
	</citations>
	</document>
	<document id= '1407'>
	<citations>
	<citation>1407	5	1407</citation>
	<citation>1407	5	1407</citation>
	<citation>1407	5	1407</citation>
	</citations>
	<title>Confidence Interval for a Ratio (Algorithm 289 [G1])</title>
	<conference>CACM July, 1966</conference>
	<authors>
	<author>Hill, I. D.</author>
	<author>Pike, M. C.</author>
	</authors>
	<location>CA660707c JB March 23, 1978  7:07 PM</location>
	</document>
	<document id= '1406'>
	<citations>
	<citation>1406	5	1406</citation>
	<citation>1406	5	1406</citation>
	<citation>1406	5	1406</citation>
	</citations>
	<title>Solution of simultaneous Linear Diophantine Equations (Algorithm 288 [F4])</title>
	<conference>CACM July, 1966</conference>
	<authors>
	<author>Blankinship, W. A.</author>
	</authors>
	<location>CA660707b JB March 23, 1978  7:06 PM</location>
	</document>
	<document id= '1405'>
	<citations>
	<citation>1405	5	1405</citation>
	<citation>1405	5	1405</citation>
	<citation>1405	5	1405</citation>
	</citations>
	<title>Matrix Triangulation with Integer Arithmetic (Algorithm 287 [F1])</title>
	<conference>CACM July, 1966</conference>
	<authors>
	<author>Blankinship, W. A.</author>
	</authors>
	<location>CA660707a JB March 2, 1978  9:20 PM</location>
	</document>
	<document id= '1404'>
	<title>Computational Aspects of Multiple Covariance Analysis on a Multifactor Structure</title>
	<abstract>The computational procedure for the analysis of multiple covariance in statistics is discussed  with reference to the analysis of variance.  A special operator calculus developed by Hartly for programming  analysis of variance for multifactor experiments is extended to cover the analysis of covariance.  This  extension is accomplished by utilizing the connection between the analysis of covariance and the analysis  of variance and by introducing a new operator.  The results are illustrated by a numerical example for  analysis of covariance, in which the basic computations are shown to be carried out by an analysis-of-variance  program.</abstract>
	<conference>CACM July, 1966</conference>
	<authors>
	<author>Peng, K. C.</author>
	</authors>
	<location>CA660708 JB March 2, 1978  9:18 PM</location>
	<citations>
	<citation>1404	4	1404</citation>
	<citation>1045	5	1404</citation>
	<citation>1404	5	1404</citation>
	<citation>1404	5	1404</citation>
	<citation>1404	5	1404</citation>
	</citations>
	</document>
	<document id= '1403'>
	<title>A Method for Finding the m Smallest Values of a Monotonic Function Defined on Ordered Sets of  Positive Integers</title>
	<abstract>The minimum value of a monotonic increasing function defined on a partially ordered set S is  assumed on the set of minimal points of S.  This observation is used to devise an efficient method for  finding the m smallest functional values of monotonic functions defined on ordered pairs of positive  integers.  The method is easily extended to include monotonic functions defined on ordered n-tuples.   Included is a FORTRAN program which was written to implement the procedure for a certain important case.</abstract>
	<conference>CACM July, 1966</conference>
	<authors>
	<author>Sigillito, V. G.</author>
	</authors>
	<location>CA660709 JB March 2, 1978  9:13 PM</location>
	<citations>
	<citation>1403	5	1403</citation>
	<citation>1403	5	1403</citation>
	<citation>1403	5	1403</citation>
	</citations>
	</document>
	<document id= '1402'>
	<title>Partial Step Integration</title>
	<abstract>A partial step integration equation is derived for use with the Adams or Adams-Bashforth method  of integration of differential equations.  This method of obtaining functional values at points intermediate  to the integration points yields accuracy comparable to the integration and does not require storing  of additional information as in interpolation methods.</abstract>
	<conference>CACM July, 1966</conference>
	<authors>
	<author>Glauz, R. D.</author>
	</authors>
	<location>CA660710 JB March 2, 1978  9:08 PM</location>
	<citations>
	<citation>1402	5	1402</citation>
	<citation>1402	5	1402</citation>
	<citation>1402	5	1402</citation>
	</citations>
	</document>
	<document id= '1401'>
	<title>Quasilinearization and the Calculation of Eigenvalues</title>
	<abstract>Several eigenvalue problems for systems of ordinary differential equations are considered.   They are resolved computationally using the quasilinerization technique, a quadratically convergent  successive approximation scheme related to the Newton-Raphson-Kantorovich method.</abstract>
	<conference>CACM July, 1966</conference>
	<authors>
	<author>Bellman, R.</author>
	<author>Kagiwada, H.</author>
	<author>Kalaba, R.</author>
	</authors>
	<location>CA660711 JB March 2, 1978  8:40 PM</location>
	<citations>
	<citation>1401	5	1401</citation>
	<citation>1401	5	1401</citation>
	<citation>1401	5	1401</citation>
	<citation>1766	5	1401</citation>
	<citation>1401	6	1401</citation>
	</citations>
	</document>
	<document id= '1400'>
	<title>Free-Text Inputs to Utility Routines</title>
	<abstract>Through the use of some rather simple techniques, it is frequently possible to produce a program  which will accept free-text inputs.  The techniques are discussed and related to a general tape manipulation  routine.</abstract>
	<conference>CACM July, 1966</conference>
	<authors>
	<author>Blum, R. I.</author>
	</authors>
	<location>CA660712 JB March 2, 1978  8:32 PM</location>
	<citations>
	<citation>1400	4	1400</citation>
	<citation>1553	4	1400</citation>
	<citation>1945	4	1400</citation>
	<citation>2127	4	1400</citation>
	<citation>2396	4	1400</citation>
	<citation>2730	4	1400</citation>
	<citation>1400	5	1400</citation>
	<citation>1400	5	1400</citation>
	<citation>1400	5	1400</citation>
	<citation>1487	5	1400</citation>
	</citations>
	</document>
	<document id= '1399'>
	<title>On Top-to-Bottom Recognition and Left Recursion</title>
	<abstract>A procedure is given for obtaining structural descriptions in a context-free grammar by performing  the recognition according to a strongly equivalent,  left-recursion-freegrammar. The effect of allowing  null strings in the rewriting rules is discussed.</abstract>
	<conference>CACM July, 1966</conference>
	<authors>
	<author>Suonio, R.</author>
	</authors>
	<location>CA660713 JB March 2, 1978  8:29 PM</location>
	<citations>
	<citation>1350	4	1399</citation>
	<citation>1399	4	1399</citation>
	<citation>1659	4	1399</citation>
	<citation>1768	4	1399</citation>
	<citation>1781	4	1399</citation>
	<citation>1945	4	1399</citation>
	<citation>2110	4	1399</citation>
	<citation>3094	4	1399</citation>
	<citation>1265	5	1399</citation>
	<citation>1350	5	1399</citation>
	<citation>1399	5	1399</citation>
	<citation>1399	5	1399</citation>
	<citation>1399	5	1399</citation>
	<citation>1012	6	1399</citation>
	<citation>1225	6	1399</citation>
	<citation>1265	6	1399</citation>
	<citation>1399	6	1399</citation>
	<citation>680	6	1399</citation>
	</citations>
	</document>
	<document id= '1398'>
	<title>Robot Data Screening: A Solution to Multivariate Type Problems in the Biological and Social Sciences</title>
	<abstract>A new approach is outlined toward the solution of the type of multivariate problem that is  found usually in the biological and social sciences as well as in medicine.  This approach uses a "logical"  rather than a "statistical" criterion by which variables are grouped into a deterministic model.  Algorithm  are developed by which some variables are kept on for further analysis while others are eliminated.   Criteria for the acceptance of a variable as well as the termination of the searching process are derived  from information theory.</abstract>
	<conference>CACM July, 1966</conference>
	<authors>
	<author>Sterling, T.</author>
	<author>Gleser, M.</author>
	<author>Haberman, S.</author>
	<author>Pollack, S.</author>
	</authors>
	<location>CA660714JB March 2, 1978  8:26 PM</location>
	<citations>
	<citation>1398	5	1398</citation>
	<citation>1398	5	1398</citation>
	<citation>1398	5	1398</citation>
	</citations>
	</document>
	<document id= '1397'>
	<citations>
	<citation>1397	4	1397</citation>
	<citation>2704	4	1397</citation>
	<citation>1247	5	1397</citation>
	<citation>1396	5	1397</citation>
	<citation>1397	5	1397</citation>
	<citation>1397	5	1397</citation>
	<citation>1397	5	1397</citation>
	<citation>964	6	1397</citation>
	<citation>1028	6	1397</citation>
	<citation>1029	6	1397</citation>
	<citation>1083	6	1397</citation>
	<citation>1132	6	1397</citation>
	<citation>1214	6	1397</citation>
	<citation>1278	6	1397</citation>
	<citation>1334	6	1397</citation>
	<citation>1365	6	1397</citation>
	<citation>1386	6	1397</citation>
	<citation>1387	6	1397</citation>
	<citation>1388	6	1397</citation>
	<citation>1392	6	1397</citation>
	<citation>1393	6	1397</citation>
	<citation>1394	6	1397</citation>
	<citation>1395	6	1397</citation>
	<citation>1396	6	1397</citation>
	<citation>1397	6	1397</citation>
	<citation>1496	6	1397</citation>
	<citation>284	6	1397</citation>
	<citation>407	6	1397</citation>
	<citation>3199	6	1397</citation>
	<citation>3200	6	1397</citation>
	<citation>3201	6	1397</citation>
	<citation>3202	6	1397</citation>
	<citation>3203	6	1397</citation>
	<citation>3204	6	1397</citation>
	<citation>561	6	1397</citation>
	<citation>730	6	1397</citation>
	</citations>
	<title>Proceedings of the ACM Symposium on Symbolic and Algebraic Manipulation</title>
	<abstract>The ACM Symposium on Symbolic and Algebraic Manipulation brought together over four hundred  people interested in programming languages designed for manipulation of algebraic formulas and symbol  strings, in their applications, and in algorithms for their implementation.  Twenty-eight papers were  presented, followed by a lively panel discussion of future directions.  Evening meetings were arranged  for several interest groups.  The conference was sponsored by the ACM Special Interest Committee on Symbolic  and Algebraic Manipulation.  The program committee consisted of Chairman Jean E. Sammet, Paul Abrahams,  Thomas E. Cheatham, Max Goldstein, and Douglas Mcllroy.  Conference arrangements were made by Lewis C.  Clapp, Daniel Bobrow and James H. Griesmer.-Robert W. Floyd, Editor</abstract>
	<conference>CACM August, 1966</conference>
	<location>CA660801 JB March 2, 1978  8:17 PM</location>
	</document>
	<document id= '1396'>
	<title>Survey of Formula Manipulation</title>
	<abstract>The field of formula manipulation is surveyed, with particular attention to the specific capabilities  of differentiation, integration and the supporting capabilities of simplification, displays and input/output  editing, and precision arithmetic.  General systems-both batch and online-are described.  Finally, some  programs to solve specific applications are discussed.</abstract>
	<conference>CACM August, 1966</conference>
	<authors>
	<author>Sammet, J. E.</author>
	</authors>
	<location>CA660802 JB March 2, 1978  8:07 PM</location>
	<citations>
	<citation>1028	4	1396</citation>
	<citation>1028	4	1396</citation>
	<citation>1083	4	1396</citation>
	<citation>1083	4	1396</citation>
	<citation>1214	4	1396</citation>
	<citation>1216	4	1396</citation>
	<citation>1216	4	1396</citation>
	<citation>1216	4	1396</citation>
	<citation>1278	4	1396</citation>
	<citation>1278	4	1396</citation>
	<citation>1334	4	1396</citation>
	<citation>1347	4	1396</citation>
	<citation>1347	4	1396</citation>
	<citation>1347	4	1396</citation>
	<citation>1392	4	1396</citation>
	<citation>1396	4	1396</citation>
	<citation>1396	4	1396</citation>
	<citation>1396	4	1396</citation>
	<citation>1396	4	1396</citation>
	<citation>1396	4	1396</citation>
	<citation>1396	4	1396</citation>
	<citation>1396	4	1396</citation>
	<citation>1396	4	1396</citation>
	<citation>1396	4	1396</citation>
	<citation>1396	4	1396</citation>
	<citation>1396	4	1396</citation>
	<citation>1396	4	1396</citation>
	<citation>1396	4	1396</citation>
	<citation>1396	4	1396</citation>
	<citation>1396	4	1396</citation>
	<citation>1396	4	1396</citation>
	<citation>1396	4	1396</citation>
	<citation>1396	4	1396</citation>
	<citation>1396	4	1396</citation>
	<citation>1396	4	1396</citation>
	<citation>1396	4	1396</citation>
	<citation>1396	4	1396</citation>
	<citation>1396	4	1396</citation>
	<citation>1396	4	1396</citation>
	<citation>1396	4	1396</citation>
	<citation>1396	4	1396</citation>
	<citation>1396	4	1396</citation>
	<citation>1396	4	1396</citation>
	<citation>1396	4	1396</citation>
	<citation>1395	4	1396</citation>
	<citation>1444	4	1396</citation>
	<citation>1536	4	1396</citation>
	<citation>1624	4	1396</citation>
	<citation>1767	4	1396</citation>
	<citation>1781	4	1396</citation>
	<citation>1787	4	1396</citation>
	<citation>1860	4	1396</citation>
	<citation>1945	4	1396</citation>
	<citation>1945	4	1396</citation>
	<citation>1946	4	1396</citation>
	<citation>1946	4	1396</citation>
	<citation>1988	4	1396</citation>
	<citation>2167	4	1396</citation>
	<citation>2167	4	1396</citation>
	<citation>2229	4	1396</citation>
	<citation>2252	4	1396</citation>
	<citation>2857	4	1396</citation>
	<citation>679	4	1396</citation>
	<citation>964	4	1396</citation>
	<citation>964	4	1396</citation>
	<citation>964	5	1396</citation>
	<citation>1028	5	1396</citation>
	<citation>1029	5	1396</citation>
	<citation>1083	5	1396</citation>
	<citation>1132	5	1396</citation>
	<citation>1214	5	1396</citation>
	<citation>1278	5	1396</citation>
	<citation>1334	5	1396</citation>
	<citation>1388	5	1396</citation>
	<citation>1393	5	1396</citation>
	<citation>1396	5	1396</citation>
	<citation>1396	5	1396</citation>
	<citation>1396	5	1396</citation>
	<citation>1396	5	1396</citation>
	<citation>1392	5	1396</citation>
	<citation>1395	5	1396</citation>
	<citation>1397	5	1396</citation>
	<citation>1365	5	1396</citation>
	<citation>284	5	1396</citation>
	<citation>1386	5	1396</citation>
	<citation>1387	5	1396</citation>
	<citation>1394	5	1396</citation>
	<citation>1496	5	1396</citation>
	<citation>1945	5	1396</citation>
	<citation>407	5	1396</citation>
	<citation>561	5	1396</citation>
	<citation>3199	5	1396</citation>
	<citation>3200	5	1396</citation>
	<citation>3201	5	1396</citation>
	<citation>3202	5	1396</citation>
	<citation>3203	5	1396</citation>
	<citation>3204	5	1396</citation>
	<citation>730	5	1396</citation>
	<citation>823	6	1396</citation>
	<citation>914	6	1396</citation>
	<citation>915	6	1396</citation>
	<citation>917	6	1396</citation>
	<citation>964	6	1396</citation>
	<citation>984	6	1396</citation>
	<citation>989	6	1396</citation>
	<citation>990	6	1396</citation>
	<citation>1012	6	1396</citation>
	<citation>1028	6	1396</citation>
	<citation>1029	6	1396</citation>
	<citation>1083	6	1396</citation>
	<citation>1084	6	1396</citation>
	<citation>1098	6	1396</citation>
	<citation>1122	6	1396</citation>
	<citation>1132	6	1396</citation>
	<citation>1138	6	1396</citation>
	<citation>1139	6	1396</citation>
	<citation>1141	6	1396</citation>
	<citation>1200	6	1396</citation>
	<citation>1214	6	1396</citation>
	<citation>1223	6	1396</citation>
	<citation>1265	6	1396</citation>
	<citation>1278	6	1396</citation>
	<citation>1334	6	1396</citation>
	<citation>1336	6	1396</citation>
	<citation>1365	6	1396</citation>
	<citation>1386	6	1396</citation>
	<citation>1387	6	1396</citation>
	<citation>1388	6	1396</citation>
	<citation>1392	6	1396</citation>
	<citation>1393	6	1396</citation>
	<citation>1394	6	1396</citation>
	<citation>1395	6	1396</citation>
	<citation>1396	6	1396</citation>
	<citation>1396	6	1396</citation>
	<citation>1397	6	1396</citation>
	<citation>1455	6	1396</citation>
	<citation>1477	6	1396</citation>
	<citation>1487	6	1396</citation>
	<citation>1491	6	1396</citation>
	<citation>1496	6	1396</citation>
	<citation>1496	6	1396</citation>
	<citation>284	6	1396</citation>
	<citation>407	6	1396</citation>
	<citation>483	6	1396</citation>
	<citation>3199	6	1396</citation>
	<citation>3200	6	1396</citation>
	<citation>3201	6	1396</citation>
	<citation>3202	6	1396</citation>
	<citation>3203	6	1396</citation>
	<citation>3204	6	1396</citation>
	<citation>561	6	1396</citation>
	<citation>584	6	1396</citation>
	<citation>669	6	1396</citation>
	<citation>680	6	1396</citation>
	<citation>730	6	1396</citation>
	<citation>763	6	1396</citation>
	</citations>
	</document>
	<document id= '1395'>
	<title>On the Implementation of AMBIT, A Language for Symbol Manipulation</title>
	<abstract>A brief description is given of the implementation technique for the replacement rule of the  AMBIT programming language.  The algorithm for the "AMBIT scan" and an example of its application are  given.  The algorithm is applicable to other members of the family of string transformation languages  of which AMBIT is a member, and it provides a rationale for the design of the AMBIT language.</abstract>
	<conference>CACM August, 1966</conference>
	<authors>
	<author>Christensen, C.</author>
	</authors>
	<location>CA660803 JB March 2, 1978  8:02 PM</location>
	<citations>
	<citation>1396	4	1395</citation>
	<citation>1395	4	1395</citation>
	<citation>1395	4	1395</citation>
	<citation>1706	4	1395</citation>
	<citation>1180	5	1395</citation>
	<citation>1396	5	1395</citation>
	<citation>1395	5	1395</citation>
	<citation>1395	5	1395</citation>
	<citation>1395	5	1395</citation>
	<citation>1395	5	1395</citation>
	<citation>964	6	1395</citation>
	<citation>1028	6	1395</citation>
	<citation>1029	6	1395</citation>
	<citation>1083	6	1395</citation>
	<citation>1132	6	1395</citation>
	<citation>1180	6	1395</citation>
	<citation>1214	6	1395</citation>
	<citation>1278	6	1395</citation>
	<citation>1334	6	1395</citation>
	<citation>1365	6	1395</citation>
	<citation>1386	6	1395</citation>
	<citation>1387	6	1395</citation>
	<citation>1388	6	1395</citation>
	<citation>1392	6	1395</citation>
	<citation>1393	6	1395</citation>
	<citation>1394	6	1395</citation>
	<citation>1395	6	1395</citation>
	<citation>1395	6	1395</citation>
	<citation>1396	6	1395</citation>
	<citation>1397	6	1395</citation>
	<citation>1496	6	1395</citation>
	<citation>284	6	1395</citation>
	<citation>407	6	1395</citation>
	<citation>3199	6	1395</citation>
	<citation>3200	6	1395</citation>
	<citation>3201	6	1395</citation>
	<citation>3202	6	1395</citation>
	<citation>3203	6	1395</citation>
	<citation>3204	6	1395</citation>
	<citation>561	6	1395</citation>
	<citation>730	6	1395</citation>
	</citations>
	</document>
	<document id= '1394'>
	<title>Computation of Algebraic Properties of Elementary Particle Reactions Using a Digital Computer</title>
	<abstract>A large number of calculations in high-energy elementary particle physics involve the manipulation  of complicated algebraic expressions containing both tensor and noncommutative matrix quantities.  Many  of these calculations take several months to complete, although the operations involved follow straightforward  rules.  In this paper a program is described, which has been developed in LISP for solving such problems.   The manner in which these problems are encountered is outlined, and their representation in the computer  discussed.  At present, about six months of human work takes less than fifteen minutes on an IBM 7090.   Limitations of the present system and future plans are also outlined.</abstract>
	<conference>CACM August, 1966</conference>
	<authors>
	<author>Hearn, A. C.</author>
	</authors>
	<location>CA660804 JB March 2, 1978  7:58 PM</location>
	<citations>
	<citation>1396	5	1394</citation>
	<citation>1394	5	1394</citation>
	<citation>1394	5	1394</citation>
	<citation>1394	5	1394</citation>
	<citation>964	6	1394</citation>
	<citation>1028	6	1394</citation>
	<citation>1029	6	1394</citation>
	<citation>1083	6	1394</citation>
	<citation>1132	6	1394</citation>
	<citation>1214	6	1394</citation>
	<citation>1278	6	1394</citation>
	<citation>1334	6	1394</citation>
	<citation>1365	6	1394</citation>
	<citation>1386	6	1394</citation>
	<citation>1387	6	1394</citation>
	<citation>1388	6	1394</citation>
	<citation>1392	6	1394</citation>
	<citation>1393	6	1394</citation>
	<citation>1394	6	1394</citation>
	<citation>1395	6	1394</citation>
	<citation>1396	6	1394</citation>
	<citation>1397	6	1394</citation>
	<citation>1496	6	1394</citation>
	<citation>284	6	1394</citation>
	<citation>407	6	1394</citation>
	<citation>3199	6	1394</citation>
	<citation>3200	6	1394</citation>
	<citation>3201	6	1394</citation>
	<citation>3202	6	1394</citation>
	<citation>3203	6	1394</citation>
	<citation>3204	6	1394</citation>
	<citation>561	6	1394</citation>
	<citation>730	6	1394</citation>
	</citations>
	</document>
	<document id= '1393'>
	<title>PM, A System for Polynomial Manipulation</title>
	<abstract>PM is an IBM 7094 program system for formal manipulation of polynomials in any number of variables,  with integral coefficients unrestricted in size.  Some of the formal operations which can be performed  by the system are sums, differences, products, quotients, derivatives, substitutions and greater common  divisors.  PM is based on the REFCO III list processing system, which is described and compared with  the LISP and SLIP systems.  The PM subroutines for arithmetic of large integers are described as constituting  an independently useful subsystem.  PM is compared with the ALPAK system in several respects, including  the choice of canonical forms for polynomials.  A new algorithm for polynomial greatest common divisor  calculation is mentioned, and exaples are included to illustrate its superiority.</abstract>
	<conference>CACM August, 1966</conference>
	<authors>
	<author>Collins, G. E.</author>
	</authors>
	<location>CA660805 JB March 2, 1978  7:51 PM</location>
	<citations>
	<citation>1024	4	1393</citation>
	<citation>1050	4	1393</citation>
	<citation>1051	4	1393</citation>
	<citation>1098	4	1393</citation>
	<citation>1214	4	1393</citation>
	<citation>1380	4	1393</citation>
	<citation>1388	4	1393</citation>
	<citation>1393	4	1393</citation>
	<citation>1393	4	1393</citation>
	<citation>1393	4	1393</citation>
	<citation>1485	4	1393</citation>
	<citation>1487	4	1393</citation>
	<citation>1549	4	1393</citation>
	<citation>1549	4	1393</citation>
	<citation>1570	4	1393</citation>
	<citation>1878	4	1393</citation>
	<citation>1946	4	1393</citation>
	<citation>1957	4	1393</citation>
	<citation>2023	4	1393</citation>
	<citation>2168	4	1393</citation>
	<citation>2723	4	1393</citation>
	<citation>2857	4	1393</citation>
	<citation>3112	4	1393</citation>
	<citation>3112	4	1393</citation>
	<citation>627	4	1393</citation>
	<citation>106	5	1393</citation>
	<citation>1393	5	1393</citation>
	<citation>1393	5	1393</citation>
	<citation>1393	5	1393</citation>
	<citation>1396	5	1393</citation>
	<citation>296	5	1393</citation>
	<citation>1946	5	1393</citation>
	<citation>2167	5	1393</citation>
	<citation>2857	5	1393</citation>
	<citation>731	5	1393</citation>
	<citation>878	6	1393</citation>
	<citation>902	6	1393</citation>
	<citation>964	6	1393</citation>
	<citation>1028	6	1393</citation>
	<citation>1029	6	1393</citation>
	<citation>1083	6	1393</citation>
	<citation>1093	6	1393</citation>
	<citation>1132	6	1393</citation>
	<citation>1177	6	1393</citation>
	<citation>1214	6	1393</citation>
	<citation>1278	6	1393</citation>
	<citation>1334	6	1393</citation>
	<citation>1365	6	1393</citation>
	<citation>1379	6	1393</citation>
	<citation>1386	6	1393</citation>
	<citation>1387	6	1393</citation>
	<citation>1387	6	1393</citation>
	<citation>1388	6	1393</citation>
	<citation>1392	6	1393</citation>
	<citation>1392	6	1393</citation>
	<citation>1393	6	1393</citation>
	<citation>1393	6	1393</citation>
	<citation>1393	6	1393</citation>
	<citation>1393	6	1393</citation>
	<citation>1394	6	1393</citation>
	<citation>1395	6	1393</citation>
	<citation>1396	6	1393</citation>
	<citation>1397	6	1393</citation>
	<citation>1496	6	1393</citation>
	<citation>284	6	1393</citation>
	<citation>360	6	1393</citation>
	<citation>2169	6	1393</citation>
	<citation>407	6	1393</citation>
	<citation>3199	6	1393</citation>
	<citation>3200	6	1393</citation>
	<citation>3201	6	1393</citation>
	<citation>3202	6	1393</citation>
	<citation>3203	6	1393</citation>
	<citation>3204	6	1393</citation>
	<citation>561	6	1393</citation>
	<citation>730	6	1393</citation>
	<citation>731	6	1393</citation>
	<citation>731	6	1393</citation>
	</citations>
	</document>
	<document id= '1392'>
	<title>Experience with FORMAC Algorithm Design</title>
	<abstract>Various facets of the design and implementation of mathematical expression manipulation algorithms  are discussed.  Concrete examples are provided by the FORMAC EXPAND and differentiation algorithms, a  basic FORMAC utility routine, and an experiment in the extraction of the skeletal structure of an expression.   One recurrent theme is the need to avoid excessive intermediate expression swell in order to minimize  core storage requirements. Although many details from the FORMAC implementation are presented, an attempt  is made to stress principles and ideas of general relevance in the design of algorithms for manipulating  mathematical expressions.</abstract>
	<conference>CACM August, 1966</conference>
	<authors>
	<author>Tobey, R. G.</author>
	</authors>
	<location>CA660806 JB March 2, 1978  7:43 PM</location>
	<citations>
	<citation>1028	4	1392</citation>
	<citation>1216	4	1392</citation>
	<citation>1392	4	1392</citation>
	<citation>1396	4	1392</citation>
	<citation>964	4	1392</citation>
	<citation>1396	5	1392</citation>
	<citation>1392	5	1392</citation>
	<citation>1392	5	1392</citation>
	<citation>1392	5	1392</citation>
	<citation>2167	5	1392</citation>
	<citation>561	5	1392</citation>
	<citation>964	6	1392</citation>
	<citation>1028	6	1392</citation>
	<citation>1029	6	1392</citation>
	<citation>1083	6	1392</citation>
	<citation>1132	6	1392</citation>
	<citation>1214	6	1392</citation>
	<citation>1278	6	1392</citation>
	<citation>1334	6	1392</citation>
	<citation>1365	6	1392</citation>
	<citation>1379	6	1392</citation>
	<citation>1386	6	1392</citation>
	<citation>1387	6	1392</citation>
	<citation>1388	6	1392</citation>
	<citation>1392	6	1392</citation>
	<citation>1392	6	1392</citation>
	<citation>1393	6	1392</citation>
	<citation>1393	6	1392</citation>
	<citation>1394	6	1392</citation>
	<citation>1395	6	1392</citation>
	<citation>1396	6	1392</citation>
	<citation>1397	6	1392</citation>
	<citation>1496	6	1392</citation>
	<citation>284	6	1392</citation>
	<citation>2169	6	1392</citation>
	<citation>407	6	1392</citation>
	<citation>3199	6	1392</citation>
	<citation>3200	6	1392</citation>
	<citation>3201	6	1392</citation>
	<citation>3202	6	1392</citation>
	<citation>3203	6	1392</citation>
	<citation>3204	6	1392</citation>
	<citation>561	6	1392</citation>
	<citation>730	6	1392</citation>
	</citations>
	</document>
	<document id= '1391'>
	<title>Computer Experiments in Finite Algebra</title>
	<abstract>A medium-scale programming system is written in MAD and FAP on the IBM 7094 to manipulate some  of the objects of modern algebra: finite groups, maps and sets of maps, subsets and sets of subsets,  constant integers and truth-values.  Designed to operate in a time-sharing environment, the system can  serve as a teacher's aid to the undergraduate student of modern algebra, as well as for the working scientist  or engineer wishing to familiarize himself with the subset.</abstract>
	<conference>CACM August, 1966</conference>
	<authors>
	<author>Maurer, W. D.</author>
	</authors>
	<location>CA660807 JB March 2, 1978  7:36 PM</location>
	<citations>
	<citation>1391	5	1391</citation>
	<citation>1391	5	1391</citation>
	<citation>1391	5	1391</citation>
	<citation>1948	5	1391</citation>
	<citation>1391	6	1391</citation>
	<citation>1559	6	1391</citation>
	</citations>
	</document>
	<document id= '1390'>
	<title>CONVERT</title>
	<abstract>A programming language is described which is applicable to problems conveniently described  by transformation rules.  By this is meant that patterns may be prescribed, each being associated with  a skeleton, so that a series of such pairs may be searched until a pattern is found which matches an  expression to be transformed.  The conditions for a match are governed by a code which also allows subexpressions  to be identified and eventually substituted into the corresponding skeleton.  The primitive patterns  and primitive skeletons are described, as well as the principle which allow their elaboration in to more  complicated patterns and skeletons.  The advantages of the language are that it allows one to apply transformation  rules to lists and arrays as easily as strings, that both patterns and skeletons may be defined recursively,  and that as a consequence programs may be stated quite concisely.</abstract>
	<conference>CACM August, 1966</conference>
	<authors>
	<author>Guzman, A.</author>
	<author>McIntosh, H. V.</author>
	</authors>
	<location>CA660808 JB March 2, 1978  7:32 PM</location>
	<citations>
	<citation>1024	4	1390</citation>
	<citation>1051	4	1390</citation>
	<citation>1102	4	1390</citation>
	<citation>1132	4	1390</citation>
	<citation>1390	4	1390</citation>
	<citation>1486	4	1390</citation>
	<citation>1549	4	1390</citation>
	<citation>1706	4	1390</citation>
	<citation>1826	4	1390</citation>
	<citation>1878	4	1390</citation>
	<citation>378	4	1390</citation>
	<citation>2060	4	1390</citation>
	<citation>2155	4	1390</citation>
	<citation>2168	4	1390</citation>
	<citation>2719	4	1390</citation>
	<citation>2723	4	1390</citation>
	<citation>2838	4	1390</citation>
	<citation>2842	4	1390</citation>
	<citation>2855	4	1390</citation>
	<citation>2879	4	1390</citation>
	<citation>3077	4	1390</citation>
	<citation>3080	4	1390</citation>
	<citation>3106	4	1390</citation>
	<citation>627	4	1390</citation>
	<citation>106	4	1390</citation>
	<citation>210	5	1390</citation>
	<citation>1390	5	1390</citation>
	<citation>1390	5	1390</citation>
	<citation>1390	5	1390</citation>
	</citations>
	</document>
	<document id= '1389'>
	<title>A Programmer's Description of L^6</title>
	<abstract>Bell Telephone Laboratories' Low-Linked List Language L^6 (pronounced "L-six") is a new programming  language for list structure manipulations.  It contains many of the facilities which underlie such list  processors as IPL, LISP, COMIT ad SNOBOL, but permits the user to get much closer to machine code in  order to write faster-running programs, to use storage more efficiently and to build a wider variety  of linked data structures.</abstract>
	<conference>CACM August, 1966</conference>
	<authors>
	<author>Knowlton, K. C.</author>
	</authors>
	<location>CA660809 JB March 2, 1978  7:20 PM</location>
	<citations>
	<citation>1389	4	1389</citation>
	<citation>1552	4	1389</citation>
	<citation>2162	4	1389</citation>
	<citation>2435	4	1389</citation>
	<citation>2596	4	1389</citation>
	<citation>2768	4	1389</citation>
	<citation>2845	4	1389</citation>
	<citation>2902	4	1389</citation>
	<citation>2955	4	1389</citation>
	<citation>1184	5	1389</citation>
	<citation>1389	5	1389</citation>
	<citation>1389	5	1389</citation>
	<citation>1389	5	1389</citation>
	<citation>1860	5	1389</citation>
	<citation>1957	5	1389</citation>
	<citation>2155	5	1389</citation>
	<citation>2162	5	1389</citation>
	<citation>1184	6	1389</citation>
	<citation>1366	6	1389</citation>
	<citation>1389	6	1389</citation>
	<citation>1389	6	1389</citation>
	<citation>1389	6	1389</citation>
	<citation>1389	6	1389</citation>
	<citation>1421	6	1389</citation>
	<citation>1496	6	1389</citation>
	<citation>1626	6	1389</citation>
	<citation>1641	6	1389</citation>
	<citation>1785	6	1389</citation>
	<citation>1786	6	1389</citation>
	<citation>210	6	1389</citation>
	<citation>1860	6	1389</citation>
	<citation>378	6	1389</citation>
	<citation>378	6	1389</citation>
	<citation>2046	6	1389</citation>
	<citation>2060	6	1389</citation>
	<citation>3184	6	1389</citation>
	<citation>731	6	1389</citation>
	</citations>
	</document>
	<document id= '1388'>
	<title>AUTOMAST: Automatic Mathematical Analysis and Symbolic Translation</title>
	<abstract>A procedure for numerically solving systems of ordinary differential equation is shown to also  generate symbolic solutions.  The procedure is based on a finite Taylor series expansion that includes  an estimate of the error in the final result.  A computer program is described that reads in a system  of such equations and then generates the expansions for all of the dependent variables. The expansions  are determined symbolically, hence any non-numeric parameters in the original equations are carried automatically  into the final expansions.  Thus the exact influence of any parameters on the problem solution can be  easily displayed.</abstract>
	<conference>CACM August, 1966</conference>
	<authors>
	<author>Ball, W. E.</author>
	<author>Berns, R. I.</author>
	</authors>
	<location>CA660810 JB March 2, 1978  7:16 PM</location>
	<citations>
	<citation>1024	4	1388</citation>
	<citation>1051	4	1388</citation>
	<citation>1098	4	1388</citation>
	<citation>1214	4	1388</citation>
	<citation>1223	4	1388</citation>
	<citation>1380	4	1388</citation>
	<citation>1388	4	1388</citation>
	<citation>1388	4	1388</citation>
	<citation>1393	4	1388</citation>
	<citation>1485	4	1388</citation>
	<citation>1487	4	1388</citation>
	<citation>1549	4	1388</citation>
	<citation>1570	4	1388</citation>
	<citation>1878	4	1388</citation>
	<citation>1946	4	1388</citation>
	<citation>1957	4	1388</citation>
	<citation>2168	4	1388</citation>
	<citation>436	4	1388</citation>
	<citation>2723	4	1388</citation>
	<citation>2857	4	1388</citation>
	<citation>3112	4	1388</citation>
	<citation>1388	5	1388</citation>
	<citation>1388	5	1388</citation>
	<citation>1388	5	1388</citation>
	<citation>1396	5	1388</citation>
	<citation>405	5	1388</citation>
	<citation>731	5	1388</citation>
	<citation>964	6	1388</citation>
	<citation>1028	6	1388</citation>
	<citation>1029	6	1388</citation>
	<citation>1083	6	1388</citation>
	<citation>1132	6	1388</citation>
	<citation>1214	6	1388</citation>
	<citation>1278	6	1388</citation>
	<citation>1334	6	1388</citation>
	<citation>1365	6	1388</citation>
	<citation>1386	6	1388</citation>
	<citation>1387	6	1388</citation>
	<citation>1388	6	1388</citation>
	<citation>1392	6	1388</citation>
	<citation>1393	6	1388</citation>
	<citation>1394	6	1388</citation>
	<citation>1395	6	1388</citation>
	<citation>1396	6	1388</citation>
	<citation>1397	6	1388</citation>
	<citation>1496	6	1388</citation>
	<citation>284	6	1388</citation>
	<citation>407	6	1388</citation>
	<citation>3199	6	1388</citation>
	<citation>3200	6	1388</citation>
	<citation>3201	6	1388</citation>
	<citation>3202	6	1388</citation>
	<citation>3203	6	1388</citation>
	<citation>3204	6	1388</citation>
	<citation>561	6	1388</citation>
	<citation>730	6	1388</citation>
	</citations>
	</document>
	<document id= '1387'>
	<title>Solution of Systems of Polynomial Equations By Elimination</title>
	<abstract>The elimination procedure as described by Williams has been coded in LISP and FORMAC and used  in solving systems of polynomial equations.  It is found that the method is very effective in the case  of small systems, where it yields all solutions without the need for initial estimates. The method, by  itself, appears in appropriate, however, in the solution of large systems of equation due to the explosive  growth in the intermediate equations and the hazards which arise when the coefficients are truncated.   A comparison is made with difficulties found in other problems in non-numerical mathematics such as  symbolic integration and simplification.</abstract>
	<conference>CACM August, 1966</conference>
	<authors>
	<author>Moses, J.</author>
	</authors>
	<location>CA660811 JB March 2, 1978  7:11 PM</location>
	<citations>
	<citation>1396	5	1387</citation>
	<citation>1387	5	1387</citation>
	<citation>1387	5	1387</citation>
	<citation>1387	5	1387</citation>
	<citation>1946	5	1387</citation>
	<citation>878	6	1387</citation>
	<citation>902	6	1387</citation>
	<citation>964	6	1387</citation>
	<citation>1028	6	1387</citation>
	<citation>1029	6	1387</citation>
	<citation>1083	6	1387</citation>
	<citation>1093	6	1387</citation>
	<citation>1132	6	1387</citation>
	<citation>1177	6	1387</citation>
	<citation>1214	6	1387</citation>
	<citation>1278	6	1387</citation>
	<citation>1334	6	1387</citation>
	<citation>1365	6	1387</citation>
	<citation>1386	6	1387</citation>
	<citation>1387	6	1387</citation>
	<citation>1387	6	1387</citation>
	<citation>1388	6	1387</citation>
	<citation>1392	6	1387</citation>
	<citation>1393	6	1387</citation>
	<citation>1393	6	1387</citation>
	<citation>1394	6	1387</citation>
	<citation>1395	6	1387</citation>
	<citation>1396	6	1387</citation>
	<citation>1397	6	1387</citation>
	<citation>1496	6	1387</citation>
	<citation>284	6	1387</citation>
	<citation>360	6	1387</citation>
	<citation>407	6	1387</citation>
	<citation>3199	6	1387</citation>
	<citation>3200	6	1387</citation>
	<citation>3201	6	1387</citation>
	<citation>3202	6	1387</citation>
	<citation>3203	6	1387</citation>
	<citation>3204	6	1387</citation>
	<citation>561	6	1387</citation>
	<citation>730	6	1387</citation>
	<citation>731	6	1387</citation>
	</citations>
	</document>
	<document id= '1386'>
	<title>Symbolic Factoring of Polynomials in Several Variables</title>
	<abstract>An algorithm for finding the symbolic factors of a multi-variate polynomial with integer coefficients  is presented.  The algorithm is an extension of a technique used by Kronecker in a proof that the prime  factoring of any polynomial may be found in a finite number of steps.  The algorithm consists of factoring  single-variable instances of the given polynomial by Kronecker's method and introducing the remaining  variables by interpolation.  Techniques for implementing the algorithm and several examples are discussed.   The algorithm promises sufficient power to be used efficiently in an online system for symbolic mathematics.</abstract>
	<conference>CACM August, 1966</conference>
	<authors>
	<author>Jordan, D. E.</author>
	<author>Kain, R. Y.</author>
	<author>Clapp, L. C.</author>
	</authors>
	<location>CA660812 JB March 2, 1978  7:06 PM</location>
	<citations>
	<citation>1396	5	1386</citation>
	<citation>1386	5	1386</citation>
	<citation>1386	5	1386</citation>
	<citation>1386	5	1386</citation>
	<citation>964	6	1386</citation>
	<citation>1028	6	1386</citation>
	<citation>1029	6	1386</citation>
	<citation>1083	6	1386</citation>
	<citation>1132	6	1386</citation>
	<citation>1214	6	1386</citation>
	<citation>1278	6	1386</citation>
	<citation>1334	6	1386</citation>
	<citation>1365	6	1386</citation>
	<citation>1386	6	1386</citation>
	<citation>1387	6	1386</citation>
	<citation>1388	6	1386</citation>
	<citation>1392	6	1386</citation>
	<citation>1393	6	1386</citation>
	<citation>1394	6	1386</citation>
	<citation>1395	6	1386</citation>
	<citation>1396	6	1386</citation>
	<citation>1397	6	1386</citation>
	<citation>1496	6	1386</citation>
	<citation>284	6	1386</citation>
	<citation>407	6	1386</citation>
	<citation>3199	6	1386</citation>
	<citation>3200	6	1386</citation>
	<citation>3201	6	1386</citation>
	<citation>3202	6	1386</citation>
	<citation>3203	6	1386</citation>
	<citation>3204	6	1386</citation>
	<citation>561	6	1386</citation>
	<citation>730	6	1386</citation>
	</citations>
	</document>
	<document id= '1385'>
	<title>Computer Technology in Communist China, 1956-1965</title>
	<abstract>Based on information from translations of Communist Chinese news items and periodical literature  for the 1965 period, computer technology in China is reviewed under the following headings: (1) initial  planning, organization and educational aspects of computer technology and automation; (2) machine development  progress: two major specific machines in 1958-59, with Soviet aid; a vacuum in 1960-64 due to the withdrawal  of Soviet aid; then presumably all-Chinese-made machines from 1965 to the present; (3) computer applications;  (4) the trend of automation: control of production processes rather than data processing; and (5) the  "Yun Ch'ou Hsueh" (Science of Operation and Programming) campaign of 1958-60, during which an attempt  was made to bring concepts such as linear programming to ordinary Chinese workers and peasants.  Communist  China is adjudged to have a marginal computer capability, with most of its machines probably being of  a binary nature; however, a turning point may have been reached in mid-1965.</abstract>
	<conference>CACM September, 1966</conference>
	<authors>
	<author>Audette, D. G.</author>
	</authors>
	<location>CA660901 JB March 2, 1978  6:59 PM</location>
	<citations>
	<citation>1385	5	1385</citation>
	<citation>1385	5	1385</citation>
	<citation>1385	5	1385</citation>
	</citations>
	</document>
	<document id= '1384'>
	<title>Mathematics for Undergraduate Computer Scientists</title>
	<abstract>The mathematical requirements for an undergraduate program in Computer Science are a subject  of debate.  The Association for Computing Machinery's Curriculum Committee, however, believes that these  requirements are essentially the same as the mathematical content of physical sciences undergraduate  programs.  The Committee believes that these requirements should assure the student of a broad mathematical  background and should enable him to take a wide variety of courses in other scientific disciplines.   The Committee's concern is to develop a solid scientific  approach to Computer Science.</abstract>
	<conference>CACM September,1966</conference>
	<authors>
	<author>Atchison, W. F.</author>
	</authors>
	<location>CA660902 JB March 2, 1978  6:46 PM</location>
	<citations>
	<citation>1384	5	1384</citation>
	<citation>1384	5	1384</citation>
	<citation>1384	5	1384</citation>
	</citations>
	</document>
	<document id= '1383'>
	<title>Implications of the Digital Computer for Education In the Mathematical Sciences</title>
	<abstract>The digital computer has profoundly altered the definition of what is interesting in mathematics.   The importance of applied logic in human affairs is changed by the existence of the "logical engine."   The result is that one should no longer think in terms of a single discipline of mathematics but in  terms of a complex of mathematical sciences.</abstract>
	<conference>CACM September, 1966</conference>
	<authors>
	<author>Givens, W.</author>
	</authors>
	<location>CA660903 JB March 2, 1978  6:39 PM</location>
	<citations>
	<citation>1383	5	1383</citation>
	<citation>1383	5	1383</citation>
	<citation>1383	5	1383</citation>
	<citation>2665	5	1383</citation>
	<citation>1383	6	1383</citation>
	<citation>1549	6	1383</citation>
	</citations>
	</document>
	<document id= '1382'>
	<title>Desired Computer Impact on Undergraduate Mathematics</title>
	<abstract>Three matters relating to the theme of the Symposium are discussed here.  The author examines  some projections concerning the supply and demand for mathematicians in the United States through the  mid-1970s, comments briefly on some of the factors which may influence the professional activities of  applied mathematicians over the next several years, and discusses in broad terms how this information  may relate to the undergraduate training of mathematicians.</abstract>
	<conference>CACM September, 1966</conference>
	<authors>
	<author>Macon, N.</author>
	</authors>
	<location>CA660904 JB March 2, 1978  6:35 PM</location>
	<citations>
	<citation>1382	5	1382</citation>
	<citation>1382	5	1382</citation>
	<citation>1382	5	1382</citation>
	</citations>
	</document>
	<document id= '1381'>
	<title>Impact of Computers on the Undergraduate Mathematics Curriculum</title>
	<abstract>The use of computers to permit the widespread application of mathematical ideas requiring computation  in science and technology is extremely significant for the understanding of our current society.  Student  interest in this development is intense and if properly utilized should yield a much better understanding  of mathematical concepts as well as the ideas of programming and logical structure which have been introduced  into many fields by the use of computers.  The present paper suggests that that portion of the undergraduate  mathematical curriculum which is preparation for the use of mathematics by persons who are not professional  mathematicians be modified to include the extensions and clarifications which are possible because of  computers.  An early introduction to programming is desirable to permit a continuing use of automatic  computation to illustrate and clarify mathematical concepts.  Following the calculus equation stage an  intensive introduction to numerical analysis should be added to the current curriculum.  In addition  to providing competence in the mostly used computing techniques, it would permit a more sophisticated  utilization of the advanced mathematical ideas associated with complex variables and transform theories.</abstract>
	<conference>CACM September, 1966</conference>
	<authors>
	<author>Murray, F. J.</author>
	</authors>
	<location>CA660905 JB March 2, 1978  6:31 PM</location>
	<citations>
	<citation>1381	5	1381</citation>
	<citation>1381	5	1381</citation>
	<citation>1381	5	1381</citation>
	</citations>
	</document>
	<document id= '1380'>
	<title>SIMULA-an ALGOL-Based Simulation Language</title>
	<abstract>This paper is an introduction to SIMULA, a programming language designed to provide a systems  analyst with unified concepts which facilitate the concise description of discrete event systems.  A  system description also serves as a source language simulation program.  SIMULA is an extension of ALGOL  60 in which the most important new concepts is that of quasi-parallel processing.</abstract>
	<conference>CACM September, 1966</conference>
	<authors>
	<author>Dahl, O. J.</author>
	<author>Nygaard, K.</author>
	</authors>
	<location>CA660907 JB March 2, 1978  6:21 PM</location>
	<citations>
	<citation>1024	4	1380</citation>
	<citation>1051	4	1380</citation>
	<citation>1086	4	1380</citation>
	<citation>1098	4	1380</citation>
	<citation>1132	4	1380</citation>
	<citation>1214	4	1380</citation>
	<citation>1234	4	1380</citation>
	<citation>1263	4	1380</citation>
	<citation>1265	4	1380</citation>
	<citation>1270	4	1380</citation>
	<citation>1323	4	1380</citation>
	<citation>1323	4	1380</citation>
	<citation>1358	4	1380</citation>
	<citation>1358	4	1380</citation>
	<citation>1379	4	1380</citation>
	<citation>1380	4	1380</citation>
	<citation>1380	4	1380</citation>
	<citation>1380	4	1380</citation>
	<citation>1380	4	1380</citation>
	<citation>1388	4	1380</citation>
	<citation>1393	4	1380</citation>
	<citation>1453	4	1380</citation>
	<citation>1464	4	1380</citation>
	<citation>1484	4	1380</citation>
	<citation>1485	4	1380</citation>
	<citation>1487	4	1380</citation>
	<citation>1491	4	1380</citation>
	<citation>1498	4	1380</citation>
	<citation>1549	4	1380</citation>
	<citation>1552	4	1380</citation>
	<citation>1570	4	1380</citation>
	<citation>1613	4	1380</citation>
	<citation>1614	4	1380</citation>
	<citation>1665	4	1380</citation>
	<citation>1693	4	1380</citation>
	<citation>1781	4	1380</citation>
	<citation>1781	4	1380</citation>
	<citation>1781	4	1380</citation>
	<citation>1787	4	1380</citation>
	<citation>1825	4	1380</citation>
	<citation>1854	4	1380</citation>
	<citation>1860	4	1380</citation>
	<citation>1860	4	1380</citation>
	<citation>1878	4	1380</citation>
	<citation>1946	4	1380</citation>
	<citation>1957	4	1380</citation>
	<citation>1989	4	1380</citation>
	<citation>2060	4	1380</citation>
	<citation>2083	4	1380</citation>
	<citation>2112	4	1380</citation>
	<citation>2168	4	1380</citation>
	<citation>2178	4	1380</citation>
	<citation>2179	4	1380</citation>
	<citation>2252	4	1380</citation>
	<citation>2325	4	1380</citation>
	<citation>2341	4	1380</citation>
	<citation>2534	4	1380</citation>
	<citation>2541	4	1380</citation>
	<citation>2546	4	1380</citation>
	<citation>2645	4	1380</citation>
	<citation>2652	4	1380</citation>
	<citation>2684	4	1380</citation>
	<citation>2698	4	1380</citation>
	<citation>2723	4	1380</citation>
	<citation>2733	4	1380</citation>
	<citation>2820	4	1380</citation>
	<citation>2842	4	1380</citation>
	<citation>2857	4	1380</citation>
	<citation>2929	4	1380</citation>
	<citation>2934	4	1380</citation>
	<citation>557	4	1380</citation>
	<citation>3069	4	1380</citation>
	<citation>3073	4	1380</citation>
	<citation>3112	4	1380</citation>
	<citation>3155	4	1380</citation>
	<citation>669	4	1380</citation>
	<citation>679	4	1380</citation>
	<citation>691	4	1380</citation>
	<citation>761	4	1380</citation>
	<citation>949	4	1380</citation>
	<citation>989	4	1380</citation>
	<citation>1380	5	1380</citation>
	<citation>1380	5	1380</citation>
	<citation>1380	5	1380</citation>
	<citation>1421	5	1380</citation>
	<citation>1541	5	1380</citation>
	<citation>1846	5	1380</citation>
	<citation>2060	5	1380</citation>
	<citation>2218	5	1380</citation>
	<citation>3112	5	1380</citation>
	<citation>3184	5	1380</citation>
	<citation>731	5	1380</citation>
	<citation>799	5	1380</citation>
	<citation>106	6	1380</citation>
	<citation>1358	6	1380</citation>
	<citation>1380	6	1380</citation>
	<citation>1380	6	1380</citation>
	<citation>1380	6	1380</citation>
	<citation>1380	6	1380</citation>
	<citation>1380	6	1380</citation>
	<citation>1421	6	1380</citation>
	<citation>1424	6	1380</citation>
	<citation>1469	6	1380</citation>
	<citation>1477	6	1380</citation>
	<citation>1484	6	1380</citation>
	<citation>1491	6	1380</citation>
	<citation>1572	6	1380</citation>
	<citation>1572	6	1380</citation>
	<citation>1728	6	1380</citation>
	<citation>1751	6	1380</citation>
	<citation>1752	6	1380</citation>
	<citation>1810	6	1380</citation>
	<citation>1826	6	1380</citation>
	<citation>210	6	1380</citation>
	<citation>1869	6	1380</citation>
	<citation>1879	6	1380</citation>
	<citation>1972	6	1380</citation>
	<citation>2095	6	1380</citation>
	<citation>2110	6	1380</citation>
	<citation>2438	6	1380</citation>
	<citation>2723	6	1380</citation>
	<citation>2736	6	1380</citation>
	<citation>2833	6	1380</citation>
	<citation>2838	6	1380</citation>
	<citation>576	6	1380</citation>
	<citation>731	6	1380</citation>
	</citations>
	</document>
	<document id= '1379'>
	<title>A Final Solution to the Dangling Else of ALGOL 60 and Related Languages</title>
	<abstract>The dangling else problem consists of a class of potential ambiguities in ALGOL-like conditional  statements whose basic form is "if B1 then if B2 then S1 else S2" where B1 and B2 are Boolean expressions  and S1 and S2 are basic statements.  The difficulty lies in whether to attach the else to the first if  or to the second one.  Existing solutions to the problem are either ambiguous or unnecessarily restrictive.   Let Sand S1 be statements.  We define S to be closed if "S else S1" is not a statement, and to be open  if "S else S1" is a statement.  Thus an unconditional statement is  a closed statement.  Open and closed  conditional statements are defined by syntax equations in such a way as to preserve openness and closure.   In each case, an else must always be preceded by a closed statement.  It is shown that the syntax equations  are unambiguous, and that may change in the statement types required within the syntax equations would  lead to either ambiguity or unnecessary restriction.</abstract>
	<conference>CACM September, 1966</conference>
	<authors>
	<author>Abrahams, P. W.</author>
	</authors>
	<location>CA660908 JB March 2, 1978  6:18 PM</location>
	<citations>
	<citation>1084	4	1379</citation>
	<citation>1086	4	1379</citation>
	<citation>1132	4	1379</citation>
	<citation>1234	4	1379</citation>
	<citation>1263	4	1379</citation>
	<citation>1265	4	1379</citation>
	<citation>1270	4	1379</citation>
	<citation>1323	4	1379</citation>
	<citation>1358	4	1379</citation>
	<citation>1379	4	1379</citation>
	<citation>1379	4	1379</citation>
	<citation>1379	4	1379</citation>
	<citation>1379	4	1379</citation>
	<citation>1379	4	1379</citation>
	<citation>1380	4	1379</citation>
	<citation>1453	4	1379</citation>
	<citation>1464	4	1379</citation>
	<citation>1484	4	1379</citation>
	<citation>1491	4	1379</citation>
	<citation>1498	4	1379</citation>
	<citation>1613	4	1379</citation>
	<citation>1614	4	1379</citation>
	<citation>1625	4	1379</citation>
	<citation>1693	4	1379</citation>
	<citation>1781	4	1379</citation>
	<citation>1781	4	1379</citation>
	<citation>1825	4	1379</citation>
	<citation>1836	4	1379</citation>
	<citation>1860	4	1379</citation>
	<citation>1945	4	1379</citation>
	<citation>1945	4	1379</citation>
	<citation>2015	4	1379</citation>
	<citation>2060	4	1379</citation>
	<citation>2061	4	1379</citation>
	<citation>2083	4	1379</citation>
	<citation>2091	4	1379</citation>
	<citation>2178	4	1379</citation>
	<citation>2179	4	1379</citation>
	<citation>2179	4	1379</citation>
	<citation>2252	4	1379</citation>
	<citation>2325	4	1379</citation>
	<citation>2341	4	1379</citation>
	<citation>2546	4	1379</citation>
	<citation>2546	4	1379</citation>
	<citation>2645	4	1379</citation>
	<citation>2652	4	1379</citation>
	<citation>2684	4	1379</citation>
	<citation>2698	4	1379</citation>
	<citation>2708	4	1379</citation>
	<citation>2842	4	1379</citation>
	<citation>2929	4	1379</citation>
	<citation>2934	4	1379</citation>
	<citation>3045	4	1379</citation>
	<citation>3069	4	1379</citation>
	<citation>669	4	1379</citation>
	<citation>679	4	1379</citation>
	<citation>691	4	1379</citation>
	<citation>761	4	1379</citation>
	<citation>949	4	1379</citation>
	<citation>989	4	1379</citation>
	<citation>1263	5	1379</citation>
	<citation>1379	5	1379</citation>
	<citation>1379	5	1379</citation>
	<citation>1379	5	1379</citation>
	<citation>1477	5	1379</citation>
	<citation>2167	5	1379</citation>
	<citation>2956	5	1379</citation>
	<citation>3184	5	1379</citation>
	<citation>669	5	1379</citation>
	<citation>761	5	1379</citation>
	<citation>1379	6	1379</citation>
	<citation>1379	6	1379</citation>
	<citation>1392	6	1379</citation>
	<citation>1393	6	1379</citation>
	<citation>2169	6	1379</citation>
	<citation>2651	6	1379</citation>
	</citations>
	</document>
	<document id= '1378'>
	<citations>
	<citation>1378	5	1378</citation>
	<citation>1378	5	1378</citation>
	<citation>1378	5	1378</citation>
	</citations>
	<title>Pseudo-Random Numbers (Algorithm 266 [G5])</title>
	<conference>CACM September, 1966</conference>
	<authors>
	<author>Hill, I. D.</author>
	<author>Pike, M. C.</author>
	</authors>
	<location>CA660909i JB March 23, 1978  6:46 PM</location>
	</document>
	<document id= '1377'>
	<citations>
	<citation>1377	5	1377</citation>
	<citation>1377	5	1377</citation>
	<citation>1377	5	1377</citation>
	</citations>
	<title>Pseudo-Random Numbers (Algorithm 266 [G5])</title>
	<conference>CACM September, 1966</conference>
	<authors>
	<author>Hansson, L.</author>
	</authors>
	<location>CA660909h JB March 23, 1978  6:45 PM</location>
	</document>
	<document id= '1376'>
	<citations>
	<citation>1376	5	1376</citation>
	<citation>1376	5	1376</citation>
	<citation>1376	5	1376</citation>
	</citations>
	<title>Modified Graeffee Method (Algorithm 256 [C2])</title>
	<conference>CACM September, 1966</conference>
	<authors>
	<author>Stern, G.</author>
	</authors>
	<location>CA660909g JB March 23, 1978  4:32 PM</location>
	</document>
	<document id= '1375'>
	<citations>
	<citation>1375	5	1375</citation>
	<citation>1375	5	1375</citation>
	<citation>1375	5	1375</citation>
	</citations>
	<title>Function Minimization (Algorithm 251 [E4])</title>
	<conference>CACM September, 1966</conference>
	<authors>
	<author>Fletcher, R.</author>
	</authors>
	<location>CA660909f JB March 23, 1978  4:31 PM</location>
	</document>
	<document id= '1374'>
	<citations>
	<citation>1374	5	1374</citation>
	<citation>1374	5	1374</citation>
	<citation>1374	5	1374</citation>
	</citations>
	<title>Evaluation of Determinant; Determinant Evaluation (Algorithms 41[F3]; 269[F3])</title>
	<conference>CACM September, 1966</conference>
	<authors>
	<author>Bergson, A.</author>
	</authors>
	<location>CA660909e JB March 23, 1978  4:29 PM</location>
	</document>
	<document id= '1373'>
	<citations>
	<citation>1373	5	1373</citation>
	<citation>1373	5	1373</citation>
	<citation>1373	5	1373</citation>
	</citations>
	<title>Gamma Function; Gamma Function for Range 1 to 2; Reciprocal Gamma Function to Real Argument;  Gamma Function; Logarithm of Gamma Function (Algorithms 34[S14]; 54[S14]; 80[S14]; 221[S14]; 291[S14])</title>
	<conference>CACM September, 1966</conference>
	<authors>
	<author>Pike, M. C.</author>
	<author>Hill, I. D.</author>
	</authors>
	<location>CA660909d JB March 23, 1978  4:28 PM</location>
	</document>
	<document id= '1372'>
	<citations>
	<citation>1372	5	1372</citation>
	<citation>1372	5	1372</citation>
	<citation>1372	5	1372</citation>
	<citation>2190	5	1372</citation>
	<citation>1372	6	1372</citation>
	<citation>1849	6	1372</citation>
	</citations>
	<title>Direct Search (Algorithm 178 [E4])</title>
	<conference>CACM September, 1966</conference>
	<authors>
	<author>Bell, M.</author>
	<author>Pike, M. C.</author>
	</authors>
	<location>CA660909c JB March 23, 1978  4:25 PM</location>
	</document>
	<document id= '1371'>
	<citations>
	<citation>1371	5	1371</citation>
	<citation>1371	5	1371</citation>
	<citation>1371	5	1371</citation>
	</citations>
	<title>Logarithm of Gamma Function (Algorithm 291 [S14])</title>
	<conference>CACM September, 1966</conference>
	<authors>
	<author>Pike, M. C.</author>
	<author>Hill, I. D.</author>
	</authors>
	<location>CA660909bJB March 23, 1978  4:24 PM</location>
	</document>
	<document id= '1370'>
	<citations>
	<citation>1370	5	1370</citation>
	<citation>1370	5	1370</citation>
	<citation>1370	5	1370</citation>
	<citation>1813	5	1370</citation>
	<citation>1370	6	1370</citation>
	</citations>
	<title>Linear Equations, Exact Solutions (Algorithm 290 [F4])</title>
	<conference>CACM September, 1966</conference>
	<authors>
	<author>Boothroyd, J.</author>
	</authors>
	<location>CA660909a JB March 2, 1978  4:33 PM</location>
	</document>
	<document id= '1369'>
	<title>Half Rotations in N-Dimensional Euclidean Space</title>
	<abstract>An iterative procedure is described for determining half rotations in n-dimensional Euclidean  space. The method is a variant of the cyclic Jacobi procedure and utilizers elementary plane rotations  to obtain the half rotation matrix.  Numerical examples are given.</abstract>
	<conference>CACM September, 1966</conference>
	<authors>
	<author>McCamon, R. B.</author>
	</authors>
	<location>CA660910 JB March 2, 1978  4:32 PM</location>
	<citations>
	<citation>1369	5	1369</citation>
	<citation>1369	5	1369</citation>
	<citation>1369	5	1369</citation>
	<citation>1961	5	1369</citation>
	<citation>1369	6	1369</citation>
	<citation>1504	6	1369</citation>
	<citation>1847	6	1369</citation>
	</citations>
	</document>
	<document id= '1368'>
	<title>Systematic Generation of Hamiltonian Circuits</title>
	<abstract>For a combinatorial matrix which may specify both directed and nondirected arcs, the paper  describes a computer program which generates systematically and exhaustively all the Hamiltonian circuits.  Specific application is made to the "traveling salesman" problem.</abstract>
	<conference>CACM September, 1966</conference>
	<authors>
	<author>Roberts, S. M.</author>
	</authors>
	<location>CA660911 JB March 2, 1978  4:30 PM</location>
	<citations>
	<citation>1368	5	1368</citation>
	<citation>1368	5	1368</citation>
	<citation>1368	5	1368</citation>
	</citations>
	</document>
	<document id= '1367'>
	<citations>
	<citation>1367	4	1367</citation>
	<citation>2772	4	1367</citation>
	<citation>2787	4	1367</citation>
	<citation>1116	5	1367</citation>
	<citation>1367	5	1367</citation>
	<citation>1367	5	1367</citation>
	<citation>1367	5	1367</citation>
	</citations>
	<title>Character Structure and Character Parity Sense for Parallel-by-Bit Data Communication in ASCII*  (Proposed American Standard)</title>
	<conference>CACM September, 1966</conference>
	<location>CA660912 JB March 2, 1978  4:26 PM</location>
	</document>
	<document id= '1366'>
	<title>Computer Simulation-Discussion of the Technique and Comparison of Languages</title>
	<abstract>The purpose of this paper is to present a comparison of some computer simulation languages  and of some of the involved in comparing software packages for digital computers are discussed in Part  I.  The issue is obvious: users of digital computers must choose from available languages or write their  own.  Substantial costs can occur, particularly in training, implementation and computer time if an inappropriate  language is chosen.More and more computer simulation languages are being developed: comparisons and  evaluations of existing languages are useful for designers and implementers as well as users.  The second  part is devoted to computer simulation and simulation languages.  The computational characteristics of  simulation are discussed with  special attention being paid to a distinction between continuous and discrete  change models.  Part III presents a detailed comparison of six simulation languages and packages: SIMSCRIPT,  CLP, CSL, GASP, CPSS and SOL.  The characteristics of each are summarized in a series of tables.  The  implications of this analysis for designers of languages, for users, and for implementers are developed.   The conclusion of the paper is that the packages now available for computer simulation offer features  which none of the more general-purpose packages do and that analysis of strengths and weaknesses of each  suggests ways in which both current and future simulation languages and packages can be improved.</abstract>
	<conference>CACM October, 1966</conference>
	<authors>
	<author>Teichroew, D.</author>
	<author>Lubin, J. F.</author>
	</authors>
	<location>CA661001 JB March 2, 1978  4:23 PM</location>
	<citations>
	<citation>1366	5	1366</citation>
	<citation>1366	5	1366</citation>
	<citation>1366	5	1366</citation>
	<citation>1503	5	1366</citation>
	<citation>1781	5	1366</citation>
	<citation>1860	5	1366</citation>
	<citation>2091	5	1366</citation>
	<citation>123	6	1366</citation>
	<citation>196	6	1366</citation>
	<citation>919	6	1366</citation>
	<citation>990	6	1366</citation>
	<citation>1007	6	1366</citation>
	<citation>1046	6	1366</citation>
	<citation>1131	6	1366</citation>
	<citation>1139	6	1366</citation>
	<citation>1140	6	1366</citation>
	<citation>1149	6	1366</citation>
	<citation>1198	6	1366</citation>
	<citation>1215	6	1366</citation>
	<citation>1223	6	1366</citation>
	<citation>1265	6	1366</citation>
	<citation>1303	6	1366</citation>
	<citation>1323	6	1366</citation>
	<citation>1358	6	1366</citation>
	<citation>1366	6	1366</citation>
	<citation>1366	6	1366</citation>
	<citation>1366	6	1366</citation>
	<citation>1366	6	1366</citation>
	<citation>1389	6	1366</citation>
	<citation>1421	6	1366</citation>
	<citation>1421	6	1366</citation>
	<citation>1460	6	1366</citation>
	<citation>1462	6	1366</citation>
	<citation>1463	6	1366</citation>
	<citation>1467	6	1366</citation>
	<citation>1468	6	1366</citation>
	<citation>1477	6	1366</citation>
	<citation>1477	6	1366</citation>
	<citation>1491	6	1366</citation>
	<citation>1491	6	1366</citation>
	<citation>1496	6	1366</citation>
	<citation>1496	6	1366</citation>
	<citation>1531	6	1366</citation>
	<citation>1535	6	1366</citation>
	<citation>1565	6	1366</citation>
	<citation>1601	6	1366</citation>
	<citation>1602	6	1366</citation>
	<citation>1613	6	1366</citation>
	<citation>1614	6	1366</citation>
	<citation>1626	6	1366</citation>
	<citation>1626	6	1366</citation>
	<citation>1641	6	1366</citation>
	<citation>1641	6	1366</citation>
	<citation>1785	6	1366</citation>
	<citation>1786	6	1366</citation>
	<citation>1787	6	1366</citation>
	<citation>1788	6	1366</citation>
	<citation>205	6	1366</citation>
	<citation>224	6	1366</citation>
	<citation>249	6	1366</citation>
	<citation>288	6	1366</citation>
	<citation>316	6	1366</citation>
	<citation>378	6	1366</citation>
	<citation>381	6	1366</citation>
	<citation>398	6	1366</citation>
	<citation>11	6	1366</citation>
	<citation>404	6	1366</citation>
	<citation>410	6	1366</citation>
	<citation>463	6	1366</citation>
	<citation>464	6	1366</citation>
	<citation>483	6	1366</citation>
	<citation>3184	6	1366</citation>
	<citation>3184	6	1366</citation>
	<citation>3188	6	1366</citation>
	<citation>584	6	1366</citation>
	<citation>600	6	1366</citation>
	<citation>680	6	1366</citation>
	<citation>691	6	1366</citation>
	<citation>763	6	1366</citation>
	<citation>799	6	1366</citation>
	</citations>
	</document>
	<document id= '1365'>
	<title>Eliminating Monotonous Mathematics with FORMAC</title>
	<abstract>The FORMAC (FORmula MAnipulation Compiler) programming system provides a powerful tool for  performing mathematical analysis.  It is an extension of FORTRAN IV which permits the use of the computer  to perform the tedious algebraic computations that arise in many different fields.  Among the areas in  which it has been successfully used are: differentiation of complicated expressions, expansion of truncated  power series, solution of simultaneous equations with literal coefficients, nonlinear maximum likelihood  estimation, tensor analysis, and generation of the coefficients of equations in Keplerian motion.  These  types of analysis-which arose in the solution of specific practical problems in physics, engineering,  astronomy, statistics and astronautics-are discussed in the paper.  In addition to its usage for specific  problem solutions, FORMAC can also be used to automate the analysis phase in certain production programming.   Several such applications are presented.</abstract>
	<conference>CACM October, 1966</conference>
	<authors>
	<author>Tobey, R. G.</author>
	</authors>
	<location>CA661002 JB March 2, 1978  4:14 PM</location>
	<citations>
	<citation>1396	5	1365</citation>
	<citation>1365	5	1365</citation>
	<citation>1365	5	1365</citation>
	<citation>1365	5	1365</citation>
	<citation>2229	5	1365</citation>
	<citation>964	6	1365</citation>
	<citation>1028	6	1365</citation>
	<citation>1029	6	1365</citation>
	<citation>1083	6	1365</citation>
	<citation>1132	6	1365</citation>
	<citation>1214	6	1365</citation>
	<citation>1278	6	1365</citation>
	<citation>1334	6	1365</citation>
	<citation>1365	6	1365</citation>
	<citation>1365	6	1365</citation>
	<citation>1386	6	1365</citation>
	<citation>1387	6	1365</citation>
	<citation>1388	6	1365</citation>
	<citation>1392	6	1365</citation>
	<citation>1393	6	1365</citation>
	<citation>1394	6	1365</citation>
	<citation>1395	6	1365</citation>
	<citation>1396	6	1365</citation>
	<citation>1397	6	1365</citation>
	<citation>1496	6	1365</citation>
	<citation>284	6	1365</citation>
	<citation>407	6	1365</citation>
	<citation>3199	6	1365</citation>
	<citation>3200	6	1365</citation>
	<citation>3201	6	1365</citation>
	<citation>3202	6	1365</citation>
	<citation>3203	6	1365</citation>
	<citation>3204	6	1365</citation>
	<citation>561	6	1365</citation>
	<citation>730	6	1365</citation>
	</citations>
	</document>
	<document id= '1364'>
	<title>Mathematical Experimentation in Time-Lag Modulation</title>
	<abstract>Equations of the form du/dt = g(u(t),u(h(t))) arise in a number of scientific contexts.  The  authors point out some interesting properties of the solution u'(t) = -u(t-1-k*sin(wt))+sin(at).  These  properties were obtained by means of numerical solution.</abstract>
	<conference>CACM October, 1966</conference>
	<authors>
	<author>Bellman, R.</author>
	<author>Buell, J.</author>
	<author>Kalaba, R.</author>
	</authors>
	<location>CA661003 JB March 2, 1978  4:08 PM</location>
	<citations>
	<citation>1364	4	1364</citation>
	<citation>1280	5	1364</citation>
	<citation>1364	5	1364</citation>
	<citation>1364	5	1364</citation>
	<citation>1364	5	1364</citation>
	</citations>
	</document>
	<document id= '1363'>
	<title>A General Method of Systematic Interval Computation for Numerical Integration of Initial Value  Problems</title>
	<abstract>A procedure is given for continuously computing and monitoring the step size to be used by  a self-starting, p-th order numerical integration method to solve an initial value problem.  The procedure  uses an estimate of the truncation error to calculate the step size.</abstract>
	<conference>CACM October, 1966</conference>
	<authors>
	<author>Martin, W. C.</author>
	<author>Paulson, K. C.</author>
	<author>Sashkin, L.</author>
	</authors>
	<location>CA661004 JB March 2, 1978  4:05 PM</location>
	<citations>
	<citation>1363	5	1363</citation>
	<citation>1363	5	1363</citation>
	<citation>1363	5	1363</citation>
	</citations>
	</document>
	<document id= '1362'>
	<citations>
	<citation>1362	5	1362</citation>
	<citation>1362	5	1362</citation>
	<citation>1362	5	1362</citation>
	</citations>
	<title>Code Extension in ASCII* (An ASA Tutorial)</title>
	<abstract>The American Standard Code for Information Interchange (ASCII) contains a number of control  characters associated with the principle of code extension, that is, with the representation of information  which cannot be directly represented by means of the characters in the Code.  The manner of use of these  characters has not previously been completely described.  This paper presents a set of mutually consistent  philosophies regarding code extension applications, and suggests a corollary set of doctrines for the  application of the code extension characters.  Distinctions are drawn between code extension and such  other concepts as "graphic substitution" or "syntactic representation" which are often used to meet similar  requirements.  Also covered are certain topics which are not truly concerned with code extension but  which are often linked with it in discussion on code applications.  The material in this paper is equally  applicable in principle to the (proposed) ISO international 7-bit code for information interchange.</abstract>
	<conference>CACM October, 1966</conference>
	<location>CA661005 JB March 2, 1978  4:02 PM</location>
	</document>
	<document id= '1361'>
	<citations>
	<citation>1361	5	1361</citation>
	<citation>1361	5	1361</citation>
	<citation>1361	5	1361</citation>
	</citations>
	<title>Rectangular Holes in Twelve-Row Punched Cards* (Proposed American Standard)</title>
	<conference>CACM October, 1966</conference>
	<location>CA661006 JB March 2, 1978  3:55 PM</location>
	</document>
	<document id= '1360'>
	<citations>
	<citation>1360	5	1360</citation>
	<citation>1360	5	1360</citation>
	<citation>1360	5	1360</citation>
	</citations>
	<title>Description of Systems Used for Data Transmission* (An ASA Tutorial)</title>
	<conference>CACM October, 1966</conference>
	<location>CA661007 JB March 2, 1978  3:54 PM</location>
	</document>
	<document id= '1359'>
	<title>Data Filtering Applied to Information Storage and Retrieval Applications</title>
	<abstract>Manipulation of data strings is the most complex processing function in information storage  and retrieval applications.  Data string manipulation is discussed within the context of an interpretive  processing environment controlled by the use of procedural directives.  The sequence of procedural directives  is derived from a job assumed to be expressed in a user-oriented source language.  Each data string with  the structured data environment (data bank) is explicitly or implicitly related to a format declaration residing in a format library.  The processing mechanics associated with data string manipulation is developed  in accordance with a generalized data filtering concept.  This results in the implementation of a two-part  data filter module that satisfies internal processing functions by filtering data strings through format  declarations associated with its input and output ports.</abstract>
	<conference>CACM November, 1966</conference>
	<authors>
	<author>Larsen, R. P.</author>
	</authors>
	<location>CA661101 JB March 2, 1978  3:52 PM</location>
	<citations>
	<citation>1359	5	1359</citation>
	<citation>1359	5	1359</citation>
	<citation>1359	5	1359</citation>
	</citations>
	</document>
	<document id= '1358'>
	<title>Syntax Macros and Extended Translation</title>
	<abstract>A translation approach is described which allows one to extended the syntax and semantics of  a given high-level base language by the use of a new formalism called a syntax-macro.  Syntax-macros  define string transformations based on syntactic elements of the base language.  Two types of macros  are discussed, and examples are given of their use.  The conditional generation of macros based on options  and alternatives recognized by the scan are also described.</abstract>
	<conference>CACM November, 1966</conference>
	<authors>
	<author>Leavenworth, B. M.</author>
	</authors>
	<location>CA661102 JB March 2, 1978  3:46 PM</location>
	<citations>
	<citation>1037	4	1358</citation>
	<citation>1086	4	1358</citation>
	<citation>1132	4	1358</citation>
	<citation>1234	4	1358</citation>
	<citation>1234	4	1358</citation>
	<citation>1263	4	1358</citation>
	<citation>1265	4	1358</citation>
	<citation>1270	4	1358</citation>
	<citation>1323	4	1358</citation>
	<citation>1323	4	1358</citation>
	<citation>1358	4	1358</citation>
	<citation>1358	4	1358</citation>
	<citation>1358	4	1358</citation>
	<citation>1358	4	1358</citation>
	<citation>1358	4	1358</citation>
	<citation>1379	4	1358</citation>
	<citation>1380	4	1358</citation>
	<citation>1380	4	1358</citation>
	<citation>1453	4	1358</citation>
	<citation>1464	4	1358</citation>
	<citation>1484	4	1358</citation>
	<citation>1491	4	1358</citation>
	<citation>1491	4	1358</citation>
	<citation>1498	4	1358</citation>
	<citation>1565	4	1358</citation>
	<citation>1613	4	1358</citation>
	<citation>1614	4	1358</citation>
	<citation>1665	4	1358</citation>
	<citation>1781	4	1358</citation>
	<citation>1781	4	1358</citation>
	<citation>1781	4	1358</citation>
	<citation>1781	4	1358</citation>
	<citation>1787	4	1358</citation>
	<citation>1788	4	1358</citation>
	<citation>1825	4	1358</citation>
	<citation>1860	4	1358</citation>
	<citation>1989	4	1358</citation>
	<citation>2083	4	1358</citation>
	<citation>2112	4	1358</citation>
	<citation>2178	4	1358</citation>
	<citation>2179	4	1358</citation>
	<citation>2252	4	1358</citation>
	<citation>2325	4	1358</citation>
	<citation>2341	4	1358</citation>
	<citation>2534	4	1358</citation>
	<citation>2541	4	1358</citation>
	<citation>2546	4	1358</citation>
	<citation>2645	4	1358</citation>
	<citation>2652	4	1358</citation>
	<citation>2684	4	1358</citation>
	<citation>2698	4	1358</citation>
	<citation>2733	4	1358</citation>
	<citation>2820	4	1358</citation>
	<citation>2842	4	1358</citation>
	<citation>2929	4	1358</citation>
	<citation>2934	4	1358</citation>
	<citation>3069	4	1358</citation>
	<citation>3073	4	1358</citation>
	<citation>3155	4	1358</citation>
	<citation>669	4	1358</citation>
	<citation>679	4	1358</citation>
	<citation>691	4	1358</citation>
	<citation>761	4	1358</citation>
	<citation>949	4	1358</citation>
	<citation>989	4	1358</citation>
	<citation>205	5	1358</citation>
	<citation>1358	5	1358</citation>
	<citation>1358	5	1358</citation>
	<citation>1358	5	1358</citation>
	<citation>1460	5	1358</citation>
	<citation>1541	5	1358</citation>
	<citation>1565	5	1358</citation>
	<citation>1781	5	1358</citation>
	<citation>1824	5	1358</citation>
	<citation>2252	5	1358</citation>
	<citation>3184	5	1358</citation>
	<citation>729	5	1358</citation>
	<citation>799	5	1358</citation>
	<citation>123	6	1358</citation>
	<citation>196	6	1358</citation>
	<citation>919	6	1358</citation>
	<citation>990	6	1358</citation>
	<citation>1007	6	1358</citation>
	<citation>1046	6	1358</citation>
	<citation>1131	6	1358</citation>
	<citation>1139	6	1358</citation>
	<citation>1140	6	1358</citation>
	<citation>1149	6	1358</citation>
	<citation>1162	6	1358</citation>
	<citation>1198	6	1358</citation>
	<citation>1215	6	1358</citation>
	<citation>1223	6	1358</citation>
	<citation>1265	6	1358</citation>
	<citation>1303	6	1358</citation>
	<citation>1323	6	1358</citation>
	<citation>1358	6	1358</citation>
	<citation>1358	6	1358</citation>
	<citation>1358	6	1358</citation>
	<citation>1358	6	1358</citation>
	<citation>1358	6	1358</citation>
	<citation>1366	6	1358</citation>
	<citation>1380	6	1358</citation>
	<citation>1421	6	1358</citation>
	<citation>1455	6	1358</citation>
	<citation>1460	6	1358</citation>
	<citation>1462	6	1358</citation>
	<citation>1463	6	1358</citation>
	<citation>1467	6	1358</citation>
	<citation>1468	6	1358</citation>
	<citation>1477	6	1358</citation>
	<citation>1491	6	1358</citation>
	<citation>1496	6	1358</citation>
	<citation>1496	6	1358</citation>
	<citation>1531	6	1358</citation>
	<citation>1535	6	1358</citation>
	<citation>1565	6	1358</citation>
	<citation>1601	6	1358</citation>
	<citation>1602	6	1358</citation>
	<citation>1613	6	1358</citation>
	<citation>1614	6	1358</citation>
	<citation>1614	6	1358</citation>
	<citation>1626	6	1358</citation>
	<citation>1641	6	1358</citation>
	<citation>1781	6	1358</citation>
	<citation>1787	6	1358</citation>
	<citation>1788	6	1358</citation>
	<citation>205	6	1358</citation>
	<citation>205	6	1358</citation>
	<citation>224	6	1358</citation>
	<citation>249	6	1358</citation>
	<citation>288	6	1358</citation>
	<citation>316	6	1358</citation>
	<citation>381	6	1358</citation>
	<citation>398	6	1358</citation>
	<citation>11	6	1358</citation>
	<citation>2155	6	1358</citation>
	<citation>404	6	1358</citation>
	<citation>404	6	1358</citation>
	<citation>410	6	1358</citation>
	<citation>463	6	1358</citation>
	<citation>464	6	1358</citation>
	<citation>483	6	1358</citation>
	<citation>3184	6	1358</citation>
	<citation>3184	6	1358</citation>
	<citation>3188	6	1358</citation>
	<citation>584	6	1358</citation>
	<citation>600	6	1358</citation>
	<citation>680	6	1358</citation>
	<citation>691	6	1358</citation>
	<citation>763	6	1358</citation>
	<citation>799	6	1358</citation>
	</citations>
	</document>
	<document id= '1357'>
	<citations>
	<citation>1357	5	1357</citation>
	<citation>1357	5	1357</citation>
	<citation>1357	5	1357</citation>
	</citations>
	<title>Examination Scheduling (Algorithm 286 [H])</title>
	<conference>CACM November, 1966</conference>
	<authors>
	<author>Williams, R.</author>
	</authors>
	<location>CA661103c JB March 23, 1978  4:20 PM</location>
	</document>
	<document id= '1356'>
	<citations>
	<citation>1352	4	1356</citation>
	<citation>1356	4	1356</citation>
	<citation>1883	4	1356</citation>
	<citation>2040	4	1356</citation>
	<citation>1241	5	1356</citation>
	<citation>1356	5	1356</citation>
	<citation>1356	5	1356</citation>
	<citation>1356	5	1356</citation>
	<citation>2040	5	1356</citation>
	<citation>1241	6	1356</citation>
	<citation>1273	6	1356</citation>
	<citation>1352	6	1356</citation>
	<citation>1356	6	1356</citation>
	<citation>324	6	1356</citation>
	<citation>621	6	1356</citation>
	</citations>
	<title>Havie Integrator (Algorithm 257 [D1])</title>
	<conference>CACM November, 1966</conference>
	<authors>
	<author>Hillstrom, K.</author>
	</authors>
	<location>CA661103b JB March 23, 1978  4:19 PM</location>
	</document>
	<document id= '1355'>
	<citations>
	<citation>1355	4	1355</citation>
	<citation>2619	4	1355</citation>
	<citation>1355	5	1355</citation>
	<citation>1355	5	1355</citation>
	<citation>1355	5	1355</citation>
	<citation>1419	5	1355</citation>
	</citations>
	<title>Regular Coulomb Wave Functions (Algorithm 292 )</title>
	<conference>CACM November, 1966</conference>
	<authors>
	<author>Gautschi, W.</author>
	</authors>
	<location>CA661103a JB March 2, 1978  3:43 PM</location>
	</document>
	<document id= '1354'>
	<title>Conversion of Decision Tables to Computer Programs by Rule Mark Techniques</title>
	<abstract>The rule mask technique is one method of converting limited entry decision tables to computer  programs.  Recent discussion suggest that in many circumstances it is to be preferred to the technique  of constructing networks or trees.  A drawback of the technique as hitherto presented is its liability  to produce object programs of longer run time than necessary.  In this paper a modification of the technique  is discussed which takes into account both rule frequencies and the relative times for evaluating conditions.   This can materially improve object program run time.</abstract>
	<conference>CACM November, 1966</conference>
	<authors>
	<author>King, P. J. H.</author>
	</authors>
	<location>CA661104 JB March 2, 1978  3:41 PM</location>
	<citations>
	<citation>1354	4	1354</citation>
	<citation>1354	4	1354</citation>
	<citation>1354	4	1354</citation>
	<citation>1488	4	1354</citation>
	<citation>1488	4	1354</citation>
	<citation>1994	4	1354</citation>
	<citation>2053	4	1354</citation>
	<citation>2053	4	1354</citation>
	<citation>2053	4	1354</citation>
	<citation>2220	4	1354</citation>
	<citation>2220	4	1354</citation>
	<citation>2220	4	1354</citation>
	<citation>2273	4	1354</citation>
	<citation>2273	4	1354</citation>
	<citation>2273	4	1354</citation>
	<citation>2453	4	1354</citation>
	<citation>2598	4	1354</citation>
	<citation>2726	4	1354</citation>
	<citation>2726	4	1354</citation>
	<citation>2856	4	1354</citation>
	<citation>2856	4	1354</citation>
	<citation>1172	5	1354</citation>
	<citation>1237	5	1354</citation>
	<citation>1327	5	1354</citation>
	<citation>1354	5	1354</citation>
	<citation>1354	5	1354</citation>
	<citation>1354	5	1354</citation>
	<citation>1684	5	1354</citation>
	<citation>2053	5	1354</citation>
	<citation>2220	5	1354</citation>
	<citation>2273	5	1354</citation>
	<citation>2453	5	1354</citation>
	<citation>2726	5	1354</citation>
	<citation>2856	5	1354</citation>
	<citation>3113	5	1354</citation>
	<citation>1172	6	1354</citation>
	<citation>1172	6	1354</citation>
	<citation>1172	6	1354</citation>
	<citation>1172	6	1354</citation>
	<citation>1172	6	1354</citation>
	<citation>1172	6	1354</citation>
	<citation>1237	6	1354</citation>
	<citation>1237	6	1354</citation>
	<citation>1237	6	1354</citation>
	<citation>1327	6	1354</citation>
	<citation>1327	6	1354</citation>
	<citation>1327	6	1354</citation>
	<citation>1327	6	1354</citation>
	<citation>1327	6	1354</citation>
	<citation>1354	6	1354</citation>
	<citation>1354	6	1354</citation>
	<citation>1354	6	1354</citation>
	<citation>1354	6	1354</citation>
	<citation>1354	6	1354</citation>
	<citation>1354	6	1354</citation>
	<citation>1354	6	1354</citation>
	<citation>1354	6	1354</citation>
	<citation>1488	6	1354</citation>
	<citation>1489	6	1354</citation>
	<citation>1489	6	1354</citation>
	<citation>1548	6	1354</citation>
	<citation>1548	6	1354</citation>
	<citation>1564	6	1354</citation>
	<citation>1684	6	1354</citation>
	<citation>250	6	1354</citation>
	<citation>2053	6	1354</citation>
	<citation>2053	6	1354</citation>
	<citation>2053	6	1354</citation>
	<citation>2220	6	1354</citation>
	<citation>2220	6	1354</citation>
	<citation>2220	6	1354</citation>
	<citation>2220	6	1354</citation>
	<citation>2221	6	1354</citation>
	<citation>2263	6	1354</citation>
	<citation>2263	6	1354</citation>
	<citation>2453	6	1354</citation>
	<citation>2598	6	1354</citation>
	<citation>2598	6	1354</citation>
	<citation>2691	6	1354</citation>
	<citation>2856	6	1354</citation>
	<citation>753	6	1354</citation>
	</citations>
	</document>
	<document id= '1353'>
	<title>Techniques for Automatic Tolerance Control in Linear Programming</title>
	<abstract>In this technical note, the numerical steps for the simplex method of linear programming are  reviewed and the tolerances needed in the numerical procedure are defined.  Objective criteria are given  for accomplishing the numerical steps of the method and the calculation of necessary tolerances.</abstract>
	<conference>CACM November, 1966</conference>
	<authors>
	<author>Clasen, R. J.</author>
	</authors>
	<location>CA661105 JB March 2, 1978  3:37 PM</location>
	<citations>
	<citation>1353	5	1353</citation>
	<citation>1353	5	1353</citation>
	<citation>1353	5	1353</citation>
	<citation>2589	5	1353</citation>
	<citation>1353	6	1353</citation>
	</citations>
	</document>
	<document id= '1352'>
	<title>Automatic Integration of a Function with a Parameter</title>
	<abstract>Two efficient methods for automatic numerical integration are Romberg integration and adaptive  Simpson integration.  For integrands of the form f(x)g(x,a) where a is a parameter, it is shown that  Romberg's method is more efficient.  A FORTRAN program shows how to achieve this greater efficiency.</abstract>
	<conference>CACM November, 1966</conference>
	<authors>
	<author>Rabinowitz, P.</author>
	</authors>
	<location>CA661106 JB March 2, 1978  3:35 PM</location>
	<citations>
	<citation>1040	4	1352</citation>
	<citation>1352	4	1352</citation>
	<citation>1352	4	1352</citation>
	<citation>1352	4	1352</citation>
	<citation>1352	4	1352</citation>
	<citation>1352	4	1352</citation>
	<citation>1352	4	1352</citation>
	<citation>1352	4	1352</citation>
	<citation>1352	4	1352</citation>
	<citation>1352	4	1352</citation>
	<citation>1352	4	1352</citation>
	<citation>1352	4	1352</citation>
	<citation>1356	4	1352</citation>
	<citation>1883	4	1352</citation>
	<citation>1982	4	1352</citation>
	<citation>1982	4	1352</citation>
	<citation>2040	4	1352</citation>
	<citation>2040	4	1352</citation>
	<citation>2040	4	1352</citation>
	<citation>2040	4	1352</citation>
	<citation>2048	4	1352</citation>
	<citation>2048	4	1352</citation>
	<citation>2048	4	1352</citation>
	<citation>2074	4	1352</citation>
	<citation>2074	4	1352</citation>
	<citation>2074	4	1352</citation>
	<citation>2074	4	1352</citation>
	<citation>2093	4	1352</citation>
	<citation>2093	4	1352</citation>
	<citation>2093	4	1352</citation>
	<citation>2093	4	1352</citation>
	<citation>2415	4	1352</citation>
	<citation>2550	4	1352</citation>
	<citation>1040	5	1352</citation>
	<citation>1092	5	1352</citation>
	<citation>1241	5	1352</citation>
	<citation>1273	5	1352</citation>
	<citation>1352	5	1352</citation>
	<citation>1352	5	1352</citation>
	<citation>1352	5	1352</citation>
	<citation>324	5	1352</citation>
	<citation>2040	5	1352</citation>
	<citation>429	5	1352</citation>
	<citation>570	5	1352</citation>
	<citation>621	5	1352</citation>
	<citation>786	5	1352</citation>
	<citation>834	5	1352</citation>
	<citation>872	5	1352</citation>
	<citation>1241	6	1352</citation>
	<citation>1273	6	1352</citation>
	<citation>1352	6	1352</citation>
	<citation>1356	6	1352</citation>
	<citation>324	6	1352</citation>
	<citation>621	6	1352</citation>
	</citations>
	</document>
	<document id= '1351'>
	<title>Automatic Error Bounds on Real Zeros of Rational Functions</title>
	<abstract>A procedure for implementing an interval arithmetic version of the Newton-Raphson method is  proposed.  The procedure require only a starting interval over which the zeros of a given rational function  are to be located.  The method automatically provides bounds  for roundoff error.</abstract>
	<conference>CACM November, 1966</conference>
	<authors>
	<author>Dargel, R. H.</author>
	<author>Loscalzo, F. R.</author>
	<author>Witt, T. H.</author>
	</authors>
	<location>CA661107 JB March 2, 1978  3:31 PM</location>
	<citations>
	<citation>1351	5	1351</citation>
	<citation>1351	5	1351</citation>
	<citation>1351	5	1351</citation>
	</citations>
	</document>
	<document id= '1350'>
	<title>The Augmented Predictive Analyzer for Context-Free Languages-Its Relative Efficiency</title>
	<abstract>It has been proven by Greibach that for a given context-free grammar G, a standard-form grammar  Gs can be constructed, which generates the same languages as is generated by G and whose rules are all  of the form Z --> cY(1) ... Y(m), (m >= O) where Z and Y(i) are intermediate symbols and c a terminal  symbol.  Since the predictive analyzer at Harvard uses a standard-form grammar, it can accept the language  of any context-free Grammar G, given an equivalent standard-form grammar Gs.  The structural descriptions  SD(Gs,X) assigned to a given sentence X by the predictive analyzer, however, are usually different from  the structural descriptions SD(G,X) assigned to the same sentence by the original context-free grammar  G from which Gs is derived.  In Section 1, an algorithm, originally due to Abbott is described standard-form  grammar each of whose rules is in standard form, supplemented by additional information describing its  derivation from the original context-free grammar.  A technique for performing the SD(Gs,X) to SD(G,X)  transformation effectively is also described.  In section 2, the augmented predictive analyzer as a parsing  algorithm for arbitrary context-free languages is compared with two other parsing algorithms: a selective  top-to-bottom algorithm similar to Irons' "error correcting parse algorithm" and an immediate constituent  analyzer which is an extension of Sakai-Cocke's algorithm for normal grammars.  The comparison is based  upon several criteria of efficiency, covering core-storage requirements, complexities of the programs  and processing time.</abstract>
	<conference>CACM November, 1966</conference>
	<authors>
	</authors>
	<location>CA661108 JB March 2, 1978  3:11 PM</location>
	<citations>
	<citation>1225	4	1350</citation>
	<citation>1225	4	1350</citation>
	<citation>1350	4	1350</citation>
	<citation>1350	4	1350</citation>
	<citation>1350	4	1350</citation>
	<citation>1350	4	1350</citation>
	<citation>1350	4	1350</citation>
	<citation>1399	4	1350</citation>
	<citation>1646	4	1350</citation>
	<citation>1659	4	1350</citation>
	<citation>1659	4	1350</citation>
	<citation>1768	4	1350</citation>
	<citation>1781	4	1350</citation>
	<citation>1781	4	1350</citation>
	<citation>1856	4	1350</citation>
	<citation>1945	4	1350</citation>
	<citation>1945	4	1350</citation>
	<citation>1945	4	1350</citation>
	<citation>2050	4	1350</citation>
	<citation>2110	4	1350</citation>
	<citation>2650	4	1350</citation>
	<citation>2698	4	1350</citation>
	<citation>2708	4	1350</citation>
	<citation>3093	4	1350</citation>
	<citation>3094	4	1350</citation>
	<citation>1012	5	1350</citation>
	<citation>1225	5	1350</citation>
	<citation>1265	5	1350</citation>
	<citation>1350	5	1350</citation>
	<citation>1350	5	1350</citation>
	<citation>1350	5	1350</citation>
	<citation>1399	5	1350</citation>
	<citation>1659	5	1350</citation>
	<citation>680	5	1350</citation>
	<citation>1225	6	1350</citation>
	<citation>1265	6	1350</citation>
	<citation>1350	6	1350</citation>
	<citation>1671	6	1350</citation>
	<citation>1697	6	1350</citation>
	</citations>
	</document>
	<document id= '1349'>
	<title>Computing Capabilities at Western European Universities</title>
	<abstract>This report on the author's trip to universities in Western Europe in the summer of 1966 gives  brief descriptions of computing activities at each institution visited.  Present equipment capabilities  vary from moderate to large scale; however, many institutions plan to acquire complex time-shared systems  in the near future.  In the author's opinion, the state of the art lags behind that on this continent.   This lag is attributed to four principal factors: (a) the handicapping organization of academic procedures;  (b) the university-government financial relationship; (c) the subordinated organization of the computing  facility; (d) the paucity of professional interchange of knowledge.  The effects of these constraints  are explicated.</abstract>
	<conference>CACM December, 1966</conference>
	<authors>
	<author>Finerman, A.</author>
	</authors>
	<location>CA661201 JB March 2, 1978  2:55 PM</location>
	<citations>
	<citation>1349	4	1349</citation>
	<citation>1349	4	1349</citation>
	<citation>1349	4	1349</citation>
	<citation>1349	4	1349</citation>
	<citation>689	4	1349</citation>
	<citation>1349	5	1349</citation>
	<citation>1349	5	1349</citation>
	<citation>1349	5	1349</citation>
	<citation>236	5	1349</citation>
	<citation>1862	5	1349</citation>
	<citation>323	5	1349</citation>
	<citation>415	5	1349</citation>
	<citation>83	5	1349</citation>
	<citation>1349	6	1349</citation>
	</citations>
	</document>
	<document id= '1348'>
	<title>FLOWTRACE, A Computer Program for Flowcharting Programs</title>
	<abstract>The FLOWTRACE system produces flowcharts of programs written in "almost any" programming language.   One most describe the syntax of the control statements in his language; for this purpose a metalanguage  is available.  The resultant object deck is used to flowchart any programs in the language described.   Several examples of FAP and SNOBOL flowcharts are given.  However, it is not necessary to confine one's  scope to existing languages.  One may define his own language in any "well-structured" manner.  This  feature is particularly useful when it is desirable to chart only comments within a program.  Such an  approach permits the documentation of descriptive remarks and avoids the inclusion of coding details.</abstract>
	<conference>CACM December, 1966</conference>
	<authors>
	<author>Sherman, P. M.</author>
	</authors>
	<location>CA661202 JB March 2, 1978  2:49 PM</location>
	<citations>
	<citation>1330	4	1348</citation>
	<citation>1348	4	1348</citation>
	<citation>2315	4	1348</citation>
	<citation>1348	5	1348</citation>
	<citation>1348	5	1348</citation>
	<citation>1348	5	1348</citation>
	<citation>2315	5	1348</citation>
	<citation>728	5	1348</citation>
	<citation>1348	6	1348</citation>
	<citation>1834	6	1348</citation>
	<citation>1987	6	1348</citation>
	<citation>728	6	1348</citation>
	</citations>
	</document>
	<document id= '1347'>
	<title>General Time-Varying Systems Error Sensitivities Program</title>
	<abstract>The evaluation, by the propagation of variance technique, of the sensitivity of time-varying  systems to initial condition and parameter errors, involves the determination of several system-dependent  partial derivative matrices.  This requirement has led to separate programs for each system under investigation.   A new program, through utilization of the Wengert differentiation technique, automatically determines  the required matrices from specific system equations supplied in subroutine form at execution time, eliminating  the need for individualized programs, and presaging the further development of extremely general computer  programs.</abstract>
	<conference>CACM December, 1966</conference>
	<authors>
	<author>Wilkins, R. D.</author>
	</authors>
	<location>CA661203 JB March 2, 1978  2:44 PM</location>
	<citations>
	<citation>1028	4	1347</citation>
	<citation>1216	4	1347</citation>
	<citation>1216	4	1347</citation>
	<citation>1278	4	1347</citation>
	<citation>1278	4	1347</citation>
	<citation>1347	4	1347</citation>
	<citation>1347	4	1347</citation>
	<citation>1347	4	1347</citation>
	<citation>1396	4	1347</citation>
	<citation>1396	4	1347</citation>
	<citation>1396	4	1347</citation>
	<citation>1536	4	1347</citation>
	<citation>1028	5	1347</citation>
	<citation>1029	5	1347</citation>
	<citation>1278	5	1347</citation>
	<citation>1347	5	1347</citation>
	<citation>1347	5	1347</citation>
	<citation>1347	5	1347</citation>
	</citations>
	</document>
	<document id= '1346'>
	<title>On the Application of the Process of Equalization of Maxima to Obtain Rational Approximation  to Certain Modified Bessel Functions</title>
	<abstract>The second Remes algorithm as originally established for polynomials, may converge or not when  the approximating functions are rational.  However, the few results known in this domain show how efficient  the algorithm can be to obtain approximations with a small error, much more than in the polynomial case,  in which the best approximation can be very nearly approached directly by a series development.  The  aim of this paper is to investigate the limitations of the applicability of certain extensions of the  algorithm to the case where the approximations are rational as well as to present some numerical results.</abstract>
	<conference>CACM December, 1966</conference>
	<authors>
	<author>Gargantini, L.</author>
	</authors>
	<location>CA661204 JB March 2, 1978  2:39 PM</location>
	<citations>
	<citation>1015	4	1346</citation>
	<citation>1346	4	1346</citation>
	<citation>1346	4	1346</citation>
	<citation>1440	4	1346</citation>
	<citation>1645	4	1346</citation>
	<citation>951	4	1346</citation>
	<citation>951	5	1346</citation>
	<citation>1346	5	1346</citation>
	<citation>1346	5	1346</citation>
	<citation>1346	5	1346</citation>
	<citation>532	5	1346</citation>
	</citations>
	</document>
	<document id= '1345'>
	<title>Tensor Calculations on the Computer</title>
	<abstract>A FORMAC program has been written which is capable of calculating various quantities of interest  in tensor calculus.  Using this code, Christoffel symbols have been calculated for 12 basic orthogonal  coordinate systems.</abstract>
	<conference>CACM December, 1966</conference>
	<authors>
	<author>Waltons, J. J.</author>
	</authors>
	<location>CA661205 JB March 2, 1978  2:35 PM</location>
	<citations>
	<citation>1345	5	1345</citation>
	<citation>1345	5	1345</citation>
	<citation>1345	5	1345</citation>
	<citation>1543	5	1345</citation>
	<citation>1664	5	1345</citation>
	<citation>1345	6	1345</citation>
	<citation>1345	6	1345</citation>
	<citation>1543	6	1345</citation>
	<citation>1616	6	1345</citation>
	<citation>1616	6	1345</citation>
	</citations>
	</document>
	<document id= '1344'>
	<title>Statistical Computations Based Upon Algebraically Specified Models</title>
	<abstract>Based upon a machine-readable statistical model and related symbolic specifications, an efficient  method of performing calculations for statistical models of a balanced complete nature is presented.   Fixes, mixed, and random analysis of variance models are considered.  A procedure for obtaining variance  components and calculated F statistics for the model terms is included.</abstract>
	<conference>CACM December, 1966</conference>
	<authors>
	<author>Schlater, J. E.</author>
	<author>Hemerle, W. J.</author>
	</authors>
	<location>CA661206 JB March 2, 1978  2:33 PM</location>
	<citations>
	<citation>1344	5	1344</citation>
	<citation>1344	5	1344</citation>
	<citation>1344	5	1344</citation>
	</citations>
	</document>
	<document id= '1343'>
	<citations>
	<citation>1343	5	1343</citation>
	<citation>1343	5	1343</citation>
	<citation>1343	5	1343</citation>
	</citations>
	<title>Havie Integrator (Algorithm 257 [D1])</title>
	<conference>CACM December, 1966</conference>
	<authors>
	<author>Farkas, I.</author>
	</authors>
	<location>CA661207b JB March 23, 1978  4:16 PM</location>
	</document>
	<document id= '1342'>
	<citations>
	<citation>1342	5	1342</citation>
	<citation>1342	5	1342</citation>
	<citation>1342	5	1342</citation>
	</citations>
	<title>Transportation Problem (Algorithms 293 [H])</title>
	<conference>CACM December, 1966</conference>
	<authors>
	<author>Bayer, G.</author>
	</authors>
	<location>CA661207a JB March 2, 1978  2:30 PM</location>
	</document>
	<document id= '1341'>
	<title>Levels of Computer Systems</title>
	<abstract>In building current computer systems, we tend to break them down into "levels" of control,  command and communication; in using the system, we break our problems down correspondingly.  The continued  use of such a structure raises questions about its effects on the usefulness of future systems, particularly  with regard to such trends as time sharing, parallel programming, and, eventually, systems which learn.   In this essay some of these questions are posed, and the general attitude we must take in pursuing the  problem further is discussed.</abstract>
	<conference>CACM December, 1966</conference>
	<authors>
	<author>Bryant, P.</author>
	</authors>
	<location>CA661208 JB March 2, 1978  2:29 PM</location>
	<citations>
	<citation>1341	5	1341</citation>
	<citation>1341	5	1341</citation>
	<citation>1341	5	1341</citation>
	</citations>
	</document>
	<document id= '1340'>
	<title>Multiplexing of Slow Peripherals</title>
	<abstract>The philosophy of a monitor which allows slow output devices to be multiplexed is presented.</abstract>
	<conference>CACM December, 1966</conference>
	<authors>
	<author>Abraham, C.</author>
	<author>Lance, G. N.</author>
	<author>Pearcey, T.</author>
	</authors>
	<location>CA661209 JB March 2, 1978  2:25 PM</location>
	<citations>
	<citation>1340	5	1340</citation>
	<citation>1340	5	1340</citation>
	<citation>1340	5	1340</citation>
	</citations>
	</document>
	<document id= '1339'>
	<citations>
	<citation>1339	5	1339</citation>
	<citation>1339	5	1339</citation>
	<citation>1339	5	1339</citation>
	</citations>
	<title>A Contribution to the Development of ALGOL</title>
	<conference>CACM December, 1966</conference>
	<authors>
	<author>Wirth, N.</author>
	<author>Hoare, C. A. R.</author>
	</authors>
	<location>CA661210 JB March 30, 1978  9:13 AM</location>
	</document>
	<document id= '1338'>
	<citations>
	<citation>1338	5	1338</citation>
	<citation>1338	5	1338</citation>
	<citation>1338	5	1338</citation>
	<citation>2150	5	1338</citation>
	<citation>2228	5	1338</citation>
	<citation>2256	5	1338</citation>
	<citation>2342	5	1338</citation>
	<citation>2618	5	1338</citation>
	<citation>1198	6	1338</citation>
	<citation>1198	6	1338</citation>
	<citation>1198	6	1338</citation>
	<citation>1198	6	1338</citation>
	<citation>1198	6	1338</citation>
	<citation>1338	6	1338</citation>
	<citation>1338	6	1338</citation>
	<citation>1338	6	1338</citation>
	<citation>1338	6	1338</citation>
	<citation>1338	6	1338</citation>
	<citation>1749	6	1338</citation>
	<citation>1749	6	1338</citation>
	<citation>1749	6	1338</citation>
	<citation>1877	6	1338</citation>
	<citation>2256	6	1338</citation>
	</citations>
	<title>Additional Comments on a Problem in Concurrent Progamming Control</title>
	<conference>CACM December, 1966</conference>
	<authors>
	<author>Knuth, D. E.</author>
	</authors>
	<location>CA661211 JB March 30, 1978  9:12 AM</location>
	</document>
	<document id= '1337'>
	<citations>
	<citation>1337	5	1337</citation>
	<citation>1337	5	1337</citation>
	<citation>1337	5	1337</citation>
	<citation>2423	5	1337</citation>
	<citation>1337	6	1337</citation>
	<citation>2015	6	1337</citation>
	</citations>
	<title>EULER: A Generalization of ALGOL, and its Formal Definition</title>
	<conference>CACM December, 1966</conference>
	<authors>
	<author>Wirth, N.</author>
	<author>Weber, H.</author>
	</authors>
	<location>CA661212 JB March 30, 1978  9:11 AM</location>
	</document>
	<document id= '1336'>
	<citations>
	<citation>1247	5	1336</citation>
	<citation>1336	5	1336</citation>
	<citation>1336	5	1336</citation>
	<citation>1336	5	1336</citation>
	<citation>1945	5	1336</citation>
	<citation>823	6	1336</citation>
	<citation>914	6	1336</citation>
	<citation>915	6	1336</citation>
	<citation>917	6	1336</citation>
	<citation>984	6	1336</citation>
	<citation>989	6	1336</citation>
	<citation>990	6	1336</citation>
	<citation>1012	6	1336</citation>
	<citation>1084	6	1336</citation>
	<citation>1098	6	1336</citation>
	<citation>1122	6	1336</citation>
	<citation>1138	6	1336</citation>
	<citation>1139	6	1336</citation>
	<citation>1141	6	1336</citation>
	<citation>1200	6	1336</citation>
	<citation>1223	6	1336</citation>
	<citation>1265	6	1336</citation>
	<citation>1336	6	1336</citation>
	<citation>1336	6	1336</citation>
	<citation>1396	6	1336</citation>
	<citation>1455	6	1336</citation>
	<citation>1477	6	1336</citation>
	<citation>1487	6	1336</citation>
	<citation>1491	6	1336</citation>
	<citation>1496	6	1336</citation>
	<citation>483	6	1336</citation>
	<citation>584	6	1336</citation>
	<citation>669	6	1336</citation>
	<citation>680	6	1336</citation>
	<citation>763	6	1336</citation>
	</citations>
	<title>NPL: Highlights of A New Programming Language</title>
	<conference>CACM January, 1965</conference>
	<authors>
	<author>Radin, G.</author>
	<author>Rogoway, H. P.</author>
	</authors>
	<location>CA650101 JB March 8, 1978  3:01 PM</location>
	</document>
	<document id= '1335'>
	<citations>
	<citation>1335	5	1335</citation>
	<citation>1335	5	1335</citation>
	<citation>1335	5	1335</citation>
	</citations>
	<title>Character Set for Optical Character Recognition (Proposed American Stand ard)</title>
	<conference>CACM January, 1965</conference>
	<location>CA650102 JB March 8, 1978  3:00 PM</location>
	</document>
	<document id= '1334'>
	<title>Mechanization of Tedious Algebra: The Newcomb Operators of Planetary Theory</title>
	<abstract>A computer program has been written to generate tables of formulas for the Newcomb operators  of planetary theory.  The Newcomb operators are expressed as polynomials in two variables, one of which  stands for a simple differential operator, and the other for an arbitrary integer.  The polynomials are  generated by a recurrence scheme.  The program is coded in FORTRAN, using simple array manipulation techniques  to perform the algebraic operations.  Formulas for over 100 Newcomb operators have been produced by the  program and typeset photographically on an S-560 Photon system.</abstract>
	<conference>CACM January, 1965</conference>
	<authors>
	<author>Gerard, J. M.</author>
	<author>Izsak, I. G.</author>
	<author>Barnett, M. P.</author>
	</authors>
	<location>CA650103 JB March 8, 1978  2:59 PM</location>
	<citations>
	<citation>1334	4	1334</citation>
	<citation>1396	4	1334</citation>
	<citation>1444	4	1334</citation>
	<citation>964	5	1334</citation>
	<citation>1334	5	1334</citation>
	<citation>1334	5	1334</citation>
	<citation>1334	5	1334</citation>
	<citation>1396	5	1334</citation>
	<citation>964	6	1334</citation>
	<citation>1028	6	1334</citation>
	<citation>1029	6	1334</citation>
	<citation>1083	6	1334</citation>
	<citation>1132	6	1334</citation>
	<citation>1214	6	1334</citation>
	<citation>1278	6	1334</citation>
	<citation>1334	6	1334</citation>
	<citation>1365	6	1334</citation>
	<citation>1386	6	1334</citation>
	<citation>1387	6	1334</citation>
	<citation>1388	6	1334</citation>
	<citation>1392	6	1334</citation>
	<citation>1393	6	1334</citation>
	<citation>1394	6	1334</citation>
	<citation>1395	6	1334</citation>
	<citation>1396	6	1334</citation>
	<citation>1397	6	1334</citation>
	<citation>1496	6	1334</citation>
	<citation>284	6	1334</citation>
	<citation>407	6	1334</citation>
	<citation>3199	6	1334</citation>
	<citation>3200	6	1334</citation>
	<citation>3201	6	1334</citation>
	<citation>3202	6	1334</citation>
	<citation>3203	6	1334</citation>
	<citation>3204	6	1334</citation>
	<citation>561	6	1334</citation>
	<citation>730	6	1334</citation>
	</citations>
	</document>
	<document id= '1333'>
	<title>Reducing Truncation Errors Using Cascading Accumulators</title>
	<abstract>When accumulating a large number of quantities as in numerical integration, the sum itself  may become much larger than the individual addends.  This results in truncation error.  Much of this  error can be eliminated using cascading accumulators as noted in a recent article by Wolfe.  A simpler  and slightly more flexible algorithm is presented which deals also with the case of negative addends.</abstract>
	<conference>CACM January, 1965</conference>
	<authors>
	<author>Ross, D. R.</author>
	</authors>
	<location>CA650104 JB March 8, 1978  2:54 PM</location>
	<citations>
	<citation>1328	4	1333</citation>
	<citation>1333	4	1333</citation>
	<citation>2144	4	1333</citation>
	<citation>1052	5	1333</citation>
	<citation>1333	5	1333</citation>
	<citation>1333	5	1333</citation>
	<citation>1333	5	1333</citation>
	</citations>
	</document>
	<document id= '1332'>
	<title>Subroutine Assembly</title>
	<abstract>A description is given of an assembly system, which requires only one pass and does not maintain  a table of information about the subroutine library.</abstract>
	<conference>CACM January, 1965</conference>
	<authors>
	<author>Samet, P. A.</author>
	</authors>
	<location>CA650105 JB March 8, 1978  2:51 PM</location>
	<citations>
	<citation>1332	4	1332</citation>
	<citation>1044	5	1332</citation>
	<citation>1332	5	1332</citation>
	<citation>1332	5	1332</citation>
	<citation>1332	5	1332</citation>
	</citations>
	</document>
	<document id= '1331'>
	<title>Code Structures for Protection and Manipulation of Variable-Length Items</title>
	<abstract>When items are made up of a variable number of characters, each containing the same number  of bits, certain control information (partition symbols) is inserted to mark their separations.  Since  errors in identification of these control characters can lead to serious trouble, methods of protecting  these symbols are indicated.  A 6-bit code assignment of alphanumeric characters for fixed word-length  computers is given and its suitability for error detection and variable-length item manipulation is shown.   Also indicated is its flexibility during certain arithmetic operations.</abstract>
	<conference>CACM January, 1965</conference>
	<authors>
	<author>Ramamoorthy, C. V.</author>
	</authors>
	<location>CA650106 JB March 8, 1978  2:48 PM</location>
	<citations>
	<citation>1331	5	1331</citation>
	<citation>1331	5	1331</citation>
	<citation>1331	5	1331</citation>
	</citations>
	</document>
	<document id= '1330'>
	<citations>
	<citation>1330	4	1330</citation>
	<citation>1330	4	1330</citation>
	<citation>1348	4	1330</citation>
	<citation>2315	4	1330</citation>
	<citation>1330	5	1330</citation>
	<citation>1330	5	1330</citation>
	<citation>1330	5	1330</citation>
	<citation>528	5	1330</citation>
	<citation>728	5	1330</citation>
	</citations>
	<title>Automated Plotting Flow-Charts on a Small Computer</title>
	<conference>CACM January, 1965</conference>
	<authors>
	<author>Anderson, H. E.</author>
	</authors>
	<location>CA650107 JB March 8, 1978  2:39 PM</location>
	</document>
	<document id= '1329'>
	<citations>
	<citation>1207	5	1329</citation>
	<citation>1208	5	1329</citation>
	<citation>1329	5	1329</citation>
	<citation>1329	5	1329</citation>
	<citation>1329	5	1329</citation>
	<citation>3053	5	1329</citation>
	<citation>1329	6	1329</citation>
	<citation>1329	6	1329</citation>
	<citation>1329	6	1329</citation>
	<citation>1785	6	1329</citation>
	<citation>1973	6	1329</citation>
	<citation>1992	6	1329</citation>
	<citation>2107	6	1329</citation>
	<citation>2109	6	1329</citation>
	<citation>2412	6	1329</citation>
	<citation>2543	6	1329</citation>
	<citation>2673	6	1329</citation>
	<citation>2707	6	1329</citation>
	<citation>2770	6	1329</citation>
	</citations>
	<title>Simulation of Boolean Functions in a Decimal computer</title>
	<conference>CACM January, 1965</conference>
	<authors>
	<author>Mano, M. M.</author>
	</authors>
	<location>CA650108 JB March 8, 1978  2:38 PM</location>
	</document>
	<document id= '1328'>
	<citations>
	<citation>1328	4	1328</citation>
	<citation>1333	4	1328</citation>
	<citation>2144	4	1328</citation>
	<citation>1052	5	1328</citation>
	<citation>1328	5	1328</citation>
	<citation>1328	5	1328</citation>
	<citation>1328	5	1328</citation>
	<citation>2282	5	1328</citation>
	<citation>2860	5	1328</citation>
	<citation>3083	5	1328</citation>
	<citation>1328	6	1328</citation>
	<citation>1328	6	1328</citation>
	<citation>1328	6	1328</citation>
	<citation>1973	6	1328</citation>
	<citation>2049	6	1328</citation>
	<citation>2107	6	1328</citation>
	<citation>2203	6	1328</citation>
	<citation>2543	6	1328</citation>
	<citation>2552	6	1328</citation>
	<citation>492	6	1328</citation>
	</citations>
	<title>Further Remarks on Reducing Truncation Errors</title>
	<conference>CACM January, 1965</conference>
	<authors>
	<author>Kahan, W.</author>
	</authors>
	<location>CA650109 JB March 8, 1978  2:37 PM</location>
	</document>
	<document id= '1327'>
	<title>Use of Decision Tables in Computer Programming</title>
	<abstract>A decision table is a tabular form for displaying decision logic.  Decision tables have many  inherent advantages.  The technique to be illustrated puts these advantages to use in that it enables  one to program directly from a decision table.  The technique is based on the creation of a binary image  of a limited entry decision table in computer memory.  A binary image of a given set of input conditions  can also be created.  This data image is used to scan the decision table image to arrive at the proper  course of action.  There are several advantages gained from the programming point view: (1) amount of  computer memory used is drastically reduced, (2) programming is simplified, and (3) documentation is  brief and clear.</abstract>
	<conference>CACM January, 1965</conference>
	<authors>
	<author>Kirk, H. W.</author>
	</authors>
	<location>CA650110 JB March 8, 1978  2:36 PM</location>
	<citations>
	<citation>1327	5	1327</citation>
	<citation>1327	5	1327</citation>
	<citation>1327	5	1327</citation>
	<citation>1354	5	1327</citation>
	<citation>1488	5	1327</citation>
	<citation>2053	5	1327</citation>
	<citation>2220	5	1327</citation>
	<citation>2273	5	1327</citation>
	<citation>2726	5	1327</citation>
	<citation>2856	5	1327</citation>
	<citation>1172	6	1327</citation>
	<citation>1172	6	1327</citation>
	<citation>1172	6	1327</citation>
	<citation>1172	6	1327</citation>
	<citation>1172	6	1327</citation>
	<citation>1172	6	1327</citation>
	<citation>1237	6	1327</citation>
	<citation>1237	6	1327</citation>
	<citation>1237	6	1327</citation>
	<citation>1237	6	1327</citation>
	<citation>1237	6	1327</citation>
	<citation>1327	6	1327</citation>
	<citation>1327	6	1327</citation>
	<citation>1327	6	1327</citation>
	<citation>1327	6	1327</citation>
	<citation>1327	6	1327</citation>
	<citation>1327	6	1327</citation>
	<citation>1327	6	1327</citation>
	<citation>1354	6	1327</citation>
	<citation>1354	6	1327</citation>
	<citation>1354	6	1327</citation>
	<citation>1354	6	1327</citation>
	<citation>1354	6	1327</citation>
	<citation>1488	6	1327</citation>
	<citation>1489	6	1327</citation>
	<citation>1489	6	1327</citation>
	<citation>1548	6	1327</citation>
	<citation>1548	6	1327</citation>
	<citation>1684	6	1327</citation>
	<citation>250	6	1327</citation>
	<citation>2053	6	1327</citation>
	<citation>2053	6	1327</citation>
	<citation>2220	6	1327</citation>
	<citation>2220	6	1327</citation>
	<citation>2220	6	1327</citation>
	<citation>2221	6	1327</citation>
	<citation>2263	6	1327</citation>
	<citation>2453	6	1327</citation>
	<citation>2598	6	1327</citation>
	</citations>
	</document>
	<document id= '1326'>
	<title>Boundary Networks</title>
	<abstract>A feasible computer procedure is described for determining the total or partial inclusion of  arbitrarily given points and lines with respect to a set of general polygonal domains which partition  a plane bounded region.  A scheme for the computer representation of the boundaries of the domains and  an algorithm, based on this  scheme, for evaluating the inclusion relations are specified in detail.   The method employs several levels of selection criteria for the purpose of reducing the number of accesses  to auxiliary storage devices and the amount of boundary data for which processing is required.</abstract>
	<conference>CACM January, 1965</conference>
	<authors>
	<author>Loomis, R. G.</author>
	</authors>
	<location>CA650111 JB March 8, 1978  2:31 PM</location>
	<citations>
	<citation>1326	5	1326</citation>
	<citation>1326	5	1326</citation>
	<citation>1326	5	1326</citation>
	<citation>1630	5	1326</citation>
	<citation>2547	5	1326</citation>
	<citation>2987	5	1326</citation>
	<citation>3165	5	1326</citation>
	<citation>1326	6	1326</citation>
	<citation>1326	6	1326</citation>
	<citation>1326	6	1326</citation>
	<citation>1326	6	1326</citation>
	<citation>1630	6	1326</citation>
	<citation>1925	6	1326</citation>
	<citation>2125	6	1326</citation>
	<citation>2547	6	1326</citation>
	<citation>2633	6	1326</citation>
	<citation>2987	6	1326</citation>
	<citation>421	6	1326</citation>
	<citation>524	6	1326</citation>
	</citations>
	</document>
	<document id= '1325'>
	<title>Remote, On-Line, Real-time Computer Diagnosis of the Clinical Electrocardiogram</title>
	<abstract>Presented in this paper is a brief report on the hardware, software, system configuration and  function of a system for the remote, online, real-time digital computer diagnosis of clinical electrocardiograms.   It seems likely that efforts of this sort will lead to a satisfactory solution to the problem of the  automatic diagnosis of electrocardiograms.  Current attempts by the authors to extend the diagnostic  capabilities of the present system are particularly concerned with increasing the fidelity of the adaptive  matched filters, the development of three dimensional pattern analysis, the analysis of parallel electrocardiographer-computer  diagnostic interaction, and a study of the possibility of introducing major, tree-like branching decisions  early in the diagnostic process.</abstract>
	<conference>CACM January, 1965</conference>
	<authors>
	<author>Whipple, G. H.</author>
	<author>Dickson, J. F.</author>
	<author>Horibe, H.</author>
	<author>Stark, L.</author>
	</authors>
	<location>CA650112 JB March 8, 1978  2:27 PM</location>
	<citations>
	<citation>1325	4	1325</citation>
	<citation>1325	5	1325</citation>
	<citation>1325	5	1325</citation>
	<citation>1325	5	1325</citation>
	<citation>462	5	1325</citation>
	</citations>
	</document>
	<document id= '1324'>
	<title>Answering English questions by Computer: A Survey</title>
	<abstract>Fifteen experimental English language question-answering systems which are programmed and operating  are described and reviewed.  The systems range from a conversation machine to programs which make sentences  about pictures and systems which translate from English into logical calculi.  Systems are classified  as list-structured data-based, graphic data-based, text-based and inferential.  Principles and methods  of operations are detailed and discussed.  It is concluded that the data-base question-answer has passed  from initial research into the early developmental phase.  The most difficult and important research  questions for the advancement of general-purpose language processors are seen to be concerned with measuring,  dealing with ambiguities, translating into formal languages and searching large tree structures.</abstract>
	<conference>CACM January, 1965</conference>
	<authors>
	<author>Simmons, R. F.</author>
	</authors>
	<location>CA650113 JB March 8, 1978  2:21 PM</location>
	<citations>
	<citation>1324	4	1324</citation>
	<citation>1324	4	1324</citation>
	<citation>1324	4	1324</citation>
	<citation>892	4	1324</citation>
	<citation>931	4	1324</citation>
	<citation>1155	5	1324</citation>
	<citation>1324	5	1324</citation>
	<citation>1324	5	1324</citation>
	<citation>1324	5	1324</citation>
	<citation>1456	5	1324</citation>
	<citation>1468	5	1324</citation>
	<citation>1515	5	1324</citation>
	<citation>1699	5	1324</citation>
	<citation>1856	5	1324</citation>
	<citation>2127	5	1324</citation>
	<citation>634	5	1324</citation>
	<citation>652	5	1324</citation>
	<citation>653	5	1324</citation>
	<citation>1155	6	1324</citation>
	<citation>1155	6	1324</citation>
	<citation>1194	6	1324</citation>
	<citation>1225	6	1324</citation>
	<citation>1324	6	1324</citation>
	<citation>1324	6	1324</citation>
	<citation>1324	6	1324</citation>
	<citation>1324	6	1324</citation>
	<citation>1324	6	1324</citation>
	<citation>1324	6	1324</citation>
	<citation>1324	6	1324</citation>
	<citation>1487	6	1324</citation>
	<citation>1527	6	1324</citation>
	<citation>1553	6	1324</citation>
	<citation>1681	6	1324</citation>
	<citation>1781	6	1324</citation>
	<citation>1856	6	1324</citation>
	</citations>
	</document>
	<document id= '1323'>
	<title>A Correspondence Between ALGOL 60 and Church's Lambda-Notation: Part I*</title>
	<abstract>This paper describes how some of the semantics of ALGOL 60 can be formalized by establishing  a correspondence between expressions of ALGOL 60 and expressions in a modified form of Church's L-notation.   First a model for computer languages and compute behavior is described, based on the notions of functional  application and functional abstraction, but also having analogues for imperative language features.   Then this model is used as an "abstract object language" into which ALGOL 60 is mapped.  Many of ALGOL  60's features emerge as particular arrangements of a small number of structural rules, suggesting new  classifications and generalizations.  The correspondence is first described informally, mainly by illustrations.   The second part of the paper gives a formal description, i.e. an "abstract compiler" into the "abstract  objct language."  This is itself presented in a "purely functional" notation, that is one using only  application and abstraction.</abstract>
	<conference>CACM February, 1965</conference>
	<authors>
	<author>Landin, P. J.</author>
	</authors>
	<location>CA650201 JB March 7, 1978  11:26 PM</location>
	<citations>
	<citation>1086	4	1323</citation>
	<citation>1132	4	1323</citation>
	<citation>1234	4	1323</citation>
	<citation>1263	4	1323</citation>
	<citation>1265	4	1323</citation>
	<citation>1270	4	1323</citation>
	<citation>1323	4	1323</citation>
	<citation>1323	4	1323</citation>
	<citation>1323	4	1323</citation>
	<citation>1358	4	1323</citation>
	<citation>1358	4	1323</citation>
	<citation>1379	4	1323</citation>
	<citation>1380	4	1323</citation>
	<citation>1380	4	1323</citation>
	<citation>1453	4	1323</citation>
	<citation>1464	4	1323</citation>
	<citation>1484	4	1323</citation>
	<citation>1491	4	1323</citation>
	<citation>1498	4	1323</citation>
	<citation>1613	4	1323</citation>
	<citation>1614	4	1323</citation>
	<citation>1665	4	1323</citation>
	<citation>1781	4	1323</citation>
	<citation>1781	4	1323</citation>
	<citation>1787	4	1323</citation>
	<citation>1825	4	1323</citation>
	<citation>1860	4	1323</citation>
	<citation>1989	4	1323</citation>
	<citation>2083	4	1323</citation>
	<citation>2112	4	1323</citation>
	<citation>2178	4	1323</citation>
	<citation>2179	4	1323</citation>
	<citation>2252	4	1323</citation>
	<citation>2325	4	1323</citation>
	<citation>2341	4	1323</citation>
	<citation>2534	4	1323</citation>
	<citation>2541	4	1323</citation>
	<citation>2546	4	1323</citation>
	<citation>2645	4	1323</citation>
	<citation>2652	4	1323</citation>
	<citation>2684	4	1323</citation>
	<citation>2698	4	1323</citation>
	<citation>2733	4	1323</citation>
	<citation>2820	4	1323</citation>
	<citation>2842	4	1323</citation>
	<citation>2929	4	1323</citation>
	<citation>2934	4	1323</citation>
	<citation>3069	4	1323</citation>
	<citation>3073	4	1323</citation>
	<citation>3155	4	1323</citation>
	<citation>669	4	1323</citation>
	<citation>679	4	1323</citation>
	<citation>691	4	1323</citation>
	<citation>761	4	1323</citation>
	<citation>949	4	1323</citation>
	<citation>989	4	1323</citation>
	<citation>1323	5	1323</citation>
	<citation>1323	5	1323</citation>
	<citation>1323	5	1323</citation>
	<citation>267	5	1323</citation>
	<citation>1781	5	1323</citation>
	<citation>2178	5	1323</citation>
	<citation>2326	5	1323</citation>
	<citation>2684	5	1323</citation>
	<citation>3184	5	1323</citation>
	<citation>799	5	1323</citation>
	<citation>123	6	1323</citation>
	<citation>196	6	1323</citation>
	<citation>919	6	1323</citation>
	<citation>990	6	1323</citation>
	<citation>1007	6	1323</citation>
	<citation>1046	6	1323</citation>
	<citation>1131	6	1323</citation>
	<citation>1139	6	1323</citation>
	<citation>1140	6	1323</citation>
	<citation>1149	6	1323</citation>
	<citation>1198	6	1323</citation>
	<citation>1215	6	1323</citation>
	<citation>1223	6	1323</citation>
	<citation>1265	6	1323</citation>
	<citation>1303	6	1323</citation>
	<citation>1303	6	1323</citation>
	<citation>1303	6	1323</citation>
	<citation>1303	6	1323</citation>
	<citation>1323	6	1323</citation>
	<citation>1323	6	1323</citation>
	<citation>1323	6	1323</citation>
	<citation>1323	6	1323</citation>
	<citation>1358	6	1323</citation>
	<citation>1366	6	1323</citation>
	<citation>1421	6	1323</citation>
	<citation>1460	6	1323</citation>
	<citation>1462	6	1323</citation>
	<citation>1463	6	1323</citation>
	<citation>1467	6	1323</citation>
	<citation>1468	6	1323</citation>
	<citation>1477	6	1323</citation>
	<citation>1491	6	1323</citation>
	<citation>1496	6	1323</citation>
	<citation>1531	6	1323</citation>
	<citation>1535	6	1323</citation>
	<citation>1565	6	1323</citation>
	<citation>1601	6	1323</citation>
	<citation>1602	6	1323</citation>
	<citation>1613	6	1323</citation>
	<citation>1614	6	1323</citation>
	<citation>1626	6	1323</citation>
	<citation>1641	6	1323</citation>
	<citation>1787	6	1323</citation>
	<citation>1788	6	1323</citation>
	<citation>205	6	1323</citation>
	<citation>1834	6	1323</citation>
	<citation>224	6	1323</citation>
	<citation>249	6	1323</citation>
	<citation>288	6	1323</citation>
	<citation>316	6	1323</citation>
	<citation>381	6	1323</citation>
	<citation>398	6	1323</citation>
	<citation>2059	6	1323</citation>
	<citation>11	6	1323</citation>
	<citation>2127	6	1323</citation>
	<citation>2192	6	1323</citation>
	<citation>404	6	1323</citation>
	<citation>410	6	1323</citation>
	<citation>463	6	1323</citation>
	<citation>464	6	1323</citation>
	<citation>483	6	1323</citation>
	<citation>3184	6	1323</citation>
	<citation>3184	6	1323</citation>
	<citation>3184	6	1323</citation>
	<citation>3186	6	1323</citation>
	<citation>3188	6	1323</citation>
	<citation>584	6	1323</citation>
	<citation>600	6	1323</citation>
	<citation>680	6	1323</citation>
	<citation>691	6	1323</citation>
	<citation>763	6	1323</citation>
	<citation>799	6	1323</citation>
	</citations>
	</document>
	<document id= '1322'>
	<citations>
	<citation>1322	5	1322</citation>
	<citation>1322	5	1322</citation>
	<citation>1322	5	1322</citation>
	<citation>1690	5	1322</citation>
	<citation>1322	6	1322</citation>
	</citations>
	<title>Netflow (Algorithm 248 [H])</title>
	<conference>CACM February, 1965</conference>
	<authors>
	<author>Briggs, W. A.</author>
	</authors>
	<location>CA650202 JB March 7, 1978  11:18 PM</location>
	</document>
	<document id= '1321'>
	<citations>
	<citation>1321	5	1321</citation>
	<citation>1321	5	1321</citation>
	<citation>1321	5	1321</citation>
	<citation>1705	5	1321</citation>
	<citation>984	6	1321</citation>
	<citation>986	6	1321</citation>
	<citation>1020	6	1321</citation>
	<citation>1321	6	1321</citation>
	</citations>
	<title>Outreal N (Algorithm [I5])</title>
	<conference>CACM February, 1965</conference>
	<authors>
	<author>Wirth, N. E.</author>
	</authors>
	<location>CA650203 JB March 7, 1978  11:17 PM</location>
	</document>
	<document id= '1320'>
	<citations>
	<citation>1320	5	1320</citation>
	<citation>1320	5	1320</citation>
	<citation>1320	5	1320</citation>
	</citations>
	<title>Inverse Permutation (Algorithm 250 [G6])</title>
	<conference>CACM February, 1965</conference>
	<authors>
	<author>Boonstra, B. H.</author>
	</authors>
	<location>CA650204 JB March 7, 1978  11:16 PM</location>
	</document>
	<document id= '1319'>
	<citations>
	<citation>1319	4	1319</citation>
	<citation>1319	4	1319</citation>
	<citation>454	4	1319</citation>
	<citation>140	4	1319</citation>
	<citation>152	5	1319</citation>
	<citation>1128	5	1319</citation>
	<citation>1319	5	1319</citation>
	<citation>1319	5	1319</citation>
	<citation>1319	5	1319</citation>
	</citations>
	<title>Crout with Equilibration and Iteration (Algorithm 135 [F4])</title>
	<conference>CACM February, 1965</conference>
	<authors>
	<author>Meissner, L. P.</author>
	</authors>
	<location>CA650205 JB March 7, 1978  11:15 PM</location>
	</document>
	<document id= '1318'>
	<citations>
	<citation>1318	5	1318</citation>
	<citation>1318	5	1318</citation>
	<citation>1318	5	1318</citation>
	</citations>
	<title>Arccossin (Algorithm 206 [B1])</title>
	<conference>CACM February, 1965</conference>
	<authors>
	<author>Bowlden, H. J.</author>
	</authors>
	<location>CA650206 JB March 7, 1978  11:14 PM</location>
	</document>
	<document id= '1317'>
	<citations>
	<citation>1317	5	1317</citation>
	<citation>1317	5	1317</citation>
	<citation>1317	5	1317</citation>
	</citations>
	<title>Poisson-Charlier Polynomials (Algorithm 234 [S23])</title>
	<conference>CACM February, 1965</conference>
	<authors>
	<author>Samet, P.A.</author>
	</authors>
	<location>CA650207 JB March 7, 1978  11:12 PM</location>
	</document>
	<document id= '1316'>
	<citations>
	<citation>1316	5	1316</citation>
	<citation>1316	5	1316</citation>
	<citation>1316	5	1316</citation>
	<citation>1909	5	1316</citation>
	<citation>134	6	1316</citation>
	<citation>1023	6	1316</citation>
	<citation>1284	6	1316</citation>
	<citation>1316	6	1316</citation>
	</citations>
	<title>Bessel Functions of the First Kind (Algorithm 236 [S17])</title>
	<conference>CACM February, 1965</conference>
	<authors>
	<author>Gautschi, W.</author>
	</authors>
	<location>CA650208 JB March 7,1978  11:11 PM</location>
	</document>
	<document id= '1315'>
	<title>Automation of the Radioisotope Accountability System</title>
	<abstract>The Radioisotope Service of the Veterans Administration Hospital, Omaha, Nebraska, used a manual  system of radioisotope accountability for three years.  The procedure which was satisfactory but time-consuming  was converted from manual to a fully automated computer system in January, 1963.  The program for purchased  radioisotopes is written in FORMAT FORTRAN for the IBM 1620 Computer.  A second program for maintaining  accountability for reactor-created radioisotopes is written  in the FORCOM programming language.  A minimum  amount of bookkeeping is required by the reactor operating staff.  The United States Atomic Energy Commission  regulations specify that records be kept.  This system provides detailed records for each container of  radioactive material purchased and/or created in the Triga reactor indicating the amounts received, used,  and/or transferred to the health physicist for disposal.  Consolidated records contain total amounts  received, used, and/or disposed of for any specified period of time.  Purchased radioisotopes are reported  in millicuries; reactor-created radioisotopes in microcuries.</abstract>
	<conference>CACM February, 1965</conference>
	<authors>
	<author>Lahners, E. L.</author>
	</authors>
	<location>CA650209 JB March 7, 1978  11:10 PM</location>
	<citations>
	<citation>1315	5	1315</citation>
	<citation>1315	5	1315</citation>
	<citation>1315	5	1315</citation>
	</citations>
	</document>
	<document id= '1314'>
	<title>The Organization of Symbol Tables</title>
	<abstract>An efficient symbol table organization is an important feature in the design of any compiler.   During the construction of the Virginia ALGOL 60 compiler for the Burroughs B205, the primary consideration  in the symbol table design was that the recognition of identifiers and reserved words should be as rapid  as possible.  The general features of the technique are described.</abstract>
	<conference>CACM February, 1965</conference>
	<authors>
	<author>Batson, A.</author>
	</authors>
	<location>CA650210 JB March 7, 1978  11:01 PM</location>
	<citations>
	<citation>1314	5	1314</citation>
	<citation>1314	5	1314</citation>
	<citation>1314	5	1314</citation>
	<citation>2033	5	1314</citation>
	<citation>1314	6	1314</citation>
	<citation>1785	6	1314</citation>
	<citation>1786	6	1314</citation>
	</citations>
	</document>
	<document id= '1313'>
	<citations>
	<citation>1313	5	1313</citation>
	<citation>1313	5	1313</citation>
	<citation>1313	5	1313</citation>
	<citation>3099	5	1313</citation>
	<citation>3138	5	1313</citation>
	<citation>1313	6	1313</citation>
	<citation>1313	6	1313</citation>
	<citation>2031	6	1313</citation>
	</citations>
	<title>Construction of Nonlinear Programming Test Problems</title>
	<conference>CACM February, 1965</conference>
	<authors>
	<author>Rosen, J. B.</author>
	<author>Suzuki, S.</author>
	</authors>
	<location>CA650211 JB March 7, 1978  10:58 PM</location>
	</document>
	<document id= '1312'>
	<citations>
	<citation>1312	5	1312</citation>
	<citation>1312	5	1312</citation>
	<citation>1312	5	1312</citation>
	<citation>3121	5	1312</citation>
	<citation>1312	6	1312</citation>
	<citation>308	6	1312</citation>
	<citation>309	6	1312</citation>
	<citation>2456	6	1312</citation>
	<citation>2709	6	1312</citation>
	</citations>
	<title>Recursion and Iteration</title>
	<conference>CACM February, 1965</conference>
	<authors>
	<author>Rice, H. G.</author>
	</authors>
	<location>CA650212 JB March 7, 1978  10:57 PM</location>
	</document>
	<document id= '1311'>
	<citations>
	<citation>1311	5	1311</citation>
	<citation>1311	5	1311</citation>
	<citation>1311	5	1311</citation>
	</citations>
	<title>Efficient Autocorrelation</title>
	<conference>CACM February, 1965</conference>
	<authors>
	<author>Schmid, L. P.</author>
	</authors>
	<location>CA650213 JB March 7, 1978  10:56 PM</location>
	</document>
	<document id= '1310'>
	<citations>
	<citation>1310	5	1310</citation>
	<citation>1310	5	1310</citation>
	<citation>1310	5	1310</citation>
	</citations>
	<title>A Rapid Braille Transliteration Technique for Certain IBM Machines</title>
	<conference>CACM February, 1965</conference>
	<authors>
	<author>Weiler, W. J.</author>
	<author>Klema, V. C.</author>
	</authors>
	<location>CA650214 JB March 7, 1978  10:55 PM</location>
	</document>
	<document id= '1309'>
	<title>A Computer User-Oriented System</title>
	<abstract>A computer language system has been developed which makes possible fast preparation of management  reports, regardless of computational complexity or format variety.  Costs are sufficiently low so that  individually tailored reports can be prepared for every manager.  The system requires initial preparation  of large data banks containing data in elementary form.  Use of two special languages, EXTRACT and MATRAN,  permits selective extraction of any data subset, efficient processing through any computational sequence,  and flexible presentation of results in either tabular or graphical form.  Matrix algebra is used as  a fundamental vehicle for accomplishing both manipulation and computation.</abstract>
	<conference>CACM February, 1965</conference>
	<authors>
	<author>Montillon, G. D.</author>
	</authors>
	<location>CA650215 JB March 7, 1978  10:51 PM</location>
	<citations>
	<citation>1309	4	1309</citation>
	<citation>892	4	1309</citation>
	<citation>1309	5	1309</citation>
	<citation>1309	5	1309</citation>
	<citation>1309	5	1309</citation>
	<citation>656	5	1309</citation>
	</citations>
	</document>
	<document id= '1308'>
	<title>A Mathematical Model for Mechanical part Description</title>
	<abstract>The flexibility of a mathematical model takes advantage of the common information requirements  of computer-aided engineering drawing, numerical control tape generation, and physical characteristic  computation.  By judicious control of man-machine communication requirements, improved results over conventional  engineering design processes are possible.  An English-like input language, tailored for use by draftsmen  and designers, will describe the part and specify the output desired.  One approach to the mathematical  model consists of a group of surface-defining quadric equations, which are created by a system of modular  subprogram.  Other subprograms will convert the mathematical model into instructions for driving automatic  drafting machines and numerical controlled machine tools.  Physical part characteristics, such as center  of gravity, can be computed by subprograms and used in dynamic analysis work.  The proposed overall system  is presented and experiments and demonstrations are discussed.</abstract>
	<conference>CACM February, 1965</conference>
	<authors>
	<author>Luh, J. Y. S.</author>
	<author>Krolak, R. J.</author>
	</authors>
	<location>CA650216 JB March 7, 1978  10:46 PM</location>
	<citations>
	<citation>1308	5	1308</citation>
	<citation>1308	5	1308</citation>
	<citation>1308	5	1308</citation>
	</citations>
	</document>
	<document id= '1307'>
	<title>A Lightpen-Controlled Program For On-Line Data Analysis</title>
	<abstract>This paper describes a technique designed to ease the use of a data processing system by a  person, in particular, a scientist, who is intimately and primarily concerned with interpreting the significance  of data handled by the system.  Since such a person is often unable to spend the time necessary to master  a programming language, it is essential that he be aided in composing commands to the computer.  In the  system described, the user is not required to learn or remember the vocabulary of the language because  the vocabulary is displayed before him on"menus" by means of a computer-drive scope.  He selects the  various vocabulary elements required by pointing with the light pen.  By use of a small unordered set  of rewriting rules applied as a result of light pen selections, the user generates only syntactically correct commands to the system.  He does not have to learn or remember the grammar.  The program restricts  the user severely in the particular language he can use, but the method for communicating with the program  makes these restrictions seem quite natural and unconstraining.  The program has been used successfully  for over ten months.</abstract>
	<conference>CACM February, 1965</conference>
	<authors>
	<author>Goodenough, J. B.</author>
	</authors>
	<location>CA650217 JB March 7, 1978  10:40 PM</location>
	<citations>
	<citation>1307	5	1307</citation>
	<citation>1307	5	1307</citation>
	<citation>1307	5	1307</citation>
	<citation>1978	5	1307</citation>
	<citation>1307	6	1307</citation>
	<citation>1589	6	1307</citation>
	<citation>1813	6	1307</citation>
	</citations>
	</document>
	<document id= '1306'>
	<title>A Class of Unambiguous Computer Languages</title>
	<abstract>Discussed in this paper is the concept of a fully nested computer language which may be one  means of designing computer languages which would be completely free of ambiguities.  Several suggestions  are also given here for the redefinition of ALGOL as a fully nested language.</abstract>
	<conference>CACM March, 1965</conference>
	<authors>
	<author>Johnston, J. B.</author>
	</authors>
	<location>CA650301 JB March 7, 1978  6:26 PM</location>
	<citations>
	<citation>249	4	1306</citation>
	<citation>254	4	1306</citation>
	<citation>272	4	1306</citation>
	<citation>1102	4	1306</citation>
	<citation>1109	4	1306</citation>
	<citation>1140	4	1306</citation>
	<citation>1188	4	1306</citation>
	<citation>1306	4	1306</citation>
	<citation>1306	4	1306</citation>
	<citation>1464	4	1306</citation>
	<citation>1491	4	1306</citation>
	<citation>1767	4	1306</citation>
	<citation>1781	4	1306</citation>
	<citation>1781	4	1306</citation>
	<citation>1787	4	1306</citation>
	<citation>1949	4	1306</citation>
	<citation>321	4	1306</citation>
	<citation>2059	4	1306</citation>
	<citation>2126	4	1306</citation>
	<citation>435	4	1306</citation>
	<citation>437	4	1306</citation>
	<citation>463	4	1306</citation>
	<citation>483	4	1306</citation>
	<citation>491	4	1306</citation>
	<citation>2732	4	1306</citation>
	<citation>560	4	1306</citation>
	<citation>583	4	1306</citation>
	<citation>3073	4	1306</citation>
	<citation>627	4	1306</citation>
	<citation>631	4	1306</citation>
	<citation>632	4	1306</citation>
	<citation>642	4	1306</citation>
	<citation>644	4	1306</citation>
	<citation>653	4	1306</citation>
	<citation>680	4	1306</citation>
	<citation>761	4	1306</citation>
	<citation>762	4	1306</citation>
	<citation>763	4	1306</citation>
	<citation>123	4	1306</citation>
	<citation>140	4	1306</citation>
	<citation>919	4	1306</citation>
	<citation>989	4	1306</citation>
	<citation>196	5	1306</citation>
	<citation>1306	5	1306</citation>
	<citation>1306	5	1306</citation>
	<citation>1306	5	1306</citation>
	<citation>463	5	1306</citation>
	</citations>
	</document>
	<document id= '1305'>
	<title>The Internal Structure of the FORTRAN CEP Translator</title>
	<abstract>The FORTRAN CEP translator converts a source program written in the FORTRAN CEP language into  an object program written in the language of the CEP computer.  In this paper, after an outline of the  CEP computer, the internal structure of the translator is described.  Emphasis is on the compilation  of expressions, of input/output lists, and of subscripted variables.</abstract>
	<conference>CACM March, 1965</conference>
	<authors>
	<author>Mancino, O. G.</author>
	<author>Cecchi, M. M.</author>
	</authors>
	<location>CA650302 JB March 7, 1978  6:23 PM</location>
	<citations>
	<citation>1305	4	1305</citation>
	<citation>1035	5	1305</citation>
	<citation>1305	5	1305</citation>
	<citation>1305	5	1305</citation>
	<citation>1305	5	1305</citation>
	</citations>
	</document>
	<document id= '1304'>
	<title>A Rapid Turnaround Multi-Programming System</title>
	<abstract>In this paper, basic features, system characteristics and the control algorithm for a multi-programming  system with rapid turnaround time are described.</abstract>
	<conference>CACM March, 1965</conference>
	<authors>
	<author>Irons, E. T.</author>
	</authors>
	<location>CA650303 JB March 7, 1978  6:19 PM</location>
	<citations>
	<citation>1304	5	1304</citation>
	<citation>1304	5	1304</citation>
	<citation>1304	5	1304</citation>
	<citation>1550	5	1304</citation>
	<citation>1304	6	1304</citation>
	<citation>1472	6	1304</citation>
	</citations>
	</document>
	<document id= '1303'>
	<citations>
	<citation>1303	5	1303</citation>
	<citation>1303	5	1303</citation>
	<citation>1303	5	1303</citation>
	<citation>1469	5	1303</citation>
	<citation>1486	5	1303</citation>
	<citation>1491	5	1303</citation>
	<citation>1781	5	1303</citation>
	<citation>2178	5	1303</citation>
	<citation>2326	5	1303</citation>
	<citation>2470	5	1303</citation>
	<citation>2684	5	1303</citation>
	<citation>3044	5	1303</citation>
	<citation>123	6	1303</citation>
	<citation>196	6	1303</citation>
	<citation>196	6	1303</citation>
	<citation>919	6	1303</citation>
	<citation>990	6	1303</citation>
	<citation>1007	6	1303</citation>
	<citation>1046	6	1303</citation>
	<citation>1131	6	1303</citation>
	<citation>1139	6	1303</citation>
	<citation>1140	6	1303</citation>
	<citation>1140	6	1303</citation>
	<citation>1149	6	1303</citation>
	<citation>1198	6	1303</citation>
	<citation>1215	6	1303</citation>
	<citation>1223	6	1303</citation>
	<citation>1265	6	1303</citation>
	<citation>1303	6	1303</citation>
	<citation>1303	6	1303</citation>
	<citation>1303	6	1303</citation>
	<citation>1303	6	1303</citation>
	<citation>1303	6	1303</citation>
	<citation>1303	6	1303</citation>
	<citation>1303	6	1303</citation>
	<citation>1303	6	1303</citation>
	<citation>1303	6	1303</citation>
	<citation>1323	6	1303</citation>
	<citation>1323	6	1303</citation>
	<citation>1323	6	1303</citation>
	<citation>1323	6	1303</citation>
	<citation>1358	6	1303</citation>
	<citation>1366	6	1303</citation>
	<citation>1421	6	1303</citation>
	<citation>1460	6	1303</citation>
	<citation>1462	6	1303</citation>
	<citation>1463	6	1303</citation>
	<citation>1467	6	1303</citation>
	<citation>1468	6	1303</citation>
	<citation>1469	6	1303</citation>
	<citation>1477	6	1303</citation>
	<citation>1491	6	1303</citation>
	<citation>1496	6	1303</citation>
	<citation>1531	6	1303</citation>
	<citation>1535	6	1303</citation>
	<citation>1565	6	1303</citation>
	<citation>1601	6	1303</citation>
	<citation>1602	6	1303</citation>
	<citation>1613	6	1303</citation>
	<citation>1614	6	1303</citation>
	<citation>1626	6	1303</citation>
	<citation>1641	6	1303</citation>
	<citation>1787	6	1303</citation>
	<citation>1788	6	1303</citation>
	<citation>205	6	1303</citation>
	<citation>210	6	1303</citation>
	<citation>1834	6	1303</citation>
	<citation>1834	6	1303</citation>
	<citation>224	6	1303</citation>
	<citation>249	6	1303</citation>
	<citation>288	6	1303</citation>
	<citation>316	6	1303</citation>
	<citation>381	6	1303</citation>
	<citation>398	6	1303</citation>
	<citation>2059	6	1303</citation>
	<citation>11	6	1303</citation>
	<citation>2127	6	1303</citation>
	<citation>2192	6	1303</citation>
	<citation>2264	6	1303</citation>
	<citation>404	6	1303</citation>
	<citation>410	6	1303</citation>
	<citation>463	6	1303</citation>
	<citation>464	6	1303</citation>
	<citation>483	6	1303</citation>
	<citation>3184	6	1303</citation>
	<citation>3184	6	1303</citation>
	<citation>3184	6	1303</citation>
	<citation>3184	6	1303</citation>
	<citation>3186	6	1303</citation>
	<citation>3188	6	1303</citation>
	<citation>584	6	1303</citation>
	<citation>600	6	1303</citation>
	<citation>680	6	1303</citation>
	<citation>691	6	1303</citation>
	<citation>729	6	1303</citation>
	<citation>763	6	1303</citation>
	<citation>799	6	1303</citation>
	</citations>
	<title>A Correspondence Between ALGOL 60 and Church's Lambda-Notation: Part II*</title>
	<conference>CACM March, 1965</conference>
	<authors>
	<author>Landin, P. J.</author>
	</authors>
	<location>CA650304 JB March 7, 1978  6:09 PM</location>
	</document>
	<document id= '1302'>
	<citations>
	<citation>1302	5	1302</citation>
	<citation>1302	5	1302</citation>
	<citation>1302	5	1302</citation>
	</citations>
	<title>Parallel Signaling Speeds for Data Transmission (Proposed American Stand ard)</title>
	<conference>CACM March, 1965</conference>
	<location>CA650305 JB March 7, 1978  6:08 PM</location>
	</document>
	<document id= '1301'>
	<citations>
	<citation>1301	5	1301</citation>
	<citation>1301	5	1301</citation>
	<citation>1301	5	1301</citation>
	</citations>
	<title>On ALGOL I/O Conventions</title>
	<conference>CACM March, 1965</conference>
	<authors>
	<author>Zaremba, W. A.</author>
	</authors>
	<location>CA650306 JB March 7, 1978  6:06 PM</location>
	</document>
	<document id= '1300'>
	<citations>
	<citation>1300	5	1300</citation>
	<citation>1300	5	1300</citation>
	<citation>1300	5	1300</citation>
	</citations>
	<title>Function Minimization (Algorithm 251[E4])</title>
	<conference>CACM March, 1965</conference>
	<authors>
	<author>Wells, M.</author>
	</authors>
	<location>CA650307 JB March 7, 1978  6:05 PM</location>
	</document>
	<document id= '1299'>
	<citations>
	<citation>1299	5	1299</citation>
	<citation>1299	5	1299</citation>
	<citation>1299	5	1299</citation>
	</citations>
	<title>Solutions of the Diophantine Equation (Algorithm 139 [A1])</title>
	<conference>CACM March, 1965</conference>
	<authors>
	<author>Bowlden, H. J.</author>
	</authors>
	<location>CA650308 JB March 7, 1978  6:04 PM</location>
	</document>
	<document id= '1298'>
	<citations>
	<citation>1298	5	1298</citation>
	<citation>1298	5	1298</citation>
	<citation>1298	5	1298</citation>
	<citation>2093	5	1298</citation>
	<citation>834	6	1298</citation>
	<citation>872	6	1298</citation>
	<citation>1092	6	1298</citation>
	<citation>1298	6	1298</citation>
	<citation>1573	6	1298</citation>
	<citation>429	6	1298</citation>
	</citations>
	<title>Adaptive Numerical Integration by Simpson's Rule (Algorithm 145 [D1])</title>
	<conference>CACM March, 1965</conference>
	<authors>
	<author>Pike, M. C.</author>
	</authors>
	<location>CA650309 JB March 7, 1978  6:03 PM</location>
	</document>
	<document id= '1297'>
	<citations>
	<citation>1297	5	1297</citation>
	<citation>1297	5	1297</citation>
	<citation>1297	5	1297</citation>
	</citations>
	<title>Steep1 (Algorithm 203 [E4])</title>
	<conference>CACM March, 1965</conference>
	<authors>
	<author>Varah, J. M.</author>
	</authors>
	<location>CA650310 JB March 7, 1978  6:02 PM</location>
	</document>
	<document id= '1296'>
	<citations>
	<citation>1296	5	1296</citation>
	<citation>1296	5	1296</citation>
	<citation>1296	5	1296</citation>
	</citations>
	<title>Ative (Algorithm 205 [E4])</title>
	<conference>CACM March, 1965</conference>
	<authors>
	<author>Wasscher, E. J.</author>
	</authors>
	<location>CA650311 JB March 7, 1978  6:01 PM</location>
	</document>
	<document id= '1295'>
	<title>PERT Time Calculations Without Topological Ordering</title>
	<abstract>A simplified technique is presented for PERT Time calculations without topological ordering.   Each event is assigned a unique memory location.  An activity is represented by a link.  A link is defined  as a memory location containing the address of another memory location.  The time information for an  activity is carried with its link.  For a typical net, the majority of activities can be described by  one 36-bit cell each.  The remainder use two 36-bit cells each.  The links are unidirectional; forward  during the T(E) calculation (expected completion time for an activity);backward during the T(L) calculation  (time latest allowable for completion of an activity).  The calculations progress through the net topologically  even though the net is not represented topologically in core.</abstract>
	<conference>CACM March, 1965</conference>
	<authors>
	<author>Lass, S. E.</author>
	</authors>
	<location>CA650312 JB March 7, 1978  6:00 PM</location>
	<citations>
	<citation>1295	5	1295</citation>
	<citation>1295	5	1295</citation>
	<citation>1295	5	1295</citation>
	<citation>1611	5	1295</citation>
	<citation>1295	6	1295</citation>
	<citation>340	6	1295</citation>
	</citations>
	</document>
	<document id= '1294'>
	<title>Note on Triple-Precision Floating-Point Arithmetic with 132-Bit Numbers</title>
	<abstract>In a recent paper, Gregory and Raney described a technique for double-precision floating-point  arithmetic.  A similar technique can be developed for triple-precision floating-point arithmetic and  it is  the purpose of this note to describe this technique.  Only the multiplication and the division  algorithms are described, since the addition-subtraction algorithm can be obtained by a trivial modification  of the algorithm in Gregory's and Raney's paper.</abstract>
	<conference>CACM March, 1965</conference>
	<authors>
	<author>Ikebe, Y.</author>
	</authors>
	<location>CA650313 JB March 7, 1978  5:54 PM</location>
	<citations>
	<citation>1294	4	1294</citation>
	<citation>1152	5	1294</citation>
	<citation>1294	5	1294</citation>
	<citation>1294	5	1294</citation>
	<citation>1294	5	1294</citation>
	</citations>
	</document>
	<document id= '1293'>
	<title>Method is Randomness</title>
	<abstract>Certain nonrandom properties of a commonly used random number generator are described and analyzed.</abstract>
	<conference>CACM March, 1965</conference>
	<authors>
	<author>Greenberger, M.</author>
	</authors>
	<location>CA650314 JB March 7, 1978  4:18 PM</location>
	<citations>
	<citation>1293	5	1293</citation>
	<citation>1293	5	1293</citation>
	<citation>1293	5	1293</citation>
	<citation>1674	5	1293</citation>
	<citation>1691	5	1293</citation>
	<citation>1293	6	1293</citation>
	<citation>1293	6	1293</citation>
	<citation>1420	6	1293</citation>
	<citation>1631	6	1293</citation>
	</citations>
	</document>
	<document id= '1292'>
	<title>On a Divide-and-Correct Method For Variable Precision Division</title>
	<abstract>Described in this paper is a divide-and-correct method for variable precision division in digital  computers.  Unlike the earlier methods of Stein and Pope, the present method uses a suitably rounded  form of the normalized divisor for getting an estimate of the quotient characters.  This results in a  correction of at most plus or minus one to the estimate, to obtain the exact quotient character.  It  is believed that this method will be widely applicable for division operations in variable word-length  character-oriented machines.</abstract>
	<conference>CACM March, 1965</conference>
	<authors>
	<author>Krishnamurthy, E. V.</author>
	</authors>
	<location>CA650315JB March 7, 1978  4:16 PM</location>
	<citations>
	<citation>1026	4	1292</citation>
	<citation>1258	4	1292</citation>
	<citation>1258	4	1292</citation>
	<citation>1292	4	1292</citation>
	<citation>1292	4	1292</citation>
	<citation>1497	4	1292</citation>
	<citation>1497	4	1292</citation>
	<citation>1975	4	1292</citation>
	<citation>2605	4	1292</citation>
	<citation>107	5	1292</citation>
	<citation>1026	5	1292</citation>
	<citation>1292	5	1292</citation>
	<citation>1292	5	1292</citation>
	<citation>1292	5	1292</citation>
	<citation>1497	5	1292</citation>
	<citation>1593	5	1292</citation>
	<citation>1975	5	1292</citation>
	<citation>107	6	1292</citation>
	<citation>1026	6	1292</citation>
	<citation>1026	6	1292</citation>
	<citation>1292	6	1292</citation>
	<citation>1292	6	1292</citation>
	<citation>1292	6	1292</citation>
	<citation>1497	6	1292</citation>
	<citation>1593	6	1292</citation>
	<citation>91	6	1292</citation>
	</citations>
	</document>
	<document id= '1291'>
	<citations>
	<citation>1291	5	1291</citation>
	<citation>1291	5	1291</citation>
	<citation>1291	5	1291</citation>
	</citations>
	<title>Tabular Input of Data</title>
	<conference>CACM March, 1965</conference>
	<authors>
	<author>George, R.</author>
	</authors>
	<location>CA650316 JB March 7, 1978  4:11 PM</location>
	</document>
	<document id= '1290'>
	<citations>
	<citation>1290	5	1290</citation>
	<citation>1290	5	1290</citation>
	<citation>1290	5	1290</citation>
	</citations>
	<title>Transparent-Mode Control Procedures for Data Communication, Using the American Standard Code  for Information Interchange -A Tutorial</title>
	<abstract>This paper gives the considerations of Task Group X3.3.4 in the area of transparent-mode data  communication control philosophy.  The appearance of this paper was forecast (underthe name of "second-level  control") in the earlier tutorial paper, "Control Procedures for Data Communications," Task Group document  X3.3.4.44, dated May 1964.  The present paper elaborates upon solutions to the problems of transparency  to the basic ASCII communication control characters as outlined in the previous paper mentioned above.   Moreover, it goes on to cover the additional control problems of handling material such as off line encrypted  data or non-ASCII codes by means of systems providing complete character transparency.  It does not cover  concepts of transparency in which the normal character structure or modulation rate of a system may be  abandoned.  In conjunction with the earlier tutorial paper, this paper is expected to lead to a proposal  for stand ardizationof data communication control procedures using the American Stand ard Code for Information  Interchange.</abstract>
	<conference>CACM April, 1965</conference>
	<location>CA650401 JB March 7, 1978  4:10 PM</location>
	</document>
	<document id= '1289'>
	<citations>
	<citation>1289	5	1289</citation>
	<citation>1289	5	1289</citation>
	<citation>1289	5	1289</citation>
	</citations>
	<title>Proposed Revised American Standard Code for Information Interchange</title>
	<conference>CACM April, 1965</conference>
	<location>CA650402 JB March 7, 1978  4:03 PM</location>
	</document>
	<document id= '1288'>
	<title>CLP-The Cornell List Processor</title>
	<abstract>Presented in this paper are the highlights of CLP, a teaching language which has been employed  at Cornell University and was constructed to serve as a means of introducing simulation and other list-processing  concepts.  The various advantages of CLP are discussed and examples are given.</abstract>
	<conference>CACM April, 1965</conference>
	<authors>
	<author>Conway, R. W.</author>
	<author>Delfausse, J. J.</author>
	<author>Maxwell, W. L.</author>
	<author>Walker, W. E.</author>
	</authors>
	<location>CA650403 JB March 7, 1978  4:02 PM</location>
	<citations>
	<citation>1179	4	1288</citation>
	<citation>1288	4	1288</citation>
	<citation>1544	4	1288</citation>
	<citation>1646	4	1288</citation>
	<citation>2111	4	1288</citation>
	<citation>2534	4	1288</citation>
	<citation>2556	4	1288</citation>
	<citation>2650	4	1288</citation>
	<citation>1288	5	1288</citation>
	<citation>1288	5	1288</citation>
	<citation>1288	5	1288</citation>
	<citation>830	5	1288</citation>
	</citations>
	</document>
	<document id= '1287'>
	<citations>
	<citation>1287	5	1287</citation>
	<citation>1287	5	1287</citation>
	<citation>1287	5	1287</citation>
	</citations>
	<title>Vector Coupling or Clebsch-Gordan Coefficients (Algorithm 252 [Z])</title>
	<conference>CACM April, 1965</conference>
	<authors>
	<author>Gunn, J. H.</author>
	</authors>
	<location>CA650404 JB March 7, 1978  3:58 PM</location>
	</document>
	<document id= '1286'>
	<citations>
	<citation>1286	5	1286</citation>
	<citation>1286	5	1286</citation>
	<citation>1286	5	1286</citation>
	</citations>
	<title>Eigenvalues of a Real Symmetric Matrix by the QR Method (Algorithm 253 [F2])</title>
	<conference>CACM April, 1965</conference>
	<authors>
	<author>Businger, P. A.</author>
	</authors>
	<location>CA650405 JB March 7, 1978  3:56 PM</location>
	</document>
	<document id= '1285'>
	<citations>
	<citation>1285	5	1285</citation>
	<citation>1285	5	1285</citation>
	<citation>1285	5	1285</citation>
	</citations>
	<title>Eigenvalues and Eigenvectors of a Real Symmetric Matrix by the QR Method (Algorithm 254 [F2])</title>
	<conference>CACM April, 1965</conference>
	<authors>
	<author>Businger, P. A.</author>
	</authors>
	<location>CA650406 JB March 7, 1978  3:55 PM</location>
	</document>
	<document id= '1284'>
	<citations>
	<citation>1284	5	1284</citation>
	<citation>1284	5	1284</citation>
	<citation>1284	5	1284</citation>
	<citation>1909	5	1284</citation>
	<citation>134	6	1284</citation>
	<citation>1023	6	1284</citation>
	<citation>1284	6	1284</citation>
	<citation>1316	6	1284</citation>
	</citations>
	<title>Bessel Function for a Set of Integer Orders</title>
	<conference>CACM April,1965</conference>
	<authors>
	<author>Stafford, J.</author>
	</authors>
	<location>CA650407 JB March 7, 1978  3:54 PM</location>
	</document>
	<document id= '1283'>
	<citations>
	<citation>1283	5	1283</citation>
	<citation>1283	5	1283</citation>
	<citation>1283	5	1283</citation>
	</citations>
	<title>Matrix Inversion (Algorithm 231 [F1])</title>
	<conference>CACM April, 1965</conference>
	<authors>
	<author>Ferring, M.</author>
	</authors>
	<location>CA650408 JB March 7, 1978  3:53 PM</location>
	</document>
	<document id= '1282'>
	<title>The Use of FORTRAN in Subroutines with COBOL Main Programs</title>
	<abstract>By using the proper COBOL coding techniques and accounting for differences in storage allocation  and library routines between the two languages, it is possible to write FORTRAN IV subroutines that may  be called from COBOL main programs.  Such a technique enables the programmer to take advantage of the  most useful properties of each language while minimizing their respective disadvantages.</abstract>
	<conference>CACM April, 1965</conference>
	<authors>
	<author>Shavell, Z. A.</author>
	</authors>
	<location>CA650409 JB March 7, 1978  3:52 PM</location>
	<citations>
	<citation>1282	5	1282</citation>
	<citation>1282	5	1282</citation>
	<citation>1282	5	1282</citation>
	</citations>
	</document>
	<document id= '1281'>
	<title>Data Input by Question and Answer</title>
	<abstract>A data input scheme for a time-sharing computer is described in this paper.  Instead of using format statements to determine the input, the computer asks the user for the required values one at a  time.  The computer converses with the user during the input process, checks for errors, provides standard  data, and allows editing of values input.</abstract>
	<conference>CACM April, 1965</conference>
	<authors>
	<author>Pyle, I. C.</author>
	</authors>
	<location>CA650410 JB March 7, 1978  3:48 PM</location>
	<citations>
	<citation>1281	5	1281</citation>
	<citation>1281	5	1281</citation>
	<citation>1281	5	1281</citation>
	</citations>
	</document>
	<document id= '1280'>
	<title>Numerical Integration of a Differential-Difference Equation with a Decreasing Time-Lag</title>
	<abstract>Systems in which variable time-lags are present are of common occurrence in biology.  Variable  flow rates are a common cause of these variable lags.  At present no extensive body of knowledge exists  concerning the effects which these variable lags can cause.  Shown here is a method of reducing some  differential-difference equations to ordinary differential equations which can then be studied numerically  with ease.  Subsequent study will deal with situations in which multiple-lags and lags dependent on the  solution itself are present.</abstract>
	<conference>CACM April, 1965</conference>
	<authors>
	<author>Bellman, R. E.</author>
	<author>Buell, J. D.</author>
	<author>Kalaba, R. E.</author>
	</authors>
	<location>CA650411 JB March 7, 1978  3:46 PM</location>
	<citations>
	<citation>1280	5	1280</citation>
	<citation>1280	5	1280</citation>
	<citation>1280	5	1280</citation>
	<citation>1364	5	1280</citation>
	<citation>1280	6	1280</citation>
	</citations>
	</document>
	<document id= '1279'>
	<title>Use of a Conditional Base Number System for Encoding Sequences of Correlated Characters</title>
	<abstract>A procedure is described for the relatively efficient encoding of sequences of characters which  have predecessor-successor selection rules.  The procedure is shown to assign a unique integer to each  sequence and to generate a reasonably compact set of values.</abstract>
	<conference>CACM April, 1965</conference>
	<authors>
	<author>Brown, R. M.</author>
	</authors>
	<location>CA650412 JB March 7, 1978  3:42 PM</location>
	<citations>
	<citation>1279	5	1279</citation>
	<citation>1279	5	1279</citation>
	<citation>1279	5	1279</citation>
	</citations>
	</document>
	<document id= '1278'>
	<title>Wengert's Numerical Method for Partial Derivatives, Orbit Determination and Quasilinearization</title>
	<abstract>In a recent article in the Communications of the ACM, R. Wengert suggested a technique for  machine evaluation of the partial derivatives of a function given in analytical form.  In solving non-linear  boundary-value problems using quasilinearization many partial derivatives must be formed analytically  and then evaluated numerically.  Wengert's method appears very attractive from the programming viewpoint  equations which might not otherwise be undertaken.</abstract>
	<conference>CACM April, 1965</conference>
	<authors>
	<author>Bellman, R. E.</author>
	<author>Kagiwada, H.</author>
	<author>Kalaba, R. E.</author>
	</authors>
	<location>CA650413 JB March 7, 1978  3:39 PM</location>
	<citations>
	<citation>1028	4	1278</citation>
	<citation>1216	4	1278</citation>
	<citation>1216	4	1278</citation>
	<citation>1278	4	1278</citation>
	<citation>1278	4	1278</citation>
	<citation>1278	4	1278</citation>
	<citation>1347	4	1278</citation>
	<citation>1347	4	1278</citation>
	<citation>1396	4	1278</citation>
	<citation>1396	4	1278</citation>
	<citation>1536	4	1278</citation>
	<citation>973	5	1278</citation>
	<citation>1028	5	1278</citation>
	<citation>1029	5	1278</citation>
	<citation>1278	5	1278</citation>
	<citation>1278	5	1278</citation>
	<citation>1278	5	1278</citation>
	<citation>1347	5	1278</citation>
	<citation>1396	5	1278</citation>
	<citation>964	6	1278</citation>
	<citation>1028	6	1278</citation>
	<citation>1028	6	1278</citation>
	<citation>1029	6	1278</citation>
	<citation>1029	6	1278</citation>
	<citation>1083	6	1278</citation>
	<citation>1132	6	1278</citation>
	<citation>1214	6	1278</citation>
	<citation>1278	6	1278</citation>
	<citation>1278	6	1278</citation>
	<citation>1334	6	1278</citation>
	<citation>1365	6	1278</citation>
	<citation>1386	6	1278</citation>
	<citation>1387	6	1278</citation>
	<citation>1388	6	1278</citation>
	<citation>1392	6	1278</citation>
	<citation>1393	6	1278</citation>
	<citation>1394	6	1278</citation>
	<citation>1395	6	1278</citation>
	<citation>1396	6	1278</citation>
	<citation>1397	6	1278</citation>
	<citation>1496	6	1278</citation>
	<citation>284	6	1278</citation>
	<citation>407	6	1278</citation>
	<citation>3199	6	1278</citation>
	<citation>3200	6	1278</citation>
	<citation>3201	6	1278</citation>
	<citation>3202	6	1278</citation>
	<citation>3203	6	1278</citation>
	<citation>3204	6	1278</citation>
	<citation>561	6	1278</citation>
	<citation>730	6	1278</citation>
	</citations>
	</document>
	<document id= '1277'>
	<citations>
	<citation>1277	5	1277</citation>
	<citation>1277	5	1277</citation>
	<citation>1277	5	1277</citation>
	</citations>
	<title>The Use of Cobol Subroutines in Fortran Main Programs</title>
	<conference>CACM April, 1965</conference>
	<authors>
	<author>Tajiri, K.</author>
	</authors>
	<location>CA650414 JB March 7, 1978  3:34 PM</location>
	</document>
	<document id= '1276'>
	<citations>
	<citation>1276	5	1276</citation>
	<citation>1276	5	1276</citation>
	<citation>1276	5	1276</citation>
	</citations>
	<title>Still Another Use for FORTRAN II Chaining</title>
	<conference>CACM April, 1965</conference>
	<location>CA650415 JB March 7, 1978  3:32 PM</location>
	</document>
	<document id= '1275'>
	<citations>
	<citation>1275	5	1275</citation>
	<citation>1275	5	1275</citation>
	<citation>1275	5	1275</citation>
	</citations>
	<title>Code Structures for Protection and Manipulation of Variable Length Items (Corrigendum)</title>
	<conference>CACM April, 1965</conference>
	<authors>
	<author>Ramamoorthy, C. V.</author>
	</authors>
	<location>CA650416 JB March 7, 1978  3:31 PM</location>
	</document>
	<document id= '1274'>
	<title>On the Numerical Solution of an N-Point Boundary Value Problem for Linear Ordinary Differential  Equations</title>
	<abstract>A method for the numerical solution of then-point boundary value problem for homogeneous linear  ordinary differential equations is developed.  The method requires two Runge-Kutta integrations over  the interval under consideration and the solution of a linear system of equations with n-1 unknowns.</abstract>
	<conference>CACM April, 1965</conference>
	<authors>
	<author>Day, J. T.</author>
	</authors>
	<location>CA650417 JB March 7, 1978  3:30 PM</location>
	<citations>
	<citation>1274	4	1274</citation>
	<citation>1147	5	1274</citation>
	<citation>1274	5	1274</citation>
	<citation>1274	5	1274</citation>
	<citation>1274	5	1274</citation>
	</citations>
	</document>
	<document id= '1273'>
	<title>Remark on Romberg Quadrature</title>
	<abstract>A modified form of Romberg quadrature is described, which is less sensitive to the accumulation  of rounding errors than the customary one.</abstract>
	<conference>CACM April, 1965</conference>
	<authors>
	<author>Krasun, A. M.</author>
	<author>Prager, W.</author>
	</authors>
	<location>CA650418 JB March 7, 1978  3:27 PM</location>
	<citations>
	<citation>1273	5	1273</citation>
	<citation>1273	5	1273</citation>
	<citation>1273	5	1273</citation>
	<citation>1352	5	1273</citation>
	<citation>1982	5	1273</citation>
	<citation>2040	5	1273</citation>
	<citation>1	6	1273</citation>
	<citation>834	6	1273</citation>
	<citation>872	6	1273</citation>
	<citation>1040	6	1273</citation>
	<citation>1092	6	1273</citation>
	<citation>1241	6	1273</citation>
	<citation>1241	6	1273</citation>
	<citation>1273	6	1273</citation>
	<citation>1273	6	1273</citation>
	<citation>1273	6	1273</citation>
	<citation>1352	6	1273</citation>
	<citation>1356	6	1273</citation>
	<citation>1883	6	1273</citation>
	<citation>324	6	1273</citation>
	<citation>324	6	1273</citation>
	<citation>324	6	1273</citation>
	<citation>429	6	1273</citation>
	<citation>570	6	1273</citation>
	<citation>621	6	1273</citation>
	<citation>621	6	1273</citation>
	<citation>786	6	1273</citation>
	</citations>
	</document>
	<document id= '1272'>
	<title>Expanding the Editing Function In Language Data Processing</title>
	<abstract>In automatic abstracting, citation indexing, mechanical translation and other such procedures,  editing is required whenever the automatic method leaves something to be desired.  This paper discusses  the economy of editing as a function of the amount of condensation of text in language processing operations,  and then contends that editing can be regarded as an opportunity rather than as an unwelcome necessity.   "Heavy editing," which goes beyond mere correction and improvement of computer output, is exemplified  by the use of a concordance in preparing a survey article or lecture.  Other opportunities for heavy  editing are described, chief among them being interpretation and expansion of computer output in such  processes as factor analysis.  Applications are described, such processes as factor analysis.  Applications  are described, such as the quick, unbiased evaluation of a large volume of incoming mail or telegrams,  yielding summary reports not possible for either humans or computers to produce alone.</abstract>
	<conference>CACM April, 1965</conference>
	<authors>
	<author>Doule, L. B.</author>
	</authors>
	<location>CA650419 JB March 7, 1978  3:26 PM</location>
	<citations>
	<citation>1272	5	1272</citation>
	<citation>1272	5	1272</citation>
	<citation>1272	5	1272</citation>
	</citations>
	</document>
	<document id= '1271'>
	<title>Secondary Key Retrieval Using an IBM 7090-1301 System</title>
	<abstract>The secondary key retrieval method involves the preparation of secondary storage lists from  primary data records. Search requests are satisfied by logical operations on appropriate lists, producing  a complete set of addresses of primary records relevant to the request.  Experimental results are presented  and a comparative analysis is given.</abstract>
	<conference>CACM April, 1965</conference>
	<authors>
	<author>Davis, D. R.</author>
	<author>Lin, A. D.</author>
	</authors>
	<location>CA650420 JB March 7, 1978  3:18 PM</location>
	<citations>
	<citation>1271	4	1271</citation>
	<citation>1785	4	1271</citation>
	<citation>2543	4	1271</citation>
	<citation>2552	4	1271</citation>
	<citation>911	4	1271</citation>
	<citation>1271	5	1271</citation>
	<citation>1271	5	1271</citation>
	<citation>1271	5	1271</citation>
	<citation>1976	5	1271</citation>
	<citation>332	5	1271</citation>
	<citation>1271	6	1271</citation>
	</citations>
	</document>
	<document id= '1270'>
	<title>On ALGOL Education: Automatic Grading Programs</title>
	<abstract>Two ALGOL grader programs are presented for the computer evaluation of student ALGOL programs.  One is for a beginner's program; it furnishes random data and checks answers. The other provides a searching  test of the reliability and efficiency of an integration procedure.  There is a statement of the essential  properties of a computer system, in order that grader programs can be effectively used.</abstract>
	<conference>CACM May, 1965</conference>
	<authors>
	<author>Forsythe, G. E.</author>
	<author>Wirth, N.</author>
	</authors>
	<location>CA650501 JB March 7, 1978  3:16 PM</location>
	<citations>
	<citation>1086	4	1270</citation>
	<citation>1132	4	1270</citation>
	<citation>1234	4	1270</citation>
	<citation>1263	4	1270</citation>
	<citation>1265	4	1270</citation>
	<citation>1270	4	1270</citation>
	<citation>1270	4	1270</citation>
	<citation>1323	4	1270</citation>
	<citation>1358	4	1270</citation>
	<citation>1379	4	1270</citation>
	<citation>1380	4	1270</citation>
	<citation>1453	4	1270</citation>
	<citation>1464	4	1270</citation>
	<citation>1484	4	1270</citation>
	<citation>1491	4	1270</citation>
	<citation>1498	4	1270</citation>
	<citation>1613	4	1270</citation>
	<citation>1614	4	1270</citation>
	<citation>1781	4	1270</citation>
	<citation>1825	4	1270</citation>
	<citation>1860	4	1270</citation>
	<citation>1902	4	1270</citation>
	<citation>2083	4	1270</citation>
	<citation>2178	4	1270</citation>
	<citation>2179	4	1270</citation>
	<citation>2252	4	1270</citation>
	<citation>2325	4	1270</citation>
	<citation>2341	4	1270</citation>
	<citation>2546	4	1270</citation>
	<citation>2645	4	1270</citation>
	<citation>2652	4	1270</citation>
	<citation>2684	4	1270</citation>
	<citation>2842	4	1270</citation>
	<citation>2929	4	1270</citation>
	<citation>2934	4	1270</citation>
	<citation>3069	4	1270</citation>
	<citation>669	4	1270</citation>
	<citation>679	4	1270</citation>
	<citation>691	4	1270</citation>
	<citation>761	4	1270</citation>
	<citation>949	4	1270</citation>
	<citation>989	4	1270</citation>
	<citation>145	5	1270</citation>
	<citation>1270	5	1270</citation>
	<citation>1270	5	1270</citation>
	<citation>1270	5	1270</citation>
	<citation>1413	5	1270</citation>
	<citation>1902	5	1270</citation>
	<citation>3184	5	1270</citation>
	<citation>145	6	1270</citation>
	<citation>1205	6	1270</citation>
	<citation>1270	6	1270</citation>
	<citation>1270	6	1270</citation>
	</citations>
	</document>
	<document id= '1269'>
	<citations>
	<citation>1269	5	1269</citation>
	<citation>1269	5	1269</citation>
	<citation>1269	5	1269</citation>
	</citations>
	<title>Computation of Fourier Coefficients (Algorithm [C6])</title>
	<conference>CACM May, 1965</conference>
	<authors>
	<author>Teijelo, L.</author>
	</authors>
	<location>CA650502 JB March 7, 1978  3:12 PM</location>
	</document>
	<document id= '1268'>
	<citations>
	<citation>1268	5	1268</citation>
	<citation>1268	5	1268</citation>
	<citation>1268	5	1268</citation>
	<citation>1858	5	1268</citation>
	<citation>1268	6	1268</citation>
	<citation>1857	6	1268</citation>
	</citations>
	<title>Logarithm of a Complex Number (Algorithm 243 [B3])</title>
	<conference>CACM May, 1965</conference>
	<authors>
	<author>Boothroyd, J.</author>
	</authors>
	<location>CA650502 JB March 7, 1978  3:11 PM</location>
	</document>
	<document id= '1267'>
	<citations>
	<citation>1267	5	1267</citation>
	<citation>1267	5	1267</citation>
	<citation>1267	5	1267</citation>
	</citations>
	<title>Performance of Systems Used for Data Transmission Transfer Rate of Information Bits -An ASA Tutorial  Standard</title>
	<abstract>Information thruput as a characteristic of systems performance is discussed.  This discussion  includes the pertinent aspects of information transfer, of determination of transfer rate of information  bits (TRIB), of residual errors, and of standard measurement conditions.  The paper also presents an  orderly arrangement of characteristics and parameters that affect information thruput, and some examples  on procedures for determining a thruput rate in terms of TRIB.  It concludes that a performance characteristic  involving information rate can best be expressed as the TRIB in conjunction with the Residual Error Rate.</abstract>
	<conference>CACM May, 1965</conference>
	<location>CA650504 JB March 7, 1978  3:10 PM</location>
	</document>
	<document id= '1266'>
	<citations>
	<citation>1266	5	1266</citation>
	<citation>1266	5	1266</citation>
	<citation>1266	5	1266</citation>
	</citations>
	<title>Considerations Relating to Purpose of FORTRAN Standardization (Appendixes to ASA FORTRAN Standard)</title>
	<conference>CACM May, 1965</conference>
	<location>CA650505 JB March 7, 1978  2:40 PM</location>
	</document>
	<document id= '1265'>
	<title>On the Relative Efficiencies of Context-Free Grammar Recognizers</title>
	<abstract>A number of diverse recognition procedures that have been proposed for parsing sentences with  respect to a context-free grammar are described in this paper by means of a common device.  Each procedure  is defined by giving an algorithm for obtaining a nondeterministic Turing Machine recognizer that is  equivalent to a given context-free grammar.  The formalization of the Turing Machine has been chosen  to make possible particularly simple description of the parsing procedures considered.  An attempt has  been made to compare recognition efficiencies for the procedures defined.  For a few simple grammars  and sentences a formal comparison has been made.  Empirical comparison of the recognition of more realistic  programming languages such as LISP and ALGOL has been made by means of a program which simulates the  Turing Machine on the Univac M-460 computer.  Several algorithms for producing grammars equivalent to  a given context-free grammar have been considered, and the increase in recognition efficiency they afford  has been empirically investigated.</abstract>
	<conference>CACM May, 1965</conference>
	<authors>
	<author>Griffiths, T. V.</author>
	<author>Petrick, S. R.</author>
	</authors>
	<location>CA650506 JB March 7, 1978  2:38 PM</location>
	<citations>
	<citation>1046	4	1265</citation>
	<citation>1062	4	1265</citation>
	<citation>1086	4	1265</citation>
	<citation>1105	4	1265</citation>
	<citation>1121	4	1265</citation>
	<citation>1132	4	1265</citation>
	<citation>1139	4	1265</citation>
	<citation>1139	4	1265</citation>
	<citation>1139	4	1265</citation>
	<citation>1140	4	1265</citation>
	<citation>1151	4	1265</citation>
	<citation>1234	4	1265</citation>
	<citation>1234	4	1265</citation>
	<citation>1263	4	1265</citation>
	<citation>1263	4	1265</citation>
	<citation>1265	4	1265</citation>
	<citation>1265	4	1265</citation>
	<citation>1265	4	1265</citation>
	<citation>1265	4	1265</citation>
	<citation>1265	4	1265</citation>
	<citation>1270	4	1265</citation>
	<citation>1323	4	1265</citation>
	<citation>1358	4	1265</citation>
	<citation>1379	4	1265</citation>
	<citation>1380	4	1265</citation>
	<citation>1453	4	1265</citation>
	<citation>1464	4	1265</citation>
	<citation>1484	4	1265</citation>
	<citation>1491	4	1265</citation>
	<citation>1496	4	1265</citation>
	<citation>1498	4	1265</citation>
	<citation>1613	4	1265</citation>
	<citation>1614	4	1265</citation>
	<citation>1665	4	1265</citation>
	<citation>1781	4	1265</citation>
	<citation>1781	4	1265</citation>
	<citation>1781	4	1265</citation>
	<citation>1824	4	1265</citation>
	<citation>1825	4	1265</citation>
	<citation>1860	4	1265</citation>
	<citation>2083	4	1265</citation>
	<citation>2126	4	1265</citation>
	<citation>2178	4	1265</citation>
	<citation>2179	4	1265</citation>
	<citation>2252	4	1265</citation>
	<citation>2325	4	1265</citation>
	<citation>2341	4	1265</citation>
	<citation>2546	4	1265</citation>
	<citation>2546	4	1265</citation>
	<citation>464	4	1265</citation>
	<citation>2645	4	1265</citation>
	<citation>2652	4	1265</citation>
	<citation>2684	4	1265</citation>
	<citation>2769	4	1265</citation>
	<citation>2842	4	1265</citation>
	<citation>2929	4	1265</citation>
	<citation>2934	4	1265</citation>
	<citation>584	4	1265</citation>
	<citation>3069	4	1265</citation>
	<citation>631	4	1265</citation>
	<citation>653	4	1265</citation>
	<citation>669	4	1265</citation>
	<citation>679	4	1265</citation>
	<citation>680	4	1265</citation>
	<citation>691	4	1265</citation>
	<citation>720	4	1265</citation>
	<citation>759	4	1265</citation>
	<citation>761	4	1265</citation>
	<citation>763	4	1265</citation>
	<citation>763	4	1265</citation>
	<citation>795	4	1265</citation>
	<citation>799	4	1265</citation>
	<citation>945	4	1265</citation>
	<citation>949	4	1265</citation>
	<citation>989	4	1265</citation>
	<citation>1265	5	1265</citation>
	<citation>1265	5	1265</citation>
	<citation>1265	5	1265</citation>
	<citation>1350	5	1265</citation>
	<citation>1399	5	1265</citation>
	<citation>1659	5	1265</citation>
	<citation>1768	5	1265</citation>
	<citation>1781	5	1265</citation>
	<citation>1945	5	1265</citation>
	<citation>2110	5	1265</citation>
	<citation>404	5	1265</citation>
	<citation>464	5	1265</citation>
	<citation>3094	5	1265</citation>
	<citation>3184	5	1265</citation>
	<citation>631	5	1265</citation>
	<citation>635	5	1265</citation>
	<citation>823	6	1265</citation>
	<citation>123	6	1265</citation>
	<citation>196	6	1265</citation>
	<citation>914	6	1265</citation>
	<citation>915	6	1265</citation>
	<citation>917	6	1265</citation>
	<citation>919	6	1265</citation>
	<citation>984	6	1265</citation>
	<citation>989	6	1265</citation>
	<citation>990	6	1265</citation>
	<citation>990	6	1265</citation>
	<citation>1007	6	1265</citation>
	<citation>1012	6	1265</citation>
	<citation>1012	6	1265</citation>
	<citation>1046	6	1265</citation>
	<citation>1084	6	1265</citation>
	<citation>1098	6	1265</citation>
	<citation>1122	6	1265</citation>
	<citation>1131	6	1265</citation>
	<citation>1138	6	1265</citation>
	<citation>1139	6	1265</citation>
	<citation>1139	6	1265</citation>
	<citation>1140	6	1265</citation>
	<citation>1141	6	1265</citation>
	<citation>1141	6	1265</citation>
	<citation>1149	6	1265</citation>
	<citation>1198	6	1265</citation>
	<citation>1200	6	1265</citation>
	<citation>1215	6	1265</citation>
	<citation>1223	6	1265</citation>
	<citation>1223	6	1265</citation>
	<citation>1225	6	1265</citation>
	<citation>1225	6	1265</citation>
	<citation>1265	6	1265</citation>
	<citation>1265	6	1265</citation>
	<citation>1265	6	1265</citation>
	<citation>1265	6	1265</citation>
	<citation>1265	6	1265</citation>
	<citation>1265	6	1265</citation>
	<citation>1265	6	1265</citation>
	<citation>1265	6	1265</citation>
	<citation>1303	6	1265</citation>
	<citation>1323	6	1265</citation>
	<citation>1336	6	1265</citation>
	<citation>1350	6	1265</citation>
	<citation>1358	6	1265</citation>
	<citation>1366	6	1265</citation>
	<citation>1396	6	1265</citation>
	<citation>1399	6	1265</citation>
	<citation>1421	6	1265</citation>
	<citation>1455	6	1265</citation>
	<citation>1460	6	1265</citation>
	<citation>1462	6	1265</citation>
	<citation>1463	6	1265</citation>
	<citation>1467	6	1265</citation>
	<citation>1468	6	1265</citation>
	<citation>1477	6	1265</citation>
	<citation>1477	6	1265</citation>
	<citation>1487	6	1265</citation>
	<citation>1491	6	1265</citation>
	<citation>1491	6	1265</citation>
	<citation>1496	6	1265</citation>
	<citation>1496	6	1265</citation>
	<citation>1531	6	1265</citation>
	<citation>1535	6	1265</citation>
	<citation>1565	6	1265</citation>
	<citation>1601	6	1265</citation>
	<citation>1602	6	1265</citation>
	<citation>1613	6	1265</citation>
	<citation>1614	6	1265</citation>
	<citation>1626	6	1265</citation>
	<citation>1641	6	1265</citation>
	<citation>1671	6	1265</citation>
	<citation>1697	6	1265</citation>
	<citation>1781	6	1265</citation>
	<citation>1781	6	1265</citation>
	<citation>1787	6	1265</citation>
	<citation>1788	6	1265</citation>
	<citation>205	6	1265</citation>
	<citation>224	6	1265</citation>
	<citation>249	6	1265</citation>
	<citation>288	6	1265</citation>
	<citation>316	6	1265</citation>
	<citation>381	6	1265</citation>
	<citation>398	6	1265</citation>
	<citation>11	6	1265</citation>
	<citation>2179	6	1265</citation>
	<citation>2645	6	1265</citation>
	<citation>404	6	1265</citation>
	<citation>410	6	1265</citation>
	<citation>463	6	1265</citation>
	<citation>464	6	1265</citation>
	<citation>483	6	1265</citation>
	<citation>483	6	1265</citation>
	<citation>3184	6	1265</citation>
	<citation>3188	6	1265</citation>
	<citation>584	6	1265</citation>
	<citation>584	6	1265</citation>
	<citation>600	6	1265</citation>
	<citation>669	6	1265</citation>
	<citation>680	6	1265</citation>
	<citation>680	6	1265</citation>
	<citation>680	6	1265</citation>
	<citation>691	6	1265</citation>
	<citation>763	6	1265</citation>
	<citation>763	6	1265</citation>
	<citation>799	6	1265</citation>
	</citations>
	</document>
	<document id= '1264'>
	<title>BLNSYS-A 1401 Operating System with Braille Capabilities</title>
	<abstract>BLNSYS is an operating system designed for a 4K 1401 with common optional features and two  attached tape drives.  Printed output of this system or of executing programs may be in either English  or braille.  Even though this system was written for a small machine with minimal peripheral equipment,  jobs may be batched, so that card handling and lost processing time is at a minimum.  This system will  perform any or all of the following users specified functions: assemble SPS source decks, post list,  produce condensed or uncondensed object decks, execute user's program, list card input to a program,  list punched output, provide a storage dump, execute a program submitted for execution as an uncondensed  object deck under debugging trace control, card-to-braille conversion, brailled listings of 7040 IBSYS  batch output, and update or duplicate the system tape itself.  Input-ouput subroutines are also included  in the system.</abstract>
	<conference>CACM May, 1965</conference>
	<authors>
	<author>Landwehr, J. B.</author>
	<author>McLaughlin, C.</author>
	<author>Mueller, H.</author>
	<author>Lichstein, M.</author>
	<author>Pollack, S. V.</author>
	</authors>
	<location>CA650507 JB March 7, 1978  2:30 PM</location>
	<citations>
	<citation>1264	4	1264</citation>
	<citation>1740	4	1264</citation>
	<citation>1099	5	1264</citation>
	<citation>1264	5	1264</citation>
	<citation>1264	5	1264</citation>
	<citation>1264	5	1264</citation>
	</citations>
	</document>
	<document id= '1263'>
	<title>Metalanguage and Syntax Specification</title>
	<abstract>Two metalanguages are described, one sufficient for the table specification of the ALGOL syntax,  the other with additional metaoperators adequate and used for the formal table description of Basic FORTRAN.</abstract>
	<conference>CACM May, 1965</conference>
	<authors>
	<author>Burkhardt, W. H.</author>
	</authors>
	<location>CA650508 JB March 7, 1978  2:19 PM</location>
	<citations>
	<citation>1046	4	1263</citation>
	<citation>1086	4	1263</citation>
	<citation>1105	4	1263</citation>
	<citation>1132	4	1263</citation>
	<citation>1139	4	1263</citation>
	<citation>1140	4	1263</citation>
	<citation>1234	4	1263</citation>
	<citation>1234	4	1263</citation>
	<citation>1263	4	1263</citation>
	<citation>1263	4	1263</citation>
	<citation>1263	4	1263</citation>
	<citation>1265	4	1263</citation>
	<citation>1265	4	1263</citation>
	<citation>1270	4	1263</citation>
	<citation>1323	4	1263</citation>
	<citation>1358	4	1263</citation>
	<citation>1379	4	1263</citation>
	<citation>1380	4	1263</citation>
	<citation>1453	4	1263</citation>
	<citation>1453	4	1263</citation>
	<citation>1464	4	1263</citation>
	<citation>1484	4	1263</citation>
	<citation>1491	4	1263</citation>
	<citation>1496	4	1263</citation>
	<citation>1498	4	1263</citation>
	<citation>1613	4	1263</citation>
	<citation>1614	4	1263</citation>
	<citation>1781	4	1263</citation>
	<citation>1781	4	1263</citation>
	<citation>1824	4	1263</citation>
	<citation>1825	4	1263</citation>
	<citation>1860	4	1263</citation>
	<citation>1945	4	1263</citation>
	<citation>2083	4	1263</citation>
	<citation>2126	4	1263</citation>
	<citation>2178	4	1263</citation>
	<citation>2179	4	1263</citation>
	<citation>2252	4	1263</citation>
	<citation>2325	4	1263</citation>
	<citation>2341	4	1263</citation>
	<citation>2546	4	1263</citation>
	<citation>2546	4	1263</citation>
	<citation>464	4	1263</citation>
	<citation>2645	4	1263</citation>
	<citation>2652	4	1263</citation>
	<citation>2684	4	1263</citation>
	<citation>2842	4	1263</citation>
	<citation>2929	4	1263</citation>
	<citation>2934	4	1263</citation>
	<citation>584	4	1263</citation>
	<citation>3069	4	1263</citation>
	<citation>631	4	1263</citation>
	<citation>653	4	1263</citation>
	<citation>669	4	1263</citation>
	<citation>679	4	1263</citation>
	<citation>680	4	1263</citation>
	<citation>691	4	1263</citation>
	<citation>761	4	1263</citation>
	<citation>763	4	1263</citation>
	<citation>795	4	1263</citation>
	<citation>799	4	1263</citation>
	<citation>945	4	1263</citation>
	<citation>949	4	1263</citation>
	<citation>989	4	1263</citation>
	<citation>989	5	1263</citation>
	<citation>1263	5	1263</citation>
	<citation>1263	5	1263</citation>
	<citation>1263	5	1263</citation>
	<citation>1379	5	1263</citation>
	<citation>404	5	1263</citation>
	<citation>3184	5	1263</citation>
	<citation>1263	6	1263</citation>
	<citation>1477	6	1263</citation>
	<citation>3184	6	1263</citation>
	<citation>669	6	1263</citation>
	<citation>761	6	1263</citation>
	</citations>
	</document>
	<document id= '1262'>
	<title>Procedure-Oriented Language Statements to Facilitate Parallel Processing</title>
	<abstract>Two statements are suggested which allow a programmer writing in a procedure-oriented language  to indicate sections of program which are to be executed in parallel.  The statements are DO TOGETHER  and HOLD.  These serve partly as brackets in establishing a range of parallel operation and partly to  define each parallel path within this range.  DO TOGETHERs may be nested.  The statements should be particularly  effective for use with computing devices capable of attaining some degree of compute-compute overlap.</abstract>
	<conference>CACM May, 1965</conference>
	<authors>
	<author>Opler, A.</author>
	</authors>
	<location>CA650509 JB March 7, 1978  2:17 PM</location>
	<citations>
	<citation>1158	5	1262</citation>
	<citation>1262	5	1262</citation>
	<citation>1262	5	1262</citation>
	<citation>1262	5	1262</citation>
	<citation>1262	6	1262</citation>
	</citations>
	</document>
	<document id= '1261'>
	<title>Modeling and Simulation of Digital Networks</title>
	<abstract>The simulation of digital networks on a digital computer provides the engineer with an effective  means of analyzing time-quantized logical behavior.  The digital network is modeled as a set of time-dependent  or time-independent Boolean transformations; each transformation describing the input-output relationship  of a model element comprising the network mode.  The simplicity of utilizing the FORTRAN IV Programming  System as a digital Network Simulator is discussed an illustrated.  This simplicity is derived from a  common modeling technique applicable to combinational and sequential digital networks and a systematic  programming approach.</abstract>
	<conference>CACM May, 1965</conference>
	<authors>
	<author>Larsen, R. P.</author>
	<author>Mano, M. M.</author>
	</authors>
	<location>CA650510 JB March 7, 1978  1:15 PM</location>
	<citations>
	<citation>1261	4	1261</citation>
	<citation>1939	4	1261</citation>
	<citation>1030	5	1261</citation>
	<citation>1261	5	1261</citation>
	<citation>1261	5	1261</citation>
	<citation>1261	5	1261</citation>
	</citations>
	</document>
	<document id= '1260'>
	<title>Least-Squares Analysis of Resonance Spectra on Small Computers</title>
	<abstract>The problem of analyzing data from a Mossbauer effect experiment is discussed.  By using the  cut step procedure for convergence and by imposing physical constraints on the functional form of the  calculation it is possible to make the analysis on a small computer.  The analysis has been carried out  on an IBM 1410 computer with a 40,000 BCD core memory.</abstract>
	<conference>CACM May, 1965</conference>
	<authors>
	<author>Marshall, S. W.</author>
	<author>Nelson, J. A.</author>
	<author>Wilenzick, R. M.</author>
	</authors>
	<location>CA650511 JB March 7, 1978  1:10 PM</location>
	<citations>
	<citation>1260	5	1260</citation>
	<citation>1260	5	1260</citation>
	<citation>1260	5	1260</citation>
	</citations>
	</document>
	<document id= '1259'>
	<title>Applications of Binary Numbers In Computer Routines</title>
	<abstract>A binary number can be thought of as an alternate form of expression for either a set of letters  or a decimal number.  There are then three equivalent expressions, easily translatable to one another,  each having different characteristics.  Four examples are given in which the form of an expression is  changed to an equivalent expression to save space or gain power.</abstract>
	<conference>CACM May, 1965</conference>
	<authors>
	<author>Weldon, R. J.</author>
	<author>Baker, R. L.</author>
	</authors>
	<location>CA650512 JB March 7, 1978  1:05 PM</location>
	<citations>
	<citation>1259	5	1259</citation>
	<citation>1259	5	1259</citation>
	<citation>1259	5	1259</citation>
	</citations>
	</document>
	<document id= '1258'>
	<title>An Extended Arithmetic Package</title>
	<abstract>In many fields, for example algebraic number theory, arithmetic must be carried out to a degree  of precision which exceeds the normal hardware capacity of most machines.  In such cases, an extended  arithmetic package provides a comprehensive and easy-to-use way of performing such arithmetic.  Such  a package was coded for the IBM 7090.  In discussing the general problems associated with the design  of an extended arithmetic package, specific reference is made to this program.</abstract>
	<conference>CACM May, 1965</conference>
	<authors>
	<author>Blum, B. I.</author>
	</authors>
	<location>CA650513 JB March 7, 1978  1:01 PM</location>
	<citations>
	<citation>1026	4	1258</citation>
	<citation>1258	4	1258</citation>
	<citation>1258	4	1258</citation>
	<citation>1292	4	1258</citation>
	<citation>1292	4	1258</citation>
	<citation>1497	4	1258</citation>
	<citation>1497	4	1258</citation>
	<citation>1975	4	1258</citation>
	<citation>2605	4	1258</citation>
	<citation>107	5	1258</citation>
	<citation>1026	5	1258</citation>
	<citation>1258	5	1258</citation>
	<citation>1258	5	1258</citation>
	<citation>1258	5	1258</citation>
	</citations>
	</document>
	<document id= '1257'>
	<title>DEBUG-An Extension to Current On-Line Debugging Techniques</title>
	<abstract>A method of on-linr assembly-language debugging which greatly simplifies several of the bookkeeping  tasks characteristically associated with that process has been developed and implemented in a program  for the UNIVAC M-460 computer at Air Force Cambridge Research Laboratories.  With this program, an online  user may insert or delete (in symbolic assembly language) any number of lines at any point of his previously  assembled program in core, with the remainder of the program being relocated appropriately.</abstract>
	<conference>CACM May, 1965</conference>
	<authors>
	<author>Evans, T. G.</author>
	<author>Darley, D. L.</author>
	</authors>
	<location>CA650514 JB March 7, 1978  12:58 PM</location>
	<citations>
	<citation>1257	5	1257</citation>
	<citation>1257	5	1257</citation>
	<citation>1257	5	1257</citation>
	<citation>1738	5	1257</citation>
	<citation>1257	6	1257</citation>
	</citations>
	</document>
	<document id= '1256'>
	<citations>
	<citation>1256	5	1256</citation>
	<citation>1256	5	1256</citation>
	<citation>1256	5	1256</citation>
	</citations>
	<title>Dynamic Variable Formatting</title>
	<conference>CACM May, 1965</conference>
	<authors>
	<author>King, D. R.</author>
	</authors>
	<location>CA650515 JB March 7, 1978  12:53 PM</location>
	</document>
	<document id= '1255'>
	<title>A Method of Data List Processing With Application to EEG Analysis</title>
	<abstract>A set of subroutines is discussed, which is designed to aid in the programming of computations  on indexed lists of numbers using machine language or a symbolic assembly system.  The most commonly  performed list operations are outlined, and logically arranged into five groups.  As an example, the  computation of power spectral density from the autocovariance function is discussed for a class of EEG  signals.</abstract>
	<conference>CACM May, 1965</conference>
	<authors>
	<author>Philpott, C. M.</author>
	<author>Lago, G. V.</author>
	</authors>
	<location>CA650516 JB March 7, 1978  12:52 PM</location>
	<citations>
	<citation>1255	5	1255</citation>
	<citation>1255	5	1255</citation>
	<citation>1255	5	1255</citation>
	</citations>
	</document>
	<document id= '1254'>
	<title>The Iteration Element</title>
	<abstract>A recent addition to the MAD language has made the iteration structure of the MAD THROUGH statement  (corresponding to the ALGOL for statement and the FORTRAN DO statement) available within expressions.</abstract>
	<conference>CACM June, 1965</conference>
	<authors>
	<author>Galler, B. A.</author>
	<author>Fischer, M. J.</author>
	</authors>
	<location>CA650601 JB March 7, 1978  12:49 PM</location>
	<citations>
	<citation>1254	5	1254</citation>
	<citation>1254	5	1254</citation>
	<citation>1254	5	1254</citation>
	</citations>
	</document>
	<document id= '1253'>
	<title>QUIKSCRIPT-A SIMSCRIPT- Like Language for the G-20</title>
	<abstract>QUIKSCRIPT is a simulation language based on SIMSCRIPT and programmed entirely in an algebraic  language, 20-GATE.  The QUIKSCRIPT language, its internal implementation, and major differences between  QUIKSCRIPT and SIMSCRIPT are presented.  This paper is not a programming guide to the language, but rather  an attempt to present its flavor.  A brief description of SIMSCRIPT is included, as is a sufficient description  of 20-GATE to render this material understandable to the reader familiar with algebraic languages.</abstract>
	<conference>CACM June, 1965</conference>
	<authors>
	<author>Tonge, F. M.</author>
	<author>Keller, P.</author>
	<author>Newell, A.</author>
	</authors>
	<location>CA650602 JB March 7, 1978  12:45 PM</location>
	<citations>
	<citation>1253	5	1253</citation>
	<citation>1253	5	1253</citation>
	<citation>1253	5	1253</citation>
	</citations>
	</document>
	<document id= '1252'>
	<title>Symbolic Notations for Statistical Tables and an Approach Towards Automatic System Design</title>
	<abstract>The preparation of statistical tables is an important function of the data processing systems  of some organizations, and a symbolic notation for the description of tables has been shown to be a useful  aid to documentation.  Such a notation also provides the first step towards making automatic a tedious  and time-consuming part of system design and programming in many computer applications.  One notation  is described and suggestions are made for the implementation of the larger goal.</abstract>
	<conference>CACM June, 1965</conference>
	<authors>
	<author>Smith, B. W.</author>
	</authors>
	<location>CA650603 JB March 7, 1978  12:41 PM</location>
	<citations>
	<citation>1252	5	1252</citation>
	<citation>1252	5	1252</citation>
	<citation>1252	5	1252</citation>
	</citations>
	</document>
	<document id= '1251'>
	<title>American Standard and IFIP/ICC Vocabularies compared</title>
	<abstract>The "Proposed American Standard Vocabulary of Information Processing" and the "IFIP/ICC Vocabulary  of Terms Used in Information Processing" are analyzed and compared.</abstract>
	<conference>CACM June, 1965</conference>
	<authors>
	<author>Traub, J. F.</author>
	</authors>
	<location>CA650604 JB March 7, 1978  12:38 PM</location>
	<citations>
	<citation>1251	4	1251</citation>
	<citation>975	5	1251</citation>
	<citation>1251	5	1251</citation>
	<citation>1251	5	1251</citation>
	<citation>1251	5	1251</citation>
	</citations>
	</document>
	<document id= '1250'>
	<citations>
	<citation>1250	5	1250</citation>
	<citation>1250	5	1250</citation>
	<citation>1250	5	1250</citation>
	</citations>
	<title>Graphic Symbols for Problem Definition and Analysis-A Standards Working Paper</title>
	<conference>CACM June, 1965</conference>
	<location>CA650605 JB March 7, 1978  12:35 PM</location>
	</document>
	<document id= '1249'>
	<citations>
	<citation>1249	5	1249</citation>
	<citation>1249	5	1249</citation>
	<citation>1249	5	1249</citation>
	</citations>
	<title>Recorded Magnetic Tape for Information Interchange (200 CPI, NRZI) (On the Revised Proposed  American Standard)</title>
	<conference>CACM June, 1965</conference>
	<location>CA650606 JB March 6, 1978  10:26 PM</location>
	</document>
	<document id= '1248'>
	<title>On the Automatic Simplification of Computer Programs</title>
	<abstract>Presented in this paper is the problem of writing a program which would examine any other program  and perform such simplifications on it as can be detected from the argument-program's form alone, without  having any knowledge of what it is supposed to do.</abstract>
	<conference>CACM June, 1965</conference>
	<authors>
	<author>Nievergelt, J.</author>
	</authors>
	<location>CA650607 JB March 6, 1978  10:24 PM</location>
	<citations>
	<citation>1248	5	1248</citation>
	<citation>1248	5	1248</citation>
	<citation>1248	5	1248</citation>
	<citation>1625	5	1248</citation>
	<citation>1807	5	1248</citation>
	<citation>1947	5	1248</citation>
	<citation>1134	6	1248</citation>
	<citation>1223	6	1248</citation>
	<citation>1223	6	1248</citation>
	<citation>1248	6	1248</citation>
	<citation>1248	6	1248</citation>
	<citation>1248	6	1248</citation>
	<citation>1551	6	1248</citation>
	<citation>1947	6	1248</citation>
	<citation>399	6	1248</citation>
	<citation>669	6	1248</citation>
	</citations>
	</document>
	<document id= '1247'>
	<title>An Operating Environment for Dynamic-Recursive Computer Programming Systems</title>
	<abstract>Presented in this paper is a brief nontechnical introduction to OEDIPUS, a computer programming  system which can serve as an operating environment for dynamic and/or recursive programs and programming  systems.  The available services include dynamic allocation of storage for contiguous blocks of arbitrary  size, input and output for a hierarchy of data types, a public pushdown list for automatic recursive  programming, a rudimentary compiler for subroutine communication and bookkeeping, and debugging aids.</abstract>
	<conference>CACM June, 1965</conference>
	<authors>
	<author>Brown, W. S.</author>
	</authors>
	<location>CA650608 JB March 6, 1978  10:18 PM</location>
	<citations>
	<citation>1247	4	1247</citation>
	<citation>1945	4	1247</citation>
	<citation>1247	5	1247</citation>
	<citation>1247	5	1247</citation>
	<citation>1247	5	1247</citation>
	<citation>1336	5	1247</citation>
	<citation>1397	5	1247</citation>
	<citation>2704	5	1247</citation>
	<citation>1247	6	1247</citation>
	<citation>1247	6	1247</citation>
	<citation>1552	6	1247</citation>
	<citation>1749	6	1247</citation>
	<citation>2356	6	1247</citation>
	<citation>2379	6	1247</citation>
	<citation>2673	6	1247</citation>
	</citations>
	</document>
	<document id= '1246'>
	<citations>
	<citation>1246	5	1246</citation>
	<citation>1246	5	1246</citation>
	<citation>1246	5	1246</citation>
	</citations>
	<title>Deeply Nested Iterations</title>
	<conference>CACM June, 1965</conference>
	<authors>
	<author>Korphage, R. R.</author>
	</authors>
	<location>CA650609 JB March 6, 1978  10:15 PM</location>
	</document>
	<document id= '1245'>
	<citations>
	<citation>1245	5	1245</citation>
	<citation>1245	5	1245</citation>
	<citation>1245	5	1245</citation>
	</citations>
	<title>A Fortran n-Ary Counter</title>
	<conference>CACM June, 1965</conference>
	<authors>
	<author>Kent, W.</author>
	</authors>
	<location>CA650610 JB March 6, 1978  10:13 PM</location>
	</document>
	<document id= '1244'>
	<citations>
	<citation>1244	5	1244</citation>
	<citation>1244	5	1244</citation>
	<citation>1244	5	1244</citation>
	</citations>
	<title>Bit Manipulation in Fortran Language</title>
	<conference>CACM June, 1965</conference>
	<authors>
	<author>Tobey, G. D.</author>
	</authors>
	<location>CA650611 JB March 6, 1978  10:12 PM</location>
	</document>
	<document id= '1243'>
	<citations>
	<citation>1243	5	1243</citation>
	<citation>1243	5	1243</citation>
	<citation>1243	5	1243</citation>
	</citations>
	<title>Testing the Understanding of the Difference Between Call by Name and Call by Value in ALGOL 60</title>
	<conference>CACM June, 1965</conference>
	<authors>
	<author>Weil, R. L.</author>
	</authors>
	<location>CA650612 JB March 6, 1978  10:11 PM</location>
	</document>
	<document id= '1242'>
	<citations>
	<citation>1242	5	1242</citation>
	<citation>1242	5	1242</citation>
	<citation>1242	5	1242</citation>
	<citation>1667	5	1242</citation>
	<citation>178	6	1242</citation>
	<citation>1242	6	1242</citation>
	<citation>327	6	1242</citation>
	</citations>
	<title>Modified Graeffe Method (Algorithm 256 [C2])</title>
	<conference>CACM June, 1965</conference>
	<authors>
	<author>Grau, A. A.</author>
	</authors>
	<location>CA650613 JB March 6, 1978  10:10 PM</location>
	</document>
	<document id= '1241'>
	<citations>
	<citation>1241	5	1241</citation>
	<citation>1241	5	1241</citation>
	<citation>1241	5	1241</citation>
	<citation>1352	5	1241</citation>
	<citation>1356	5	1241</citation>
	<citation>1883	5	1241</citation>
	<citation>2040	5	1241</citation>
	<citation>834	6	1241</citation>
	<citation>872	6	1241</citation>
	<citation>1040	6	1241</citation>
	<citation>1092	6	1241</citation>
	<citation>1241	6	1241</citation>
	<citation>1241	6	1241</citation>
	<citation>1241	6	1241</citation>
	<citation>1241	6	1241</citation>
	<citation>1273	6	1241</citation>
	<citation>1273	6	1241</citation>
	<citation>1352	6	1241</citation>
	<citation>1356	6	1241</citation>
	<citation>324	6	1241</citation>
	<citation>324	6	1241</citation>
	<citation>429	6	1241</citation>
	<citation>570	6	1241</citation>
	<citation>621	6	1241</citation>
	<citation>621	6	1241</citation>
	<citation>786	6	1241</citation>
	</citations>
	<title>Havie Integrator (Algorithm 257 [D1])</title>
	<conference>CACM June, 1965</conference>
	<authors>
	<author>Kubik, R. N.</author>
	</authors>
	<location>CA650614 JB March 6, 1978  10:09 PM</location>
	</document>
	<document id= '1240'>
	<citations>
	<citation>1240	5	1240</citation>
	<citation>1240	5	1240</citation>
	<citation>1240	5	1240</citation>
	</citations>
	<title>Transport (Algorithm 258 [H])</title>
	<conference>CACM June, 1965</conference>
	<authors>
	<author>Bayer, G.</author>
	</authors>
	<location>CA650615 JB March 6, 1978  9:51 PM</location>
	</document>
	<document id= '1239'>
	<citations>
	<citation>1239	5	1239</citation>
	<citation>1239	5	1239</citation>
	<citation>1239	5	1239</citation>
	</citations>
	<title>Graycode (Algorithm 246 [Z])</title>
	<conference>CACM June, 1965</conference>
	<authors>
	<author>Allen, W. D.</author>
	</authors>
	<location>CA650616 JB March 6, 1978  9:50 PM</location>
	</document>
	<document id= '1238'>
	<title>A Technique for Integrated Reports from a Multi-run System</title>
	<abstract>The requirements of a requisition accounting system for the San Francisco Overseas Supply Agency  (OSA) included exception reporting to OSA itself.  The simultaneous satisfaction of the reporting requirement  and the accounting requirements posed definite problems in system design, particularly the handling of  the reporting function.  A practical and satisfactory solution was developed by expanding the basic system  with two tailored service runs for report production.  These two runs permitted a final system that was  easier to debug, easy to maintain, efficient in production and responsive to the changing requirements of OSA.</abstract>
	<conference>CACM June, 1965</conference>
	<authors>
	<author>Budea, N.</author>
	<author>Kamena, J. G.</author>
	<author>Kamena, R. M.</author>
	</authors>
	<location>CA650617 JB March 6, 1978  9:49 PM</location>
	<citations>
	<citation>1238	5	1238</citation>
	<citation>1238	5	1238</citation>
	<citation>1238	5	1238</citation>
	</citations>
	</document>
	<document id= '1237'>
	<title>Conversion of Decision Tables To Computer Programs</title>
	<abstract>Several translation procedures for the conversion of decision tables to programs are presented  and then evaluated in terms of storage requirements, execution time and compile time.  The procedures  are valuable as hand-coding guides or as algorithms for a compiler.  Both limited-entry and extended-entry  tables are analyzed.  In addition to table analysis, the nature of table-oriented programming languages  and features is discussed.  It is presumed that the reader is familiar with the nature of decision tables  and conventional definitions.</abstract>
	<conference>CACM June,1965</conference>
	<authors>
	<author>Press, L. I.</author>
	</authors>
	<location>CA650618 JB March 6, 1978  9:45 PM</location>
	<citations>
	<citation>250	4	1237</citation>
	<citation>1237	4	1237</citation>
	<citation>1237	4	1237</citation>
	<citation>1237	4	1237</citation>
	<citation>1549	4	1237</citation>
	<citation>1564	4	1237</citation>
	<citation>2220	4	1237</citation>
	<citation>2453	4	1237</citation>
	<citation>753	4	1237</citation>
	<citation>1237	5	1237</citation>
	<citation>1237	5	1237</citation>
	<citation>1237	5	1237</citation>
	<citation>1354	5	1237</citation>
	<citation>250	5	1237</citation>
	<citation>1488	5	1237</citation>
	<citation>1994	5	1237</citation>
	<citation>320	5	1237</citation>
	<citation>2053	5	1237</citation>
	<citation>2220	5	1237</citation>
	<citation>2273	5	1237</citation>
	<citation>753	5	1237</citation>
	<citation>1172	6	1237</citation>
	<citation>1172	6	1237</citation>
	<citation>1172	6	1237</citation>
	<citation>1172	6	1237</citation>
	<citation>1237	6	1237</citation>
	<citation>1237	6	1237</citation>
	<citation>1237	6	1237</citation>
	<citation>1237	6	1237</citation>
	<citation>1237	6	1237</citation>
	<citation>1237	6	1237</citation>
	<citation>1327	6	1237</citation>
	<citation>1327	6	1237</citation>
	<citation>1327	6	1237</citation>
	<citation>1327	6	1237</citation>
	<citation>1327	6	1237</citation>
	<citation>1354	6	1237</citation>
	<citation>1354	6	1237</citation>
	<citation>1354	6	1237</citation>
	<citation>1489	6	1237</citation>
	<citation>1548	6	1237</citation>
	<citation>1684	6	1237</citation>
	<citation>250	6	1237</citation>
	<citation>2053	6	1237</citation>
	<citation>2220	6	1237</citation>
	</citations>
	</document>
	<document id= '1236'>
	<title>The SMART Automatic Document Retrieval System-An Illustration</title>
	<abstract>A fully automatic document retrieval system operating on the IBM 7094 is described.  The system  is characterized by the fact that several hundred different methods are available to analyze documents  and search requests.  This feature is used in the retrieval process by leaving the exact sequence of  operations initially unspecified, and adapting the search strategy to the needs of individual users.   The system is used not only to simulate an actual operating environment, but also to test the effectiveness  of the various available processing methods.  Results obtained so far seem to indicate that some combination  of analysis procedures can in general be relied upon to retrieve the wanted information.  A typical search  request is used as an example in the present report to illustrate systems operations and evaluation procedures.</abstract>
	<conference>CACM June, 1965</conference>
	<authors>
	<author>Salton, G.</author>
	<author>Lesk, M. E.</author>
	</authors>
	<location>CA650619 JB March 6, 1978  9:41 PM</location>
	<citations>
	<citation>1236	5	1236</citation>
	<citation>1236	5	1236</citation>
	<citation>1236	5	1236</citation>
	<citation>1457	5	1236</citation>
	<citation>1236	6	1236</citation>
	</citations>
	</document>
	<document id= '1235'>
	<title>A Stochastic Approach to the Grammatical Coding of English</title>
	<abstract>A computer program is described which will assign each word in an English text to its form  class or part of speech.  The program operates at relatively high speed in only a limited storage space.   About half of the word-events in a corpus are identified through the use of a small dictionary of function  words and frequently occurring lexical words.  Some suffix tests and logical-decision rules are employed  to code additional words.  Finally, the remaining words are assigned to one class or another on the basis  of the most probable form classes to occur within the already identified contexts.  The conditional probabilities  used as a basis for this coding were empirically derived from a separate hand-coded corpus.On preliminary  trials, the accuracy of the coder was 91% to 93%, with obvious ways of improving the algorithm being  suggested by an analysis of the results.</abstract>
	<conference>CACM June, 1965</conference>
	<authors>
	<author>Stolz, W. S.</author>
	<author>Tannenbaum, H.</author>
	<author>Carstensen, F. V.</author>
	</authors>
	<location>CA650620 JB March 6, 1978  9:35 PM</location>
	<citations>
	<citation>1235	5	1235</citation>
	<citation>1235	5	1235</citation>
	<citation>1235	5	1235</citation>
	</citations>
	</document>
	<document id= '1234'>
	<title>The Structure of Yet Another ALGOL Compiler</title>
	<abstract>A high-speed "top down" method of syntax analysis which completely eliminates "back-up" of  the source string has been implemented in a convenient macro-language.  A technique of  simulation at  compile time of the use of a conventional run-time stack enables the generation of code for expressions  which minimizes stores, fetches and stack-pointer motion at run time, while properly trating recursion  and side effects of procedures.  Block structure and recursion are handled without need for interpretive  methods at run times.  The "context problem" in the transmission to recursive procedures of parameters  "called by name" is solved in a manner which permits the handling of the common cases of simple expressions  and array identifiers with particular efficiency.</abstract>
	<conference>CACM July, 1965</conference>
	<authors>
	<author>Kanner, H.</author>
	<author>Kosinski, P.</author>
	<author>Robinson, C. L.</author>
	</authors>
	<location>CA650701 JB March 6, 1978  9:29 PM</location>
	<citations>
	<citation>254	4	1234</citation>
	<citation>1037	4	1234</citation>
	<citation>1046	4	1234</citation>
	<citation>1086	4	1234</citation>
	<citation>1105	4	1234</citation>
	<citation>1132	4	1234</citation>
	<citation>1139	4	1234</citation>
	<citation>1140	4	1234</citation>
	<citation>1234	4	1234</citation>
	<citation>1234	4	1234</citation>
	<citation>1234	4	1234</citation>
	<citation>1234	4	1234</citation>
	<citation>1234	4	1234</citation>
	<citation>1234	4	1234</citation>
	<citation>1234	4	1234</citation>
	<citation>1234	4	1234</citation>
	<citation>1263	4	1234</citation>
	<citation>1263	4	1234</citation>
	<citation>1265	4	1234</citation>
	<citation>1265	4	1234</citation>
	<citation>1270	4	1234</citation>
	<citation>1323	4	1234</citation>
	<citation>1358	4	1234</citation>
	<citation>1358	4	1234</citation>
	<citation>1379	4	1234</citation>
	<citation>1380	4	1234</citation>
	<citation>1453	4	1234</citation>
	<citation>1464	4	1234</citation>
	<citation>1484	4	1234</citation>
	<citation>1491	4	1234</citation>
	<citation>1491	4	1234</citation>
	<citation>1496	4	1234</citation>
	<citation>1498	4	1234</citation>
	<citation>1613	4	1234</citation>
	<citation>1614	4	1234</citation>
	<citation>1781	4	1234</citation>
	<citation>1781	4	1234</citation>
	<citation>1824	4	1234</citation>
	<citation>1825	4	1234</citation>
	<citation>1860	4	1234</citation>
	<citation>321	4	1234</citation>
	<citation>321	4	1234</citation>
	<citation>2083	4	1234</citation>
	<citation>2126	4	1234</citation>
	<citation>2178	4	1234</citation>
	<citation>2179	4	1234</citation>
	<citation>2252	4	1234</citation>
	<citation>2325	4	1234</citation>
	<citation>2341	4	1234</citation>
	<citation>2451	4	1234</citation>
	<citation>2546	4	1234</citation>
	<citation>2546	4	1234</citation>
	<citation>464	4	1234</citation>
	<citation>2645	4	1234</citation>
	<citation>2652	4	1234</citation>
	<citation>2684	4	1234</citation>
	<citation>2842	4	1234</citation>
	<citation>2929	4	1234</citation>
	<citation>2934	4	1234</citation>
	<citation>584	4	1234</citation>
	<citation>3069	4	1234</citation>
	<citation>631	4	1234</citation>
	<citation>653	4	1234</citation>
	<citation>669	4	1234</citation>
	<citation>679	4	1234</citation>
	<citation>680	4	1234</citation>
	<citation>691	4	1234</citation>
	<citation>761	4	1234</citation>
	<citation>763	4	1234</citation>
	<citation>795	4	1234</citation>
	<citation>799	4	1234</citation>
	<citation>945	4	1234</citation>
	<citation>949	4	1234</citation>
	<citation>989	4	1234</citation>
	<citation>944	5	1234</citation>
	<citation>1234	5	1234</citation>
	<citation>1234	5	1234</citation>
	<citation>1234	5	1234</citation>
	<citation>321	5	1234</citation>
	<citation>385	5	1234</citation>
	<citation>400	5	1234</citation>
	<citation>402	5	1234</citation>
	<citation>404	5	1234</citation>
	<citation>3184	5	1234</citation>
	<citation>729	5	1234</citation>
	</citations>
	</document>
	<document id= '1233'>
	<citations>
	<citation>1233	5	1233</citation>
	<citation>1233	5	1233</citation>
	<citation>1233	5	1233</citation>
	</citations>
	<title>Conventions for the Use of Symbols in the Preparation of Flowcharts for Information Processing  Systems (A Standard Working Paper)</title>
	<abstract>This paper is intended as an outline of the various conventions which are being considered  for the use of flowcharts for information processing systems.  The conventions are applied to the use  of the symbols appearing in the proposed American Standard Flowchart Symbols and not with the symbols  per se.</abstract>
	<conference>CACM July, 1965</conference>
	<location>CA650702 JB March 6, 1978  9:10 PM</location>
	</document>
	<document id= '1232'>
	<citations>
	<citation>1232	5	1232</citation>
	<citation>1232	5	1232</citation>
	<citation>1232	5	1232</citation>
	</citations>
	<title>Representation of the Standard ECMA 7-Bit Code in Punched Cards (ECMA Standard)</title>
	<conference>CACM July, 1965</conference>
	<location>CA650703 JB March 6, 1978  9:06 PM</location>
	</document>
	<document id= '1231'>
	<title>Peephole Optimization</title>
	<abstract>Redundant instructions may be discarded during the final stage of compilation by using a simple  optimizing technique called peephole optimization. The method is described and examplesare given.</abstract>
	<conference>CACM July, 1965</conference>
	<authors>
	<author>McKeeman, W. M.</author>
	</authors>
	<location>CA650704 JB March 6, 1978  9:05 PM</location>
	<citations>
	<citation>1160	5	1231</citation>
	<citation>1231	5	1231</citation>
	<citation>1231	5	1231</citation>
	<citation>1231	5	1231</citation>
	<citation>2034	5	1231</citation>
	<citation>984	6	1231</citation>
	<citation>1231	6	1231</citation>
	<citation>1231	6	1231</citation>
	<citation>1565	6	1231</citation>
	<citation>1852	6	1231</citation>
	<citation>1926	6	1231</citation>
	<citation>1947	6	1231</citation>
	</citations>
	</document>
	<document id= '1230'>
	<title>Method for Hyphenating at the End of a Printed Line</title>
	<abstract>A description of a method of hyphenation is presented as a result of application of several  general rules.  The character sets considered by the routine and the method are briefly outlined.</abstract>
	<conference>CACM July, 1965</conference>
	<authors>
	<author>Rich, R. P.</author>
	<author>Stone, A. G.</author>
	</authors>
	<location>CA650705 JB March 6, 1978  9:03 PM</location>
	<citations>
	<citation>1230	5	1230</citation>
	<citation>1230	5	1230</citation>
	<citation>1230	5	1230</citation>
	</citations>
	</document>
	<document id= '1229'>
	<citations>
	<citation>1229	5	1229</citation>
	<citation>1229	5	1229</citation>
	<citation>1229	5	1229</citation>
	</citations>
	<title>Random Permutation (Algorithm 235 [G6])</title>
	<conference>CACM July, 1965</conference>
	<authors>
	<author>Pike, M. C.</author>
	</authors>
	<location>CA650706 JB March 6, 1978  9:00 PM</location>
	</document>
	<document id= '1228'>
	<citations>
	<citation>1228	5	1228</citation>
	<citation>1228	5	1228</citation>
	<citation>1228	5	1228</citation>
	<citation>2042	5	1228</citation>
	<citation>2679	5	1228</citation>
	<citation>970	6	1228</citation>
	<citation>970	6	1228</citation>
	<citation>1175	6	1228</citation>
	<citation>1190	6	1228</citation>
	<citation>1228	6	1228</citation>
	<citation>1228	6	1228</citation>
	<citation>1969	6	1228</citation>
	<citation>1997	6	1228</citation>
	<citation>308	6	1228</citation>
	<citation>2042	6	1228</citation>
	<citation>3187	6	1228</citation>
	<citation>507	6	1228</citation>
	<citation>716	6	1228</citation>
	<citation>783	6	1228</citation>
	</citations>
	<title>Treesort 3 (Algorithm 245 [M1])</title>
	<conference>CACM July, 1965</conference>
	<authors>
	<author>Abrams, P. S.</author>
	</authors>
	<location>CA650707 JB March 6, 1978  8:59 PM</location>
	</document>
	<document id= '1227'>
	<citations>
	<citation>1227	5	1227</citation>
	<citation>1227	5	1227</citation>
	<citation>1227	5	1227</citation>
	</citations>
	<title>Transport (Algorithm 258 [H])</title>
	<conference>CACM July, 1965</conference>
	<authors>
	<author>Bayer, G.</author>
	</authors>
	<location>CA650708 JB March 6, 1978  8:58 PM</location>
	</document>
	<document id= '1226'>
	<title>The Organization of Structured Files</title>
	<abstract>A data file is an integral part of a data processing system.  In many systems, the selection  of an organization for the data within the file can be critical to the system's operating efficiency.   This paper provides the systems designer with an information source which describes ten techniques that  may be employed for organizing structured data.  The characteristics of the organizations described are  application independent, thus providing the designer with a reference which allows him to limit the number  of file organizations he must consider for his system.</abstract>
	<conference>CACM July, 1965</conference>
	<authors>
	<author>Dzubak, B. J.</author>
	<author>Warburton, C. R.</author>
	</authors>
	<location>CA650709 JB March 6, 1978  8:57 PM</location>
	<citations>
	<citation>1050	4	1226</citation>
	<citation>1226	4	1226</citation>
	<citation>441	4	1226</citation>
	<citation>758	4	1226</citation>
	<citation>1226	5	1226</citation>
	<citation>1226	5	1226</citation>
	<citation>1226	5	1226</citation>
	<citation>367	5	1226</citation>
	</citations>
	</document>
	<document id= '1225'>
	<title>The Predictive Analyzer and a Path Elimination Technique</title>
	<abstract>Some of the characteristic features of a predictive analyzer, a system of syntactic analysis  now operational at Harvard on and IBM 7094, are delineated.  The advantages and disadvantages of the  system are discussed in comparison to those of an immediate constituent analyzer, developed at the RAND  Corporation with Robinson's English grammar.  In addition, a new technique is described for repetitive  path elimination for a predictive analyzer, which can now claim efficiency both in processing time and  core storage requirement.</abstract>
	<conference>CACM July, 1965</conference>
	<authors>
	<author>Kuno, S.</author>
	</authors>
	<location>CA650710 JB March 6, 1978  8:52 PM</location>
	<citations>
	<citation>1225	4	1225</citation>
	<citation>1225	4	1225</citation>
	<citation>1350	4	1225</citation>
	<citation>1350	4	1225</citation>
	<citation>1646	4	1225</citation>
	<citation>1781	4	1225</citation>
	<citation>1945	4	1225</citation>
	<citation>1945	4	1225</citation>
	<citation>2650	4	1225</citation>
	<citation>2698	4	1225</citation>
	<citation>2708	4	1225</citation>
	<citation>3093	4	1225</citation>
	<citation>1012	5	1225</citation>
	<citation>1225	5	1225</citation>
	<citation>1225	5	1225</citation>
	<citation>1225	5	1225</citation>
	<citation>1350	5	1225</citation>
	<citation>1659	5	1225</citation>
	<citation>1856	5	1225</citation>
	<citation>2050	5	1225</citation>
	<citation>680	5	1225</citation>
	<citation>1012	6	1225</citation>
	<citation>1225	6	1225</citation>
	<citation>1225	6	1225</citation>
	<citation>1225	6	1225</citation>
	<citation>1225	6	1225</citation>
	<citation>1265	6	1225</citation>
	<citation>1265	6	1225</citation>
	<citation>1324	6	1225</citation>
	<citation>1350	6	1225</citation>
	<citation>1399	6	1225</citation>
	<citation>1553	6	1225</citation>
	<citation>1671	6	1225</citation>
	<citation>1697	6	1225</citation>
	<citation>680	6	1225</citation>
	</citations>
	</document>
	<document id= '1224'>
	<title>Determining a Computing Center Environment</title>
	<abstract>An investigation is described in which several generally unavailable parameters descriptive  of a computing center environment are obtained.  The actual data collection and reduction is described,  and the results of one month of this collection are tabulated and summarized.</abstract>
	<conference>CACM July, 1965</conference>
	<authors>
	<author>Rosin, R. F.</author>
	</authors>
	<location>CA650711 JB March 6, 1978  8:48 PM</location>
	<citations>
	<citation>1224	5	1224</citation>
	<citation>1224	5	1224</citation>
	<citation>1224	5	1224</citation>
	<citation>1533	5	1224</citation>
	<citation>1604	5	1224</citation>
	<citation>1224	6	1224</citation>
	<citation>1224	6	1224</citation>
	<citation>1410	6	1224</citation>
	<citation>1604	6	1224</citation>
	</citations>
	</document>
	<document id= '1223'>
	<title>High Speed Compilation of Efficient Object Code</title>
	<abstract>A three-pass compiler with the following properties is briefly described:  The last two passes  scan an intermediate language produced by the preceding pass in essentially the reverse of the order  in which it was generated, so that the first pass is the only one which hasto read the bulky problem-oriented  input.  The double scan, one in either direction, performed by the first two passes, allows the compiler  to remove locally constant expressions and recursively calculable expressions from loops and to do the  important part of common subexpression recognition.  Optimization such as the effective use of index  registers, although as important, is not discussed since the object code which would be most efficient  is highly machine dependent.  The discussion is in terms of a FORTRAN-like language, although the technique  is applicable to most algebraic languages.</abstract>
	<conference>CACM August, 1965</conference>
	<authors>
	<author>Gear, C. W.</author>
	</authors>
	<location>CA650801 JB March 6, 1978  8:45 PM</location>
	<citations>
	<citation>267	4	1223</citation>
	<citation>1139	4	1223</citation>
	<citation>1141	4	1223</citation>
	<citation>1215	4	1223</citation>
	<citation>1223	4	1223</citation>
	<citation>1223	4	1223</citation>
	<citation>1388	4	1223</citation>
	<citation>1647	4	1223</citation>
	<citation>1781	4	1223</citation>
	<citation>1787	4	1223</citation>
	<citation>1792	4	1223</citation>
	<citation>364	4	1223</citation>
	<citation>405	4	1223</citation>
	<citation>436	4	1223</citation>
	<citation>438	4	1223</citation>
	<citation>763	4	1223</citation>
	<citation>1223	5	1223</citation>
	<citation>1223	5	1223</citation>
	<citation>1223	5	1223</citation>
	<citation>224	5	1223</citation>
	<citation>1781	5	1223</citation>
	<citation>1807	5	1223</citation>
	<citation>1945	5	1223</citation>
	<citation>1947	5	1223</citation>
	<citation>405	5	1223</citation>
	<citation>823	6	1223</citation>
	<citation>123	6	1223</citation>
	<citation>196	6	1223</citation>
	<citation>914	6	1223</citation>
	<citation>915	6	1223</citation>
	<citation>917	6	1223</citation>
	<citation>919	6	1223</citation>
	<citation>984	6	1223</citation>
	<citation>989	6	1223</citation>
	<citation>990	6	1223</citation>
	<citation>990	6	1223</citation>
	<citation>1007	6	1223</citation>
	<citation>1012	6	1223</citation>
	<citation>1046	6	1223</citation>
	<citation>1084	6	1223</citation>
	<citation>1098	6	1223</citation>
	<citation>1122	6	1223</citation>
	<citation>1131	6	1223</citation>
	<citation>1134	6	1223</citation>
	<citation>1138	6	1223</citation>
	<citation>1139	6	1223</citation>
	<citation>1139	6	1223</citation>
	<citation>1140	6	1223</citation>
	<citation>1141	6	1223</citation>
	<citation>1149	6	1223</citation>
	<citation>1198	6	1223</citation>
	<citation>1200	6	1223</citation>
	<citation>1215	6	1223</citation>
	<citation>1223	6	1223</citation>
	<citation>1223	6	1223</citation>
	<citation>1223	6	1223</citation>
	<citation>1223	6	1223</citation>
	<citation>1248	6	1223</citation>
	<citation>1248	6	1223</citation>
	<citation>1265	6	1223</citation>
	<citation>1265	6	1223</citation>
	<citation>1303	6	1223</citation>
	<citation>1323	6	1223</citation>
	<citation>1336	6	1223</citation>
	<citation>1358	6	1223</citation>
	<citation>1366	6	1223</citation>
	<citation>1396	6	1223</citation>
	<citation>1421	6	1223</citation>
	<citation>1455	6	1223</citation>
	<citation>1460	6	1223</citation>
	<citation>1462	6	1223</citation>
	<citation>1463	6	1223</citation>
	<citation>1467	6	1223</citation>
	<citation>1468	6	1223</citation>
	<citation>1477	6	1223</citation>
	<citation>1477	6	1223</citation>
	<citation>1487	6	1223</citation>
	<citation>1491	6	1223</citation>
	<citation>1491	6	1223</citation>
	<citation>1496	6	1223</citation>
	<citation>1496	6	1223</citation>
	<citation>1531	6	1223</citation>
	<citation>1535	6	1223</citation>
	<citation>1551	6	1223</citation>
	<citation>1565	6	1223</citation>
	<citation>1601	6	1223</citation>
	<citation>1602	6	1223</citation>
	<citation>1613	6	1223</citation>
	<citation>1614	6	1223</citation>
	<citation>1626	6	1223</citation>
	<citation>1641	6	1223</citation>
	<citation>1787	6	1223</citation>
	<citation>1788	6	1223</citation>
	<citation>205	6	1223</citation>
	<citation>224	6	1223</citation>
	<citation>249	6	1223</citation>
	<citation>288	6	1223</citation>
	<citation>1947	6	1223</citation>
	<citation>316	6	1223</citation>
	<citation>381	6	1223</citation>
	<citation>398	6	1223</citation>
	<citation>399	6	1223</citation>
	<citation>11	6	1223</citation>
	<citation>404	6	1223</citation>
	<citation>410	6	1223</citation>
	<citation>463	6	1223</citation>
	<citation>464	6	1223</citation>
	<citation>483	6	1223</citation>
	<citation>483	6	1223</citation>
	<citation>3184	6	1223</citation>
	<citation>3188	6	1223</citation>
	<citation>584	6	1223</citation>
	<citation>584	6	1223</citation>
	<citation>600	6	1223</citation>
	<citation>669	6	1223</citation>
	<citation>680	6	1223</citation>
	<citation>680	6	1223</citation>
	<citation>691	6	1223</citation>
	<citation>763	6	1223</citation>
	<citation>763	6	1223</citation>
	<citation>799	6	1223</citation>
	</citations>
	</document>
	<document id= '1222'>
	<citations>
	<citation>1023	4	1222</citation>
	<citation>1222	4	1222</citation>
	<citation>1222	4	1222</citation>
	<citation>1222	4	1222</citation>
	<citation>1130	5	1222</citation>
	<citation>1222	5	1222</citation>
	<citation>1222	5	1222</citation>
	<citation>1222	5	1222</citation>
	<citation>245	5	1222</citation>
	<citation>310	5	1222</citation>
	</citations>
	<title>Legendre Functions for Arguments Larger Than One (Algorithm 259 [S16])</title>
	<conference>CACM August, 1965</conference>
	<authors>
	<author>Gautschi, W.</author>
	</authors>
	<location>CA650802 JB March 6, 1978  8:30 PM</location>
	</document>
	<document id= '1221'>
	<citations>
	<citation>1221	5	1221</citation>
	<citation>1221	5	1221</citation>
	<citation>1221	5	1221</citation>
	</citations>
	<title>6-J Symbols (Algorithm 260 [Z])</title>
	<conference>CACM August, 1965</conference>
	<authors>
	<author>Gunn, J. H.</author>
	</authors>
	<location>CA650803 JB March 6, 1978  8:28 PM</location>
	</document>
	<document id= '1220'>
	<citations>
	<citation>1220	5	1220</citation>
	<citation>1220	5	1220</citation>
	<citation>1220	5	1220</citation>
	</citations>
	<title>9-J Symbols (Algorithm 261 [Z])</title>
	<conference>CACM August, 1965</conference>
	<authors>
	<author>Gunn, J. H.</author>
	</authors>
	<location>CA650804 JB March 6, 1978  8:27 PM</location>
	</document>
	<document id= '1219'>
	<citations>
	<citation>1219	5	1219</citation>
	<citation>1219	5	1219</citation>
	<citation>1219	5	1219</citation>
	<citation>2104	5	1219</citation>
	<citation>2489	5	1219</citation>
	<citation>1219	6	1219</citation>
	<citation>1219	6	1219</citation>
	<citation>2104	6	1219</citation>
	</citations>
	<title>Number of Restricted Partitions of N (Algorithm 262 [A1])</title>
	<conference>CACM August, 1965</conference>
	<authors>
	</authors>
	<location>CA650805 JB March 6, 1978  8:26 PM</location>
	</document>
	<document id= '1218'>
	<citations>
	<citation>1218	5	1218</citation>
	<citation>1218	5	1218</citation>
	<citation>1218	5	1218</citation>
	<citation>2103	5	1218</citation>
	<citation>1218	6	1218</citation>
	</citations>
	<title>Partition Generator (Algorithm 263 [A1])</title>
	<conference>CACM August, 1965</conference>
	<authors>
	<author>McKay, J. K. S.</author>
	</authors>
	<location>CA650806 JB March 6, 1978  8:20 PM</location>
	</document>
	<document id= '1217'>
	<citations>
	<citation>1217	5	1217</citation>
	<citation>1217	5	1217</citation>
	<citation>1217	5	1217</citation>
	</citations>
	<title>Map of Partitions into Integers (Algorithm 264 [A1])</title>
	<conference>CACM August, 1965</conference>
	<authors>
	<author>McKay, J. K. S.</author>
	</authors>
	<location>CA650807 JB March 6, 1978  8:19 PM</location>
	</document>
	<document id= '1216'>
	<title>Symbolic Derivatives Without List Processing, Subroutines, or Recursion</title>
	<abstract>A routine has been developed which computes and prints out the symbolic derivative of an absolutely  continuous elementary function of one or several variables.  No use is made of list-processing languages.   The chain rule is applied and the result is edited to produce results as elegant and efficient as those  obtained by hand computation.  A subset may be imbeded in a formula translator to introduce a differentiation  operator into an "algebraic" programming language.</abstract>
	<conference>CACM August, 1965</conference>
	<authors>
	<author>Smith, P. J.</author>
	</authors>
	<location>CA650808 JB March 6, 1978  8:18 PM</location>
	<citations>
	<citation>1028	4	1216</citation>
	<citation>1028	4	1216</citation>
	<citation>1216	4	1216</citation>
	<citation>1216	4	1216</citation>
	<citation>1216	4	1216</citation>
	<citation>1278	4	1216</citation>
	<citation>1278	4	1216</citation>
	<citation>1347	4	1216</citation>
	<citation>1347	4	1216</citation>
	<citation>1392	4	1216</citation>
	<citation>1396	4	1216</citation>
	<citation>1396	4	1216</citation>
	<citation>1396	4	1216</citation>
	<citation>1536	4	1216</citation>
	<citation>964	4	1216</citation>
	<citation>1028	5	1216</citation>
	<citation>1029	5	1216</citation>
	<citation>1216	5	1216</citation>
	<citation>1216	5	1216</citation>
	<citation>1216	5	1216</citation>
	<citation>561	5	1216</citation>
	</citations>
	</document>
	<document id= '1215'>
	<title>Some Techniques Used in the ALCOR ILLINOIS 7090</title>
	<abstract>An ALGOL compiler has been written by the ALCOR group for the IBM 7090.  Some little known  but significant techniques in compiler writing, together with organizational details of this compiler,  are described.  Timing estimates and an indication of compiler requirements are also given.</abstract>
	<conference>CACM August, 1965</conference>
	<authors>
	<author>Gries, D.</author>
	<author>Paul, M.</author>
	<author>Wiehle, H. R.</author>
	</authors>
	<location>CA650809 JB March 6, 1978  8:13 PM</location>
	<citations>
	<citation>267	4	1215</citation>
	<citation>1139	4	1215</citation>
	<citation>1141	4	1215</citation>
	<citation>1215	4	1215</citation>
	<citation>1215	4	1215</citation>
	<citation>1215	4	1215</citation>
	<citation>1223	4	1215</citation>
	<citation>1647	4	1215</citation>
	<citation>1682	4	1215</citation>
	<citation>1781	4	1215</citation>
	<citation>1781	4	1215</citation>
	<citation>1787	4	1215</citation>
	<citation>1787	4	1215</citation>
	<citation>1792	4	1215</citation>
	<citation>1945	4	1215</citation>
	<citation>364	4	1215</citation>
	<citation>405	4	1215</citation>
	<citation>438	4	1215</citation>
	<citation>2603	4	1215</citation>
	<citation>763	4	1215</citation>
	<citation>1025	5	1215</citation>
	<citation>1215	5	1215</citation>
	<citation>1215	5	1215</citation>
	<citation>1215	5	1215</citation>
	<citation>224	5	1215</citation>
	<citation>1498	5	1215</citation>
	<citation>1781	5	1215</citation>
	<citation>1787	5	1215</citation>
	<citation>763	5	1215</citation>
	<citation>123	6	1215</citation>
	<citation>196	6	1215</citation>
	<citation>196	6	1215</citation>
	<citation>919	6	1215</citation>
	<citation>990	6	1215</citation>
	<citation>1007	6	1215</citation>
	<citation>1046	6	1215</citation>
	<citation>1131	6	1215</citation>
	<citation>1139	6	1215</citation>
	<citation>1140	6	1215</citation>
	<citation>1141	6	1215</citation>
	<citation>1149	6	1215</citation>
	<citation>1198	6	1215</citation>
	<citation>1215	6	1215</citation>
	<citation>1215	6	1215</citation>
	<citation>1215	6	1215</citation>
	<citation>1223	6	1215</citation>
	<citation>1265	6	1215</citation>
	<citation>1303	6	1215</citation>
	<citation>1323	6	1215</citation>
	<citation>1358	6	1215</citation>
	<citation>1366	6	1215</citation>
	<citation>1421	6	1215</citation>
	<citation>1460	6	1215</citation>
	<citation>1462	6	1215</citation>
	<citation>1463	6	1215</citation>
	<citation>1467	6	1215</citation>
	<citation>1468	6	1215</citation>
	<citation>1477	6	1215</citation>
	<citation>1491	6	1215</citation>
	<citation>1491	6	1215</citation>
	<citation>1496	6	1215</citation>
	<citation>1496	6	1215</citation>
	<citation>1531	6	1215</citation>
	<citation>1535	6	1215</citation>
	<citation>1565	6	1215</citation>
	<citation>1601	6	1215</citation>
	<citation>1602	6	1215</citation>
	<citation>1613	6	1215</citation>
	<citation>1614	6	1215</citation>
	<citation>1626	6	1215</citation>
	<citation>1641	6	1215</citation>
	<citation>1781	6	1215</citation>
	<citation>1787	6	1215</citation>
	<citation>1788	6	1215</citation>
	<citation>205	6	1215</citation>
	<citation>224	6	1215</citation>
	<citation>224	6	1215</citation>
	<citation>249	6	1215</citation>
	<citation>288	6	1215</citation>
	<citation>316	6	1215</citation>
	<citation>381	6	1215</citation>
	<citation>398	6	1215</citation>
	<citation>11	6	1215</citation>
	<citation>404	6	1215</citation>
	<citation>410	6	1215</citation>
	<citation>463	6	1215</citation>
	<citation>464	6	1215</citation>
	<citation>483	6	1215</citation>
	<citation>3184	6	1215</citation>
	<citation>3184	6	1215</citation>
	<citation>3188	6	1215</citation>
	<citation>584	6	1215</citation>
	<citation>600	6	1215</citation>
	<citation>680	6	1215</citation>
	<citation>691	6	1215</citation>
	<citation>763	6	1215</citation>
	<citation>763	6	1215</citation>
	<citation>799	6	1215</citation>
	<citation>799	6	1215</citation>
	</citations>
	</document>
	<document id= '1214'>
	<title>Some Experiments in Algebraic Manipulation by Computer</title>
	<abstract>A set of subroutines to allow algebraic manipulations on the IBM 7094 computer has been written  a List Processor, SLIP.  A series of four problems of increasing difficulty were solved using these routines.</abstract>
	<conference>CACM August, 1965</conference>
	<authors>
	<author>Lapidus, A.</author>
	<author>Goldstein, M.</author>
	</authors>
	<location>CA650810 JB March 6, 1978  8:10 PM</location>
	<citations>
	<citation>1024	4	1214</citation>
	<citation>1051	4	1214</citation>
	<citation>1098	4	1214</citation>
	<citation>1214	4	1214</citation>
	<citation>1214	4	1214</citation>
	<citation>1380	4	1214</citation>
	<citation>1388	4	1214</citation>
	<citation>1393	4	1214</citation>
	<citation>1396	4	1214</citation>
	<citation>1485	4	1214</citation>
	<citation>1487	4	1214</citation>
	<citation>1549	4	1214</citation>
	<citation>1570	4	1214</citation>
	<citation>1878	4	1214</citation>
	<citation>1946	4	1214</citation>
	<citation>1957	4	1214</citation>
	<citation>2168	4	1214</citation>
	<citation>2723	4	1214</citation>
	<citation>2857	4	1214</citation>
	<citation>3112	4	1214</citation>
	<citation>1132	5	1214</citation>
	<citation>1214	5	1214</citation>
	<citation>1214	5	1214</citation>
	<citation>1214	5	1214</citation>
	<citation>1396	5	1214</citation>
	<citation>731	5	1214</citation>
	<citation>964	6	1214</citation>
	<citation>1028	6	1214</citation>
	<citation>1029	6	1214</citation>
	<citation>1083	6	1214</citation>
	<citation>1132	6	1214</citation>
	<citation>1214	6	1214</citation>
	<citation>1278	6	1214</citation>
	<citation>1334	6	1214</citation>
	<citation>1365	6	1214</citation>
	<citation>1386	6	1214</citation>
	<citation>1387	6	1214</citation>
	<citation>1388	6	1214</citation>
	<citation>1392	6	1214</citation>
	<citation>1393	6	1214</citation>
	<citation>1394	6	1214</citation>
	<citation>1395	6	1214</citation>
	<citation>1396	6	1214</citation>
	<citation>1397	6	1214</citation>
	<citation>1496	6	1214</citation>
	<citation>284	6	1214</citation>
	<citation>407	6	1214</citation>
	<citation>3199	6	1214</citation>
	<citation>3200	6	1214</citation>
	<citation>3201	6	1214</citation>
	<citation>3202	6	1214</citation>
	<citation>3203	6	1214</citation>
	<citation>3204	6	1214</citation>
	<citation>561	6	1214</citation>
	<citation>730	6	1214</citation>
	</citations>
	</document>
	<document id= '1213'>
	<title>Dynamic Format Specifications</title>
	<abstract>The use and implementation of two new FORTRAN format conversions are discussed.  These format  types give the FORTRAN programmer control of input/output specifications at execution time.</abstract>
	<conference>CACM August, 1965</conference>
	<authors>
	<author>Ranelletti, J. E.</author>
	</authors>
	<location>CA650811 JB March 6, 1978  8:07 PM</location>
	<citations>
	<citation>1213	5	1213</citation>
	<citation>1213	5	1213</citation>
	<citation>1213	5	1213</citation>
	</citations>
	</document>
	<document id= '1212'>
	<title>Non-linear Extrapolation and Two-Point Boundary Value Problems</title>
	<abstract>It is suggested that the convergence properties of the usual Picard successive approximation  scheme may be improved through use of non-linrar extrapolation techniques.  A numerical example is provided.</abstract>
	<conference>CACM August, 1965</conference>
	<authors>
	<author>Bellman, R.</author>
	<author>Kagiada, H.</author>
	<author>Kalba, R.</author>
	</authors>
	<location>CA650812 JB March 6, 1978  8:05 PM</location>
	<citations>
	<citation>1212	5	1212</citation>
	<citation>1212	5	1212</citation>
	<citation>1212	5	1212</citation>
	</citations>
	</document>
	<document id= '1211'>
	<title>A Note on Storage of Strings</title>
	<abstract>A method for storing strings is described which uses blocks of indefinite size, and is therefore  completely dynamic.  Its relation to similar schemes is discussed.</abstract>
	<conference>CACM August, 1965</conference>
	<authors>
	<author>Berztiss, A. T.</author>
	</authors>
	<location>CA650813 JB March 6, 1978  8:02 PM</location>
	<citations>
	<citation>1211	4	1211</citation>
	<citation>1211	4	1211</citation>
	<citation>1549	4	1211</citation>
	<citation>1906	4	1211</citation>
	<citation>2902	4	1211</citation>
	<citation>2902	4	1211</citation>
	<citation>1051	5	1211</citation>
	<citation>1062	5	1211</citation>
	<citation>1211	5	1211</citation>
	<citation>1211	5	1211</citation>
	<citation>1211	5	1211</citation>
	<citation>2902	5	1211</citation>
	<citation>1051	6	1211</citation>
	<citation>1062	6	1211</citation>
	<citation>1184	6	1211</citation>
	<citation>1211	6	1211</citation>
	<citation>1552	6	1211</citation>
	<citation>1879	6	1211</citation>
	<citation>2435	6	1211</citation>
	<citation>2596	6	1211</citation>
	<citation>2734	6	1211</citation>
	<citation>2747	6	1211</citation>
	<citation>2768	6	1211</citation>
	</citations>
	</document>
	<document id= '1210'>
	<title>File-Handling Within FORTRAN</title>
	<abstract>This note describes some FORTRAN subroutines to facilitate handling of tape files.  They allow  symbolic naming of information files, without violating the casual scientific programmer's idea of simplicity.   Some comments on two years use of these subroutines are given.</abstract>
	<conference>CACM August, 1965</conference>
	<authors>
	<author>Harrison, M. C.</author>
	</authors>
	<location>CA650814 JB March 6, 1978  7:59 PM</location>
	<citations>
	<citation>1210	5	1210</citation>
	<citation>1210	5	1210</citation>
	<citation>1210	5	1210</citation>
	</citations>
	</document>
	<document id= '1209'>
	<citations>
	<citation>1209	5	1209</citation>
	<citation>1209	5	1209</citation>
	<citation>1209	5	1209</citation>
	</citations>
	<title>Negative and Zero Subscripts in Fortran II Programming for the IBM 1620</title>
	<conference>CACM August, 1965</conference>
	<authors>
	<author>Garber, M. S.</author>
	</authors>
	<location>CA650815 JB March 6, 1978  7:56 PM</location>
	</document>
	<document id= '1208'>
	<citations>
	<citation>1207	4	1208</citation>
	<citation>1208	4	1208</citation>
	<citation>3053	4	1208</citation>
	<citation>1208	5	1208</citation>
	<citation>1208	5	1208</citation>
	<citation>1208	5	1208</citation>
	<citation>1329	5	1208</citation>
	<citation>1409	5	1208</citation>
	<citation>1208	6	1208</citation>
	</citations>
	<title>Simulation of Computer Logic by Fortran Arithmetic</title>
	<conference>CACM August, 1965</conference>
	<authors>
	<author>Weingarten, F. W.</author>
	</authors>
	<location>CA650816 JB March 6, 1978  7:53 PM</location>
	</document>
	<document id= '1207'>
	<citations>
	<citation>1207	4	1207</citation>
	<citation>1208	4	1207</citation>
	<citation>3053	4	1207</citation>
	<citation>1207	5	1207</citation>
	<citation>1207	5	1207</citation>
	<citation>1207	5	1207</citation>
	<citation>1329	5	1207</citation>
	</citations>
	<title>Remarks on Simulation of Boolean Functions</title>
	<conference>CACM August, 1965</conference>
	<authors>
	<author>Dodd, G. G.</author>
	</authors>
	<location>CA650817 JB March 6, 1978  7:52 PM</location>
	</document>
	<document id= '1206'>
	<title>The Self-Judgment Method of Curve Fitting</title>
	<abstract>A computer-oriented method for processing and communicating numerical data is described.  The  Instrument Reliability Factors (IRF), which exactly define the limits of reliability of each measured  item of information, are used to compute the Maximum Permitted Error (MPE) associated with each values  of each ordinate.  The Self-Judgment Principle (SJP) is used to discard wrong information and to compute  mean values of the parameters and their MPE's in terms of the IRF.  Data compatibility tests with any  number of different equations can be made quickly.  Otherwise intractable problems are easily solved,  and the design of many experiments is greatly simplified.  The computational and mathematical techniques  used to reduce bias in the SJP are discussed.  Inadequacies in the statistical and graphical methods  of curve fitting are noted.</abstract>
	<conference>CACM August, 1965</conference>
	<authors>
	<author>DeMaine, P. A. D.</author>
	</authors>
	<location>CA650818 JB March 6, 1978  7:50 PM</location>
	<citations>
	<citation>1206	5	1206</citation>
	<citation>1206	5	1206</citation>
	<citation>1206	5	1206</citation>
	</citations>
	</document>
	<document id= '1205'>
	<citations>
	<citation>1107	4	1205</citation>
	<citation>1205	4	1205</citation>
	<citation>1205	4	1205</citation>
	<citation>1205	4	1205</citation>
	<citation>1205	4	1205</citation>
	<citation>1100	5	1205</citation>
	<citation>1104	5	1205</citation>
	<citation>1107	5	1205</citation>
	<citation>1205	5	1205</citation>
	<citation>1205	5	1205</citation>
	<citation>1205	5	1205</citation>
	<citation>1413	5	1205</citation>
	<citation>1654	5	1205</citation>
	<citation>1771	5	1205</citation>
	<citation>2478	5	1205</citation>
	<citation>68	5	1205</citation>
	<citation>1205	6	1205</citation>
	<citation>1205	6	1205</citation>
	<citation>1205	6	1205</citation>
	<citation>1205	6	1205</citation>
	<citation>1270	6	1205</citation>
	<citation>1654	6	1205</citation>
	<citation>1771	6	1205</citation>
	<citation>2329	6	1205</citation>
	</citations>
	<title>An Undergraduate Program in Computer Science-Preliminary Recommendations</title>
	<conference>CACM September, 1965</conference>
	<authors>
	</authors>
	<location>CA650901 JB March 6, 1978  7:43 PM</location>
	</document>
	<document id= '1204'>
	<citations>
	<citation>1204	5	1204</citation>
	<citation>1204	5	1204</citation>
	<citation>1204	5	1204</citation>
	</citations>
	<title>Character Structure and Character Parity Sense for Serial-by-Bit Data Communication in the American  Standard Code for Information Interchange (Proposed American Standard)</title>
	<conference>CACM September, 1965</conference>
	<location>CA650902 JB March 6, 1978  7:41 PM</location>
	</document>
	<document id= '1203'>
	<citations>
	<citation>1203	5	1203</citation>
	<citation>1203	5	1203</citation>
	<citation>1203	5	1203</citation>
	</citations>
	<title>Normdey (Algorithm 121 [G5])</title>
	<conference>CACM September, 1965</conference>
	<authors>
	<author>Pike, M. C.</author>
	</authors>
	<location>CA650903 JB March 6, 19787:37 PM</location>
	</document>
	<document id= '1202'>
	<citations>
	<citation>1202	5	1202</citation>
	<citation>1202	5	1202</citation>
	<citation>1202	5	1202</citation>
	</citations>
	<title>Normal Random (Algorithm 200 [G5])</title>
	<conference>CACM September, 1965</conference>
	<authors>
	<author>Pike, M. C.</author>
	</authors>
	<location>CA650904 JB March 6, 1978  7:36 PM</location>
	</document>
	<document id= '1201'>
	<citations>
	<citation>1201	5	1201</citation>
	<citation>1201	5	1201</citation>
	<citation>1201	5	1201</citation>
	</citations>
	<title>Generation of Permutations in Lexico-Graphical Order (Algorithm 202 [G6])</title>
	<conference>CACM September, 1965</conference>
	<authors>
	<author>Elliott, R. W.</author>
	</authors>
	<location>CA650905 JB March 6, 1978  7:35 PM</location>
	</document>
	<document id= '1200'>
	<title>On Reversible Subroutines and Computers that Run Backwards</title>
	<abstract>A computer design is describe which permits subroutines to be executed backward as well as  forward, either with their instructions unchanged or replaced with conjugate instructions.  It is shown  that using this concept a number of new subroutine types can be developed with rather unusual properties.   Since these properties are analogous to certain matrix operations, a parallel nomenclature is suggested  for their classification.</abstract>
	<conference>CACM September, 1965</conference>
	<authors>
	<author>Reily, E. D.</author>
	<author>Federighi, F. D.</author>
	</authors>
	<location>CA650906 JB March 6, 19787:33 PM</location>
	<citations>
	<citation>1200	5	1200</citation>
	<citation>1200	5	1200</citation>
	<citation>1200	5	1200</citation>
	<citation>1945	5	1200</citation>
	<citation>823	6	1200</citation>
	<citation>914	6	1200</citation>
	<citation>915	6	1200</citation>
	<citation>917	6	1200</citation>
	<citation>984	6	1200</citation>
	<citation>989	6	1200</citation>
	<citation>990	6	1200</citation>
	<citation>1012	6	1200</citation>
	<citation>1084	6	1200</citation>
	<citation>1098	6	1200</citation>
	<citation>1122	6	1200</citation>
	<citation>1138	6	1200</citation>
	<citation>1139	6	1200</citation>
	<citation>1141	6	1200</citation>
	<citation>1200	6	1200</citation>
	<citation>1223	6	1200</citation>
	<citation>1265	6	1200</citation>
	<citation>1336	6	1200</citation>
	<citation>1396	6	1200</citation>
	<citation>1455	6	1200</citation>
	<citation>1477	6	1200</citation>
	<citation>1487	6	1200</citation>
	<citation>1491	6	1200</citation>
	<citation>1496	6	1200</citation>
	<citation>483	6	1200</citation>
	<citation>584	6	1200</citation>
	<citation>669	6	1200</citation>
	<citation>680	6	1200</citation>
	<citation>763	6	1200</citation>
	</citations>
	</document>
	<document id= '1199'>
	<title>A Computer Center Simulation Project</title>
	<abstract>Today's computation centers are based on rapidly changing technologies of hardware and software  systems.  It is difficult, therefore, to base decisions on experience; in most instances, the benefits  of comparable experience for a given problem situation are not available.  In this paper, a mathematical  model of the Lockheed Central Computer Center is formulated that describes the operation of a computation  center in terms of information nets, decision processes, and control functions.  Experiments performed  with this model, the results of the experiments, and the application of the results are discussed.</abstract>
	<conference>CACM September, 1965</conference>
	<authors>
	<author>Hutchinson, G. K.</author>
	</authors>
	<location>CA650907JB March 6, 1978  7:29 PM</location>
	<citations>
	<citation>1199	5	1199</citation>
	<citation>1199	5	1199</citation>
	<citation>1199	5	1199</citation>
	</citations>
	</document>
	<document id= '1198'>
	<title>Solution of a Problem in Concurrent Programming Control</title>
	<abstract>A number of mainly independent sequential-cyclic processes with restricted means of communication  with each other can be made in such a way that at any moment one and only one of them is engaged in the  "critical section" of its cycle.</abstract>
	<conference>CACM September, 1965</conference>
	<authors>
	<author>Dijkstra, E. W.</author>
	</authors>
	<location>CA650908 JB March 6, 1978  7:24 PM</location>
	<citations>
	<citation>1198	5	1198</citation>
	<citation>1198	5	1198</citation>
	<citation>1198	5	1198</citation>
	<citation>1781	5	1198</citation>
	<citation>2150	5	1198</citation>
	<citation>2228	5	1198</citation>
	<citation>2256	5	1198</citation>
	<citation>2317	5	1198</citation>
	<citation>2342	5	1198</citation>
	<citation>2376	5	1198</citation>
	<citation>2618	5	1198</citation>
	<citation>3184	5	1198</citation>
	<citation>123	6	1198</citation>
	<citation>196	6	1198</citation>
	<citation>919	6	1198</citation>
	<citation>990	6	1198</citation>
	<citation>1007	6	1198</citation>
	<citation>1046	6	1198</citation>
	<citation>1131	6	1198</citation>
	<citation>1139	6	1198</citation>
	<citation>1140	6	1198</citation>
	<citation>1149	6	1198</citation>
	<citation>1198	6	1198</citation>
	<citation>1198	6	1198</citation>
	<citation>1198	6	1198</citation>
	<citation>1198	6	1198</citation>
	<citation>1198	6	1198</citation>
	<citation>1198	6	1198</citation>
	<citation>1198	6	1198</citation>
	<citation>1198	6	1198</citation>
	<citation>1198	6	1198</citation>
	<citation>1215	6	1198</citation>
	<citation>1223	6	1198</citation>
	<citation>1265	6	1198</citation>
	<citation>1303	6	1198</citation>
	<citation>1323	6	1198</citation>
	<citation>1338	6	1198</citation>
	<citation>1338	6	1198</citation>
	<citation>1338	6	1198</citation>
	<citation>1338	6	1198</citation>
	<citation>1338	6	1198</citation>
	<citation>1358	6	1198</citation>
	<citation>1366	6	1198</citation>
	<citation>1421	6	1198</citation>
	<citation>1460	6	1198</citation>
	<citation>1462	6	1198</citation>
	<citation>1463	6	1198</citation>
	<citation>1467	6	1198</citation>
	<citation>1468	6	1198</citation>
	<citation>1477	6	1198</citation>
	<citation>1491	6	1198</citation>
	<citation>1496	6	1198</citation>
	<citation>1531	6	1198</citation>
	<citation>1535	6	1198</citation>
	<citation>1565	6	1198</citation>
	<citation>1572	6	1198</citation>
	<citation>1601	6	1198</citation>
	<citation>1602	6	1198</citation>
	<citation>1613	6	1198</citation>
	<citation>1614	6	1198</citation>
	<citation>1626	6	1198</citation>
	<citation>1641	6	1198</citation>
	<citation>1693	6	1198</citation>
	<citation>1749	6	1198</citation>
	<citation>1749	6	1198</citation>
	<citation>1749	6	1198</citation>
	<citation>1749	6	1198</citation>
	<citation>1749	6	1198</citation>
	<citation>1749	6	1198</citation>
	<citation>1753	6	1198</citation>
	<citation>1781	6	1198</citation>
	<citation>1787	6	1198</citation>
	<citation>1788	6	1198</citation>
	<citation>205	6	1198</citation>
	<citation>224	6	1198</citation>
	<citation>249	6	1198</citation>
	<citation>1877	6	1198</citation>
	<citation>288	6	1198</citation>
	<citation>1960	6	1198</citation>
	<citation>316	6	1198</citation>
	<citation>381	6	1198</citation>
	<citation>398	6	1198</citation>
	<citation>11	6	1198</citation>
	<citation>2126	6	1198</citation>
	<citation>2148	6	1198</citation>
	<citation>2256	6	1198</citation>
	<citation>404	6	1198</citation>
	<citation>410	6	1198</citation>
	<citation>463	6	1198</citation>
	<citation>464	6	1198</citation>
	<citation>483	6	1198</citation>
	<citation>3184	6	1198</citation>
	<citation>3188	6	1198</citation>
	<citation>557	6	1198</citation>
	<citation>584	6	1198</citation>
	<citation>600	6	1198</citation>
	<citation>680	6	1198</citation>
	<citation>691	6	1198</citation>
	<citation>763	6	1198</citation>
	<citation>799	6	1198</citation>
	</citations>
	</document>
	<document id= '1197'>
	<title>Finding Zeros of a Polynomial by the Q-D Algorithm</title>
	<abstract>A method which finds simultaneously all the zeros of a polynomial, developed by H. Rutishauser,  has been tested on a number of polynomials with real coefficients.  This slowly converging method (the  Quotient-Difference (Q-D) algorithm) provides starting values for a Newton or a Bairstow algorithm for  more rapid convergence.  Necessary and sufficient conditions for the existence of the Q-D scheme are  not completely known; however, failure may occur when zeros have equal, or nearly equal magnitudes.   Success was achieved, in most of the cases tried, with the failures usually traceable to the equal magnitude  difficulty.  In some cases, computer roundoff may result in errors which spoil the scheme.  Even if the  Q-D algorithm does not give all the zeros, it will usually find a majority of them.</abstract>
	<conference>CACM September, 1965</conference>
	<authors>
	<author>Henrich, P.</author>
	<author>Watkins, B. O.</author>
	</authors>
	<location>CA650908 JB March 6, 1978  7:21 PM</location>
	<citations>
	<citation>1197	5	1197</citation>
	<citation>1197	5	1197</citation>
	<citation>1197	5	1197</citation>
	<citation>1524	5	1197</citation>
	<citation>879	6	1197</citation>
	<citation>1197	6	1197</citation>
	<citation>311	6	1197</citation>
	</citations>
	</document>
	<document id= '1196'>
	<title>Applications of Differential Equations in General Problem Solving</title>
	<abstract>A large class of problems leading to digital computer processing can be formulated in terms  of the numerical solution of systems of ordinary differential equations.  Powerful methods are in existence  for the solution of such systems.  A good general purpose routine for the solution of such systems furnishes  a powerful tool for processing many problems.  This is true from the point of view of ease of programming,  ease of debugging, and minimization of computer time.  A number of examples are discussed in detail.</abstract>
	<conference>CACM September, 1965</conference>
	<authors>
	<author>Klopfenstein, R. W.</author>
	</authors>
	<location>CA650910 JB March 6, 1978  7:16 PM</location>
	<citations>
	<citation>1196	5	1196</citation>
	<citation>1196	5	1196</citation>
	<citation>1196	5	1196</citation>
	</citations>
	</document>
	<document id= '1195'>
	<title>UPLIFTS-University of Pittsburgh Linear File Tandem System</title>
	<abstract>A series of computer programs has been developed and is now operational for processing the  National Aeronautics and Space Administration linear file system on an IBM 1401-7090 combined data processing  system.  The program are note-worthy in that they create fixed length logical records and fixed length  blocks from variable length source data, and format the output for optimization of processing on the  IBM 7090 system.  The programs are completely self-checking and test for both validity and accuracy of  the input materials as provided by the National Aeronautics and Space Administration.</abstract>
	<conference>CACM September, 1965</conference>
	<authors>
	<author>Canter, J. D.</author>
	<author>Donaghey, C. E.</author>
	</authors>
	<location>CA650911 JB March 6, 1978  7:10 PM</location>
	<citations>
	<citation>1195	5	1195</citation>
	<citation>1195	5	1195</citation>
	<citation>1195	5	1195</citation>
	</citations>
	</document>
	<document id= '1194'>
	<title>Establishment of the ACM Repository and Principles of the IR System Applied to its Operation</title>
	<abstract>The history of the establishment of the ACM Repository at the Moore School, University of Pennsylvania,  is reviewed briefly.  Two principles are presented as paramount in the provision of information services:  (1) easy accessibility to the information files by users unfamiliar with file organization, and (2) value  of service exceeding user costs.  These principles serve as guides in mechanizing the ACM Repository.   The main features of the information system are direct user access via on-line teletypewriter console,  direct user access to all details of the system organization, unrestricted and expandable search vocabulary,  user access through many facets of document indexing, and stochastic search through linked index terms  and other file relationships.  The first contribution to the ACM Repository consisted of 315 documents,  relating primarily to early research on compilers.  These documents have been cataloged and indexed and  the catalog is scheduled to appear in Computing Reviews.  The indexing system is described in detail.   The Main Catalog is used to describe the documents, and inverted lists are provided by the Repository  system for retrieval by concept coordination.</abstract>
	<conference>CACM October, 1965</conference>
	<authors>
	<author>Rubinoff, M.</author>
	</authors>
	<location>CA651001 JB March 6, 1978  7:03 PM</location>
	<citations>
	<citation>1194	5	1194</citation>
	<citation>1194	5	1194</citation>
	<citation>1194	5	1194</citation>
	<citation>1681	5	1194</citation>
	<citation>1699	5	1194</citation>
	<citation>1194	6	1194</citation>
	<citation>1194	6	1194</citation>
	<citation>1324	6	1194</citation>
	<citation>1681	6	1194</citation>
	</citations>
	</document>
	<document id= '1193'>
	<citations>
	<citation>1193	5	1193</citation>
	<citation>1193	5	1193</citation>
	<citation>1193	5	1193</citation>
	</citations>
	<title>Gomory 1 (Algorithm 263 [H])</title>
	<conference>CACM October, 1965</conference>
	<authors>
	<author>Langmaack, H.</author>
	</authors>
	<location>CA651002 JB March 6, 1978  6:54 PM</location>
	</document>
	<document id= '1192'>
	<citations>
	<citation>1192	5	1192</citation>
	<citation>1192	5	1192</citation>
	<citation>1192	5	1192</citation>
	</citations>
	<title>Interpolation in a Table (Algorithm 264 [E1])</title>
	<conference>CACM October, 1965</conference>
	<authors>
	<author>Stafford, J.</author>
	</authors>
	<location>CA651003 JB March 6, 1978  6:52 PM</location>
	</document>
	<document id= '1191'>
	<citations>
	<citation>1191	5	1191</citation>
	<citation>1191	5	1191</citation>
	<citation>1191	5	1191</citation>
	<citation>1836	5	1191</citation>
	<citation>2340	5	1191</citation>
	<citation>1191	6	1191</citation>
	<citation>1191	6	1191</citation>
	<citation>1477	6	1191</citation>
	<citation>1491	6	1191</citation>
	<citation>1491	6	1191</citation>
	<citation>1683	6	1191</citation>
	<citation>1781	6	1191</citation>
	<citation>1836	6	1191</citation>
	<citation>577	6	1191</citation>
	</citations>
	<title>Find Precedence Functions (Algorithm 265 [L2])</title>
	<conference>CACM October, 1965</conference>
	<authors>
	<author>Wirth, N.</author>
	</authors>
	<location>CA651004 JB March 6, 1978  6:52 PM</location>
	</document>
	<document id= '1190'>
	<citations>
	<citation>1190	4	1190</citation>
	<citation>1190	5	1190</citation>
	<citation>1190	5	1190</citation>
	<citation>1190	5	1190</citation>
	<citation>1663	5	1190</citation>
	<citation>2195	5	1190</citation>
	<citation>2679	5	1190</citation>
	<citation>456	5	1190</citation>
	<citation>970	6	1190</citation>
	<citation>1175	6	1190</citation>
	<citation>1190	6	1190</citation>
	<citation>1190	6	1190</citation>
	<citation>1190	6	1190</citation>
	<citation>1228	6	1190</citation>
	<citation>1648	6	1190</citation>
	<citation>1969	6	1190</citation>
	<citation>1997	6	1190</citation>
	<citation>308	6	1190</citation>
	<citation>2042	6	1190</citation>
	<citation>3187	6	1190</citation>
	<citation>507	6	1190</citation>
	<citation>716	6	1190</citation>
	<citation>783	6	1190</citation>
	</citations>
	<title>Pseudo-Random Numbers (Algorithm 266 [G5])</title>
	<conference>CACM October, 1965</conference>
	<authors>
	<author>Pike, M. C.</author>
	<author>Hill, I. D.</author>
	</authors>
	<location>CA651005 JB March 6, 1978  6:51 PM</location>
	</document>
	<document id= '1189'>
	<citations>
	<citation>1189	5	1189</citation>
	<citation>1189	5	1189</citation>
	<citation>1189	5	1189</citation>
	<citation>1716	5	1189</citation>
	<citation>1189	6	1189</citation>
	</citations>
	<title>Random Normal Deviate (Algorithm 267 [G5])</title>
	<conference>CACM October, 1965</conference>
	<authors>
	<author>Pike, M. C.</author>
	</authors>
	<location>CA651006 JB March 6, 1978  6:49 PM</location>
	</document>
	<document id= '1188'>
	<title>An ALGOL-like Computer Design Language</title>
	<abstract>The idea of constructing a computer design language by making use of an ALGOL-like programming  language is presented.  A computer designer can benefit from using a design language at a higher level  just as a computer user can benefit from a higher level programming language.  The purposes and requirements  of the design language are enumerated.  To achieve most of the purposes a translator is required to translate  a design of computer logic into a set of Boolean equations.  The design language is presented in terms  of vocabulary, statements, sequences and microprogram.  Included are examples of identifiers, expressions  with both unary and binary operators, declaration statements, transfer statements, terminal statements,  exchange statements, if statements, do statements, go to statements, several sequences and a microprogram.</abstract>
	<conference>CACM October, 1965</conference>
	<authors>
	<author>Chu, Y.</author>
	</authors>
	<location>CA651007 JB March 6, 1978  6:48 PM</location>
	<citations>
	<citation>249	4	1188</citation>
	<citation>254	4	1188</citation>
	<citation>272	4	1188</citation>
	<citation>1102	4	1188</citation>
	<citation>1109	4	1188</citation>
	<citation>1140	4	1188</citation>
	<citation>1173	4	1188</citation>
	<citation>1188	4	1188</citation>
	<citation>1188	4	1188</citation>
	<citation>1306	4	1188</citation>
	<citation>1464	4	1188</citation>
	<citation>1491	4	1188</citation>
	<citation>1767	4	1188</citation>
	<citation>1781	4	1188</citation>
	<citation>1787	4	1188</citation>
	<citation>1949	4	1188</citation>
	<citation>321	4	1188</citation>
	<citation>2059	4	1188</citation>
	<citation>2126	4	1188</citation>
	<citation>435	4	1188</citation>
	<citation>437	4	1188</citation>
	<citation>463	4	1188</citation>
	<citation>483	4	1188</citation>
	<citation>491	4	1188</citation>
	<citation>2732	4	1188</citation>
	<citation>560	4	1188</citation>
	<citation>583	4	1188</citation>
	<citation>3073	4	1188</citation>
	<citation>627	4	1188</citation>
	<citation>631	4	1188</citation>
	<citation>632	4	1188</citation>
	<citation>642	4	1188</citation>
	<citation>644	4	1188</citation>
	<citation>653	4	1188</citation>
	<citation>680	4	1188</citation>
	<citation>761	4	1188</citation>
	<citation>762	4	1188</citation>
	<citation>763	4	1188</citation>
	<citation>123	4	1188</citation>
	<citation>140	4	1188</citation>
	<citation>919	4	1188</citation>
	<citation>989	4	1188</citation>
	<citation>196	5	1188</citation>
	<citation>1188	5	1188</citation>
	<citation>1188	5	1188</citation>
	<citation>1188	5	1188</citation>
	<citation>642	5	1188</citation>
	</citations>
	</document>
	<document id= '1187'>
	<citations>
	<citation>1187	5	1187</citation>
	<citation>1187	5	1187</citation>
	<citation>1187	5	1187</citation>
	</citations>
	<title>Note on an ASCII-Octal Code Table (Standards)</title>
	<conference>CACM October, 1965</conference>
	<authors>
	<author>Crosby, W. S.</author>
	</authors>
	<location>CA651008 JB March 6, 1978  6:42 PM</location>
	</document>
	<document id= '1186'>
	<title>Recursive Solution of a Class Of Combinatorial Problems: An Example</title>
	<abstract>Combinatorial problems requiring the selection of n elements from a set of m elements may be  solved by a recursion process analogous to that for computing binomial coefficients.  Several specific  problems are analyzed, the general technique is exposed, and an ALGOL program is developed for one of  the problems.</abstract>
	<conference>CACM October, 1965</conference>
	<authors>
	</authors>
	<location>CA651009 JB March 6, 1978  6:40 PM</location>
	<citations>
	<citation>1186	5	1186</citation>
	<citation>1186	5	1186</citation>
	<citation>1186	5	1186</citation>
	</citations>
	</document>
	<document id= '1185'>
	<title>A program to Solve the Pentomino Problem by the Recursive Use of Macros</title>
	<abstract>A coding technique is described in which certain macro-instructions are given lists as arguments  and are thereby used recursively.  The discussion covers primarily an example in which the technique  is used to solve the pentomino problem-the problem of fitting 12 pentominos without overlapping into  a plane area formed of 60 elemental squares.</abstract>
	<conference>CACM October, 1965</conference>
	<authors>
	<author>Fletcher, J. G.</author>
	</authors>
	<location>CA651010 JB March 6, 1978  6:37 PM</location>
	<citations>
	<citation>1185	5	1185</citation>
	<citation>1185	5	1185</citation>
	<citation>1185	5	1185</citation>
	<citation>1531	5	1185</citation>
	<citation>2707	5	1185</citation>
	<citation>2753	5	1185</citation>
	<citation>1185	6	1185</citation>
	<citation>1185	6	1185</citation>
	<citation>1185	6	1185</citation>
	<citation>1455	6	1185</citation>
	</citations>
	</document>
	<document id= '1184'>
	<title>A Fast Storage Allocator</title>
	<abstract>A fast storage bookkeeping method is described which is particularly appropriate for list-structure  operations and other situations involving many sizes of blocks that are fixed in size and location.    This scheme, used in the LLLLLL or L6 (Bell Telephone Laboratories Low-Level List Language), makes available  blocks of computer registers in several different sizes: the smaller blocks are obtained by successively  splitting larger ones in half, and the larger blocks are reconstituted if and when their parts are simultaneously  free.</abstract>
	<conference>CACM October, 1965</conference>
	<authors>
	<author>Knowlton, K.C.</author>
	</authors>
	<location>CA651011 JB March 6, 1978  6:35 PM</location>
	<citations>
	<citation>1184	5	1184</citation>
	<citation>1184	5	1184</citation>
	<citation>1184	5	1184</citation>
	<citation>1389	5	1184</citation>
	<citation>1552	5	1184</citation>
	<citation>2162	5	1184</citation>
	<citation>2435	5	1184</citation>
	<citation>2596	5	1184</citation>
	<citation>2768	5	1184</citation>
	<citation>2845	5	1184</citation>
	<citation>2902	5	1184</citation>
	<citation>2955	5	1184</citation>
	<citation>1051	6	1184</citation>
	<citation>1062	6	1184</citation>
	<citation>1184	6	1184</citation>
	<citation>1184	6	1184</citation>
	<citation>1184	6	1184</citation>
	<citation>1184	6	1184</citation>
	<citation>1184	6	1184</citation>
	<citation>1184	6	1184</citation>
	<citation>1184	6	1184</citation>
	<citation>1184	6	1184</citation>
	<citation>1184	6	1184</citation>
	<citation>1211	6	1184</citation>
	<citation>1389	6	1184</citation>
	<citation>1421	6	1184</citation>
	<citation>1552	6	1184</citation>
	<citation>1879	6	1184</citation>
	<citation>1879	6	1184</citation>
	<citation>378	6	1184</citation>
	<citation>2435	6	1184</citation>
	<citation>2435	6	1184</citation>
	<citation>2435	6	1184</citation>
	<citation>2435	6	1184</citation>
	<citation>2435	6	1184</citation>
	<citation>2596	6	1184</citation>
	<citation>2596	6	1184</citation>
	<citation>2598	6	1184</citation>
	<citation>2734	6	1184</citation>
	<citation>2736	6	1184</citation>
	<citation>2747	6	1184</citation>
	<citation>2747	6	1184</citation>
	<citation>2747	6	1184</citation>
	<citation>2768	6	1184</citation>
	<citation>2768	6	1184</citation>
	<citation>2773	6	1184</citation>
	</citations>
	</document>
	<document id= '1183'>
	<title>A Note on the Use of a Digital Computer for Doing Tedious Algebra and Programming</title>
	<abstract>A special purpose compiler was written with FORTRAN II language and made possible the writing  of very long programs by the computer.  The procedure is based on a straight-forward use of FORMAT statements  for generating machine-written programs.</abstract>
	<conference>CACM October, 1965</conference>
	<authors>
	<author>Veronis, G.</author>
	</authors>
	<location>CA651012 JB March 6, 1978  6:31 PM</location>
	<citations>
	<citation>1183	5	1183</citation>
	<citation>1183	5	1183</citation>
	<citation>1183	5	1183</citation>
	</citations>
	</document>
	<document id= '1182'>
	<title>Contextual Correlates of Synonymy</title>
	<abstract>Experimental corroboration was obtained for the hypothesis that the proportion of words common  to the contexts of word A and to the contexts of word B is a function of the degree to which A and B  are similar in meaning.  The shapes of the functions, however, indicate that similarity of context is  reliable as criterion only for detecting pairs of words that are very similar in meaning.</abstract>
	<conference>CACM October, 1965</conference>
	<authors>
	<author>Rubenstein, H.</author>
	<author>Goodenough, J. B.</author>
	</authors>
	<location>CA651013 JB March 6, 1978  6:29 PM</location>
	<citations>
	<citation>1182	5	1182</citation>
	<citation>1182	5	1182</citation>
	<citation>1182	5	1182</citation>
	</citations>
	</document>
	<document id= '1181'>
	<title>A Simple Data Transmission System Using the Office Telephone</title>
	<abstract>A method has evolved for transmitting data of a type originating in many laboratory situation  direct to a central computer.  The method requires almost no specialized equipment and uses any ordinary  telephone on a "callup" basis.  Present applications include cardiac-output calculations, radio-activity  tracer studies and neurophysiology time-sequence studies of nerve impulses.</abstract>
	<conference>CACM October, 1965</conference>
	<authors>
	<author>Neilsen, I. R.</author>
	</authors>
	<location>CA651014 JB March 6, 1978  6:25 PM</location>
	<citations>
	<citation>1181	4	1181</citation>
	<citation>1181	5	1181</citation>
	<citation>1181	5	1181</citation>
	<citation>1181	5	1181</citation>
	<citation>698	5	1181</citation>
	</citations>
	</document>
	<document id= '1180'>
	<title>AXLE: An Axiomatic Language for String Transformations</title>
	<abstract>AXLE is a language designed for data manipulation.  Data arranged in a linear form in a workspace  is transformed according to a table of axioms, called imperatives.  A transformation consists of a matching  procedure, which decides where an imperative is applicable, and a replacement procedure that modifies  that part of the workspace.  Imperatives are applied in accordance with definitions of symbolic terms,  presented systematically in an assertion table.  The process of definition includes the special case  of recursive assertions.  Several complete programs of imperatives are given to show a few applications of the language.</abstract>
	<conference>CACM November, 1965</conference>
	<authors>
	<author>Cohen, I.</author>
	<author>Wegstein, J. H.</author>
	</authors>
	<location>CA651101 JB March 6, 1978  6:22 PM</location>
	<citations>
	<citation>1180	5	1180</citation>
	<citation>1180	5	1180</citation>
	<citation>1180	5	1180</citation>
	<citation>1395	5	1180</citation>
	<citation>1706	5	1180</citation>
	<citation>1180	6	1180</citation>
	<citation>1180	6	1180</citation>
	<citation>1395	6	1180</citation>
	<citation>210	6	1180</citation>
	</citations>
	</document>
	<document id= '1179'>
	<title>PUFFT-The Purdue University Fast FORTRAN Translator</title>
	<abstract>A core resident, compile-and-go system designed for the IBM 7090/7094 computer is described.   In little more than half of the 32k word core memory PUFFT provides a monitor for job sequencing, a  translator for the full FORTRAN IV language, the FORTRAN subroutine library, an input--output system  for use at compile time and at execute time, and a rather elaborate diagnostic message writing routine.   Batches of small- and medium-sized FORTRAN IV source language programs are processed at very high speeds.   Language compatibility has been maintained so that programs may be debugged in the PUFFT system and  then recompiled and run in the IBJOB-IBFTC system supplied by the manufacturer.</abstract>
	<conference>CACM November, 1965</conference>
	<authors>
	<author>Rosen, S.</author>
	<author>Spurgeon, A.</author>
	<author>Donnelly, J. K.</author>
	</authors>
	<location>CA651102 JB March 6, 1978  6:17 PM</location>
	<citations>
	<citation>1134	4	1179</citation>
	<citation>1179	4	1179</citation>
	<citation>1179	4	1179</citation>
	<citation>1288	4	1179</citation>
	<citation>1544	4	1179</citation>
	<citation>1646	4	1179</citation>
	<citation>1861	4	1179</citation>
	<citation>2111	4	1179</citation>
	<citation>2534	4	1179</citation>
	<citation>2556	4	1179</citation>
	<citation>2650	4	1179</citation>
	<citation>1179	5	1179</citation>
	<citation>1179	5	1179</citation>
	<citation>1179	5	1179</citation>
	<citation>1646	5	1179</citation>
	<citation>1647	5	1179</citation>
	<citation>408	5	1179</citation>
	<citation>830	5	1179</citation>
	<citation>830	6	1179</citation>
	<citation>987	6	1179</citation>
	<citation>1072	6	1179</citation>
	<citation>1179	6	1179</citation>
	<citation>1179	6	1179</citation>
	<citation>1647	6	1179</citation>
	<citation>224	6	1179</citation>
	<citation>680	6	1179</citation>
	</citations>
	</document>
	<document id= '1178'>
	<citations>
	<citation>1178	5	1178</citation>
	<citation>1178	5	1178</citation>
	<citation>1178	5	1178</citation>
	</citations>
	<title>ALGOL 60 Reference Language Editor (Algorithm 268 [R2])</title>
	<conference>CACM November, 1965</conference>
	<authors>
	<author>McKeeman, W. M.</author>
	</authors>
	<location>CA651103 JB March 6, 1978  5:06 PM</location>
	</document>
	<document id= '1177'>
	<citations>
	<citation>1177	4	1177</citation>
	<citation>806	4	1177</citation>
	<citation>1177	5	1177</citation>
	<citation>1177	5	1177</citation>
	<citation>1177	5	1177</citation>
	<citation>1931	5	1177</citation>
	<citation>1946	5	1177</citation>
	<citation>454	5	1177</citation>
	<citation>878	6	1177</citation>
	<citation>902	6	1177</citation>
	<citation>1093	6	1177</citation>
	<citation>1177	6	1177</citation>
	<citation>1177	6	1177</citation>
	<citation>1387	6	1177</citation>
	<citation>1393	6	1177</citation>
	<citation>311	6	1177</citation>
	<citation>360	6	1177</citation>
	<citation>731	6	1177</citation>
	</citations>
	<title>Determinant Evaluation (Algorithm 269 [F3])</title>
	<conference>CACM November, 1965</conference>
	<authors>
	<author>Pfann, J.</author>
	</authors>
	<location>CA651104 JB March 6, 1978  5:05 PM</location>
	</document>
	<document id= '1176'>
	<citations>
	<citation>1176	5	1176</citation>
	<citation>1176	5	1176</citation>
	<citation>1176	5	1176</citation>
	</citations>
	<title>Finding Eigenvectors by Gaussian Elimination (Algorithm 270 [F2])</title>
	<conference>CACM November, 1965</conference>
	<authors>
	<author>Newhouse, A.</author>
	</authors>
	<location>CA651105 JB March 6, 1978  5:03 PM</location>
	</document>
	<document id= '1175'>
	<citations>
	<citation>1175	4	1175</citation>
	<citation>1175	4	1175</citation>
	<citation>1919	4	1175</citation>
	<citation>1919	4	1175</citation>
	<citation>1969	4	1175</citation>
	<citation>1997	4	1175</citation>
	<citation>2017	4	1175</citation>
	<citation>2041	4	1175</citation>
	<citation>2191	4	1175</citation>
	<citation>2216	4	1175</citation>
	<citation>2388	4	1175</citation>
	<citation>2679	4	1175</citation>
	<citation>3054	4	1175</citation>
	<citation>3121	4	1175</citation>
	<citation>1175	5	1175</citation>
	<citation>1175	5	1175</citation>
	<citation>1175	5	1175</citation>
	<citation>1919	5	1175</citation>
	<citation>1969	5	1175</citation>
	<citation>308	5	1175</citation>
	<citation>2118	5	1175</citation>
	<citation>2348	5	1175</citation>
	<citation>2679	5	1175</citation>
	<citation>3054	5	1175</citation>
	<citation>864	5	1175</citation>
	<citation>864	6	1175</citation>
	<citation>970	6	1175</citation>
	<citation>1175	6	1175</citation>
	<citation>1175	6	1175</citation>
	<citation>1175	6	1175</citation>
	<citation>1175	6	1175</citation>
	<citation>1175	6	1175</citation>
	<citation>1175	6	1175</citation>
	<citation>1190	6	1175</citation>
	<citation>1228	6	1175</citation>
	<citation>1880	6	1175</citation>
	<citation>1919	6	1175</citation>
	<citation>1969	6	1175</citation>
	<citation>1969	6	1175</citation>
	<citation>1980	6	1175</citation>
	<citation>1997	6	1175</citation>
	<citation>1997	6	1175</citation>
	<citation>307	6	1175</citation>
	<citation>308	6	1175</citation>
	<citation>308	6	1175</citation>
	<citation>308	6	1175</citation>
	<citation>308	6	1175</citation>
	<citation>309	6	1175</citation>
	<citation>309	6	1175</citation>
	<citation>2017	6	1175</citation>
	<citation>2042	6	1175</citation>
	<citation>2679	6	1175</citation>
	<citation>74	6	1175</citation>
	<citation>3187	6	1175</citation>
	<citation>3187	6	1175</citation>
	<citation>507	6	1175</citation>
	<citation>716	6	1175</citation>
	<citation>776	6	1175</citation>
	<citation>783	6	1175</citation>
	</citations>
	<title>Quickersort (Algorithm 271 [M1])</title>
	<conference>CACM November, 1965</conference>
	<authors>
	<author>Scowen, R. S.</author>
	</authors>
	<location>CA651106 JB March 6, 1978  5:02 PM</location>
	</document>
	<document id= '1174'>
	<citations>
	<citation>1174	5	1174</citation>
	<citation>1174	5	1174</citation>
	<citation>1174	5	1174</citation>
	</citations>
	<title>Inverse Permutation (Algorithm 250 [G6])</title>
	<conference>CACM November, 1965</conference>
	<authors>
	<author>Medlock, C. W.</author>
	</authors>
	<location>CA651107 JB March 6, 1978  5:01 PM</location>
	</document>
	<document id= '1173'>
	<title>The Performance of a System for Automatic Segmentation of Programs Within an ALGOL Compiler (GIER  ALGOL)</title>
	<abstract>The GIER ALGOL compiler makes use of an automatic system for handling the transfers of program  segments from the drum store to the core store at program execution time.  The logic of this system is  described. The performance of the system is discussed, primarily on the basis of execution times related  to two specific programs.  This discussion concludes with an assessment of the potential gains of various  ways of improving the system.</abstract>
	<conference>CACM November, 1965</conference>
	<authors>
	<author>Naur, P.</author>
	</authors>
	<location>CA651108 JB March 6, 1978  5:00 PM</location>
	<citations>
	<citation>1173	4	1173</citation>
	<citation>1188	4	1173</citation>
	<citation>1173	5	1173</citation>
	<citation>1173	5	1173</citation>
	<citation>1173	5	1173</citation>
	<citation>1774	5	1173</citation>
	<citation>2343	5	1173</citation>
	<citation>642	5	1173</citation>
	<citation>800	6	1173</citation>
	<citation>1173	6	1173</citation>
	<citation>1173	6	1173</citation>
	<citation>1774	6	1173</citation>
	<citation>1845	6	1173</citation>
	<citation>271	6	1173</citation>
	</citations>
	</document>
	<document id= '1172'>
	<title>Conversion of Limited-Entry Decision Tables to Computer Programs</title>
	<abstract>Decision tables are useful for describing a set of complex decision rules based on given sets  of conditions.  Algorithms that can efficiently convert the tables into computer programs will extend  the usefulness of decision tables to computer users.  Two such algorithms, based on work done by M. S.  Montalbano, are described and extended here to handle dashes and ELSE-decision rules.  The first algorithm  minimizes the computer storage space required for the resultant program, the second minimizes computer  running time. During the conversion process, both pinpoint any contradictions or redundancies among the  rules in a table.</abstract>
	<conference>CACM November, 1965</conference>
	<authors>
	<author>Pollack, S. L.</author>
	</authors>
	<location>CA651109 JB March 6, 1978  4:56 PM</location>
	<citations>
	<citation>1172	5	1172</citation>
	<citation>1172	5	1172</citation>
	<citation>1172	5	1172</citation>
	<citation>1354	5	1172</citation>
	<citation>2053	5	1172</citation>
	<citation>2220	5	1172</citation>
	<citation>2273	5	1172</citation>
	<citation>2453	5	1172</citation>
	<citation>2598	5	1172</citation>
	<citation>2726	5	1172</citation>
	<citation>2856	5	1172</citation>
	<citation>1172	6	1172</citation>
	<citation>1172	6	1172</citation>
	<citation>1172	6	1172</citation>
	<citation>1172	6	1172</citation>
	<citation>1172	6	1172</citation>
	<citation>1172	6	1172</citation>
	<citation>1172	6	1172</citation>
	<citation>1172	6	1172</citation>
	<citation>1237	6	1172</citation>
	<citation>1237	6	1172</citation>
	<citation>1237	6	1172</citation>
	<citation>1237	6	1172</citation>
	<citation>1327	6	1172</citation>
	<citation>1327	6	1172</citation>
	<citation>1327	6	1172</citation>
	<citation>1327	6	1172</citation>
	<citation>1327	6	1172</citation>
	<citation>1327	6	1172</citation>
	<citation>1354	6	1172</citation>
	<citation>1354	6	1172</citation>
	<citation>1354	6	1172</citation>
	<citation>1354	6	1172</citation>
	<citation>1354	6	1172</citation>
	<citation>1354	6	1172</citation>
	<citation>1488	6	1172</citation>
	<citation>1489	6	1172</citation>
	<citation>1489	6	1172</citation>
	<citation>1548	6	1172</citation>
	<citation>1548	6	1172</citation>
	<citation>1548	6	1172</citation>
	<citation>1684	6	1172</citation>
	<citation>250	6	1172</citation>
	<citation>2053	6	1172</citation>
	<citation>2053	6	1172</citation>
	<citation>2053	6	1172</citation>
	<citation>2220	6	1172</citation>
	<citation>2220	6	1172</citation>
	<citation>2220	6	1172</citation>
	<citation>2220	6	1172</citation>
	<citation>2220	6	1172</citation>
	<citation>2221	6	1172</citation>
	<citation>2263	6	1172</citation>
	<citation>2263	6	1172</citation>
	<citation>2453	6	1172</citation>
	<citation>2453	6	1172</citation>
	<citation>2598	6	1172</citation>
	<citation>2691	6	1172</citation>
	<citation>753	6	1172</citation>
	</citations>
	</document>
	<document id= '1171'>
	<title>A Comparison of the Primal-Simplex and Primal-Dual Algorithms for Linear Programming</title>
	<abstract>A statistical comparison of the primal-dual and the more commonly used primal-simplex algorithm  for solving linear programming problems has been made under the assumption of starting with a full artificial  basis.  Under these conditions the primal-dual method shows a statistically significant superiority on  randomly generated problems.  It has also been found, via a regression analysis, that the relevant parameters  in determining the difference in the number of iterations between the algorithms is not only the number  of constraints and the number of variables but also the ratio of the latter to the former.</abstract>
	<conference>CACM November, 1965</conference>
	<authors>
	<author>Mueller, R. K.</author>
	<author>Cooper, L.</author>
	</authors>
	<location>CA651110 JB March 6, 1978  4:50 PM</location>
	<citations>
	<citation>1171	5	1171</citation>
	<citation>1171	5	1171</citation>
	<citation>1171	5	1171</citation>
	</citations>
	</document>
	<document id= '1170'>
	<title>Analyzing English Syntax with a Pattern-Learning Parser</title>
	<abstract>A dependency analysis system based on pattern recognition and learning logic was developed  to infer word classes and rules of syntactic combination from experience with text which had been analyzed.   The characteristics used to form word classes are the depth in the dependency tree of each word, the  direction of its governor and the same features for each of its immediate neighbors. Syntactic rules  of combination show the relation of a word to its governor in the depth pattern of the sentence.  The  system was tested on 400 elementary basic English sentences including 300 used earlier by Knowlton in  a different learning parser of all 400 sentences.  After experience with 300 sentences it was able to  generalize with 77 percent accuracy to the next 100.  In accumulative learning trials after the first  200 sentences it averaged a probability of .9 for accurately parsing each new sentence it encountered.   It was concluded that the system is adequate for learning to parse the bulk of basic English but that  further development is required before conclusions about its application to ordinary English can be stored.   The system is operational and available on the ARPA/SDC time-shared computing system.</abstract>
	<conference>CACM November, 1965</conference>
	<authors>
	<author>McConlogue, K.</author>
	<author>Simmons, R. F.</author>
	</authors>
	<location>CA651111 JB March 6, 1978  4:45 PM</location>
	<citations>
	<citation>1170	5	1170</citation>
	<citation>1170	5	1170</citation>
	<citation>1170	5	1170</citation>
	</citations>
	</document>
	<document id= '1169'>
	<title>An Algorithm for Minimizing Backboard Wiring Functions</title>
	<abstract>A partially exhaustive algorithm is presented for solving the following problem arising from  automatic layout of a computer.  Given an ordered set E1, E2,..., EN of N computer components, for each  permutation of the elements E1, E2.., EN, there is attached a value of an integer function F.  The algorithm  finds a local minimum of F by evaluating the set {Delta F} of the increments corresponding to a certain  set of exchanges of two elements.Then the exchange corresponding to the least negative increment of  {Delta F} is performed.  The process is iterated and stopped when the set of the increments is a positive  or empty set, which, it is proved, corresponds to a minimum.  The procedure is similar to the Downhill  Method for finding the minimum of a real function F(P), and can be applied to other placement problems.   Experimental results are presented with backboards formed by many elements and different initial placements.</abstract>
	<conference>CACM November, 1965</conference>
	<authors>
	<author>Pomentale, T.</author>
	</authors>
	<location>CA651112 JB March 6, 1978  4:35 PM</location>
	<citations>
	<citation>1169	5	1169</citation>
	<citation>1169	5	1169</citation>
	<citation>1169	5	1169</citation>
	</citations>
	</document>
	<document id= '1168'>
	<title>Across Machine Lines in COBOL</title>
	<abstract>The production of a large, file-maintenance-and-retrieval program system written in COBOL is  described.  The COBOL language was used specifically to enable the system to operate on three IBM computers.</abstract>
	<conference>CACM December, 1965</conference>
	<authors>
	<author>Fredericks, D. S.</author>
	<author>Warburtin, C. R.</author>
	</authors>
	<location>CA651201 JB March 6, 1978  4:26 PM</location>
	<citations>
	<citation>1168	5	1168</citation>
	<citation>1168	5	1168</citation>
	<citation>1168	5	1168</citation>
	</citations>
	</document>
	<document id= '1167'>
	<title>On the Translation of Machine Language Programs</title>
	<abstract>Automatic translation of machine language programs is becoming a highly desirable goal with  the advent of new large-scale computers.  The pitfalls that make it difficult to achieve completely automatic  translations are analyzed, and it is shown that these are primarily of a semantic nature.  A semi-automatic  procedure for resolving semantic problems is suggested.</abstract>
	<conference>CACM December, 1965</conference>
	<authors>
	<author>Gaines, R. S.</author>
	</authors>
	<location>CA651202 JB March 6, 1978  4:23 PM</location>
	<citations>
	<citation>1167	5	1167</citation>
	<citation>1167	5	1167</citation>
	<citation>1167	5	1167</citation>
	</citations>
	</document>
	<document id= '1166'>
	<title>A Use of Macros in Translation of Symbolic Assembly Language of One Computer to Another</title>
	<abstract>A set of macro-operations has been prepared to assist in translating IBM 7090 symbolic assembly  language programs to IBM 7040 machine language programs.  This set, inserted at the beginning of the  7090 symbolic deck, treats incompatible instruction mnemonics as macro-instructions to produce equivalent  7040 instruction sets.  Incompatible instructions are categorized into basic operational classes which  can be expressed by a single basic skeleton.  Several levels of macro calls are required to supply arguments  to the basic skeleton for each particular instruction.  Modification at execution time of the address  or tag of an incompatible instruction requires incorporation of an address-tag equivalent.  I/O is handled  by generating calls to I/O simulation subroutines.</abstract>
	<conference>CACM December, 1965</conference>
	<authors>
	</authors>
	<location>CA651203 JB March 6, 1978  4:20 PM</location>
	<citations>
	<citation>1166	5	1166</citation>
	<citation>1166	5	1166</citation>
	<citation>1166	5	1166</citation>
	</citations>
	</document>
	<document id= '1165'>
	<title>The Spectra 70/45 Emulator for the RCA 301</title>
	<abstract>The RCA 301 Emulator System is supplied with the Spectra 70/45 as a reprogramming aid.  It  allows an RCA 301 object program to be run on the Spectra 70/45 without necessitating changes in the  RCA 301 object code.  Execution rates are considerably better than traditional simulation.  The Emulator  provides an increase in throughput capacity for the 301 user on the Spectra 70/45.  The Emulator makes  use of both hardware micro-program routines and software routines to accomplish its function.</abstract>
	<conference>CACM December, 1965</conference>
	<authors>
	<author>Benjamin, R. I.</author>
	</authors>
	<location>CA651204 JB March 6, 1978  4:15 PM</location>
	<citations>
	<citation>1165	5	1165</citation>
	<citation>1165	5	1165</citation>
	<citation>1165	5	1165</citation>
	</citations>
	</document>
	<document id= '1164'>
	<title>Emulation of Large Systems</title>
	<abstract>The conversion problem and a new technique called emulation are discussed.  The technique of  emulation is developed and includes sections on both the Central Processing Unit (CPU) and the Input/Output  unit (I/O).  This general treatment is followed by three sections that describe in greater detail the  implementation of compatibility features using the emulation techniques for the IBM 7074, 7080 and 7090  systems on IBM System/360.</abstract>
	<conference>CACM December, 1965</conference>
	<authors>
	<author>Tucker, S. G.</author>
	</authors>
	<location>CA651205 JB March 6, 1978  4:09 PM</location>
	<citations>
	<citation>1164	5	1164</citation>
	<citation>1164	5	1164</citation>
	<citation>1164	5	1164</citation>
	</citations>
	</document>
	<document id= '1163'>
	<title>Philco/IBM Translation at Problem-Oriented, Symbolic and Binary Levels</title>
	<abstract>A translation system has been developed to eliminate most of the effort formerly required to  reprogram Philco 2000 series codes for IBM 7094 operation.  Experience with this system is limited but  highly successful encouraging application of the techniques to other source and object languages.</abstract>
	<conference>CACM December, 1965</conference>
	<authors>
	<author>Olsen, T. M.</author>
	</authors>
	<location>CA651206 JB March 6, 1978  4:05 PM</location>
	<citations>
	<citation>1163	5	1163</citation>
	<citation>1163	5	1163</citation>
	<citation>1163	5	1163</citation>
	</citations>
	</document>
	<document id= '1162'>
	<title>An Assembly Language for Reprogramming</title>
	<abstract>Complete reprogramming of compiler language programs is seldom necessary.  It is assembly language  programs which present the greatest difficulty.  Assembly languages generally provide a one-for-one translation  from a symbolic to a numeric version of a program, that is, from assembly language to machine language.   The meta-language presented here can be used to specify the mapping of any language which conforms to  a canonical list form into an arbitrary stream of bits.  This bit stream may be treated as a machine  language program, a character stream, or whatever else the user might desire.  Thus, this meta-language  can be used to map from one assembly language into another or from the assembly language for one machine  into the machine language of another.</abstract>
	<conference>CACM December, 1965</conference>
	<authors>
	<author>Graham, M. L.</author>
	<author>Ingerman, P. Z.</author>
	</authors>
	<location>CA651207 JB March 6, 1978  4:01 PM</location>
	<citations>
	<citation>1162	5	1162</citation>
	<citation>1162	5	1162</citation>
	<citation>1162	5	1162</citation>
	<citation>1565	5	1162</citation>
	<citation>1162	6	1162</citation>
	<citation>1358	6	1162</citation>
	<citation>1455	6	1162</citation>
	<citation>205	6	1162</citation>
	</citations>
	</document>
	<document id= '1161'>
	<title>1401 Compatibility Feature on the IBM System/360 Model 30</title>
	<abstract>The "second generation" of stored-program computers, of which IBM 1400 series was a part, brought  EDP into the mass market for the first time on a large scale.  As this era unfolded, rapid changes in  technology led to rapid obsolescence of data processing equipment.  Program written for a particular  system required tedious conversion as incompatible new machines came into use.  The IBM System/360 has  been designed with the conversion problem specifically in mind.  One of the conversion aids available  on the Model 30 is the 1401 compatibility feature.  This feature, in conjunction with other aids, permits  a smooth and inexpensive transition to optimum use of the new system.</abstract>
	<conference>CACM December, 1965</conference>
	<authors>
	<author>McCormack, M. A.</author>
	<author>Schansman, T. T.</author>
	<author>Womack, K. K.</author>
	</authors>
	<location>CA651208 JB March 6, 1978  3:55 PM</location>
	<citations>
	<citation>1161	5	1161</citation>
	<citation>1161	5	1161</citation>
	<citation>1161	5	1161</citation>
	</citations>
	</document>
	<document id= '1160'>
	<title>CAT: A 7090-3600 Computer-Aided Translation</title>
	<abstract>A semi-automatic translation system has been implemented which converts 7090 FAP language programs  into 3600 assembly language.  The input to the system is a FAP program deck which has been specially  prepared for translation by the user.  The output consists of the translated COMPASS language program  together with a comprehensive diagnostic listing which the user must analyze in order to verify any questionable  areas of the translation.  The translation processor consists of three distinct phases: an assembly of  the FAP program, a comprehensive analysis of the assembled code with particular regard to the actions  of instructions upon other instructions and upon data, and finally the output pass which generates the  COMPASS program in the form of macro instructions.</abstract>
	<conference>CACM December, 1965</conference>
	<authors>
	<author>Wilson, D. M.</author>
	<author>Moss, D. J.</author>
	</authors>
	<location>CA651209 JB March 6, 1978  3:50 PM</location>
	<citations>
	<citation>1160	4	1160</citation>
	<citation>2034	4	1160</citation>
	<citation>1160	5	1160</citation>
	<citation>1160	5	1160</citation>
	<citation>1160	5	1160</citation>
	<citation>1231	5	1160</citation>
	</citations>
	</document>
	<document id= '1159'>
	<title>Machine Independence: Its Technology and Economics</title>
	<abstract>A survey is offered of techniques for transferring programs, and especially compilers, from  one computer to another.  Of the methods examined, the "bootstrap" technique is singled out for detailed  discussion, with emphasis on its economics. The considerations that determine the applicability of bootstrapping  in any specific case are discussed, and an attempt is made to assign appropriate qualitative weights  to them.  Finally, reasons are given for believing that the machine-independence problem is being substantially  diminished by current trends in computer design, and that it is this process of convergence in hardware  design rather than any foreseeable software developments that will lead to its satisfactory resolution.</abstract>
	<conference>CACM December, 1965</conference>
	<authors>
	<author>Halpern, M. I.</author>
	</authors>
	<location>CA651210 JB March 6, 1978  3:44 PM</location>
	<citations>
	<citation>1159	4	1159</citation>
	<citation>1988	4	1159</citation>
	<citation>381	4	1159</citation>
	<citation>1159	5	1159</citation>
	<citation>1159	5	1159</citation>
	<citation>1159	5	1159</citation>
	<citation>14	5	1159</citation>
	</citations>
	</document>
	<document id= '1158'>
	<title>Program Structures for Parallel Processing</title>
	<abstract>Constructs for organizing and explicating parallel program segments are discussed as extensions  to ALGOL 60.  The constructs serve as meta-commands and are motivated by equipment having multiprocessing  capability.</abstract>
	<conference>CACM December, 1965</conference>
	<authors>
	<author>Anderson, J. P.</author>
	</authors>
	<location>CA651211 JB March 6, 1978  3:39 PM</location>
	<citations>
	<citation>1158	4	1158</citation>
	<citation>1158	5	1158</citation>
	<citation>1158	5	1158</citation>
	<citation>1158	5	1158</citation>
	<citation>1262	5	1158</citation>
	</citations>
	</document>
	<document id= '1157'>
	<citations>
	<citation>1157	4	1157</citation>
	<citation>1157	4	1157</citation>
	<citation>1157	4	1157</citation>
	<citation>1157	4	1157</citation>
	<citation>1779	4	1157</citation>
	<citation>1920	4	1157</citation>
	<citation>1944	4	1157</citation>
	<citation>1987	4	1157</citation>
	<citation>2548	4	1157</citation>
	<citation>1081	5	1157</citation>
	<citation>1157	5	1157</citation>
	<citation>1157	5	1157</citation>
	<citation>1157	5	1157</citation>
	<citation>485	5	1157</citation>
	<citation>714	5	1157</citation>
	<citation>836	5	1157</citation>
	</citations>
	<title>Procedure for the Normal Distribution Functions (Algorithm 272 [S15])</title>
	<conference>CACM December, 1965</conference>
	<authors>
	<author>MacLaren, M. D.</author>
	</authors>
	<location>CA651212 JB March 6, 1978  3:37 PM</location>
	</document>
	<document id= '1156'>
	<citations>
	<citation>1156	5	1156</citation>
	<citation>1156	5	1156</citation>
	<citation>1156	5	1156</citation>
	</citations>
	<title>Hankel Function (Algorithm 124 [S17])</title>
	<conference>CACM December, 1965</conference>
	<authors>
	<author>Reilly, G. A.</author>
	</authors>
	<location>CA651213 JB March 6, 1978  3:35 PM</location>
	</document>
	<document id= '1155'>
	<title>Experiments with a Deductive Question-Answering Program</title>
	<abstract>As an investigation in artificial intelligence, computer experiments on deductive question-answering  were run with a LISP program called DEDUCOM, an acronym for DEDUctive COMmunicator. When given 68 facts,  DEDUCOM answered 10 questions answerable from the facts.  A fact tells DEDUCOM either some specific information  or a method of answering a general kind of question.  Some conclusions drawn in the article are: (1)  DEDUCOM can answer a wide variety of questions.  (2) A human can increase the deductive power of DEDUCOM  by telling it more facts.  (3) DEDUCOM can write very simple programs (it is hoped that this ability  is the forerunner of an ability to self-program, which is a way to learn).  (4)DEDUCOM's search procedure  at present has two bad defects: some questions answerable from the given facts cannot be answered and  some other answerable questions can be answered only if the relevant facts are given in the "right" order.   (6) At present, DEDUCOM's method of making logical deductions in predicate calculus has two bad defects:  some facts have to be changed to logically equivalent ones before being given to DEDUCOM, and some redundant  facts have to be given to DEDUCOM.</abstract>
	<conference>CACM December, 1965</conference>
	<authors>
	<author>Slagle, J. R.</author>
	</authors>
	<location>CA651214 JB March 6, 1978  3:34 PM</location>
	<citations>
	<citation>1155	4	1155</citation>
	<citation>1456	4	1155</citation>
	<citation>1468	4	1155</citation>
	<citation>1515	4	1155</citation>
	<citation>1699	4	1155</citation>
	<citation>1856	4	1155</citation>
	<citation>2127	4	1155</citation>
	<citation>1155	5	1155</citation>
	<citation>1155	5	1155</citation>
	<citation>1155	5	1155</citation>
	<citation>1324	5	1155</citation>
	<citation>1515	5	1155</citation>
	<citation>2096	5	1155</citation>
	<citation>2127	5	1155</citation>
	<citation>2210	5	1155</citation>
	<citation>1155	6	1155</citation>
	<citation>1155	6	1155</citation>
	<citation>1155	6	1155</citation>
	<citation>1155	6	1155</citation>
	<citation>1324	6	1155</citation>
	<citation>1324	6	1155</citation>
	<citation>1487	6	1155</citation>
	<citation>1527	6	1155</citation>
	<citation>1781	6	1155</citation>
	<citation>1856	6	1155</citation>
	</citations>
	</document>
	<document id= '1154'>
	<title>Multi-Tape and Infinite-State Automata -- A Survey</title>
	<abstract>A survey of machines which are more powerful than finite automata and less powerful than general  Turing machines is presented.  It is felt that the machines in this category are as closely related to  digital computers as either the finite automata or the unrestricted Turing machines.  Intermediate machines  can be created by adjoining on infinite-state memory to a finite-state machine and then performing any  or all of the following: (1) restrict the manner in which the unbounded portion of the memory can be  accessed, (2) bound the number of steps allowed for a computation by some increasing recursive function  of the length of the input, (3) restrict the total amount of memory available in the same manner.  Examples  from all three classes and their properties are discussed.</abstract>
	<conference>CACM December, 1965</conference>
	<authors>
	<author>Fischer, P. C.</author>
	</authors>
	<location>CA651215 JB March 6, 1978  3:24 PM</location>
	<citations>
	<citation>1154	5	1154</citation>
	<citation>1154	5	1154</citation>
	<citation>1154	5	1154</citation>
	</citations>
	</document>
	<document id= '1153'>
	<title>A Fast Procedure for Generating Normal Random Variables*</title>
	<abstract>A technique for generating normally distributed random numbers is described.  It is faster  than those currently in general use and is readily applicable to both binary and decimal computers.</abstract>
	<conference>CACM January, 1964</conference>
	<authors>
	<author>Marsaglia, G.</author>
	<author>MacLaren, M. D.</author>
	<author>Bray, T. A.</author>
	</authors>
	<location>CA640101 JB March 10, 1978  5:43 AM</location>
	<citations>
	<citation>1073	4	1153</citation>
	<citation>1153	4	1153</citation>
	<citation>940	5	1153</citation>
	<citation>1073	5	1153</citation>
	<citation>1153	5	1153</citation>
	<citation>1153	5	1153</citation>
	<citation>1153	5	1153</citation>
	<citation>2137	5	1153</citation>
	<citation>2276	5	1153</citation>
	<citation>940	6	1153</citation>
	<citation>1073	6	1153</citation>
	<citation>1153	6	1153</citation>
	<citation>1153	6	1153</citation>
	<citation>1153	6	1153</citation>
	</citations>
	</document>
	<document id= '1152'>
	<title>Floating-Point Arithmetic with 84-Bit Numbers</title>
	<abstract>A classic and straightforward technique is presented which is not limited to the size or type  of number representation used or multiple precision arithmetic.</abstract>
	<conference>CACM January, 1964</conference>
	<authors>
	<author>Gregory, R. T.</author>
	<author>Raney, J. L.</author>
	</authors>
	<location>CA640102 JB March 10, 1978  5:41 AM</location>
	<citations>
	<citation>1152	5	1152</citation>
	<citation>1152	5	1152</citation>
	<citation>1152	5	1152</citation>
	<citation>1294	5	1152</citation>
	<citation>1152	6	1152</citation>
	</citations>
	</document>
	<document id= '1151'>
	<citations>
	<citation>1151	4	1151</citation>
	<citation>1265	4	1151</citation>
	<citation>2769	4	1151</citation>
	<citation>1151	5	1151</citation>
	<citation>1151	5	1151</citation>
	<citation>1151	5	1151</citation>
	<citation>635	5	1151</citation>
	</citations>
	<title>A Note on Multiplying Boolean Matrices II</title>
	<conference>CACM January, 1964</conference>
	<authors>
	<author>Comstock, D. R.</author>
	</authors>
	<location>CA640103 JB March 10, 1978  5:38 AM</location>
	</document>
	<document id= '1150'>
	<citations>
	<citation>1150	5	1150</citation>
	<citation>1150	5	1150</citation>
	<citation>1150	5	1150</citation>
	</citations>
	<title>A Fortran Post-Mortem Procedure</title>
	<conference>CACM January, 1964</conference>
	<authors>
	<author>Kahan, W.</author>
	<author>Leppik, J. J.</author>
	</authors>
	<location>CA640104 JB March 10, 1978  5:37 AM</location>
	</document>
	<document id= '1149'>
	<citations>
	<citation>1149	5	1149</citation>
	<citation>1149	5	1149</citation>
	<citation>1149	5	1149</citation>
	<citation>1781	5	1149</citation>
	<citation>123	6	1149</citation>
	<citation>196	6	1149</citation>
	<citation>919	6	1149</citation>
	<citation>990	6	1149</citation>
	<citation>1007	6	1149</citation>
	<citation>1046	6	1149</citation>
	<citation>1131	6	1149</citation>
	<citation>1139	6	1149</citation>
	<citation>1140	6	1149</citation>
	<citation>1149	6	1149</citation>
	<citation>1198	6	1149</citation>
	<citation>1215	6	1149</citation>
	<citation>1223	6	1149</citation>
	<citation>1265	6	1149</citation>
	<citation>1303	6	1149</citation>
	<citation>1323	6	1149</citation>
	<citation>1358	6	1149</citation>
	<citation>1366	6	1149</citation>
	<citation>1421	6	1149</citation>
	<citation>1460	6	1149</citation>
	<citation>1462	6	1149</citation>
	<citation>1463	6	1149</citation>
	<citation>1467	6	1149</citation>
	<citation>1468	6	1149</citation>
	<citation>1477	6	1149</citation>
	<citation>1491	6	1149</citation>
	<citation>1496	6	1149</citation>
	<citation>1531	6	1149</citation>
	<citation>1535	6	1149</citation>
	<citation>1565	6	1149</citation>
	<citation>1601	6	1149</citation>
	<citation>1602	6	1149</citation>
	<citation>1613	6	1149</citation>
	<citation>1614	6	1149</citation>
	<citation>1626	6	1149</citation>
	<citation>1641	6	1149</citation>
	<citation>1787	6	1149</citation>
	<citation>1788	6	1149</citation>
	<citation>205	6	1149</citation>
	<citation>224	6	1149</citation>
	<citation>249	6	1149</citation>
	<citation>288	6	1149</citation>
	<citation>316	6	1149</citation>
	<citation>381	6	1149</citation>
	<citation>398	6	1149</citation>
	<citation>11	6	1149</citation>
	<citation>404	6	1149</citation>
	<citation>410	6	1149</citation>
	<citation>463	6	1149</citation>
	<citation>464	6	1149</citation>
	<citation>483	6	1149</citation>
	<citation>3184	6	1149</citation>
	<citation>3188	6	1149</citation>
	<citation>584	6	1149</citation>
	<citation>600	6	1149</citation>
	<citation>680	6	1149</citation>
	<citation>691	6	1149</citation>
	<citation>763	6	1149</citation>
	<citation>799	6	1149</citation>
	</citations>
	<title>GARGOYLE , A Language for Compiler Writing*</title>
	<conference>CACM January, 1964</conference>
	<authors>
	<author>Garwick, J. V.</author>
	</authors>
	<location>CA640106 JB March 10, 1978  5:35 AM</location>
	</document>
	<document id= '1148'>
	<title>An Example in "Significant-Digit" Arithmetic*</title>
	<abstract>Different methods of handling the summing process for the geometric series are shown to give  results indicating widely differing significances when carried out in a machine incorporating "significant-digit"  arithmetic.</abstract>
	<conference>CACM January, 1964</conference>
	<authors>
	<author>Miller, R. H.</author>
	</authors>
	<location>CA640107 JB March 10, 1978  5:34 AM</location>
	<citations>
	<citation>1148	4	1148</citation>
	<citation>1148	5	1148</citation>
	<citation>1148	5	1148</citation>
	<citation>1148	5	1148</citation>
	<citation>85	5	1148</citation>
	<citation>3131	5	1148</citation>
	<citation>893	6	1148</citation>
	<citation>1148	6	1148</citation>
	</citations>
	</document>
	<document id= '1147'>
	<title>On the Numerical Solution of Boundary Value Problems for Linear Ordinary Differential Equations*</title>
	<abstract>A numerical method is presented for the solution of boundary value problems involving linear  ordinary differential equations.  The method described is noniterative and makes use of any one-step  numerical integration scheme to reduce the problem from one of boundary values to one of initial values.   Comments are made concerning some numerical results of applying the method to a specific problem.  In  addition an extension of the algorithm described to more general problems is discussed.</abstract>
	<conference>CACM January, 1964</conference>
	<authors>
	<author>Day, J. T.</author>
	<author>II, G. W.</author>
	</authors>
	<location>CA640108 JB March 10, 1978  5:32 AM</location>
	<citations>
	<citation>1147	5	1147</citation>
	<citation>1147	5	1147</citation>
	<citation>1147	5	1147</citation>
	<citation>1274	5	1147</citation>
	<citation>1147	6	1147</citation>
	</citations>
	</document>
	<document id= '1146'>
	<title>An Efficient Composite Formula for Multidimensional Quadrature</title>
	<abstract>A (2s+1)-point second-degree quadrature formula for integration over an s-dimensional hyper-rectangle  is presented.  All but one of the points lie on the surface with weights of opposite sign attached to  points on opposite faces.  When a large volume is subdivided into congruent rectangular subdivisions,  only one point is required in each interior subdivision to achieve second-degree accuracy.</abstract>
	<conference>CACM January, 1964</conference>
	<authors>
	</authors>
	<location>CA640109 JB March 10, 1978  5:28 AM</location>
	<citations>
	<citation>1146	4	1146</citation>
	<citation>1146	5	1146</citation>
	<citation>1146	5	1146</citation>
	<citation>1146	5	1146</citation>
	<citation>386	5	1146</citation>
	</citations>
	</document>
	<document id= '1145'>
	<title>GIT-A Heuristic Program for Testing Pairs of Directed Line Graphs for Isomorphism*</title>
	<abstract>Given a pair of directed line graphs, the problem of ascertaining whether or not they are isomorphic  is one for which no efficient algorithmic solution is known.  Since a straightforward enumerative algorithm  might require 40 years of running time on a very high speed computer in order to compare two 15-node  graphs, a more sophisticated approach seems called for.  The situation is similar to that prevailing  in areas such as game-playing and theorem-proving, where practical algorithms are unknown (for the interesting  cases), but where various practical though only partially successful techniques are available.  Git-Graph  Isomorphism Tester-incorporates a variety of processes that attempt to narrow down the search for an  isomorphism, or to demonstrate that none exists.  No one scheme is relied upon exclusively for a solution,  and the program is designed to avoid excessive computation along fruitless lines.  GIT has been written  in the COMIT language and successfully tested on the IBM 7090.</abstract>
	<conference>CACM January, 1964</conference>
	<authors>
	<author>Unger, S. H.</author>
	</authors>
	<location>CA640110 JB March 10, 1978  5:24 AM</location>
	<citations>
	<citation>1145	4	1145</citation>
	<citation>1145	5	1145</citation>
	<citation>1145	5	1145</citation>
	<citation>1145	5	1145</citation>
	<citation>1504	5	1145</citation>
	<citation>3040	5	1145</citation>
	<citation>655	5	1145</citation>
	<citation>1145	6	1145</citation>
	<citation>1145	6	1145</citation>
	</citations>
	</document>
	<document id= '1144'>
	<title>Digital Computer Determination of Alpha Source Activity</title>
	<abstract>A technique is described for determining the activity and homogeneity of an alpha source.   It is believed that the technique, using a digital computer, has many uses and applications in the field  of nuclear physics. The technique involves computer manipulation of the digital image of the nuclear  source.  Experimental details are given.</abstract>
	<conference>CACM January, 1964</conference>
	<authors>
	<author>Robbins, D.</author>
	<author>Taylor, W. E.</author>
	</authors>
	<location>CA640111 JB March 10, 1978  5:14 AM</location>
	<citations>
	<citation>1144	5	1144</citation>
	<citation>1144	5	1144</citation>
	<citation>1144	5	1144</citation>
	</citations>
	</document>
	<document id= '1143'>
	<title>Analysis of Decay-Type Data*</title>
	<abstract>A comparative study has been made of a variety of numerical techniques for fitting experimental  data of the decay type by forms involving the sums of exponentials.  Statistical errors of the fitted  parameters are also calculated.  These methods have been applied to artificially-generated sets of data  as well as to the results of experiments with radioactive tracers on both human and animal subjects.   Results show that the values of the fitted parameters are very sensitive to variations in the fitting  procedure.  Therefore great care very sensitive to variations in the fitting procedure.  Therefore great  care must be exercised in identifying such values with physical constants.  Although the values of functions  derived from these fitted parameters which can definitely be associated with physical entities are generally  more stable under variations in the fitting techniques, error bounds can be so large that no great confidence  can be placed even in them.  It would therefore appear best to select a uniform technique both for running  the experiments and for analyzing the data, and then to consider as significant only relative results  between one subject and the next.</abstract>
	<conference>CACM January, 1964</conference>
	<authors>
	<author>Worsley, B. H.</author>
	</authors>
	<location>CA640112 JB March 10, 1978 5:11 AM</location>
	<citations>
	<citation>1143	5	1143</citation>
	<citation>1143	5	1143</citation>
	<citation>1143	5	1143</citation>
	</citations>
	</document>
	<document id= '1142'>
	<citations>
	<citation>1102	4	1142</citation>
	<citation>1142	4	1142</citation>
	<citation>1781	4	1142</citation>
	<citation>1945	4	1142</citation>
	<citation>762	4	1142</citation>
	<citation>949	4	1142</citation>
	<citation>1142	5	1142</citation>
	<citation>1142	5	1142</citation>
	<citation>1142	5	1142</citation>
	<citation>483	5	1142</citation>
	</citations>
	<title>An Extension of ALGOL-Like Languages</title>
	<conference>CACM February, 1964</conference>
	<authors>
	<author>Rose, G. F.</author>
	</authors>
	<location>CA640201 JB March 10, 1978  4:57 AM</location>
	</document>
	<document id= '1141'>
	<citations>
	<citation>267	4	1141</citation>
	<citation>1134	4	1141</citation>
	<citation>1139	4	1141</citation>
	<citation>1141	4	1141</citation>
	<citation>1141	4	1141</citation>
	<citation>1215	4	1141</citation>
	<citation>1223	4	1141</citation>
	<citation>1647	4	1141</citation>
	<citation>1781	4	1141</citation>
	<citation>1787	4	1141</citation>
	<citation>1792	4	1141</citation>
	<citation>364	4	1141</citation>
	<citation>364	4	1141</citation>
	<citation>405	4	1141</citation>
	<citation>405	4	1141</citation>
	<citation>438	4	1141</citation>
	<citation>438	4	1141</citation>
	<citation>561	4	1141</citation>
	<citation>44	4	1141</citation>
	<citation>763	4	1141</citation>
	<citation>1141	5	1141</citation>
	<citation>1141	5	1141</citation>
	<citation>1141	5	1141</citation>
	<citation>224	5	1141</citation>
	<citation>1496	5	1141</citation>
	<citation>1683	5	1141</citation>
	<citation>1768	5	1141</citation>
	<citation>1787	5	1141</citation>
	<citation>1945	5	1141</citation>
	<citation>2061	5	1141</citation>
	<citation>77	5	1141</citation>
	<citation>823	6	1141</citation>
	<citation>196	6	1141</citation>
	<citation>914	6	1141</citation>
	<citation>915	6	1141</citation>
	<citation>917	6	1141</citation>
	<citation>984	6	1141</citation>
	<citation>989	6	1141</citation>
	<citation>990	6	1141</citation>
	<citation>1012	6	1141</citation>
	<citation>1084	6	1141</citation>
	<citation>1098	6	1141</citation>
	<citation>1122	6	1141</citation>
	<citation>1137	6	1141</citation>
	<citation>1138	6	1141</citation>
	<citation>1139	6	1141</citation>
	<citation>1140	6	1141</citation>
	<citation>1141	6	1141</citation>
	<citation>1141	6	1141</citation>
	<citation>1141	6	1141</citation>
	<citation>1141	6	1141</citation>
	<citation>1141	6	1141</citation>
	<citation>1141	6	1141</citation>
	<citation>1200	6	1141</citation>
	<citation>1215	6	1141</citation>
	<citation>1223	6	1141</citation>
	<citation>1265	6	1141</citation>
	<citation>1265	6	1141</citation>
	<citation>1336	6	1141</citation>
	<citation>1396	6	1141</citation>
	<citation>1455	6	1141</citation>
	<citation>1477	6	1141</citation>
	<citation>1477	6	1141</citation>
	<citation>1487	6	1141</citation>
	<citation>1491	6	1141</citation>
	<citation>1491	6	1141</citation>
	<citation>1491	6	1141</citation>
	<citation>1491	6	1141</citation>
	<citation>1496	6	1141</citation>
	<citation>1496	6	1141</citation>
	<citation>1781	6	1141</citation>
	<citation>1781	6	1141</citation>
	<citation>1825	6	1141</citation>
	<citation>224	6	1141</citation>
	<citation>404	6	1141</citation>
	<citation>483	6	1141</citation>
	<citation>584	6	1141</citation>
	<citation>669	6	1141</citation>
	<citation>680	6	1141</citation>
	<citation>763	6	1141</citation>
	<citation>763	6	1141</citation>
	<citation>773	6	1141</citation>
	<citation>799	6	1141</citation>
	</citations>
	<title>Bounded Context Syntactic Analysis</title>
	<conference>CACM February, 1964</conference>
	<authors>
	<author>Floyd, R. W.</author>
	</authors>
	<location>CA640202 JB March 10, 1978  4:56 AM</location>
	</document>
	<document id= '1140'>
	<citations>
	<citation>249	4	1140</citation>
	<citation>254	4	1140</citation>
	<citation>272	4	1140</citation>
	<citation>1046	4	1140</citation>
	<citation>1102	4	1140</citation>
	<citation>1105	4	1140</citation>
	<citation>1109	4	1140</citation>
	<citation>1139	4	1140</citation>
	<citation>1140	4	1140</citation>
	<citation>1140	4	1140</citation>
	<citation>1188	4	1140</citation>
	<citation>1234	4	1140</citation>
	<citation>1263	4	1140</citation>
	<citation>1265	4	1140</citation>
	<citation>1306	4	1140</citation>
	<citation>1464	4	1140</citation>
	<citation>1491	4	1140</citation>
	<citation>1496	4	1140</citation>
	<citation>1767	4	1140</citation>
	<citation>1781	4	1140</citation>
	<citation>1781	4	1140</citation>
	<citation>1787	4	1140</citation>
	<citation>1824	4	1140</citation>
	<citation>1949	4	1140</citation>
	<citation>321	4	1140</citation>
	<citation>2059	4	1140</citation>
	<citation>2126	4	1140</citation>
	<citation>2126	4	1140</citation>
	<citation>2546	4	1140</citation>
	<citation>435	4	1140</citation>
	<citation>437	4	1140</citation>
	<citation>463	4	1140</citation>
	<citation>464	4	1140</citation>
	<citation>483	4	1140</citation>
	<citation>491	4	1140</citation>
	<citation>2732	4	1140</citation>
	<citation>560	4	1140</citation>
	<citation>583	4	1140</citation>
	<citation>584	4	1140</citation>
	<citation>3073	4	1140</citation>
	<citation>627	4	1140</citation>
	<citation>631	4	1140</citation>
	<citation>631	4	1140</citation>
	<citation>632	4	1140</citation>
	<citation>642	4	1140</citation>
	<citation>644	4	1140</citation>
	<citation>653	4	1140</citation>
	<citation>653	4	1140</citation>
	<citation>680	4	1140</citation>
	<citation>680	4	1140</citation>
	<citation>761	4	1140</citation>
	<citation>762	4	1140</citation>
	<citation>763	4	1140</citation>
	<citation>763	4	1140</citation>
	<citation>795	4	1140</citation>
	<citation>799	4	1140</citation>
	<citation>123	4	1140</citation>
	<citation>140	4	1140</citation>
	<citation>919	4	1140</citation>
	<citation>945	4	1140</citation>
	<citation>989	4	1140</citation>
	<citation>196	5	1140</citation>
	<citation>1140	5	1140</citation>
	<citation>1140	5	1140</citation>
	<citation>1140	5	1140</citation>
	<citation>1491	5	1140</citation>
	<citation>1781	5	1140</citation>
	<citation>2061	5	1140</citation>
	<citation>404	5	1140</citation>
	<citation>123	6	1140</citation>
	<citation>196	6	1140</citation>
	<citation>196	6	1140</citation>
	<citation>919	6	1140</citation>
	<citation>990	6	1140</citation>
	<citation>1007	6	1140</citation>
	<citation>1046	6	1140</citation>
	<citation>1131	6	1140</citation>
	<citation>1139	6	1140</citation>
	<citation>1140	6	1140</citation>
	<citation>1140	6	1140</citation>
	<citation>1140	6	1140</citation>
	<citation>1141	6	1140</citation>
	<citation>1149	6	1140</citation>
	<citation>1198	6	1140</citation>
	<citation>1215	6	1140</citation>
	<citation>1223	6	1140</citation>
	<citation>1265	6	1140</citation>
	<citation>1303	6	1140</citation>
	<citation>1303	6	1140</citation>
	<citation>1323	6	1140</citation>
	<citation>1358	6	1140</citation>
	<citation>1366	6	1140</citation>
	<citation>1421	6	1140</citation>
	<citation>1460	6	1140</citation>
	<citation>1462	6	1140</citation>
	<citation>1463	6	1140</citation>
	<citation>1467	6	1140</citation>
	<citation>1468	6	1140</citation>
	<citation>1477	6	1140</citation>
	<citation>1477	6	1140</citation>
	<citation>1491	6	1140</citation>
	<citation>1491	6	1140</citation>
	<citation>1496	6	1140</citation>
	<citation>1531	6	1140</citation>
	<citation>1535	6	1140</citation>
	<citation>1565	6	1140</citation>
	<citation>1601	6	1140</citation>
	<citation>1602	6	1140</citation>
	<citation>1613	6	1140</citation>
	<citation>1614	6	1140</citation>
	<citation>1626	6	1140</citation>
	<citation>1641	6	1140</citation>
	<citation>1787	6	1140</citation>
	<citation>1788	6	1140</citation>
	<citation>205	6	1140</citation>
	<citation>1825	6	1140</citation>
	<citation>224	6	1140</citation>
	<citation>249	6	1140</citation>
	<citation>288	6	1140</citation>
	<citation>316	6	1140</citation>
	<citation>381	6	1140</citation>
	<citation>398	6	1140</citation>
	<citation>11	6	1140</citation>
	<citation>404	6	1140</citation>
	<citation>410	6	1140</citation>
	<citation>463	6	1140</citation>
	<citation>464	6	1140</citation>
	<citation>483	6	1140</citation>
	<citation>3184	6	1140</citation>
	<citation>3184	6	1140</citation>
	<citation>3188	6	1140</citation>
	<citation>584	6	1140</citation>
	<citation>600	6	1140</citation>
	<citation>680	6	1140</citation>
	<citation>691	6	1140</citation>
	<citation>729	6	1140</citation>
	<citation>763	6	1140</citation>
	<citation>773	6	1140</citation>
	<citation>799	6	1140</citation>
	</citations>
	<title>"Structural Connections" in Formal Language*</title>
	<conference>CACM February, 1964</conference>
	<authors>
	<author>Irons, E. T.</author>
	</authors>
	<location>CA640203 JB March 10, 1978  4:55 AM</location>
	</document>
	<document id= '1139'>
	<citations>
	<citation>267	4	1139</citation>
	<citation>1046	4	1139</citation>
	<citation>1062	4	1139</citation>
	<citation>1105	4	1139</citation>
	<citation>1121	4	1139</citation>
	<citation>1139	4	1139</citation>
	<citation>1139	4	1139</citation>
	<citation>1139	4	1139</citation>
	<citation>1139	4	1139</citation>
	<citation>1139	4	1139</citation>
	<citation>1139	4	1139</citation>
	<citation>1140	4	1139</citation>
	<citation>1141	4	1139</citation>
	<citation>1215	4	1139</citation>
	<citation>1223	4	1139</citation>
	<citation>1234	4	1139</citation>
	<citation>1263	4	1139</citation>
	<citation>1265	4	1139</citation>
	<citation>1265	4	1139</citation>
	<citation>1265	4	1139</citation>
	<citation>1496	4	1139</citation>
	<citation>1647	4	1139</citation>
	<citation>1665	4	1139</citation>
	<citation>1781	4	1139</citation>
	<citation>1781	4	1139</citation>
	<citation>1781	4	1139</citation>
	<citation>1787	4	1139</citation>
	<citation>1792	4	1139</citation>
	<citation>1824	4	1139</citation>
	<citation>1947	4	1139</citation>
	<citation>364	4	1139</citation>
	<citation>2126	4	1139</citation>
	<citation>405	4	1139</citation>
	<citation>2546	4	1139</citation>
	<citation>438	4	1139</citation>
	<citation>464	4	1139</citation>
	<citation>556	4	1139</citation>
	<citation>584	4	1139</citation>
	<citation>3185	4	1139</citation>
	<citation>631	4	1139</citation>
	<citation>653	4	1139</citation>
	<citation>680	4	1139</citation>
	<citation>720	4	1139</citation>
	<citation>759	4	1139</citation>
	<citation>763	4	1139</citation>
	<citation>763	4	1139</citation>
	<citation>763	4	1139</citation>
	<citation>795	4	1139</citation>
	<citation>799	4	1139</citation>
	<citation>799	4	1139</citation>
	<citation>945	4	1139</citation>
	<citation>1139	5	1139</citation>
	<citation>1139	5	1139</citation>
	<citation>1139	5	1139</citation>
	<citation>224	5	1139</citation>
	<citation>1612	5	1139</citation>
	<citation>1781	5	1139</citation>
	<citation>1945	5	1139</citation>
	<citation>399	5	1139</citation>
	<citation>404	5	1139</citation>
	<citation>438	5	1139</citation>
	<citation>464	5	1139</citation>
	<citation>631	5	1139</citation>
	<citation>823	6	1139</citation>
	<citation>123	6	1139</citation>
	<citation>196	6	1139</citation>
	<citation>914	6	1139</citation>
	<citation>915	6	1139</citation>
	<citation>917	6	1139</citation>
	<citation>919	6	1139</citation>
	<citation>984	6	1139</citation>
	<citation>989	6	1139</citation>
	<citation>990	6	1139</citation>
	<citation>990	6	1139</citation>
	<citation>1007	6	1139</citation>
	<citation>1012	6	1139</citation>
	<citation>1046	6	1139</citation>
	<citation>1084	6	1139</citation>
	<citation>1098	6	1139</citation>
	<citation>1122	6	1139</citation>
	<citation>1131	6	1139</citation>
	<citation>1138	6	1139</citation>
	<citation>1139	6	1139</citation>
	<citation>1139	6	1139</citation>
	<citation>1139	6	1139</citation>
	<citation>1140	6	1139</citation>
	<citation>1141	6	1139</citation>
	<citation>1149	6	1139</citation>
	<citation>1198	6	1139</citation>
	<citation>1200	6	1139</citation>
	<citation>1215	6	1139</citation>
	<citation>1223	6	1139</citation>
	<citation>1223	6	1139</citation>
	<citation>1265	6	1139</citation>
	<citation>1265	6	1139</citation>
	<citation>1303	6	1139</citation>
	<citation>1323	6	1139</citation>
	<citation>1336	6	1139</citation>
	<citation>1358	6	1139</citation>
	<citation>1366	6	1139</citation>
	<citation>1396	6	1139</citation>
	<citation>1421	6	1139</citation>
	<citation>1455	6	1139</citation>
	<citation>1460	6	1139</citation>
	<citation>1462	6	1139</citation>
	<citation>1463	6	1139</citation>
	<citation>1467	6	1139</citation>
	<citation>1468	6	1139</citation>
	<citation>1477	6	1139</citation>
	<citation>1477	6	1139</citation>
	<citation>1487	6	1139</citation>
	<citation>1491	6	1139</citation>
	<citation>1491	6	1139</citation>
	<citation>1496	6	1139</citation>
	<citation>1496	6	1139</citation>
	<citation>1531	6	1139</citation>
	<citation>1535	6	1139</citation>
	<citation>1565	6	1139</citation>
	<citation>1601	6	1139</citation>
	<citation>1602	6	1139</citation>
	<citation>1613	6	1139</citation>
	<citation>1614	6	1139</citation>
	<citation>1626	6	1139</citation>
	<citation>1641	6	1139</citation>
	<citation>1787	6	1139</citation>
	<citation>1788	6	1139</citation>
	<citation>205	6	1139</citation>
	<citation>224	6	1139</citation>
	<citation>249	6	1139</citation>
	<citation>288	6	1139</citation>
	<citation>316	6	1139</citation>
	<citation>381	6	1139</citation>
	<citation>398	6	1139</citation>
	<citation>11	6	1139</citation>
	<citation>404	6	1139</citation>
	<citation>410	6	1139</citation>
	<citation>463	6	1139</citation>
	<citation>464	6	1139</citation>
	<citation>483	6	1139</citation>
	<citation>483	6	1139</citation>
	<citation>3184	6	1139</citation>
	<citation>3188	6	1139</citation>
	<citation>584	6	1139</citation>
	<citation>584	6	1139</citation>
	<citation>600	6	1139</citation>
	<citation>669	6	1139</citation>
	<citation>680	6	1139</citation>
	<citation>680	6	1139</citation>
	<citation>691	6	1139</citation>
	<citation>763	6	1139</citation>
	<citation>763	6	1139</citation>
	<citation>799	6	1139</citation>
	</citations>
	<title>FORTRAN IV as a Syntax Language*</title>
	<conference>CACM February, 1964</conference>
	<authors>
	<author>Leavenworth, B. M.</author>
	</authors>
	<location>CA640204 JB March 10, 1978  4:53 AM</location>
	</document>
	<document id= '1138'>
	<citations>
	<citation>1138	5	1138</citation>
	<citation>1138	5	1138</citation>
	<citation>1138	5	1138</citation>
	<citation>1945	5	1138</citation>
	<citation>823	6	1138</citation>
	<citation>914	6	1138</citation>
	<citation>915	6	1138</citation>
	<citation>917	6	1138</citation>
	<citation>984	6	1138</citation>
	<citation>989	6	1138</citation>
	<citation>990	6	1138</citation>
	<citation>1012	6	1138</citation>
	<citation>1084	6	1138</citation>
	<citation>1098	6	1138</citation>
	<citation>1122	6	1138</citation>
	<citation>1138	6	1138</citation>
	<citation>1139	6	1138</citation>
	<citation>1141	6	1138</citation>
	<citation>1200	6	1138</citation>
	<citation>1223	6	1138</citation>
	<citation>1265	6	1138</citation>
	<citation>1336	6	1138</citation>
	<citation>1396	6	1138</citation>
	<citation>1455	6	1138</citation>
	<citation>1477	6	1138</citation>
	<citation>1487	6	1138</citation>
	<citation>1491	6	1138</citation>
	<citation>1496	6	1138</citation>
	<citation>483	6	1138</citation>
	<citation>584	6	1138</citation>
	<citation>669	6	1138</citation>
	<citation>680	6	1138</citation>
	<citation>763	6	1138</citation>
	</citations>
	<title>Formalism in Programming Languages*</title>
	<conference>CACM February, 1964</conference>
	<authors>
	<author>Iverson, K. E.</author>
	</authors>
	<location>CA640205 JB March 10, 1978  4:24 AM</location>
	</document>
	<document id= '1137'>
	<citations>
	<citation>1086	5	1137</citation>
	<citation>1137	5	1137</citation>
	<citation>1137	5	1137</citation>
	<citation>1137	5	1137</citation>
	<citation>1496	5	1137</citation>
	<citation>1137	6	1137</citation>
	<citation>1137	6	1137</citation>
	<citation>1141	6	1137</citation>
	<citation>404	6	1137</citation>
	<citation>3184	6	1137</citation>
	</citations>
	<title>A Format Language*</title>
	<conference>CACM February, 1964</conference>
	<authors>
	<author>Perlis, A. J.</author>
	</authors>
	<location>CA640206 JB March 10, 1978  4:15 AM</location>
	</document>
	<document id= '1136'>
	<citations>
	<citation>1135	4	1136</citation>
	<citation>1136	4	1136</citation>
	<citation>1136	4	1136</citation>
	<citation>1136	4	1136</citation>
	<citation>493	4	1136</citation>
	<citation>2710	4	1136</citation>
	<citation>2765	4	1136</citation>
	<citation>2888	4	1136</citation>
	<citation>2906	4	1136</citation>
	<citation>729	4	1136</citation>
	<citation>1136	5	1136</citation>
	<citation>1136	5	1136</citation>
	<citation>1136	5	1136</citation>
	<citation>493	5	1136</citation>
	<citation>616	5	1136</citation>
	<citation>657	5	1136</citation>
	</citations>
	<title>Beginnings of a Theory of Information Handling*</title>
	<conference>CACM February, 1964</conference>
	<authors>
	</authors>
	<location>CA640207 JB March 10, 1978  4:10 AM</location>
	</document>
	<document id= '1135'>
	<title>A General Business-Oriented Language Based on Decision Expressions*</title>
	<abstract>The structure of a digital compute programming language which covers a wide class of business  and file processing applications is presented.  Such a structure, based on identifying and incorporating  into a compiler the aspects common to all processes of such class, permits writing extremely compact  programs, even for comparatively complex applications, in terms of tables of control expressions which  express only information characteristic of the particular application.  Furthermore,local changes of  a process (e.g. changes affecting only one of the output files involved) can be effected by local modifications  in the program (e.g. modification of only one entry of the tables).  This structure also allows for inexpensive  preparation of loading-speed compilers which translate the source programs into efficient machine codes.   The approach adopted here departs from conventional mechanical language design philosophies.  It stresses  the structural analysis of the class of processes to be represented in the languages, as opposed to emphasizing  formal (i.e., contents-independent) syntactical definitions.  It relies exclusively on nonprocedural  representation of process as sets (tables) of relations between data and results (there are no control  statements such as GO TO, etc.), instead of using procedure descriptions (which are one-to-one translations  of flowcharts).  Here an invariant pattern of procedure is identified as characteristic of the class  of all batch file processes.  This new philosophy has the potential to overcome well-known deficiencies  of other business-oriented languages and fully meets the requirements set by CODASYL for such languages,  including machine-independence.</abstract>
	<conference>CACM February, 1964</conference>
	<authors>
	<author>Lombardi, L. A.</author>
	</authors>
	<location>CA640208 JB March 10, 1978  4:08 AM</location>
	<citations>
	<citation>1135	4	1135</citation>
	<citation>1136	4	1135</citation>
	<citation>493	4	1135</citation>
	<citation>2710	4	1135</citation>
	<citation>2765	4	1135</citation>
	<citation>2888	4	1135</citation>
	<citation>2906	4	1135</citation>
	<citation>729	4	1135</citation>
	<citation>1135	5	1135</citation>
	<citation>1135	5	1135</citation>
	<citation>1135	5	1135</citation>
	<citation>1959	5	1135</citation>
	<citation>616	5	1135</citation>
	<citation>1135	6	1135</citation>
	</citations>
	</document>
	<document id= '1134'>
	<title>Some Effects of the 6600 Computer on Language Structures*</title>
	<abstract>The problem of compiling efficient 6600 codes prompted the development of an intermediate language  reflecting the structure of the machine, that is more easily manipulated in improving object program  efficiency.  The subject of this paper is the intermediate language and methods of manipulating it.   Compilations of a series of arithmetic statements are discussed.  It is assumed that all functions and  exponentials have been removed from these statements, and replaced by simple variables.  For purposes  of simplicity the treatment of subscripts is ignored.  A simplified 6600 structure is presented to illustrate the compiling method.  Several assumptions are made for purposes of simplification, although there are  cases in which the assumptions are violated in the actual machine.</abstract>
	<conference>CACM February, 1964</conference>
	<authors>
	<author>Allard, R. W.</author>
	<author>Wolf, K. A.</author>
	<author>Zemlin, R. A.</author>
	</authors>
	<location>CA640209 JB March 10, 1978  3:54 AM</location>
	<citations>
	<citation>1134	4	1134</citation>
	<citation>1134	4	1134</citation>
	<citation>1134	4	1134</citation>
	<citation>1141	4	1134</citation>
	<citation>1179	4	1134</citation>
	<citation>1861	4	1134</citation>
	<citation>364	4	1134</citation>
	<citation>405	4	1134</citation>
	<citation>438	4	1134</citation>
	<citation>561	4	1134</citation>
	<citation>44	4	1134</citation>
	<citation>83	4	1134</citation>
	<citation>1134	5	1134</citation>
	<citation>1134	5	1134</citation>
	<citation>1134	5	1134</citation>
	<citation>1613	5	1134</citation>
	<citation>1947	5	1134</citation>
	<citation>408	5	1134</citation>
	<citation>17	5	1134</citation>
	<citation>77	5	1134</citation>
	<citation>987	6	1134</citation>
	<citation>1086	6	1134</citation>
	<citation>1134	6	1134</citation>
	<citation>1134	6	1134</citation>
	<citation>1223	6	1134</citation>
	<citation>1248	6	1134</citation>
	<citation>1453	6	1134</citation>
	<citation>399	6	1134</citation>
	<citation>3184	6	1134</citation>
	</citations>
	</document>
	<document id= '1133'>
	<citations>
	<citation>1133	5	1133</citation>
	<citation>1133	5	1133</citation>
	<citation>1133	5	1133</citation>
	</citations>
	<title>A Programming Package for Some General Modes of Arithmetic*</title>
	<conference>CACM February, 1964</conference>
	<authors>
	<author>Brooker, R. A.</author>
	</authors>
	<location>CA640210 JB March 10, 1978  3:46 AM</location>
	</document>
	<document id= '1132'>
	<citations>
	<citation>1024	4	1132</citation>
	<citation>1051	4	1132</citation>
	<citation>1086	4	1132</citation>
	<citation>1102	4	1132</citation>
	<citation>1132	4	1132</citation>
	<citation>1132	4	1132</citation>
	<citation>1234	4	1132</citation>
	<citation>1263	4	1132</citation>
	<citation>1265	4	1132</citation>
	<citation>1270	4	1132</citation>
	<citation>1323	4	1132</citation>
	<citation>1358	4	1132</citation>
	<citation>1379	4	1132</citation>
	<citation>1380	4	1132</citation>
	<citation>1390	4	1132</citation>
	<citation>1453	4	1132</citation>
	<citation>1464	4	1132</citation>
	<citation>1484	4	1132</citation>
	<citation>1486	4	1132</citation>
	<citation>1491	4	1132</citation>
	<citation>1498	4	1132</citation>
	<citation>1549	4	1132</citation>
	<citation>1613	4	1132</citation>
	<citation>1614	4	1132</citation>
	<citation>1706	4	1132</citation>
	<citation>1781	4	1132</citation>
	<citation>1825	4	1132</citation>
	<citation>1826	4	1132</citation>
	<citation>1860	4	1132</citation>
	<citation>1878	4	1132</citation>
	<citation>378	4	1132</citation>
	<citation>2060	4	1132</citation>
	<citation>2083	4	1132</citation>
	<citation>2155	4	1132</citation>
	<citation>2168	4	1132</citation>
	<citation>2178	4	1132</citation>
	<citation>2179	4	1132</citation>
	<citation>2252	4	1132</citation>
	<citation>2325	4	1132</citation>
	<citation>2341	4	1132</citation>
	<citation>2546	4	1132</citation>
	<citation>2645	4	1132</citation>
	<citation>2652	4	1132</citation>
	<citation>2684	4	1132</citation>
	<citation>2719	4	1132</citation>
	<citation>2723	4	1132</citation>
	<citation>2838	4	1132</citation>
	<citation>2842	4	1132</citation>
	<citation>2842	4	1132</citation>
	<citation>2855	4	1132</citation>
	<citation>2879	4	1132</citation>
	<citation>2929	4	1132</citation>
	<citation>2934	4	1132</citation>
	<citation>3069	4	1132</citation>
	<citation>3077	4	1132</citation>
	<citation>3080	4	1132</citation>
	<citation>3106	4	1132</citation>
	<citation>627	4	1132</citation>
	<citation>669	4	1132</citation>
	<citation>679	4	1132</citation>
	<citation>691	4	1132</citation>
	<citation>761	4	1132</citation>
	<citation>106	4	1132</citation>
	<citation>949	4	1132</citation>
	<citation>989	4	1132</citation>
	<citation>1132	5	1132</citation>
	<citation>1132	5	1132</citation>
	<citation>1132	5	1132</citation>
	<citation>1214	5	1132</citation>
	<citation>210	5	1132</citation>
	<citation>1396	5	1132</citation>
	<citation>3184	5	1132</citation>
	<citation>964	6	1132</citation>
	<citation>1028	6	1132</citation>
	<citation>1029	6	1132</citation>
	<citation>1083	6	1132</citation>
	<citation>1132	6	1132</citation>
	<citation>1132	6	1132</citation>
	<citation>1214	6	1132</citation>
	<citation>1278	6	1132</citation>
	<citation>1334	6	1132</citation>
	<citation>1365	6	1132</citation>
	<citation>1386	6	1132</citation>
	<citation>1387	6	1132</citation>
	<citation>1388	6	1132</citation>
	<citation>1392	6	1132</citation>
	<citation>1393	6	1132</citation>
	<citation>1394	6	1132</citation>
	<citation>1395	6	1132</citation>
	<citation>1396	6	1132</citation>
	<citation>1397	6	1132</citation>
	<citation>1496	6	1132</citation>
	<citation>284	6	1132</citation>
	<citation>407	6	1132</citation>
	<citation>3199	6	1132</citation>
	<citation>3200	6	1132</citation>
	<citation>3201	6	1132</citation>
	<citation>3202	6	1132</citation>
	<citation>3203	6	1132</citation>
	<citation>3204	6	1132</citation>
	<citation>561	6	1132</citation>
	<citation>730	6	1132</citation>
	<citation>731	6	1132</citation>
	</citations>
	<title>An Extension to ALGOL for Manipulating Formulae*</title>
	<conference>CACM February, 1964</conference>
	<authors>
	<author>Perlis, A. J.</author>
	<author>Iturriaga, R.</author>
	</authors>
	<location>CA640211 JB March 10, 1978  3:45 AM</location>
	</document>
	<document id= '1131'>
	<citations>
	<citation>1131	5	1131</citation>
	<citation>1131	5	1131</citation>
	<citation>1131	5	1131</citation>
	<citation>1781	5	1131</citation>
	<citation>123	6	1131</citation>
	<citation>196	6	1131</citation>
	<citation>919	6	1131</citation>
	<citation>990	6	1131</citation>
	<citation>1007	6	1131</citation>
	<citation>1046	6	1131</citation>
	<citation>1131	6	1131</citation>
	<citation>1139	6	1131</citation>
	<citation>1140	6	1131</citation>
	<citation>1149	6	1131</citation>
	<citation>1198	6	1131</citation>
	<citation>1215	6	1131</citation>
	<citation>1223	6	1131</citation>
	<citation>1265	6	1131</citation>
	<citation>1303	6	1131</citation>
	<citation>1323	6	1131</citation>
	<citation>1358	6	1131</citation>
	<citation>1366	6	1131</citation>
	<citation>1421	6	1131</citation>
	<citation>1460	6	1131</citation>
	<citation>1462	6	1131</citation>
	<citation>1463	6	1131</citation>
	<citation>1467	6	1131</citation>
	<citation>1468	6	1131</citation>
	<citation>1477	6	1131</citation>
	<citation>1491	6	1131</citation>
	<citation>1496	6	1131</citation>
	<citation>1531	6	1131</citation>
	<citation>1535	6	1131</citation>
	<citation>1565	6	1131</citation>
	<citation>1601	6	1131</citation>
	<citation>1602	6	1131</citation>
	<citation>1613	6	1131</citation>
	<citation>1614	6	1131</citation>
	<citation>1626	6	1131</citation>
	<citation>1641	6	1131</citation>
	<citation>1787	6	1131</citation>
	<citation>1788	6	1131</citation>
	<citation>205	6	1131</citation>
	<citation>224	6	1131</citation>
	<citation>249	6	1131</citation>
	<citation>288	6	1131</citation>
	<citation>316	6	1131</citation>
	<citation>381	6	1131</citation>
	<citation>398	6	1131</citation>
	<citation>11	6	1131</citation>
	<citation>404	6	1131</citation>
	<citation>410	6	1131</citation>
	<citation>463	6	1131</citation>
	<citation>464	6	1131</citation>
	<citation>483	6	1131</citation>
	<citation>3184	6	1131</citation>
	<citation>3188	6	1131</citation>
	<citation>584	6	1131</citation>
	<citation>600	6	1131</citation>
	<citation>680	6	1131</citation>
	<citation>691	6	1131</citation>
	<citation>763	6	1131</citation>
	<citation>799	6	1131</citation>
	</citations>
	<title>On Context and Ambiguity in Parsing*</title>
	<conference>CACM February, 1964</conference>
	<authors>
	<author>Ross, D. T.</author>
	</authors>
	<location>CA640212 JB March 10, 1978  3:43 AM</location>
	</document>
	<document id= '1130'>
	<citations>
	<citation>1023	5	1130</citation>
	<citation>1130	5	1130</citation>
	<citation>1130	5	1130</citation>
	<citation>1130	5	1130</citation>
	<citation>1222	5	1130</citation>
	<citation>1130	6	1130</citation>
	<citation>1130	6	1130</citation>
	<citation>245	6	1130</citation>
	<citation>310	6	1130</citation>
	</citations>
	<title>Gamma Function (Althm 221)</title>
	<conference>CACM March, 1964</conference>
	<authors>
	<author>Gautschi, W.</author>
	</authors>
	<location>CA640301 JB March 10, 1978  3:42 AM</location>
	</document>
	<document id= '1129'>
	<citations>
	<citation>1129	5	1129</citation>
	<citation>1129	5	1129</citation>
	<citation>1129	5	1129</citation>
	</citations>
	<title>Incomplete Beta Function Ratios (Algorithm 222)</title>
	<conference>CACM March, 1964</conference>
	<authors>
	<author>Gautschi, W.</author>
	</authors>
	<location>CA640302 JB March 10, 1978  3:41 AM</location>
	</document>
	<document id= '1128'>
	<citations>
	<citation>1128	5	1128</citation>
	<citation>1128	5	1128</citation>
	<citation>1128	5	1128</citation>
	<citation>1319	5	1128</citation>
	<citation>152	6	1128</citation>
	<citation>1128	6	1128</citation>
	</citations>
	<title>Evaluation of Determinant (Algorithm 41)</title>
	<conference>CACM March, 1964</conference>
	<authors>
	<author>Rotenberg, L. J.</author>
	</authors>
	<location>CA640303 JB March 10, 1978  3:40 AM</location>
	</document>
	<document id= '1127'>
	<citations>
	<citation>1127	5	1127</citation>
	<citation>1127	5	1127</citation>
	<citation>1127	5	1127</citation>
	</citations>
	<title>Tridiagonal Matrix (Algorithm 122)</title>
	<conference>CACM March, 1964</conference>
	<authors>
	<author>Naur, P.</author>
	</authors>
	<location>CA640304 JB March 10, 1978  3:39 AM</location>
	</document>
	<document id= '1126'>
	<citations>
	<citation>1126	5	1126</citation>
	<citation>1126	5	1126</citation>
	<citation>1126	5	1126</citation>
	<citation>1583	5	1126</citation>
	<citation>831	6	1126</citation>
	<citation>967	6	1126</citation>
	<citation>1126	6	1126</citation>
	<citation>707	6	1126</citation>
	</citations>
	<title>ERF (Algorithm 123)</title>
	<conference>CACM March, 1964</conference>
	<authors>
	<author>Barton, S. P.</author>
	<author>Wagner, J. F.</author>
	</authors>
	<location>CA640305 JB March 10, 1978  3:37 AM</location>
	</document>
	<document id= '1125'>
	<citations>
	<citation>1125	5	1125</citation>
	<citation>1125	5	1125</citation>
	<citation>1125	5	1125</citation>
	</citations>
	<title>Syminv2 (Algorithm 150)</title>
	<conference>CACM March, 1964</conference>
	<authors>
	<author>Naur, P.</author>
	</authors>
	<location>CA640306 JB March 10, 1978  3:36 AM</location>
	</document>
	<document id= '1124'>
	<citations>
	<citation>1124	5	1124</citation>
	<citation>1124	5	1124</citation>
	<citation>1124	5	1124</citation>
	</citations>
	<title>Matrix Division (Algorithm 197)</title>
	<conference>CACM March, 1964</conference>
	<authors>
	<author>Wells, M.</author>
	</authors>
	<location>CA640307 JB March 10, 1978  3:35 AM</location>
	</document>
	<document id= '1123'>
	<citations>
	<citation>1123	5	1123</citation>
	<citation>1123	5	1123</citation>
	<citation>1123	5	1123</citation>
	</citations>
	<title>Gauss (Algorithm 209)</title>
	<conference>CACM March, 1964</conference>
	<authors>
	<author>Gladfelter, G. W.</author>
	</authors>
	<location>CA640308 JB March 10, 1978  3:34 AM</location>
	</document>
	<document id= '1122'>
	<title>A Note on Some Compiling Algorithms</title>
	<abstract>Two compiling generators for arithmetic expressions are discussed: one presently in use in  an experimental compiler, and an improvement suggested by K. Speierman of Burroughs.</abstract>
	<conference>CACM March, 1964</conference>
	<authors>
	<author>Anderson, J. P.</author>
	</authors>
	<location>CA640309 JB March 10, 1978  3:33 AM</location>
	<citations>
	<citation>1122	5	1122</citation>
	<citation>1122	5	1122</citation>
	<citation>1122	5	1122</citation>
	<citation>1551	5	1122</citation>
	<citation>1945	5	1122</citation>
	<citation>823	6	1122</citation>
	<citation>914	6	1122</citation>
	<citation>915	6	1122</citation>
	<citation>917	6	1122</citation>
	<citation>984	6	1122</citation>
	<citation>989	6	1122</citation>
	<citation>990	6	1122</citation>
	<citation>1012	6	1122</citation>
	<citation>1084	6	1122</citation>
	<citation>1098	6	1122</citation>
	<citation>1122	6	1122</citation>
	<citation>1122	6	1122</citation>
	<citation>1138	6	1122</citation>
	<citation>1139	6	1122</citation>
	<citation>1141	6	1122</citation>
	<citation>1200	6	1122</citation>
	<citation>1223	6	1122</citation>
	<citation>1265	6	1122</citation>
	<citation>1336	6	1122</citation>
	<citation>1396	6	1122</citation>
	<citation>1455	6	1122</citation>
	<citation>1477	6	1122</citation>
	<citation>1487	6	1122</citation>
	<citation>1491	6	1122</citation>
	<citation>1496	6	1122</citation>
	<citation>483	6	1122</citation>
	<citation>584	6	1122</citation>
	<citation>669	6	1122</citation>
	<citation>680	6	1122</citation>
	<citation>763	6	1122</citation>
	</citations>
	</document>
	<document id= '1121'>
	<title>Comments on "A Continued Operation Notation"*</title>
	<abstract>This note is intended to clarify and correct several points in a recent paper describing some  notations for symbol manipulation by M.P. Barnett [Comm. ACM 6(August, 1963)].</abstract>
	<conference>CACM March, 1964</conference>
	<authors>
	<author>Barnett, M. P.</author>
	<author>Gerard, J. M.</author>
	<author>Sambles, A. W.</author>
	</authors>
	<location>CA640310 JB March 10, 1978  2:45 AM</location>
	<citations>
	<citation>1062	4	1121</citation>
	<citation>1121	4	1121</citation>
	<citation>1121	4	1121</citation>
	<citation>1139	4	1121</citation>
	<citation>1265	4	1121</citation>
	<citation>1781	4	1121</citation>
	<citation>659	4	1121</citation>
	<citation>720	4	1121</citation>
	<citation>759	4	1121</citation>
	<citation>964	4	1121</citation>
	<citation>1121	5	1121</citation>
	<citation>1121	5	1121</citation>
	<citation>1121	5	1121</citation>
	<citation>464	5	1121</citation>
	<citation>759	5	1121</citation>
	</citations>
	</document>
	<document id= '1120'>
	<citations>
	<citation>1120	5	1120</citation>
	<citation>1120	5	1120</citation>
	<citation>1120	5	1120</citation>
	</citations>
	<title>"ALCOR Group Representations of ALGOL Symbols," Comm. ACM 6 (1963), 597-599. (Corrigenda)</title>
	<conference>CACM March, 1964</conference>
	<location>CA640312 JB March 10, 1978  2:42 AM</location>
	</document>
	<document id= '1119'>
	<citations>
	<citation>1119	5	1119</citation>
	<citation>1119	5	1119</citation>
	<citation>1119	5	1119</citation>
	</citations>
	<title>An Open Letter to X3.4.3 (FORTRAN Standards -- American Association)</title>
	<conference>CACM March, 1964</conference>
	<location>CA640313 JB March 10, 1978  2:40 AM</location>
	</document>
	<document id= '1118'>
	<citations>
	<citation>1118	4	1118</citation>
	<citation>1118	4	1118</citation>
	<citation>826	4	1118</citation>
	<citation>948	4	1118</citation>
	<citation>942	5	1118</citation>
	<citation>1118	5	1118</citation>
	<citation>1118	5	1118</citation>
	<citation>1118	5	1118</citation>
	<citation>826	5	1118</citation>
	</citations>
	<title>FORTRAN Subroutines for Time Series Data Reduction*</title>
	<conference>CACM March, 1964</conference>
	<authors>
	<author>MacGowan, R. A.</author>
	</authors>
	<location>CA640314 JB March 10, 1978  2:39 AM</location>
	</document>
	<document id= '1117'>
	<title>Polyphase Sorting With Overlapped Rewind*</title>
	<abstract>A variation of the polyphase merge technique of sorting is described which permits one tape  at a time to be rewound while the merge is continued on the remaining tapes.  The result is the overlapping  of a major portion of the rewind time.  The technique should be considered whenever a sort is written  to operate on five or more tapes that cannot be read backwards.  The savings of the overlap method appear  to increase as the number of available tapes is increased.</abstract>
	<conference>CACM March, 1964</conference>
	<authors>
	<author>McAlester, R. L.</author>
	</authors>
	<location>CA640315 JB March 10, 1978  2:38 AM</location>
	<citations>
	<citation>1117	4	1117</citation>
	<citation>1117	4	1117</citation>
	<citation>1117	4	1117</citation>
	<citation>2017	4	1117</citation>
	<citation>2017	4	1117</citation>
	<citation>2146	4	1117</citation>
	<citation>2146	4	1117</citation>
	<citation>677	4	1117</citation>
	<citation>860	4	1117</citation>
	<citation>861	4	1117</citation>
	<citation>1117	5	1117</citation>
	<citation>1117	5	1117</citation>
	<citation>1117	5	1117</citation>
	<citation>636	5	1117</citation>
	<citation>862	5	1117</citation>
	<citation>861	5	1117</citation>
	</citations>
	</document>
	<document id= '1116'>
	<title>Tests on a Computer Method for Constructing School Timetables*</title>
	<abstract>A previously proposed computer method for constructing timetables, based on an iteration involving  Boolean matrices, is described.  In limited tests the method has successfully produced timetables on  every trial.  References are given which relate the timetable problem to theorems on matrices of zeros  and ones, and to theorems on bipartite graphs.  Some problems of applying the method to constructing  timetables in real situations are noted.</abstract>
	<conference>CACM March, 1964</conference>
	<authors>
	<author>Csima, J.</author>
	<author>Gotlieb, C. C.</author>
	</authors>
	<location>CA640316 JB March 10, 1978  2:34 AM</location>
	<citations>
	<citation>1116	5	1116</citation>
	<citation>1116	5	1116</citation>
	<citation>1116	5	1116</citation>
	<citation>1367	5	1116</citation>
	<citation>2772	5	1116</citation>
	<citation>2787	5	1116</citation>
	<citation>1116	6	1116</citation>
	<citation>1116	6	1116</citation>
	<citation>1116	6	1116</citation>
	<citation>1429	6	1116</citation>
	<citation>1429	6	1116</citation>
	</citations>
	</document>
	<document id= '1115'>
	<title>Randomized Binary Searching With Tree Structure</title>
	<abstract>A more efficient method of using tree structures is proposed, which utilizers both plus and  minus branches in the search path.  Very significant gains result when the search key includes alphabetic  characters.</abstract>
	<conference>CACM March, 1964</conference>
	<authors>
	</authors>
	<location>CA640317 JB March 10, 1978  2:30 AM</location>
	<citations>
	<citation>1115	5	1115</citation>
	<citation>1115	5	1115</citation>
	<citation>1115	5	1115</citation>
	<citation>1935	5	1115</citation>
	<citation>849	6	1115</citation>
	<citation>1115	6	1115</citation>
	</citations>
	</document>
	<document id= '1114'>
	<title>Generating a Canonical Prefix Encoding*</title>
	<abstract>Computer programs for generating a minimum-redundancy exhaustive prefix encoding are described.   One program generates a Huffman frequency tree, another determines the structure functions of an encoding,  and a third program assigns codes.</abstract>
	<conference>CACM March, 1964</conference>
	<authors>
	<author>Schwartz, E. S.</author>
	<author>Kallick, B.</author>
	</authors>
	<location>CA640318 JB March 10, 1978  2:28 AM</location>
	<citations>
	<citation>1114	5	1114</citation>
	<citation>1114	5	1114</citation>
	<citation>1114	5	1114</citation>
	<citation>2346	5	1114</citation>
	<citation>2459	5	1114</citation>
	<citation>1114	6	1114</citation>
	<citation>1114	6	1114</citation>
	</citations>
	</document>
	<document id= '1113'>
	<title>Computer-Made Perspective Movies as a Scientific and Communication Tool*</title>
	<abstract>It is easy to program the basic transformation required for a perspective drawing.  This fact  plus the advent of high speed microfilm printers such as the General Dynamics Electronics S-C 4020 makes  possible perspective movies as the direct output from a computer.  The programming of such a movie is  briefly described for studying the angular motions of a satellite containing an attitude control system.   In the movie, a domino-shaped box represents the satellite and a sphere with circles of latitude and  longitude represents the earth.  The cost was approximately three to eight minutes of IBM 7090 time per  one minute of movie.</abstract>
	<conference>CACM March, 1964</conference>
	<authors>
	<author>Zajac, E. E.</author>
	</authors>
	<location>CA640319 JB March 10, 1978  2:26 AM</location>
	<citations>
	<citation>1113	5	1113</citation>
	<citation>1113	5	1113</citation>
	<citation>1113	5	1113</citation>
	</citations>
	</document>
	<document id= '1112'>
	<title>A Technique for Computer Detection and Correction of Spelling Errors*</title>
	<abstract>The method described assumes that a word which cannot be found in a dictionary has at most  one error, which might be a wrong, missing or extra letter or a single transposition.  The unidentified  input word is compared to the dictionary again, testing each time to see if the words match-assuming  one of these errors occurred.  During a test run on garbled text, correct identifications were made for  over 95 percent of these error types.</abstract>
	<conference>CACM March, 1964</conference>
	<authors>
	<author>Damerau, F. J.</author>
	</authors>
	<location>CA640320 JB March 10, 1978  2:21 AM</location>
	<citations>
	<citation>1112	4	1112</citation>
	<citation>1592	4	1112</citation>
	<citation>2111	4	1112</citation>
	<citation>2339	4	1112</citation>
	<citation>440	4	1112</citation>
	<citation>1112	5	1112</citation>
	<citation>1112	5	1112</citation>
	<citation>1112	5	1112</citation>
	<citation>1592	5	1112</citation>
	<citation>2111	5	1112</citation>
	<citation>2339	5	1112</citation>
	<citation>619	5	1112</citation>
	<citation>830	6	1112</citation>
	<citation>982	6	1112</citation>
	<citation>1112	6	1112</citation>
	<citation>1112	6	1112</citation>
	<citation>1112	6	1112</citation>
	<citation>1592	6	1112</citation>
	<citation>1592	6	1112</citation>
	<citation>440	6	1112</citation>
	<citation>619	6	1112</citation>
	<citation>619	6	1112</citation>
	<citation>619	6	1112</citation>
	</citations>
	</document>
	<document id= '1111'>
	<title>A Class of Iterative Techniques For the Factorization of Polynomials*</title>
	<abstract>A method of iteration is developed in terms of a function of somewhat arbitrary character.   Sufficient conditions are given for convergence of the process, yielding factors of arbitrary degree  for polynomials in one variable.  Both Lin's method and Newton's method occur as special cases.</abstract>
	<conference>CACM March, 1964</conference>
	<authors>
	<author>Luther, H. A.</author>
	</authors>
	<location>CA640321 JB March 10, 1978  2:10 AM</location>
	<citations>
	<citation>1111	4	1111</citation>
	<citation>1111	5	1111</citation>
	<citation>1111	5	1111</citation>
	<citation>1111	5	1111</citation>
	<citation>894	5	1111</citation>
	</citations>
	</document>
	<document id= '1110'>
	<title>A Fourier Series Method for the Numerical Solution of a Class of Parabolic Partial Differential  Equations*</title>
	<abstract>A Fourier series method is described which, when applied to a certain class of parabolic partial  differential equations, reduces the problem to a system of ordinary differential equations.  An application  is given for which the method shows a considerable advantage over conventional finite difference methods.</abstract>
	<conference>CACM March, 1964</conference>
	<authors>
	<author>Forrington, C. V. D.</author>
	</authors>
	<location>CA640322 JB March 10, 1978  2:08 AM</location>
	<citations>
	<citation>1110	5	1110</citation>
	<citation>1110	5	1110</citation>
	<citation>1110	5	1110</citation>
	</citations>
	</document>
	<document id= '1109'>
	<title>Conversion of a Power to a Series of Chebyshev Polynomials*</title>
	<abstract>Even slowly convergent power series can be rearranged as series in Chebyshev polynomials if  appropriate sequence transformations are used in evaluating the coefficients.  The method is illustrated  by computing the coefficients for the expansion of the logarithm and dilogarithm.</abstract>
	<conference>CACM March, 1964</conference>
	<authors>
	</authors>
	<location>CA640323 JB March 10, 1978  2:05 AM</location>
	<citations>
	<citation>249	4	1109</citation>
	<citation>254	4	1109</citation>
	<citation>272	4	1109</citation>
	<citation>1102	4	1109</citation>
	<citation>1109	4	1109</citation>
	<citation>1140	4	1109</citation>
	<citation>1188	4	1109</citation>
	<citation>1306	4	1109</citation>
	<citation>1464	4	1109</citation>
	<citation>1491	4	1109</citation>
	<citation>1767	4	1109</citation>
	<citation>1781	4	1109</citation>
	<citation>1787	4	1109</citation>
	<citation>1949	4	1109</citation>
	<citation>321	4	1109</citation>
	<citation>2059	4	1109</citation>
	<citation>2126	4	1109</citation>
	<citation>435	4	1109</citation>
	<citation>437	4	1109</citation>
	<citation>463	4	1109</citation>
	<citation>483	4	1109</citation>
	<citation>491	4	1109</citation>
	<citation>2732	4	1109</citation>
	<citation>560	4	1109</citation>
	<citation>583	4	1109</citation>
	<citation>3073	4	1109</citation>
	<citation>627	4	1109</citation>
	<citation>631	4	1109</citation>
	<citation>632	4	1109</citation>
	<citation>642	4	1109</citation>
	<citation>644	4	1109</citation>
	<citation>653	4	1109</citation>
	<citation>680	4	1109</citation>
	<citation>761	4	1109</citation>
	<citation>762	4	1109</citation>
	<citation>763	4	1109</citation>
	<citation>123	4	1109</citation>
	<citation>140	4	1109</citation>
	<citation>919	4	1109</citation>
	<citation>989	4	1109</citation>
	<citation>196	5	1109</citation>
	<citation>1109	5	1109</citation>
	<citation>1109	5	1109</citation>
	<citation>1109	5	1109</citation>
	</citations>
	</document>
	<document id= '1108'>
	<title>Digital Data Processor for Tracking the Partially Illuminated Moon*</title>
	<abstract>A study of lunar tracking techniques and fabrication of a breadboard to assess the feasibility  of the best technique selected was conducted to define a tracking system for observation of the sight line  to the center of a partially illuminated moon.  The data processing portion of the system is presented  in detail and then described in general are the operation of the tracker head assembly for data readout,  the operation of the entire system and the effect data processing considerations have on the design of  the tracker system.  The system basically consists of an optical sensor, digital computer and tracker  drive mechanism.  The three system units, connected in cascade, comprise the control loop.  For this  application, an optical telescope with a radial mechanical scanning mechanism was used that read out  lunar sight line measurement information.  This information is sequentially read into a special purpose  digital computer that extracts the measurements and computes the error signals that drive the tracker  to the appropriate attitude.</abstract>
	<conference>CACM March, 1964</conference>
	<authors>
	<author>Wilcox, H. J.</author>
	</authors>
	<location>CA640324 JB March 10, 1978  2:02 AM</location>
	<citations>
	<citation>1108	5	1108</citation>
	<citation>1108	5	1108</citation>
	<citation>1108	5	1108</citation>
	</citations>
	</document>
	<document id= '1107'>
	<citations>
	<citation>1107	4	1107</citation>
	<citation>1205	4	1107</citation>
	<citation>1100	5	1107</citation>
	<citation>1107	5	1107</citation>
	<citation>1107	5	1107</citation>
	<citation>1107	5	1107</citation>
	<citation>1205	5	1107</citation>
	<citation>1100	6	1107</citation>
	<citation>1104	6	1107</citation>
	<citation>1107	6	1107</citation>
	<citation>68	6	1107</citation>
	</citations>
	<title>Computers and Education</title>
	<conference>CACM April, 1964</conference>
	<authors>
	<author>Keenan, T. A.</author>
	</authors>
	<location>CA640401 JB March 10, 1978  1:54 AM</location>
	</document>
	<document id= '1106'>
	<citations>
	<citation>1106	5	1106</citation>
	<citation>1106	5	1106</citation>
	<citation>1106	5	1106</citation>
	</citations>
	<title>Programming of Digital Computers</title>
	<conference>CACM April, 1964</conference>
	<authors>
	<author>Perlis, A. J.</author>
	</authors>
	<location>CA640402 JB March 10, 1978  1:54 AM</location>
	</document>
	<document id= '1105'>
	<citations>
	<citation>1046	4	1105</citation>
	<citation>1105	4	1105</citation>
	<citation>1139	4	1105</citation>
	<citation>1140	4	1105</citation>
	<citation>1234	4	1105</citation>
	<citation>1263	4	1105</citation>
	<citation>1265	4	1105</citation>
	<citation>1496	4	1105</citation>
	<citation>1781	4	1105</citation>
	<citation>1824	4	1105</citation>
	<citation>2126	4	1105</citation>
	<citation>2546	4	1105</citation>
	<citation>464	4	1105</citation>
	<citation>584	4	1105</citation>
	<citation>631	4	1105</citation>
	<citation>653	4	1105</citation>
	<citation>680	4	1105</citation>
	<citation>763	4	1105</citation>
	<citation>795	4	1105</citation>
	<citation>799	4	1105</citation>
	<citation>945	4	1105</citation>
	<citation>1105	5	1105</citation>
	<citation>1105	5	1105</citation>
	<citation>1105	5	1105</citation>
	<citation>404	5	1105</citation>
	</citations>
	<title>On Introducing Digital Computing</title>
	<conference>CACM April, 1964</conference>
	<authors>
	<author>Arden, B. W.</author>
	</authors>
	<location>CA640403 JB March 10, 1978  1:53 AM</location>
	</document>
	<document id= '1104'>
	<citations>
	<citation>1104	5	1104</citation>
	<citation>1104	5	1104</citation>
	<citation>1104	5	1104</citation>
	<citation>1205	5	1104</citation>
	<citation>1100	6	1104</citation>
	<citation>1104	6	1104</citation>
	<citation>1107	6	1104</citation>
	<citation>68	6	1104</citation>
	</citations>
	<title>An Undergraduate Curriculum in Numerical Analysis</title>
	<conference>CACM April, 1964</conference>
	<authors>
	<author>Forsythe, G. E.</author>
	</authors>
	<location>CA640404 JB March 10, 1978  1:51 AM</location>
	</document>
	<document id= '1103'>
	<citations>
	<citation>1103	5	1103</citation>
	<citation>1103	5	1103</citation>
	<citation>1103	5	1103</citation>
	</citations>
	<title>Logic for the Computer Sciences</title>
	<conference>CACM April, 1964</conference>
	<authors>
	<author>Korfhage, R. R.</author>
	</authors>
	<location>CA640405 JB March 10, 1978  1:50 AM</location>
	</document>
	<document id= '1102'>
	<citations>
	<citation>249	4	1102</citation>
	<citation>254	4	1102</citation>
	<citation>272	4	1102</citation>
	<citation>1024	4	1102</citation>
	<citation>1050	4	1102</citation>
	<citation>1051	4	1102</citation>
	<citation>1051	4	1102</citation>
	<citation>1102	4	1102</citation>
	<citation>1102	4	1102</citation>
	<citation>1102	4	1102</citation>
	<citation>1102	4	1102</citation>
	<citation>1102	4	1102</citation>
	<citation>1109	4	1102</citation>
	<citation>1132	4	1102</citation>
	<citation>1140	4	1102</citation>
	<citation>1142	4	1102</citation>
	<citation>1188	4	1102</citation>
	<citation>1306	4	1102</citation>
	<citation>1390	4	1102</citation>
	<citation>1464	4	1102</citation>
	<citation>1486	4	1102</citation>
	<citation>1491	4	1102</citation>
	<citation>1549	4	1102</citation>
	<citation>1549	4	1102</citation>
	<citation>1706	4	1102</citation>
	<citation>1767	4	1102</citation>
	<citation>1781	4	1102</citation>
	<citation>1781	4	1102</citation>
	<citation>1787	4	1102</citation>
	<citation>1826	4	1102</citation>
	<citation>1878	4	1102</citation>
	<citation>1945	4	1102</citation>
	<citation>1949	4	1102</citation>
	<citation>321	4	1102</citation>
	<citation>378	4	1102</citation>
	<citation>378	4	1102</citation>
	<citation>2059	4	1102</citation>
	<citation>2060	4	1102</citation>
	<citation>2126	4	1102</citation>
	<citation>2155	4	1102</citation>
	<citation>2168	4	1102</citation>
	<citation>435	4	1102</citation>
	<citation>437	4	1102</citation>
	<citation>463	4	1102</citation>
	<citation>483	4	1102</citation>
	<citation>491	4	1102</citation>
	<citation>2719	4	1102</citation>
	<citation>2723	4	1102</citation>
	<citation>2732	4	1102</citation>
	<citation>2838	4	1102</citation>
	<citation>2842	4	1102</citation>
	<citation>2855	4	1102</citation>
	<citation>2879	4	1102</citation>
	<citation>560	4	1102</citation>
	<citation>583	4	1102</citation>
	<citation>3008	4	1102</citation>
	<citation>3073	4	1102</citation>
	<citation>3077	4	1102</citation>
	<citation>3080	4	1102</citation>
	<citation>3106	4	1102</citation>
	<citation>627	4	1102</citation>
	<citation>627	4	1102</citation>
	<citation>631	4	1102</citation>
	<citation>632	4	1102</citation>
	<citation>642	4	1102</citation>
	<citation>644	4	1102</citation>
	<citation>653	4	1102</citation>
	<citation>680	4	1102</citation>
	<citation>731	4	1102</citation>
	<citation>761	4	1102</citation>
	<citation>762	4	1102</citation>
	<citation>762	4	1102</citation>
	<citation>763	4	1102</citation>
	<citation>798	4	1102</citation>
	<citation>106	4	1102</citation>
	<citation>123	4	1102</citation>
	<citation>140	4	1102</citation>
	<citation>919	4	1102</citation>
	<citation>949	4	1102</citation>
	<citation>989	4	1102</citation>
	<citation>196	5	1102</citation>
	<citation>1102	5	1102</citation>
	<citation>1102	5	1102</citation>
	<citation>1102	5	1102</citation>
	<citation>209	5	1102</citation>
	<citation>210	5	1102</citation>
	<citation>406	5	1102</citation>
	<citation>483	5	1102</citation>
	</citations>
	<title>Mechanical Languages: A Course Specification</title>
	<conference>CACM April, 1964</conference>
	<authors>
	<author>Gorn, S.</author>
	</authors>
	<location>CA640406 JB March 10, 1978  1:49 AM</location>
	</document>
	<document id= '1101'>
	<citations>
	<citation>1101	5	1101</citation>
	<citation>1101	5	1101</citation>
	<citation>1101	5	1101</citation>
	</citations>
	<title>The Place of Logical Design and Switching Theory In The Computer Curriculum</title>
	<conference>CACM April, 1964</conference>
	<authors>
	<author>Muller, D. E.</author>
	</authors>
	<location>CA640407 JB March 10, 1978  1:49 AM</location>
	</document>
	<document id= '1100'>
	<citations>
	<citation>1100	5	1100</citation>
	<citation>1100	5	1100</citation>
	<citation>1100	5	1100</citation>
	<citation>1107	5	1100</citation>
	<citation>1205	5	1100</citation>
	<citation>1100	6	1100</citation>
	<citation>1100	6	1100</citation>
	<citation>1104	6	1100</citation>
	<citation>1107	6	1100</citation>
	<citation>68	6	1100</citation>
	</citations>
	<title>Status of Computer Sciences Curricula in Colleges and Universities</title>
	<conference>CACM April, 1964</conference>
	<authors>
	<author>Atchison, W. F.</author>
	<author>Hamblen, J. W.</author>
	</authors>
	<location>CA640408 JB March 10, 1978  1:47 AM</location>
	</document>
	<document id= '1099'>
	<title>Professional Computer Work for the Blind</title>
	<abstract>Developments in computer technology have opened new professional opportunities for the intelligent  blind.  Since there are few if any occupations in which the blind can participate without serious disadvantage,  the opportunities offered them to gain entrance into various occupations through computer use including  that of programmer, is important for future rehabilitation planning. Also of immediate interest is the  fact that the blind may be especially suited for programming work.  Because of intense training in and  constant experience with locating objects in the unseen environment and also because of superbly trained  memory, the blind brings to the work of programming skills which the sighted has had little need to acquire.   These qualifications should result in fewer debugging problems and make the blind a valuable addition  to any systems group.  Before the blind could become a serious professional, a number of aids and techniques  had to be developed that can mediate between machines and programmer.  This paper describes the techniques  and aids which were designed by the staff of the Medical Computing Center of the University of Cincinnati  College of Medicine.</abstract>
	<conference>CACM April, 1964</conference>
	<authors>
	<author>Sterling, T. D.</author>
	<author>Lichstein, M.</author>
	<author>Scarpino, F.</author>
	<author>Stuebing, D.</author>
	</authors>
	<location>CA640409 JB March 10, 1978  1:46 AM</location>
	<citations>
	<citation>1099	5	1099</citation>
	<citation>1099	5	1099</citation>
	<citation>1099	5	1099</citation>
	<citation>1264	5	1099</citation>
	<citation>1740	5	1099</citation>
	<citation>1099	6	1099</citation>
	<citation>1099	6	1099</citation>
	</citations>
	</document>
	<document id= '1098'>
	<title>A Comparison of List-Processing Computer Languages (Including a Detailed Comparison of COMIT,  IPL-V, LISP 1.5, and SLIP)</title>
	<abstract>A detailed comparison is presented of COMIT, IPL-V, LISP 1.5 and SLIP - four well-known computer  programming languages which, among them, exhibit all the principal characteristics of existing list-processing  languages.  Important common features of list-processing languages are reviewed: forms of data structures  which are manipulated, necessity for dynamic allocation of storage, use of pushdown stores, and use of  recursive operations.  Principal differences between the four languages under consideration are detailed:  representations of data, both by the programmer and within the machine; methods for storage allocation;  programming formalisms and special processes available, including arithmetic facilities; and usability  in terms of availability, documentation, learning aids and debugging facilities.  A rough comparison  shows that all the languages discussed have approximately the same speed.  Finally, the authors give  some heuristics to aid in the selection of one of these languages for use in particular problem applications,  concluding that no one of the languages considered is distinctly superior in all possible list-processing  applications.</abstract>
	<conference>CACM April, 1964</conference>
	<authors>
	<author>Bobrow, D. G.</author>
	<author>Raphael, B.</author>
	</authors>
	<location>CA640410 JB March 10, 1978  1:37 AM</location>
	<citations>
	<citation>1024	4	1098</citation>
	<citation>1051	4	1098</citation>
	<citation>1098	4	1098</citation>
	<citation>1214	4	1098</citation>
	<citation>1380	4	1098</citation>
	<citation>1388	4	1098</citation>
	<citation>1393	4	1098</citation>
	<citation>1485	4	1098</citation>
	<citation>1487	4	1098</citation>
	<citation>1549	4	1098</citation>
	<citation>1570	4	1098</citation>
	<citation>1878	4	1098</citation>
	<citation>1946	4	1098</citation>
	<citation>1957	4	1098</citation>
	<citation>2168	4	1098</citation>
	<citation>2723	4	1098</citation>
	<citation>2857	4	1098</citation>
	<citation>3112	4	1098</citation>
	<citation>1098	5	1098</citation>
	<citation>1098	5	1098</citation>
	<citation>1098	5	1098</citation>
	<citation>1570	5	1098</citation>
	<citation>1945	5	1098</citation>
	<citation>2314	5	1098</citation>
	<citation>731	5	1098</citation>
	<citation>823	6	1098</citation>
	<citation>914	6	1098</citation>
	<citation>915	6	1098</citation>
	<citation>917	6	1098</citation>
	<citation>984	6	1098</citation>
	<citation>989	6	1098</citation>
	<citation>990	6	1098</citation>
	<citation>1012	6	1098</citation>
	<citation>1084	6	1098</citation>
	<citation>1098	6	1098</citation>
	<citation>1098	6	1098</citation>
	<citation>1098	6	1098</citation>
	<citation>1122	6	1098</citation>
	<citation>1138	6	1098</citation>
	<citation>1139	6	1098</citation>
	<citation>1141	6	1098</citation>
	<citation>1200	6	1098</citation>
	<citation>1223	6	1098</citation>
	<citation>1265	6	1098</citation>
	<citation>1336	6	1098</citation>
	<citation>1396	6	1098</citation>
	<citation>1455	6	1098</citation>
	<citation>1477	6	1098</citation>
	<citation>1487	6	1098</citation>
	<citation>1491	6	1098</citation>
	<citation>1496	6	1098</citation>
	<citation>1626	6	1098</citation>
	<citation>2082	6	1098</citation>
	<citation>2148	6	1098</citation>
	<citation>483	6	1098</citation>
	<citation>584	6	1098</citation>
	<citation>669	6	1098</citation>
	<citation>680	6	1098</citation>
	<citation>731	6	1098</citation>
	<citation>763	6	1098</citation>
	</citations>
	</document>
	<document id= '1097'>
	<title>An Algorithm for Converting Integers from Base A to Base B</title>
	<abstract>A little known, simple algorithm for integer conversion between number systems is presented  and proved.</abstract>
	<conference>CACM April, 1964</conference>
	<authors>
	<author>Gladwin, H. T.</author>
	</authors>
	<location>CA640411 JB March 10, 1978  1:30 AM</location>
	<citations>
	<citation>1097	5	1097</citation>
	<citation>1097	5	1097</citation>
	<citation>1097	5	1097</citation>
	</citations>
	</document>
	<document id= '1096'>
	<citations>
	<citation>1096	5	1096</citation>
	<citation>1096	5	1096</citation>
	<citation>1096	5	1096</citation>
	</citations>
	<title>On Avoiding Matrix Reversals Between 7090 FORTRAN II and 7090 FORTRAN IV</title>
	<conference>CACM April, 1964</conference>
	<authors>
	<author>Stevens, D.</author>
	<author>Benson, B.</author>
	</authors>
	<location>CA640412 JB March 10, 1978  1:28 AM</location>
	</document>
	<document id= '1095'>
	<citations>
	<citation>1095	5	1095</citation>
	<citation>1095	5	1095</citation>
	<citation>1095	5	1095</citation>
	</citations>
	<title>Decimal Tables of Binary Coded Tables</title>
	<conference>CACM April, 1964</conference>
	<authors>
	<author>Griebrok, M.</author>
	</authors>
	<location>CA640413 JB March 10, 1978  1:14 AM</location>
	</document>
	<document id= '1094'>
	<citations>
	<citation>1094	5	1094</citation>
	<citation>1094	5	1094</citation>
	<citation>1094	5	1094</citation>
	</citations>
	<title>Prime Twins (Algorithm 223)</title>
	<conference>CACM April, 1964</conference>
	<authors>
	<author>Shimrat, M.</author>
	</authors>
	<location>CA640414 JB March 10, 1978  1:13 AM</location>
	</document>
	<document id= '1093'>
	<citations>
	<citation>1093	5	1093</citation>
	<citation>1093	5	1093</citation>
	<citation>1093	5	1093</citation>
	<citation>1946	5	1093</citation>
	<citation>878	6	1093</citation>
	<citation>902	6	1093</citation>
	<citation>1093	6	1093</citation>
	<citation>1177	6	1093</citation>
	<citation>1387	6	1093</citation>
	<citation>1393	6	1093</citation>
	<citation>360	6	1093</citation>
	<citation>731	6	1093</citation>
	</citations>
	<title>Evaluation of Determinant (Algorithm 224)</title>
	<conference>CACM April, 1964</conference>
	<authors>
	<author>Rotenberg, L. J.</author>
	</authors>
	<location>CA640415 JB March 10, 1978  1:12 AM</location>
	</document>
	<document id= '1092'>
	<citations>
	<citation>1092	5	1092</citation>
	<citation>1092	5	1092</citation>
	<citation>1092	5	1092</citation>
	<citation>1352	5	1092</citation>
	<citation>2093	5	1092</citation>
	<citation>834	6	1092</citation>
	<citation>834	6	1092</citation>
	<citation>872	6	1092</citation>
	<citation>872	6	1092</citation>
	<citation>1040	6	1092</citation>
	<citation>1092	6	1092</citation>
	<citation>1092	6	1092</citation>
	<citation>1241	6	1092</citation>
	<citation>1273	6	1092</citation>
	<citation>1298	6	1092</citation>
	<citation>1573	6	1092</citation>
	<citation>324	6	1092</citation>
	<citation>429	6	1092</citation>
	<citation>429	6	1092</citation>
	<citation>570	6	1092</citation>
	<citation>621	6	1092</citation>
	<citation>786	6	1092</citation>
	</citations>
	<title>Nonrecursive Adaptive Integration (Algorithm 182)</title>
	<conference>CACM April, 1964</conference>
	<authors>
	<author>Butler, H. S.</author>
	</authors>
	<location>CA640416 JB March 10, 1978  12:34 AM</location>
	</document>
	<document id= '1091'>
	<citations>
	<citation>1091	5	1091</citation>
	<citation>1091	5	1091</citation>
	<citation>1091	5	1091</citation>
	</citations>
	<title>Hypergeometric and Confluent Hypergeometric (Algorithm 191 &amp; 192)</title>
	<conference>CACM April, 1964</conference>
	<authors>
	</authors>
	<location>CA640417 JB March 10, 1978  12:33 AM</location>
	</document>
	<document id= '1090'>
	<citations>
	<citation>1090	5	1090</citation>
	<citation>1090	5	1090</citation>
	<citation>1090	5	1090</citation>
	</citations>
	<title>Incomplete Beta Function Ratios (Algorithm 222)</title>
	<conference>CACM April, 1964</conference>
	<authors>
	<author>Gautschi, W.</author>
	</authors>
	<location>CA640418 JB March 10, 1978  12:32 AM</location>
	</document>
	<document id= '1089'>
	<citations>
	<citation>1089	5	1089</citation>
	<citation>1089	5	1089</citation>
	<citation>1089	5	1089</citation>
	</citations>
	<title>Designing a Computer Center</title>
	<conference>CACM April, 1964</conference>
	<authors>
	<author>Denison, A.</author>
	<author>Popov, G.</author>
	</authors>
	<location>CA640420 JB March 10, 1978  12:29 AM</location>
	</document>
	<document id= '1088'>
	<title>Menu Planning by Computer</title>
	<abstract>A computer code has been developed which plans menus by finding minimum cost combinations of  menu items such that the daily dietary, gastronomic and production requirements can be satisfied for  a sequence of days.  A fast, special integer programming algorithm is described which approximates the  theoretical solution to the problem.  If necessary, any menu can be changed on-line and then post-optimized.   Up to 30 percent saving on food cost is possible.  A FORTRAN program for the IBM 1410 is available on  request.  A considerable amount of data processing must precede the implementation of the system.</abstract>
	<conference>CACM April, 1964</conference>
	<authors>
	<author>Balistfy, J. L.</author>
	</authors>
	<location>CA640421 JB March 10, 1978  12:26 AM</location>
	<citations>
	<citation>1088	5	1088</citation>
	<citation>1088	5	1088</citation>
	<citation>1088	5	1088</citation>
	<citation>1658	5	1088</citation>
	<citation>1088	6	1088</citation>
	</citations>
	</document>
	<document id= '1087'>
	<title>Problems in Automatic Abstracting</title>
	<abstract>A variety of problems concerning the design and operation of an automatic abstracting system  are discussed.  The purpose is to a general view of several major problem areas.  No attempt is made  to discuss details or to indicate preferences among alternative solutions.</abstract>
	<conference>CACM April, 1964</conference>
	<authors>
	<author>Edmundson, H. P.</author>
	</authors>
	<location>CA640422 JB March 10, 1978  12:21 AM</location>
	<citations>
	<citation>1087	4	1087</citation>
	<citation>634	4	1087</citation>
	<citation>1087	5	1087</citation>
	<citation>1087	5	1087</citation>
	<citation>1087	5	1087</citation>
	<citation>329	5	1087</citation>
	</citations>
	</document>
	<document id= '1086'>
	<citations>
	<citation>1086	4	1086</citation>
	<citation>1086	4	1086</citation>
	<citation>1132	4	1086</citation>
	<citation>1234	4	1086</citation>
	<citation>1263	4	1086</citation>
	<citation>1265	4	1086</citation>
	<citation>1270	4	1086</citation>
	<citation>1323	4	1086</citation>
	<citation>1358	4	1086</citation>
	<citation>1379	4	1086</citation>
	<citation>1380	4	1086</citation>
	<citation>1453	4	1086</citation>
	<citation>1464	4	1086</citation>
	<citation>1484	4	1086</citation>
	<citation>1491	4	1086</citation>
	<citation>1496	4	1086</citation>
	<citation>1498	4	1086</citation>
	<citation>1613	4	1086</citation>
	<citation>1614	4	1086</citation>
	<citation>1781	4	1086</citation>
	<citation>1825	4	1086</citation>
	<citation>1860	4	1086</citation>
	<citation>2083	4	1086</citation>
	<citation>2178	4	1086</citation>
	<citation>2179	4	1086</citation>
	<citation>2252	4	1086</citation>
	<citation>2325	4	1086</citation>
	<citation>2341	4	1086</citation>
	<citation>2546	4	1086</citation>
	<citation>2645	4	1086</citation>
	<citation>2652	4	1086</citation>
	<citation>2684	4	1086</citation>
	<citation>2842	4	1086</citation>
	<citation>2929	4	1086</citation>
	<citation>2934	4	1086</citation>
	<citation>3069	4	1086</citation>
	<citation>669	4	1086</citation>
	<citation>679	4	1086</citation>
	<citation>691	4	1086</citation>
	<citation>761	4	1086</citation>
	<citation>949	4	1086</citation>
	<citation>989	4	1086</citation>
	<citation>1086	5	1086</citation>
	<citation>1086	5	1086</citation>
	<citation>1086	5	1086</citation>
	<citation>1137	5	1086</citation>
	<citation>1613	5	1086</citation>
	<citation>3184	5	1086</citation>
	<citation>987	6	1086</citation>
	<citation>1086	6	1086</citation>
	<citation>1134	6	1086</citation>
	<citation>1453	6	1086</citation>
	<citation>3184	6	1086</citation>
	</citations>
	<title>A Proposal for Input-Output Conventions in ALGOL 60-A Report of the Subcommittee on ALGOL of  the ACM Programming Language Committee</title>
	<conference>CACM May, 1964</conference>
	<location>CA640501 JB March 10, 1978  12:18 AM</location>
	</document>
	<document id= '1085'>
	<citations>
	<citation>1085	5	1085</citation>
	<citation>1085	5	1085</citation>
	<citation>1085	5	1085</citation>
	</citations>
	<title>Specification for General-Purpose Paper Cards for Information Processing (Proposed American Standard)</title>
	<conference>CACM May, 1964</conference>
	<location>CA640504 JB March 10, 1978  12:14 AM</location>
	</document>
	<document id= '1084'>
	<title>On Declaring Arbitrarily Coded Alphabets</title>
	<abstract>The inability of existing programming languages to handle character strings from more than  one or two alphabets is mentioned and a scheme for declaring additional alphabets is proposed.  The scheme  provides for: many-to-one encodings, right or left justification, collating sequences different from  numeric sequence, variations in character size (number of bits.) from alphabet to alphabet, and arbitrary  source-language character representation.</abstract>
	<conference>CACM May, 1964</conference>
	<authors>
	<author>Shaw, C. J.</author>
	</authors>
	<location>CA640505 JB March 10,1978  12:13 AM</location>
	<citations>
	<citation>1084	4	1084</citation>
	<citation>1084	4	1084</citation>
	<citation>1084	4	1084</citation>
	<citation>1084	4	1084</citation>
	<citation>1084	4	1084</citation>
	<citation>1084	4	1084</citation>
	<citation>1379	4	1084</citation>
	<citation>1625	4	1084</citation>
	<citation>1945	4	1084</citation>
	<citation>1084	5	1084</citation>
	<citation>1084	5	1084</citation>
	<citation>1084	5	1084</citation>
	<citation>1945	5	1084</citation>
	<citation>603	5	1084</citation>
	<citation>644	5	1084</citation>
	<citation>669	5	1084</citation>
	<citation>791	5	1084</citation>
	<citation>797	5	1084</citation>
	<citation>868	5	1084</citation>
	<citation>823	6	1084</citation>
	<citation>914	6	1084</citation>
	<citation>915	6	1084</citation>
	<citation>917	6	1084</citation>
	<citation>984	6	1084</citation>
	<citation>989	6	1084</citation>
	<citation>990	6	1084</citation>
	<citation>1012	6	1084</citation>
	<citation>1084	6	1084</citation>
	<citation>1098	6	1084</citation>
	<citation>1122	6	1084</citation>
	<citation>1138	6	1084</citation>
	<citation>1139	6	1084</citation>
	<citation>1141	6	1084</citation>
	<citation>1200	6	1084</citation>
	<citation>1223	6	1084</citation>
	<citation>1265	6	1084</citation>
	<citation>1336	6	1084</citation>
	<citation>1396	6	1084</citation>
	<citation>1455	6	1084</citation>
	<citation>1477	6	1084</citation>
	<citation>1487	6	1084</citation>
	<citation>1491	6	1084</citation>
	<citation>1496	6	1084</citation>
	<citation>483	6	1084</citation>
	<citation>584	6	1084</citation>
	<citation>669	6	1084</citation>
	<citation>680	6	1084</citation>
	<citation>763	6	1084</citation>
	</citations>
	</document>
	<document id= '1083'>
	<title>An Experiment in a User-Oriented Computer System</title>
	<abstract>A version of a software-hardware system for the purpose of facilitating the programming and  analysis of well-formulated problems is described.  A modified Flexowriter is used to generate computer-acceptable  input when equations or computable requests are typed in much the same manner as they would appear in  conventional mathematical texts.  The typing and language rules are quite flexible and unrestrictive.   While the compiler part is efficient, the system as a whole has much broader aspects as a tool for the  study of problem solving and self-teaching systems.</abstract>
	<conference>CACM May, 1964</conference>
	<authors>
	<author>Klerer, M.</author>
	<author>May, J.</author>
	</authors>
	<location>CA640506 JB March 10, 1978  12:03 AM</location>
	<citations>
	<citation>1083	4	1083</citation>
	<citation>1083	4	1083</citation>
	<citation>1083	4	1083</citation>
	<citation>1083	4	1083</citation>
	<citation>1396	4	1083</citation>
	<citation>1396	4	1083</citation>
	<citation>679	4	1083</citation>
	<citation>1083	5	1083</citation>
	<citation>1083	5	1083</citation>
	<citation>1083	5	1083</citation>
	<citation>1396	5	1083</citation>
	<citation>1624	5	1083</citation>
	<citation>407	5	1083</citation>
	<citation>3192	5	1083</citation>
	<citation>3193	5	1083</citation>
	<citation>730	5	1083</citation>
	<citation>964	6	1083</citation>
	<citation>1028	6	1083</citation>
	<citation>1029	6	1083</citation>
	<citation>1083	6	1083</citation>
	<citation>1083	6	1083</citation>
	<citation>1132	6	1083</citation>
	<citation>1214	6	1083</citation>
	<citation>1278	6	1083</citation>
	<citation>1334	6	1083</citation>
	<citation>1365	6	1083</citation>
	<citation>1386	6	1083</citation>
	<citation>1387	6	1083</citation>
	<citation>1388	6	1083</citation>
	<citation>1392	6	1083</citation>
	<citation>1393	6	1083</citation>
	<citation>1394	6	1083</citation>
	<citation>1395	6	1083</citation>
	<citation>1396	6	1083</citation>
	<citation>1397	6	1083</citation>
	<citation>1496	6	1083</citation>
	<citation>284	6	1083</citation>
	<citation>407	6	1083</citation>
	<citation>3199	6	1083</citation>
	<citation>3200	6	1083</citation>
	<citation>3201	6	1083</citation>
	<citation>3202	6	1083</citation>
	<citation>3203	6	1083</citation>
	<citation>3204	6	1083</citation>
	<citation>561	6	1083</citation>
	<citation>730	6	1083</citation>
	</citations>
	</document>
	<document id= '1082'>
	<citations>
	<citation>1082	5	1082</citation>
	<citation>1082	5	1082</citation>
	<citation>1082	5	1082</citation>
	</citations>
	<title>Gamma Function with Controlled Accuracy (Algorithm 225)</title>
	<conference>CACM May, 1964</conference>
	<authors>
	<author>Cyvin, S. J.</author>
	<author>Cyvin, B. N.</author>
	</authors>
	<location>CA640507 JB March 9, 1978  11:59 PM</location>
	</document>
	<document id= '1081'>
	<citations>
	<citation>1081	5	1081</citation>
	<citation>1081	5	1081</citation>
	<citation>1081	5	1081</citation>
	<citation>1157	5	1081</citation>
	<citation>836	6	1081</citation>
	<citation>1081	6	1081</citation>
	<citation>485	6	1081</citation>
	<citation>714	6	1081</citation>
	</citations>
	<title>Normal Distribution Function (Algorithm 226)</title>
	<conference>CACM May, 1964</conference>
	<authors>
	<author>Cyvin, S. J.</author>
	</authors>
	<location>CA640508 JB March 9, 1978  11:58 PM</location>
	</document>
	<document id= '1080'>
	<citations>
	<citation>1080	5	1080</citation>
	<citation>1080	5	1080</citation>
	<citation>1080	5	1080</citation>
	</citations>
	<title>Chebyshev Polynomial Coefficients (Algorithm 227)</title>
	<conference>CACM May, 1964</conference>
	<authors>
	<author>Cyvin, S. J.</author>
	</authors>
	<location>CA640509 JB March 9, 1978  11:57 PM</location>
	</document>
	<document id= '1079'>
	<citations>
	<citation>1079	5	1079</citation>
	<citation>1079	5	1079</citation>
	<citation>1079	5	1079</citation>
	</citations>
	<title>Q-Bessel Functions (Algorithm 228)</title>
	<conference>CACM May, 1964</conference>
	<authors>
	<author>Pereira, J. M. S.</author>
	</authors>
	<location>CA640510 JB March 9, 1978  11:56 PM</location>
	</document>
	<document id= '1078'>
	<citations>
	<citation>1078	5	1078</citation>
	<citation>1078	5	1078</citation>
	<citation>1078	5	1078</citation>
	</citations>
	<title>Elementary Functions by Continued Fractions (Algorithm 229)</title>
	<conference>CACM May, 1964</conference>
	<authors>
	<author>Morelock, J. C.</author>
	</authors>
	<location>CA640511 JB March 9, 1978  11:55 PM</location>
	</document>
	<document id= '1077'>
	<citations>
	<citation>1077	5	1077</citation>
	<citation>1077	5	1077</citation>
	<citation>1077	5	1077</citation>
	</citations>
	<title>Chebyshev Curve Fit (Algorithm 91)</title>
	<conference>CACM May, 1964</conference>
	<authors>
	<author>Naur, P.</author>
	</authors>
	<location>CA640512 JB March 9, 1978  11:53 PM</location>
	</document>
	<document id= '1076'>
	<citations>
	<citation>1076	5	1076</citation>
	<citation>1076	5	1076</citation>
	<citation>1076	5	1076</citation>
	</citations>
	<title>Multiple Integration (Algorithm 146)</title>
	<conference>CACM May, 1964</conference>
	<authors>
	<author>Wirth, N.</author>
	</authors>
	<location>CA640513 JB March 9, 1978  11:53 PM</location>
	</document>
	<document id= '1075'>
	<citations>
	<citation>1075	5	1075</citation>
	<citation>1075	5	1075</citation>
	<citation>1075	5	1075</citation>
	</citations>
	<title>Shuttlesort (Algorithm 175)</title>
	<conference>CACM May, 1964</conference>
	<authors>
	<author>Juelich, O. C.</author>
	</authors>
	<location>CA640514 JB March 9, 1978  11:52 PM</location>
	</document>
	<document id= '1074'>
	<citations>
	<citation>1074	5	1074</citation>
	<citation>1074	5	1074</citation>
	<citation>1074	5	1074</citation>
	</citations>
	<title>Shanks (Algorithm 215)</title>
	<conference>CACM May, 1964</conference>
	<authors>
	<author>Schumaker, L.</author>
	</authors>
	<location>CA640515 JB March 9, 1978  11:51 PM</location>
	</document>
	<document id= '1073'>
	<title>A Fast Procedure for Generating Exponential Random Variables</title>
	<abstract>A very fast method for generating exponential random variables in a digital computer is outlined.</abstract>
	<conference>CACM May, 1964</conference>
	<authors>
	<author>MacLaren, M. D.</author>
	<author>Marsaglia, G.</author>
	<author>Bray, T. A.</author>
	</authors>
	<location>CA640516 JB March 9, 1978  11:50 PM</location>
	<citations>
	<citation>1073	4	1073</citation>
	<citation>1073	4	1073</citation>
	<citation>1153	4	1073</citation>
	<citation>2137	4	1073</citation>
	<citation>2276	4	1073</citation>
	<citation>940	5	1073</citation>
	<citation>1073	5	1073</citation>
	<citation>1073	5	1073</citation>
	<citation>1073	5	1073</citation>
	<citation>1153	5	1073</citation>
	<citation>2276	5	1073</citation>
	<citation>1073	6	1073</citation>
	<citation>1153	6	1073</citation>
	</citations>
	</document>
	<document id= '1072'>
	<title>An Improved Equivalence Algorithm</title>
	<abstract>An algorithm for assigning storage on the basis of EQUIVALENCE, DIMENSION and COMMON declarations  is presented.  The algorithm is based on a tree structure, and has reduced computation time by 40 percent  over a previously published algorithm by identifying all equivalence classes with one scan of the EQUIVALENCE  declarations.  The method is applicable in any problem in which it is necessary to identify equivalence  classes, given the element pairs defining the equivalence relation.</abstract>
	<conference>CACM May, 1964</conference>
	<authors>
	<author>Galler, B. A.</author>
	<author>Fisher, M. J.</author>
	</authors>
	<location>CA640517 JB March 9, 1978  11:48 PM</location>
	<citations>
	<citation>1072	4	1072</citation>
	<citation>1781	4	1072</citation>
	<citation>1072	5	1072</citation>
	<citation>1072	5	1072</citation>
	<citation>1072	5	1072</citation>
	<citation>1646	5	1072</citation>
	<citation>316	5	1072</citation>
	<citation>830	6	1072</citation>
	<citation>987	6	1072</citation>
	<citation>1072	6	1072</citation>
	<citation>1179	6	1072</citation>
	<citation>1647	6	1072</citation>
	<citation>680	6	1072</citation>
	</citations>
	</document>
	<document id= '1071'>
	<title>Computer-Usage Accounting for Generalized Time-Sharing Systems</title>
	<abstract>The current development of general time-sharing systems requires a revision of accounting procedures  for computer usage. Since time-sharing system users operate concurrently, it is necessary to be more  precise as to the amount of computer time and storage space that a user actually utilizes.  The various  cost factors which should be considered for computer usage accounting in generalized time-sharing systems  are discussed.</abstract>
	<conference>CACM May, 1964</conference>
	<authors>
	<author>Rosenberg, A. M.</author>
	</authors>
	<location>CA640518 JB March 9, 1978  11:40 PM</location>
	<citations>
	<citation>1071	4	1071</citation>
	<citation>1071	5	1071</citation>
	<citation>1071	5	1071</citation>
	<citation>1071	5	1071</citation>
	<citation>3196	5	1071</citation>
	</citations>
	</document>
	<document id= '1070'>
	<citations>
	<citation>1070	5	1070</citation>
	<citation>1070	5	1070</citation>
	<citation>1070	5	1070</citation>
	</citations>
	<title>Expand, A System for Input Card Replication</title>
	<conference>CACM May, 1964</conference>
	<authors>
	<author>Warrington, J. A.</author>
	<author>Norris, J. H.</author>
	</authors>
	<location>CA640519 JB March 9,1978  11:37 PM</location>
	</document>
	<document id= '1069'>
	<citations>
	<citation>1069	5	1069</citation>
	<citation>1069	5	1069</citation>
	<citation>1069	5	1069</citation>
	<citation>1653	5	1069</citation>
	<citation>2989	5	1069</citation>
	<citation>963	6	1069</citation>
	<citation>1069	6	1069</citation>
	<citation>1069	6	1069</citation>
	<citation>1417	6	1069</citation>
	<citation>2138	6	1069</citation>
	</citations>
	<title>A Method for Comparing the Internal Operating Speeds of Computers</title>
	<conference>CACM May, 1964</conference>
	<authors>
	<author>Raichelson, E.</author>
	<author>Collins, G.</author>
	</authors>
	<location>CA640520 JB March 9, 1978  11:35 PM</location>
	</document>
	<document id= '1068'>
	<citations>
	<citation>1068	4	1068</citation>
	<citation>1945	4	1068</citation>
	<citation>917	5	1068</citation>
	<citation>1068	5	1068</citation>
	<citation>1068	5	1068</citation>
	<citation>1068	5	1068</citation>
	</citations>
	<title>A FORTRAN II Load-Time-Saver</title>
	<conference>CACM May, 1964</conference>
	<authors>
	<author>Ackermann, A. F.</author>
	</authors>
	<location>CA640521 JB March 9, 1978  11:33 PM</location>
	</document>
	<document id= '1067'>
	<title>Picture Generation With a Standard Line Printer</title>
	<abstract>A method is described for producing gray-toned pictures on a line printer by utilizing the  different degrees of blackness of standard print characters.  Gray scales with 17, 32 and 64 levels have  been devised.  Scanned images of blood cells are used to display the technique.</abstract>
	<conference>CACM May, 1964</conference>
	<authors>
	<author>Perry, B.</author>
	<author>Mendelsohn, M. L.</author>
	</authors>
	<location>CA640522 JB March 9, 1978  11:31 PM</location>
	<citations>
	<citation>1067	5	1067</citation>
	<citation>1067	5	1067</citation>
	<citation>1067	5	1067</citation>
	</citations>
	</document>
	<document id= '1066'>
	<title>Growing Applications of Linear Programming</title>
	<abstract>Use of linear programming models has grown so extensively in recent years that the whole concept  for organizing a computer code has undergone a radical change.  It no longer is adequate merely to reduce  a mathematical algorithm (i.e. the simplex method) to a computer code.  An advanced code must cope with  such a variety of situations that the respective computer subprograms must be organized into an integrated  system.  Emphasis in this paper is devoted to the underlying principles upon which future linear programming  systems must be based.  These viewpoints are influenced by the new demands that applications within the  petroleum industry are placing on such systems.  Some of the components of such a system are: translation  of problem statement in terms of basic data to linear programming matrix coefficients, data transmission  for direct computer entry, data file at the computer center, data processing and editing prior to solving  the simplex algorithm, an efficient and reliable code for solving the above-mentioned algorithm, and  flexible means for summarizing the results.</abstract>
	<conference>CACM June, 1964</conference>
	<authors>
	<author>Aronofsky, J. S.</author>
	</authors>
	<location>CA640601 JB March 9, 1978  9:55 PM</location>
	<citations>
	<citation>1066	5	1066</citation>
	<citation>1066	5	1066</citation>
	<citation>1066	5	1066</citation>
	</citations>
	</document>
	<document id= '1065'>
	<citations>
	<citation>1065	5	1065</citation>
	<citation>1065	5	1065</citation>
	<citation>1065	5	1065</citation>
	</citations>
	<title>Bit Sequencing of the American Standard Code for Information Interchange (ASCII) in Serial-by-Bit  Data Transmission (Proposed American Standard)</title>
	<conference>CACM June, 1964</conference>
	<location>CA640602 JB March 9, 1978  9:47 PM</location>
	</document>
	<document id= '1064'>
	<citations>
	<citation>1064	5	1064</citation>
	<citation>1064	5	1064</citation>
	<citation>1064	5	1064</citation>
	</citations>
	<title>Perforated Tape Code for Information Interchange (Proposed American Standard)</title>
	<conference>CACM June, 1964</conference>
	<location>CA640603 JB March 9, 1978  9:46 PM</location>
	</document>
	<document id= '1063'>
	<citations>
	<citation>1063	5	1063</citation>
	<citation>1063	5	1063</citation>
	<citation>1063	5	1063</citation>
	</citations>
	<title>One-Inch Perforated Paper Tape for Information Interchange (Proposed American Standard)</title>
	<conference>CACM June, 1964</conference>
	<location>CA640604 JB March 9, 1978  9:44 PM</location>
	</document>
	<document id= '1062'>
	<title>Symbol Manipulation in FORTRAN-SASP I Subroutines</title>
	<abstract>A set of subroutines for use in FORTRAN are described whose purpose is to synthesize output  strings from (i) input strings which have been analyzed by the SHADOW general syntactic analysis subroutine  reported earlier, and/or (ii) packed BCD strings formed in any way.  Function-type subroutines are included  for intermediate manipulations, which are performed on the strings which are stored in an abbreviated  internal representation.  The automatic way in which an internal representation for each newly created  substring is stored sequentially in a block of common storage, and the manner in which a storage block  is dynamically allocated for that purpose, are discussed.</abstract>
	<conference>CACM June, 1964</conference>
	<authors>
	<author>Bailey, M. J.</author>
	<author>Barnett, M. P.</author>
	<author>Burleson, P. B.</author>
	</authors>
	<location>CA640605 JB March 9, 1978  9:43 PM</location>
	<citations>
	<citation>1051	4	1062</citation>
	<citation>1062	4	1062</citation>
	<citation>1062	4	1062</citation>
	<citation>1121	4	1062</citation>
	<citation>1139	4	1062</citation>
	<citation>1265	4	1062</citation>
	<citation>1781	4	1062</citation>
	<citation>720	4	1062</citation>
	<citation>759	4	1062</citation>
	<citation>1062	5	1062</citation>
	<citation>1062	5	1062</citation>
	<citation>1062	5	1062</citation>
	<citation>1211	5	1062</citation>
	<citation>2902	5	1062</citation>
	<citation>464	5	1062</citation>
	<citation>794	5	1062</citation>
	<citation>1051	6	1062</citation>
	<citation>1051	6	1062</citation>
	<citation>1062	6	1062</citation>
	<citation>1062	6	1062</citation>
	<citation>1184	6	1062</citation>
	<citation>1211	6	1062</citation>
	<citation>1552	6	1062</citation>
	<citation>1879	6	1062</citation>
	<citation>2435	6	1062</citation>
	<citation>2596	6	1062</citation>
	<citation>2734	6	1062</citation>
	<citation>2747	6	1062</citation>
	<citation>2768	6	1062</citation>
	</citations>
	</document>
	<document id= '1061'>
	<citations>
	<citation>1061	5	1061</citation>
	<citation>1061	5	1061</citation>
	<citation>1061	5	1061</citation>
	</citations>
	<title>Matrix Permutation (Algorithm 230)</title>
	<conference>CACM June, 1964</conference>
	<authors>
	<author>Boothroyd, J.</author>
	</authors>
	<location>CA640606 JB March 9, 1978  9:36 PM</location>
	</document>
	<document id= '1060'>
	<citations>
	<citation>1060	5	1060</citation>
	<citation>1060	5	1060</citation>
	<citation>1060	5	1060</citation>
	</citations>
	<title>Matrix Inversion (Algorithm 231)</title>
	<conference>CACM June, 1964</conference>
	<authors>
	<author>Boothroyd, J.</author>
	</authors>
	<location>CA640607 JB March 9, 1978  9:35 PM</location>
	</document>
	<document id= '1059'>
	<citations>
	<citation>1059	5	1059</citation>
	<citation>1059	5	1059</citation>
	<citation>1059	5	1059</citation>
	<citation>2757	5	1059</citation>
	<citation>2844	5	1059</citation>
	<citation>970	6	1059</citation>
	<citation>1059	6	1059</citation>
	<citation>1059	6	1059</citation>
	<citation>2630	6	1059</citation>
	<citation>2742	6	1059</citation>
	<citation>2767	6	1059</citation>
	</citations>
	<title>Heapsort (Algorithm 232)</title>
	<conference>CACM June, 1964</conference>
	<authors>
	<author>Williams, J. W. J.</author>
	</authors>
	<location>CA640608 JB March 9, 1978  9:34 PM</location>
	</document>
	<document id= '1058'>
	<citations>
	<citation>1058	5	1058</citation>
	<citation>1058	5	1058</citation>
	<citation>1058	5	1058</citation>
	</citations>
	<title>Simpson's Rule for Multiple Integration (Algorithm 233)</title>
	<conference>CACM June, 1964</conference>
	<authors>
	<author>Olynyk, F.</author>
	</authors>
	<location>CA640609 JB March 9, 1978  9:33 PM</location>
	</document>
	<document id= '1057'>
	<citations>
	<citation>1057	5	1057</citation>
	<citation>1057	5	1057</citation>
	<citation>1057	5	1057</citation>
	</citations>
	<title>Critical Path Scheduling (Algorithm 40)</title>
	<conference>CACM June, 1964</conference>
	<authors>
	<author>Hoffman, I. A.</author>
	</authors>
	<location>CA640610 JB March 9, 1978  9:32 PM</location>
	</document>
	<document id= '1056'>
	<citations>
	<citation>1056	5	1056</citation>
	<citation>1056	5	1056</citation>
	<citation>1056	5	1056</citation>
	</citations>
	<title>Shellsort (Algorithm 201)</title>
	<conference>CACM June, 1964</conference>
	<authors>
	<author>Batty, M. A.</author>
	</authors>
	<location>CA640611 JB March 9, 1978  9:30 PM</location>
	</document>
	<document id= '1055'>
	<citations>
	<citation>1055	5	1055</citation>
	<citation>1055	5	1055</citation>
	<citation>1055	5	1055</citation>
	</citations>
	<title>q-Bessel Functions In(t) (Algorithm 214)</title>
	<conference>CACM June,1964</conference>
	<authors>
	<author>Pereira, J. M. S.</author>
	</authors>
	<location>CA640612 JB March 9, 1978  9:29 PM</location>
	</document>
	<document id= '1054'>
	<citations>
	<citation>1054	5	1054</citation>
	<citation>1054	5	1054</citation>
	<citation>1054	5	1054</citation>
	</citations>
	<title>Gauss-Seidel (Algorithm 220 )</title>
	<conference>CACM June, 1964</conference>
	<authors>
	<author>Batson, A. P.</author>
	</authors>
	<location>CA640613 JB March 9, 1978  9:28 PM</location>
	</document>
	<document id= '1053'>
	<title>Design and Implementation of a General-Purpose Input Routine</title>
	<abstract>A general-purpose input routine is discussed and advocated for FORTRAN.  The philosophy of  such programs is examined and exemplified.</abstract>
	<conference>CACM June, 1964</conference>
	<authors>
	<author>Hassitt, A.</author>
	</authors>
	<location>CA640614 JB March 9, 1978  9:27 PM</location>
	<citations>
	<citation>1053	4	1053</citation>
	<citation>1053	4	1053</citation>
	<citation>1053	4	1053</citation>
	<citation>1053	4	1053</citation>
	<citation>720	4	1053</citation>
	<citation>1053	5	1053</citation>
	<citation>1053	5	1053</citation>
	<citation>1053	5	1053</citation>
	<citation>1649	5	1053</citation>
	<citation>435	5	1053</citation>
	<citation>474	5	1053</citation>
	<citation>718	5	1053</citation>
	<citation>720	5	1053</citation>
	<citation>1053	6	1053</citation>
	</citations>
	</document>
	<document id= '1052'>
	<title>Reducing Truncation Errors by Programming</title>
	<abstract>In accumulating a sum such as in a numerical integration with a large number of intervals,  the sum itself becomes much larger than the individual addends.  This may produce a less accurate sum  as the number of intervals is increased.  Separate variables can be established as accumulators to hold  partial sums within various distinct intervals.  Thus, the extensive successive truncations are eliminated.</abstract>
	<conference>CACM June, 1964</conference>
	<authors>
	<author>Wolfe, J. M.</author>
	</authors>
	<location>CA640615 JB March 9, 1978  9:22 PM</location>
	<citations>
	<citation>1052	5	1052</citation>
	<citation>1052	5	1052</citation>
	<citation>1052	5	1052</citation>
	<citation>1328	5	1052</citation>
	<citation>1333	5	1052</citation>
	<citation>2144	5	1052</citation>
	<citation>1052	6	1052</citation>
	<citation>1052	6	1052</citation>
	<citation>1052	6	1052</citation>
	</citations>
	</document>
	<document id= '1051'>
	<title>Multiword List Items</title>
	<abstract>The list concept as originally proposed by Newell, Simon and Shaw specified single computer  words as elements of a list.  This report describes the use of two or more consecutive words as one element.   Such use results in a considerable saving in both the space required to hold a given amount of data,  and in the execution time required to perform a given process on the data.  Following a brief description  of standard list structures with single-word items, the multiword items are introduced.  Then variable-length  items are described, along with the corresponding space-utilization problems.  Finally, several examples  are given to illustrate the use of multiword lists. This paper attempts to draw together various recent  papers which have applied some of these concepts in different ways, and indicate how they relate to the  more general problems.</abstract>
	<conference>CACM June, 1964</conference>
	<authors>
	<author>Comfort, W. T.</author>
	</authors>
	<location>CA640616 JB March 9, 1978  9:15 PM</location>
	<citations>
	<citation>1024	4	1051</citation>
	<citation>1024	4	1051</citation>
	<citation>1051	4	1051</citation>
	<citation>1051	4	1051</citation>
	<citation>1051	4	1051</citation>
	<citation>1051	4	1051</citation>
	<citation>1051	4	1051</citation>
	<citation>1051	4	1051</citation>
	<citation>1062	4	1051</citation>
	<citation>1098	4	1051</citation>
	<citation>1102	4	1051</citation>
	<citation>1102	4	1051</citation>
	<citation>1132	4	1051</citation>
	<citation>1214	4	1051</citation>
	<citation>1380	4	1051</citation>
	<citation>1388	4	1051</citation>
	<citation>1390	4	1051</citation>
	<citation>1393	4	1051</citation>
	<citation>1485	4	1051</citation>
	<citation>1486	4	1051</citation>
	<citation>1487	4	1051</citation>
	<citation>1549	4	1051</citation>
	<citation>1549	4	1051</citation>
	<citation>1549	4	1051</citation>
	<citation>1552	4	1051</citation>
	<citation>1570	4	1051</citation>
	<citation>1665	4	1051</citation>
	<citation>1706	4	1051</citation>
	<citation>1826	4	1051</citation>
	<citation>1860	4	1051</citation>
	<citation>1878	4	1051</citation>
	<citation>1878	4	1051</citation>
	<citation>1946	4	1051</citation>
	<citation>1957	4	1051</citation>
	<citation>378	4	1051</citation>
	<citation>2060	4	1051</citation>
	<citation>2155	4	1051</citation>
	<citation>2155	4	1051</citation>
	<citation>2168	4	1051</citation>
	<citation>2168	4	1051</citation>
	<citation>2719	4	1051</citation>
	<citation>2723	4	1051</citation>
	<citation>2723	4	1051</citation>
	<citation>2838	4	1051</citation>
	<citation>2842	4	1051</citation>
	<citation>2855	4	1051</citation>
	<citation>2857	4	1051</citation>
	<citation>2879	4	1051</citation>
	<citation>3077	4	1051</citation>
	<citation>3080	4	1051</citation>
	<citation>3106	4	1051</citation>
	<citation>3112	4	1051</citation>
	<citation>627	4	1051</citation>
	<citation>106	4	1051</citation>
	<citation>1051	5	1051</citation>
	<citation>1051	5	1051</citation>
	<citation>1051	5	1051</citation>
	<citation>1211	5	1051</citation>
	<citation>210	5	1051</citation>
	<citation>1549	5	1051</citation>
	<citation>1906	5	1051</citation>
	<citation>378	5	1051</citation>
	<citation>2902	5	1051</citation>
	<citation>406	5	1051</citation>
	<citation>731	5	1051</citation>
	<citation>793	5	1051</citation>
	<citation>794	5	1051</citation>
	<citation>106	6	1051</citation>
	<citation>1051	6	1051</citation>
	<citation>1051	6	1051</citation>
	<citation>1051	6	1051</citation>
	<citation>1051	6	1051</citation>
	<citation>1062	6	1051</citation>
	<citation>1062	6	1051</citation>
	<citation>1184	6	1051</citation>
	<citation>1211	6	1051</citation>
	<citation>1552	6	1051</citation>
	<citation>210	6	1051</citation>
	<citation>1879	6	1051</citation>
	<citation>2435	6	1051</citation>
	<citation>2596	6	1051</citation>
	<citation>2734	6	1051</citation>
	<citation>2747	6	1051</citation>
	<citation>2768	6	1051</citation>
	<citation>406	6	1051</citation>
	<citation>627	6	1051</citation>
	<citation>731	6	1051</citation>
	<citation>753	6	1051</citation>
	</citations>
	</document>
	<document id= '1050'>
	<title>A Parts Breakdown Technique Using List Structures</title>
	<abstract>List structured parts breakdown is proposed and discussed.  Implementation facts are presented  on operating program using these techniques.</abstract>
	<conference>CACM June, 1964</conference>
	<authors>
	<author>Brian, W. J.</author>
	</authors>
	<location>CA640617 JB March 9, 1978  9:09 PM</location>
	<citations>
	<citation>1050	4	1050</citation>
	<citation>1050	4	1050</citation>
	<citation>1050	4	1050</citation>
	<citation>1050	4	1050</citation>
	<citation>1050	4	1050</citation>
	<citation>1102	4	1050</citation>
	<citation>1226	4	1050</citation>
	<citation>1393	4	1050</citation>
	<citation>1549	4	1050</citation>
	<citation>1549	4	1050</citation>
	<citation>1935	4	1050</citation>
	<citation>1936	4	1050</citation>
	<citation>378	4	1050</citation>
	<citation>2017	4	1050</citation>
	<citation>2023	4	1050</citation>
	<citation>2032	4	1050</citation>
	<citation>2257	4	1050</citation>
	<citation>2360	4	1050</citation>
	<citation>2451	4	1050</citation>
	<citation>2452	4	1050</citation>
	<citation>441	4	1050</citation>
	<citation>2723	4	1050</citation>
	<citation>2882	4	1050</citation>
	<citation>3008	4	1050</citation>
	<citation>3112	4	1050</citation>
	<citation>627	4	1050</citation>
	<citation>731	4	1050</citation>
	<citation>731	4	1050</citation>
	<citation>758	4	1050</citation>
	<citation>793	4	1050</citation>
	<citation>798	4	1050</citation>
	<citation>106	5	1050</citation>
	<citation>1050	5	1050</citation>
	<citation>1050	5	1050</citation>
	<citation>1050	5	1050</citation>
	<citation>209	5	1050</citation>
	<citation>367	5	1050</citation>
	<citation>627	5	1050</citation>
	<citation>849	5	1050</citation>
	</citations>
	</document>
	<document id= '1049'>
	<title>Numerical Solution of Nonlinear Two-Point Boundary Problems by Finite Difference Methods</title>
	<abstract>Solution of nonlinear two-point boundary-value problems is often an extremely difficult task.   Quite apart from questions of reality and uniqueness, there is no established numerical technique for  this problem.  At present, shooting techniques are the easiest method of attacking these problems.  When  these fail, the more difficult method of finite differences can often be used to obtain a solution.   This paper gives examples and discusses the finite difference method for non-linear two-point boundary-value  problems.</abstract>
	<conference>CACM June, 1964</conference>
	<authors>
	<author>Holt, J. F.</author>
	</authors>
	<location>CA640618 JB March 9, 1978  9:07 PM</location>
	<citations>
	<citation>1049	4	1049</citation>
	<citation>1049	5	1049</citation>
	<citation>1049	5	1049</citation>
	<citation>1049	5	1049</citation>
	<citation>416	5	1049</citation>
	</citations>
	</document>
	<document id= '1048'>
	<title>Approximate Solution of Axially Symmetric Problems</title>
	<abstract>A variety of physical problems in such diverse fields as electrostatic  field theory, heat  and ideal fluid flow, and stress concentration theory reduce, under the assumption of axial symmetry,  to the study of an elliptic partial differential equation.  Dirichlet-type problems associated with this  equation are studied on regions whose boundaries include a nondegenerate portion of the x-axis and exceedingly  accurate numerical methods are given for approximating solutions.</abstract>
	<conference>CACM June, 1964</conference>
	<authors>
	<author>Greenspan, D.</author>
	</authors>
	<location>CA640619 JB March 9, 1978  8:55 PM</location>
	<citations>
	<citation>1048	5	1048</citation>
	<citation>1048	5	1048</citation>
	<citation>1048	5	1048</citation>
	</citations>
	</document>
	<document id= '1047'>
	<title>Generation of Test Matrices by Similarity Transformations</title>
	<abstract>A method for obtaining test matrices with a prescribed distribution of characteristic roots  is given.  The process consists of using particularly simple similarity transformations to generate full  matrices from canonical forms.  The matrices generated also have known characteristic vectors, inverses  and determinants.</abstract>
	<conference>CACM June, 1964</conference>
	<authors>
	<author>Ortega, J. M.</author>
	</authors>
	<location>CA640620 JB March 9, 1978  8:50 PM</location>
	<citations>
	<citation>1047	4	1047</citation>
	<citation>1047	5	1047</citation>
	<citation>1047	5	1047</citation>
	<citation>1047	5	1047</citation>
	<citation>1707	5	1047</citation>
	<citation>496	5	1047</citation>
	<citation>1047	6	1047</citation>
	<citation>511	6	1047</citation>
	</citations>
	</document>
	<document id= '1046'>
	<title>A Compiler-Building System Developed by Brooker and Morris</title>
	<abstract>In a number of articles published during the past two years, R. A. Brooker and D. Morris (joined  by J.S. Rohl in their most recent paper have presented a very interesting programming system that they  have developed for the Ferranti Atlas computer.  The present paper describes some of the major features  of their system. it expands on some points that the original authors cover briefly, and treats only very  lightly some topics to which they devote considerable space.  The purpose of this paper is purely expository.   Except in some very small details, and in some comments, it does not intentionally depart from or add  to the material published in the listed references.</abstract>
	<conference>CACM July, 1964</conference>
	<authors>
	<author>Rosen, S.</author>
	</authors>
	<location>CA640701 JB March 9, 1978  8:47 PM</location>
	<citations>
	<citation>1046	4	1046</citation>
	<citation>1105	4	1046</citation>
	<citation>1139	4	1046</citation>
	<citation>1140	4	1046</citation>
	<citation>1234	4	1046</citation>
	<citation>1263	4	1046</citation>
	<citation>1265	4	1046</citation>
	<citation>1496	4	1046</citation>
	<citation>1781	4	1046</citation>
	<citation>1824	4	1046</citation>
	<citation>2126	4	1046</citation>
	<citation>2546	4	1046</citation>
	<citation>464	4	1046</citation>
	<citation>584	4	1046</citation>
	<citation>631	4	1046</citation>
	<citation>653	4	1046</citation>
	<citation>680	4	1046</citation>
	<citation>763	4	1046</citation>
	<citation>795	4	1046</citation>
	<citation>799	4	1046</citation>
	<citation>945	4	1046</citation>
	<citation>1046	5	1046</citation>
	<citation>1046	5	1046</citation>
	<citation>1046	5	1046</citation>
	<citation>1781	5	1046</citation>
	<citation>404	5	1046</citation>
	<citation>123	6	1046</citation>
	<citation>196	6	1046</citation>
	<citation>919	6	1046</citation>
	<citation>990	6	1046</citation>
	<citation>1007	6	1046</citation>
	<citation>1046	6	1046</citation>
	<citation>1131	6	1046</citation>
	<citation>1139	6	1046</citation>
	<citation>1140	6	1046</citation>
	<citation>1149	6	1046</citation>
	<citation>1198	6	1046</citation>
	<citation>1215	6	1046</citation>
	<citation>1223	6	1046</citation>
	<citation>1265	6	1046</citation>
	<citation>1303	6	1046</citation>
	<citation>1323	6	1046</citation>
	<citation>1358	6	1046</citation>
	<citation>1366	6	1046</citation>
	<citation>1421	6	1046</citation>
	<citation>1460	6	1046</citation>
	<citation>1462	6	1046</citation>
	<citation>1463	6	1046</citation>
	<citation>1467	6	1046</citation>
	<citation>1468	6	1046</citation>
	<citation>1477	6	1046</citation>
	<citation>1491	6	1046</citation>
	<citation>1496	6	1046</citation>
	<citation>1531	6	1046</citation>
	<citation>1535	6	1046</citation>
	<citation>1565	6	1046</citation>
	<citation>1601	6	1046</citation>
	<citation>1602	6	1046</citation>
	<citation>1613	6	1046</citation>
	<citation>1614	6	1046</citation>
	<citation>1626	6	1046</citation>
	<citation>1641	6	1046</citation>
	<citation>1787	6	1046</citation>
	<citation>1788	6	1046</citation>
	<citation>205	6	1046</citation>
	<citation>224	6	1046</citation>
	<citation>249	6	1046</citation>
	<citation>288	6	1046</citation>
	<citation>316	6	1046</citation>
	<citation>381	6	1046</citation>
	<citation>398	6	1046</citation>
	<citation>11	6	1046</citation>
	<citation>404	6	1046</citation>
	<citation>410	6	1046</citation>
	<citation>463	6	1046</citation>
	<citation>464	6	1046</citation>
	<citation>483	6	1046</citation>
	<citation>3184	6	1046</citation>
	<citation>3188	6	1046</citation>
	<citation>584	6	1046</citation>
	<citation>600	6	1046</citation>
	<citation>680	6	1046</citation>
	<citation>691	6	1046</citation>
	<citation>763	6	1046</citation>
	<citation>799	6	1046</citation>
	</citations>
	</document>
	<document id= '1045'>
	<title>Programming Analysis of Variance by Sequences of Operators and Isomorphic Mappings</title>
	<abstract>A special operator calculus developed by Hartley in 1956 together with a new mapping scheme  has been found to be efficient in programming analysis of variance for multifactor experiments. The operator  calculus and the mapping scheme are described in detail.</abstract>
	<conference>CACM July, 1964</conference>
	<authors>
	<author>Peng, K. C.</author>
	</authors>
	<location>CA640702 JB March 9, 1978  8:30 PM</location>
	<citations>
	<citation>1045	5	1045</citation>
	<citation>1045	5	1045</citation>
	<citation>1045	5	1045</citation>
	<citation>1404	5	1045</citation>
	<citation>1045	6	1045</citation>
	</citations>
	</document>
	<document id= '1044'>
	<title>An Automatic Loader for Subroutine Nests</title>
	<abstract>A method for automatic loading of library subroutines, which can be adapted to operate in conjunction  with any conventional two-pass assembler is described.  The method is specifically designed to cope with  a nested library structure.</abstract>
	<conference>CACM July, 1964</conference>
	<authors>
	<author>Kanner, H.</author>
	</authors>
	<location>CA640703 JB March 9, 1978  8:27 PM</location>
	<citations>
	<citation>1044	5	1044</citation>
	<citation>1044	5	1044</citation>
	<citation>1044	5	1044</citation>
	<citation>1332	5	1044</citation>
	<citation>1044	6	1044</citation>
	</citations>
	</document>
	<document id= '1043'>
	<title>Talk-A High-Level Source Language Debugging Technique With Real-Time Data Extraction</title>
	<abstract>TALK, meaning Take A Look, is a debugging technique which aids substantially in debugging complex  real-time programming systems by interrupting the users program at desired points to extract previously  specified data.  The extracted data is later edited, listing the associated data with its high-level  source language identification.</abstract>
	<conference>CACM July, 1964</conference>
	<authors>
	<author>verSteeg, R. L.</author>
	</authors>
	<location>CA640704 JB March 9, 1978  8:24 PM</location>
	<citations>
	<citation>1043	5	1043</citation>
	<citation>1043	5	1043</citation>
	<citation>1043	5	1043</citation>
	</citations>
	</document>
	<document id= '1042'>
	<citations>
	<citation>1042	5	1042</citation>
	<citation>1042	5	1042</citation>
	<citation>1042	5	1042</citation>
	</citations>
	<title>Poisson-Charlier Polynomials (Algorithm 234 [S23])</title>
	<conference>CACM July, 1964</conference>
	<authors>
	<author>Pereira, J. M. S.</author>
	</authors>
	<location>CA640705 JB March 9, 1978  8:19 PM</location>
	</document>
	<document id= '1041'>
	<citations>
	<citation>1041	5	1041</citation>
	<citation>1041	5	1041</citation>
	<citation>1041	5	1041</citation>
	</citations>
	<title>Random Permutation (Algorithm 235 [G6])</title>
	<conference>CACM July, 1964</conference>
	<authors>
	<author>Durstenfeld, R.</author>
	</authors>
	<location>CA640706 JB March 9, 1978  8:18 PM</location>
	</document>
	<document id= '1040'>
	<citations>
	<citation>1040	4	1040</citation>
	<citation>1040	4	1040</citation>
	<citation>1040	4	1040</citation>
	<citation>1352	4	1040</citation>
	<citation>2040	4	1040</citation>
	<citation>1040	5	1040</citation>
	<citation>1040	5	1040</citation>
	<citation>1040	5	1040</citation>
	<citation>1352	5	1040</citation>
	<citation>2415	5	1040</citation>
	<citation>587	5	1040</citation>
	<citation>621	5	1040</citation>
	<citation>885	5	1040</citation>
	<citation>834	6	1040</citation>
	<citation>872	6	1040</citation>
	<citation>1040	6	1040</citation>
	<citation>1040	6	1040</citation>
	<citation>1092	6	1040</citation>
	<citation>1241	6	1040</citation>
	<citation>1273	6	1040</citation>
	<citation>1982	6	1040</citation>
	<citation>324	6	1040</citation>
	<citation>2074	6	1040</citation>
	<citation>429	6	1040</citation>
	<citation>570	6	1040</citation>
	<citation>621	6	1040</citation>
	<citation>786	6	1040</citation>
	</citations>
	<title>Romberg Integration(Algorithm 60 [D1])</title>
	<conference>CACM July, 1964</conference>
	<authors>
	</authors>
	<location>CA640707 JB March 9, 1978  8:17 PM</location>
	</document>
	<document id= '1039'>
	<citations>
	<citation>1039	5	1039</citation>
	<citation>1039	5	1039</citation>
	<citation>1039	5	1039</citation>
	</citations>
	<title>Summation of Fourier Series (Algorithm 128 [C6])</title>
	<conference>CACM July, 1964</conference>
	<authors>
	</authors>
	<location>CA640708 JB March 9, 1978  8:16 PM</location>
	</document>
	<document id= '1038'>
	<citations>
	<citation>1038	5	1038</citation>
	<citation>1038	5	1038</citation>
	<citation>1038	5	1038</citation>
	</citations>
	<title>Crout with Equilibration and Iteration (Algorithm 135 [F4])</title>
	<conference>CACM July, 1964</conference>
	<authors>
	<author>McKeeman, W. M.</author>
	</authors>
	<location>CA640709 JB March 9, 1978  8:15 PM</location>
	</document>
	<document id= '1037'>
	<citations>
	<citation>1037	4	1037</citation>
	<citation>1234	4	1037</citation>
	<citation>1358	4	1037</citation>
	<citation>1491	4	1037</citation>
	<citation>1037	5	1037</citation>
	<citation>1037	5	1037</citation>
	<citation>1037	5	1037</citation>
	<citation>729	5	1037</citation>
	</citations>
	<title>Reduction of a Matrix Containing Polynomial Elements (Algorithm 170 [F3])</title>
	<conference>CACM July, 1964</conference>
	<authors>
	<author>Priebe, K. B.</author>
	</authors>
	<location>CA640710 JB March 9, 1978  8:13 PM</location>
	</document>
	<document id= '1036'>
	<citations>
	<citation>1036	5	1036</citation>
	<citation>1036	5	1036</citation>
	<citation>1036	5	1036</citation>
	</citations>
	<title>Remark on Further Generalization of ALGOL</title>
	<conference>CACM July, 1963</conference>
	<authors>
	<author>Garwick, J. V.</author>
	</authors>
	<location>CA640710 JB March 9, 1978  8:12 PM</location>
	</document>
	<document id= '1035'>
	<title>Characteristics of the FORTRAN CEP Language</title>
	<abstract>The FORTRAN CEP languages differs from FORTRAN II mainly because: (1) it extends the variety  of the modes for real quantities; (2) it allows suitable mixtures, in an input/output list or in an expression,  of quantities that occur under different modes; (3) it makes it possible to address a greater number  of input/output equipment; and (4) it removes the restrictions on the complexity of the list of quantities  to be transmitted between the magnetic core memory and the drum or the magnetic tape units.</abstract>
	<conference>CACM July, 1964</conference>
	<authors>
	</authors>
	<location>CA640712 JB March 9, 1978  8:11 PM</location>
	<citations>
	<citation>1035	5	1035</citation>
	<citation>1035	5	1035</citation>
	<citation>1035	5	1035</citation>
	<citation>1305	5	1035</citation>
	<citation>1035	6	1035</citation>
	</citations>
	</document>
	<document id= '1034'>
	<title>Autosate</title>
	<abstract>An automated data system analysis technique is described. The technique is designed to alleviate  some of the principal problems that beset current analysis-large data workloads, long span of time between  project inception and system operational date, the lack of explicit directions for conducting data system  analysis and using the results, and the lack of a technique to control data system changes throughout  its lifetime. The analysis is geared to determining workload, relationships and storage characteristics  of documents in the information network automatically.</abstract>
	<conference>CACM July, 1964</conference>
	<authors>
	<author>Gatto, O. T.</author>
	</authors>
	<location>CA640713 JB March 9, 19788:07 PM</location>
	<citations>
	<citation>1034	5	1034</citation>
	<citation>1034	5	1034</citation>
	<citation>1034	5	1034</citation>
	</citations>
	</document>
	<document id= '1033'>
	<title>Experimental Personalized Array Translator System</title>
	<abstract>A system designed for intimate man-machine interaction in a general-purpose problem-solving  environment is experimentally operational.  The system utilizers an array-oriented symbolic source language  containing powerful statement types.  These include numeric, Boolean, relational and selection operators  on operands which can be entire arrays.  The system also permits simple specification of test and argument  arrays in single statements.  The completely symbolic operating system includes display and entry of  program and data.  Sequence control is aided by an interrupt switch which allows the user to interact  with the program during execution. In addition to normal stored program sequencing, the system provides  trace options and the ability to enter any statement for immediate execution.  Present implementation  of the system is with an interpretive translator on an IBM 1620 computer.</abstract>
	<conference>CACM July, 1964</conference>
	<authors>
	<author>Hellerman, H.</author>
	</authors>
	<location>CA640714 JB March 9, 1978  8:02 PM</location>
	<citations>
	<citation>1033	5	1033</citation>
	<citation>1033	5	1033</citation>
	<citation>1033	5	1033</citation>
	</citations>
	</document>
	<document id= '1032'>
	<title>Theoretical Considerations in Information Retrieval Systems</title>
	<abstract>Information storage and retrieval systems are composed of three major components: (a) identification  of information and tagging it for effective retrieval, (b) searching strategy, how to enter the file  to circumvent the scanning of nonrelevant material, and (c) file organization to make access to information  efficient.  For identification of information the paper suggests that a metalanguage (recently discussed  in a paper by Goffman, Verhoeff and Belzer) associated with an object language be used.  For searching  strategy, a linear model for an evaluation function of relevancy is developed which rewards the system  for retrieving relevant documents and not retrieving the nonrelevant, and penalizes the system for the  escaped relevant documents and false drops.  The inadequacies of a linear model are indicated.  Two approaches  to file organization are discussed.  One is self-organization of the file based on its history and past  performance, and the second is a self-generating subset of the file with a high probability of being  relevant.</abstract>
	<conference>CACM July, 1964</conference>
	<authors>
	<author>Belzer, J.</author>
	<author>Goffman, W.</author>
	</authors>
	<location>CA640715 JB March 9, 1978  7:55 PM</location>
	<citations>
	<citation>1032	5	1032</citation>
	<citation>1032	5	1032</citation>
	<citation>1032	5	1032</citation>
	</citations>
	</document>
	<document id= '1031'>
	<title>A Note on Starting the Newton-Raphson Method</title>
	<abstract>Determination of a suitable initial estimate for a root of an equation f(x) = 0 by means of  computing the roots of a sequence of related equations is described.</abstract>
	<conference>CACM July, 1964</conference>
	<authors>
	<author>Beyer, W. A.</author>
	</authors>
	<location>CA640716 JB March 9, 1978  7:44 PM</location>
	<citations>
	<citation>1031	5	1031</citation>
	<citation>1031	5	1031</citation>
	<citation>1031	5	1031</citation>
	</citations>
	</document>
	<document id= '1030'>
	<title>Techniques for the Simulation of Computer Logic</title>
	<abstract>The simulation of a digital computer is an integral part of most computer design automation  systems.  The evaluation of the Boolean functions which characterize the computer being simulated constitutes  one major portion of a simulation system.  Four general procedural classes for evaluating these functions  are defined.  Toward greatly increased efficiency of a simulation system, methods are presented for simultaneously  evaluating many functions for one set of values of the variables,and for evaluating simultaneously one  function for many sets of values for the variables.</abstract>
	<conference>CACM July, 1964</conference>
	<authors>
	</authors>
	<location>CA640717 JB March 9, 1978  7:42 PM</location>
	<citations>
	<citation>1030	4	1030</citation>
	<citation>1886	4	1030</citation>
	<citation>1939	4	1030</citation>
	<citation>1030	5	1030</citation>
	<citation>1030	5	1030</citation>
	<citation>1030	5	1030</citation>
	<citation>1261	5	1030</citation>
	<citation>1939	5	1030</citation>
	<citation>678	5	1030</citation>
	<citation>1030	6	1030</citation>
	<citation>1030	6	1030</citation>
	<citation>678	6	1030</citation>
	</citations>
	</document>
	<document id= '1029'>
	<title>A Simple Automatic Derivative Evaluation Program</title>
	<abstract>A procedure for automatic evaluation of total/partial derivatives of arbitrary algebraic functions  is presented.  The technique permits computation of numerical values of derivatives without developing  analytical expressions for the derivatives.  The key to the method is the decomposition of the given  function, by introduction of intermediate variables, into a series of elementary functional steps.  A  library of elementary function subroutines is provided for the automatic evaluation and differentiation  of these new variables.  The final step in this process produces the desired function's derivative.   The main feature of this approach is its simplicity.  It can be used as a quick-reaction tool where the  derivation of analytical derivatives is laborious and also as a debugging tool for programs which contain  derivatives.</abstract>
	<conference>CACM August, 1964</conference>
	<authors>
	<author>Wengert, R. E.</author>
	</authors>
	<location>CA640801 JB March 9, 1978  7:38 PM</location>
	<citations>
	<citation>1028	5	1029</citation>
	<citation>1029	5	1029</citation>
	<citation>1029	5	1029</citation>
	<citation>1029	5	1029</citation>
	<citation>1216	5	1029</citation>
	<citation>1278	5	1029</citation>
	<citation>1347	5	1029</citation>
	<citation>1396	5	1029</citation>
	<citation>1536	5	1029</citation>
	<citation>964	6	1029</citation>
	<citation>973	6	1029</citation>
	<citation>1028	6	1029</citation>
	<citation>1028	6	1029</citation>
	<citation>1028	6	1029</citation>
	<citation>1028	6	1029</citation>
	<citation>1029	6	1029</citation>
	<citation>1029	6	1029</citation>
	<citation>1029	6	1029</citation>
	<citation>1029	6	1029</citation>
	<citation>1029	6	1029</citation>
	<citation>1029	6	1029</citation>
	<citation>1083	6	1029</citation>
	<citation>1132	6	1029</citation>
	<citation>1214	6	1029</citation>
	<citation>1278	6	1029</citation>
	<citation>1278	6	1029</citation>
	<citation>1334	6	1029</citation>
	<citation>1365	6	1029</citation>
	<citation>1386	6	1029</citation>
	<citation>1387	6	1029</citation>
	<citation>1388	6	1029</citation>
	<citation>1392	6	1029</citation>
	<citation>1393	6	1029</citation>
	<citation>1394	6	1029</citation>
	<citation>1395	6	1029</citation>
	<citation>1396	6	1029</citation>
	<citation>1397	6	1029</citation>
	<citation>1496	6	1029</citation>
	<citation>284	6	1029</citation>
	<citation>407	6	1029</citation>
	<citation>3199	6	1029</citation>
	<citation>3200	6	1029</citation>
	<citation>3201	6	1029</citation>
	<citation>3202	6	1029</citation>
	<citation>3203	6	1029</citation>
	<citation>3204	6	1029</citation>
	<citation>561	6	1029</citation>
	<citation>561	6	1029</citation>
	<citation>561	6	1029</citation>
	<citation>730	6	1029</citation>
	</citations>
	</document>
	<document id= '1028'>
	<title>Investigation of a New Analytical Method for Numerical Derivative Evaluation</title>
	<abstract>A recently proposed analytical approach to numerical derivative evaluation is discussed.  The  technique is shown to be both accurate and easy to apply, though certain indicated modifications are  required.  Its use should greatly facilitate the writing and debugging of programs requiring derivatives  of highly complex functions.</abstract>
	<conference>CACM August, 1964</conference>
	<authors>
	<author>Wilkins, R. D.</author>
	</authors>
	<location>CA640802 JB March 9, 1978  7:31 PM</location>
	<citations>
	<citation>1028	4	1028</citation>
	<citation>1028	4	1028</citation>
	<citation>1216	4	1028</citation>
	<citation>1216	4	1028</citation>
	<citation>1278	4	1028</citation>
	<citation>1347	4	1028</citation>
	<citation>1392	4	1028</citation>
	<citation>1396	4	1028</citation>
	<citation>1396	4	1028</citation>
	<citation>1536	4	1028</citation>
	<citation>964	4	1028</citation>
	<citation>1028	5	1028</citation>
	<citation>1028	5	1028</citation>
	<citation>1028	5	1028</citation>
	<citation>1029	5	1028</citation>
	<citation>1216	5	1028</citation>
	<citation>1278	5	1028</citation>
	<citation>1347	5	1028</citation>
	<citation>1396	5	1028</citation>
	<citation>561	5	1028</citation>
	<citation>964	6	1028</citation>
	<citation>973	6	1028</citation>
	<citation>1028	6	1028</citation>
	<citation>1028	6	1028</citation>
	<citation>1028	6	1028</citation>
	<citation>1028	6	1028</citation>
	<citation>1029	6	1028</citation>
	<citation>1029	6	1028</citation>
	<citation>1029	6	1028</citation>
	<citation>1029	6	1028</citation>
	<citation>1083	6	1028</citation>
	<citation>1132	6	1028</citation>
	<citation>1214	6	1028</citation>
	<citation>1278	6	1028</citation>
	<citation>1278	6	1028</citation>
	<citation>1334	6	1028</citation>
	<citation>1365	6	1028</citation>
	<citation>1386	6	1028</citation>
	<citation>1387	6	1028</citation>
	<citation>1388	6	1028</citation>
	<citation>1392	6	1028</citation>
	<citation>1393	6	1028</citation>
	<citation>1394	6	1028</citation>
	<citation>1395	6	1028</citation>
	<citation>1396	6	1028</citation>
	<citation>1397	6	1028</citation>
	<citation>1496	6	1028</citation>
	<citation>284	6	1028</citation>
	<citation>407	6	1028</citation>
	<citation>3199	6	1028</citation>
	<citation>3200	6	1028</citation>
	<citation>3201	6	1028</citation>
	<citation>3202	6	1028</citation>
	<citation>3203	6	1028</citation>
	<citation>3204	6	1028</citation>
	<citation>561	6	1028</citation>
	<citation>561	6	1028</citation>
	<citation>730	6	1028</citation>
	</citations>
	</document>
	<document id= '1027'>
	<citations>
	<citation>1027	5	1027</citation>
	<citation>1027	5	1027</citation>
	<citation>1027	5	1027</citation>
	</citations>
	<title>An Alternate Checksum Method</title>
	<conference>CACM August, 1964</conference>
	<authors>
	<author>Newhall, N. S.</author>
	</authors>
	<location>CA640803 JB March 9, 1978  7:28 PM</location>
	</document>
	<document id= '1026'>
	<title>Divide-and-Correct Methods for Multiple Precision Division</title>
	<abstract>A division problem is defined and notation to relate it to the problem of multiple precision  operation in a digital computer is introduced.  A basic divide-and-correct method for multiple precision  division is formulated and its known properties briefly reviewed.  Of particular interest is the fact  that the method produces at each step a set of precisely three estimates for the desired result, one  of which is exact.</abstract>
	<conference>CACM August, 1964</conference>
	<authors>
	<author>Stein, M. L.</author>
	</authors>
	<location>CA640804 JB March 9, 1978  7:27 PM</location>
	<citations>
	<citation>1026	4	1026</citation>
	<citation>1258	4	1026</citation>
	<citation>1292	4	1026</citation>
	<citation>1497	4	1026</citation>
	<citation>107	5	1026</citation>
	<citation>1026	5	1026</citation>
	<citation>1026	5	1026</citation>
	<citation>1026	5	1026</citation>
	<citation>1258	5	1026</citation>
	<citation>1292	5	1026</citation>
	<citation>1497	5	1026</citation>
	<citation>1975	5	1026</citation>
	<citation>2605	5	1026</citation>
	<citation>107	6	1026</citation>
	<citation>107	6	1026</citation>
	<citation>107	6	1026</citation>
	<citation>1026	6	1026</citation>
	<citation>1026	6	1026</citation>
	<citation>1026	6	1026</citation>
	<citation>1026	6	1026</citation>
	<citation>1026	6	1026</citation>
	<citation>1292	6	1026</citation>
	<citation>1292	6	1026</citation>
	<citation>1497	6	1026</citation>
	<citation>1593	6	1026</citation>
	<citation>2286	6	1026</citation>
	</citations>
	</document>
	<document id= '1025'>
	<title>A Method of Syntax-Checking ALGOL 60</title>
	<abstract>A syntax checker was designed based on the syntax of ALGOL as described in the ALGOL 60 Report  [Communications of the ACM, May, 1960].  Since the definition of the elements of the language is recursive  it seemed most desirable to design the syntax checker as a set of mutually recursive processors tied  together by subroutines which perform certain bookkeeping functions.  Because of the recursive nature  of the language and of the syntax checker the problem of recovery after an error required much attention.   A method was devised which permits most programs to be checked completely despite errors.</abstract>
	<conference>CACM August, 1964</conference>
	<authors>
	<author>Lietzke, M. P.</author>
	</authors>
	<location>CA640805 JB March 9, 1978  7:24 PM</location>
	<citations>
	<citation>1025	5	1025</citation>
	<citation>1025	5	1025</citation>
	<citation>1025	5	1025</citation>
	<citation>1215	5	1025</citation>
	<citation>1682	5	1025</citation>
	<citation>1025	6	1025</citation>
	<citation>1025	6	1025</citation>
	<citation>1785	6	1025</citation>
	<citation>224	6	1025</citation>
	<citation>763	6	1025</citation>
	</citations>
	</document>
	<document id= '1024'>
	<citations>
	<citation>1024	4	1024</citation>
	<citation>1024	4	1024</citation>
	<citation>1051	4	1024</citation>
	<citation>1051	4	1024</citation>
	<citation>1098	4	1024</citation>
	<citation>1102	4	1024</citation>
	<citation>1132	4	1024</citation>
	<citation>1214	4	1024</citation>
	<citation>1380	4	1024</citation>
	<citation>1388	4	1024</citation>
	<citation>1390	4	1024</citation>
	<citation>1393	4	1024</citation>
	<citation>1485	4	1024</citation>
	<citation>1486	4	1024</citation>
	<citation>1487	4	1024</citation>
	<citation>1549	4	1024</citation>
	<citation>1549	4	1024</citation>
	<citation>1570	4	1024</citation>
	<citation>1706	4	1024</citation>
	<citation>1826	4	1024</citation>
	<citation>1878	4	1024</citation>
	<citation>1878	4	1024</citation>
	<citation>1946	4	1024</citation>
	<citation>1957	4	1024</citation>
	<citation>378	4	1024</citation>
	<citation>2060	4	1024</citation>
	<citation>2155	4	1024</citation>
	<citation>2168	4	1024</citation>
	<citation>2168	4	1024</citation>
	<citation>2719	4	1024</citation>
	<citation>2723	4	1024</citation>
	<citation>2723	4	1024</citation>
	<citation>2838	4	1024</citation>
	<citation>2842	4	1024</citation>
	<citation>2855	4	1024</citation>
	<citation>2857	4	1024</citation>
	<citation>2879	4	1024</citation>
	<citation>3077	4	1024</citation>
	<citation>3080	4	1024</citation>
	<citation>3106	4	1024</citation>
	<citation>3112	4	1024</citation>
	<citation>627	4	1024</citation>
	<citation>106	4	1024</citation>
	<citation>1024	5	1024</citation>
	<citation>1024	5	1024</citation>
	<citation>1024	5	1024</citation>
	<citation>210	5	1024</citation>
	<citation>731	5	1024</citation>
	</citations>
	<title>A Note on the Formation of Free List</title>
	<conference>CACM August, 1964</conference>
	<authors>
	<author>Waite, W. M.</author>
	</authors>
	<location>CA640806 JB March 9, 1978  7:20 PM</location>
	</document>
	<document id= '1023'>
	<citations>
	<citation>1023	4	1023</citation>
	<citation>1222	4	1023</citation>
	<citation>1023	5	1023</citation>
	<citation>1023	5	1023</citation>
	<citation>1023	5	1023</citation>
	<citation>1130	5	1023</citation>
	<citation>1909	5	1023</citation>
	<citation>2119	5	1023</citation>
	<citation>134	6	1023</citation>
	<citation>1023	6	1023</citation>
	<citation>1023	6	1023</citation>
	<citation>1284	6	1023</citation>
	<citation>1316	6	1023</citation>
	<citation>2129	6	1023</citation>
	</citations>
	<title>Bessel Functions of the First Kind (Algorithm 236 [S17])</title>
	<conference>CACM August, 1964</conference>
	<authors>
	<author>Gautschi, W.</author>
	</authors>
	<location>CA640807 JB March 9, 1978  7:19 PM</location>
	</document>
	<document id= '1022'>
	<citations>
	<citation>1022	5	1022</citation>
	<citation>1022	5	1022</citation>
	<citation>1022	5	1022</citation>
	<citation>2031	5	1022</citation>
	<citation>1022	6	1022</citation>
	<citation>450	6	1022</citation>
	</citations>
	<title>Greatest Common Divisor (Algorithm 237 [A1])</title>
	<conference>CACM August, 1964</conference>
	<authors>
	<author>Peck, J. E. L.</author>
	</authors>
	<location>CA640808 JB March 9, 1978  7:17 PM</location>
	</document>
	<document id= '1021'>
	<citations>
	<citation>1021	5	1021</citation>
	<citation>1021	5	1021</citation>
	<citation>1021	5	1021</citation>
	</citations>
	<title>Conjugate Gradient Method (Algorithm 238 [F4])</title>
	<conference>CACM August, 1964</conference>
	<authors>
	<author>Reeves, C. M.</author>
	</authors>
	<location>CA640809 JB March 9, 1978  6:59 PM</location>
	</document>
	<document id= '1020'>
	<citations>
	<citation>1020	5	1020</citation>
	<citation>1020	5	1020</citation>
	<citation>1020	5	1020</citation>
	<citation>1705	5	1020</citation>
	<citation>984	6	1020</citation>
	<citation>986	6	1020</citation>
	<citation>1020	6	1020</citation>
	<citation>1321	6	1020</citation>
	</citations>
	<title>Free Field Read (Algorithm 239 [I5])</title>
	<conference>CACM August, 1964</conference>
	<authors>
	<author>McKeeman, W. M.</author>
	</authors>
	<location>CA640810 JB March 9, 1978  6:56 PM</location>
	</document>
	<document id= '1019'>
	<citations>
	<citation>1019	5	1019</citation>
	<citation>1019	5	1019</citation>
	<citation>1019	5	1019</citation>
	</citations>
	<title>XY move Plotting (Algorithm 162 [J6])</title>
	<conference>CACM August, 1964</conference>
	<authors>
	<author>Cavin, D. K.</author>
	</authors>
	<location>CA640811 JB March 9, 1978  6:55 PM</location>
	</document>
	<document id= '1018'>
	<citations>
	<citation>1018	5	1018</citation>
	<citation>1018	5	1018</citation>
	<citation>1018	5	1018</citation>
	</citations>
	<title>Gauss (Algorithm 209 [S15])</title>
	<conference>CACM August, 1964</conference>
	<authors>
	<author>Pike, M. C.</author>
	</authors>
	<location>CA640812 JB March 9, 1978  6:54 PM</location>
	</document>
	<document id= '1017'>
	<citations>
	<citation>1017	5	1017</citation>
	<citation>1017	5	1017</citation>
	<citation>1017	5	1017</citation>
	</citations>
	<title>Comments on Bit-Sequencing of the ASCII in Serial-by-Bit Data Transmission</title>
	<conference>CACM August, 1964</conference>
	<authors>
	<author>Bemer, R. W.</author>
	<author>Booth, J.</author>
	</authors>
	<location>CA640813 JB March 9, 1978  6:45 PM</location>
	</document>
	<document id= '1016'>
	<citations>
	<citation>1016	5	1016</citation>
	<citation>1016	5	1016</citation>
	<citation>1016	5	1016</citation>
	</citations>
	<title>Interchangcable Perforated Tape Variable Block Formats for Positioning and Straight Cut (RS-273)  and Contouring and Contouring/Positioning (RS-274) Numerically Controlled Machine Tools (Proposed American  Standards)</title>
	<conference>CACM August, 1964</conference>
	<location>CA640814 JB March 9, 1978  6:43 PM</location>
	</document>
	<document id= '1015'>
	<title>Near-Minimax Polynomial Approximations and Partitioning of Intervals</title>
	<abstract>A method of near-minimax polynomial approximation is described.  As a by-product, this method  provides a formula for an estimate of the maximum error associated with a given degree of approximation.   Using this formula, a partitioning algorithm is obtained for dividing a basic interval into subintervals  for which approximations of equal degree give equal maximum error.</abstract>
	<conference>CACM August, 1964</conference>
	<authors>
	<author>Fraser, W.</author>
	<author>Hart, J. F.</author>
	</authors>
	<location>CA640815 JB March 9, 1978  6:41 PM</location>
	<citations>
	<citation>1015	4	1015</citation>
	<citation>1346	4	1015</citation>
	<citation>1440	4	1015</citation>
	<citation>1645	4	1015</citation>
	<citation>951	4	1015</citation>
	<citation>1015	5	1015</citation>
	<citation>1015	5	1015</citation>
	<citation>1015	5	1015</citation>
	<citation>532	5	1015</citation>
	</citations>
	</document>
	<document id= '1014'>
	<title>Machine Controls for Analysis of Variance</title>
	<abstract>A major problem in using the analysis of variance, as the number of factors increases, is the  exponential rise in the number of interactions.  Even though the experimenter may not be interested in  these interactions it is impossible to ignore them in most experimental designs because of the problem  of getting error terms.  It is natural therefore to look to the computer to handle the bulk of work involved  in computing the interactions.  A program device to get the computer to do this is described.</abstract>
	<conference>CACM August, 1964</conference>
	<authors>
	<author>Weldon, R. J.</author>
	</authors>
	<location>CA640816 JB March 9, 1978  6:37 PM</location>
	<citations>
	<citation>1014	4	1014</citation>
	<citation>912	5	1014</citation>
	<citation>1014	5	1014</citation>
	<citation>1014	5	1014</citation>
	<citation>1014	5	1014</citation>
	</citations>
	</document>
	<document id= '1013'>
	<title>Final Examination Scheduling</title>
	<abstract>A method for scheduling final examinations to yield a minimal number of student conflicts is  described.  The "minimization" is achieved by repetitively evaluating a nonlinear set of equations.   Imbeded in the process is a random or Monte Carlo selection of assignments.  As in such heuristic techniques,  the solution may not be optimum and many solutions may be found which yield locally minimal results.   Computer programs are described and empirical results given.</abstract>
	<conference>CACM August, 1964</conference>
	<authors>
	<author>Broder, S.</author>
	</authors>
	<location>CA640817 JB March 9, 1978  6:33 PM</location>
	<citations>
	<citation>1013	5	1013</citation>
	<citation>1013	5	1013</citation>
	<citation>1013	5	1013</citation>
	<citation>1609	5	1013</citation>
	<citation>2052	5	1013</citation>
	<citation>1008	6	1013</citation>
	<citation>1013	6	1013</citation>
	<citation>1013	6	1013</citation>
	<citation>1504	6	1013</citation>
	<citation>1540	6	1013</citation>
	</citations>
	</document>
	<document id= '1012'>
	<title>Formal Parsing Systems</title>
	<abstract>Automatic syntactic analysis has recently become important for both natural language data processing  and syntax-directed compilers.  A formal parsing system G = (V,u,T,R) consists of two finite disjoint  vocabularies, V and T, a many-many map, u, from V onto T, and a recursive set R of strings in T called  syntactic sentence classes.  Every program for automatic syntactic analysis determines a formal parsing  system.  A directed production analyzer (I,T,X,p) is a nondeterministic pushdown-store machine with internal  vocabulary I, input vocabulary T, and all productions of p in the form:  (Z,a) -> aY1 ... Ym where  Z,  Yi are elements of the set I and a is an element of the set T.  Every context-free language can be analyzed  by a directed production analyzer.  The Kuno-Oettinger multiple-path syntactic analyzer for English is  a concrete example of a directed production analyzer and of a working parsing algorithm.  The connection  between structures assigned by the analyzer and those of a conventional phrase structure grammar is examined  in this paper.</abstract>
	<conference>CACM August, 1964</conference>
	<authors>
	<author>Greibach, S. A.</author>
	</authors>
	<location>CA640818 JB March 9, 1978  6:30 PM</location>
	<citations>
	<citation>1012	5	1012</citation>
	<citation>1012	5	1012</citation>
	<citation>1012	5	1012</citation>
	<citation>1225	5	1012</citation>
	<citation>1350	5	1012</citation>
	<citation>1945	5	1012</citation>
	<citation>823	6	1012</citation>
	<citation>914	6	1012</citation>
	<citation>915	6	1012</citation>
	<citation>917	6	1012</citation>
	<citation>984	6	1012</citation>
	<citation>989	6	1012</citation>
	<citation>990	6	1012</citation>
	<citation>1012	6	1012</citation>
	<citation>1012	6	1012</citation>
	<citation>1012	6	1012</citation>
	<citation>1084	6	1012</citation>
	<citation>1098	6	1012</citation>
	<citation>1122	6	1012</citation>
	<citation>1138	6	1012</citation>
	<citation>1139	6	1012</citation>
	<citation>1141	6	1012</citation>
	<citation>1200	6	1012</citation>
	<citation>1223	6	1012</citation>
	<citation>1225	6	1012</citation>
	<citation>1265	6	1012</citation>
	<citation>1265	6	1012</citation>
	<citation>1336	6	1012</citation>
	<citation>1396	6	1012</citation>
	<citation>1399	6	1012</citation>
	<citation>1455	6	1012</citation>
	<citation>1477	6	1012</citation>
	<citation>1487	6	1012</citation>
	<citation>1491	6	1012</citation>
	<citation>1496	6	1012</citation>
	<citation>483	6	1012</citation>
	<citation>584	6	1012</citation>
	<citation>669	6	1012</citation>
	<citation>680	6	1012</citation>
	<citation>680	6	1012</citation>
	<citation>680	6	1012</citation>
	<citation>763	6	1012</citation>
	</citations>
	</document>
	<document id= '1011'>
	<citations>
	<citation>1011	5	1011</citation>
	<citation>1011	5	1011</citation>
	<citation>1011	5	1011</citation>
	</citations>
	<title>Logarithm of a Complex Number (Algorithm 48 [B3])</title>
	<conference>CACM August, 1964</conference>
	<authors>
	<author>Collens, D. S.</author>
	</authors>
	<location>CA640819 JB March 23, 1978  7:54 PM</location>
	</document>
	<document id= '1010'>
	<title>A Multiuser Computation Facility for Education and Research</title>
	<abstract>Present-day computing facilities are limited in their value for scientific research by inability  to interact strongly with users.  The full power of a research computing instrument should be available  at many terminals that give each user the ability to generate, correct and operate any procedure he wishes,  either simple or complex.  Implementation is described for a small-scale multiuser computer system that  permits several users to work independently with the machine, and to obtain satisfactory response using  typewriter communication.</abstract>
	<conference>CACM September, 1964</conference>
	<authors>
	<author>Dennis, J. B.</author>
	</authors>
	<location>CA640901 JB March 9, 1978  6:22 PM</location>
	<citations>
	<citation>1010	5	1010</citation>
	<citation>1010	5	1010</citation>
	<citation>1010	5	1010</citation>
	</citations>
	</document>
	<document id= '1009'>
	<title>Solution of Combinatorial Problems Using Generating Functions on a Variable-Field Computer</title>
	<abstract>The utility of generating functions in solving combinatorial problems is discussed.  Particular  implementation results are presented and evaluated.</abstract>
	<conference>CACM September, 1964</conference>
	<authors>
	<author>Weinberg, G. M.</author>
	</authors>
	<location>CA640902 JB March 9, 1978  6:17 PM</location>
	<citations>
	<citation>1009	5	1009</citation>
	<citation>1009	5	1009</citation>
	<citation>1009	5	1009</citation>
	</citations>
	</document>
	<document id= '1008'>
	<title>Scheduling Meetings with a Computer</title>
	<abstract>Computer scheduling of papers as it was developed for the 1960 meeting of the Federation of  American Societies for Experimental Biology (FASEB) is described.  The FASEB meeting is the largest scientific  meeting held in the United States each year.  The technique developed for FASEB can be applied to schedule  any meeting with parallel sessions.</abstract>
	<conference>CACM September, 1964</conference>
	<authors>
	<author>Schultz, C. K.</author>
	<author>Brooks, A.</author>
	<author>Schwartz, P.</author>
	</authors>
	<location>CA640903 JB March 9, 1978  6:16 PM</location>
	<citations>
	<citation>1008	5	1008</citation>
	<citation>1008	5	1008</citation>
	<citation>1008	5	1008</citation>
	<citation>2052	5	1008</citation>
	<citation>1008	6	1008</citation>
	<citation>1013	6	1008</citation>
	<citation>1504	6	1008</citation>
	<citation>1540	6	1008</citation>
	</citations>
	</document>
	<document id= '1007'>
	<title>Extension of Existing Compilers By Sophisticated Use of Macros</title>
	<abstract>A description is presented of an application in which macros and string concatenation were  employed to add a new facility to BELFAP.</abstract>
	<conference>CACM September, 1964</conference>
	<authors>
	<author>Benett, R. K.</author>
	<author>Neumann, H. D.</author>
	</authors>
	<location>CA640904 JB March 9, 1978  6:13 PM</location>
	<citations>
	<citation>1007	5	1007</citation>
	<citation>1007	5	1007</citation>
	<citation>1007	5	1007</citation>
	<citation>1781	5	1007</citation>
	<citation>1788	5	1007</citation>
	<citation>123	6	1007</citation>
	<citation>196	6	1007</citation>
	<citation>919	6	1007</citation>
	<citation>990	6	1007</citation>
	<citation>1006	6	1007</citation>
	<citation>1007	6	1007</citation>
	<citation>1007	6	1007</citation>
	<citation>1046	6	1007</citation>
	<citation>1131	6	1007</citation>
	<citation>1139	6	1007</citation>
	<citation>1140	6	1007</citation>
	<citation>1149	6	1007</citation>
	<citation>1198	6	1007</citation>
	<citation>1215	6	1007</citation>
	<citation>1223	6	1007</citation>
	<citation>1265	6	1007</citation>
	<citation>1303	6	1007</citation>
	<citation>1323	6	1007</citation>
	<citation>1358	6	1007</citation>
	<citation>1366	6	1007</citation>
	<citation>1421	6	1007</citation>
	<citation>1460	6	1007</citation>
	<citation>1462	6	1007</citation>
	<citation>1463	6	1007</citation>
	<citation>1467	6	1007</citation>
	<citation>1468	6	1007</citation>
	<citation>1477	6	1007</citation>
	<citation>1491	6	1007</citation>
	<citation>1496	6	1007</citation>
	<citation>1531	6	1007</citation>
	<citation>1535	6	1007</citation>
	<citation>1565	6	1007</citation>
	<citation>1601	6	1007</citation>
	<citation>1602	6	1007</citation>
	<citation>1613	6	1007</citation>
	<citation>1614	6	1007</citation>
	<citation>1626	6	1007</citation>
	<citation>1641	6	1007</citation>
	<citation>1787	6	1007</citation>
	<citation>1788	6	1007</citation>
	<citation>205	6	1007</citation>
	<citation>205	6	1007</citation>
	<citation>224	6	1007</citation>
	<citation>249	6	1007</citation>
	<citation>288	6	1007</citation>
	<citation>316	6	1007</citation>
	<citation>381	6	1007</citation>
	<citation>398	6	1007</citation>
	<citation>11	6	1007</citation>
	<citation>404	6	1007</citation>
	<citation>410	6	1007</citation>
	<citation>463	6	1007</citation>
	<citation>464	6	1007</citation>
	<citation>483	6	1007</citation>
	<citation>3184	6	1007</citation>
	<citation>3188	6	1007</citation>
	<citation>3189	6	1007</citation>
	<citation>584	6	1007</citation>
	<citation>600	6	1007</citation>
	<citation>680	6	1007</citation>
	<citation>691	6	1007</citation>
	<citation>763	6	1007</citation>
	<citation>799	6	1007</citation>
	</citations>
	</document>
	<document id= '1006'>
	<title>A Storage Allocation and Reference Structure</title>
	<abstract>A method is proposed and discussed which allows a subscripted-variable capability (in the FORTRAN  sense) to be added to AUTOCODER-Type assembly systems.</abstract>
	<conference>CACM September, 1964</conference>
	<authors>
	<author>Fitzwater, D. R.</author>
	</authors>
	<location>CA640905 JB March 9, 1978  6:11 PM</location>
	<citations>
	<citation>1006	5	1006</citation>
	<citation>1006	5	1006</citation>
	<citation>1006	5	1006</citation>
	<citation>1788	5	1006</citation>
	<citation>1006	6	1006</citation>
	<citation>1007	6	1006</citation>
	<citation>205	6	1006</citation>
	<citation>3189	6	1006</citation>
	</citations>
	</document>
	<document id= '1005'>
	<citations>
	<citation>1005	5	1005</citation>
	<citation>1005	5	1005</citation>
	<citation>1005	5	1005</citation>
	</citations>
	<title>Coordinates on an Ellipsoid (Algorithm 240 [Z])</title>
	<conference>CACM September, 1964</conference>
	<authors>
	<author>Dorrer, E.</author>
	</authors>
	<location>CA640906 JB March 9, 1978  6:09 PM</location>
	</document>
	<document id= '1004'>
	<citations>
	<citation>1004	5	1004</citation>
	<citation>1004	5	1004</citation>
	<citation>1004	5	1004</citation>
	</citations>
	<title>Arctangent (Algorithm [B1])</title>
	<conference>CACM September, 1964</conference>
	<authors>
	<author>Mills, K. W.</author>
	</authors>
	<location>CA640907 JB March 9, 1978  6:08 PM</location>
	</document>
	<document id= '1003'>
	<title>A Computer Analysis Method For Thermal Diffusion in Biochemical Systems</title>
	<abstract>In the thermal detection of rapid biochemical reactions it is necessary to correct the temperature  data for transient heat conduction losses in a cylindrical calorimeter.  To handle the complexities arising  from varying thermal-relaxation times of concentric insulating layers, a computer program was developed  which gives the temperature distribution of the system as a function of radius and time.  This distribution  is corrected at each step by a subroutine which calculates the instantaneous chemical state of there  action, as well as the heat produced by this reaction.  The program is based on a direct statement of  Fourier's law of heat conduction and the chemical rate equation to provide a "bookkeeping law" to follow  the reactants and the flow of heat packets, in such a way that the computer continually stores the heat  distribution.  A computer analysis method is here regarded as one in which the physical laws of a process  are used explicitly in the program. Usually this results in by passing much of the mathematical procedures  conventionally used.  The program was tested against some known exact solutions of the heat equation  and gave identical results, and compared well with experimental data of a known biochemical reaction.   The construction of computer programs based on the direct statement of the physical laws is a principle  of general applicability which has been applied to several other physical phenomena.</abstract>
	<conference>CACM September, 1964</conference>
	<authors>
	<author>Davids, N.</author>
	<author>Berger, R. L.</author>
	</authors>
	<location>CA640908 JB March 9, 1978  5:13 PM</location>
	<citations>
	<citation>1003	5	1003</citation>
	<citation>1003	5	1003</citation>
	<citation>1003	5	1003</citation>
	</citations>
	</document>
	<document id= '1002'>
	<title>A Rapid Method for Digital Filtering</title>
	<abstract>Since much of the computer time spent in time-series analysis is used for multiplications,  a minimum multiplication method was devised for digital filtering, with the expectation that it would  be useful in the on line, real-time analysis of biological data.  The filters are constructed from a succession  of readily analyzable components in a manner that facilitates cascading.  The repertoire of frequency  response curves includes relatively good low-pass and band-pass designs.  Programs are available for  implementing both the synthesis of these filters, and their application on computers whose assemblers  allow the definition of recursive macros.</abstract>
	<conference>CACM September, 1964</conference>
	<authors>
	<author>Whittlesey, J. R. B.</author>
	</authors>
	<location>CA640909 JB March 9, 1978  5:03 PM</location>
	<citations>
	<citation>1002	5	1002</citation>
	<citation>1002	5	1002</citation>
	<citation>1002	5	1002</citation>
	</citations>
	</document>
	<document id= '1001'>
	<title>Copyright Aspects of Computer Usage</title>
	<abstract>This paper is concerned with the question of what constitutes infringement of a copyright on  a book or other nondramatic literary work when the work is fed into a computer and is indexed, analyzed,  partially reprinted, or otherwise utilized by the computer to produce eye-readable output.  The question  of copyrightability of programs and infringement of copyrights on programs is also discussed.  The paper  is directed primarily to a discussion of the present law.  Some aspects of the proposed new copyright  law are also included.  General recommendations are made with respect to the proposed revision of the  copyright law.</abstract>
	<conference>CACM October, 1964</conference>
	<authors>
	<author>Lawlor, R. C.</author>
	</authors>
	<location>CA641001 JB March 9, 1978  4:59 PM</location>
	<citations>
	<citation>1001	5	1001</citation>
	<citation>1001	5	1001</citation>
	<citation>1001	5	1001</citation>
	<citation>1711	5	1001</citation>
	<citation>997	6	1001</citation>
	<citation>1001	6	1001</citation>
	</citations>
	</document>
	<document id= '1000'>
	<citations>
	<citation>1000	5	1000</citation>
	<citation>1000	5	1000</citation>
	<citation>1000	5	1000</citation>
	</citations>
	<title>Computer Patent Disclosures</title>
	<conference>CACM October, 1964</conference>
	<authors>
	<author>Kates, J. P.</author>
	</authors>
	<location>CA641002 JB March 9, 1978  4:55 PM</location>
	</document>
	<document id= '999'>
	<citations>
	<citation>999	5	999</citation>
	<citation>999	5	999</citation>
	<citation>999	5	999</citation>
	</citations>
	<title>Joint Inventorship of Computers</title>
	<conference>CACM October, 1964</conference>
	<authors>
	<author>Hauptman, G. A.</author>
	</authors>
	<location>CA641003 JB March 9, 19784:54 PM</location>
	</document>
	<document id= '998'>
	<citations>
	<citation>998	5	998</citation>
	<citation>998	5	998</citation>
	<citation>998	5	998</citation>
	</citations>
	<title>Computer Programs are Patentable</title>
	<conference>CACM October, 1964</conference>
	<authors>
	<author>Hamlin, K. B.</author>
	</authors>
	<location>CA641004 JB March 9, 1978  4:53 PM</location>
	</document>
	<document id= '997'>
	<citations>
	<citation>997	5	997</citation>
	<citation>997	5	997</citation>
	<citation>997	5	997</citation>
	<citation>1711	5	997</citation>
	<citation>997	6	997</citation>
	<citation>1001	6	997</citation>
	</citations>
	<title>Patent Protection of Computer Programs</title>
	<conference>CACM October, 1964</conference>
	<authors>
	<author>Jacobs, M. C.</author>
	</authors>
	<location>CA641005 JB March 9, 1978  4:50 PM</location>
	</document>
	<document id= '996'>
	<citations>
	<citation>996	5	996</citation>
	<citation>996	5	996</citation>
	<citation>996	5	996</citation>
	<citation>2044	5	996</citation>
	<citation>996	6	996</citation>
	<citation>1558	6	996</citation>
	<citation>2230	6	996</citation>
	<citation>521	6	996</citation>
	</citations>
	<title>Permutations of a Set with Repetitions (Algorithm 242 [G6])</title>
	<conference>CACM October, 1964</conference>
	<authors>
	<author>Sag, T. W.</author>
	</authors>
	<location>CA641006 JB March 9, 1978  4:49 PM</location>
	</document>
	<document id= '995'>
	<citations>
	<citation>995	5	995</citation>
	<citation>995	5	995</citation>
	<citation>995	5	995</citation>
	</citations>
	<title>Steep1 (Algorithm 203 [E4])</title>
	<conference>CACM October, 1964</conference>
	<authors>
	<author>Wallack, P.</author>
	</authors>
	<location>CA641007 JB March 9, 1978  4:48 PM</location>
	</document>
	<document id= '994'>
	<citations>
	<citation>994	5	994</citation>
	<citation>994	5	994</citation>
	<citation>994	5	994</citation>
	</citations>
	<title>Stringsort (Algorithm 207 [M1])</title>
	<conference>CACM October, 1964</conference>
	<authors>
	<author>Blair, C. R.</author>
	</authors>
	<location>CA641008 JB March 9, 1978  4:47 PM</location>
	</document>
	<document id= '993'>
	<citations>
	<citation>993	5	993</citation>
	<citation>993	5	993</citation>
	<citation>993	5	993</citation>
	</citations>
	<title>Kutta Merson (Algorithm 218 [D2])</title>
	<conference>CACM October, 1964</conference>
	<authors>
	<author>Priebe, K. B.</author>
	</authors>
	<location>CA641009 JB March 9, 1978  4:46 PM</location>
	</document>
	<document id= '992'>
	<citations>
	<citation>992	5	992</citation>
	<citation>992	5	992</citation>
	<citation>992	5	992</citation>
	</citations>
	<title>Gamma Function (Algorithm 221 [S14])</title>
	<conference>CACM October, 1964</conference>
	<authors>
	<author>McCombs, V. K.</author>
	</authors>
	<location>CA641010 JB March 9, 1978  4:45 PM</location>
	</document>
	<document id= '991'>
	<citations>
	<citation>991	5	991</citation>
	<citation>991	5	991</citation>
	<citation>991	5	991</citation>
	</citations>
	<title>Gamma Function with Controller Accuracy (Algorithm 225 [S14])</title>
	<conference>CACM October, 1964</conference>
	<authors>
	<author>Bray, T. A.</author>
	</authors>
	<location>CA641011 JB March 9, 1978  4:44 PM</location>
	</document>
	<document id= '990'>
	<title>Constraint-Type Statements in Programming Languages</title>
	<abstract>A proposal is made for including in a programming language statements which imply relations  between variables but which are not explicit assignment statements.  The compiler sets up a Newtonian  iteration making use for the purpose of a routine for formal differentiation.</abstract>
	<conference>CACM October, 1964</conference>
	<authors>
	<author>Wilkes, M. V.</author>
	</authors>
	<location>CA641012 JB March 9, 1978  4:42 PM</location>
	<citations>
	<citation>990	5	990</citation>
	<citation>990	5	990</citation>
	<citation>990	5	990</citation>
	<citation>1781	5	990</citation>
	<citation>1945	5	990</citation>
	<citation>2341	5	990</citation>
	<citation>823	6	990</citation>
	<citation>123	6	990</citation>
	<citation>196	6	990</citation>
	<citation>914	6	990</citation>
	<citation>915	6	990</citation>
	<citation>917	6	990</citation>
	<citation>919	6	990</citation>
	<citation>984	6	990</citation>
	<citation>989	6	990</citation>
	<citation>990	6	990</citation>
	<citation>990	6	990</citation>
	<citation>990	6	990</citation>
	<citation>1007	6	990</citation>
	<citation>1012	6	990</citation>
	<citation>1046	6	990</citation>
	<citation>1084	6	990</citation>
	<citation>1098	6	990</citation>
	<citation>1122	6	990</citation>
	<citation>1131	6	990</citation>
	<citation>1138	6	990</citation>
	<citation>1139	6	990</citation>
	<citation>1139	6	990</citation>
	<citation>1140	6	990</citation>
	<citation>1141	6	990</citation>
	<citation>1149	6	990</citation>
	<citation>1198	6	990</citation>
	<citation>1200	6	990</citation>
	<citation>1215	6	990</citation>
	<citation>1223	6	990</citation>
	<citation>1223	6	990</citation>
	<citation>1265	6	990</citation>
	<citation>1265	6	990</citation>
	<citation>1303	6	990</citation>
	<citation>1323	6	990</citation>
	<citation>1336	6	990</citation>
	<citation>1358	6	990</citation>
	<citation>1366	6	990</citation>
	<citation>1396	6	990</citation>
	<citation>1421	6	990</citation>
	<citation>1455	6	990</citation>
	<citation>1460	6	990</citation>
	<citation>1462	6	990</citation>
	<citation>1463	6	990</citation>
	<citation>1467	6	990</citation>
	<citation>1468	6	990</citation>
	<citation>1468	6	990</citation>
	<citation>1466	6	990</citation>
	<citation>1477	6	990</citation>
	<citation>1477	6	990</citation>
	<citation>1487	6	990</citation>
	<citation>1491	6	990</citation>
	<citation>1491	6	990</citation>
	<citation>1496	6	990</citation>
	<citation>1496	6	990</citation>
	<citation>1531	6	990</citation>
	<citation>1535	6	990</citation>
	<citation>1565	6	990</citation>
	<citation>1601	6	990</citation>
	<citation>1602	6	990</citation>
	<citation>1613	6	990</citation>
	<citation>1614	6	990</citation>
	<citation>1626	6	990</citation>
	<citation>1641	6	990</citation>
	<citation>1787	6	990</citation>
	<citation>1788	6	990</citation>
	<citation>205	6	990</citation>
	<citation>224	6	990</citation>
	<citation>249	6	990</citation>
	<citation>288	6	990</citation>
	<citation>316	6	990</citation>
	<citation>381	6	990</citation>
	<citation>398	6	990</citation>
	<citation>11	6	990</citation>
	<citation>404	6	990</citation>
	<citation>410	6	990</citation>
	<citation>463	6	990</citation>
	<citation>464	6	990</citation>
	<citation>483	6	990</citation>
	<citation>483	6	990</citation>
	<citation>3184	6	990</citation>
	<citation>3184	6	990</citation>
	<citation>3188	6	990</citation>
	<citation>584	6	990</citation>
	<citation>584	6	990</citation>
	<citation>600	6	990</citation>
	<citation>669	6	990</citation>
	<citation>680	6	990</citation>
	<citation>680	6	990</citation>
	<citation>691	6	990</citation>
	<citation>763	6	990</citation>
	<citation>763	6	990</citation>
	<citation>799	6	990</citation>
	</citations>
	</document>
	<document id= '989'>
	<citations>
	<citation>249	4	989</citation>
	<citation>254	4	989</citation>
	<citation>272	4	989</citation>
	<citation>1086	4	989</citation>
	<citation>1102	4	989</citation>
	<citation>1109	4	989</citation>
	<citation>1132	4	989</citation>
	<citation>1140	4	989</citation>
	<citation>1188	4	989</citation>
	<citation>1234	4	989</citation>
	<citation>1263	4	989</citation>
	<citation>1265	4	989</citation>
	<citation>1270	4	989</citation>
	<citation>1306	4	989</citation>
	<citation>1323	4	989</citation>
	<citation>1358	4	989</citation>
	<citation>1379	4	989</citation>
	<citation>1380	4	989</citation>
	<citation>1453	4	989</citation>
	<citation>1464	4	989</citation>
	<citation>1464	4	989</citation>
	<citation>1484	4	989</citation>
	<citation>1491	4	989</citation>
	<citation>1491	4	989</citation>
	<citation>1498	4	989</citation>
	<citation>1613	4	989</citation>
	<citation>1614	4	989</citation>
	<citation>1767	4	989</citation>
	<citation>1781	4	989</citation>
	<citation>1781	4	989</citation>
	<citation>1781	4	989</citation>
	<citation>1787	4	989</citation>
	<citation>1825	4	989</citation>
	<citation>1860	4	989</citation>
	<citation>1949	4	989</citation>
	<citation>321	4	989</citation>
	<citation>2059	4	989</citation>
	<citation>2083	4	989</citation>
	<citation>2126	4	989</citation>
	<citation>2178	4	989</citation>
	<citation>2179	4	989</citation>
	<citation>2252	4	989</citation>
	<citation>2325	4	989</citation>
	<citation>2341	4	989</citation>
	<citation>2546	4	989</citation>
	<citation>435	4	989</citation>
	<citation>437	4	989</citation>
	<citation>463	4	989</citation>
	<citation>483	4	989</citation>
	<citation>491	4	989</citation>
	<citation>2645	4	989</citation>
	<citation>2652	4	989</citation>
	<citation>2684	4	989</citation>
	<citation>2732	4	989</citation>
	<citation>2842	4	989</citation>
	<citation>2929	4	989</citation>
	<citation>2934	4	989</citation>
	<citation>560	4	989</citation>
	<citation>583	4	989</citation>
	<citation>3069	4	989</citation>
	<citation>3073	4	989</citation>
	<citation>627	4	989</citation>
	<citation>631	4	989</citation>
	<citation>632	4	989</citation>
	<citation>642	4	989</citation>
	<citation>644	4	989</citation>
	<citation>653	4	989</citation>
	<citation>669	4	989</citation>
	<citation>679	4	989</citation>
	<citation>680	4	989</citation>
	<citation>691	4	989</citation>
	<citation>729	4	989</citation>
	<citation>761	4	989</citation>
	<citation>761	4	989</citation>
	<citation>762	4	989</citation>
	<citation>763	4	989</citation>
	<citation>123	4	989</citation>
	<citation>140	4	989</citation>
	<citation>919	4	989</citation>
	<citation>949	4	989</citation>
	<citation>989	4	989</citation>
	<citation>989	4	989</citation>
	<citation>989	4	989</citation>
	<citation>196	5	989</citation>
	<citation>989	5	989</citation>
	<citation>989	5	989</citation>
	<citation>989	5	989</citation>
	<citation>1263	5	989</citation>
	<citation>288	5	989</citation>
	<citation>1453	5	989</citation>
	<citation>1945	5	989</citation>
	<citation>3184	5	989</citation>
	<citation>823	6	989</citation>
	<citation>914	6	989</citation>
	<citation>915	6	989</citation>
	<citation>917	6	989</citation>
	<citation>984	6	989</citation>
	<citation>989	6	989</citation>
	<citation>989	6	989</citation>
	<citation>989	6	989</citation>
	<citation>990	6	989</citation>
	<citation>1012	6	989</citation>
	<citation>1084	6	989</citation>
	<citation>1098	6	989</citation>
	<citation>1122	6	989</citation>
	<citation>1138	6	989</citation>
	<citation>1139	6	989</citation>
	<citation>1141	6	989</citation>
	<citation>1200	6	989</citation>
	<citation>1223	6	989</citation>
	<citation>1265	6	989</citation>
	<citation>1336	6	989</citation>
	<citation>1396	6	989</citation>
	<citation>1455	6	989</citation>
	<citation>1477	6	989</citation>
	<citation>1487	6	989</citation>
	<citation>1491	6	989</citation>
	<citation>1496	6	989</citation>
	<citation>404	6	989</citation>
	<citation>483	6	989</citation>
	<citation>3184	6	989</citation>
	<citation>3184	6	989</citation>
	<citation>584	6	989</citation>
	<citation>669	6	989</citation>
	<citation>680	6	989</citation>
	<citation>763	6	989</citation>
	</citations>
	<title>A Method of Syntax Specification</title>
	<conference>CACM October, 1964</conference>
	<authors>
	<author>Iverson, K. E.</author>
	</authors>
	<location>CA641013 JB March 9, 1978  4:39 PM</location>
	</document>
	<document id= '988'>
	<citations>
	<citation>988	5	988</citation>
	<citation>988	5	988</citation>
	<citation>988	5	988</citation>
	<citation>1845	5	988</citation>
	<citation>1900	5	988</citation>
	<citation>2083	5	988</citation>
	<citation>2154	5	988</citation>
	<citation>2270	5	988</citation>
	<citation>2693	5	988</citation>
	<citation>987	6	988</citation>
	<citation>987	6	988</citation>
	<citation>988	6	988</citation>
	<citation>988	6	988</citation>
	<citation>988	6	988</citation>
	<citation>988	6	988</citation>
	<citation>988	6	988</citation>
	<citation>988	6	988</citation>
	<citation>1900	6	988</citation>
	<citation>2270	6	988</citation>
	<citation>2696	6	988</citation>
	<citation>3184	6	988</citation>
	</citations>
	<title>History and Summary of FORTRAN Standardization Development for the ASA</title>
	<conference>CACM October, 1964</conference>
	<authors>
	<author>Heising, W. P.</author>
	</authors>
	<location>CA641014 JB March 9, 1978  4:37 PM</location>
	</document>
	<document id= '987'>
	<citations>
	<citation>987	5	987</citation>
	<citation>987	5	987</citation>
	<citation>987	5	987</citation>
	<citation>1613	5	987</citation>
	<citation>1646	5	987</citation>
	<citation>1900	5	987</citation>
	<citation>1955	5	987</citation>
	<citation>2025	5	987</citation>
	<citation>2154	5	987</citation>
	<citation>2365	5	987</citation>
	<citation>2506	5	987</citation>
	<citation>3060	5	987</citation>
	<citation>830	6	987</citation>
	<citation>987	6	987</citation>
	<citation>987	6	987</citation>
	<citation>987	6	987</citation>
	<citation>987	6	987</citation>
	<citation>987	6	987</citation>
	<citation>987	6	987</citation>
	<citation>987	6	987</citation>
	<citation>987	6	987</citation>
	<citation>987	6	987</citation>
	<citation>988	6	987</citation>
	<citation>988	6	987</citation>
	<citation>1072	6	987</citation>
	<citation>1086	6	987</citation>
	<citation>1134	6	987</citation>
	<citation>1179	6	987</citation>
	<citation>1453	6	987</citation>
	<citation>1647	6	987</citation>
	<citation>1754	6	987</citation>
	<citation>1900	6	987</citation>
	<citation>1900	6	987</citation>
	<citation>1924	6	987</citation>
	<citation>2154	6	987</citation>
	<citation>2362	6	987</citation>
	<citation>3184	6	987</citation>
	<citation>680	6	987</citation>
	</citations>
	<title>FORTRAN vs. Basic FORTRAN (A Programming Language for Information Processing on Automatic Data  Processing Systems)</title>
	<conference>CACM October, 1964</conference>
	<location>CA641015 JB March 9, 1978  4:36 PM</location>
	</document>
	<document id= '986'>
	<citations>
	<citation>986	5	986</citation>
	<citation>986	5	986</citation>
	<citation>986	5	986</citation>
	<citation>1705	5	986</citation>
	<citation>984	6	986</citation>
	<citation>986	6	986</citation>
	<citation>1020	6	986</citation>
	<citation>1321	6	986</citation>
	</citations>
	<title>Proposed Amendment to Proposed American Standard on Specification for General-Purpose Paper Cards  for Information Processing</title>
	<conference>CACM October, 1964</conference>
	<location>CA641016 JB March 9, 1978  4:35 PM</location>
	</document>
	<document id= '985'>
	<citations>
	<citation>985	5	985</citation>
	<citation>985	5	985</citation>
	<citation>985	5	985</citation>
	</citations>
	<title>Report on SUBSET ALGOL 60 (IFIP)</title>
	<conference>CACM October, 1964</conference>
	<location>CA641017 JB March 9, 1978  4:33 PM</location>
	</document>
	<document id= '984'>
	<citations>
	<citation>984	5	984</citation>
	<citation>984	5	984</citation>
	<citation>984	5	984</citation>
	<citation>1705	5	984</citation>
	<citation>1945	5	984</citation>
	<citation>2034	5	984</citation>
	<citation>823	6	984</citation>
	<citation>914	6	984</citation>
	<citation>915	6	984</citation>
	<citation>917	6	984</citation>
	<citation>984	6	984</citation>
	<citation>984	6	984</citation>
	<citation>984	6	984</citation>
	<citation>986	6	984</citation>
	<citation>989	6	984</citation>
	<citation>990	6	984</citation>
	<citation>1012	6	984</citation>
	<citation>1020	6	984</citation>
	<citation>1084	6	984</citation>
	<citation>1098	6	984</citation>
	<citation>1122	6	984</citation>
	<citation>1138	6	984</citation>
	<citation>1139	6	984</citation>
	<citation>1141	6	984</citation>
	<citation>1200	6	984</citation>
	<citation>1223	6	984</citation>
	<citation>1231	6	984</citation>
	<citation>1265	6	984</citation>
	<citation>1321	6	984</citation>
	<citation>1336	6	984</citation>
	<citation>1396	6	984</citation>
	<citation>1455	6	984</citation>
	<citation>1477	6	984</citation>
	<citation>1487	6	984</citation>
	<citation>1491	6	984</citation>
	<citation>1496	6	984</citation>
	<citation>1565	6	984</citation>
	<citation>1852	6	984</citation>
	<citation>1926	6	984</citation>
	<citation>1947	6	984</citation>
	<citation>483	6	984</citation>
	<citation>584	6	984</citation>
	<citation>669	6	984</citation>
	<citation>680	6	984</citation>
	<citation>763	6	984</citation>
	</citations>
	<title>Report on Input-Output Procedures for ALGOL 60 (IFIP)</title>
	<conference>CACM October, 1964</conference>
	<location>CA641018 JB March 9, 1978  4:32 PM</location>
	</document>
	<document id= '983'>
	<citations>
	<citation>983	5	983</citation>
	<citation>983	5	983</citation>
	<citation>983	5	983</citation>
	</citations>
	<title>Take-up reels for One-Inch Perforated Tape for Information Interchange (Proposed American Standard)</title>
	<conference>CACM October, 1964</conference>
	<location>CA641019 JB March 9, 1978  4:30 PM</location>
	</document>
	<document id= '982'>
	<title>An Inductive Approach to Language Translation</title>
	<abstract>The possibility of natural language translation by means of fixed operations on example translations  is considered.  The conception of sentence translation which motivates the work is informally presented,  and the measurement of physical similarity in pairs of strings is discussed, a notion which plays a central  role in the proposed type of translator.  Experimental evidence is presented in support of the premise  upon which this conception is based.</abstract>
	<conference>CACM November, 1964</conference>
	<authors>
	<author>Faulk, R. D.</author>
	</authors>
	<location>CA641101 JB March 9, 1978  4:28 PM</location>
	<citations>
	<citation>982	5	982</citation>
	<citation>982	5	982</citation>
	<citation>982	5	982</citation>
	<citation>1592	5	982</citation>
	<citation>982	6	982</citation>
	<citation>1112	6	982</citation>
	<citation>619	6	982</citation>
	</citations>
	</document>
	<document id= '981'>
	<title>Rounding Problems in Commercial Data Processing</title>
	<abstract>A common requirement in commercial data processing is that the sum of a set of numbers, rounded  in a generally understood manner, be equal to the sum of the numbers rounded individually.  Four rounding  procedures are described to accomplish this.  The particular procedure that is appropriate depends upon  whether the numbers being accumulated can vary in sign, whether their sum can vary in sign, and whether  the last number being summed can be recognized as such prior to its rounding.</abstract>
	<conference>CACM November, 1964</conference>
	<authors>
	<author>Kelley, T. B.</author>
	</authors>
	<location>CA641102 JB March 9, 1978  4:25 PM</location>
	<citations>
	<citation>981	5	981</citation>
	<citation>981	5	981</citation>
	<citation>981	5	981</citation>
	</citations>
	</document>
	<document id= '980'>
	<title>Multiple-Precision Arithmetic and the Exact Calculation of the 3-j, 6-j and 9-j Symbols</title>
	<abstract>Described in this paper is a system of general-purpose multiple-precision fixed-point routines  and their use in subroutines which calculate exactly the quantum-mechanical 3-j, 6-j and 9-j symbols  of large arguments.</abstract>
	<conference>CACM November, 1964</conference>
	<authors>
	<author>Maer, R. M.</author>
	<author>Redlich, M. G.</author>
	</authors>
	<location>CA641103 JB March 9, 1978  4:13 PM</location>
	<citations>
	<citation>980	5	980</citation>
	<citation>980	5	980</citation>
	<citation>980	5	980</citation>
	</citations>
	</document>
	<document id= '979'>
	<citations>
	<citation>979	5	979</citation>
	<citation>979	5	979</citation>
	<citation>979	5	979</citation>
	</citations>
	<title>Logarithm of a Complex Number (Algorithm 243 [B3])</title>
	<conference>CACM November, 1964</conference>
	<authors>
	<author>Collens, D. S.</author>
	</authors>
	<location>CA641104 JB March 9, 1978  4:10 PM</location>
	</document>
	<document id= '978'>
	<citations>
	<citation>978	5	978</citation>
	<citation>978	5	978</citation>
	<citation>978	5	978</citation>
	</citations>
	<title>Fresnel Integrals (Algorithm 244 [S20])</title>
	<conference>CACM November, 1964</conference>
	<authors>
	<author>Lotsch, H.</author>
	</authors>
	<location>CA641105 JB March 9,1978  4:09 PM</location>
	</document>
	<document id= '977'>
	<citations>
	<citation>977	5	977</citation>
	<citation>977	5	977</citation>
	<citation>977	5	977</citation>
	</citations>
	<title>Conversions Between Calendar Date and Julian Day Number (Algorithm 199 [Z])</title>
	<conference>CACM November, 1964</conference>
	<authors>
	<author>Oppenheim, D. K.</author>
	</authors>
	<location>CA641106 JB March 9, 1978  4:08 PM</location>
	</document>
	<document id= '976'>
	<citations>
	<citation>976	5	976</citation>
	<citation>976	5	976</citation>
	<citation>976	5	976</citation>
	</citations>
	<title>Fresnel Integrals (Algorithm 213 [S20])</title>
	<conference>CACM November, 1964</conference>
	<authors>
	<author>Gray, M.</author>
	</authors>
	<location>CA641107 JB March 9, 1978  4:06 PM</location>
	</document>
	<document id= '975'>
	<citations>
	<citation>975	5	975</citation>
	<citation>975	5	975</citation>
	<citation>975	5	975</citation>
	<citation>1251	5	975</citation>
	<citation>975	6	975</citation>
	</citations>
	<title>The New Program of Work for the International Standard Vocabulary in Computers and Information Processing</title>
	<conference>CACM November, 1964</conference>
	<authors>
	<author>Traub, J. F.</author>
	</authors>
	<location>CA641108 JB March 9, 1978  4:05 PM</location>
	</document>
	<document id= '974'>
	<title>A Technique for Reading Gapless Tapes Makes Electrocardiograph Analysis Feasible on the IBM 7090</title>
	<abstract>To study arrhythmias and higher frequency components of the electrocardiogram, long series  of patient heart cycles must be examined before valid comparison of different heart beats can be made.  A technique is presented for the automatic analysis of long series heart cycles via a digital computer.</abstract>
	<conference>CACM November, 1964</conference>
	<authors>
	<author>Maher, A. S.</author>
	</authors>
	<location>CA641109 JB March 9, 1978  4:03 PM</location>
	<citations>
	<citation>974	5	974</citation>
	<citation>974	5	974</citation>
	<citation>974	5	974</citation>
	</citations>
	</document>
	<document id= '973'>
	<title>Estimation of Heart Parameters Using Skin Potential Measurements</title>
	<abstract>A fundamental problem of vector cardiography is the estimation of the state of the heart on  the basis of skin potential measurements.  A mathematical model relating ventricular dipoles to surface  potentials is sketched.  Then it is shown that the inverse problem-that of determining electrical heart  parameters on the basis of skin potential measurements-may be viewed as a nonlinear multipoint boundary  value problem.  A feasible solution, employing quasilinearization and high-speed digital computers, is  given.</abstract>
	<conference>CACM November, 1964</conference>
	<authors>
	<author>Bellman, R.</author>
	<author>Collier, C.</author>
	<author>Kagiwada, H.</author>
	<author>Kalaba, R.</author>
	<author>Selvester, R.</author>
	</authors>
	<location>CA641110 JB March 9, 1978  4:00 PM</location>
	<citations>
	<citation>973	5	973</citation>
	<citation>973	5	973</citation>
	<citation>973	5	973</citation>
	<citation>1278	5	973</citation>
	<citation>973	6	973</citation>
	<citation>1028	6	973</citation>
	<citation>1029	6	973</citation>
	</citations>
	</document>
	<document id= '972'>
	<title>An Executive System Implemented as a Finite-State Automaton</title>
	<abstract>The 473L command and control system used by the Air Force permits many operators to access  large data files through the use of a computer.  The man-machine interface is satisfied by several communication  consoles from which operators may enter queries and view replies.  A data link permits remote stations  to send messages, status reports and inventories directly to the computer.  The information received  over the on-line data link is used to update the data files which are stored on disk.  The 473L programming  system is divided into an Executive Control Program and five components with different processing priorities.   These priorities permit the system to be most sensitive to the console inputs and permit the operators  at all the consoles to time share the central processor.  The Executive Control Program provides for  the orderly transitions of control among the programming system components. The major emphasis of the  paper is on the technique of using the definition of a finite-state automaton for organizing the Executive  Control Program.</abstract>
	<conference>CACM November, 1964</conference>
	<authors>
	<author>Heistand, R. E.</author>
	</authors>
	<location>CA641111 JB March 9, 1978  3:56 PM</location>
	<citations>
	<citation>1471	4	972</citation>
	<citation>1774	4	972</citation>
	<citation>2911	4	972</citation>
	<citation>560	4	972</citation>
	<citation>972	4	972</citation>
	<citation>972	4	972</citation>
	<citation>972	4	972</citation>
	<citation>972	5	972</citation>
	<citation>972	5	972</citation>
	<citation>972	5	972</citation>
	<citation>271	5	972</citation>
	<citation>273	5	972</citation>
	<citation>276	5	972</citation>
	</citations>
	</document>
	<document id= '971'>
	<title>Time Sharing in a Traffic Control Program</title>
	<abstract>The Toronto traffic signal control system consists of a variety of logically distinct computer  programs, all competing for machine time.  To satisfy these demands, a time-sharing program has been  written whose purpose is to execute, in the order of a predefined priority, the various subprograms within  the real-time system.  In this paper the more interesting aspects of the time-sharing program are outlined.</abstract>
	<conference>CACM November, 1964</conference>
	<authors>
	<author>Green, L. E. S.</author>
	</authors>
	<location>CA641112 JB March 9, 1978  3:49 PM</location>
	<citations>
	<citation>971	5	971</citation>
	<citation>971	5	971</citation>
	<citation>971	5	971</citation>
	</citations>
	</document>
	<document id= '970'>
	<citations>
	<citation>970	5	970</citation>
	<citation>970	5	970</citation>
	<citation>970	5	970</citation>
	<citation>2042	5	970</citation>
	<citation>2222	5	970</citation>
	<citation>2356	5	970</citation>
	<citation>2679	5	970</citation>
	<citation>2844	5	970</citation>
	<citation>2972	5	970</citation>
	<citation>970	6	970</citation>
	<citation>970	6	970</citation>
	<citation>970	6	970</citation>
	<citation>970	6	970</citation>
	<citation>970	6	970</citation>
	<citation>970	6	970</citation>
	<citation>1059	6	970</citation>
	<citation>1175	6	970</citation>
	<citation>1190	6	970</citation>
	<citation>1228	6	970</citation>
	<citation>1228	6	970</citation>
	<citation>1491	6	970</citation>
	<citation>1800	6	970</citation>
	<citation>1818	6	970</citation>
	<citation>1834	6	970</citation>
	<citation>1969	6	970</citation>
	<citation>1997	6	970</citation>
	<citation>308	6	970</citation>
	<citation>2042	6	970</citation>
	<citation>2042	6	970</citation>
	<citation>2204	6	970</citation>
	<citation>2227	6	970</citation>
	<citation>2597	6	970</citation>
	<citation>2732	6	970</citation>
	<citation>2738	6	970</citation>
	<citation>2742	6	970</citation>
	<citation>2767	6	970</citation>
	<citation>3187	6	970</citation>
	<citation>507	6	970</citation>
	<citation>716	6	970</citation>
	<citation>783	6	970</citation>
	</citations>
	<title>Treesort 3 (Algorithm [M1])</title>
	<conference>CACM December, 1964</conference>
	<authors>
	<author>Floyd, R. W.</author>
	</authors>
	<location>CA641201 JB March 9, 1978  3:45 PM</location>
	</document>
	<document id= '969'>
	<citations>
	<citation>969	5	969</citation>
	<citation>969	5	969</citation>
	<citation>969	5	969</citation>
	<citation>2834	5	969</citation>
	<citation>969	6	969</citation>
	<citation>2045	6	969</citation>
	<citation>2417	6	969</citation>
	<citation>2466	6	969</citation>
	</citations>
	<title>Graycode (Algorithm 246 [Z])</title>
	<conference>CACM December, 1964</conference>
	<authors>
	<author>Boothroyd, J.</author>
	</authors>
	<location>CA641202 JB March 9, 1978  3:44 PM</location>
	</document>
	<document id= '968'>
	<citations>
	<citation>968	5	968</citation>
	<citation>968	5	968</citation>
	<citation>968	5	968</citation>
	</citations>
	<title>Radical-Inverse Quasi-Random Point Sequence (Algorithm 247 [G5])</title>
	<conference>CACM December, 1964</conference>
	<authors>
	<author>Halton, J. H.</author>
	<author>Smith, G. B.</author>
	</authors>
	<location>CA641203 JB March 9, 19783:43 PM</location>
	</document>
	<document id= '967'>
	<citations>
	<citation>967	5	967</citation>
	<citation>967	5	967</citation>
	<citation>967	5	967</citation>
	<citation>1583	5	967</citation>
	<citation>831	6	967</citation>
	<citation>967	6	967</citation>
	<citation>1126	6	967</citation>
	<citation>707	6	967</citation>
	</citations>
	<title>Complementary Error Function (Algorithm 181 [S15])</title>
	<conference>CACM December, 1964</conference>
	<authors>
	<author>Clausen, I.</author>
	</authors>
	<location>CA641204 JB March 9, 1978  3:42 PM</location>
	</document>
	<document id= '966'>
	<citations>
	<citation>966	5	966</citation>
	<citation>966	5	966</citation>
	<citation>966	5	966</citation>
	</citations>
	<title>Evaluation of Determinant (Algorithm 224 [F3])</title>
	<conference>CACM December, 1964</conference>
	<authors>
	<author>Hasselblad, V.</author>
	<author>Rulifson, J.</author>
	</authors>
	<location>CA641205 JB March 9, 1978  3:41 PM</location>
	</document>
	<document id= '965'>
	<citations>
	<citation>965	5	965</citation>
	<citation>965	5	965</citation>
	<citation>965	5	965</citation>
	</citations>
	<title>Greatest Common Divisor (Algorithm 237 [A1])</title>
	<conference>CACM December, 1964</conference>
	<authors>
	<author>Bray, T. A.</author>
	</authors>
	<location>CA641206 JB March 9, 1978  3:40 PM</location>
	</document>
	<document id= '964'>
	<title>Mechanization of Tedious Algebra-the e Coefficients of Theoretical Chemistry</title>
	<abstract>A table of formulas for certain integrals involving Legendre functions has been constructed  mechanically by a program which performed algebraic operations.  The formulas are all rational algebraic  expressions in a single variable and were constructed by a recurrence procedure.  They are of interest  in molecular quantum chemistry.  Trivial coding techniques were used to write the relevant programs in  FORTRAN.  The results were photo composed on a Photon S-560 system, that was controlled by tapes which  were punched directly from the computer output, so avoiding manual keyboarding, transcription errors  and keyboarded correction.</abstract>
	<conference>CACM December, 1964</conference>
	<authors>
	<author>Wactlar, H. D.</author>
	<author>Barnett, M. P.</author>
	</authors>
	<location>CA641207 JB March 9, 1978  3:38 PM</location>
	<citations>
	<citation>1028	4	964</citation>
	<citation>1121	4	964</citation>
	<citation>1216	4	964</citation>
	<citation>1392	4	964</citation>
	<citation>1396	4	964</citation>
	<citation>1396	4	964</citation>
	<citation>659	4	964</citation>
	<citation>964	4	964</citation>
	<citation>964	4	964</citation>
	<citation>964	4	964</citation>
	<citation>964	5	964</citation>
	<citation>964	5	964</citation>
	<citation>964	5	964</citation>
	<citation>1334	5	964</citation>
	<citation>1396	5	964</citation>
	<citation>284	5	964</citation>
	<citation>1444	5	964</citation>
	<citation>561	5	964</citation>
	<citation>759	5	964</citation>
	<citation>964	6	964</citation>
	<citation>964	6	964</citation>
	<citation>964	6	964</citation>
	<citation>1028	6	964</citation>
	<citation>1029	6	964</citation>
	<citation>1083	6	964</citation>
	<citation>1132	6	964</citation>
	<citation>1214	6	964</citation>
	<citation>1278	6	964</citation>
	<citation>1334	6	964</citation>
	<citation>1365	6	964</citation>
	<citation>1386	6	964</citation>
	<citation>1387	6	964</citation>
	<citation>1388	6	964</citation>
	<citation>1392	6	964</citation>
	<citation>1393	6	964</citation>
	<citation>1394	6	964</citation>
	<citation>1395	6	964</citation>
	<citation>1396	6	964</citation>
	<citation>1397	6	964</citation>
	<citation>1496	6	964</citation>
	<citation>284	6	964</citation>
	<citation>407	6	964</citation>
	<citation>3199	6	964</citation>
	<citation>3200	6	964</citation>
	<citation>3201	6	964</citation>
	<citation>3202	6	964</citation>
	<citation>3203	6	964</citation>
	<citation>3204	6	964</citation>
	<citation>561	6	964</citation>
	<citation>730	6	964</citation>
	</citations>
	</document>
	<document id= '963'>
	<title>Relative Effects of Central Processor and Input-Output Speeds Upon Throughput on the Large Computer</title>
	<abstract>Presented in this paper is a technique for determining the relative effects of the internal  speed of the computer and the speed of the input-output units upon the overall speed of the system. Equations  are derived which permit the determination of these effects from hardware usage measurements.</abstract>
	<conference>CACM December, 1964</conference>
	<authors>
	<author>White, P.</author>
	</authors>
	<location>CA641208 JB March 9, 1978  3:34 PM</location>
	<citations>
	<citation>963	5	963</citation>
	<citation>963	5	963</citation>
	<citation>963	5	963</citation>
	<citation>1653	5	963</citation>
	<citation>963	6	963</citation>
	<citation>1069	6	963</citation>
	<citation>1417	6	963</citation>
	</citations>
	</document>
	<document id= '962'>
	<title>Double-Precision Squares Root for The CDC-3600</title>
	<abstract>In January of 1960, the late Hans J. Maehly completed a summary of approximations to the elementary  functions for the CDC-1604 computer.  The approximations and techniques suggested by Maehly are equally  applicable to the second large computer in the CDC line, the 3600.  Unlike the 1604, however, the 3600  has built-in double-precision floating-point arithmetic.  The present work, largely inspired by the successes  of Maehly and his associates, concerns the extension of one of Maehly's ideas to a double-precision subroutine  for the 3600.</abstract>
	<conference>CACM December, 1964</conference>
	<authors>
	<author>Cody, W. J.</author>
	</authors>
	<location>CA641209 JB March 9, 1978  3:31 PM</location>
	<citations>
	<citation>962	5	962</citation>
	<citation>962	5	962</citation>
	<citation>962	5	962</citation>
	<citation>1440	5	962</citation>
	<citation>1932	5	962</citation>
	<citation>2159	5	962</citation>
	<citation>962	6	962</citation>
	<citation>962	6	962</citation>
	<citation>962	6	962</citation>
	<citation>1566	6	962</citation>
	<citation>1932	6	962</citation>
	<citation>532	6	962</citation>
	</citations>
	</document>
	<document id= '961'>
	<title>Limited Bit Manipulation Using FORTRAN II</title>
	<abstract>Techniques are developed for manipulating bits using only FORTRAN II.  These techniques allow  individual bits to be tested, certain fields to be shifted, and numbers coded in BCD to be converted  to Binary.</abstract>
	<conference>CACM December, 1964</conference>
	<authors>
	<author>Oster, C. A.</author>
	</authors>
	<location>CA641210 JB March 9, 1978  3:27 PM</location>
	<citations>
	<citation>961	5	961</citation>
	<citation>961	5	961</citation>
	<citation>961	5	961</citation>
	</citations>
	</document>
	<document id= '960'>
	<citations>
	<citation>960	5	960</citation>
	<citation>960	5	960</citation>
	<citation>960	5	960</citation>
	</citations>
	<title>Curve Fitting with Format Fortran</title>
	<conference>CACM December, 1964</conference>
	<authors>
	<author>Garber, M. J.</author>
	</authors>
	<location>CA641211 JB March 9, 1978  3:25 PM</location>
	</document>
	<document id= '959'>
	<citations>
	<citation>959	5	959</citation>
	<citation>959	5	959</citation>
	<citation>959	5	959</citation>
	</citations>
	<title>Mark Sense and Port-A-Punch Programming Inputs</title>
	<conference>CACM December, 1964</conference>
	<authors>
	<author>Lubbert, W. F.</author>
	</authors>
	<location>CA641212 JB March 9, 1978  3:24 PM</location>
	</document>
	<document id= '958'>
	<citations>
	<citation>958	5	958</citation>
	<citation>958	5	958</citation>
	<citation>958	5	958</citation>
	</citations>
	<title>A Case of too Much Precision</title>
	<conference>CACM December, 1964</conference>
	<authors>
	<author>Synge, M. J.</author>
	</authors>
	<location>CA641213 JB March 9, 1978  3:23 PM</location>
	</document>
	<document id= '957'>
	<citations>
	<citation>957	5	957</citation>
	<citation>957	5	957</citation>
	<citation>957	5	957</citation>
	</citations>
	<title>Method for Partial Rewriting of Magnetic Tape</title>
	<conference>CACM December, 1964</conference>
	<authors>
	<author>Miller, J. A.</author>
	</authors>
	<location>CA641214 JB March 9, 1978  3:18 PM</location>
	</document>
	<document id= '956'>
	<citations>
	<citation>956	5	956</citation>
	<citation>956	5	956</citation>
	<citation>956	5	956</citation>
	</citations>
	<title>A Family of Test Matrices</title>
	<conference>CACM December, 1964</conference>
	<authors>
	<author>Newbery, A. C. R.</author>
	</authors>
	<location>CA641215 JB March 9, 1978  3:17 PM</location>
	</document>
	<document id= '955'>
	<citations>
	<citation>955	5	955</citation>
	<citation>955	5	955</citation>
	<citation>955	5	955</citation>
	</citations>
	<title>A Class of Matrices to Test Inversion Procedures</title>
	<conference>CACM December, 1964</conference>
	<authors>
	<author>Cline, R. E.</author>
	</authors>
	<location>CA641216 JB March 9, 1978  3:16 PM</location>
	</document>
	<document id= '954'>
	<citations>
	<citation>954	5	954</citation>
	<citation>954	5	954</citation>
	<citation>954	5	954</citation>
	</citations>
	<title>A Note on the Calculation of Probabilities in an F-Distribution</title>
	<conference>CACM December, 1964</conference>
	<authors>
	<author>Smillie, K. W.</author>
	<author>Anstey, T. H.</author>
	</authors>
	<location>CA641217 JB March 9, 1978  3:14 PM</location>
	</document>
	<document id= '953'>
	<citations>
	<citation>953	5	953</citation>
	<citation>953	5	953</citation>
	<citation>953	5	953</citation>
	<citation>2870	5	953</citation>
	<citation>953	6	953</citation>
	<citation>2377	6	953</citation>
	<citation>2632	6	953</citation>
	</citations>
	<title>Scanning Text with a 1401</title>
	<conference>CACM December, 1964</conference>
	<authors>
	<author>Baker, J. J.</author>
	</authors>
	<location>CA641218 JB March 9, 1978  3:13 PM</location>
	</document>
	<document id= '952'>
	<citations>
	<citation>952	5	952</citation>
	<citation>952	5	952</citation>
	<citation>952	5	952</citation>
	</citations>
	<title>Another use of FORTRAN II Chaining</title>
	<conference>CACM December, 1964</conference>
	<authors>
	<author>Drath, D. G.</author>
	</authors>
	<location>CA641219 JB March 9, 1978  3:13 PM</location>
	</document>
	<document id= '951'>
	<title>Rational Chebyshev Approximations to the Bessel Function Integrals Kis(x)</title>
	<abstract>The second Remes algorithm is used to approximate the integrals Kis by rational functions.  The related coefficients for the approximations of Ki1, Ki2, Ki3 are given for different precisions.</abstract>
	<conference>CACM December, 1964</conference>
	<authors>
	<author>Gargantini, I.</author>
	<author>Pomentale, T.</author>
	</authors>
	<location>CA641220 JB March 9, 1978  3:12 PM</location>
	<citations>
	<citation>1015	4	951</citation>
	<citation>1346	4	951</citation>
	<citation>1440	4	951</citation>
	<citation>1645	4	951</citation>
	<citation>951	4	951</citation>
	<citation>951	5	951</citation>
	<citation>951	5	951</citation>
	<citation>951	5	951</citation>
	<citation>1346	5	951</citation>
	<citation>532	5	951</citation>
	<citation>951	6	951</citation>
	<citation>532	6	951</citation>
	</citations>
	</document>
	<document id= '950'>
	<title>Parallel Methods for Integrating Ordinary Differential Equations</title>
	<abstract>This paper is dedicated to the proposition that, in order to take full advantage for real-time  computations of highly parallel computers as can be expected to be available in the near future, much  of numerical analysis will have to be recast in a more "parallel" form.  By this is meant that serial  algorithms ought to be replaced by algorithm which consist of several subtasks which can be computed  without knowledge of the results of the other subtasks.  As an example, a method is proposed for "parallelizing"  the numerical integration of an ordinary differential equation, which process, by all standard methods,  is entirely serial.</abstract>
	<conference>CACM December, 1964</conference>
	<authors>
	<author>Nievergelt, J.</author>
	</authors>
	<location>CA641221 JB March 9, 1978  3:09 PM</location>
	<citations>
	<citation>950	5	950</citation>
	<citation>950	5	950</citation>
	<citation>950	5	950</citation>
	</citations>
	</document>
	<document id= '949'>
	<title>Integer and Signed Constants in ALGOL</title>
	<abstract>A few remarks are given on the relations between syntax and semantics in the programming languages.   The aim is to point out that, if it is true that the grammar of a context-free language should be conceived  not only as a strings-generating device but also as a method for expressing a meaning, then the grammar  of ALGOL is open to some criticism.</abstract>
	<conference>CACM December, 1964</conference>
	<authors>
	<author>Petrone, L.</author>
	<author>Vandoni, C. E.</author>
	</authors>
	<location>CA641222 JB March 9, 1978  2:35 PM</location>
	<citations>
	<citation>1086	4	949</citation>
	<citation>1102	4	949</citation>
	<citation>1132	4	949</citation>
	<citation>1142	4	949</citation>
	<citation>1234	4	949</citation>
	<citation>1263	4	949</citation>
	<citation>1265	4	949</citation>
	<citation>1270	4	949</citation>
	<citation>1323	4	949</citation>
	<citation>1358	4	949</citation>
	<citation>1379	4	949</citation>
	<citation>1380	4	949</citation>
	<citation>1453	4	949</citation>
	<citation>1464	4	949</citation>
	<citation>1484	4	949</citation>
	<citation>1491	4	949</citation>
	<citation>1498	4	949</citation>
	<citation>1613	4	949</citation>
	<citation>1614	4	949</citation>
	<citation>1781	4	949</citation>
	<citation>1781	4	949</citation>
	<citation>1781	4	949</citation>
	<citation>1825	4	949</citation>
	<citation>1860	4	949</citation>
	<citation>1945	4	949</citation>
	<citation>1945	4	949</citation>
	<citation>2083	4	949</citation>
	<citation>2178	4	949</citation>
	<citation>2179	4	949</citation>
	<citation>2252	4	949</citation>
	<citation>2325	4	949</citation>
	<citation>2341	4	949</citation>
	<citation>2546	4	949</citation>
	<citation>2645	4	949</citation>
	<citation>2652	4	949</citation>
	<citation>2684	4	949</citation>
	<citation>2842	4	949</citation>
	<citation>2929	4	949</citation>
	<citation>2934	4	949</citation>
	<citation>3069	4	949</citation>
	<citation>669	4	949</citation>
	<citation>679	4	949</citation>
	<citation>691	4	949</citation>
	<citation>761	4	949</citation>
	<citation>762	4	949</citation>
	<citation>949	4	949</citation>
	<citation>949	4	949</citation>
	<citation>949	4	949</citation>
	<citation>989	4	949</citation>
	<citation>949	5	949</citation>
	<citation>949	5	949</citation>
	<citation>949	5	949</citation>
	<citation>483	5	949</citation>
	<citation>584	5	949</citation>
	<citation>3184	5	949</citation>
	</citations>
	</document>
	<document id= '948'>
	<citations>
	<citation>1118	4	948</citation>
	<citation>826	4	948</citation>
	<citation>948	4	948</citation>
	<citation>942	5	948</citation>
	<citation>948	5	948</citation>
	<citation>948	5	948</citation>
	<citation>948	5	948</citation>
	</citations>
	<title>Note on the Use of Procedures</title>
	<conference>CACM December, 1964</conference>
	<authors>
	<author>Healy, M. J. R.</author>
	</authors>
	<location>CA641223 JB March 9, 1978  2:32 PM</location>
	</document>
	<document id= '947'>
	<citations>
	<citation>947	5	947</citation>
	<citation>947	5	947</citation>
	<citation>947	5	947</citation>
	<citation>761	5	947</citation>
	<citation>196	6	947</citation>
	<citation>947	6	947</citation>
	<citation>3184	6	947</citation>
	</citations>
	<title>Supplement to the ALGOL 60 Report</title>
	<conference>CACM January, 1963</conference>
	<authors>
	<author>Woodger, M.</author>
	</authors>
	<location>CA630101 JB March 14, 1978  3:05 PM</location>
	</document>
	<document id= '946'>
	<citations>
	<citation>946	5	946</citation>
	<citation>946	5	946</citation>
	<citation>946	5	946</citation>
	<citation>1949	5	946</citation>
	<citation>196	6	946</citation>
	<citation>946	6	946</citation>
	</citations>
	<title>Suggestions on ALGOL 60 (ROME) Issues - A Report by the American Standards Association Subcommittee X3.4.2</title>
	<conference>CACM January, 1963</conference>
	<authors>
	<author>Utman, R. E.</author>
	</authors>
	<location>CA630102 JB March 14, 1978  3:05 PM</location>
	</document>
	<document id= '945'>
	<citations>
	<citation>1046	4	945</citation>
	<citation>1105	4	945</citation>
	<citation>1139	4	945</citation>
	<citation>1140	4	945</citation>
	<citation>1234	4	945</citation>
	<citation>1263	4	945</citation>
	<citation>1265	4	945</citation>
	<citation>1496	4	945</citation>
	<citation>1781	4	945</citation>
	<citation>1824	4	945</citation>
	<citation>2126	4	945</citation>
	<citation>2546	4	945</citation>
	<citation>464	4	945</citation>
	<citation>584	4	945</citation>
	<citation>631	4	945</citation>
	<citation>653	4	945</citation>
	<citation>680	4	945</citation>
	<citation>763	4	945</citation>
	<citation>795	4	945</citation>
	<citation>799	4	945</citation>
	<citation>945	4	945</citation>
	<citation>945	5	945</citation>
	<citation>945	5	945</citation>
	<citation>945	5	945</citation>
	<citation>404	5	945</citation>
	<citation>799	5	945</citation>
	<citation>945	6	945</citation>
	<citation>399	6	945</citation>
	<citation>82	6	945</citation>
	<citation>404	6	945</citation>
	</citations>
	<title>Arithmetizing Declarations: An Application to COBOL</title>
	<conference>CACM January, 1963</conference>
	<authors>
	<author>Conway, M. E.</author>
	<author>Speroni, J.</author>
	</authors>
	<location>CA630103 JB March 14, 1978  3:03 PM</location>
	</document>
	<document id= '944'>
	<title>Storage and Search Properties of a Tree-Organized Memory System</title>
	<abstract>A memory with list properties [1] may be used to construct numeric, alphabetic or alphanumeric  trees.  Such trees have information storage and retrieval properties applicable to problems involving  large quantities of data or to problems where the quantity, word length and distribution of stored information  is not known a priori, or changes rapidly during the processing.  The purpose of this paper is to examine  the storage and search properties of a tree-organized storage system assuming that a memory possessing  certain list properties is available.  Of prime interest is the application where a symbol table, dictionary  or similar file is to be stored and searched.</abstract>
	<conference>CACM January, 1963</conference>
	<authors>
	<author>Scidmore, A. K.</author>
	<author>Weinberg, B. L.</author>
	</authors>
	<location>CA630104 JB March 14, 1978  3:02 PM</location>
	<citations>
	<citation>2846	4	944</citation>
	<citation>849	4	944</citation>
	<citation>944	4	944</citation>
	<citation>155	5	944</citation>
	<citation>944	5	944</citation>
	<citation>944	5	944</citation>
	<citation>944	5	944</citation>
	<citation>1234	5	944</citation>
	<citation>2451	5	944</citation>
	<citation>849	6	944</citation>
	<citation>944	6	944</citation>
	<citation>944	6	944</citation>
	<citation>1935	6	944</citation>
	<citation>1936	6	944</citation>
	<citation>321	6	944</citation>
	<citation>385	6	944</citation>
	<citation>400	6	944</citation>
	<citation>402	6	944</citation>
	<citation>404	6	944</citation>
	<citation>3184	6	944</citation>
	<citation>729	6	944</citation>
	</citations>
	</document>
	<document id= '943'>
	<citations>
	<citation>943	5	943</citation>
	<citation>943	5	943</citation>
	<citation>943	5	943</citation>
	</citations>
	<title>Terms Frequently Combined in Problem Description</title>
	<conference>CACM January, 1963</conference>
	<authors>
	<author>Grems, M.</author>
	</authors>
	<location>CA630105 JB March 14, 1978  2:56 PM</location>
	</document>
	<document id= '942'>
	<title>FORTRAN Subroutines for Time Series Analysis</title>
	<abstract>The authors have recently been concerned in a time-series study that constituted a fairly typical  piece of applied statistical research, involving extensive computations on a moderately large quantity  of data.  Wehave found that the many different numerical processes that were required could be built  up almost completely from a small number of basic operations, and a set of FORTRAN subroutines has been  written to perform these.  The main purpose of this note is to describe these subroutines, but since  the question of general statistical programs is topical [1], we include some general remarks.</abstract>
	<conference>CACM January, 1963</conference>
	<authors>
	<author>Healy, M. J. R.</author>
	<author>Bogert, B. P.</author>
	</authors>
	<location>CA630106 JB March 14, 1978  2:55 PM</location>
	<citations>
	<citation>942	5	942</citation>
	<citation>942	5	942</citation>
	<citation>942	5	942</citation>
	<citation>948	5	942</citation>
	<citation>1118	5	942</citation>
	<citation>826	5	942</citation>
	<citation>826	6	942</citation>
	<citation>942	6	942</citation>
	<citation>942	6	942</citation>
	<citation>942	6	942</citation>
	</citations>
	</document>
	<document id= '941'>
	<title>A Recursive Program for the General n-Dimensional Integral</title>
	<abstract>A general program is outlined for n-dimensional integration with variable limits.  The program  is of a recursive nature and uses Simpson's rule combined with repeated bisection to attain the required  accuracy.  It was developed in the Ferranti Mercury Autocode Scheme.</abstract>
	<conference>CACM January, 1963</conference>
	<authors>
	<author>Cadwell, J. H.</author>
	</authors>
	<location>CA630107 JB March 14, 1978  2:43 PM</location>
	<citations>
	<citation>941	5	941</citation>
	<citation>941	5	941</citation>
	<citation>941	5	941</citation>
	</citations>
	</document>
	<document id= '940'>
	<title>Generating Discrete Random Variables in a Computer</title>
	<abstract>This note is concerned with details of how to instruct a computer to choose one from many things  with assigned probabilities.  The method uses a uniform variable to direct the computer to a memory location;  if this is done by a sequence of appropriately chosen conditional probabilities, efficient use of memory  space and quite fast programs will result.</abstract>
	<conference>CACM January, 1963</conference>
	<authors>
	<author>Marsaglia, G.</author>
	</authors>
	<location>CA630108 JB March 14, 1978  2:40 PM</location>
	<citations>
	<citation>940	5	940</citation>
	<citation>940	5	940</citation>
	<citation>940	5	940</citation>
	<citation>1073	5	940</citation>
	<citation>1153	5	940</citation>
	<citation>940	6	940</citation>
	<citation>940	6	940</citation>
	<citation>1153	6	940</citation>
	</citations>
	</document>
	<document id= '939'>
	<citations>
	<citation>939	5	939</citation>
	<citation>939	5	939</citation>
	<citation>939	5	939</citation>
	</citations>
	<title>Gamma Function (Algorithm 31)</title>
	<conference>CACM January, 1963</conference>
	<authors>
	<author>Behrenz, P. G.</author>
	</authors>
	<location>CA630109 JB March 14, 1978  2:37 PM</location>
	</document>
	<document id= '938'>
	<citations>
	<citation>938	5	938</citation>
	<citation>938	5	938</citation>
	<citation>938	5	938</citation>
	</citations>
	<title>Invert (Algorithm 42)</title>
	<conference>CACM January, 1963</conference>
	<authors>
	<author>Naur, P.</author>
	</authors>
	<location>CA630110 JB March 14,1978  2:36 PM</location>
	</document>
	<document id= '937'>
	<citations>
	<citation>937	5	937</citation>
	<citation>937	5	937</citation>
	<citation>937	5	937</citation>
	</citations>
	<title>Inverse of a Finite Segment of the Hilbert Matrix (Algorithm 50)</title>
	<conference>CACM January, 1963</conference>
	<authors>
	<author>Naur, P.</author>
	</authors>
	<location>CA630111 JB March 14, 1978  2:36 PM</location>
	</document>
	<document id= '936'>
	<citations>
	<citation>936	5	936</citation>
	<citation>936	5	936</citation>
	<citation>936	5	936</citation>
	</citations>
	<title>A Set of Test Matrices (Algorithm 52)</title>
	<conference>CACM January, 1963</conference>
	<authors>
	<author>Naur, P.</author>
	</authors>
	<location>CA630112 JB March 14, 1978  2:35 PM</location>
	</document>
	<document id= '935'>
	<citations>
	<citation>935	5	935</citation>
	<citation>935	5	935</citation>
	<citation>935	5	935</citation>
	</citations>
	<title>Calculating Primes by Means of GPS (Algorithm)</title>
	<conference>CACM January, 1963</conference>
	<authors>
	<author>Naur, P.</author>
	</authors>
	<location>CA630113 JB March 14, 1978  2:33 PM</location>
	</document>
	<document id= '934'>
	<citations>
	<citation>934	5	934</citation>
	<citation>934	5	934</citation>
	<citation>934	5	934</citation>
	</citations>
	<title>Gauss's Method (Algorithm 107)</title>
	<conference>CACM January, 1963</conference>
	<authors>
	<author>Naur, P.</author>
	</authors>
	<location>CA630114 JB March 14, 1978  2:32 PM</location>
	</document>
	<document id= '933'>
	<citations>
	<citation>933	5	933</citation>
	<citation>933	5	933</citation>
	<citation>933	5	933</citation>
	</citations>
	<title>Magic Squares (Algorithm 117 &amp; 118)</title>
	<conference>CACM January, 1963</conference>
	<authors>
	<author>Naur, P.</author>
	</authors>
	<location>CA630115 JB March 14, 1978  2:31 PM</location>
	</document>
	<document id= '932'>
	<citations>
	<citation>932	5	932</citation>
	<citation>932	5	932</citation>
	<citation>932	5	932</citation>
	<citation>806	5	932</citation>
	<citation>932	6	932</citation>
	<citation>454	6	932</citation>
	</citations>
	<title>Matrix Inversion by Gauss-Jordan Inversion II (Algorithm 120)</title>
	<conference>CACM January, 1963</conference>
	<authors>
	<author>Naur, P.</author>
	</authors>
	<location>CA630116 JB March 14, 1978  2:27 PM</location>
	</document>
	<document id= '931'>
	<citations>
	<citation>1324	4	931</citation>
	<citation>931	4	931</citation>
	<citation>931	4	931</citation>
	<citation>931	4	931</citation>
	<citation>931	5	931</citation>
	<citation>931	5	931</citation>
	<citation>931	5	931</citation>
	<citation>202	5	931</citation>
	<citation>396	5	931</citation>
	<citation>2616	5	931</citation>
	<citation>634	5	931</citation>
	<citation>795	5	931</citation>
	<citation>931	6	931</citation>
	<citation>931	6	931</citation>
	<citation>1548	6	931</citation>
	<citation>1684	6	931</citation>
	<citation>2517	6	931</citation>
	<citation>404	6	931</citation>
	</citations>
	<title>Systematic Mistake Analysis of Digital Computer Programs</title>
	<conference>CACM February, 1963</conference>
	<authors>
	<author>Miller, J. C.</author>
	<author>Maloney, C. J.</author>
	</authors>
	<location>CA630202 JB March 14, 1978  2:23 PM</location>
	</document>
	<document id= '930'>
	<citations>
	<citation>930	5	930</citation>
	<citation>930	5	930</citation>
	<citation>930	5	930</citation>
	</citations>
	<title>Decimal-to-Binary Conversion of Short Fields</title>
	<conference>CACM February, 1963</conference>
	<authors>
	<author>Yarbrough, L. D.</author>
	</authors>
	<location>CA630203 JB March 14, 1978  2:22 PM</location>
	</document>
	<document id= '929'>
	<citations>
	<citation>929	4	929</citation>
	<citation>929	5	929</citation>
	<citation>929	5	929</citation>
	<citation>929	5	929</citation>
	<citation>397	5	929</citation>
	<citation>690	5	929</citation>
	<citation>890	6	929</citation>
	<citation>929	6	929</citation>
	<citation>3195	6	929</citation>
	</citations>
	<title>Glossary Construction</title>
	<conference>CACM February, 1963</conference>
	<authors>
	<author>Grems, M.</author>
	</authors>
	<location>CA630204 JB March 14, 1978  2:21 PM</location>
	</document>
	<document id= '928'>
	<citations>
	<citation>928	5	928</citation>
	<citation>928	5	928</citation>
	<citation>928	5	928</citation>
	</citations>
	<title>Character Manipulation in FORTRAN</title>
	<conference>CACM February, 1963</conference>
	<authors>
	<author>Lewis, T. S.</author>
	</authors>
	<location>CA630205 JB March 14, 1978  2:20 PM</location>
	</document>
	<document id= '927'>
	<citations>
	<citation>927	5	927</citation>
	<citation>927	5	927</citation>
	<citation>927	5	927</citation>
	</citations>
	<title>Linear Programming Applied to Ultraviolet Absorption Spectroscopy</title>
	<conference>CACM February, 1963</conference>
	<authors>
	<author>White, W. C.</author>
	<author>Shapiro, B.</author>
	<author>Pratt, A. W.</author>
	</authors>
	<location>CA630206 JB March 14, 1978  2:19 PM</location>
	</document>
	<document id= '926'>
	<citations>
	<citation>926	5	926</citation>
	<citation>926	5	926</citation>
	<citation>926	5	926</citation>
	</citations>
	<title>Syminv2 (Algorithm 150)</title>
	<conference>CACM February, 1963</conference>
	<authors>
	<author>Rutishauser, H.</author>
	</authors>
	<location>CA630207 JB March 14, 1978  2:18 PM</location>
	</document>
	<document id= '925'>
	<citations>
	<citation>925	5	925</citation>
	<citation>925	5	925</citation>
	<citation>925	5	925</citation>
	</citations>
	<title>Location of a Vector in a Lexicographically Ordered ListAlgorithm 151)</title>
	<conference>CACM February, 1963</conference>
	<authors>
	<author>Walter, H. F.</author>
	</authors>
	<location>CA630208 JB March 14, 1978  2:17 PM</location>
	</document>
	<document id= '924'>
	<citations>
	<citation>924	5	924</citation>
	<citation>924	5	924</citation>
	<citation>924	5	924</citation>
	</citations>
	<title>Nexcom (Algorithm 152)</title>
	<conference>CACM February, 1963</conference>
	<authors>
	<author>Hopley, J.</author>
	</authors>
	<location>CA630209 JB March 14, 1978  2:12 PM</location>
	</document>
	<document id= '923'>
	<citations>
	<citation>923	5	923</citation>
	<citation>923	5	923</citation>
	<citation>923	5	923</citation>
	</citations>
	<title>Gomory (Algorithm 153)</title>
	<conference>CACM February, 1963</conference>
	<authors>
	<author>Bauer, F. L.</author>
	</authors>
	<location>CA630210 JB March 14, 1978  2:12 PM</location>
	</document>
	<document id= '922'>
	<citations>
	<citation>922	5	922</citation>
	<citation>922	5	922</citation>
	<citation>922	5	922</citation>
	</citations>
	<title>Multint (Algorithm 32)</title>
	<conference>CACM February, 1963</conference>
	<authors>
	</authors>
	<location>CA630211JB March 14, 1978  2:10 PM</location>
	</document>
	<document id= '921'>
	<citations>
	<citation>921	5	921</citation>
	<citation>921	5	921</citation>
	<citation>921	5	921</citation>
	</citations>
	<title>Incomplete Elliptic Integrals (Algorithm 73)</title>
	<conference>CACM February, 1963</conference>
	<authors>
	<author>Meyer, N. A.</author>
	</authors>
	<location>CA630212 JB March 14, 1978  2:03 PM</location>
	</document>
	<document id= '920'>
	<citations>
	<citation>920	5	920</citation>
	<citation>920	5	920</citation>
	<citation>920	5	920</citation>
	<citation>728	5	920</citation>
	<citation>920	6	920</citation>
	<citation>45	6	920</citation>
	</citations>
	<title>Toward Better Documentation of Programming Languages</title>
	<conference>CACM March, 1963</conference>
	<authors>
	<author>Yngve, V. H.</author>
	<author>Sammet, J. E.</author>
	</authors>
	<location>CA630301 JB March 14, 1978  1:51 PM</location>
	</document>
	<document id= '919'>
	<citations>
	<citation>249	4	919</citation>
	<citation>254	4	919</citation>
	<citation>272	4	919</citation>
	<citation>1102	4	919</citation>
	<citation>1109	4	919</citation>
	<citation>1140	4	919</citation>
	<citation>1188	4	919</citation>
	<citation>1306	4	919</citation>
	<citation>1464	4	919</citation>
	<citation>1491	4	919</citation>
	<citation>1767	4	919</citation>
	<citation>1781	4	919</citation>
	<citation>1787	4	919</citation>
	<citation>1949	4	919</citation>
	<citation>321	4	919</citation>
	<citation>2059	4	919</citation>
	<citation>2126	4	919</citation>
	<citation>435	4	919</citation>
	<citation>437	4	919</citation>
	<citation>463	4	919</citation>
	<citation>483	4	919</citation>
	<citation>491	4	919</citation>
	<citation>2732	4	919</citation>
	<citation>560	4	919</citation>
	<citation>583	4	919</citation>
	<citation>3073	4	919</citation>
	<citation>627	4	919</citation>
	<citation>631	4	919</citation>
	<citation>632	4	919</citation>
	<citation>642	4	919</citation>
	<citation>644	4	919</citation>
	<citation>653	4	919</citation>
	<citation>680	4	919</citation>
	<citation>761	4	919</citation>
	<citation>762	4	919</citation>
	<citation>763	4	919</citation>
	<citation>123	4	919</citation>
	<citation>140	4	919</citation>
	<citation>919	4	919</citation>
	<citation>989	4	919</citation>
	<citation>196	5	919</citation>
	<citation>919	5	919</citation>
	<citation>919	5	919</citation>
	<citation>919	5	919</citation>
	<citation>1781	5	919</citation>
	<citation>123	6	919</citation>
	<citation>196	6	919</citation>
	<citation>919	6	919</citation>
	<citation>990	6	919</citation>
	<citation>1007	6	919</citation>
	<citation>1046	6	919</citation>
	<citation>1131	6	919</citation>
	<citation>1139	6	919</citation>
	<citation>1140	6	919</citation>
	<citation>1149	6	919</citation>
	<citation>1198	6	919</citation>
	<citation>1215	6	919</citation>
	<citation>1223	6	919</citation>
	<citation>1265	6	919</citation>
	<citation>1303	6	919</citation>
	<citation>1323	6	919</citation>
	<citation>1358	6	919</citation>
	<citation>1366	6	919</citation>
	<citation>1421	6	919</citation>
	<citation>1460	6	919</citation>
	<citation>1462	6	919</citation>
	<citation>1463	6	919</citation>
	<citation>1467	6	919</citation>
	<citation>1468	6	919</citation>
	<citation>1477	6	919</citation>
	<citation>1491	6	919</citation>
	<citation>1496	6	919</citation>
	<citation>1531	6	919</citation>
	<citation>1535	6	919</citation>
	<citation>1565	6	919</citation>
	<citation>1601	6	919</citation>
	<citation>1602	6	919</citation>
	<citation>1613	6	919</citation>
	<citation>1614	6	919</citation>
	<citation>1626	6	919</citation>
	<citation>1641	6	919</citation>
	<citation>1787	6	919</citation>
	<citation>1788	6	919</citation>
	<citation>205	6	919</citation>
	<citation>224	6	919</citation>
	<citation>249	6	919</citation>
	<citation>288	6	919</citation>
	<citation>316	6	919</citation>
	<citation>381	6	919</citation>
	<citation>398	6	919</citation>
	<citation>11	6	919</citation>
	<citation>404	6	919</citation>
	<citation>410	6	919</citation>
	<citation>463	6	919</citation>
	<citation>464	6	919</citation>
	<citation>483	6	919</citation>
	<citation>3184	6	919</citation>
	<citation>3188	6	919</citation>
	<citation>584	6	919</citation>
	<citation>600	6	919</citation>
	<citation>680	6	919</citation>
	<citation>691	6	919</citation>
	<citation>763	6	919</citation>
	<citation>799	6	919</citation>
	</citations>
	<title>Documentation Problems: ALGOL 60</title>
	<conference>CACM March, 1963</conference>
	<authors>
	<author>Naur, P.</author>
	</authors>
	<location>CA630302 JB March 14, 1978  1:50 PM</location>
	</document>
	<document id= '918'>
	<citations>
	<citation>918	5	918</citation>
	<citation>918	5	918</citation>
	<citation>918	5	918</citation>
	</citations>
	<title>COBOL</title>
	<conference>CACM March, 1963</conference>
	<authors>
	<author>Cunningham, J. F.</author>
	</authors>
	<location>CA630303 JB March 27, 1978  9:22 PM</location>
	</document>
	<document id= '917'>
	<citations>
	<citation>917	5	917</citation>
	<citation>917	5	917</citation>
	<citation>917	5	917</citation>
	<citation>1068	5	917</citation>
	<citation>1945	5	917</citation>
	<citation>823	6	917</citation>
	<citation>914	6	917</citation>
	<citation>915	6	917</citation>
	<citation>917	6	917</citation>
	<citation>917	6	917</citation>
	<citation>984	6	917</citation>
	<citation>989	6	917</citation>
	<citation>990	6	917</citation>
	<citation>1012	6	917</citation>
	<citation>1084	6	917</citation>
	<citation>1098	6	917</citation>
	<citation>1122	6	917</citation>
	<citation>1138	6	917</citation>
	<citation>1139	6	917</citation>
	<citation>1141	6	917</citation>
	<citation>1200	6	917</citation>
	<citation>1223	6	917</citation>
	<citation>1265	6	917</citation>
	<citation>1336	6	917</citation>
	<citation>1396	6	917</citation>
	<citation>1455	6	917</citation>
	<citation>1477	6	917</citation>
	<citation>1487	6	917</citation>
	<citation>1491	6	917</citation>
	<citation>1496	6	917</citation>
	<citation>483	6	917</citation>
	<citation>584	6	917</citation>
	<citation>669	6	917</citation>
	<citation>680	6	917</citation>
	<citation>763	6	917</citation>
	</citations>
	<title>COMIT</title>
	<conference>CACM March, 1963</conference>
	<authors>
	<author>Yngve, V. H.</author>
	</authors>
	<location>CA630304 JB March 14, 1978  1:48 PM</location>
	</document>
	<document id= '916'>
	<citations>
	<citation>916	5	916</citation>
	<citation>916	5	916</citation>
	<citation>916	5	916</citation>
	</citations>
	<title>FORTRAN</title>
	<conference>CACM March, 1963</conference>
	<authors>
	<author>Heising, W. P.</author>
	</authors>
	<location>CA630305 JB March 14, 1978  1:47 PM</location>
	</document>
	<document id= '915'>
	<citations>
	<citation>915	5	915</citation>
	<citation>915	5	915</citation>
	<citation>915	5	915</citation>
	<citation>1945	5	915</citation>
	<citation>823	6	915</citation>
	<citation>914	6	915</citation>
	<citation>915	6	915</citation>
	<citation>917	6	915</citation>
	<citation>984	6	915</citation>
	<citation>989	6	915</citation>
	<citation>990	6	915</citation>
	<citation>1012	6	915</citation>
	<citation>1084	6	915</citation>
	<citation>1098	6	915</citation>
	<citation>1122	6	915</citation>
	<citation>1138	6	915</citation>
	<citation>1139	6	915</citation>
	<citation>1141	6	915</citation>
	<citation>1200	6	915</citation>
	<citation>1223	6	915</citation>
	<citation>1265	6	915</citation>
	<citation>1336	6	915</citation>
	<citation>1396	6	915</citation>
	<citation>1455	6	915</citation>
	<citation>1477	6	915</citation>
	<citation>1487	6	915</citation>
	<citation>1491	6	915</citation>
	<citation>1496	6	915</citation>
	<citation>483	6	915</citation>
	<citation>584	6	915</citation>
	<citation>669	6	915</citation>
	<citation>680	6	915</citation>
	<citation>763	6	915</citation>
	</citations>
	<title>Documentation of IPL-V</title>
	<conference>CACM March, 1963</conference>
	<authors>
	<author>Newell, A.</author>
	</authors>
	<location>CA630306 JB March 14, 1978  1:46 PM</location>
	</document>
	<document id= '914'>
	<citations>
	<citation>914	5	914</citation>
	<citation>914	5	914</citation>
	<citation>914	5	914</citation>
	<citation>1945	5	914</citation>
	<citation>823	6	914</citation>
	<citation>914	6	914</citation>
	<citation>915	6	914</citation>
	<citation>917	6	914</citation>
	<citation>984	6	914</citation>
	<citation>989	6	914</citation>
	<citation>990	6	914</citation>
	<citation>1012	6	914</citation>
	<citation>1084	6	914</citation>
	<citation>1098	6	914</citation>
	<citation>1122	6	914</citation>
	<citation>1138	6	914</citation>
	<citation>1139	6	914</citation>
	<citation>1141	6	914</citation>
	<citation>1200	6	914</citation>
	<citation>1223	6	914</citation>
	<citation>1265	6	914</citation>
	<citation>1336	6	914</citation>
	<citation>1396	6	914</citation>
	<citation>1455	6	914</citation>
	<citation>1477	6	914</citation>
	<citation>1487	6	914</citation>
	<citation>1491	6	914</citation>
	<citation>1496	6	914</citation>
	<citation>483	6	914</citation>
	<citation>584	6	914</citation>
	<citation>669	6	914</citation>
	<citation>680	6	914</citation>
	<citation>763	6	914</citation>
	</citations>
	<title>Jovial and Its Documentation</title>
	<conference>CACM March, 1963</conference>
	<authors>
	<author>Shaw, C. J.</author>
	</authors>
	<location>CA630307 JB March 14, 1978  1:46 PM</location>
	</document>
	<document id= '913'>
	<citations>
	<citation>913	5	913</citation>
	<citation>913	5	913</citation>
	<citation>913	5	913</citation>
	</citations>
	<title>Neliac</title>
	<conference>CACM March, 1963</conference>
	<authors>
	<author>Halstead, M. H.</author>
	</authors>
	<location>CA630308 JB March 14, 1978  1:45 PM</location>
	</document>
	<document id= '912'>
	<citations>
	<citation>912	5	912</citation>
	<citation>912	5	912</citation>
	<citation>912	5	912</citation>
	<citation>1014	5	912</citation>
	<citation>912	6	912</citation>
	</citations>
	<title>Addressing an Array Yi in k-Dimensions by Fortran for Analysis of Variance</title>
	<conference>CACM March, 1963</conference>
	<authors>
	<author>Garber, M. J.</author>
	</authors>
	<location>CA630309 JB March 14, 1978  1:44 PM</location>
	</document>
	<document id= '911'>
	<citations>
	<citation>1271	4	911</citation>
	<citation>1785	4	911</citation>
	<citation>1785	4	911</citation>
	<citation>2203	4	911</citation>
	<citation>2543	4	911</citation>
	<citation>2552	4	911</citation>
	<citation>2860	4	911</citation>
	<citation>911	4	911</citation>
	<citation>911	4	911</citation>
	<citation>911	5	911</citation>
	<citation>911	5	911</citation>
	<citation>911	5	911</citation>
	<citation>1785	5	911</citation>
	<citation>332	5	911</citation>
	<citation>2203	5	911</citation>
	<citation>2552	5	911</citation>
	<citation>492	5	911</citation>
	<citation>911	6	911</citation>
	<citation>911	6	911</citation>
	<citation>911	6	911</citation>
	<citation>1785	6	911</citation>
	<citation>1785	6	911</citation>
	<citation>1786	6	911</citation>
	<citation>332	6	911</citation>
	<citation>332	6	911</citation>
	<citation>2107	6	911</citation>
	<citation>2109	6	911</citation>
	<citation>2203	6	911</citation>
	<citation>492	6	911</citation>
	<citation>492	6	911</citation>
	</citations>
	<title>A Variant Method of File Searching</title>
	<conference>CACM March, 1963</conference>
	<authors>
	<author>McIlroy, M. D.</author>
	</authors>
	<location>CA630310 JB March 14, 1978  1:42 PM</location>
	</document>
	<document id= '910'>
	<citations>
	<citation>910	5	910</citation>
	<citation>910	5	910</citation>
	<citation>910	5	910</citation>
	</citations>
	<title>Selective Instruction Trap for the 7090</title>
	<conference>CACM March, 1963</conference>
	<authors>
	<author>Mayer, R. J.</author>
	</authors>
	<location>CA630311 JB March 14, 1978  1:41 PM</location>
	</document>
	<document id= '909'>
	<citations>
	<citation>909	5	909</citation>
	<citation>909	5	909</citation>
	<citation>909	5	909</citation>
	<citation>1963	5	909</citation>
	<citation>909	6	909</citation>
	<citation>475	6	909</citation>
	<citation>750	6	909</citation>
	</citations>
	<title>Arithmetizing Declarations (Corrigendum)</title>
	<conference>CACM March, 1963</conference>
	<authors>
	<author>Conway, M. E.</author>
	<author>Speroni, J.</author>
	</authors>
	<location>CA630312b JB March 14, 1978  1:40 PM</location>
	</document>
	<document id= '908'>
	<citations>
	<citation>908	5	908</citation>
	<citation>908	5	908</citation>
	<citation>908	5	908</citation>
	</citations>
	<title>Test Matrix for Inversion</title>
	<conference>CACM March, 1963</conference>
	<authors>
	<author>LaSor, W. S.</author>
	</authors>
	<location>CA630312a JB March 14, 1978  1:38 PM</location>
	</document>
	<document id= '907'>
	<citations>
	<citation>907	5	907</citation>
	<citation>907	5	907</citation>
	<citation>907	5	907</citation>
	<citation>3115	5	907</citation>
	<citation>907	6	907</citation>
	<citation>2045	6	907</citation>
	<citation>2417	6	907</citation>
	<citation>2466	6	907</citation>
	<citation>2884	6	907</citation>
	<citation>579	6	907</citation>
	<citation>785	6	907</citation>
	</citations>
	<title>Combination in Lexicographical Order (Algorithm 154)</title>
	<conference>CACM March, 1963</conference>
	<authors>
	<author>Mifsud, C. J.</author>
	</authors>
	<location>CA630313 JB March 14, 1978  1:34 PM</location>
	</document>
	<document id= '906'>
	<citations>
	<citation>906	5	906</citation>
	<citation>906	5	906</citation>
	<citation>906	5	906</citation>
	</citations>
	<title>Combination in any Order (Algorithm 155)</title>
	<conference>CACM March, 1963</conference>
	<authors>
	<author>Mifsud, C. J.</author>
	</authors>
	<location>CA630314 JB March 14, 1978  1:33 PM</location>
	</document>
	<document id= '905'>
	<citations>
	<citation>905	5	905</citation>
	<citation>905	5	905</citation>
	<citation>905	5	905</citation>
	</citations>
	<title>Algebra of Sets (Algorithm 156)</title>
	<conference>CACM March, 1963</conference>
	<authors>
	<author>Mifsud, C. J.</author>
	</authors>
	<location>CA630315 JB March 14, 1978  1:32 PM</location>
	</document>
	<document id= '904'>
	<citations>
	<citation>904	5	904</citation>
	<citation>904	5	904</citation>
	<citation>904	5	904</citation>
	</citations>
	<title>Fourier Series Approximation (Algorithm 157)</title>
	<conference>CACM March, 1963</conference>
	<authors>
	<author>Mifsud, C. J.</author>
	</authors>
	<location>CA630316 JB March 14, 1978  1:31 PM</location>
	</document>
	<document id= '903'>
	<citations>
	<citation>903	5	903</citation>
	<citation>903	5	903</citation>
	<citation>903	5	903</citation>
	</citations>
	<title>Exponentiation of Series (Algorithm 134 )</title>
	<conference>CACM March, 1963</conference>
	<authors>
	<author>Fettis, H. E.</author>
	</authors>
	<location>CA630317 JB March 14, 1978  1:29 PM</location>
	</document>
	<document id= '902'>
	<citations>
	<citation>902	5	902</citation>
	<citation>902	5	902</citation>
	<citation>902	5	902</citation>
	<citation>1946	5	902</citation>
	<citation>878	6	902</citation>
	<citation>902	6	902</citation>
	<citation>1093	6	902</citation>
	<citation>1177	6	902</citation>
	<citation>1387	6	902</citation>
	<citation>1393	6	902</citation>
	<citation>360	6	902</citation>
	<citation>731	6	902</citation>
	</citations>
	<title>Determinant (Algorithm 159)</title>
	<conference>CACM March, 1963</conference>
	<authors>
	<author>Digby, D. W.</author>
	</authors>
	<location>CA630318 JB March 14, 1978  1:28 PM</location>
	</document>
	<document id= '901'>
	<citations>
	<citation>901	5	901</citation>
	<citation>901	5	901</citation>
	<citation>901	5	901</citation>
	</citations>
	<title>Difference Expression Coefficients (Algorithm 79)</title>
	<conference>CACM March, 1963</conference>
	<authors>
	<author>Clark, E. S.</author>
	</authors>
	<location>CA630319 JB March 14, 1978  1:24 PM</location>
	</document>
	<document id= '900'>
	<citations>
	<citation>900	5	900</citation>
	<citation>900	5	900</citation>
	<citation>900	5	900</citation>
	</citations>
	<title>Ancestor (Algorithm 79)</title>
	<conference>CACM March, 1963</conference>
	<authors>
	</authors>
	<location>CA630320 JB March 14, 1978  1:23 PM</location>
	</document>
	<document id= '899'>
	<citations>
	<citation>899	5	899</citation>
	<citation>899	5	899</citation>
	<citation>899	5	899</citation>
	</citations>
	<title>Magic Square (Algorithm 117 &amp; 118)</title>
	<conference>CACM March, 1963</conference>
	<authors>
	<author>Bosworth, K. M.</author>
	</authors>
	<location>CA630321 JB March 14, 1978  1:02 PM</location>
	</document>
	<document id= '898'>
	<citations>
	<citation>898	5	898</citation>
	<citation>898	5	898</citation>
	<citation>898	5	898</citation>
	</citations>
	<title>Random (Algorithm 133)</title>
	<conference>CACM March, 1963</conference>
	<authors>
	<author>Laughlin, D. L.</author>
	</authors>
	<location>CA630322 JB March 14, 1978  1:01 PM</location>
	</document>
	<document id= '897'>
	<citations>
	<citation>897	5	897</citation>
	<citation>897	5	897</citation>
	<citation>897	5	897</citation>
	</citations>
	<title>Note on the Proof of the Non-existence of a Phrase Structure Grammar for ALGOL 60</title>
	<conference>CACM March, 1963</conference>
	<authors>
	<author>Brown, P. J.</author>
	</authors>
	<location>CA630323 JB March 14, 1978  1:00 PM</location>
	</document>
	<document id= '896'>
	<citations>
	<citation>896	5	896</citation>
	<citation>896	5	896</citation>
	<citation>896	5	896</citation>
	</citations>
	<title>Characteristic Values and Vectors of Defective Matrices</title>
	<conference>CACM March, 1963</conference>
	<authors>
	<author>Thompson, G. T.</author>
	</authors>
	<location>CA630324 JB March 14, 1978  12:58 PM</location>
	</document>
	<document id= '895'>
	<title>A Computational Extension of the Variate Difference Method</title>
	<abstract>Presented here is a computational extension of the variate difference method as developed by  G. Tintner [1].</abstract>
	<conference>CACM March, 1963</conference>
	<authors>
	<author>Scheinok, P. A.</author>
	</authors>
	<location>CA630325 JB March 14, 1978  12:57 PM</location>
	<citations>
	<citation>895	5	895</citation>
	<citation>895	5	895</citation>
	<citation>895	5	895</citation>
	</citations>
	</document>
	<document id= '894'>
	<title>An Iterative Factorization Technique for Polynomials</title>
	<abstract>An iterative technique is displayed whereby factors of arbitrary degree can be found for polynomials  in one variable.  Convergence is shown to occur always if a certain Jacobian does not vanish and if the  initial approximation to a factor is near enough to an actual factor.  The process is simply programmed,  and preliminary results indicate it to be well adapted to use with digital computers.  For factors of  degree two, the technique is similar to that of Bairstow, the present method being somewhat simpler.</abstract>
	<conference>CACM March, 1963</conference>
	<authors>
	<author>Luther, H. A.</author>
	</authors>
	<location>CA630326 JB March 14, 1978  12:51 PM</location>
	<citations>
	<citation>1111	5	894</citation>
	<citation>894	5	894</citation>
	<citation>894	5	894</citation>
	<citation>894	5	894</citation>
	<citation>894	6	894</citation>
	</citations>
	</document>
	<document id= '893'>
	<title>Significance Arithmetic on a Digital Computer</title>
	<abstract>The 7090 at NYU has been modified to include a "Significance Mode" of operation which is intended  to facilitate the identification of significant bits in the results of floating-point arithmetic operations.   The manner in which floating-point arithmetic is handled in this mode is discussed.  Several numerical  experiments using this mode are described and comparisons are made with the ordinary "normalized mode."   Examples include power series evaluation, linear equations solution, determinant evaluation and matrix  inversion.</abstract>
	<conference>CACM March, 1963</conference>
	<authors>
	<author>Goldstein, M.</author>
	</authors>
	<location>CA630327 JB March 14, 1978  12:47 PM</location>
	<citations>
	<citation>3131	5	893</citation>
	<citation>893	5	893</citation>
	<citation>893	5	893</citation>
	<citation>893	5	893</citation>
	<citation>893	6	893</citation>
	<citation>1148	6	893</citation>
	</citations>
	</document>
	<document id= '892'>
	<title>RECOL-A Retrieval Command Language</title>
	<abstract>An interrogation scheme is described for the retrieval and manipulation of data file records.   The language of the interrogation scheme allows for selecting file records with the are of logical condition  statements, defining record classes, associating file records, editing printed output, and summarizing  the results of the above operations.  Some examples of a typical file application and the more significant  features of a particular machine implementation are given.</abstract>
	<conference>CACM March, 1963</conference>
	<authors>
	<author>Climenson, W. D.</author>
	</authors>
	<location>CA630328 JB March 14, 1978  12:42 PM</location>
	<citations>
	<citation>1309	4	892</citation>
	<citation>1324	4	892</citation>
	<citation>892	4	892</citation>
	<citation>892	4	892</citation>
	<citation>653	5	892</citation>
	<citation>656	5	892</citation>
	<citation>892	5	892</citation>
	<citation>892	5	892</citation>
	<citation>892	5	892</citation>
	</citations>
	</document>
	<document id= '891'>
	<title>Everyman's Information Retrieval System</title>
	<abstract>The information retrieval problem whose solution is presented here was posed by a technical  library with limited bubget and personnel.  The solution, however, is quite general and is applicable  to many different types of retrieval problems.  Further,the method of solution makes it possible for  many groups who have previously dismissed an information retrieval program as expensive and difficult  (from a programming stand-point) to reconsider their position, for the present solution makes it possible  to install an information retrieval program in less than three months, and with relatively little equipment.</abstract>
	<conference>CACM March, 1963</conference>
	<authors>
	<author>Whitley, V. W.</author>
	</authors>
	<location>CA630329 JB March 14, 1978  12:37 PM</location>
	<citations>
	<citation>891	5	891</citation>
	<citation>891	5	891</citation>
	<citation>891	5	891</citation>
	</citations>
	</document>
	<document id= '890'>
	<title>Selected Definitions</title>
	<abstract>A selection of the definitions prepared by the ACM Standards Committee's Subcommittee on Programming  Terminology is presented for review by the ACM membership.</abstract>
	<conference>CACM April, 1963</conference>
	<authors>
	<author>Fritz, W. B.</author>
	</authors>
	<location>CA630401 JB March 14, 1978  12:32 PM</location>
	<citations>
	<citation>690	5	890</citation>
	<citation>890	5	890</citation>
	<citation>890	5	890</citation>
	<citation>890	5	890</citation>
	<citation>890	6	890</citation>
	<citation>929	6	890</citation>
	<citation>3195	6	890</citation>
	</citations>
	</document>
	<document id= '889'>
	<citations>
	<citation>889	5	889</citation>
	<citation>889	5	889</citation>
	<citation>889	5	889</citation>
	</citations>
	<title>Official Actions and Responses to ALGOL As a Programming Language</title>
	<conference>CACM April, 1963</conference>
	<location>CA630402 JB March 14, 1978  12:30 PM</location>
	</document>
	<document id= '888'>
	<citations>
	<citation>2590	5	888</citation>
	<citation>888	5	888</citation>
	<citation>888	5	888</citation>
	<citation>888	5	888</citation>
	<citation>888	6	888</citation>
	</citations>
	<title>Algorithm 160 Combinatorial of M Things Taken N at A Time</title>
	<conference>CACM April, 1963</conference>
	<authors>
	<author>Wolfson, M. L.</author>
	<author>Wright, H. V.</author>
	</authors>
	<location>CA630403 JB March 14, 1978  12:29 PM</location>
	</document>
	<document id= '887'>
	<citations>
	<citation>887	5	887</citation>
	<citation>887	5	887</citation>
	<citation>887	5	887</citation>
	</citations>
	<title>Combinatorial of M Things Taken One at a Time, Two at a Time, Up to N at a Time (Algorithm 161)</title>
	<conference>CACM April, 1963</conference>
	<authors>
	<author>Wright, H. V.</author>
	<author>Wolfson, M. L.</author>
	</authors>
	<location>CA630404 JB March 14, 1978  12:28 PM</location>
	</document>
	<document id= '886'>
	<citations>
	<citation>886	5	886</citation>
	<citation>886	5	886</citation>
	<citation>886	5	886</citation>
	</citations>
	<title>XY-move Plotting (Algorithm 162)</title>
	<conference>CACM April, 1963</conference>
	<authors>
	<author>Stockton, F. G.</author>
	</authors>
	<location>CA630405 JB March 14, 1978  12:27 PM</location>
	</document>
	<document id= '885'>
	<citations>
	<citation>1040	5	885</citation>
	<citation>885	5	885</citation>
	<citation>885	5	885</citation>
	<citation>885	5	885</citation>
	<citation>885	6	885</citation>
	<citation>587	6	885</citation>
	<citation>621	6	885</citation>
	</citations>
	<title>Modified Hankel Function (Algorithm 163)</title>
	<conference>CACM April, 1963</conference>
	<authors>
	<author>Fettis, H. E.</author>
	</authors>
	<location>CA630406 JB March 14, 1978  12:26 PM</location>
	</document>
	<document id= '884'>
	<citations>
	<citation>884	5	884</citation>
	<citation>884	5	884</citation>
	<citation>884	5	884</citation>
	</citations>
	<title>Orthogonal Polynomial Least Squares Surface Fit (Algorithm 164)</title>
	<conference>CACM April, 1963</conference>
	<authors>
	<author>Clark, R. E.</author>
	<author>Kubik, R. N.</author>
	<author>Phillips, L. P.</author>
	</authors>
	<location>CA630407 JB March 14, 1978  12:25 PM</location>
	</document>
	<document id= '883'>
	<citations>
	<citation>883	5	883</citation>
	<citation>883	5	883</citation>
	<citation>883	5	883</citation>
	</citations>
	<title>Complete Elliptic Integrals (Algorithm 165)</title>
	<conference>CACM April, 1963</conference>
	<authors>
	</authors>
	<location>CA630408 JB March 14, 1978  12:23 PM</location>
	</document>
	<document id= '882'>
	<citations>
	<citation>882	5	882</citation>
	<citation>882	5	882</citation>
	<citation>882	5	882</citation>
	</citations>
	<title>Monte Carlo (Algorithm 166)</title>
	<conference>CACM April, 1963</conference>
	<authors>
	<author>Rodman, R. D.</author>
	</authors>
	<location>CA630409 JB March 14, 1978  12:22 PM</location>
	</document>
	<document id= '881'>
	<citations>
	<citation>881	5	881</citation>
	<citation>881	5	881</citation>
	<citation>881	5	881</citation>
	</citations>
	<title>Calculation of Confluent Divided Differences (Algorithm 167)</title>
	<conference>CACM April, 1963</conference>
	<authors>
	<author>Kahan, W.</author>
	<author>Farkas, I.</author>
	</authors>
	<location>CA630410 JB March 14, 1978  12:21 PM</location>
	</document>
	<document id= '880'>
	<citations>
	<citation>880	5	880</citation>
	<citation>880	5	880</citation>
	<citation>880	5	880</citation>
	</citations>
	<title>Newton Interpolation with Backward Divided Differences</title>
	<conference>CACM April, 1963</conference>
	<authors>
	<author>Kahan, W.</author>
	<author>Farkas, I.</author>
	</authors>
	<location>CA630411 JB March 14, 1978  12:20 PM</location>
	</document>
	<document id= '879'>
	<citations>
	<citation>1524	5	879</citation>
	<citation>879	5	879</citation>
	<citation>879	5	879</citation>
	<citation>879	5	879</citation>
	<citation>879	6	879</citation>
	<citation>1197	6	879</citation>
	<citation>311	6	879</citation>
	</citations>
	<title>Newton Interpolation with Forward Divided Differences (Algorithm 169)</title>
	<conference>CACM April, 1963</conference>
	<authors>
	<author>Kahan, W.</author>
	<author>Farkas, I.</author>
	</authors>
	<location>CA630412 JB March 14, 1978  12:18 PM</location>
	</document>
	<document id= '878'>
	<citations>
	<citation>1946	5	878</citation>
	<citation>878	5	878</citation>
	<citation>878	5	878</citation>
	<citation>878	5	878</citation>
	<citation>878	6	878</citation>
	<citation>902	6	878</citation>
	<citation>1093	6	878</citation>
	<citation>1177	6	878</citation>
	<citation>1387	6	878</citation>
	<citation>1393	6	878</citation>
	<citation>360	6	878</citation>
	<citation>731	6	878</citation>
	</citations>
	<title>Reduction of a Matrix Containing Polynomial Elements (Algorithm 170)</title>
	<conference>CACM April, 1963</conference>
	<authors>
	<author>Hennion, P. E.</author>
	</authors>
	<location>CA630413 JB March 14, 1978  12:17 PM</location>
	</document>
	<document id= '877'>
	<citations>
	<citation>877	5	877</citation>
	<citation>877	5	877</citation>
	<citation>877	5	877</citation>
	</citations>
	<title>Complete Elliptic Integral of the First Kind (Algorithm 55)</title>
	<conference>CACM April, 1963</conference>
	<authors>
	</authors>
	<location>CA630414 JB March 14, 1978  12:15 PM</location>
	</document>
	<document id= '876'>
	<citations>
	<citation>876	5	876</citation>
	<citation>876	5	876</citation>
	<citation>876	5	876</citation>
	</citations>
	<title>Complete Elliptic Integral (Algorithm 149)</title>
	<conference>CACM April, 1963</conference>
	<authors>
	<author>Thacher, H. C.</author>
	</authors>
	<location>CA630415 JB March 14, 1978  12:14 PM</location>
	</document>
	<document id= '875'>
	<citations>
	<citation>875	5	875</citation>
	<citation>875	5	875</citation>
	<citation>875	5	875</citation>
	</citations>
	<title>Incomplete Elliptic Integrals (Algorithm 73)</title>
	<conference>CACM April, 1963</conference>
	<authors>
	<author>Riet, R. P.</author>
	</authors>
	<location>CA630416 JB March 14, 1978  12:06 PM</location>
	</document>
	<document id= '874'>
	<citations>
	<citation>874	5	874</citation>
	<citation>874	5	874</citation>
	<citation>874	5	874</citation>
	</citations>
	<title>Chebyshev Curvefit (Algorithm 91)</title>
	<conference>CACM April, 1963</conference>
	<authors>
	<author>Hale, R. P.</author>
	</authors>
	<location>CA630417 JB March 14, 1978  11:56 AM</location>
	</document>
	<document id= '873'>
	<citations>
	<citation>873	5	873</citation>
	<citation>873	5	873</citation>
	<citation>873	5	873</citation>
	</citations>
	<title>Random (Algorithm 133)</title>
	<conference>CACM April, 1963</conference>
	<authors>
	</authors>
	<location>CA630418 JB March 14, 1978  11:50 AM</location>
	</document>
	<document id= '872'>
	<citations>
	<citation>1352	5	872</citation>
	<citation>2074	5	872</citation>
	<citation>2093	5	872</citation>
	<citation>872	5	872</citation>
	<citation>872	5	872</citation>
	<citation>872	5	872</citation>
	<citation>834	6	872</citation>
	<citation>834	6	872</citation>
	<citation>834	6	872</citation>
	<citation>872	6	872</citation>
	<citation>872	6	872</citation>
	<citation>872	6	872</citation>
	<citation>1040	6	872</citation>
	<citation>1092	6	872</citation>
	<citation>1092	6	872</citation>
	<citation>1241	6	872</citation>
	<citation>1273	6	872</citation>
	<citation>1298	6	872</citation>
	<citation>1573	6	872</citation>
	<citation>324	6	872</citation>
	<citation>429	6	872</citation>
	<citation>429	6	872</citation>
	<citation>429	6	872</citation>
	<citation>570	6	872</citation>
	<citation>621	6	872</citation>
	<citation>786	6	872</citation>
	<citation>786	6	872</citation>
	</citations>
	<title>Adaptive Numerical Integration by Simpson's Rule (Algorithm 145)</title>
	<conference>CACM April, 1963</conference>
	<authors>
	<author>McKeeman, W. M.</author>
	</authors>
	<location>CA630419 JB March 14, 1978  11:49 AM</location>
	</document>
	<document id= '871'>
	<citations>
	<citation>1800	5	871</citation>
	<citation>871	5	871</citation>
	<citation>871	5	871</citation>
	<citation>871	5	871</citation>
	<citation>871	6	871</citation>
	</citations>
	<title>PSIF (Algorithm 147)</title>
	<conference>CACM April, 1963</conference>
	<authors>
	</authors>
	<location>CA630420 JB March 14, 1978  11:48 AM</location>
	</document>
	<document id= '870'>
	<citations>
	<citation>870	5	870</citation>
	<citation>870	5	870</citation>
	<citation>870	5	870</citation>
	</citations>
	<title>Term of Magic Square (Algorithm 148)</title>
	<conference>CACM April, 1963</conference>
	<authors>
	<author>Barnecut, J. N. R.</author>
	</authors>
	<location>CA630421 JB March 14, 1978  11:47 AM</location>
	</document>
	<document id= '869'>
	<citations>
	<citation>869	5	869</citation>
	<citation>869	5	869</citation>
	<citation>869	5	869</citation>
	</citations>
	<title>Term of Magic Square (Algorithm 148)</title>
	<conference>CACM April, 1963</conference>
	<authors>
	<author>Thoro, D.</author>
	</authors>
	<location>CA630422 JB March 14, 1978  11:46 AM</location>
	</document>
	<document id= '868'>
	<citations>
	<citation>1084	5	868</citation>
	<citation>868	5	868</citation>
	<citation>868	5	868</citation>
	<citation>868	5	868</citation>
	<citation>868	6	868</citation>
	<citation>603	6	868</citation>
	<citation>644	6	868</citation>
	<citation>669	6	868</citation>
	<citation>791	6	868</citation>
	<citation>797	6	868</citation>
	</citations>
	<title>A Suggested Method of Making Fuller Use of Strings in ALGOL 60</title>
	<conference>CACM April, 1963</conference>
	<authors>
	<author>Shoffner, M. G.</author>
	<author>Brown, P. J.</author>
	</authors>
	<location>CA630423 JB March 14, 1978  11:45 AM</location>
	</document>
	<document id= '867'>
	<title>Least Squares Fitting of Planes to Surfaces Using Dynamic Programming</title>
	<abstract>Dynamic programming has recently been used by Stone, by Bellman and by Gluss to determine the  closet fit of broken line segments to a curve in an interval under the constraint that the number of  segments is fixed.  In the present paper successive models are developed to extend the method to the  fitting of broken plane segments to surfaces z=g(x,y) defined over certain types of subareas of the (x,y)-space.   The first model considers a rectangular area, with the constraint that the plane segments are defined  over a grid in the (x,y)-space.  It is then shown how this model may be incorporated into an algorithm  that provides successive approximations to optimal fits for any type of closed area.  Finally, applications  are briefly described.</abstract>
	<conference>CACM April, 1963</conference>
	<authors>
	<author>Gluss, B.</author>
	</authors>
	<location>CA630424 JB March 14, 1978  11:43 AM</location>
	<citations>
	<citation>497	4	867</citation>
	<citation>867	4	867</citation>
	<citation>867	4	867</citation>
	<citation>317	5	867</citation>
	<citation>497	5	867</citation>
	<citation>867	5	867</citation>
	<citation>867	5	867</citation>
	<citation>867	5	867</citation>
	</citations>
	</document>
	<document id= '866'>
	<citations>
	<citation>2017	5	866</citation>
	<citation>866	5	866</citation>
	<citation>866	5	866</citation>
	<citation>866	5	866</citation>
	<citation>849	6	866</citation>
	<citation>850	6	866</citation>
	<citation>851	6	866</citation>
	<citation>852	6	866</citation>
	<citation>853	6	866</citation>
	<citation>854	6	866</citation>
	<citation>855	6	866</citation>
	<citation>856	6	866</citation>
	<citation>857	6	866</citation>
	<citation>858	6	866</citation>
	<citation>859	6	866</citation>
	<citation>860	6	866</citation>
	<citation>861	6	866</citation>
	<citation>862	6	866</citation>
	<citation>863	6	866</citation>
	<citation>864	6	866</citation>
	<citation>865	6	866</citation>
	<citation>866	6	866</citation>
	</citations>
	<title>Sorting on Computers</title>
	<conference>CACM May, 1963</conference>
	<authors>
	<author>Gotlieb, C. C.</author>
	</authors>
	<location>CA630501 JB March 14, 1978  11:37 AM</location>
	</document>
	<document id= '865'>
	<title>Internal and Tape Sorting Using the Replacement-Selection Technique</title>
	<abstract>A general technique for sequencing unsorted records is presented.  The technique is shown to  be applicable for the first stage of a generalized sort program (the formation of initial strings) as  well as for sorting records within a memory storage (an internal sort).  It is shown that given N records  in memory storage, records are sequenced using 1+log2 N tests per record, that initial string lengths  will average 2N for random input records, and that reading, writing and processing can be accomplished  simultaneously if the computer permits such overlap.</abstract>
	<conference>CACM May, 1963</conference>
	<authors>
	<author>Goetz, M. A.</author>
	</authors>
	<location>CA630502 JB March 14, 1978  11:36 AM</location>
	<citations>
	<citation>1919	4	865</citation>
	<citation>852	4	865</citation>
	<citation>864	4	865</citation>
	<citation>865	4	865</citation>
	<citation>2017	5	865</citation>
	<citation>74	5	865</citation>
	<citation>851	5	865</citation>
	<citation>865	5	865</citation>
	<citation>865	5	865</citation>
	<citation>865	5	865</citation>
	<citation>849	6	865</citation>
	<citation>850	6	865</citation>
	<citation>851	6	865</citation>
	<citation>852	6	865</citation>
	<citation>853	6	865</citation>
	<citation>854	6	865</citation>
	<citation>855	6	865</citation>
	<citation>856	6	865</citation>
	<citation>857	6	865</citation>
	<citation>858	6	865</citation>
	<citation>858	6	865</citation>
	<citation>859	6	865</citation>
	<citation>860	6	865</citation>
	<citation>861	6	865</citation>
	<citation>862	6	865</citation>
	<citation>863	6	865</citation>
	<citation>864	6	865</citation>
	<citation>865	6	865</citation>
	<citation>865	6	865</citation>
	<citation>866	6	865</citation>
	</citations>
	</document>
	<document id= '864'>
	<citations>
	<citation>1919	4	864</citation>
	<citation>1919	4	864</citation>
	<citation>2191	4	864</citation>
	<citation>2388	4	864</citation>
	<citation>2783	4	864</citation>
	<citation>2784	4	864</citation>
	<citation>3054	4	864</citation>
	<citation>3121	4	864</citation>
	<citation>852	4	864</citation>
	<citation>852	4	864</citation>
	<citation>864	4	864</citation>
	<citation>864	4	864</citation>
	<citation>864	4	864</citation>
	<citation>865	4	864</citation>
	<citation>1175	5	864</citation>
	<citation>232	5	864</citation>
	<citation>1919	5	864</citation>
	<citation>309	5	864</citation>
	<citation>2017	5	864</citation>
	<citation>2041	5	864</citation>
	<citation>2216	5	864</citation>
	<citation>74	5	864</citation>
	<citation>864	5	864</citation>
	<citation>864	5	864</citation>
	<citation>864	5	864</citation>
	<citation>849	6	864</citation>
	<citation>850	6	864</citation>
	<citation>851	6	864</citation>
	<citation>852	6	864</citation>
	<citation>853	6	864</citation>
	<citation>854	6	864</citation>
	<citation>855	6	864</citation>
	<citation>856	6	864</citation>
	<citation>857	6	864</citation>
	<citation>858	6	864</citation>
	<citation>859	6	864</citation>
	<citation>860	6	864</citation>
	<citation>861	6	864</citation>
	<citation>862	6	864</citation>
	<citation>863	6	864</citation>
	<citation>864	6	864</citation>
	<citation>864	6	864</citation>
	<citation>864	6	864</citation>
	<citation>864	6	864</citation>
	<citation>864	6	864</citation>
	<citation>865	6	864</citation>
	<citation>866	6	864</citation>
	<citation>1175	6	864</citation>
	<citation>1919	6	864</citation>
	<citation>1969	6	864</citation>
	<citation>1997	6	864</citation>
	<citation>308	6	864</citation>
	<citation>308	6	864</citation>
	<citation>309	6	864</citation>
	<citation>74	6	864</citation>
	<citation>3187	6	864</citation>
	</citations>
	<title>An Empirical Study of Minimal Storage Sorting</title>
	<conference>CACM May, 1963</conference>
	<authors>
	<author>Hibbard, T. N.</author>
	</authors>
	<location>CA630503 JB March 14, 1978  11:31 AM</location>
	</document>
	<document id= '863'>
	<citations>
	<citation>2146	4	863</citation>
	<citation>479	4	863</citation>
	<citation>862	4	863</citation>
	<citation>863	4	863</citation>
	<citation>299	5	863</citation>
	<citation>2017	5	863</citation>
	<citation>2146	5	863</citation>
	<citation>863	5	863</citation>
	<citation>863	5	863</citation>
	<citation>863	5	863</citation>
	<citation>849	6	863</citation>
	<citation>850	6	863</citation>
	<citation>851	6	863</citation>
	<citation>852	6	863</citation>
	<citation>853	6	863</citation>
	<citation>854	6	863</citation>
	<citation>855	6	863</citation>
	<citation>856	6	863</citation>
	<citation>857	6	863</citation>
	<citation>858	6	863</citation>
	<citation>859	6	863</citation>
	<citation>860	6	863</citation>
	<citation>861	6	863</citation>
	<citation>861	6	863</citation>
	<citation>862	6	863</citation>
	<citation>862	6	863</citation>
	<citation>863	6	863</citation>
	<citation>863	6	863</citation>
	<citation>864	6	863</citation>
	<citation>865	6	863</citation>
	<citation>866	6	863</citation>
	<citation>299	6	863</citation>
	</citations>
	<title>Multiphase Sorting</title>
	<conference>CACM May, 1963</conference>
	<authors>
	<author>Manker, H. H.</author>
	</authors>
	<location>CA630504 JB March 14, 1978  11:30 AM</location>
	</document>
	<document id= '862'>
	<citations>
	<citation>2146	4	862</citation>
	<citation>479	4	862</citation>
	<citation>860	4	862</citation>
	<citation>862	4	862</citation>
	<citation>862	4	862</citation>
	<citation>863	4	862</citation>
	<citation>1117	5	862</citation>
	<citation>299	5	862</citation>
	<citation>2017	5	862</citation>
	<citation>2146	5	862</citation>
	<citation>479	5	862</citation>
	<citation>862	5	862</citation>
	<citation>862	5	862</citation>
	<citation>862	5	862</citation>
	<citation>861	5	862</citation>
	<citation>849	6	862</citation>
	<citation>850	6	862</citation>
	<citation>851	6	862</citation>
	<citation>852	6	862</citation>
	<citation>853	6	862</citation>
	<citation>854	6	862</citation>
	<citation>855	6	862</citation>
	<citation>856	6	862</citation>
	<citation>857	6	862</citation>
	<citation>858	6	862</citation>
	<citation>859	6	862</citation>
	<citation>860	6	862</citation>
	<citation>861	6	862</citation>
	<citation>861	6	862</citation>
	<citation>861	6	862</citation>
	<citation>862	6	862</citation>
	<citation>862	6	862</citation>
	<citation>862	6	862</citation>
	<citation>862	6	862</citation>
	<citation>863	6	862</citation>
	<citation>863	6	862</citation>
	<citation>864	6	862</citation>
	<citation>865	6	862</citation>
	<citation>866	6	862</citation>
	<citation>299	6	862</citation>
	<citation>636	6	862</citation>
	</citations>
	<title>String Distribution for the Polyphase Sort</title>
	<conference>CACM May, 1963</conference>
	<authors>
	</authors>
	<location>CA630505 JB March 14, 1978  11:29 AM</location>
	</document>
	<document id= '861'>
	<title>Read-Backward Polyphase Sorting</title>
	<abstract>Read-backward Polyphase sorting provides more efficient use of the tapes available to a sort  than most other sorting techniques.  Backward Polyphase produces a continuous merging process from n-1  tapes where n is the total number of tapes being used in the sorting process.  Any of the available presorting  techniques may be used in conjunction with the Polyphase merge sort provided that the presort has the  capability of producing both ascending and descending strings and distributing the strings on the various  tapes as required by the Polyphase Merge.</abstract>
	<conference>CACM May, 1963</conference>
	<authors>
	<author>Gilstad, R. L.</author>
	</authors>
	<location>CA630506 JB March 14, 1978  11:28 AM</location>
	<citations>
	<citation>1117	4	861</citation>
	<citation>2017	4	861</citation>
	<citation>2146	4	861</citation>
	<citation>861	4	861</citation>
	<citation>1117	5	861</citation>
	<citation>2017	5	861</citation>
	<citation>2146	5	861</citation>
	<citation>677	5	861</citation>
	<citation>860	5	861</citation>
	<citation>862	5	861</citation>
	<citation>861	5	861</citation>
	<citation>861	5	861</citation>
	<citation>861	5	861</citation>
	<citation>849	6	861</citation>
	<citation>850	6	861</citation>
	<citation>851	6	861</citation>
	<citation>852	6	861</citation>
	<citation>853	6	861</citation>
	<citation>854	6	861</citation>
	<citation>855	6	861</citation>
	<citation>856	6	861</citation>
	<citation>857	6	861</citation>
	<citation>858	6	861</citation>
	<citation>859	6	861</citation>
	<citation>860	6	861</citation>
	<citation>861	6	861</citation>
	<citation>861	6	861</citation>
	<citation>861	6	861</citation>
	<citation>861	6	861</citation>
	<citation>861	6	861</citation>
	<citation>862	6	861</citation>
	<citation>862	6	861</citation>
	<citation>862	6	861</citation>
	<citation>863	6	861</citation>
	<citation>863	6	861</citation>
	<citation>864	6	861</citation>
	<citation>865	6	861</citation>
	<citation>866	6	861</citation>
	<citation>299	6	861</citation>
	<citation>479	6	861</citation>
	<citation>636	6	861</citation>
	</citations>
	</document>
	<document id= '860'>
	<title>A Comparison Between the Polyphase and Oscillating Sort Techniques</title>
	<abstract>A comparison between the Oscillating and Polyphase Sort techniques is developed for computer  systems having from four to ten tape drives.  The basis for the comparison is the total reading and writing  required for various number of input strings and tape drives for the two techniques.</abstract>
	<conference>CACM May, 1963</conference>
	<authors>
	<author>Goetz, M. A.</author>
	<author>Toth, G. S.</author>
	</authors>
	<location>CA630507 JB March 14, 1978  11:25 AM</location>
	<citations>
	<citation>1117	4	860</citation>
	<citation>2017	4	860</citation>
	<citation>2146	4	860</citation>
	<citation>677	4	860</citation>
	<citation>860	4	860</citation>
	<citation>860	4	860</citation>
	<citation>862	4	860</citation>
	<citation>2017	5	860</citation>
	<citation>479	5	860</citation>
	<citation>860	5	860</citation>
	<citation>860	5	860</citation>
	<citation>860	5	860</citation>
	<citation>861	5	860</citation>
	<citation>849	6	860</citation>
	<citation>850	6	860</citation>
	<citation>851	6	860</citation>
	<citation>852	6	860</citation>
	<citation>853	6	860</citation>
	<citation>854	6	860</citation>
	<citation>855	6	860</citation>
	<citation>856	6	860</citation>
	<citation>857	6	860</citation>
	<citation>858	6	860</citation>
	<citation>859	6	860</citation>
	<citation>860	6	860</citation>
	<citation>861	6	860</citation>
	<citation>862	6	860</citation>
	<citation>863	6	860</citation>
	<citation>864	6	860</citation>
	<citation>865	6	860</citation>
	<citation>866	6	860</citation>
	</citations>
	</document>
	<document id= '859'>
	<citations>
	<citation>2017	5	859</citation>
	<citation>859	5	859</citation>
	<citation>859	5	859</citation>
	<citation>859	5	859</citation>
	<citation>849	6	859</citation>
	<citation>850	6	859</citation>
	<citation>851	6	859</citation>
	<citation>852	6	859</citation>
	<citation>853	6	859</citation>
	<citation>854	6	859</citation>
	<citation>855	6	859</citation>
	<citation>856	6	859</citation>
	<citation>857	6	859</citation>
	<citation>858	6	859</citation>
	<citation>859	6	859</citation>
	<citation>860	6	859</citation>
	<citation>861	6	859</citation>
	<citation>862	6	859</citation>
	<citation>863	6	859</citation>
	<citation>864	6	859</citation>
	<citation>865	6	859</citation>
	<citation>866	6	859</citation>
	</citations>
	<title>Computer Planned Collates</title>
	<conference>CACM May, 1963</conference>
	<authors>
	<author>French, N.C.</author>
	</authors>
	<location>CA630508 JB March 14, 1978  11:22 AM</location>
	</document>
	<document id= '858'>
	<title>A Tape File Merge Pattern Generator</title>
	<abstract>A routine is presented which specifies the sequence of merge cycles to effect the merging of  sorted tape files.  The routine is designed to minimize elapsed computer time by varying the power of  the merge cycles, so as to use all the available tape drives, with its characteristic of assigning one  drive to a single-reel file and two drives to each multiple-reel file.</abstract>
	<conference>CACM May, 1963</conference>
	<authors>
	<author>Cooke, W. S.</author>
	</authors>
	<location>CA630509 JB March 14, 1978  11:21 AM</location>
	<citations>
	<citation>2017	5	858</citation>
	<citation>851	5	858</citation>
	<citation>858	5	858</citation>
	<citation>858	5	858</citation>
	<citation>858	5	858</citation>
	<citation>849	6	858</citation>
	<citation>850	6	858</citation>
	<citation>851	6	858</citation>
	<citation>852	6	858</citation>
	<citation>853	6	858</citation>
	<citation>854	6	858</citation>
	<citation>855	6	858</citation>
	<citation>856	6	858</citation>
	<citation>857	6	858</citation>
	<citation>858	6	858</citation>
	<citation>858	6	858</citation>
	<citation>859	6	858</citation>
	<citation>860	6	858</citation>
	<citation>861	6	858</citation>
	<citation>862	6	858</citation>
	<citation>863	6	858</citation>
	<citation>864	6	858</citation>
	<citation>865	6	858</citation>
	<citation>865	6	858</citation>
	<citation>866	6	858</citation>
	</citations>
	</document>
	<document id= '857'>
	<title>Sorting Nonredundant Files-Techniques Used in the FACT Compiler</title>
	<abstract>Some typical file structures, including some called "non-redundant," are examined,and the  methods used in FACT to sort such files are discussed.</abstract>
	<conference>CACM May, 1963</conference>
	<authors>
	<author>Glore, J. B.</author>
	</authors>
	<location>CA630510 JB March 14, 1978  11:16 AM</location>
	<citations>
	<citation>2017	5	857</citation>
	<citation>857	5	857</citation>
	<citation>857	5	857</citation>
	<citation>857	5	857</citation>
	<citation>849	6	857</citation>
	<citation>850	6	857</citation>
	<citation>851	6	857</citation>
	<citation>852	6	857</citation>
	<citation>853	6	857</citation>
	<citation>854	6	857</citation>
	<citation>855	6	857</citation>
	<citation>856	6	857</citation>
	<citation>857	6	857</citation>
	<citation>858	6	857</citation>
	<citation>859	6	857</citation>
	<citation>860	6	857</citation>
	<citation>861	6	857</citation>
	<citation>862	6	857</citation>
	<citation>863	6	857</citation>
	<citation>864	6	857</citation>
	<citation>865	6	857</citation>
	<citation>866	6	857</citation>
	</citations>
	</document>
	<document id= '856'>
	<title>Sorting with Large Volume, Random Access, Drum Storage</title>
	<abstract>An approach to sorting records is described using random access drum memory.  The Sort program  described is designed to be a generalized, self-generating sort, applicable to a variety of record statements.   This description is divided into three parts.  The first part presents the operating environment; the  second defines the general solution; the third part describes the internal sort-merge technique.</abstract>
	<conference>CACM May, 1963</conference>
	<authors>
	<author>Falkin, J.</author>
	</authors>
	<location>CA630511 JB March 14, 1978  11:14 AM</location>
	<citations>
	<citation>2017	5	856</citation>
	<citation>856	5	856</citation>
	<citation>856	5	856</citation>
	<citation>856	5	856</citation>
	<citation>849	6	856</citation>
	<citation>850	6	856</citation>
	<citation>851	6	856</citation>
	<citation>852	6	856</citation>
	<citation>853	6	856</citation>
	<citation>854	6	856</citation>
	<citation>855	6	856</citation>
	<citation>856	6	856</citation>
	<citation>857	6	856</citation>
	<citation>858	6	856</citation>
	<citation>859	6	856</citation>
	<citation>860	6	856</citation>
	<citation>861	6	856</citation>
	<citation>862	6	856</citation>
	<citation>863	6	856</citation>
	<citation>864	6	856</citation>
	<citation>865	6	856</citation>
	<citation>866	6	856</citation>
	</citations>
	</document>
	<document id= '855'>
	<title>Organization and Structure of Dataon Disk File Memory Systems for Efficient Sorting and Other  Data Processing Programs</title>
	<abstract>An approach to the organization and structure of data on Bryant Disc File Memory Systems for  sorting and performing other data processing functions is presented.  The following areas are covered:  characteristics of Bryant Disc File Systems on the Bendix G-20 and RCA 301; two proposed "chaining" structures  for data; and functions of a Disk File Executive Routine.  The concepts for sorting and performing file  maintenance processing using the proposed structure and executive routine are discussed.  Additionally,  it is shown that sorting can be accomplished without the use of disk storage work areas.</abstract>
	<conference>CACM May, 1963</conference>
	<authors>
	<author>Goetz, M. A.</author>
	</authors>
	<location>CA630512 JB March 14, 1978  11:10 AM</location>
	<citations>
	<citation>2017	5	855</citation>
	<citation>855	5	855</citation>
	<citation>855	5	855</citation>
	<citation>855	5	855</citation>
	<citation>849	6	855</citation>
	<citation>850	6	855</citation>
	<citation>851	6	855</citation>
	<citation>852	6	855</citation>
	<citation>853	6	855</citation>
	<citation>854	6	855</citation>
	<citation>855	6	855</citation>
	<citation>856	6	855</citation>
	<citation>857	6	855</citation>
	<citation>858	6	855</citation>
	<citation>859	6	855</citation>
	<citation>860	6	855</citation>
	<citation>861	6	855</citation>
	<citation>862	6	855</citation>
	<citation>863	6	855</citation>
	<citation>864	6	855</citation>
	<citation>865	6	855</citation>
	<citation>866	6	855</citation>
	</citations>
	</document>
	<document id= '854'>
	<title>Some Characteristics of Sorting in Computing Systems Using Random Access Storage Devices</title>
	<abstract>The substantial differences in characteristics of random access storage and tape devices dictate  that concepts and objectives of computer program design be considered from the viewpoint of the external  file medium used.  This is particularly true in the case of sorting.  In a tape-oriented system, the  major sorting problem is that of minimizing merge time despite the limited orders of merge possible.   In contrast, sorting in a random access-oriented system encourages the selection of the optimum order  of merge from many possible orders.  The latter problem is discussed in this paper, along with criteria  developed for determining the optimum order of merge according to the various properties of random access  storage devices.  Attention is also given to the problem of key sorting versus record sorting and the  possibly serious disadvantage of key sorting on a random access system.</abstract>
	<conference>CACM May, 1963</conference>
	<authors>
	<author>Hubbard, G. U.</author>
	</authors>
	<location>CA630513 JB March 14, 1978  11:05 AM</location>
	<citations>
	<citation>1956	5	854</citation>
	<citation>2017	5	854</citation>
	<citation>854	5	854</citation>
	<citation>854	5	854</citation>
	<citation>854	5	854</citation>
	<citation>849	6	854</citation>
	<citation>850	6	854</citation>
	<citation>851	6	854</citation>
	<citation>852	6	854</citation>
	<citation>853	6	854</citation>
	<citation>854	6	854</citation>
	<citation>854	6	854</citation>
	<citation>855	6	854</citation>
	<citation>856	6	854</citation>
	<citation>857	6	854</citation>
	<citation>858	6	854</citation>
	<citation>859	6	854</citation>
	<citation>860	6	854</citation>
	<citation>861	6	854</citation>
	<citation>862	6	854</citation>
	<citation>863	6	854</citation>
	<citation>864	6	854</citation>
	<citation>865	6	854</citation>
	<citation>866	6	854</citation>
	</citations>
	</document>
	<document id= '853'>
	<citations>
	<citation>2017	5	853</citation>
	<citation>853	5	853</citation>
	<citation>853	5	853</citation>
	<citation>853	5	853</citation>
	<citation>849	6	853</citation>
	<citation>850	6	853</citation>
	<citation>851	6	853</citation>
	<citation>852	6	853</citation>
	<citation>853	6	853</citation>
	<citation>854	6	853</citation>
	<citation>855	6	853</citation>
	<citation>856	6	853</citation>
	<citation>857	6	853</citation>
	<citation>858	6	853</citation>
	<citation>859	6	853</citation>
	<citation>860	6	853</citation>
	<citation>861	6	853</citation>
	<citation>862	6	853</citation>
	<citation>863	6	853</citation>
	<citation>864	6	853</citation>
	<citation>865	6	853</citation>
	<citation>866	6	853</citation>
	</citations>
	<title>The COBOL Sort Verb</title>
	<conference>CACM May, 1963</conference>
	<authors>
	<author>Paterson, J. B.</author>
	</authors>
	<location>CA630514 JB March 14, 1978  10:59 AM</location>
	</document>
	<document id= '852'>
	<citations>
	<citation>1919	4	852</citation>
	<citation>852	4	852</citation>
	<citation>852	4	852</citation>
	<citation>864	4	852</citation>
	<citation>864	4	852</citation>
	<citation>865	4	852</citation>
	<citation>232	5	852</citation>
	<citation>2017	5	852</citation>
	<citation>74	5	852</citation>
	<citation>852	5	852</citation>
	<citation>852	5	852</citation>
	<citation>852	5	852</citation>
	<citation>849	6	852</citation>
	<citation>850	6	852</citation>
	<citation>851	6	852</citation>
	<citation>852	6	852</citation>
	<citation>853	6	852</citation>
	<citation>854	6	852</citation>
	<citation>855	6	852</citation>
	<citation>856	6	852</citation>
	<citation>857	6	852</citation>
	<citation>858	6	852</citation>
	<citation>859	6	852</citation>
	<citation>860	6	852</citation>
	<citation>861	6	852</citation>
	<citation>862	6	852</citation>
	<citation>863	6	852</citation>
	<citation>864	6	852</citation>
	<citation>865	6	852</citation>
	<citation>866	6	852</citation>
	</citations>
	<title>A Method of Comparing the Time Requirements of Sorting Methods</title>
	<conference>CACM May, 1963</conference>
	<authors>
	<author>Hall, M. H.</author>
	</authors>
	<location>CA630515 JB March 14, 1978  10:58 AM</location>
	</document>
	<document id= '851'>
	<title>Design and Characteristics of a Variable-Length Record Sort Using New Fixed-Length Record Sorting  Techniques</title>
	<abstract>This paper describes the application of several new techniques for sorting fixed-length records  to the problems of variable-length record sorting.  The techniques have been implemented on a Sylvania  9400 computer system with 32,000 fixed-length words of memory.  Specifically, the techniques sequence  variable-length records of unrestricted size, produce long initial strings of data, merge strings of  data at the power of T-1, where T is the number of work tapes in a system, and do not restrict the volume  of input data.</abstract>
	<conference>CACM May,1963</conference>
	<authors>
	<author>Goetz, M. A.</author>
	</authors>
	<location>CA630516 JB March 14, 1978  10:57 AM</location>
	<citations>
	<citation>2017	4	851</citation>
	<citation>2017	4	851</citation>
	<citation>851	4	851</citation>
	<citation>851	4	851</citation>
	<citation>2017	5	851</citation>
	<citation>851	5	851</citation>
	<citation>851	5	851</citation>
	<citation>851	5	851</citation>
	<citation>858	5	851</citation>
	<citation>865	5	851</citation>
	<citation>849	6	851</citation>
	<citation>850	6	851</citation>
	<citation>851	6	851</citation>
	<citation>852	6	851</citation>
	<citation>853	6	851</citation>
	<citation>854	6	851</citation>
	<citation>855	6	851</citation>
	<citation>856	6	851</citation>
	<citation>857	6	851</citation>
	<citation>858	6	851</citation>
	<citation>859	6	851</citation>
	<citation>860	6	851</citation>
	<citation>861	6	851</citation>
	<citation>862	6	851</citation>
	<citation>863	6	851</citation>
	<citation>864	6	851</citation>
	<citation>865	6	851</citation>
	<citation>866	6	851</citation>
	</citations>
	</document>
	<document id= '850'>
	<title>Conversion, Reconversion and Comparison Techniques In Variable-Length Sorting</title>
	<abstract>The logic is described for converting highly variable input records into a format that can  be easily and efficiently processed by a sorting program.  The internal record formats are discussed  in relation to (1) their conversion from input formats, (2) their reconversion to output formats, and  (3) comparison techniques between internal formats.</abstract>
	<conference>CACM May, 1963</conference>
	<authors>
	<author>Waks, D. J.</author>
	</authors>
	<location>CA630517 JB March 14, 1978  10:52 AM</location>
	<citations>
	<citation>2017	5	850</citation>
	<citation>850	5	850</citation>
	<citation>850	5	850</citation>
	<citation>850	5	850</citation>
	<citation>849	6	850</citation>
	<citation>850	6	850</citation>
	<citation>851	6	850</citation>
	<citation>852	6	850</citation>
	<citation>853	6	850</citation>
	<citation>854	6	850</citation>
	<citation>855	6	850</citation>
	<citation>856	6	850</citation>
	<citation>857	6	850</citation>
	<citation>858	6	850</citation>
	<citation>859	6	850</citation>
	<citation>860	6	850</citation>
	<citation>861	6	850</citation>
	<citation>862	6	850</citation>
	<citation>863	6	850</citation>
	<citation>864	6	850</citation>
	<citation>865	6	850</citation>
	<citation>866	6	850</citation>
	</citations>
	</document>
	<document id= '849'>
	<title>Use of Tree Structures for Processing Files</title>
	<abstract>In data processing problems, files are frequently used which must both be searched and altered.   Binary search techniques are efficient for searching large files, but the associated file organization  is not readily adapted to the file alterations.  Conversely, a chained file allocation permits efficient  alteration but cannot be searched efficiently. A file organized into a tree-like structure is discussed,  and it is shown that such a file may both be searched and altered with times proportional to slog(s)N,  where N is the number of file items and s is a parameter of the tree.  It is also shown that optimizing  the value of s leads to a search time which is only 25 per cent slower than the binary search.  The tree  organization employs two data chains and may be considered to be a compromise between the organizations  for the binary search and the chained file.  The relation of the tree organization to multidimensional  indexing and to the trie structure is also discussed.</abstract>
	<conference>CACM May, 1963</conference>
	<authors>
	</authors>
	<location>CA630518 JB March 14, 1978  10:49 AM</location>
	<citations>
	<citation>435	4	849</citation>
	<citation>2846	4	849</citation>
	<citation>849	4	849</citation>
	<citation>849	4	849</citation>
	<citation>944	4	849</citation>
	<citation>155	5	849</citation>
	<citation>1050	5	849</citation>
	<citation>1935	5	849</citation>
	<citation>1936	5	849</citation>
	<citation>2017	5	849</citation>
	<citation>2032	5	849</citation>
	<citation>2257	5	849</citation>
	<citation>2360	5	849</citation>
	<citation>2451	5	849</citation>
	<citation>2452	5	849</citation>
	<citation>615	5	849</citation>
	<citation>849	5	849</citation>
	<citation>849	5	849</citation>
	<citation>849	5	849</citation>
	<citation>849	6	849</citation>
	<citation>849	6	849</citation>
	<citation>849	6	849</citation>
	<citation>849	6	849</citation>
	<citation>849	6	849</citation>
	<citation>849	6	849</citation>
	<citation>849	6	849</citation>
	<citation>849	6	849</citation>
	<citation>849	6	849</citation>
	<citation>850	6	849</citation>
	<citation>851	6	849</citation>
	<citation>852	6	849</citation>
	<citation>853	6	849</citation>
	<citation>854	6	849</citation>
	<citation>855	6	849</citation>
	<citation>856	6	849</citation>
	<citation>857	6	849</citation>
	<citation>858	6	849</citation>
	<citation>859	6	849</citation>
	<citation>860	6	849</citation>
	<citation>861	6	849</citation>
	<citation>862	6	849</citation>
	<citation>863	6	849</citation>
	<citation>864	6	849</citation>
	<citation>865	6	849</citation>
	<citation>866	6	849</citation>
	<citation>106	6	849</citation>
	<citation>944	6	849</citation>
	<citation>1115	6	849</citation>
	<citation>1785	6	849</citation>
	<citation>209	6	849</citation>
	<citation>1831	6	849</citation>
	<citation>1831	6	849</citation>
	<citation>1935	6	849</citation>
	<citation>1936	6	849</citation>
	<citation>1936	6	849</citation>
	<citation>1936	6	849</citation>
	<citation>1936	6	849</citation>
	<citation>1976	6	849</citation>
	<citation>367	6	849</citation>
	<citation>2198	6	849</citation>
	<citation>2360	6	849</citation>
	<citation>627	6	849</citation>
	</citations>
	</document>
	<document id= '848'>
	<title>A Note on Range Transformations for Square Root and Logarithm</title>
	<abstract>There was the germ of an idea in two previous papers [1,2] which no one seems to have picked  up in almost five years.  For certain functions it seems desirable to transform the argument to a short  range symmetric about 10.1 will give examples of this usage for the square root and logarithm function  for both binary and decimal machines.</abstract>
	<conference>CACM June, 1963</conference>
	<authors>
	<author>Bemer, R. W.</author>
	</authors>
	<location>CA630601 JB March 14, 1978  10:41 AM</location>
	<citations>
	<citation>848	4	848</citation>
	<citation>848	4	848</citation>
	<citation>26	5	848</citation>
	<citation>35	5	848</citation>
	<citation>848	5	848</citation>
	<citation>848	5	848</citation>
	<citation>848	5	848</citation>
	</citations>
	</document>
	<document id= '847'>
	<title>A Penny-Matching Program</title>
	<abstract>The logic of a penny-matching program written for the CSX-1 is described.</abstract>
	<conference>CACM June, 1963</conference>
	<authors>
	<author>Wall, E.</author>
	<author>Brown, R. M.</author>
	</authors>
	<location>CA630602 JB March 14, 1978  10:27 AM</location>
	<citations>
	<citation>847	5	847</citation>
	<citation>847	5	847</citation>
	<citation>847	5	847</citation>
	</citations>
	</document>
	<document id= '846'>
	<citations>
	<citation>846	5	846</citation>
	<citation>846	5	846</citation>
	<citation>846	5	846</citation>
	</citations>
	<title>Self-Inverse Conversion Table</title>
	<conference>CACM June, 1963</conference>
	<authors>
	<author>Sanborn, T. G.</author>
	</authors>
	<location>CA630603 JB March 14, 1978  10:25 AM</location>
	</document>
	<document id= '845'>
	<citations>
	<citation>845	5	845</citation>
	<citation>845	5	845</citation>
	<citation>845	5	845</citation>
	</citations>
	<title>Another Test Matrix for Determinants and Inverses</title>
	<conference>CACM June, 1963</conference>
	<authors>
	<author>Caffrey, J.</author>
	</authors>
	<location>CA630604 JB March 14, 1978  10:24 AM</location>
	</document>
	<document id= '844'>
	<citations>
	<citation>844	5	844</citation>
	<citation>844	5	844</citation>
	<citation>844	5	844</citation>
	</citations>
	<title>1410 Fortran Edit Feature</title>
	<conference>CACM June, 1963</conference>
	<authors>
	</authors>
	<location>CA630605 JB March 14, 1978  10:23 AM</location>
	</document>
	<document id= '843'>
	<citations>
	<citation>843	5	843</citation>
	<citation>843	5	843</citation>
	<citation>843	5	843</citation>
	</citations>
	<title>Assign (Algorithm 173)</title>
	<conference>CACM June, 1963</conference>
	<authors>
	<author>Hajek, O.</author>
	</authors>
	<location>CA630606 JB March 14, 1978  10:22 AM</location>
	</document>
	<document id= '842'>
	<citations>
	<citation>842	5	842</citation>
	<citation>842	5	842</citation>
	<citation>842	5	842</citation>
	</citations>
	<title>A Posteriori Bounds on a Zero of a Polynomial (Algorithm 174)</title>
	<conference>CACM June, 1963</conference>
	<authors>
	<author>Gibb, A.</author>
	</authors>
	<location>CA630607 JB March 14, 1978  10:21 AM</location>
	</document>
	<document id= '841'>
	<citations>
	<citation>841	5	841</citation>
	<citation>841	5	841</citation>
	<citation>841	5	841</citation>
	</citations>
	<title>Shuttle Sort (Algorithm 175)</title>
	<conference>CACM June, 1963</conference>
	<authors>
	<author>Shaw, C. J.</author>
	<author>Trimble, T. N.</author>
	</authors>
	<location>CA630608 JB March 14, 1978  10:20 AM</location>
	</document>
	<document id= '840'>
	<citations>
	<citation>840	5	840</citation>
	<citation>840	5	840</citation>
	<citation>840	5	840</citation>
	</citations>
	<title>Least Squares Surface Fit (Algorithm 176)</title>
	<conference>CACM June, 1963</conference>
	<authors>
	<author>Arthurs, T. D.</author>
	</authors>
	<location>CA630609 JB March 14, 1978  10:18 AM</location>
	</document>
	<document id= '839'>
	<citations>
	<citation>839	5	839</citation>
	<citation>839	5	839</citation>
	<citation>839	5	839</citation>
	</citations>
	<title>Least Squares Solution with Constraints (Algorithm 177)</title>
	<conference>CACM June, 1963</conference>
	<authors>
	<author>Synge, M. J.</author>
	</authors>
	<location>CA630610 JB March 14, 1978  10:17 AM</location>
	</document>
	<document id= '838'>
	<citations>
	<citation>838	5	838</citation>
	<citation>838	5	838</citation>
	<citation>838	5	838</citation>
	</citations>
	<title>Direct Search (Algorithm 178)</title>
	<conference>CACM June, 1963</conference>
	<authors>
	</authors>
	<location>CA630611 JB March 14, 1978  10:16 AM</location>
	</document>
	<document id= '837'>
	<citations>
	<citation>837	5	837</citation>
	<citation>837	5	837</citation>
	<citation>837	5	837</citation>
	</citations>
	<title>Incomplete Beta Ratio (Algorithm 179)</title>
	<conference>CACM June, 1963</conference>
	<authors>
	<author>Ludwig, O. G.</author>
	</authors>
	<location>CA630612 JB March 14, 1978  10:15 AM</location>
	</document>
	<document id= '836'>
	<citations>
	<citation>1157	5	836</citation>
	<citation>836	5	836</citation>
	<citation>836	5	836</citation>
	<citation>836	5	836</citation>
	<citation>836	6	836</citation>
	<citation>1081	6	836</citation>
	<citation>485	6	836</citation>
	<citation>714	6	836</citation>
	</citations>
	<title>Error Function-Large X (Algorithm 180)</title>
	<conference>CACM June, 1963</conference>
	<authors>
	</authors>
	<location>CA630613 JB March 14, 1978  10:13 AM</location>
	</document>
	<document id= '835'>
	<citations>
	<citation>835	5	835</citation>
	<citation>835	5	835</citation>
	<citation>835	5	835</citation>
	</citations>
	<title>Complementary Error Function-Large X (Algorithm 181)</title>
	<conference>CACM June, 1963</conference>
	<authors>
	</authors>
	<location>CA630614 JB March 14, 1978 10:12 AM</location>
	</document>
	<document id= '834'>
	<citations>
	<citation>1352	5	834</citation>
	<citation>2048	5	834</citation>
	<citation>2074	5	834</citation>
	<citation>2093	5	834</citation>
	<citation>834	5	834</citation>
	<citation>834	5	834</citation>
	<citation>834	5	834</citation>
	<citation>834	6	834</citation>
	<citation>834	6	834</citation>
	<citation>834	6	834</citation>
	<citation>834	6	834</citation>
	<citation>872	6	834</citation>
	<citation>872	6	834</citation>
	<citation>872	6	834</citation>
	<citation>1040	6	834</citation>
	<citation>1092	6	834</citation>
	<citation>1092	6	834</citation>
	<citation>1241	6	834</citation>
	<citation>1273	6	834</citation>
	<citation>1298	6	834</citation>
	<citation>1573	6	834</citation>
	<citation>324	6	834</citation>
	<citation>429	6	834</citation>
	<citation>429	6	834</citation>
	<citation>429	6	834</citation>
	<citation>429	6	834</citation>
	<citation>570	6	834</citation>
	<citation>621	6	834</citation>
	<citation>786	6	834</citation>
	<citation>786	6	834</citation>
	<citation>786	6	834</citation>
	</citations>
	<title>Nonrecursive Adaptive Integration (Algorithm 182)</title>
	<conference>CACM June, 1963</conference>
	<authors>
	<author>McKeeman, W. M.</author>
	<author>Tesler, L.</author>
	</authors>
	<location>CA630615 JB March 14, 1978  10:10 AM</location>
	</document>
	<document id= '833'>
	<citations>
	<citation>833	5	833</citation>
	<citation>833	5	833</citation>
	<citation>833	5	833</citation>
	</citations>
	<title>Reduction of a Symmetric Bandmatrix to Triple Diagonal Form</title>
	<conference>CACM June, 1963</conference>
	<authors>
	<author>Schwartz, H. R.</author>
	</authors>
	<location>CA630616JB March 14, 1978  10:09 AM</location>
	</document>
	<document id= '832'>
	<citations>
	<citation>832	5	832</citation>
	<citation>832	5	832</citation>
	<citation>832	5	832</citation>
	</citations>
	<title>Curve Fitting with Constraints (Algorithm 74)</title>
	<conference>CACM June, 1963</conference>
	<authors>
	<author>Isoda, K.</author>
	</authors>
	<location>CA630617 JB March 14, 1978  10:08 AM</location>
	</document>
	<document id= '831'>
	<citations>
	<citation>1583	5	831</citation>
	<citation>831	5	831</citation>
	<citation>831	5	831</citation>
	<citation>831	5	831</citation>
	<citation>831	6	831</citation>
	<citation>967	6	831</citation>
	<citation>1126	6	831</citation>
	<citation>707	6	831</citation>
	</citations>
	<title>Real Error Function, ERF (Algorithm 123)</title>
	<conference>CACM June, 1963</conference>
	<authors>
	</authors>
	<location>CA630618 JB March 14, 1978  10:07 AM</location>
	</document>
	<document id= '830'>
	<citations>
	<citation>1179	5	830</citation>
	<citation>1288	5	830</citation>
	<citation>1544	5	830</citation>
	<citation>1646	5	830</citation>
	<citation>2111	5	830</citation>
	<citation>2534	5	830</citation>
	<citation>2556	5	830</citation>
	<citation>2650	5	830</citation>
	<citation>830	5	830</citation>
	<citation>830	5	830</citation>
	<citation>830	5	830</citation>
	<citation>830	6	830</citation>
	<citation>830	6	830</citation>
	<citation>830	6	830</citation>
	<citation>830	6	830</citation>
	<citation>830	6	830</citation>
	<citation>830	6	830</citation>
	<citation>830	6	830</citation>
	<citation>830	6	830</citation>
	<citation>987	6	830</citation>
	<citation>1072	6	830</citation>
	<citation>1112	6	830</citation>
	<citation>1179	6	830</citation>
	<citation>1592	6	830</citation>
	<citation>1647	6	830</citation>
	<citation>1787	6	830</citation>
	<citation>1935	6	830</citation>
	<citation>1936	6	830</citation>
	<citation>1959	6	830</citation>
	<citation>1973	6	830</citation>
	<citation>2111	6	830</citation>
	<citation>2111	6	830</citation>
	<citation>2111	6	830</citation>
	<citation>2182	6	830</citation>
	<citation>408	6	830</citation>
	<citation>576	6	830</citation>
	<citation>619	6	830</citation>
	<citation>680	6	830</citation>
	<citation>680	6	830</citation>
	<citation>799	6	830</citation>
	</citations>
	<title>CORC-The Cornell Computing Language</title>
	<conference>CACM June, 1963</conference>
	<authors>
	<author>Conway, R. W.</author>
	<author>Maxwell, W. L.</author>
	</authors>
	<location>CA630619 JB March 14, 1978  10:06 AM</location>
	</document>
	<document id= '829'>
	<citations>
	<citation>2905	5	829</citation>
	<citation>829	5	829</citation>
	<citation>829	5	829</citation>
	<citation>829	5	829</citation>
	<citation>829	6	829</citation>
	</citations>
	<title>The External Language KLIPA For the URAL-2 Digital computer</title>
	<conference>CACM June, 1963</conference>
	<authors>
	<author>Turski, W.</author>
	</authors>
	<location>CA630620 JB March 14, 1978  10:04 AM</location>
	</document>
	<document id= '828'>
	<title>Incompressible flow Network Calculations</title>
	<abstract>A general method for the calculation of flows and pressures in fluid flow networks is presented.   The method is applicable to computer use.</abstract>
	<conference>CACM June, 1963</conference>
	<authors>
	<author>Cantrell, H. N.</author>
	</authors>
	<location>CA630621 JB March 14, 1978  10:03 AM</location>
	<citations>
	<citation>828	5	828</citation>
	<citation>828	5	828</citation>
	<citation>828	5	828</citation>
	</citations>
	</document>
	<document id= '827'>
	<title>Disk File Sorting</title>
	<abstract>Sorting techniques using an IBM 1401 with a random access storage device are evaluated.</abstract>
	<conference>CACM June, 1963</conference>
	<authors>
	<author>Schick, T.</author>
	</authors>
	<location>CA630622 JB March 14, 1978  10:02 AM</location>
	<citations>
	<citation>827	5	827</citation>
	<citation>827	5	827</citation>
	<citation>827	5	827</citation>
	</citations>
	</document>
	<document id= '826'>
	<citations>
	<citation>1118	4	826</citation>
	<citation>826	4	826</citation>
	<citation>948	4	826</citation>
	<citation>942	5	826</citation>
	<citation>1118	5	826</citation>
	<citation>826	5	826</citation>
	<citation>826	5	826</citation>
	<citation>826	5	826</citation>
	<citation>826	6	826</citation>
	<citation>942	6	826</citation>
	</citations>
	<title>Remarks on Fortran Subroutines for Time Series Analysis</title>
	<conference>CACM June, 1963</conference>
	<authors>
	<author>Bennett, C. M.</author>
	</authors>
	<location>CA630623 JB March 14, 1978  10:00 AM</location>
	</document>
	<document id= '825'>
	<title>PIP: A Photo-Interpretive Program for the Analysis of Spark-Chamber Data*</title>
	<abstract>An operating computer program that processes photographically recorded data is described.   The input to the program consists of spark-chamber photographs on which tracks of high-energy particles  are recorded.  The program automatically scans, measures and performs the preliminary interpretation  of these photographs.  In continuous operation a processing rate of 5,000 photographic frames per hour  is achieved.</abstract>
	<conference>CACM June, 1963</conference>
	<authors>
	<author>Rudloe, H.</author>
	<author>Deutsch, M.</author>
	<author>Marill, T.</author>
	</authors>
	<location>CA630624 JB March 14, 1978  9:59 AM</location>
	<citations>
	<citation>825	5	825</citation>
	<citation>825	5	825</citation>
	<citation>825	5	825</citation>
	</citations>
	</document>
	<document id= '824'>
	<title>DESCRIPTRAN-Automated Descriptive Geometry*</title>
	<abstract>Descriptive geometry consists of procedures originally designed to solve 3-space geometry problems  by graphical constructions and measurement instead of by computation.  However, in addition to this it  unifies and simplifies the approach to many such problems.  When one can call subroutines that compute  new coordinates that correspond to those obtainable from the graphical constructions, there is the three-way  advantage of the approach of descriptive geometry, the accuracy of computation and the speed of the digital  computer.  DESCRIPTRAN makes it possible to program many problems in 3-space with a few statements; it  consists of 15 subroutines analogous to the procedures of descriptive geometry.</abstract>
	<conference>CACM June, 1963</conference>
	<authors>
	<author>Kliphardt, R. A.</author>
	</authors>
	<location>CA630625 JB March 14, 1978  9:56 AM</location>
	<citations>
	<citation>824	5	824</citation>
	<citation>824	5	824</citation>
	<citation>824	5	824</citation>
	</citations>
	</document>
	<document id= '823'>
	<citations>
	<citation>1945	5	823</citation>
	<citation>2126	5	823</citation>
	<citation>691	5	823</citation>
	<citation>823	5	823</citation>
	<citation>823	5	823</citation>
	<citation>823	5	823</citation>
	<citation>823	6	823</citation>
	<citation>823	6	823</citation>
	<citation>823	6	823</citation>
	<citation>196	6	823</citation>
	<citation>914	6	823</citation>
	<citation>915	6	823</citation>
	<citation>917	6	823</citation>
	<citation>984	6	823</citation>
	<citation>989	6	823</citation>
	<citation>990	6	823</citation>
	<citation>1012	6	823</citation>
	<citation>1084	6	823</citation>
	<citation>1098	6	823</citation>
	<citation>1122	6	823</citation>
	<citation>1138	6	823</citation>
	<citation>1139	6	823</citation>
	<citation>1141	6	823</citation>
	<citation>1200	6	823</citation>
	<citation>1223	6	823</citation>
	<citation>1265	6	823</citation>
	<citation>1336	6	823</citation>
	<citation>1396	6	823</citation>
	<citation>1455	6	823</citation>
	<citation>1477	6	823</citation>
	<citation>1487	6	823</citation>
	<citation>1491	6	823</citation>
	<citation>1496	6	823</citation>
	<citation>1614	6	823</citation>
	<citation>1693	6	823</citation>
	<citation>404	6	823</citation>
	<citation>483	6	823</citation>
	<citation>3184	6	823</citation>
	<citation>584	6	823</citation>
	<citation>669	6	823</citation>
	<citation>680	6	823</citation>
	<citation>763	6	823</citation>
	</citations>
	<title>A Syntactic Description of BC NELLIAC</title>
	<conference>CACM July, 1963</conference>
	<authors>
	<author>Huskey, H. D.</author>
	<author>Love, R.</author>
	<author>Wirth, N.</author>
	</authors>
	<location>CA630701 JB March 14, 1978  8:51 AM</location>
	</document>
	<document id= '822'>
	<title>Real-Time Programming Specifications</title>
	<abstract>Problems in the implementation of large real-time applications are treated, and suggested guidelines  for both program and file specifications are developed.  The problems delineated also occur in systems  programming.</abstract>
	<conference>CACM July, 1963</conference>
	<authors>
	<author>Head, R. V.</author>
	</authors>
	<location>CA630702 JB March 14, 1978  8:50 AM</location>
	<citations>
	<citation>822	5	822</citation>
	<citation>822	5	822</citation>
	<citation>822	5	822</citation>
	</citations>
	</document>
	<document id= '821'>
	<citations>
	<citation>821	5	821</citation>
	<citation>821	5	821</citation>
	<citation>821	5	821</citation>
	</citations>
	<title>Further Remarks on Sampling a Tape File-III</title>
	<conference>CACM July, 1963</conference>
	<authors>
	<author>Juelich, O. C.</author>
	</authors>
	<location>CA630703 JB March 14, 1978  8:48 AM</location>
	</document>
	<document id= '820'>
	<citations>
	<citation>820	5	820</citation>
	<citation>820	5	820</citation>
	<citation>820	5	820</citation>
	</citations>
	<title>Checking for Loops in Networks</title>
	<conference>CACM July, 1963</conference>
	<authors>
	<author>Gordon, R. M.</author>
	</authors>
	<location>CA630704 JB March 14, 1978  8:47 AM</location>
	</document>
	<document id= '819'>
	<citations>
	<citation>1620	4	819</citation>
	<citation>819	4	819</citation>
	<citation>1620	5	819</citation>
	<citation>436	5	819</citation>
	<citation>819	5	819</citation>
	<citation>819	5	819</citation>
	<citation>819	5	819</citation>
	<citation>819	6	819</citation>
	<citation>436	6	819</citation>
	</citations>
	<title>Polynomial Evaluation Revised</title>
	<conference>CACM July, 1963</conference>
	<authors>
	<author>Eisman, S. H.</author>
	</authors>
	<location>CA630705 JB March 14, 1978  8:46 AM</location>
	</document>
	<document id= '818'>
	<citations>
	<citation>818	5	818</citation>
	<citation>818	5	818</citation>
	<citation>818	5	818</citation>
	</citations>
	<title>Realizing Boolean Connectives on The IBM 1620</title>
	<conference>CACM July, 1963</conference>
	<authors>
	<author>Hellerman, H.</author>
	<author>Senzig, D. N.</author>
	</authors>
	<location>CA630706 JB March 14, 1978  8:44 AM</location>
	</document>
	<document id= '817'>
	<citations>
	<citation>817	5	817</citation>
	<citation>817	5	817</citation>
	<citation>817	5	817</citation>
	</citations>
	<title>Nexcom (Algorithm 152)</title>
	<conference>CACM July, 1963</conference>
	<authors>
	<author>Hopley, J.</author>
	</authors>
	<location>CA630707 JB March 14, 1978  8:40 AM</location>
	</document>
	<document id= '816'>
	<citations>
	<citation>816	5	816</citation>
	<citation>816	5	816</citation>
	<citation>816	5	816</citation>
	</citations>
	<title>Erlang Probability for Curve Fitting (Algorithm 184)</title>
	<conference>CACM July, 1963</conference>
	<authors>
	<author>Colker, A.</author>
	</authors>
	<location>CA630708 JB March 14, 1978  8:39 AM</location>
	</document>
	<document id= '815'>
	<citations>
	<citation>815	5	815</citation>
	<citation>815	5	815</citation>
	<citation>815	5	815</citation>
	</citations>
	<title>Normal Probability for Curve Fitting (Algorithm 185)</title>
	<conference>CACM July, 1963</conference>
	<authors>
	<author>Colker, A.</author>
	</authors>
	<location>CA630709 JB March 14, 1978  8:38 AM</location>
	</document>
	<document id= '814'>
	<citations>
	<citation>814	5	814</citation>
	<citation>814	5	814</citation>
	<citation>814	5	814</citation>
	</citations>
	<title>Complex Arithmetic (Algorithm 186)</title>
	<conference>CACM July, 1963</conference>
	<authors>
	<author>Riet, R. P.</author>
	</authors>
	<location>CA630710 JB March 14, 1978  8:36 AM</location>
	</document>
	<document id= '813'>
	<citations>
	<citation>813	5	813</citation>
	<citation>813	5	813</citation>
	<citation>813	5	813</citation>
	</citations>
	<title>Differences and Derivatives (Algorithm 187)</title>
	<conference>CACM July, 1963</conference>
	<authors>
	<author>Riet, R. P.</author>
	</authors>
	<location>CA630711 JB March 14, 1978  8:35 AM</location>
	</document>
	<document id= '812'>
	<citations>
	<citation>812	5	812</citation>
	<citation>812	5	812</citation>
	<citation>812	5	812</citation>
	</citations>
	<title>Smoothing 1 (Algorithm 188)</title>
	<conference>CACM July, 1963</conference>
	<authors>
	<author>Gil, F.</author>
	</authors>
	<location>CA630712 JB March 14, 1978  8:34 AM</location>
	</document>
	<document id= '811'>
	<citations>
	<citation>811	5	811</citation>
	<citation>811	5	811</citation>
	<citation>811	5	811</citation>
	</citations>
	<title>Smoothing 2 (Algorithm 189)</title>
	<conference>CACM July, 1963</conference>
	<authors>
	<author>Gil, F.</author>
	</authors>
	<location>CA630713 JB March 14, 1978  8:33 AM</location>
	</document>
	<document id= '810'>
	<citations>
	<citation>810	5	810</citation>
	<citation>810	5	810</citation>
	<citation>810	5	810</citation>
	</citations>
	<title>Complex Power (Algorithm 190)</title>
	<conference>CACM July, 1963</conference>
	<authors>
	<author>Relph, A. P.</author>
	</authors>
	<location>CA630714 JB March 14, 1978  8:32 AM</location>
	</document>
	<document id= '809'>
	<citations>
	<citation>809	5	809</citation>
	<citation>809	5	809</citation>
	<citation>809	5	809</citation>
	</citations>
	<title>Hypergeometric (Algorithm 191)</title>
	<conference>CACM July, 1963</conference>
	<authors>
	<author>Relph, A. P.</author>
	</authors>
	<location>CA630715 JB March 14, 1978  8:30 AM</location>
	</document>
	<document id= '808'>
	<citations>
	<citation>808	5	808</citation>
	<citation>808	5	808</citation>
	<citation>808	5	808</citation>
	</citations>
	<title>Confluent Hypergeometric (Algorithm 192)</title>
	<conference>CACM July, 1963</conference>
	<authors>
	<author>Relph, A. P.</author>
	</authors>
	<location>CA630716 JB March 14, 1978  8:29 AM</location>
	</document>
	<document id= '807'>
	<citations>
	<citation>807	5	807</citation>
	<citation>807	5	807</citation>
	<citation>807	5	807</citation>
	</citations>
	<title>Reversion of Series (Algorithm 193)</title>
	<conference>CACM July, 1963</conference>
	<authors>
	<author>Fettis, H. E.</author>
	</authors>
	<location>CA630717 JB March 14, 1978  8:22 AM</location>
	</document>
	<document id= '806'>
	<citations>
	<citation>1177	4	806</citation>
	<citation>806	4	806</citation>
	<citation>806	4	806</citation>
	<citation>932	5	806</citation>
	<citation>454	5	806</citation>
	<citation>806	5	806</citation>
	<citation>806	5	806</citation>
	<citation>806	5	806</citation>
	</citations>
	<title>Remark on Certification of Matrix Inversion Procedures</title>
	<conference>CACM July, 1963</conference>
	<authors>
	<author>Moler, C.</author>
	</authors>
	<location>CA630718 JB March 14, 1978  8:21 AM</location>
	</document>
	<document id= '805'>
	<citations>
	<citation>805	5	805</citation>
	<citation>805	5	805</citation>
	<citation>805	5	805</citation>
	</citations>
	<title>Newton Maehly (Algorithm 105)</title>
	<conference>CACM July, 1963</conference>
	<authors>
	<author>Kondo, J.</author>
	</authors>
	<location>CA630719 JB March 14, 1978  8:20 AM</location>
	</document>
	<document id= '804'>
	<citations>
	<citation>804	5	804</citation>
	<citation>804	5	804</citation>
	<citation>804	5	804</citation>
	</citations>
	<title>Exponentiation of Series (Algorithms 134)</title>
	<conference>CACM July, 1963</conference>
	<authors>
	</authors>
	<location>CA630720 JB March 14, 1978  8:19 AM</location>
	</document>
	<document id= '803'>
	<citations>
	<citation>803	5	803</citation>
	<citation>803	5	803</citation>
	<citation>803	5	803</citation>
	</citations>
	<title>Syminv2 (Algorithm 150)</title>
	<conference>CACM July, 1963</conference>
	<authors>
	</authors>
	<location>CA630721 JB March 14, 1978  8:16 AM</location>
	</document>
	<document id= '802'>
	<citations>
	<citation>802	5	802</citation>
	<citation>802	5	802</citation>
	<citation>802	5	802</citation>
	</citations>
	<title>SYMINV2 (Algorithm 150)</title>
	<conference>CACM July, 1963</conference>
	<authors>
	<author>Rutishauser, H.</author>
	</authors>
	<location>CA630722JB March 14, 1978  8:15 AM</location>
	</document>
	<document id= '801'>
	<citations>
	<citation>801	5	801</citation>
	<citation>801	5	801</citation>
	<citation>801	5	801</citation>
	</citations>
	<title>Least Squares Solution with Constraints (Algorithm 177)</title>
	<conference>CACM July, 1963</conference>
	<authors>
	<author>Synge, M. J.</author>
	</authors>
	<location>CA630723 JB March 14, 1978  8:14 AM</location>
	</document>
	<document id= '800'>
	<citations>
	<citation>1471	5	800</citation>
	<citation>1774	5	800</citation>
	<citation>800	5	800</citation>
	<citation>800	5	800</citation>
	<citation>800	5	800</citation>
	<citation>800	6	800</citation>
	<citation>800	6	800</citation>
	<citation>1173	6	800</citation>
	<citation>271	6	800</citation>
	<citation>276	6	800</citation>
	</citations>
	<title>The Linking Segment Subprogram Language and Linking Loader</title>
	<conference>CACM July, 1963</conference>
	<authors>
	<author>McCarthy, J.</author>
	<author>Corbato, F. J.</author>
	<author>Daggett, M. M.</author>
	</authors>
	<location>CA630724 JB March 14, 1978  8:13 AM</location>
	</document>
	<document id= '799'>
	<title>Design of a Separable Transition-Diagram Compiler*</title>
	<abstract>A COBOL compiler design is presented which is compact enough to permit rapid, one-pass compilation  of a large subset of COBOL on a moderately large computer.  Versions of the same compiler for smaller  machines require only two working tapes plus a compiler tape.  The methods given are largely applicable  to the construction of ALGOL compilers.</abstract>
	<conference>CACM July, 1963</conference>
	<authors>
	<author>Conway, M. E.</author>
	</authors>
	<location>CA630725 JB March 14, 1978  8:11 AM</location>
	<citations>
	<citation>222	4	799</citation>
	<citation>1046	4	799</citation>
	<citation>1105	4	799</citation>
	<citation>1139	4	799</citation>
	<citation>1139	4	799</citation>
	<citation>1140	4	799</citation>
	<citation>1234	4	799</citation>
	<citation>1263	4	799</citation>
	<citation>1265	4	799</citation>
	<citation>1496	4	799</citation>
	<citation>1781	4	799</citation>
	<citation>1824	4	799</citation>
	<citation>1947	4	799</citation>
	<citation>2126	4	799</citation>
	<citation>2546	4	799</citation>
	<citation>464	4	799</citation>
	<citation>556	4	799</citation>
	<citation>584	4	799</citation>
	<citation>631	4	799</citation>
	<citation>653	4	799</citation>
	<citation>680	4	799</citation>
	<citation>763	4	799</citation>
	<citation>795	4	799</citation>
	<citation>799	4	799</citation>
	<citation>799	4	799</citation>
	<citation>799	4	799</citation>
	<citation>799	4	799</citation>
	<citation>945	4	799</citation>
	<citation>945	5	799</citation>
	<citation>1323	5	799</citation>
	<citation>1358	5	799</citation>
	<citation>1380	5	799</citation>
	<citation>1665	5	799</citation>
	<citation>1781	5	799</citation>
	<citation>1787	5	799</citation>
	<citation>1989	5	799</citation>
	<citation>399	5	799</citation>
	<citation>2112	5	799</citation>
	<citation>2534	5	799</citation>
	<citation>2541	5	799</citation>
	<citation>2698	5	799</citation>
	<citation>2733	5	799</citation>
	<citation>2820	5	799</citation>
	<citation>404	5	799</citation>
	<citation>82	5	799</citation>
	<citation>3073	5	799</citation>
	<citation>3155	5	799</citation>
	<citation>799	5	799</citation>
	<citation>799	5	799</citation>
	<citation>799	5	799</citation>
	<citation>830	6	799</citation>
	<citation>123	6	799</citation>
	<citation>196	6	799</citation>
	<citation>196	6	799</citation>
	<citation>196	6	799</citation>
	<citation>919	6	799</citation>
	<citation>990	6	799</citation>
	<citation>1007	6	799</citation>
	<citation>1046	6	799</citation>
	<citation>1131	6	799</citation>
	<citation>1139	6	799</citation>
	<citation>1140	6	799</citation>
	<citation>1141	6	799</citation>
	<citation>1149	6	799</citation>
	<citation>1198	6	799</citation>
	<citation>1215	6	799</citation>
	<citation>1215	6	799</citation>
	<citation>1223	6	799</citation>
	<citation>1265	6	799</citation>
	<citation>1303	6	799</citation>
	<citation>1323	6	799</citation>
	<citation>1358	6	799</citation>
	<citation>1366	6	799</citation>
	<citation>1421	6	799</citation>
	<citation>1421	6	799</citation>
	<citation>1460	6	799</citation>
	<citation>1460	6	799</citation>
	<citation>1462	6	799</citation>
	<citation>1463	6	799</citation>
	<citation>1467	6	799</citation>
	<citation>1468	6	799</citation>
	<citation>1477	6	799</citation>
	<citation>1477	6	799</citation>
	<citation>1491	6	799</citation>
	<citation>1491	6	799</citation>
	<citation>1491	6	799</citation>
	<citation>1496	6	799</citation>
	<citation>1496	6	799</citation>
	<citation>1531	6	799</citation>
	<citation>1535	6	799</citation>
	<citation>1565	6	799</citation>
	<citation>1601	6	799</citation>
	<citation>1602	6	799</citation>
	<citation>1613	6	799</citation>
	<citation>1614	6	799</citation>
	<citation>1626	6	799</citation>
	<citation>1641	6	799</citation>
	<citation>1781	6	799</citation>
	<citation>1781	6	799</citation>
	<citation>1781	6	799</citation>
	<citation>1781	6	799</citation>
	<citation>1787	6	799</citation>
	<citation>1787	6	799</citation>
	<citation>1788	6	799</citation>
	<citation>205	6	799</citation>
	<citation>205	6	799</citation>
	<citation>224	6	799</citation>
	<citation>224	6	799</citation>
	<citation>249	6	799</citation>
	<citation>267	6	799</citation>
	<citation>288	6	799</citation>
	<citation>1959	6	799</citation>
	<citation>1973	6	799</citation>
	<citation>316	6	799</citation>
	<citation>378	6	799</citation>
	<citation>381	6	799</citation>
	<citation>398	6	799</citation>
	<citation>2110	6	799</citation>
	<citation>2110	6	799</citation>
	<citation>2111	6	799</citation>
	<citation>11	6	799</citation>
	<citation>2179	6	799</citation>
	<citation>2182	6	799</citation>
	<citation>2204	6	799</citation>
	<citation>2247	6	799</citation>
	<citation>2423	6	799</citation>
	<citation>2534	6	799</citation>
	<citation>2556	6	799</citation>
	<citation>2732	6	799</citation>
	<citation>2786	6	799</citation>
	<citation>404	6	799</citation>
	<citation>410	6	799</citation>
	<citation>463	6	799</citation>
	<citation>464	6	799</citation>
	<citation>483	6	799</citation>
	<citation>3073	6	799</citation>
	<citation>3184	6	799</citation>
	<citation>3184	6	799</citation>
	<citation>3184	6	799</citation>
	<citation>3184	6	799</citation>
	<citation>3186	6	799</citation>
	<citation>3188	6	799</citation>
	<citation>584	6	799</citation>
	<citation>600	6	799</citation>
	<citation>631	6	799</citation>
	<citation>680	6	799</citation>
	<citation>680	6	799</citation>
	<citation>691	6	799</citation>
	<citation>729	6	799</citation>
	<citation>731	6	799</citation>
	<citation>763	6	799</citation>
	<citation>763	6	799</citation>
	<citation>799	6	799</citation>
	<citation>799	6	799</citation>
	<citation>799	6	799</citation>
	<citation>799	6	799</citation>
	<citation>799	6	799</citation>
	<citation>799	6	799</citation>
	<citation>799	6	799</citation>
	<citation>799	6	799</citation>
	<citation>799	6	799</citation>
	<citation>799	6	799</citation>
	<citation>799	6	799</citation>
	<citation>799	6	799</citation>
	<citation>799	6	799</citation>
	<citation>799	6	799</citation>
	<citation>799	6	799</citation>
	</citations>
	</document>
	<document id= '798'>
	<citations>
	<citation>1050	4	798</citation>
	<citation>1102	4	798</citation>
	<citation>378	4	798</citation>
	<citation>3008	4	798</citation>
	<citation>731	4	798</citation>
	<citation>798	4	798</citation>
	<citation>209	5	798</citation>
	<citation>798	5	798</citation>
	<citation>798	5	798</citation>
	<citation>798	5	798</citation>
	</citations>
	<title>A Catalogue Entry Retrieval System</title>
	<conference>CACM July, 1963</conference>
	<authors>
	<author>Scheff, B. H.</author>
	</authors>
	<location>CA630726 JB March 14, 1978  8:08 AM</location>
	</document>
	<document id= '797'>
	<citations>
	<citation>1084	5	797</citation>
	<citation>797	5	797</citation>
	<citation>797	5	797</citation>
	<citation>797	5	797</citation>
	<citation>868	6	797</citation>
	<citation>603	6	797</citation>
	<citation>644	6	797</citation>
	<citation>669	6	797</citation>
	<citation>791	6	797</citation>
	<citation>797	6	797</citation>
	</citations>
	<title>American Standard Code for Information Interchange</title>
	<conference>CACM August, 1963</conference>
	<location>CA630801 JB March 13, 1978  8:55 PM</location>
	</document>
	<document id= '796'>
	<title>SABRAG, A Time-Sharing Low-Cost Computer</title>
	<abstract>The serial SABRAC computer designed and built in the Scientific Department of the Israel defense  Ministry has a 5000-location magnetic drum, main store.  To avoid a need to resort to optimum programming  techniques and to increase its overall efficiency the computer has also been given a 224-word ferrite  core store from which the program is obeyed.  Transfers between the core and drum stores and to and from  the twin paper-tape input and output channels are all available autonomously (concurrently, time-shared).   Multiplication and division orders are also autonomous, so that the machine may be executing up to three  orders simultaneously.  All functions naturally are interlocked.  A number of other advanced orders and  facilities are also incorporated.In particular, an "Execute" order permits a temporary jump for up  to four orders and a second modifier register permits double modification in general and relative addressing  of subroutines in particular.  Thus the overall effective speed of the machine is muchhigher than its  basic specification would lead one to expect and its design indicates one way in which the concepts of  time sharing may be incorporated in "low-cost" computers.</abstract>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>Lehman, M.</author>
	<author>Netter, Z.</author>
	<author>Eshed, R.</author>
	</authors>
	<location>CA630802 JB March 13, 1978  8:54 PM</location>
	<citations>
	<citation>3193	4	796</citation>
	<citation>796	4	796</citation>
	<citation>491	5	796</citation>
	<citation>796	5	796</citation>
	<citation>796	5	796</citation>
	<citation>796	5	796</citation>
	</citations>
	</document>
	<document id= '795'>
	<citations>
	<citation>1046	4	795</citation>
	<citation>1105	4	795</citation>
	<citation>1139	4	795</citation>
	<citation>1140	4	795</citation>
	<citation>1234	4	795</citation>
	<citation>1263	4	795</citation>
	<citation>1265	4	795</citation>
	<citation>1496	4	795</citation>
	<citation>1781	4	795</citation>
	<citation>1824	4	795</citation>
	<citation>2126	4	795</citation>
	<citation>2546	4	795</citation>
	<citation>464	4	795</citation>
	<citation>2616	4	795</citation>
	<citation>584	4	795</citation>
	<citation>631	4	795</citation>
	<citation>653	4	795</citation>
	<citation>680	4	795</citation>
	<citation>763	4	795</citation>
	<citation>795	4	795</citation>
	<citation>795	4	795</citation>
	<citation>799	4	795</citation>
	<citation>945	4	795</citation>
	<citation>931	5	795</citation>
	<citation>404	5	795</citation>
	<citation>795	5	795</citation>
	<citation>795	5	795</citation>
	<citation>795	5	795</citation>
	</citations>
	<title>Debugging Systems at the Source Language Level</title>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>Ferguson, H. E.</author>
	<author>Berner, E.</author>
	</authors>
	<location>CA630803 JB March 13, 1978  8:46 PM</location>
	</document>
	<document id= '794'>
	<title>A List-Type Storage Technique for Alphameric Information</title>
	<abstract>A method which is economic in terms of space and time is proposed for the storage and manipulation  of character strings of arbitrary length in a fixed word-length computer.  The method is illustrated  in an application to Algol-type identifiers in an Algol-like block structure.</abstract>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>Bowlden, H. J.</author>
	</authors>
	<location>CA630804 JB March 13, 1978  8:45 PM</location>
	<citations>
	<citation>794	4	794</citation>
	<citation>1051	5	794</citation>
	<citation>1062	5	794</citation>
	<citation>254	5	794</citation>
	<citation>794	5	794</citation>
	<citation>794	5	794</citation>
	<citation>794	5	794</citation>
	<citation>210	6	794</citation>
	<citation>378	6	794</citation>
	<citation>406	6	794</citation>
	<citation>464	6	794</citation>
	<citation>731	6	794</citation>
	<citation>793	6	794</citation>
	<citation>794	6	794</citation>
	<citation>794	6	794</citation>
	</citations>
	</document>
	<document id= '793'>
	<citations>
	<citation>1050	4	793</citation>
	<citation>1549	4	793</citation>
	<citation>2723	4	793</citation>
	<citation>2882	4	793</citation>
	<citation>731	4	793</citation>
	<citation>793	4	793</citation>
	<citation>1051	5	793</citation>
	<citation>627	5	793</citation>
	<citation>793	5	793</citation>
	<citation>793	5	793</citation>
	<citation>793	5	793</citation>
	<citation>210	6	793</citation>
	<citation>378	6	793</citation>
	<citation>406	6	793</citation>
	<citation>731	6	793</citation>
	<citation>793	6	793</citation>
	<citation>794	6	793</citation>
	</citations>
	<title>Mapped List Structures</title>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>Baecker, H. D.</author>
	</authors>
	<location>CA630805 JB March 13, 1978  8:43 PM</location>
	</document>
	<document id= '792'>
	<citations>
	<citation>792	5	792</citation>
	<citation>792	5	792</citation>
	<citation>792	5	792</citation>
	</citations>
	<title>Multiple-Precision Binary-To-Decimal Integer Conversion Using Only Addition And Subtraction</title>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>Keyes, D. F.</author>
	<author>Moore, D. P.</author>
	</authors>
	<location>CA630806 JB March 13, 1978  8:42 PM</location>
	</document>
	<document id= '791'>
	<citations>
	<citation>1084	5	791</citation>
	<citation>791	5	791</citation>
	<citation>791	5	791</citation>
	<citation>791	5	791</citation>
	<citation>868	6	791</citation>
	<citation>603	6	791</citation>
	<citation>644	6	791</citation>
	<citation>669	6	791</citation>
	<citation>791	6	791</citation>
	<citation>797	6	791</citation>
	</citations>
	<title>Character Manipulation in 7090 Fortran</title>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>Smith, D. D.</author>
	</authors>
	<location>CA630807 JB March 13, 1978  8:41 PM</location>
	</document>
	<document id= '790'>
	<citations>
	<citation>790	5	790</citation>
	<citation>790	5	790</citation>
	<citation>790	5	790</citation>
	</citations>
	<title>Zersol (Algorithm 194)</title>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>Domingo, C.</author>
	</authors>
	<location>CA630808 JB March 13, 1978  8:40 PM</location>
	</document>
	<document id= '789'>
	<citations>
	<citation>789	5	789</citation>
	<citation>789	5	789</citation>
	<citation>789	5	789</citation>
	</citations>
	<title>Bandsolve (Algorithm 195)</title>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>Thurnau, D. H.</author>
	</authors>
	<location>CA630809 JB March 13, 1978  8:39 PM</location>
	</document>
	<document id= '788'>
	<citations>
	<citation>788	5	788</citation>
	<citation>788	5	788</citation>
	<citation>788	5	788</citation>
	</citations>
	<title>Muller's Method for Finding Roots of an Arbitrary Function (Algorithm 196)</title>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>Roman, R. D.</author>
	</authors>
	<location>CA630810 JB March 13, 1978  8:38 PM</location>
	</document>
	<document id= '787'>
	<citations>
	<citation>787	5	787</citation>
	<citation>787	5	787</citation>
	<citation>787	5	787</citation>
	</citations>
	<title>Matrix Division (Algorithm 197)</title>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>Wells, M.</author>
	</authors>
	<location>CA630811 JB March 13, 1978  8:37 PM</location>
	</document>
	<document id= '786'>
	<citations>
	<citation>1352	5	786</citation>
	<citation>2048	5	786</citation>
	<citation>2074	5	786</citation>
	<citation>786	5	786</citation>
	<citation>786	5	786</citation>
	<citation>786	5	786</citation>
	<citation>834	6	786</citation>
	<citation>834	6	786</citation>
	<citation>834	6	786</citation>
	<citation>872	6	786</citation>
	<citation>872	6	786</citation>
	<citation>1040	6	786</citation>
	<citation>1092	6	786</citation>
	<citation>1241	6	786</citation>
	<citation>1273	6	786</citation>
	<citation>324	6	786</citation>
	<citation>429	6	786</citation>
	<citation>429	6	786</citation>
	<citation>429	6	786</citation>
	<citation>570	6	786</citation>
	<citation>621	6	786</citation>
	<citation>786	6	786</citation>
	<citation>786	6	786</citation>
	<citation>786	6	786</citation>
	</citations>
	<title>Adaptive Integration and Multiple Integration (Algorithm 198)</title>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>McKeeman, W. M.</author>
	</authors>
	<location>CA630812 JB March 13, 1978  8:35 PM</location>
	</document>
	<document id= '785'>
	<citations>
	<citation>2269	5	785</citation>
	<citation>3115	5	785</citation>
	<citation>785	5	785</citation>
	<citation>785	5	785</citation>
	<citation>785	5	785</citation>
	<citation>907	6	785</citation>
	<citation>2045	6	785</citation>
	<citation>2417	6	785</citation>
	<citation>2466	6	785</citation>
	<citation>2884	6	785</citation>
	<citation>579	6	785</citation>
	<citation>785	6	785</citation>
	<citation>785	6	785</citation>
	</citations>
	<title>Conversions Between Calendar Date And Julian day Number (Algorithm 199)</title>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>Tantzen, R. G.</author>
	</authors>
	<location>CA630813 JB March 13, 1978  8:34 PM</location>
	</document>
	<document id= '784'>
	<citations>
	<citation>784	5	784</citation>
	<citation>784	5	784</citation>
	<citation>784	5	784</citation>
	</citations>
	<title>Normal Random (Algorithm 200)</title>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>George, R.</author>
	</authors>
	<location>CA630814 JB March 13, 1978  8:33 PM</location>
	</document>
	<document id= '783'>
	<citations>
	<citation>2679	5	783</citation>
	<citation>783	5	783</citation>
	<citation>783	5	783</citation>
	<citation>783	5	783</citation>
	<citation>970	6	783</citation>
	<citation>1175	6	783</citation>
	<citation>1190	6	783</citation>
	<citation>1228	6	783</citation>
	<citation>1969	6	783</citation>
	<citation>1997	6	783</citation>
	<citation>308	6	783</citation>
	<citation>2042	6	783</citation>
	<citation>3187	6	783</citation>
	<citation>507	6	783</citation>
	<citation>716	6	783</citation>
	<citation>783	6	783</citation>
	</citations>
	<title>Shellsort (Algorithm 201)</title>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>Boothroyd, J.</author>
	</authors>
	<location>CA630815 JB March 13, 1978  8:32 PM</location>
	</document>
	<document id= '782'>
	<citations>
	<citation>782	5	782</citation>
	<citation>782	5	782</citation>
	<citation>782	5	782</citation>
	</citations>
	<title>Telescope 1 (Algorithm 37)</title>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>Bridges, J. F.</author>
	</authors>
	<location>CA630816 JB March 13, 1978  8:31 PM</location>
	</document>
	<document id= '781'>
	<citations>
	<citation>781	5	781</citation>
	<citation>781	5	781</citation>
	<citation>781	5	781</citation>
	</citations>
	<title>Telescope 2 (Algorithm 38)</title>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>Bridges, J. F.</author>
	</authors>
	<location>CA630817 JB March 13, 1978  8:30 PM</location>
	</document>
	<document id= '780'>
	<citations>
	<citation>780	5	780</citation>
	<citation>780	5	780</citation>
	<citation>780	5	780</citation>
	</citations>
	<title>Algorithm 42 INVERT, Alg.107 Gauss's Method, Alg.120 Inversion II, and gjr</title>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>Naur, P.</author>
	</authors>
	<location>CA630818 JB March 13, 1978  8:29 PM</location>
	</document>
	<document id= '779'>
	<citations>
	<citation>779	5	779</citation>
	<citation>779	5	779</citation>
	<citation>779	5	779</citation>
	</citations>
	<title>CROUT II (Algorithm 43)</title>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>Domingo, C.</author>
	<author>Gil, F.</author>
	</authors>
	<location>CA630819 JB March 13, 1978  8:27 PM</location>
	</document>
	<document id= '778'>
	<citations>
	<citation>1818	5	778</citation>
	<citation>778	5	778</citation>
	<citation>778	5	778</citation>
	<citation>778	5	778</citation>
	<citation>778	6	778</citation>
	</citations>
	<title>Associated Legendre Functions of the First Kind for Real or Imaginary Arguments (Algorithm 47)</title>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>George, R.</author>
	</authors>
	<location>CA630820 JB March 13, 1978  8:26 PM</location>
	</document>
	<document id= '777'>
	<citations>
	<citation>777	5	777</citation>
	<citation>777	5	777</citation>
	<citation>777	5	777</citation>
	</citations>
	<title>A Set of Test Matrices (Algorithm 52)</title>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>Naur, P.</author>
	</authors>
	<location>CA630821 JB March 13, 1978  8:24 PM</location>
	</document>
	<document id= '776'>
	<citations>
	<citation>3054	5	776</citation>
	<citation>776	5	776</citation>
	<citation>776	5	776</citation>
	<citation>776	5	776</citation>
	<citation>1175	6	776</citation>
	<citation>1880	6	776</citation>
	<citation>1919	6	776</citation>
	<citation>1969	6	776</citation>
	<citation>1980	6	776</citation>
	<citation>1997	6	776</citation>
	<citation>307	6	776</citation>
	<citation>308	6	776</citation>
	<citation>309	6	776</citation>
	<citation>2017	6	776</citation>
	<citation>2679	6	776</citation>
	<citation>776	6	776</citation>
	</citations>
	<title>Partition, Quicksort, and Find (Algorithm 62, 64, &amp; 65)</title>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>Randell, B.</author>
	<author>Russell, L. J.</author>
	</authors>
	<location>CA630822 JB March 13, 1978  8:23 PM</location>
	</document>
	<document id= '775'>
	<citations>
	<citation>775	5	775</citation>
	<citation>775	5	775</citation>
	<citation>775	5	775</citation>
	</citations>
	<title>Interpolation, Differentiation, and Integration (Algorithm 77)</title>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>Hennion, P. E.</author>
	</authors>
	<location>CA630823 JB March 13, 1978  8:22 PM</location>
	</document>
	<document id= '774'>
	<citations>
	<citation>2349	5	774</citation>
	<citation>774	5	774</citation>
	<citation>774	5	774</citation>
	<citation>774	5	774</citation>
	<citation>1648	6	774</citation>
	<citation>1716	6	774</citation>
	<citation>1794	6	774</citation>
	<citation>1894	6	774</citation>
	<citation>2043	6	774</citation>
	<citation>501	6	774</citation>
	<citation>613	6	774</citation>
	<citation>774	6	774</citation>
	</citations>
	<title>Jacobi (Algorithm 85)</title>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>Naur, P.</author>
	</authors>
	<location>CA630824 JB March 13, 1978  8:21 PM</location>
	</document>
	<document id= '773'>
	<citations>
	<citation>2061	5	773</citation>
	<citation>773	5	773</citation>
	<citation>773	5	773</citation>
	<citation>773	5	773</citation>
	<citation>1140	6	773</citation>
	<citation>1141	6	773</citation>
	<citation>1477	6	773</citation>
	<citation>1491	6	773</citation>
	<citation>1825	6	773</citation>
	<citation>773	6	773</citation>
	</citations>
	<title>Matrix Inversion (Algorithm 140)</title>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>George, R.</author>
	</authors>
	<location>CA630825 JB March 13, 1978  8:20 PM</location>
	</document>
	<document id= '772'>
	<citations>
	<citation>772	5	772</citation>
	<citation>772	5	772</citation>
	<citation>772	5	772</citation>
	</citations>
	<title>GOMORY (Algorithm 153)</title>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>Lefkowitz, B.</author>
	<author>Esopo, D. A.</author>
	</authors>
	<location>CA630826 JB March 13, 1978  8:19 PM</location>
	</document>
	<document id= '771'>
	<citations>
	<citation>771	5	771</citation>
	<citation>771	5	771</citation>
	<citation>771	5	771</citation>
	</citations>
	<title>Combination in Lexicographical Order (Algorithm 154)</title>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>Bosworth, K. M.</author>
	</authors>
	<location>CA630827 JB March 13, 1978  8:18 PM</location>
	</document>
	<document id= '770'>
	<citations>
	<citation>770	5	770</citation>
	<citation>770	5	770</citation>
	<citation>770	5	770</citation>
	</citations>
	<title>Combination in Any Order (Algorithm 155)</title>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>Bosworth, K. M.</author>
	</authors>
	<location>CA630828 JB March 13, 1978  8:17 PM</location>
	</document>
	<document id= '769'>
	<citations>
	<citation>769	5	769</citation>
	<citation>769	5	769</citation>
	<citation>769	5	769</citation>
	</citations>
	<title>Algebra of Sets (Algorithm 156)</title>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>Bosworth, K. M.</author>
	</authors>
	<location>CA630829 JB March 13, 1978  8:15 PM</location>
	</document>
	<document id= '768'>
	<citations>
	<citation>768	5	768</citation>
	<citation>768	5	768</citation>
	<citation>768	5	768</citation>
	</citations>
	<title>Certification of Algorithm 160 Combinatorial of M Things Taken N at a Time [M. L. Wolfson and H. V. Wright, Comm. ACM, Apr. 1963]</title>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>Thoro, D.</author>
	</authors>
	<location>CA630830 JB March 13, 1978  8:14 PM</location>
	</document>
	<document id= '767'>
	<citations>
	<citation>767	5	767</citation>
	<citation>767	5	767</citation>
	<citation>767	5	767</citation>
	</citations>
	<title>Certification of Algorithm 161 Combinatorial of M Things Taken One at a Time, Two at a Time, Up to N at a Time [M. L. Wolfson and H. V. Wright, Comm. ACM, Apr. 1963]</title>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>Thoro, D.</author>
	</authors>
	<location>CA630831 JB March 13, 1978  8:13 PM</location>
	</document>
	<document id= '766'>
	<citations>
	<citation>766	5	766</citation>
	<citation>766	5	766</citation>
	<citation>766	5	766</citation>
	</citations>
	<title>XY-move Plotting (Algorithm 162)</title>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>Fletcher, W. E.</author>
	</authors>
	<location>CA630832 JB March 13, 1978  8:12 PM</location>
	</document>
	<document id= '765'>
	<citations>
	<citation>765	5	765</citation>
	<citation>765	5	765</citation>
	<citation>765	5	765</citation>
	</citations>
	<title>Orthogonal Polynomial Least Squares Surface Fit (Algorithm 164)</title>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>Bitterli, C. V.</author>
	</authors>
	<location>CA630833 JB March 13, 1978  8:10 PM</location>
	</document>
	<document id= '764'>
	<citations>
	<citation>764	5	764</citation>
	<citation>764	5	764</citation>
	<citation>764	5	764</citation>
	</citations>
	<title>Reduction of a Matrix Containing Polynomial Elements (Algorithm 170)</title>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>Hennion, P. E.</author>
	</authors>
	<location>CA630834 JB March 13, 1978  8:09 PM</location>
	</document>
	<document id= '763'>
	<citations>
	<citation>249	4	763</citation>
	<citation>254	4	763</citation>
	<citation>267	4	763</citation>
	<citation>272	4	763</citation>
	<citation>1046	4	763</citation>
	<citation>1102	4	763</citation>
	<citation>1105	4	763</citation>
	<citation>1109	4	763</citation>
	<citation>1139	4	763</citation>
	<citation>1139	4	763</citation>
	<citation>1139	4	763</citation>
	<citation>1140	4	763</citation>
	<citation>1140	4	763</citation>
	<citation>1141	4	763</citation>
	<citation>1188	4	763</citation>
	<citation>1215	4	763</citation>
	<citation>1223	4	763</citation>
	<citation>1234	4	763</citation>
	<citation>1263	4	763</citation>
	<citation>1265	4	763</citation>
	<citation>1265	4	763</citation>
	<citation>1306	4	763</citation>
	<citation>1464	4	763</citation>
	<citation>1491	4	763</citation>
	<citation>1496	4	763</citation>
	<citation>1647	4	763</citation>
	<citation>1665	4	763</citation>
	<citation>1767	4	763</citation>
	<citation>1781	4	763</citation>
	<citation>1781	4	763</citation>
	<citation>1781	4	763</citation>
	<citation>1787	4	763</citation>
	<citation>1787	4	763</citation>
	<citation>1792	4	763</citation>
	<citation>1824	4	763</citation>
	<citation>1949	4	763</citation>
	<citation>321	4	763</citation>
	<citation>364	4	763</citation>
	<citation>2059	4	763</citation>
	<citation>2126	4	763</citation>
	<citation>2126	4	763</citation>
	<citation>405	4	763</citation>
	<citation>2546	4	763</citation>
	<citation>435	4	763</citation>
	<citation>437	4	763</citation>
	<citation>438	4	763</citation>
	<citation>463	4	763</citation>
	<citation>464	4	763</citation>
	<citation>483	4	763</citation>
	<citation>491	4	763</citation>
	<citation>2732	4	763</citation>
	<citation>560	4	763</citation>
	<citation>583	4	763</citation>
	<citation>584	4	763</citation>
	<citation>3073	4	763</citation>
	<citation>627	4	763</citation>
	<citation>631	4	763</citation>
	<citation>631	4	763</citation>
	<citation>632	4	763</citation>
	<citation>642	4	763</citation>
	<citation>644	4	763</citation>
	<citation>653	4	763</citation>
	<citation>653	4	763</citation>
	<citation>680	4	763</citation>
	<citation>680	4	763</citation>
	<citation>761	4	763</citation>
	<citation>762	4	763</citation>
	<citation>763	4	763</citation>
	<citation>763	4	763</citation>
	<citation>763	4	763</citation>
	<citation>763	4	763</citation>
	<citation>763	4	763</citation>
	<citation>795	4	763</citation>
	<citation>799	4	763</citation>
	<citation>123	4	763</citation>
	<citation>140	4	763</citation>
	<citation>919	4	763</citation>
	<citation>945	4	763</citation>
	<citation>989	4	763</citation>
	<citation>196	5	763</citation>
	<citation>1215	5	763</citation>
	<citation>224	5	763</citation>
	<citation>1781	5	763</citation>
	<citation>1787	5	763</citation>
	<citation>1945	5	763</citation>
	<citation>2603	5	763</citation>
	<citation>404	5	763</citation>
	<citation>412	5	763</citation>
	<citation>631	5	763</citation>
	<citation>763	5	763</citation>
	<citation>763	5	763</citation>
	<citation>763	5	763</citation>
	<citation>823	6	763</citation>
	<citation>123	6	763</citation>
	<citation>196	6	763</citation>
	<citation>196	6	763</citation>
	<citation>914	6	763</citation>
	<citation>915	6	763</citation>
	<citation>917	6	763</citation>
	<citation>919	6	763</citation>
	<citation>984	6	763</citation>
	<citation>989	6	763</citation>
	<citation>990	6	763</citation>
	<citation>990	6	763</citation>
	<citation>1007	6	763</citation>
	<citation>1012	6	763</citation>
	<citation>1025	6	763</citation>
	<citation>1046	6	763</citation>
	<citation>1084	6	763</citation>
	<citation>1098	6	763</citation>
	<citation>1122	6	763</citation>
	<citation>1131	6	763</citation>
	<citation>1138	6	763</citation>
	<citation>1139	6	763</citation>
	<citation>1139	6	763</citation>
	<citation>1140	6	763</citation>
	<citation>1141	6	763</citation>
	<citation>1141	6	763</citation>
	<citation>1149	6	763</citation>
	<citation>1198	6	763</citation>
	<citation>1200	6	763</citation>
	<citation>1215	6	763</citation>
	<citation>1215	6	763</citation>
	<citation>1223	6	763</citation>
	<citation>1223	6	763</citation>
	<citation>1265	6	763</citation>
	<citation>1265	6	763</citation>
	<citation>1303	6	763</citation>
	<citation>1323	6	763</citation>
	<citation>1336	6	763</citation>
	<citation>1358	6	763</citation>
	<citation>1366	6	763</citation>
	<citation>1396	6	763</citation>
	<citation>1421	6	763</citation>
	<citation>1455	6	763</citation>
	<citation>1460	6	763</citation>
	<citation>1462	6	763</citation>
	<citation>1463	6	763</citation>
	<citation>1467	6	763</citation>
	<citation>1468	6	763</citation>
	<citation>1477	6	763</citation>
	<citation>1477	6	763</citation>
	<citation>1487	6	763</citation>
	<citation>1491	6	763</citation>
	<citation>1491	6	763</citation>
	<citation>1491	6	763</citation>
	<citation>1491	6	763</citation>
	<citation>1496	6	763</citation>
	<citation>1496	6	763</citation>
	<citation>1496	6	763</citation>
	<citation>1531	6	763</citation>
	<citation>1535	6	763</citation>
	<citation>1565	6	763</citation>
	<citation>1601	6	763</citation>
	<citation>1602	6	763</citation>
	<citation>1613	6	763</citation>
	<citation>1614	6	763</citation>
	<citation>1626	6	763</citation>
	<citation>1641	6	763</citation>
	<citation>1781	6	763</citation>
	<citation>1787	6	763</citation>
	<citation>1788	6	763</citation>
	<citation>205	6	763</citation>
	<citation>224	6	763</citation>
	<citation>224	6	763</citation>
	<citation>224	6	763</citation>
	<citation>249	6	763</citation>
	<citation>288	6	763</citation>
	<citation>316	6	763</citation>
	<citation>381	6	763</citation>
	<citation>398	6	763</citation>
	<citation>11	6	763</citation>
	<citation>404	6	763</citation>
	<citation>410	6	763</citation>
	<citation>463	6	763</citation>
	<citation>464	6	763</citation>
	<citation>483	6	763</citation>
	<citation>483	6	763</citation>
	<citation>3184	6	763</citation>
	<citation>3188	6	763</citation>
	<citation>584	6	763</citation>
	<citation>584	6	763</citation>
	<citation>600	6	763</citation>
	<citation>669	6	763</citation>
	<citation>680	6	763</citation>
	<citation>680	6	763</citation>
	<citation>691	6	763</citation>
	<citation>763	6	763</citation>
	<citation>763	6	763</citation>
	<citation>763	6	763</citation>
	<citation>763	6	763</citation>
	<citation>763	6	763</citation>
	<citation>799	6	763</citation>
	<citation>799	6	763</citation>
	</citations>
	<title>A Syntax Controlled Generator of Formal Language Processors</title>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>Eickel, J.</author>
	<author>Bauer, F. L.</author>
	<author>Paul, M.</author>
	<author>Samelson, K.</author>
	</authors>
	<location>CA630835 JB March 13, 1978  8:08 PM</location>
	</document>
	<document id= '762'>
	<citations>
	<citation>249	4	762</citation>
	<citation>254	4	762</citation>
	<citation>272	4	762</citation>
	<citation>1102	4	762</citation>
	<citation>1102	4	762</citation>
	<citation>1109	4	762</citation>
	<citation>1140	4	762</citation>
	<citation>1142	4	762</citation>
	<citation>1188	4	762</citation>
	<citation>1306	4	762</citation>
	<citation>1425	4	762</citation>
	<citation>1464	4	762</citation>
	<citation>1491	4	762</citation>
	<citation>1767	4	762</citation>
	<citation>1781	4	762</citation>
	<citation>1781	4	762</citation>
	<citation>1781	4	762</citation>
	<citation>1787	4	762</citation>
	<citation>1945	4	762</citation>
	<citation>1949	4	762</citation>
	<citation>321	4	762</citation>
	<citation>2059	4	762</citation>
	<citation>2126	4	762</citation>
	<citation>435	4	762</citation>
	<citation>437	4	762</citation>
	<citation>438	4	762</citation>
	<citation>463	4	762</citation>
	<citation>483	4	762</citation>
	<citation>491	4	762</citation>
	<citation>2732	4	762</citation>
	<citation>560	4	762</citation>
	<citation>583	4	762</citation>
	<citation>3073	4	762</citation>
	<citation>627	4	762</citation>
	<citation>631	4	762</citation>
	<citation>632	4	762</citation>
	<citation>642	4	762</citation>
	<citation>644	4	762</citation>
	<citation>653	4	762</citation>
	<citation>680	4	762</citation>
	<citation>761	4	762</citation>
	<citation>762	4	762</citation>
	<citation>762	4	762</citation>
	<citation>762	4	762</citation>
	<citation>763	4	762</citation>
	<citation>123	4	762</citation>
	<citation>140	4	762</citation>
	<citation>919	4	762</citation>
	<citation>949	4	762</citation>
	<citation>989	4	762</citation>
	<citation>196	5	762</citation>
	<citation>249	5	762</citation>
	<citation>483	5	762</citation>
	<citation>762	5	762</citation>
	<citation>762	5	762</citation>
	<citation>762	5	762</citation>
	</citations>
	<title>Some Remarks on the Syntax of Symbolic Programming Languages</title>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>DiForino, A. C.</author>
	</authors>
	<location>CA630836 JB March 13, 1978  8:07 PM</location>
	</document>
	<document id= '761'>
	<title>A Note on the Dangling Else in ALGOL 60</title>
	<abstract>Some revisions of ALGOL 60 are proposed, which not only eliminate certain ambiguous statements  but also add some convenience to the language.  A discussion of the background of the problem and a sketch  of a proof that the ambiguities have been removed is included.</abstract>
	<conference>CACM August, 1963</conference>
	<authors>
	</authors>
	<location>CA630837 JB March 13, 1978  8:06 PM</location>
	<citations>
	<citation>249	4	761</citation>
	<citation>254	4	761</citation>
	<citation>272	4	761</citation>
	<citation>1086	4	761</citation>
	<citation>1102	4	761</citation>
	<citation>1109	4	761</citation>
	<citation>1132	4	761</citation>
	<citation>1140	4	761</citation>
	<citation>1188	4	761</citation>
	<citation>1234	4	761</citation>
	<citation>1263	4	761</citation>
	<citation>1265	4	761</citation>
	<citation>1270	4	761</citation>
	<citation>1306	4	761</citation>
	<citation>1323	4	761</citation>
	<citation>1358	4	761</citation>
	<citation>1379	4	761</citation>
	<citation>1380	4	761</citation>
	<citation>1453	4	761</citation>
	<citation>1464	4	761</citation>
	<citation>1464	4	761</citation>
	<citation>1484	4	761</citation>
	<citation>1491	4	761</citation>
	<citation>1491	4	761</citation>
	<citation>1498	4	761</citation>
	<citation>1613	4	761</citation>
	<citation>1614	4	761</citation>
	<citation>1767	4	761</citation>
	<citation>1781	4	761</citation>
	<citation>1781	4	761</citation>
	<citation>1787	4	761</citation>
	<citation>1825	4	761</citation>
	<citation>1860	4	761</citation>
	<citation>1949	4	761</citation>
	<citation>321	4	761</citation>
	<citation>2059	4	761</citation>
	<citation>2083	4	761</citation>
	<citation>2126	4	761</citation>
	<citation>2178	4	761</citation>
	<citation>2179	4	761</citation>
	<citation>2252	4	761</citation>
	<citation>2325	4	761</citation>
	<citation>2341	4	761</citation>
	<citation>2546	4	761</citation>
	<citation>435	4	761</citation>
	<citation>437	4	761</citation>
	<citation>463	4	761</citation>
	<citation>483	4	761</citation>
	<citation>491	4	761</citation>
	<citation>2645	4	761</citation>
	<citation>2652	4	761</citation>
	<citation>2684	4	761</citation>
	<citation>2732	4	761</citation>
	<citation>2842	4	761</citation>
	<citation>2929	4	761</citation>
	<citation>2934	4	761</citation>
	<citation>560	4	761</citation>
	<citation>583	4	761</citation>
	<citation>3069	4	761</citation>
	<citation>3073	4	761</citation>
	<citation>627	4	761</citation>
	<citation>631	4	761</citation>
	<citation>632	4	761</citation>
	<citation>642	4	761</citation>
	<citation>644	4	761</citation>
	<citation>653	4	761</citation>
	<citation>669	4	761</citation>
	<citation>679	4	761</citation>
	<citation>680	4	761</citation>
	<citation>691	4	761</citation>
	<citation>761	4	761</citation>
	<citation>761	4	761</citation>
	<citation>761	4	761</citation>
	<citation>762	4	761</citation>
	<citation>763	4	761</citation>
	<citation>123	4	761</citation>
	<citation>140	4	761</citation>
	<citation>919	4	761</citation>
	<citation>949	4	761</citation>
	<citation>989	4	761</citation>
	<citation>989	4	761</citation>
	<citation>196	5	761</citation>
	<citation>947	5	761</citation>
	<citation>1379	5	761</citation>
	<citation>3184	5	761</citation>
	<citation>761	5	761</citation>
	<citation>761	5	761</citation>
	<citation>761	5	761</citation>
	<citation>1263	6	761</citation>
	<citation>1477	6	761</citation>
	<citation>3184	6	761</citation>
	<citation>669	6	761</citation>
	<citation>761	6	761</citation>
	</citations>
	</document>
	<document id= '760'>
	<citations>
	<citation>760	5	760</citation>
	<citation>760	5	760</citation>
	<citation>760	5	760</citation>
	</citations>
	<title>Dialects of FORTRAN</title>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>Pyle, I. C.</author>
	</authors>
	<location>CA630838 JB March 13, 1978  8:03 PM</location>
	</document>
	<document id= '759'>
	<title>Continued Operation Notation for Symbol Manipulation and Array Processing</title>
	<abstract>A brief account is given of a notational device that is very useful in the formal representation  of syntaxes, string relationships and string transformation procedures and also of computing procedures  that deal with arrays of functions of many variables.  The device consists of the use of certain "continued  operation" or "collective" symbols that are analogous to the summation symbol (Sigma) and continued multiplication  symbol (Pi) of conventional mathematics.</abstract>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>Barnett, M. P.</author>
	</authors>
	<location>CA630839 JB March 13, 1978  8:02 PM</location>
	<citations>
	<citation>1062	4	759</citation>
	<citation>1121	4	759</citation>
	<citation>1139	4	759</citation>
	<citation>1265	4	759</citation>
	<citation>1781	4	759</citation>
	<citation>720	4	759</citation>
	<citation>759	4	759</citation>
	<citation>964	5	759</citation>
	<citation>1121	5	759</citation>
	<citation>464	5	759</citation>
	<citation>659	5	759</citation>
	<citation>759	5	759</citation>
	<citation>759	5	759</citation>
	<citation>759	5	759</citation>
	<citation>284	6	759</citation>
	<citation>464	6	759</citation>
	<citation>561	6	759</citation>
	<citation>759	6	759</citation>
	<citation>759	6	759</citation>
	<citation>759	6	759</citation>
	</citations>
	</document>
	<document id= '758'>
	<title>Skeletal Structure of PERT and CPA Computer Programs</title>
	<abstract>An introduction to the inner mechanics of PERT and CPA computer programs is provided.  The  major components of these programs as well as their purposes and interrelationships are outlined.</abstract>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>Kahn, A. B.</author>
	</authors>
	<location>CA630840 JB March 13, 1978  7:58 PM</location>
	<citations>
	<citation>1050	4	758</citation>
	<citation>1226	4	758</citation>
	<citation>1723	4	758</citation>
	<citation>441	4	758</citation>
	<citation>758	4	758</citation>
	<citation>758	4	758</citation>
	<citation>367	5	758</citation>
	<citation>441	5	758</citation>
	<citation>758	5	758</citation>
	<citation>758	5	758</citation>
	<citation>758	5	758</citation>
	</citations>
	</document>
	<document id= '757'>
	<citations>
	<citation>1890	5	757</citation>
	<citation>757	5	757</citation>
	<citation>757	5	757</citation>
	<citation>757	5	757</citation>
	<citation>757	6	757</citation>
	</citations>
	<title>Simulation of a Traffic Network</title>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>Katz, J. H.</author>
	</authors>
	<location>CA630841 JB March 13, 1978  7:55 PM</location>
	</document>
	<document id= '756'>
	<citations>
	<citation>756	5	756</citation>
	<citation>756	5	756</citation>
	<citation>756	5	756</citation>
	</citations>
	<title>A Computer Program for Editing the News</title>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>Danielson, W. A.</author>
	<author>Briggs, B.</author>
	</authors>
	<location>CA630842 JB March 13, 1978  7:53 PM</location>
	</document>
	<document id= '755'>
	<title>An Exponential Method of Numerical Integration of Ordinary Differential Equations</title>
	<abstract>A formula for numerical integration is prepared, which involves an exponential term.  This  formula is compared to two standard integration methods, and it is shown that for a large class of differential  equations, the exponential formula has superior stability properties for large step sizes.  Thus this  formula may be used with a large step size to decrease the total computing time for a solution significantly,  particularly in those engineering problems where high accuracy is not needed.</abstract>
	<conference>CACM August, 1963</conference>
	<authors>
	<author>Pope, D. A.</author>
	</authors>
	<location>CA630843 JB March 13, 1978 7:52 PM</location>
	<citations>
	<citation>2567	5	755</citation>
	<citation>755	5	755</citation>
	<citation>755	5	755</citation>
	<citation>755	5	755</citation>
	<citation>2268	6	755</citation>
	<citation>755	6	755</citation>
	</citations>
	</document>
	<document id= '754'>
	<citations>
	<citation>754	4	754</citation>
	<citation>153	5	754</citation>
	<citation>754	5	754</citation>
	<citation>754	5	754</citation>
	<citation>754	5	754</citation>
	</citations>
	<title>Ye Indiscreet Monitor</title>
	<conference>CACM September, 1963</conference>
	<authors>
	<author>Blatt, J. M.</author>
	</authors>
	<location>CA630904 JB March 13, 1978  7:41 PM</location>
	</document>
	<document id= '753'>
	<citations>
	<citation>1237	4	753</citation>
	<citation>2220	4	753</citation>
	<citation>753	4	753</citation>
	<citation>1237	5	753</citation>
	<citation>250	5	753</citation>
	<citation>1549	5	753</citation>
	<citation>1564	5	753</citation>
	<citation>2453	5	753</citation>
	<citation>753	5	753</citation>
	<citation>753	5	753</citation>
	<citation>753	5	753</citation>
	<citation>106	6	753</citation>
	<citation>1051	6	753</citation>
	<citation>1172	6	753</citation>
	<citation>1354	6	753</citation>
	<citation>210	6	753</citation>
	<citation>250	6	753</citation>
	<citation>320	6	753</citation>
	<citation>2053	6	753</citation>
	<citation>2220	6	753</citation>
	<citation>406	6	753</citation>
	<citation>627	6	753</citation>
	<citation>731	6	753</citation>
	<citation>753	6	753</citation>
	<citation>753	6	753</citation>
	<citation>753	6	753</citation>
	<citation>753	6	753</citation>
	</citations>
	<title>A Procedure for Converting Logic Table Conditions into an Efficient Sequence of Test Instructions</title>
	<conference>CACM September, 1963</conference>
	<authors>
	<author>Egler, J. F.</author>
	</authors>
	<location>CA630905 JB March 13, 1978  7:40 PM</location>
	</document>
	<document id= '752'>
	<citations>
	<citation>752	5	752</citation>
	<citation>752	5	752</citation>
	<citation>752	5	752</citation>
	</citations>
	<title>Closing Out a Print Tape</title>
	<conference>CACM September, 1963</conference>
	<authors>
	<author>Moore, D. P.</author>
	</authors>
	<location>CA630906 JB March 13, 1978  7:39 PM</location>
	</document>
	<document id= '751'>
	<citations>
	<citation>751	5	751</citation>
	<citation>751	5	751</citation>
	<citation>751	5	751</citation>
	</citations>
	<title>A Note on a Set of Test Matrices for Inversion</title>
	<conference>CACM September, 1963</conference>
	<authors>
	<author>Rodman, R. D.</author>
	</authors>
	<location>CA630907 JB March 13, 1978  7:38 PM</location>
	</document>
	<document id= '750'>
	<citations>
	<citation>1963	5	750</citation>
	<citation>750	5	750</citation>
	<citation>750	5	750</citation>
	<citation>750	5	750</citation>
	<citation>909	6	750</citation>
	<citation>475	6	750</citation>
	<citation>750	6	750</citation>
	</citations>
	<title>PEI Matrix Eigenvectors</title>
	<conference>CACM September, 1963</conference>
	<authors>
	<author>Newbery, A. C. R.</author>
	</authors>
	<location>CA630908 JB March 13, 1978  7:36 PM</location>
	</document>
	<document id= '749'>
	<citations>
	<citation>749	5	749</citation>
	<citation>749	5	749</citation>
	<citation>749	5	749</citation>
	</citations>
	<title>Note onStochastic Matrices</title>
	<conference>CACM September, 1963</conference>
	<authors>
	<author>Dumey, A. I.</author>
	</authors>
	<location>CA630909 JB March 13, 1978  7:35 PM</location>
	</document>
	<document id= '748'>
	<citations>
	<citation>748	5	748</citation>
	<citation>748	5	748</citation>
	<citation>748	5	748</citation>
	</citations>
	<title>A Semi-Iterative Process for Evaluating Arctangents</title>
	<conference>CACM September, 1963</conference>
	<authors>
	<author>Chu, W. H.</author>
	<author>Saathoff, D. R.</author>
	</authors>
	<location>CA630910 JB March 13, 1978  7:33 PM</location>
	</document>
	<document id= '747'>
	<citations>
	<citation>2443	5	747</citation>
	<citation>747	5	747</citation>
	<citation>747	5	747</citation>
	<citation>747	5	747</citation>
	<citation>747	6	747</citation>
	</citations>
	<title>Generation of Permutations in Lexicographical Order (Algorithm 202)</title>
	<conference>CACM September, 1963</conference>
	<authors>
	<author>Shen, M. K.</author>
	</authors>
	<location>CA630911 JB March 13, 1978  7:31 PM</location>
	</document>
	<document id= '746'>
	<citations>
	<citation>746	5	746</citation>
	<citation>746	5	746</citation>
	<citation>746	5	746</citation>
	</citations>
	<title>STEEP1 (Algorithm 203)</title>
	<conference>CACM September, 1963</conference>
	<authors>
	<author>Wasscher, E. J.</author>
	</authors>
	<location>CA630912 JB March 13, 1978  7:30 PM</location>
	</document>
	<document id= '745'>
	<citations>
	<citation>745	5	745</citation>
	<citation>745	5	745</citation>
	<citation>745	5	745</citation>
	</citations>
	<title>STEEP2 (Algorithm 204)</title>
	<conference>CACM September, 1963</conference>
	<authors>
	<author>Wasscher, E. J.</author>
	</authors>
	<location>CA630913 JB March 13, 1978  7:29 PM</location>
	</document>
	<document id= '744'>
	<citations>
	<citation>744	5	744</citation>
	<citation>744	5	744</citation>
	<citation>744	5	744</citation>
	</citations>
	<title>ATIVE (Algorithm 205)</title>
	<conference>CACM September, 1963</conference>
	<authors>
	<author>Haubrich, J. G. A.</author>
	</authors>
	<location>CA630914 JB March 13, 1978  7:28 PM</location>
	</document>
	<document id= '743'>
	<citations>
	<citation>743	5	743</citation>
	<citation>743	5	743</citation>
	<citation>743	5	743</citation>
	</citations>
	<title>ARCCOSIN (Algorithm 206)</title>
	<conference>CACM September, 1963</conference>
	<authors>
	<author>Konda, M.</author>
	</authors>
	<location>CA630915 JB March 13, 1978  7:26 PM</location>
	</document>
	<document id= '742'>
	<citations>
	<citation>742	5	742</citation>
	<citation>742	5	742</citation>
	<citation>742	5	742</citation>
	</citations>
	<title>Evaluation of Determinant (Algorithm 41)</title>
	<conference>CACM September, 1963</conference>
	<authors>
	<author>Freed, B. H.</author>
	</authors>
	<location>CA630916 JB March 13, 1978  7:25 PM</location>
	</document>
	<document id= '741'>
	<citations>
	<citation>741	5	741</citation>
	<citation>741	5	741</citation>
	<citation>741	5	741</citation>
	</citations>
	<title>Evaluation of Determinant (Algorithm 41)</title>
	<conference>CACM September, 1963</conference>
	<authors>
	<author>Freed, B. H.</author>
	</authors>
	<location>CA630917 JB March 13, 1978  7:24 PM</location>
	</document>
	<document id= '740'>
	<citations>
	<citation>740	5	740</citation>
	<citation>740	5	740</citation>
	<citation>740	5	740</citation>
	</citations>
	<title>INTEREST (Algorithm 45)</title>
	<conference>CACM September, 1963</conference>
	<authors>
	<author>Wright, C. B.</author>
	</authors>
	<location>CA630918 JB March 13, 1978  7:23 PM</location>
	</document>
	<document id= '739'>
	<citations>
	<citation>739	5	739</citation>
	<citation>739	5	739</citation>
	<citation>739	5	739</citation>
	</citations>
	<title>MINIFUN (Algorithm 129)</title>
	<conference>CACM September, 1963</conference>
	<authors>
	<author>Wasscher, E. J.</author>
	</authors>
	<location>CA630919 JB March 13, 1978  7:22 PM</location>
	</document>
	<document id= '738'>
	<citations>
	<citation>738	5	738</citation>
	<citation>738	5	738</citation>
	<citation>738	5	738</citation>
	</citations>
	<title>Fourier Series Approximation (Algorithm 157)</title>
	<conference>CACM September, 1963</conference>
	<authors>
	<author>George, R.</author>
	</authors>
	<location>CA630920 JB March 13, 1978  7:20 PM</location>
	</document>
	<document id= '737'>
	<citations>
	<citation>737	5	737</citation>
	<citation>737	5	737</citation>
	<citation>737	5	737</citation>
	</citations>
	<title>Exponentiation of Series (Algorithm 158)</title>
	<conference>CACM September, 1963</conference>
	<authors>
	<author>Lawrence, J. D.</author>
	</authors>
	<location>CA630921 JB March 13, 1978  7:19 PM</location>
	</document>
	<document id= '736'>
	<citations>
	<citation>736	5	736</citation>
	<citation>736	5	736</citation>
	<citation>736	5	736</citation>
	</citations>
	<title>Modified Hankel Functions (Algorithm 163)</title>
	<conference>CACM September, 1963</conference>
	<authors>
	</authors>
	<location>CA630922 JB March 13, 1978  7:18 PM</location>
	</document>
	<document id= '735'>
	<citations>
	<citation>735	5	735</citation>
	<citation>735	5	735</citation>
	<citation>735	5	735</citation>
	</citations>
	<title>Calculation of Confluent Divided Differences (Algorithm 167)</title>
	<conference>CACM September, 1963</conference>
	<authors>
	</authors>
	<location>CA630923 JB March 13, 1978  7:17 PM</location>
	</document>
	<document id= '734'>
	<citations>
	<citation>734	5	734</citation>
	<citation>734	5	734</citation>
	<citation>734	5	734</citation>
	</citations>
	<title>Newton Interpolation with Backward Divided Differences (Algorithm 168)</title>
	<conference>CACM September, 1963</conference>
	<authors>
	</authors>
	<location>CA630924 JB March 13, 1978  7:15 PM</location>
	</document>
	<document id= '733'>
	<citations>
	<citation>733	5	733</citation>
	<citation>733	5	733</citation>
	<citation>733	5	733</citation>
	</citations>
	<title>Newton Interpolation with Forward Divided Differences (Algorithm 169)</title>
	<conference>CACM September, 1963</conference>
	<authors>
	</authors>
	<location>CA630925 JB March 13, 1978  7:13 PM</location>
	</document>
	<document id= '732'>
	<citations>
	<citation>732	5	732</citation>
	<citation>732	5	732</citation>
	<citation>732	5	732</citation>
	</citations>
	<title>Monte Carlo Inverse (Algorithm 166)</title>
	<conference>CACM September, 1963</conference>
	<authors>
	</authors>
	<location>CA630926 JB March 13, 1978  7:11 PM</location>
	</document>
	<document id= '731'>
	<title>Symmetric List Processor</title>
	<abstract>A list processing system in which each list cell contains both a forward and a backward link  as well as a datum is described.  This system is intended for imbeding in higher level languages capable  of calling functions and subroutines coded in machine language.  The presentation is in the form of FORTRAN  programs depending on only a limited set of FORTRAN programs depending on only a limited set of "primitive"  machine language subroutines which are also defined.  Finally, a set of field, particularly character,  manipulation primitives are given to round out the system.</abstract>
	<conference>CACM September, 1963</conference>
	<authors>
	<author>Weizenbaum, J.</author>
	</authors>
	<location>CA630927 JB March 13, 1978  7:10 PM</location>
	<citations>
	<citation>1050	4	731</citation>
	<citation>1050	4	731</citation>
	<citation>1102	4	731</citation>
	<citation>1549	4	731</citation>
	<citation>378	4	731</citation>
	<citation>2723	4	731</citation>
	<citation>2882	4	731</citation>
	<citation>3008	4	731</citation>
	<citation>731	4	731</citation>
	<citation>731	4	731</citation>
	<citation>793	4	731</citation>
	<citation>798	4	731</citation>
	<citation>1024	5	731</citation>
	<citation>1051	5	731</citation>
	<citation>1098	5	731</citation>
	<citation>1214	5	731</citation>
	<citation>209	5	731</citation>
	<citation>1380	5	731</citation>
	<citation>1388	5	731</citation>
	<citation>1393	5	731</citation>
	<citation>1485	5	731</citation>
	<citation>1487	5	731</citation>
	<citation>1549	5	731</citation>
	<citation>1570	5	731</citation>
	<citation>1878	5	731</citation>
	<citation>1946	5	731</citation>
	<citation>1957	5	731</citation>
	<citation>2168	5	731</citation>
	<citation>2723	5	731</citation>
	<citation>2857	5	731</citation>
	<citation>3112	5	731</citation>
	<citation>627	5	731</citation>
	<citation>731	5	731</citation>
	<citation>731	5	731</citation>
	<citation>731	5	731</citation>
	<citation>878	6	731</citation>
	<citation>106	6	731</citation>
	<citation>106	6	731</citation>
	<citation>106	6	731</citation>
	<citation>902	6	731</citation>
	<citation>1051	6	731</citation>
	<citation>1093	6	731</citation>
	<citation>1098	6	731</citation>
	<citation>1132	6	731</citation>
	<citation>1177	6	731</citation>
	<citation>1380	6	731</citation>
	<citation>1387	6	731</citation>
	<citation>1389	6	731</citation>
	<citation>1393	6	731</citation>
	<citation>1393	6	731</citation>
	<citation>1421	6	731</citation>
	<citation>1549	6	731</citation>
	<citation>1626	6	731</citation>
	<citation>1749	6	731</citation>
	<citation>1826	6	731</citation>
	<citation>1826	6	731</citation>
	<citation>1826	6	731</citation>
	<citation>210	6	731</citation>
	<citation>210	6	731</citation>
	<citation>210	6	731</citation>
	<citation>210	6	731</citation>
	<citation>210	6	731</citation>
	<citation>210	6	731</citation>
	<citation>1860	6	731</citation>
	<citation>1878	6	731</citation>
	<citation>296	6	731</citation>
	<citation>1972	6	731</citation>
	<citation>360	6	731</citation>
	<citation>378	6	731</citation>
	<citation>2438	6	731</citation>
	<citation>2651	6	731</citation>
	<citation>2723	6	731</citation>
	<citation>2736	6	731</citation>
	<citation>2833	6	731</citation>
	<citation>2838	6	731</citation>
	<citation>405	6	731</citation>
	<citation>406	6	731</citation>
	<citation>406	6	731</citation>
	<citation>3184	6	731</citation>
	<citation>627	6	731</citation>
	<citation>627	6	731</citation>
	<citation>731	6	731</citation>
	<citation>731	6	731</citation>
	<citation>731	6	731</citation>
	<citation>731	6	731</citation>
	<citation>731	6	731</citation>
	<citation>731	6	731</citation>
	<citation>731	6	731</citation>
	<citation>731	6	731</citation>
	<citation>731	6	731</citation>
	<citation>731	6	731</citation>
	<citation>731	6	731</citation>
	<citation>731	6	731</citation>
	<citation>731	6	731</citation>
	<citation>731	6	731</citation>
	<citation>731	6	731</citation>
	<citation>731	6	731</citation>
	<citation>731	6	731</citation>
	<citation>731	6	731</citation>
	<citation>753	6	731</citation>
	<citation>793	6	731</citation>
	<citation>794	6	731</citation>
	<citation>799	6	731</citation>
	</citations>
	</document>
	<document id= '730'>
	<title>MIRFAG: A Compiler Based on Standard Mathematical Notation And Plain English</title>
	<abstract>A pilot version of the compiler MIRFAG, now in operation, is described.  The chief features  of the system, which is intended for the solution of scientific problems, are the presentation of mathematical  formulas entirely in standard textbook notation.  The use of plain English for organizational instructions,  automatic error diagnosis indicating the actual location of the error in the uncompiled program, and  an attempt to minimize that fragmentation of the original problem statement which is a normal feature  of programming systems.</abstract>
	<conference>CACM September, 1963</conference>
	<authors>
	<author>Gawlik, H. J.</author>
	</authors>
	<location>CA630928 JB March 13, 1978  7:06 PM</location>
	<citations>
	<citation>1083	5	730</citation>
	<citation>1396	5	730</citation>
	<citation>730	5	730</citation>
	<citation>730	5	730</citation>
	<citation>730	5	730</citation>
	<citation>964	6	730</citation>
	<citation>1028	6	730</citation>
	<citation>1029	6	730</citation>
	<citation>1083	6	730</citation>
	<citation>1132	6	730</citation>
	<citation>1214	6	730</citation>
	<citation>1278	6	730</citation>
	<citation>1334	6	730</citation>
	<citation>1365	6	730</citation>
	<citation>1386	6	730</citation>
	<citation>1387	6	730</citation>
	<citation>1388	6	730</citation>
	<citation>1392	6	730</citation>
	<citation>1393	6	730</citation>
	<citation>1394	6	730</citation>
	<citation>1395	6	730</citation>
	<citation>1396	6	730</citation>
	<citation>1397	6	730</citation>
	<citation>1496	6	730</citation>
	<citation>284	6	730</citation>
	<citation>407	6	730</citation>
	<citation>407	6	730</citation>
	<citation>3192	6	730</citation>
	<citation>3193	6	730</citation>
	<citation>3199	6	730</citation>
	<citation>3200	6	730</citation>
	<citation>3201	6	730</citation>
	<citation>3202	6	730</citation>
	<citation>3203	6	730</citation>
	<citation>3204	6	730</citation>
	<citation>561	6	730</citation>
	<citation>730	6	730</citation>
	<citation>730	6	730</citation>
	</citations>
	</document>
	<document id= '729'>
	<citations>
	<citation>1135	4	729</citation>
	<citation>1136	4	729</citation>
	<citation>1781	4	729</citation>
	<citation>493	4	729</citation>
	<citation>2710	4	729</citation>
	<citation>2765	4	729</citation>
	<citation>2888	4	729</citation>
	<citation>2906	4	729</citation>
	<citation>729	4	729</citation>
	<citation>729	4	729</citation>
	<citation>989	4	729</citation>
	<citation>1037	5	729</citation>
	<citation>1234	5	729</citation>
	<citation>1358	5	729</citation>
	<citation>288	5	729</citation>
	<citation>1491	5	729</citation>
	<citation>616	5	729</citation>
	<citation>729	5	729</citation>
	<citation>729	5	729</citation>
	<citation>729	5	729</citation>
	<citation>196	6	729</citation>
	<citation>944	6	729</citation>
	<citation>1140	6	729</citation>
	<citation>1303	6	729</citation>
	<citation>1460	6	729</citation>
	<citation>205	6	729</citation>
	<citation>321	6	729</citation>
	<citation>385	6	729</citation>
	<citation>400	6	729</citation>
	<citation>402	6	729</citation>
	<citation>404	6	729</citation>
	<citation>3184	6	729</citation>
	<citation>3184	6	729</citation>
	<citation>3184	6	729</citation>
	<citation>729	6	729</citation>
	<citation>729	6	729</citation>
	<citation>729	6	729</citation>
	<citation>729	6	729</citation>
	<citation>799	6	729</citation>
	</citations>
	<title>A Generalization of ALGOL</title>
	<conference>CACM September, 1963</conference>
	<authors>
	<author>Wirth, N.</author>
	</authors>
	<location>CA630929 JB March 13, 1978  7:02 PM</location>
	</document>
	<document id= '728'>
	<title>Computer-Drawn Flowcharts*</title>
	<abstract>To meet the need for improved documentation of written computer programs, a simple system for  effective communication is presented, which has shown great promise.  The programmer describes his program  in a simple format, and the computer prepares flow charts and other cross-referenced listings from this  input.  The description can be kept up-to-date easily, and the final output clearly explains the original  program.  The system has also proved to be a valuable debugging and coding aid.</abstract>
	<conference>CACM September, 1963</conference>
	<authors>
	<author>Knuth, D. E.</author>
	</authors>
	<location>CA630930 JB March 13, 1978  7:01 PM</location>
	<citations>
	<citation>728	4	728</citation>
	<citation>728	4	728</citation>
	<citation>920	5	728</citation>
	<citation>1330	5	728</citation>
	<citation>1348	5	728</citation>
	<citation>2315	5	728</citation>
	<citation>45	5	728</citation>
	<citation>728	5	728</citation>
	<citation>728	5	728</citation>
	<citation>728	5	728</citation>
	<citation>1348	6	728</citation>
	<citation>1834	6	728</citation>
	<citation>1987	6	728</citation>
	<citation>528	6	728</citation>
	<citation>728	6	728</citation>
	<citation>728	6	728</citation>
	<citation>728	6	728</citation>
	</citations>
	</document>
	<document id= '727'>
	<title>On the Approximate Solution of Delta(u)=F(u)</title>
	<abstract>Three-dimensional Dirichlet problems for Delta(u)=F(u), Fu >= 0, are treated numerically by  an exceptionally fast, exceptionally accurate numerical method.  Programming details, numerous examples  and mathematical theory are supplied.Extension of the method in a natural way to n-dimensional problems  is indicated by means of a 4-dimensional example.</abstract>
	<conference>CACM September, 1963</conference>
	<authors>
	<author>Greenspan, D.</author>
	<author>Yohe, M.</author>
	</authors>
	<location>CA630931 JB March 13, 1978  6:57 PM</location>
	<citations>
	<citation>727	5	727</citation>
	<citation>727	5	727</citation>
	<citation>727	5	727</citation>
	</citations>
	</document>
	<document id= '726'>
	<title>A General Program for the Analysis of Square and Rectangular Lattice Designs</title>
	<abstract>This paper describes a general-purpose program that will handle those incomplete block designs  known as square and rectangular lattices.  Flow diagrams are given so that the method of calculation  may be programmed for any digital computer.</abstract>
	<conference>CACM September, 1963</conference>
	<authors>
	<author>Smillie, K. W.</author>
	</authors>
	<location>CA630932 JB March 13, 1978  6:53 PM</location>
	<citations>
	<citation>726	5	726</citation>
	<citation>726	5	726</citation>
	<citation>726	5	726</citation>
	</citations>
	</document>
	<document id= '725'>
	<citations>
	<citation>725	5	725</citation>
	<citation>725	5	725</citation>
	<citation>725	5	725</citation>
	</citations>
	<title>Group Participation Computer Demonstration</title>
	<conference>CACM October, 1963</conference>
	<authors>
	<author>McCormick, E. M.</author>
	</authors>
	<location>CA630933 JB March 13, 1978  6:50 PM</location>
	</document>
	<document id= '724'>
	<citations>
	<citation>724	5	724</citation>
	<citation>724	5	724</citation>
	<citation>724	5	724</citation>
	</citations>
	<title>A Profile of the Programmer</title>
	<abstract>Synopsis: 549 members of the ACM participated in a study concerned primarily with the attitudes  of programmers toward their careers and jobs.  A very high percentage of programmers have apparently  entered their careers by accident; it has proven a happy choice for most and they expect to remain in  the field during the next five years.  Their principal job satisfactions relate to the nature of their  work, and mostfind their jobs offer high level of professional interest and good working conditions.   Salary and advancement prospects, however,are not as satisfactory.  More than half report a positive  attitude toward programmers and programming on the part of their organizations.  Turnover among themselves  is attributed primarily to poor management-salary is seen as the principal motivating factor in turnover  among other programmers.  Nature of the work offered and salary are principal determinants in accepting  a new job.  Programmers are less mobile than expected.  Programmers tend to see their colleagues in a  favorable light, on the whole.  Personalities seem to vary with function, systems programmers differing  from applications programmers.  Four principal problems for programming in the immediate future are listed  by participants: languages, personnel, various specific applications and techniques, and building programming  as a profession.</abstract>
	<conference>CACM October, 1963</conference>
	<location>CA631001 JB March 13, 1978  6:48 PM</location>
	</document>
	<document id= '723'>
	<citations>
	<citation>723	5	723</citation>
	<citation>723	5	723</citation>
	<citation>723	5	723</citation>
	</citations>
	<title>ECMA Subset of ALGOL 60</title>
	<conference>CACM October, 1963</conference>
	<location>CA631002 JB March 13, 1978  6:38 PM</location>
	</document>
	<document id= '722'>
	<citations>
	<citation>722	5	722</citation>
	<citation>722	5	722</citation>
	<citation>722	5	722</citation>
	</citations>
	<title>ALCOR Group Representation of ALGOL Symbols</title>
	<conference>CACM October, 1963</conference>
	<location>CA631003 JB March 13, 1978  6:36 PM</location>
	</document>
	<document id= '721'>
	<title>Report on Proposed American Standard Flowchart Symbols for Information Processing</title>
	<abstract>This paper presents the essential contents of the Proposed American Standard Flowchart Symbols  for Information Processing.  This is the first proposed standard prepared by Subcommittee X3.6 on Problem  Description and Analysis of the American Standards Association (ASA).</abstract>
	<conference>CACM October, 1963</conference>
	<authors>
	<author>Rossheim, R. J.</author>
	</authors>
	<location>CA631004 JB March 13, 1978  6:33 PM</location>
	<citations>
	<citation>2961	5	721</citation>
	<citation>721	5	721</citation>
	<citation>721	5	721</citation>
	<citation>721	5	721</citation>
	<citation>721	6	721</citation>
	</citations>
	</document>
	<document id= '720'>
	<citations>
	<citation>1053	4	720</citation>
	<citation>1062	4	720</citation>
	<citation>1121	4	720</citation>
	<citation>1139	4	720</citation>
	<citation>1265	4	720</citation>
	<citation>1781	4	720</citation>
	<citation>464	4	720</citation>
	<citation>720	4	720</citation>
	<citation>720	4	720</citation>
	<citation>720	4	720</citation>
	<citation>759	4	720</citation>
	<citation>1053	5	720</citation>
	<citation>265	5	720</citation>
	<citation>464	5	720</citation>
	<citation>474	5	720</citation>
	<citation>720	5	720</citation>
	<citation>720	5	720</citation>
	<citation>720	5	720</citation>
	<citation>435	6	720</citation>
	<citation>474	6	720</citation>
	<citation>718	6	720</citation>
	<citation>720	6	720</citation>
	</citations>
	<title>Format-Free Input in FORTRAN</title>
	<conference>CACM October, 1963</conference>
	<authors>
	<author>Bailey, M. J.</author>
	<author>Barnett, M. P.</author>
	<author>Futrelle, R. P.</author>
	</authors>
	<location>CA631005 JB March 13, 1978  6:26 PM</location>
	</document>
	<document id= '719'>
	<title>Variable Width Stacks</title>
	<abstract>Character addressable, variable field computers permit ready establishment and manipulation  of variable width stacks.  Single machine commands may push variable field items down into such stacks  or pop them up.  The availability of a variety of field delimiters allows the machine to push down or  pop up more than one variable width item with one command.  Since these stacking operations can be made  the basis of compiler decoding algorithms the proper use of machines of this class for compilation has  advantages over machines with fixed-length words.</abstract>
	<conference>CACM October, 1963</conference>
	<authors>
	<author>Rotenberg, N.</author>
	<author>Opler, A.</author>
	</authors>
	<location>CA631006 JB March 13, 1978  6:25 PM</location>
	<citations>
	<citation>719	5	719</citation>
	<citation>719	5	719</citation>
	<citation>719	5	719</citation>
	</citations>
	</document>
	<document id= '718'>
	<title>An Experiment in Automatic Verification of Programs</title>
	<abstract>How effective is a compiler at replacing explicit verification, and what is the cost of this  technique?</abstract>
	<conference>CACM October, 1963</conference>
	<authors>
	<author>Weinberg, G. M.</author>
	<author>Gressett, G. L.</author>
	</authors>
	<location>CA631007 JB March 13, 1978  5:59 PM</location>
	<citations>
	<citation>1053	5	718</citation>
	<citation>718	5	718</citation>
	<citation>718	5	718</citation>
	<citation>718	5	718</citation>
	<citation>435	6	718</citation>
	<citation>474	6	718</citation>
	<citation>718	6	718</citation>
	<citation>720	6	718</citation>
	</citations>
	</document>
	<document id= '717'>
	<title>Partitioning Algorithms for Finite Sets</title>
	<abstract>The partitions of a set with n elements are represented by certain n-tuples of positive integers.   Algorithm are described which generate without repetitions the n-tuples corresponding to: (1) all partitions  of the given set, (2) all partitions of the given set into m or fewer sets (1 &amp;lt;= m &amp;lt;= n), and (3) all  partitions of the given set into exactly m sets (1 &amp;lt;= m &amp;lt;= n).</abstract>
	<conference>CACM October, 1963</conference>
	<authors>
	<author>Hutchinson, G.</author>
	</authors>
	<location>CA631008 JB March 13, 1978  5:57 PM</location>
	<citations>
	<citation>717	5	717</citation>
	<citation>717	5	717</citation>
	<citation>717	5	717</citation>
	</citations>
	</document>
	<document id= '716'>
	<citations>
	<citation>2679	5	716</citation>
	<citation>716	5	716</citation>
	<citation>716	5	716</citation>
	<citation>716	5	716</citation>
	<citation>970	6	716</citation>
	<citation>1175	6	716</citation>
	<citation>1190	6	716</citation>
	<citation>1228	6	716</citation>
	<citation>1969	6	716</citation>
	<citation>1997	6	716</citation>
	<citation>308	6	716</citation>
	<citation>2042	6	716</citation>
	<citation>3187	6	716</citation>
	<citation>507	6	716</citation>
	<citation>716	6	716</citation>
	<citation>783	6	716</citation>
	</citations>
	<title>Stringsort (Algorithm 207)</title>
	<conference>CACM October, 1963</conference>
	<authors>
	<author>Boothroyd, J.</author>
	</authors>
	<location>CA631009 JB March 13,1978  5:54 PM</location>
	</document>
	<document id= '715'>
	<citations>
	<citation>715	5	715</citation>
	<citation>715	5	715</citation>
	<citation>715	5	715</citation>
	</citations>
	<title>Discrete Convolution (Algorithm 208)</title>
	<conference>CACM October, 1963</conference>
	<authors>
	</authors>
	<location>CA631010 JB March 13, 1978  5:53 PM</location>
	</document>
	<document id= '714'>
	<citations>
	<citation>1157	5	714</citation>
	<citation>1779	5	714</citation>
	<citation>1920	5	714</citation>
	<citation>1944	5	714</citation>
	<citation>1987	5	714</citation>
	<citation>2548	5	714</citation>
	<citation>714	5	714</citation>
	<citation>714	5	714</citation>
	<citation>714	5	714</citation>
	<citation>836	6	714</citation>
	<citation>1081	6	714</citation>
	<citation>1561	6	714</citation>
	<citation>1581	6	714</citation>
	<citation>1778	6	714</citation>
	<citation>1779	6	714</citation>
	<citation>1779	6	714</citation>
	<citation>1944	6	714</citation>
	<citation>485	6	714</citation>
	<citation>714	6	714</citation>
	<citation>714	6	714</citation>
	<citation>714	6	714</citation>
	<citation>714	6	714</citation>
	<citation>714	6	714</citation>
	<citation>714	6	714</citation>
	</citations>
	<title>Gauss (Algorithm 209)</title>
	<conference>CACM October, 1963</conference>
	<authors>
	<author>Ibbetson, D.</author>
	</authors>
	<location>CA631011 JB March 13, 1978  5:52 PM</location>
	</document>
	<document id= '713'>
	<citations>
	<citation>713	5	713</citation>
	<citation>713	5	713</citation>
	<citation>713	5	713</citation>
	</citations>
	<title>Lagrangian Interpolation (Algorithm 210)</title>
	<conference>CACM October, 1963</conference>
	<authors>
	<author>Schubert, G. R.</author>
	</authors>
	<location>CA631012 JB March 13, 1978  5:52 PM</location>
	</document>
	<document id= '712'>
	<citations>
	<citation>712	5	712</citation>
	<citation>712	5	712</citation>
	<citation>712	5	712</citation>
	</citations>
	<title>Hermite Interpolation (Algorithm 211)</title>
	<conference>CACM October, 1963</conference>
	<authors>
	<author>Schubert, G. R.</author>
	</authors>
	<location>CA631013 JB March 13, 1978  5:51 PM</location>
	</document>
	<document id= '711'>
	<citations>
	<citation>711	5	711</citation>
	<citation>711	5	711</citation>
	<citation>711	5	711</citation>
	</citations>
	<title>Frequency Distribution (Algorithm 212)</title>
	<conference>CACM October, 1963</conference>
	<authors>
	<author>Gray, M. D.</author>
	</authors>
	<location>CA631014 JB March 13, 1978  5:50 PM</location>
	</document>
	<document id= '710'>
	<citations>
	<citation>710	5	710</citation>
	<citation>710	5	710</citation>
	<citation>710	5	710</citation>
	</citations>
	<title>Fresnel Integrals (Algorithm 213)</title>
	<conference>CACM October, 1963</conference>
	<authors>
	<author>Gray, M. D.</author>
	</authors>
	<location>CA631015 JB March 13, 1978  5:47 PM</location>
	</document>
	<document id= '709'>
	<citations>
	<citation>709	5	709</citation>
	<citation>709	5	709</citation>
	<citation>709	5	709</citation>
	</citations>
	<title>Assignment (Algorithm 27)</title>
	<conference>CACM October, 1963</conference>
	<authors>
	<author>Newhouse, A.</author>
	</authors>
	<location>CA631016 JB March 13, 1978  5:46 PM</location>
	</document>
	<document id= '708'>
	<citations>
	<citation>708	5	708</citation>
	<citation>708	5	708</citation>
	<citation>708	5	708</citation>
	</citations>
	<title>Evaluation of the Fresnel Integrals (Algorithm 88, 89, 90)</title>
	<conference>CACM October, 1963</conference>
	<authors>
	<author>Gray, M. D.</author>
	</authors>
	<location>CA631017JB March 13, 1978  5:45 PM</location>
	</document>
	<document id= '707'>
	<citations>
	<citation>1583	5	707</citation>
	<citation>707	5	707</citation>
	<citation>707	5	707</citation>
	<citation>707	5	707</citation>
	<citation>831	6	707</citation>
	<citation>967	6	707</citation>
	<citation>1126	6	707</citation>
	<citation>707	6	707</citation>
	</citations>
	<title>Erf(x) (Algorithm 123)</title>
	<conference>CACM October, 1963</conference>
	<authors>
	<author>Ibbetson, D.</author>
	</authors>
	<location>CA631018 JB March 13, 1978  5:40 PM</location>
	</document>
	<document id= '706'>
	<citations>
	<citation>706	5	706</citation>
	<citation>706	5	706</citation>
	<citation>706	5	706</citation>
	</citations>
	<title>Fourier Series Approximation (Algorithm 157)</title>
	<conference>CACM October, 1963</conference>
	<authors>
	<author>Schubert, G. R.</author>
	</authors>
	<location>CA631019 JB March 13, 1978  5:37 PM</location>
	</document>
	<document id= '705'>
	<citations>
	<citation>705	5	705</citation>
	<citation>705	5	705</citation>
	<citation>705	5	705</citation>
	</citations>
	<title>Combinatorial Of M Things Taken N At A Time (Algorithm 160)</title>
	<conference>CACM October, 1963</conference>
	<authors>
	<author>Blakely, R. E.</author>
	</authors>
	<location>CA631020 JB March 13, 1978  5:36 PM</location>
	</document>
	<document id= '704'>
	<citations>
	<citation>704	5	704</citation>
	<citation>704	5	704</citation>
	<citation>704	5	704</citation>
	</citations>
	<title>Combinatorial of M Things Taken One At A Time Two At A Time, Up To N At A Time (Algorithm 161)</title>
	<conference>CACM October, 1963</conference>
	<authors>
	<author>Collins, D. H.</author>
	</authors>
	<location>CA631021 JB March 13, 1978  5:34 PM</location>
	</document>
	<document id= '703'>
	<citations>
	<citation>703	5	703</citation>
	<citation>703	5	703</citation>
	<citation>703	5	703</citation>
	</citations>
	<title>Assign (Algorithm 173)</title>
	<conference>CACM October, 1963</conference>
	<authors>
	<author>Scowen, R. S.</author>
	</authors>
	<location>CA631022 JB March 13, 1978  5:32 PM</location>
	</document>
	<document id= '702'>
	<citations>
	<citation>702	5	702</citation>
	<citation>702	5	702</citation>
	<citation>702	5	702</citation>
	</citations>
	<title>Assign (Algorithm 173)</title>
	<conference>CACM October, 1963</conference>
	<authors>
	<author>Filsak, Z.</author>
	<author>Vrchovecka, L.</author>
	</authors>
	<location>CA631023 JB March 13, 1978  5:31 PM</location>
	</document>
	<document id= '701'>
	<citations>
	<citation>701	5	701</citation>
	<citation>701	5	701</citation>
	<citation>701	5	701</citation>
	</citations>
	<title>Shuttle Sort (Algorithm 175)</title>
	<conference>CACM October, 1963</conference>
	<authors>
	<author>Schubert, G. R.</author>
	</authors>
	<location>CA631024 JB March 13, 1978  5:29 PM</location>
	</document>
	<document id= '700'>
	<citations>
	<citation>700	5	700</citation>
	<citation>700	5	700</citation>
	<citation>700	5	700</citation>
	</citations>
	<title>Hermite Interpolation (Algorithm 210)</title>
	<conference>CACM October, 1963</conference>
	<authors>
	<author>Dwyer, T. A.</author>
	</authors>
	<location>CA631025 JB March 13, 1978  5:27 PM</location>
	</document>
	<document id= '699'>
	<title>A Contour-Map Program for X-Ray Crystallography</title>
	<abstract>A FORTRAN program is described for use with the IBM 7090 system and an X, Y-plotter to produce  a contour map.  A matrix of points evenly spaced in each dimension is contoured.  Scale factors along  the axes may be different and the axes need not be perpendicular.</abstract>
	<conference>CACM October, 1963</conference>
	<authors>
	<author>Dayhoff, M. O.</author>
	</authors>
	<location>CA631026 JB March 13, 1978  5:26 PM</location>
	<citations>
	<citation>2633	5	699</citation>
	<citation>699	5	699</citation>
	<citation>699	5	699</citation>
	<citation>699	5	699</citation>
	<citation>699	6	699</citation>
	</citations>
	</document>
	<document id= '698'>
	<title>DATA-DIAL: Two-Way Communication with Computers From Ordinary dial Telephones</title>
	<abstract>An operating system is described which allows users to call up a remotely located computer  from ordinary dial telephones.  No special hardware or connections are required at the users' telephones.   Input to the computer is through the telephone dial;output from the computer is in spoken form.  Results  of a test with telephones in the Boston area are reported.</abstract>
	<conference>CACM October, 1963</conference>
	<authors>
	<author>Marill, T.</author>
	<author>Edwards, D.</author>
	<author>Feurzeig, W.</author>
	</authors>
	<location>CA631027 JB March 13, 1978  5:23 PM</location>
	<citations>
	<citation>1181	5	698</citation>
	<citation>698	5	698</citation>
	<citation>698	5	698</citation>
	<citation>698	5	698</citation>
	<citation>698	6	698</citation>
	</citations>
	</document>
	<document id= '697'>
	<citations>
	<citation>697	5	697</citation>
	<citation>697	5	697</citation>
	<citation>697	5	697</citation>
	</citations>
	<title>A Numerical Method for the Determination of Moving Field Isodose Curves for Treatment Planning  in Radiotherapy</title>
	<conference>CACM October, 1963</conference>
	<authors>
	<author>Dalrymple, G. V.</author>
	<author>Tamayo, R.</author>
	</authors>
	<location>CA631028 JB March 13, 1978  5:19 PM</location>
	</document>
	<document id= '696'>
	<title>An Automatic Data Acquisition and Inquiry System Using Disk Files</title>
	<abstract>Lockheed Missiles and Space Company has installed a large-scale Automatic Data Acquisition  (ADA) system which ties together the Company's manufacturing facilities located in Van Nuys and Sunnyvale,  California.  The system includes over 200 remote Input Stations which collect and transmit Company operating  data to a central Data Processing Center.  Two RCA 301 EDP Systems are used to record and control the  flow of data transmitted to the Data Processing Center.  A large capacity RCA 366 Data Disc File is used  to store information required to provide up-to-date information in response to inquiries received from  remotely located Inquiry Stations.  In addition to storage of data on the disk files, the system automatically  records all incoming and outgoing data on magnetic tape to be used as input to the Company's conventional  off-line business data processing applications.</abstract>
	<conference>CACM October, 1963</conference>
	<authors>
	<author>Edwards, J. D.</author>
	</authors>
	<location>CA631029 JB March 13, 1978  4:34 PM</location>
	<citations>
	<citation>696	5	696</citation>
	<citation>696	5	696</citation>
	<citation>696	5	696</citation>
	</citations>
	</document>
	<document id= '695'>
	<title>Use of the Disk File on Stretch</title>
	<abstract>The paper begins by briefly describing the Stretch (IBM 7030) computer with special emphasis  given to the organization and operation of its input-output equipment.  Physical characteristics of the  two-disk system (4,194,304 72-bit words, 8 usec-per-word transmission rate, etc.) are noted.  Timing  limitations due to arm motion and disk rotation are discussed.  Applications of disk usage are discussed  separately for problem programs and for systems programs such as compilers and the supervisory program.  Approximately 260,000 words of disk storage are reserved for the storage of systems programs and the  subroutine library.  Problem programs, however, are not currently filed on the disk.  Certain programming  techniques are discussed for transmitting words between disk and core storage with minimum delaying and  interruption of the arithmetic unit.  Dumps on disk are considered for both recovery from computer malfunction  and for mathematical or physical developments during the calculation.  Some comments are made regarding  the reliability, economics, utility and weaknesses or limitations of the disk system.  Several possible  future applications are noted which appear to have disk connotations.</abstract>
	<conference>CACM October, 1963</conference>
	<authors>
	<author>Carlson, B. G.</author>
	<author>Voorhes, E. A.</author>
	</authors>
	<location>CA631030 JB March 13, 1978  4:28 PM</location>
	<citations>
	<citation>695	5	695</citation>
	<citation>695	5	695</citation>
	<citation>695	5	695</citation>
	</citations>
	</document>
	<document id= '694'>
	<title>A Comparison of Disks and Tapes</title>
	<abstract>The principal characteristics of current magnetic disks and tape units are summarized and compared.   Some of the characteristics of disk files are illustrated in a sorting example and compared to a tapesort.   The conclusion is presented that disk files are competitive to tapes in some important applications.</abstract>
	<conference>CACM October, 1963</conference>
	<authors>
	<author>Hess, H.</author>
	</authors>
	<location>CA631031 JB March 13, 1978  4:21 PM</location>
	<citations>
	<citation>694	5	694</citation>
	<citation>694	5	694</citation>
	<citation>694	5	694</citation>
	</citations>
	</document>
	<document id= '693'>
	<title>An Extension of Fibonaccian Search To Several Variables</title>
	<abstract>A technique which uses Fibonaccian search concepts has been developed to solve optimization  problems involving unimodal functions of several variables.  The technique has not been proven to be  optimal in the sense that the one-dimensional Fibonaccian search is.  However, it is valuable for certain  kinds of calculations.</abstract>
	<conference>CACM October, 1963</conference>
	<authors>
	<author>Krolak, P.</author>
	<author>Cooper, L.</author>
	</authors>
	<location>CA631032 JB March 13, 1978  4:19 PM</location>
	<citations>
	<citation>693	5	693</citation>
	<citation>693	5	693</citation>
	<citation>693	5	693</citation>
	</citations>
	</document>
	<document id= '692'>
	<citations>
	<citation>692	5	692</citation>
	<citation>692	5	692</citation>
	<citation>692	5	692</citation>
	</citations>
	<title>On the Inverse of a Test Matrix</title>
	<conference>CACM October, 1963</conference>
	<authors>
	<author>Stockmal, F. J.</author>
	</authors>
	<location>CA631033 JB March 27, 1978  9:00 PM</location>
	</document>
	<document id= '691'>
	<title>A Description of the APT Language</title>
	<abstract>The APT (Automatically Programmed Tools) language for numerical control programming is described  using the metalinguistic notation introduced in the ALGOL 60 report.  Examples of APT usage are included.   Presented also are an historical summary of the development of APT and a statement concerning its present  status.</abstract>
	<conference>CACM November, 1963</conference>
	<authors>
	<author>Brown, S. A.</author>
	<author>Drayton, C. E.</author>
	<author>Mittman, B.</author>
	</authors>
	<location>CA631101 JB March 13, 1978  3:59 PM</location>
	<citations>
	<citation>1086	4	691</citation>
	<citation>1132	4	691</citation>
	<citation>1234	4	691</citation>
	<citation>1263	4	691</citation>
	<citation>1265	4	691</citation>
	<citation>1270	4	691</citation>
	<citation>1323	4	691</citation>
	<citation>1358	4	691</citation>
	<citation>1379	4	691</citation>
	<citation>1380	4	691</citation>
	<citation>1453	4	691</citation>
	<citation>1464	4	691</citation>
	<citation>1484	4	691</citation>
	<citation>1491	4	691</citation>
	<citation>1498	4	691</citation>
	<citation>1613	4	691</citation>
	<citation>1614	4	691</citation>
	<citation>1781	4	691</citation>
	<citation>1825	4	691</citation>
	<citation>1860	4	691</citation>
	<citation>1945	4	691</citation>
	<citation>2083	4	691</citation>
	<citation>2126	4	691</citation>
	<citation>2178	4	691</citation>
	<citation>2179	4	691</citation>
	<citation>2252	4	691</citation>
	<citation>2325	4	691</citation>
	<citation>2341	4	691</citation>
	<citation>2546	4	691</citation>
	<citation>2645	4	691</citation>
	<citation>2652	4	691</citation>
	<citation>2684	4	691</citation>
	<citation>2842	4	691</citation>
	<citation>2929	4	691</citation>
	<citation>2934	4	691</citation>
	<citation>3069	4	691</citation>
	<citation>669	4	691</citation>
	<citation>679	4	691</citation>
	<citation>691	4	691</citation>
	<citation>691	4	691</citation>
	<citation>761	4	691</citation>
	<citation>949	4	691</citation>
	<citation>989	4	691</citation>
	<citation>1781	5	691</citation>
	<citation>3184	5	691</citation>
	<citation>691	5	691</citation>
	<citation>691	5	691</citation>
	<citation>691	5	691</citation>
	<citation>823	5	691</citation>
	<citation>123	6	691</citation>
	<citation>196	6	691</citation>
	<citation>919	6	691</citation>
	<citation>990	6	691</citation>
	<citation>1007	6	691</citation>
	<citation>1046	6	691</citation>
	<citation>1131	6	691</citation>
	<citation>1139	6	691</citation>
	<citation>1140	6	691</citation>
	<citation>1149	6	691</citation>
	<citation>1198	6	691</citation>
	<citation>1215	6	691</citation>
	<citation>1223	6	691</citation>
	<citation>1265	6	691</citation>
	<citation>1303	6	691</citation>
	<citation>1323	6	691</citation>
	<citation>1358	6	691</citation>
	<citation>1366	6	691</citation>
	<citation>1421	6	691</citation>
	<citation>1460	6	691</citation>
	<citation>1462	6	691</citation>
	<citation>1463	6	691</citation>
	<citation>1467	6	691</citation>
	<citation>1468	6	691</citation>
	<citation>1477	6	691</citation>
	<citation>1491	6	691</citation>
	<citation>1496	6	691</citation>
	<citation>1531	6	691</citation>
	<citation>1535	6	691</citation>
	<citation>1565	6	691</citation>
	<citation>1601	6	691</citation>
	<citation>1602	6	691</citation>
	<citation>1613	6	691</citation>
	<citation>1614	6	691</citation>
	<citation>1626	6	691</citation>
	<citation>1641	6	691</citation>
	<citation>1787	6	691</citation>
	<citation>1788	6	691</citation>
	<citation>205	6	691</citation>
	<citation>224	6	691</citation>
	<citation>249	6	691</citation>
	<citation>288	6	691</citation>
	<citation>316	6	691</citation>
	<citation>381	6	691</citation>
	<citation>398	6	691</citation>
	<citation>11	6	691</citation>
	<citation>404	6	691</citation>
	<citation>410	6	691</citation>
	<citation>463	6	691</citation>
	<citation>464	6	691</citation>
	<citation>483	6	691</citation>
	<citation>3184	6	691</citation>
	<citation>3188	6	691</citation>
	<citation>584	6	691</citation>
	<citation>600	6	691</citation>
	<citation>680	6	691</citation>
	<citation>691	6	691</citation>
	<citation>763	6	691</citation>
	<citation>799	6	691</citation>
	</citations>
	</document>
	<document id= '690'>
	<citations>
	<citation>690	4	690</citation>
	<citation>690	4	690</citation>
	<citation>690	4	690</citation>
	<citation>929	5	690</citation>
	<citation>3195	5	690</citation>
	<citation>690	5	690</citation>
	<citation>690	5	690</citation>
	<citation>690	5	690</citation>
	<citation>890	5	690</citation>
	</citations>
	<title>USA Participation in an International Standard glossary on Information Processing</title>
	<conference>CACM November, 1963</conference>
	<authors>
	<author>Traub, J. F.</author>
	</authors>
	<location>CA631102 JB March 13, 1978  3:52 PM</location>
	</document>
	<document id= '689'>
	<citations>
	<citation>1349	4	689</citation>
	<citation>323	4	689</citation>
	<citation>689	4	689</citation>
	<citation>689	4	689</citation>
	<citation>689	4	689</citation>
	<citation>217	5	689</citation>
	<citation>323	5	689</citation>
	<citation>3197	5	689</citation>
	<citation>689	5	689</citation>
	<citation>689	5	689</citation>
	<citation>689	5	689</citation>
	</citations>
	<title>Report of a Visit to Discuss Common Programming Languages in Czechoslovakia and Poland, 1963</title>
	<conference>CACM November, 1963</conference>
	<authors>
	<author>Gosden, J. A.</author>
	<author>Merner, J. N.</author>
	<author>Gay, R. E.</author>
	<author>Jones, J. L.</author>
	<author>Christopher, J. S.</author>
	</authors>
	<location>CA631103 JB March 13, 1978  3:51 PM</location>
	</document>
	<document id= '688'>
	<citations>
	<citation>688	5	688</citation>
	<citation>688	5	688</citation>
	<citation>688	5	688</citation>
	</citations>
	<title>q-Bessel Functions In(t)(Algorithm 214)</title>
	<conference>CACM November, 1963</conference>
	<authors>
	<author>Pereira, J. M. S.</author>
	</authors>
	<location>CA631104 JB March 13, 1978  3:49 PM</location>
	</document>
	<document id= '687'>
	<citations>
	<citation>687	5	687</citation>
	<citation>687	5	687</citation>
	<citation>687	5	687</citation>
	</citations>
	<title>Shanks (Algorithm 215)</title>
	<conference>CACM November, 1963</conference>
	<authors>
	</authors>
	<location>CA631105 JB March 13, 1978  3:48 PM</location>
	</document>
	<document id= '686'>
	<citations>
	<citation>686	5	686</citation>
	<citation>686	5	686</citation>
	<citation>686	5	686</citation>
	</citations>
	<title>Smooth (Algorithm 216)</title>
	<conference>CACM November, 1963</conference>
	<authors>
	<author>George, R.</author>
	</authors>
	<location>CA631106 JB March 13, 1978  3:47 PM</location>
	</document>
	<document id= '685'>
	<citations>
	<citation>685	5	685</citation>
	<citation>685	5	685</citation>
	<citation>685	5	685</citation>
	</citations>
	<title>Euler Summation (Algorithm 8)</title>
	<conference>CACM November, 1963</conference>
	<authors>
	</authors>
	<location>CA631108 JB March 13, 1978  3:46 PM</location>
	</document>
	<document id= '684'>
	<citations>
	<citation>684	5	684</citation>
	<citation>684	5	684</citation>
	<citation>684	5	684</citation>
	</citations>
	<title>Interpolation, Differentiation, and Integration (Algorithm 77)</title>
	<conference>CACM November, 1963</conference>
	<authors>
	<author>Hennion, P. E.</author>
	</authors>
	<location>CA631108 JB March 13, 1978  3:45 PM</location>
	</document>
	<document id= '683'>
	<citations>
	<citation>683	5	683</citation>
	<citation>683	5	683</citation>
	<citation>683	5	683</citation>
	</citations>
	<title>A Serial Technique to Determine Minimum Paths</title>
	<conference>CACM November, 1963</conference>
	<authors>
	<author>Weimer, D. L.</author>
	</authors>
	<location>CA631109 JB March 13, 1978  3:44 PM</location>
	</document>
	<document id= '682'>
	<citations>
	<citation>682	5	682</citation>
	<citation>682	5	682</citation>
	<citation>682	5	682</citation>
	</citations>
	<title>Recursive programming in FORTRAN II</title>
	<conference>CACM November, 1963</conference>
	<authors>
	<author>Ayers, J. A.</author>
	</authors>
	<location>CA631110 JB March 13, 1978  3:43 PM</location>
	</document>
	<document id= '681'>
	<citations>
	<citation>681	5	681</citation>
	<citation>681	5	681</citation>
	<citation>681	5	681</citation>
	</citations>
	<title>Flexible Abbreviation of Words in a Computer Language</title>
	<conference>CACM November, 1963</conference>
	<authors>
	<author>Lomis, R. G.</author>
	<author>Rubin, J.</author>
	</authors>
	<location>CA631111 JB March 13, 1978  3:42 PM</location>
	</document>
	<document id= '680'>
	<citations>
	<citation>249	4	680</citation>
	<citation>254	4	680</citation>
	<citation>272	4	680</citation>
	<citation>1046	4	680</citation>
	<citation>1102	4	680</citation>
	<citation>1105	4	680</citation>
	<citation>1109	4	680</citation>
	<citation>1139	4	680</citation>
	<citation>1140	4	680</citation>
	<citation>1140	4	680</citation>
	<citation>1188	4	680</citation>
	<citation>1234	4	680</citation>
	<citation>1263	4	680</citation>
	<citation>1265	4	680</citation>
	<citation>1306	4	680</citation>
	<citation>1464	4	680</citation>
	<citation>1491	4	680</citation>
	<citation>1496	4	680</citation>
	<citation>1767	4	680</citation>
	<citation>1781	4	680</citation>
	<citation>1781	4	680</citation>
	<citation>1787	4	680</citation>
	<citation>1824	4	680</citation>
	<citation>1949	4	680</citation>
	<citation>321	4	680</citation>
	<citation>2059	4	680</citation>
	<citation>2126	4	680</citation>
	<citation>2126	4	680</citation>
	<citation>2546	4	680</citation>
	<citation>435	4	680</citation>
	<citation>437	4	680</citation>
	<citation>463	4	680</citation>
	<citation>464	4	680</citation>
	<citation>483	4	680</citation>
	<citation>491	4	680</citation>
	<citation>2732	4	680</citation>
	<citation>560	4	680</citation>
	<citation>583	4	680</citation>
	<citation>584	4	680</citation>
	<citation>3073	4	680</citation>
	<citation>627	4	680</citation>
	<citation>631	4	680</citation>
	<citation>631	4	680</citation>
	<citation>632	4	680</citation>
	<citation>642	4	680</citation>
	<citation>644	4	680</citation>
	<citation>653	4	680</citation>
	<citation>653	4	680</citation>
	<citation>680	4	680</citation>
	<citation>680	4	680</citation>
	<citation>761	4	680</citation>
	<citation>762	4	680</citation>
	<citation>763	4	680</citation>
	<citation>763	4	680</citation>
	<citation>795	4	680</citation>
	<citation>799	4	680</citation>
	<citation>123	4	680</citation>
	<citation>140	4	680</citation>
	<citation>919	4	680</citation>
	<citation>945	4	680</citation>
	<citation>989	4	680</citation>
	<citation>196	5	680</citation>
	<citation>1225	5	680</citation>
	<citation>1350	5	680</citation>
	<citation>1646	5	680</citation>
	<citation>1781	5	680</citation>
	<citation>1945	5	680</citation>
	<citation>2650	5	680</citation>
	<citation>2698	5	680</citation>
	<citation>2708	5	680</citation>
	<citation>404	5	680</citation>
	<citation>3093	5	680</citation>
	<citation>680	5	680</citation>
	<citation>680	5	680</citation>
	<citation>680	5	680</citation>
	<citation>823	6	680</citation>
	<citation>830	6	680</citation>
	<citation>830	6	680</citation>
	<citation>123	6	680</citation>
	<citation>196	6	680</citation>
	<citation>914	6	680</citation>
	<citation>915	6	680</citation>
	<citation>917	6	680</citation>
	<citation>919	6	680</citation>
	<citation>984	6	680</citation>
	<citation>987	6	680</citation>
	<citation>989	6	680</citation>
	<citation>990	6	680</citation>
	<citation>990	6	680</citation>
	<citation>1007	6	680</citation>
	<citation>1012	6	680</citation>
	<citation>1012	6	680</citation>
	<citation>1012	6	680</citation>
	<citation>1046	6	680</citation>
	<citation>1072	6	680</citation>
	<citation>1084	6	680</citation>
	<citation>1098	6	680</citation>
	<citation>1122	6	680</citation>
	<citation>1131	6	680</citation>
	<citation>1138	6	680</citation>
	<citation>1139	6	680</citation>
	<citation>1139	6	680</citation>
	<citation>1140	6	680</citation>
	<citation>1141	6	680</citation>
	<citation>1149	6	680</citation>
	<citation>1179	6	680</citation>
	<citation>1198	6	680</citation>
	<citation>1200	6	680</citation>
	<citation>1215	6	680</citation>
	<citation>1223	6	680</citation>
	<citation>1223	6	680</citation>
	<citation>1225	6	680</citation>
	<citation>1265	6	680</citation>
	<citation>1265	6	680</citation>
	<citation>1265	6	680</citation>
	<citation>1303	6	680</citation>
	<citation>1323	6	680</citation>
	<citation>1336	6	680</citation>
	<citation>1358	6	680</citation>
	<citation>1366	6	680</citation>
	<citation>1396	6	680</citation>
	<citation>1399	6	680</citation>
	<citation>1421	6	680</citation>
	<citation>1455	6	680</citation>
	<citation>1460	6	680</citation>
	<citation>1462	6	680</citation>
	<citation>1463	6	680</citation>
	<citation>1467	6	680</citation>
	<citation>1468	6	680</citation>
	<citation>1477	6	680</citation>
	<citation>1477	6	680</citation>
	<citation>1477	6	680</citation>
	<citation>1477	6	680</citation>
	<citation>1487	6	680</citation>
	<citation>1491	6	680</citation>
	<citation>1491	6	680</citation>
	<citation>1491	6	680</citation>
	<citation>1491	6	680</citation>
	<citation>1491	6	680</citation>
	<citation>1496	6	680</citation>
	<citation>1496	6	680</citation>
	<citation>1531	6	680</citation>
	<citation>1535	6	680</citation>
	<citation>1565	6	680</citation>
	<citation>1601	6	680</citation>
	<citation>1602	6	680</citation>
	<citation>1613	6	680</citation>
	<citation>1614	6	680</citation>
	<citation>1626	6	680</citation>
	<citation>1641	6	680</citation>
	<citation>1647	6	680</citation>
	<citation>1781	6	680</citation>
	<citation>1787	6	680</citation>
	<citation>1787	6	680</citation>
	<citation>1788	6	680</citation>
	<citation>205	6	680</citation>
	<citation>224	6	680</citation>
	<citation>249	6	680</citation>
	<citation>288	6	680</citation>
	<citation>316	6	680</citation>
	<citation>381	6	680</citation>
	<citation>398	6	680</citation>
	<citation>2110	6	680</citation>
	<citation>2111	6	680</citation>
	<citation>2111	6	680</citation>
	<citation>11	6	680</citation>
	<citation>2179	6	680</citation>
	<citation>2534	6	680</citation>
	<citation>2556	6	680</citation>
	<citation>2556	6	680</citation>
	<citation>2708	6	680</citation>
	<citation>404	6	680</citation>
	<citation>410	6	680</citation>
	<citation>463	6	680</citation>
	<citation>464	6	680</citation>
	<citation>483	6	680</citation>
	<citation>483	6	680</citation>
	<citation>3184	6	680</citation>
	<citation>3188	6	680</citation>
	<citation>576	6	680</citation>
	<citation>584	6	680</citation>
	<citation>584	6	680</citation>
	<citation>600	6	680</citation>
	<citation>669	6	680</citation>
	<citation>680	6	680</citation>
	<citation>680	6	680</citation>
	<citation>680	6	680</citation>
	<citation>680	6	680</citation>
	<citation>680	6	680</citation>
	<citation>680	6	680</citation>
	<citation>680	6	680</citation>
	<citation>680	6	680</citation>
	<citation>680	6	680</citation>
	<citation>691	6	680</citation>
	<citation>763	6	680</citation>
	<citation>763	6	680</citation>
	<citation>799	6	680</citation>
	<citation>799	6	680</citation>
	</citations>
	<title>An Error-Correcting Parse Algorithm</title>
	<conference>CACM November, 1963</conference>
	<authors>
	<author>Irons, E. T.</author>
	</authors>
	<location>CA631112 JB March 13, 1978  3:40 PM</location>
	</document>
	<document id= '679'>
	<title>Recent Improvements in MADCAP</title>
	<abstract>MADCAP is a programming language admitting subscripts, superscripts and certain forms of displayed  formulas.  The basic implementation of this language was described in a previous paper [MADCAP: A scientific  compiler for a displayed formula textbook language, Comm. ACM 4 (Jan. 61), 31-36].  This paper discusses  recent improvements in the language in three areas: complex display, logical control, and subprogramming.   In the area of complex display, the most prominent improvements are a notation for integration and for  the binomial coefficients.  In the area of logical control the chief new feature is a notation for variably  nested looping.  The discussion of subprogramming is focused on MADCAP's notation for and use of "procedures."</abstract>
	<conference>CACM November, 1963</conference>
	<authors>
	<author>Wells, M. B.</author>
	</authors>
	<location>CA631113 JB March 13, 1978  3:39 PM</location>
	<citations>
	<citation>1083	4	679</citation>
	<citation>1086	4	679</citation>
	<citation>1132	4	679</citation>
	<citation>1234	4	679</citation>
	<citation>1263	4	679</citation>
	<citation>1265	4	679</citation>
	<citation>1270	4	679</citation>
	<citation>1323	4	679</citation>
	<citation>1358	4	679</citation>
	<citation>1379	4	679</citation>
	<citation>1380	4	679</citation>
	<citation>1396	4	679</citation>
	<citation>1453	4	679</citation>
	<citation>1464	4	679</citation>
	<citation>1484	4	679</citation>
	<citation>1491	4	679</citation>
	<citation>1498	4	679</citation>
	<citation>1613	4	679</citation>
	<citation>1614	4	679</citation>
	<citation>1781	4	679</citation>
	<citation>1825	4	679</citation>
	<citation>1860	4	679</citation>
	<citation>2083	4	679</citation>
	<citation>2178	4	679</citation>
	<citation>2179	4	679</citation>
	<citation>2252	4	679</citation>
	<citation>2325	4	679</citation>
	<citation>2341	4	679</citation>
	<citation>2546	4	679</citation>
	<citation>2645	4	679</citation>
	<citation>2652	4	679</citation>
	<citation>2684	4	679</citation>
	<citation>2842	4	679</citation>
	<citation>2929	4	679</citation>
	<citation>2934	4	679</citation>
	<citation>3069	4	679</citation>
	<citation>669	4	679</citation>
	<citation>679	4	679</citation>
	<citation>679	4	679</citation>
	<citation>679	4	679</citation>
	<citation>691	4	679</citation>
	<citation>761	4	679</citation>
	<citation>949	4	679</citation>
	<citation>989	4	679</citation>
	<citation>407	5	679</citation>
	<citation>21	5	679</citation>
	<citation>3184	5	679</citation>
	<citation>679	5	679</citation>
	<citation>679	5	679</citation>
	<citation>679	5	679</citation>
	</citations>
	</document>
	<document id= '678'>
	<title>Optimizing Bit-time Computer Simulation</title>
	<abstract>A major component of a bit-time computer simulation program is the Boolean compiler.  The compiler  accepts the Boolean functions representing the simulated computer's digital circuits, and generates corresponding  sets of machine instructions which are subsequently executed on the "host" computer.  Techniques are  discussed for increasing the sophistication of the Boolean compiler so as to optimize bit-time computer  simulation.  The techniques are applicable to any general-purpose computer.</abstract>
	<conference>CACM November, 1963</conference>
	<authors>
	</authors>
	<location>CA631114 JB March 13, 1978  3:34 PM</location>
	<citations>
	<citation>678	4	678</citation>
	<citation>1030	5	678</citation>
	<citation>270	5	678</citation>
	<citation>1886	5	678</citation>
	<citation>1939	5	678</citation>
	<citation>678	5	678</citation>
	<citation>678	5	678</citation>
	<citation>678	5	678</citation>
	<citation>1030	6	678</citation>
	<citation>678	6	678</citation>
	<citation>678	6	678</citation>
	<citation>678	6	678</citation>
	</citations>
	</document>
	<document id= '677'>
	<title>Length of Strings for a Merge Sort</title>
	<abstract>Detailed statistics are given on the length of maximal sorted strings which result form the  first (internal sort) phase of a merge sort onto tapes.  It is shown that the strings produced by an  alternating method (i.e. one which produces ascending and descending strings alternately) tend to be  only three-fourths as long as those in a method which produces only ascending strings, contrary to statements  which have appeared previously in the literature.  A slight modification of the read-backward polyphase  merge algorithm is therefore suggested.</abstract>
	<conference>CACM November, 1963</conference>
	<authors>
	<author>Knuth, D. E.</author>
	</authors>
	<location>CA631115 JB March 13, 1978  3:31 PM</location>
	<citations>
	<citation>1117	4	677</citation>
	<citation>2017	4	677</citation>
	<citation>2146	4	677</citation>
	<citation>677	4	677</citation>
	<citation>860	4	677</citation>
	<citation>1638	5	677</citation>
	<citation>2176	5	677</citation>
	<citation>2272	5	677</citation>
	<citation>677	5	677</citation>
	<citation>677	5	677</citation>
	<citation>677	5	677</citation>
	<citation>861	5	677</citation>
	<citation>1638	6	677</citation>
	<citation>677	6	677</citation>
	<citation>677	6	677</citation>
	<citation>677	6	677</citation>
	</citations>
	</document>
	<document id= '676'>
	<citations>
	<citation>676	5	676</citation>
	<citation>676	5	676</citation>
	<citation>676	5	676</citation>
	</citations>
	<title>On the Computation of a Certain Type of IncompleteBeta Functions</title>
	<conference>CACM November, 1963</conference>
	<authors>
	<author>Tang, I. C.</author>
	</authors>
	<location>CA631116 JB March 13, 1978  3:27 PM</location>
	</document>
	<document id= '675'>
	<title>Coding Clinical Laboratory Data For Automatic Storage and Retrieval</title>
	<abstract>A series of clinical laboratory codes have been developed to accept and store urin analysis, blood  chemistry, and hematology test results for automatic data processing.  The codes, although constructed  as part of a computerized hospital simulation, have been able to handle the results of every laboratory  test that they have encountered.  The unique feature of these codes is that they can accept conventionally  recorded qualitative as well as quantitative test results.  Consequently, clinical test results need  not be arbitrarily stratified, standardized, or altered in any way to be coded.  This paper describes  how the codes were developed and presents a listing of the urin analysis codes.  Five criteria used in developing  the codes are outlined and the problem of multiple-synonymous terminology is discussed.  A solution to  the problem is described.  Flexible, computer-produced, composite laboratory reports are also discussed,  along with reproduction of such a report. The paper concludes that even though many problems remain unsolved,  the next ten years could witness the emergence of a practical automated information system in the laboratory.</abstract>
	<conference>CACM November, 1963</conference>
	<authors>
	<author>Gross, L. D.</author>
	</authors>
	<location>CA631117 JB March 13, 1978  3:26 PM</location>
	<citations>
	<citation>675	5	675</citation>
	<citation>675	5	675</citation>
	<citation>675	5	675</citation>
	</citations>
	</document>
	<document id= '674'>
	<citations>
	<citation>674	5	674</citation>
	<citation>674	5	674</citation>
	<citation>674	5	674</citation>
	</citations>
	<title>Application of IBM 1620 EDP Methods to the Calculation of the Formation Constants of Complex  Irons</title>
	<conference>CACM November, 1963</conference>
	<authors>
	<author>Andrews, A. C.</author>
	<author>Hassler, J.</author>
	<author>DeCou, F.</author>
	</authors>
	<location>CA631118 JB March 13, 1978  3:18 PM</location>
	</document>
	<document id= '673'>
	<citations>
	<citation>673	5	673</citation>
	<citation>673	5	673</citation>
	<citation>673	5	673</citation>
	</citations>
	<title>Account Classification at Automating Banks</title>
	<conference>CACM December, 1963</conference>
	<authors>
	<author>Eckert, J. B.</author>
	</authors>
	<location>CA631201 JB March 13, 1978  3:15 PM</location>
	</document>
	<document id= '672'>
	<citations>
	<citation>672	5	672</citation>
	<citation>672	5	672</citation>
	<citation>672	5	672</citation>
	</citations>
	<title>Recent Developments Affecting ADP in Tax Administration</title>
	<conference>CACM December, 1963</conference>
	<authors>
	<author>Leibowitz, G. J.</author>
	</authors>
	<location>CA631202 JB March 13, 1978  3:14 PM</location>
	</document>
	<document id= '671'>
	<title>TELEFILE-A Case Study of an On-Line Savings Bank Application</title>
	<abstract>The development of an on-line computer system for a savings bank institution is traced from  the early conceptual needs of the bank to the consummation of design by The Teleregister Corporation.   Both bank and equipment criteria are specified which led to the development of the Telefile System of  The Teleregister Corporation.  Operation of the on-line and off-line programs are described and statistics  are cited for reliability and performance of the system.  Benefits to the bank are discussed from the  banker's point of view; an indication of future trends in the on-line savings bank field is also discussed.</abstract>
	<conference>CACM December, 1963</conference>
	<authors>
	<author>Sanders, M.</author>
	</authors>
	<location>CA631203 JB March 13, 1978  3:13 PM</location>
	<citations>
	<citation>671	5	671</citation>
	<citation>671	5	671</citation>
	<citation>671	5	671</citation>
	</citations>
	</document>
	<document id= '670'>
	<title>Some Legal Implications of the Use of Computers in the Banking Business</title>
	<abstract>The introduction of computers in to the banking business has a wide variety of legal implications  that merit careful attention at this very early stage.  The industry is highly regulated by government  and, hence, is subject to many statutes and regulations.  It also is affected by important common law  rules established by courts.  The legal ramifications involve not only the mechanization itself, but  also the very significant, economically attractive phenomenon of off premises processing.  It is essential  to identify and provide for many legal aspects right now, before systems and practices crystallize, in  order to avoid the later impact of unanticipated physical complications and expense.  The legal aspects  of computerization in the banking business are especially diverse.  In some states, there might be the  basic question whether banks are authorized by law to invest in the new facilities, either directly or  through cooperatives.  More challenging are questions relating to off-premises processors, particularly  with respect to the obligation not to disclose information concerning a bank's customers, the adequacy  of fidelity bond coverage, the extent of liability for improper refusal to pay a check, and susceptibility  to regulation by government agencies.  Also pertinent is the propriety of data processing by banks for  nonbank entities and particularly of the rendering of that service without charge for bank depositors.</abstract>
	<conference>CACM December, 1963</conference>
	<authors>
	<author>Freed, R. N.</author>
	</authors>
	<location>CA631204 JB March 13, 1978  3:09 PM</location>
	<citations>
	<citation>670	5	670</citation>
	<citation>670	5	670</citation>
	<citation>670	5	670</citation>
	</citations>
	</document>
	<document id= '669'>
	<citations>
	<citation>205	4	669</citation>
	<citation>210	4	669</citation>
	<citation>214	4	669</citation>
	<citation>1086	4	669</citation>
	<citation>1132	4	669</citation>
	<citation>1234	4	669</citation>
	<citation>1263	4	669</citation>
	<citation>1265	4	669</citation>
	<citation>1270	4	669</citation>
	<citation>1323	4	669</citation>
	<citation>1358	4	669</citation>
	<citation>1379	4	669</citation>
	<citation>1380	4	669</citation>
	<citation>1453	4	669</citation>
	<citation>1464	4	669</citation>
	<citation>1484	4	669</citation>
	<citation>1491	4	669</citation>
	<citation>1498	4	669</citation>
	<citation>1613	4	669</citation>
	<citation>1614	4	669</citation>
	<citation>1781	4	669</citation>
	<citation>1781	4	669</citation>
	<citation>1825	4	669</citation>
	<citation>1860	4	669</citation>
	<citation>1982	4	669</citation>
	<citation>398	4	669</citation>
	<citation>2083	4	669</citation>
	<citation>2178	4	669</citation>
	<citation>2179	4	669</citation>
	<citation>2252	4	669</citation>
	<citation>2325	4	669</citation>
	<citation>2341	4	669</citation>
	<citation>2546	4	669</citation>
	<citation>2645	4	669</citation>
	<citation>2652	4	669</citation>
	<citation>2684	4	669</citation>
	<citation>2842	4	669</citation>
	<citation>2929	4	669</citation>
	<citation>2934	4	669</citation>
	<citation>3069	4	669</citation>
	<citation>642	4	669</citation>
	<citation>669	4	669</citation>
	<citation>669	4	669</citation>
	<citation>669	4	669</citation>
	<citation>679	4	669</citation>
	<citation>691	4	669</citation>
	<citation>761	4	669</citation>
	<citation>100	4	669</citation>
	<citation>123	4	669</citation>
	<citation>164	4	669</citation>
	<citation>949	4	669</citation>
	<citation>989	4	669</citation>
	<citation>1	5	669</citation>
	<citation>1084	5	669</citation>
	<citation>1379	5	669</citation>
	<citation>1625	5	669</citation>
	<citation>1945	5	669</citation>
	<citation>410	5	669</citation>
	<citation>3184	5	669</citation>
	<citation>669	5	669</citation>
	<citation>669	5	669</citation>
	<citation>669	5	669</citation>
	<citation>823	6	669</citation>
	<citation>868	6	669</citation>
	<citation>914	6	669</citation>
	<citation>915	6	669</citation>
	<citation>917	6	669</citation>
	<citation>984	6	669</citation>
	<citation>989	6	669</citation>
	<citation>990	6	669</citation>
	<citation>1012	6	669</citation>
	<citation>1084	6	669</citation>
	<citation>1098	6	669</citation>
	<citation>1122	6	669</citation>
	<citation>1138	6	669</citation>
	<citation>1139	6	669</citation>
	<citation>1141	6	669</citation>
	<citation>1200	6	669</citation>
	<citation>1223	6	669</citation>
	<citation>1248	6	669</citation>
	<citation>1263	6	669</citation>
	<citation>1265	6	669</citation>
	<citation>1336	6	669</citation>
	<citation>1396	6	669</citation>
	<citation>1455	6	669</citation>
	<citation>1477	6	669</citation>
	<citation>1477	6	669</citation>
	<citation>1487	6	669</citation>
	<citation>1491	6	669</citation>
	<citation>1496	6	669</citation>
	<citation>483	6	669</citation>
	<citation>3184	6	669</citation>
	<citation>584	6	669</citation>
	<citation>603	6	669</citation>
	<citation>644	6	669</citation>
	<citation>669	6	669</citation>
	<citation>669	6	669</citation>
	<citation>669	6	669</citation>
	<citation>669	6	669</citation>
	<citation>680	6	669</citation>
	<citation>761	6	669</citation>
	<citation>763	6	669</citation>
	<citation>791	6	669</citation>
	<citation>797	6	669</citation>
	</citations>
	<title>A Specification of JOVIAL</title>
	<conference>CACM December, 1963</conference>
	<authors>
	<author>Shaw, C. J.</author>
	</authors>
	<location>CA631205 JB March 13, 1978  2:59 PM</location>
	</document>
	<document id= '668'>
	<citations>
	<citation>668	5	668</citation>
	<citation>668	5	668</citation>
	<citation>668	5	668</citation>
	</citations>
	<title>Minimum Excess Cost Curve (Algorithm 217)</title>
	<conference>CACM December, 1963</conference>
	<authors>
	<author>Briggs, W. A.</author>
	</authors>
	<location>CA631206 JB March 13, 1978  2:58 PM</location>
	</document>
	<document id= '667'>
	<citations>
	<citation>667	5	667</citation>
	<citation>667	5	667</citation>
	<citation>667	5	667</citation>
	</citations>
	<title>Kutta Merson (Algorithm 218)</title>
	<conference>CACM December, 1963</conference>
	<authors>
	<author>Lukehart, P. M.</author>
	</authors>
	<location>CA631207 JB March 13, 1978  2:57 PM</location>
	</document>
	<document id= '666'>
	<citations>
	<citation>1916	5	666</citation>
	<citation>666	5	666</citation>
	<citation>666	5	666</citation>
	<citation>666	5	666</citation>
	<citation>1533	6	666</citation>
	<citation>666	6	666</citation>
	</citations>
	<title>Topological Ordering for Pert Networks (Algorithm 219)</title>
	<conference>CACM December, 1963</conference>
	<authors>
	<author>Kase, R. H.</author>
	</authors>
	<location>CA631208 JB March 13, 1978  2:56 PM</location>
	</document>
	<document id= '665'>
	<citations>
	<citation>665	5	665</citation>
	<citation>665	5	665</citation>
	<citation>665	5	665</citation>
	</citations>
	<title>Gauss-Seidel (Algorithm 220)</title>
	<conference>CACM December, 1963</conference>
	<authors>
	<author>Shantz, P. W.</author>
	</authors>
	<location>CA631209 JB March 13, 1978  2:55 PM</location>
	</document>
	<document id= '664'>
	<citations>
	<citation>664	5	664</citation>
	<citation>664	5	664</citation>
	<citation>664	5	664</citation>
	</citations>
	<title>Assignment (Algorithm 27)</title>
	<conference>CACM December, 1963</conference>
	<authors>
	<author>Witty, R. D.</author>
	</authors>
	<location>CA631210 JB March 13, 1978  2:54 PM</location>
	</document>
	<document id= '663'>
	<citations>
	<citation>663	5	663</citation>
	<citation>663	5	663</citation>
	<citation>663	5	663</citation>
	</citations>
	<title>Determinant (Algorithm 159)</title>
	<conference>CACM December, 1963</conference>
	<authors>
	<author>Lapidus, A.</author>
	</authors>
	<location>CA631211 JB March 13, 1978  2:53 PM</location>
	</document>
	<document id= '662'>
	<citations>
	<citation>662	5	662</citation>
	<citation>662	5	662</citation>
	<citation>662	5	662</citation>
	</citations>
	<title>Shuttle Sort (Algorithm 175)</title>
	<conference>CACM December, 1963</conference>
	<authors>
	<author>Juelich, O. C.</author>
	</authors>
	<location>CA631212 JB March 13, 1978  2:52 PM</location>
	</document>
	<document id= '661'>
	<title>Indexing and the Lambda-Notation</title>
	<abstract>Some methods of indexing sequentially stored elements of sparse multi-dimensional arrays are  described in the scheme A notation.</abstract>
	<conference>CACM December, 1963</conference>
	<authors>
	<author>Barnett, M. P.</author>
	</authors>
	<location>CA631213 JB March 13, 1978  2:51 PM</location>
	<citations>
	<citation>661	5	661</citation>
	<citation>661	5	661</citation>
	<citation>661	5	661</citation>
	</citations>
	</document>
	<document id= '660'>
	<citations>
	<citation>660	5	660</citation>
	<citation>660	5	660</citation>
	<citation>660	5	660</citation>
	</citations>
	<title>More Test Matrices for Determinants and Inverses (Pracnique)</title>
	<conference>CACM December, 1963</conference>
	<authors>
	<author>Englar, T. S.</author>
	</authors>
	<location>CA631214 JB March 13, 1978  2:46 PM</location>
	</document>
	<document id= '659'>
	<citations>
	<citation>1121	4	659</citation>
	<citation>659	4	659</citation>
	<citation>964	4	659</citation>
	<citation>659	5	659</citation>
	<citation>659	5	659</citation>
	<citation>659	5	659</citation>
	<citation>759	5	659</citation>
	</citations>
	<title>Reversion of Series (Algorithm 193)</title>
	<conference>CACM December, 1963</conference>
	<authors>
	</authors>
	<location>CA631215 JB March 23, 1978  8:08 PM</location>
	</document>
	<document id= '658'>
	<citations>
	<citation>658	5	658</citation>
	<citation>658	5	658</citation>
	<citation>658	5	658</citation>
	</citations>
	<title>Discussion-The Pros and Cons of a Special IR Language</title>
	<conference>CACM January, 1962</conference>
	<authors>
	<author>Sammet, J. E.</author>
	<author>Ohlman, H.</author>
	<author>Bohnest, H. G.</author>
	</authors>
	<location>CA620101 JB March 20, 1978  4:50 PM</location>
	</document>
	<document id= '657'>
	<citations>
	<citation>657	4	657</citation>
	<citation>657	4	657</citation>
	<citation>1136	5	657</citation>
	<citation>279	5	657</citation>
	<citation>409	5	657</citation>
	<citation>657	5	657</citation>
	<citation>657	5	657</citation>
	<citation>657	5	657</citation>
	<citation>493	6	657</citation>
	<citation>616	6	657</citation>
	<citation>657	6	657</citation>
	</citations>
	<title>Information Structures for Processing and Retrieving</title>
	<conference>CACM January, 1962</conference>
	<authors>
	<author>Colilla, R. A.</author>
	<author>Sams, B. H.</author>
	</authors>
	<location>CA620102 JB March 20, 1978  4:48 PM</location>
	</document>
	<document id= '656'>
	<citations>
	<citation>1309	5	656</citation>
	<citation>656	5	656</citation>
	<citation>656	5	656</citation>
	<citation>656	5	656</citation>
	<citation>892	5	656</citation>
	<citation>653	6	656</citation>
	<citation>656	6	656</citation>
	<citation>656	6	656</citation>
	</citations>
	<title>An Information System With The Ability To Extract Intelligence From Data</title>
	<conference>CACM January, 1962</conference>
	<authors>
	<author>Wang, T. L.</author>
	</authors>
	<location>CA620103 JB March 20, 1978  4:47 PM</location>
	</document>
	<document id= '655'>
	<title>COMIT as an IR Language</title>
	<abstract>Many of the features that make COMIT a good all around symbol manipulation language also render  it well suited to various types of information retrieval programs.  Presented here is a general discussion  of this unique and different programming language and an examination of some of its applications.</abstract>
	<conference>CACM January, 1962</conference>
	<authors>
	<author>Yngve, V. H.</author>
	</authors>
	<location>CA620104 JB March 20, 1978  4:46 PM</location>
	<citations>
	<citation>1145	5	655</citation>
	<citation>655	5	655</citation>
	<citation>655	5	655</citation>
	<citation>655	5	655</citation>
	<citation>655	6	655</citation>
	</citations>
	</document>
	<document id= '654'>
	<citations>
	<citation>654	5	654</citation>
	<citation>654	5	654</citation>
	<citation>654	5	654</citation>
	</citations>
	<title>Language Problems Posed by Heavily Structured Data</title>
	<conference>CACM January, 1962</conference>
	<authors>
	<author>Barnes, R. F.</author>
	</authors>
	<location>CA620105 JB March 20, 1978  4:40 PM</location>
	</document>
	<document id= '653'>
	<citations>
	<citation>249	4	653</citation>
	<citation>254	4	653</citation>
	<citation>272	4	653</citation>
	<citation>1046	4	653</citation>
	<citation>1102	4	653</citation>
	<citation>1105	4	653</citation>
	<citation>1109	4	653</citation>
	<citation>1139	4	653</citation>
	<citation>1140	4	653</citation>
	<citation>1140	4	653</citation>
	<citation>1188	4	653</citation>
	<citation>1234	4	653</citation>
	<citation>1263	4	653</citation>
	<citation>1265	4	653</citation>
	<citation>1306	4	653</citation>
	<citation>1464	4	653</citation>
	<citation>1491	4	653</citation>
	<citation>1496	4	653</citation>
	<citation>1767	4	653</citation>
	<citation>1781	4	653</citation>
	<citation>1781	4	653</citation>
	<citation>1787	4	653</citation>
	<citation>1824	4	653</citation>
	<citation>1949	4	653</citation>
	<citation>321	4	653</citation>
	<citation>2059	4	653</citation>
	<citation>2126	4	653</citation>
	<citation>2126	4	653</citation>
	<citation>2546	4	653</citation>
	<citation>435	4	653</citation>
	<citation>437	4	653</citation>
	<citation>463	4	653</citation>
	<citation>464	4	653</citation>
	<citation>483	4	653</citation>
	<citation>491	4	653</citation>
	<citation>2732	4	653</citation>
	<citation>560	4	653</citation>
	<citation>583	4	653</citation>
	<citation>584	4	653</citation>
	<citation>3073	4	653</citation>
	<citation>627	4	653</citation>
	<citation>631	4	653</citation>
	<citation>631	4	653</citation>
	<citation>632	4	653</citation>
	<citation>642	4	653</citation>
	<citation>644	4	653</citation>
	<citation>653	4	653</citation>
	<citation>653	4	653</citation>
	<citation>680	4	653</citation>
	<citation>680	4	653</citation>
	<citation>761	4	653</citation>
	<citation>762	4	653</citation>
	<citation>763	4	653</citation>
	<citation>763	4	653</citation>
	<citation>795	4	653</citation>
	<citation>799	4	653</citation>
	<citation>123	4	653</citation>
	<citation>140	4	653</citation>
	<citation>919	4	653</citation>
	<citation>945	4	653</citation>
	<citation>989	4	653</citation>
	<citation>196	5	653</citation>
	<citation>1324	5	653</citation>
	<citation>404	5	653</citation>
	<citation>653	5	653</citation>
	<citation>653	5	653</citation>
	<citation>653	5	653</citation>
	<citation>892	5	653</citation>
	<citation>634	6	653</citation>
	<citation>652	6	653</citation>
	<citation>653	6	653</citation>
	<citation>653	6	653</citation>
	<citation>656	6	653</citation>
	</citations>
	<title>Translation of Retrieval Requests Couched in a "Semiformal" English-Like Language*</title>
	<conference>CACM January, 1962</conference>
	<authors>
	<author>Warshall, S.</author>
	</authors>
	<location>CA620106 JB March 20, 1978  4:39 PM</location>
	</document>
	<document id= '652'>
	<citations>
	<citation>1324	5	652</citation>
	<citation>652	5	652</citation>
	<citation>652	5	652</citation>
	<citation>652	5	652</citation>
	<citation>634	6	652</citation>
	<citation>652	6	652</citation>
	<citation>653	6	652</citation>
	</citations>
	<title>Use of Semantic Structure in Information Systems</title>
	<conference>CACM January, 1962</conference>
	<authors>
	<author>Sable, J. D.</author>
	</authors>
	<location>CA620107 JB March 20, 1978  4:37 PM</location>
	</document>
	<document id= '651'>
	<citations>
	<citation>651	5	651</citation>
	<citation>651	5	651</citation>
	<citation>651	5	651</citation>
	</citations>
	<title>A Survey of Languages and Systems for Information Retrieval</title>
	<conference>CACM January, 1962</conference>
	<authors>
	<author>Grems, M.</author>
	</authors>
	<location>CA620108 JB March 20, 1978  4:36 PM</location>
	</document>
	<document id= '650'>
	<citations>
	<citation>650	5	650</citation>
	<citation>650	5	650</citation>
	<citation>650	5	650</citation>
	</citations>
	<title>Curve Fitting with Constraints (Algorithm 74)</title>
	<conference>CACM January, 1962</conference>
	<authors>
	<author>Peck, J. E. L.</author>
	</authors>
	<location>CA620109 JB March 20, 1978  4:35 PM</location>
	</document>
	<document id= '649'>
	<citations>
	<citation>649	5	649</citation>
	<citation>649	5	649</citation>
	<citation>649	5	649</citation>
	</citations>
	<title>FACTORS (Algorithm 75)</title>
	<conference>CACM January, 1962</conference>
	<authors>
	<author>Peck, J. E. L.</author>
	</authors>
	<location>CA620110 JB March 20, 1978  4:34 PM</location>
	</document>
	<document id= '648'>
	<citations>
	<citation>648	5	648</citation>
	<citation>648	5	648</citation>
	<citation>648	5	648</citation>
	</citations>
	<title>Sorting Procedures (Algorithm 76)</title>
	<conference>CACM January, 1962</conference>
	<authors>
	<author>Flores, I.</author>
	</authors>
	<location>CA620111 JB March 20, 1978  4:33 PM</location>
	</document>
	<document id= '647'>
	<citations>
	<citation>647	5	647</citation>
	<citation>647	5	647</citation>
	<citation>647	5	647</citation>
	</citations>
	<title>Numerical Solution of the Polynomial Equation (Algorithm 30)</title>
	<conference>CACM January, 1962</conference>
	<authors>
	<author>Cohen, K. J.</author>
	</authors>
	<location>CA620112 JB March 20, 1978  4:32 PM</location>
	</document>
	<document id= '646'>
	<citations>
	<citation>646	5	646</citation>
	<citation>646	5	646</citation>
	<citation>646	5	646</citation>
	</citations>
	<title>Inverse of a Finite Segment of the Hilbert Matrix (Algorithm 50)</title>
	<conference>CACM January, 1962</conference>
	<authors>
	<author>Randell, B.</author>
	</authors>
	<location>CA620113 JB March 20, 1978  4:31 PM</location>
	</document>
	<document id= '645'>
	<citations>
	<citation>645	5	645</citation>
	<citation>645	5	645</citation>
	<citation>645	5	645</citation>
	</citations>
	<title>INVRS (Algorithm 66)</title>
	<conference>CACM January, 1962</conference>
	<authors>
	<author>Randell, B.</author>
	<author>Broyden, C. G.</author>
	</authors>
	<location>CA620114 JB March 20, 1978  4:04 PM</location>
	</document>
	<document id= '644'>
	<title>A String Language for Symbol Manipulation Based on ALGOL 60</title>
	<abstract>An artificial computer programming language is proposed for describing the manipulation of  strings of characters and symbols.  The concept of strings, introduced in the ALGOL 60 report, is extended  by adding: (1) the declaration of strings, substrings, and string arrays with explicit lengths; (2) the  ability to concatenate and shift strings; and (3) the ranking of symbols for comparing stings in Boolean  relations.  A primer or informal description of the language is followed by examples, a description of  experiments with the language on an IBM 704 computer, and a formal description which, taken with the  ALGOL 60 Report, defines the proposed string language.</abstract>
	<conference>CACM January, 1962</conference>
	<authors>
	<author>Wegstein, J. H.</author>
	<author>Youden, W. W.</author>
	</authors>
	<location>CA620115 JB March 20, 1978  4:02 PM</location>
	<citations>
	<citation>249	4	644</citation>
	<citation>254	4	644</citation>
	<citation>272	4	644</citation>
	<citation>1102	4	644</citation>
	<citation>1109	4	644</citation>
	<citation>1140	4	644</citation>
	<citation>1188	4	644</citation>
	<citation>1306	4	644</citation>
	<citation>1464	4	644</citation>
	<citation>1491	4	644</citation>
	<citation>1767	4	644</citation>
	<citation>1781	4	644</citation>
	<citation>1787	4	644</citation>
	<citation>1949	4	644</citation>
	<citation>321	4	644</citation>
	<citation>2059	4	644</citation>
	<citation>2126	4	644</citation>
	<citation>435	4	644</citation>
	<citation>437	4	644</citation>
	<citation>463	4	644</citation>
	<citation>483	4	644</citation>
	<citation>491	4	644</citation>
	<citation>2732	4	644</citation>
	<citation>560	4	644</citation>
	<citation>583	4	644</citation>
	<citation>3073	4	644</citation>
	<citation>627	4	644</citation>
	<citation>631	4	644</citation>
	<citation>632	4	644</citation>
	<citation>642	4	644</citation>
	<citation>644	4	644</citation>
	<citation>644	4	644</citation>
	<citation>644	4	644</citation>
	<citation>653	4	644</citation>
	<citation>680	4	644</citation>
	<citation>761	4	644</citation>
	<citation>762	4	644</citation>
	<citation>763	4	644</citation>
	<citation>123	4	644</citation>
	<citation>140	4	644</citation>
	<citation>919	4	644</citation>
	<citation>989	4	644</citation>
	<citation>196	5	644</citation>
	<citation>1084	5	644</citation>
	<citation>206	5	644</citation>
	<citation>207	5	644</citation>
	<citation>644	5	644</citation>
	<citation>644	5	644</citation>
	<citation>644	5	644</citation>
	<citation>868	6	644</citation>
	<citation>603	6	644</citation>
	<citation>644	6	644</citation>
	<citation>669	6	644</citation>
	<citation>791	6	644</citation>
	<citation>797	6	644</citation>
	</citations>
	</document>
	<document id= '643'>
	<citations>
	<citation>238	4	643</citation>
	<citation>633	4	643</citation>
	<citation>643	4	643</citation>
	<citation>643	4	643</citation>
	<citation>238	5	643</citation>
	<citation>633	5	643</citation>
	<citation>643	5	643</citation>
	<citation>643	5	643</citation>
	<citation>643	5	643</citation>
	<citation>238	6	643</citation>
	<citation>633	6	643</citation>
	<citation>643	6	643</citation>
	<citation>643	6	643</citation>
	</citations>
	<title>Simulation and Analysis of Biochemcial Systems (II. Solution of Differential Equations)</title>
	<conference>CACM January, 1962</conference>
	<authors>
	<author>Larson, R.</author>
	<author>Sellers, P.</author>
	<author>Meyer, R.</author>
	</authors>
	<location>CA620116 JB March 20, 1978  3:58 PM</location>
	</document>
	<document id= '642'>
	<citations>
	<citation>205	4	642</citation>
	<citation>210	4	642</citation>
	<citation>214	4	642</citation>
	<citation>249	4	642</citation>
	<citation>254	4	642</citation>
	<citation>272	4	642</citation>
	<citation>1102	4	642</citation>
	<citation>1109	4	642</citation>
	<citation>1140	4	642</citation>
	<citation>1188	4	642</citation>
	<citation>1306	4	642</citation>
	<citation>1464	4	642</citation>
	<citation>1491	4	642</citation>
	<citation>1767	4	642</citation>
	<citation>1781	4	642</citation>
	<citation>1787	4	642</citation>
	<citation>1949	4	642</citation>
	<citation>1982	4	642</citation>
	<citation>321	4	642</citation>
	<citation>398	4	642</citation>
	<citation>2059	4	642</citation>
	<citation>2126	4	642</citation>
	<citation>435	4	642</citation>
	<citation>437	4	642</citation>
	<citation>463	4	642</citation>
	<citation>483	4	642</citation>
	<citation>491	4	642</citation>
	<citation>2732	4	642</citation>
	<citation>560	4	642</citation>
	<citation>583	4	642</citation>
	<citation>3073	4	642</citation>
	<citation>627	4	642</citation>
	<citation>631	4	642</citation>
	<citation>632	4	642</citation>
	<citation>642	4	642</citation>
	<citation>642	4	642</citation>
	<citation>644	4	642</citation>
	<citation>653	4	642</citation>
	<citation>669	4	642</citation>
	<citation>680	4	642</citation>
	<citation>761	4	642</citation>
	<citation>762	4	642</citation>
	<citation>763	4	642</citation>
	<citation>100	4	642</citation>
	<citation>123	4	642</citation>
	<citation>123	4	642</citation>
	<citation>140	4	642</citation>
	<citation>164	4	642</citation>
	<citation>919	4	642</citation>
	<citation>989	4	642</citation>
	<citation>196	5	642</citation>
	<citation>1	5	642</citation>
	<citation>1173	5	642</citation>
	<citation>1188	5	642</citation>
	<citation>642	5	642</citation>
	<citation>642	5	642</citation>
	<citation>642	5	642</citation>
	<citation>196	6	642</citation>
	<citation>642	6	642</citation>
	<citation>642	6	642</citation>
	</citations>
	<title>An Introduction to ALGOL</title>
	<conference>CACM February, 1962</conference>
	<authors>
	<author>Schwarz, H. R.</author>
	</authors>
	<location>CA620201 JB March 20, 1978  3:57 PM</location>
	</document>
	<document id= '641'>
	<citations>
	<citation>641	5	641</citation>
	<citation>641	5	641</citation>
	<citation>641	5	641</citation>
	</citations>
	<title>Interpolation, Differentiation, and Integration (Algorithm 77)</title>
	<conference>CACM February, 1962</conference>
	<authors>
	<author>Hennion, P. E.</author>
	</authors>
	<location>CA620202 JB March 20, 1978  3:56 PM</location>
	</document>
	<document id= '640'>
	<citations>
	<citation>640	5	640</citation>
	<citation>640	5	640</citation>
	<citation>640	5	640</citation>
	</citations>
	<title>Rational Roots of Polynomials with Integer Coefficients (Algorithm 78)</title>
	<conference>CACM February, 1962</conference>
	<authors>
	<author>Perry, C.</author>
	</authors>
	<location>CA620203 JB March 20, 1978  3:55 PM</location>
	</document>
	<document id= '639'>
	<citations>
	<citation>639	5	639</citation>
	<citation>639	5	639</citation>
	<citation>639	5	639</citation>
	</citations>
	<title>Difference Expression Coefficients (Algorithm 79)</title>
	<conference>CACM February, 1962</conference>
	<authors>
	<author>Giammo, T. P.</author>
	</authors>
	<location>CA620204 JB March 20, 1978  3:54 PM</location>
	</document>
	<document id= '638'>
	<citations>
	<citation>638	4	638</citation>
	<citation>300	5	638</citation>
	<citation>638	5	638</citation>
	<citation>638	5	638</citation>
	<citation>638	5	638</citation>
	</citations>
	<title>SURGE: A Recoding of the COBOL Merchandise Control Algorithm</title>
	<conference>CACM February, 1962</conference>
	<authors>
	<author>Longo, L. F.</author>
	</authors>
	<location>CA620205 JB March 20, 1978 3:53 PM</location>
	</document>
	<document id= '637'>
	<title>A NELIAC-Generated 7090-1401 Compiler</title>
	<abstract>NELIAC systems for several different machines have been generated using the original NELIAC  system developed at the Naval Electronics Laboratory, San Diego, in 1958.  A basic "bootstrap" process  was used to generate all but the first, i.e. the systems were described in the NELIAC language and generated  by an existing NELIAC compiler.  This experience has shown there is no inherent difficulty in "building  compilers with compilers"; indeed, it pointed out many advantages in using a POL for constructing programming  systems.  This report presents the results of a project completed in May, 1961 in which the NELIAC system  was used to generate a compiler for the IBM 1401.  The 1401 compiler, which runs on the 7090 and produces  1401 programs, was described in the NELIAC language and generated with 7090 NELIAC system.  The reduction  in programming time and the improvement in documentation of the system were very significant.</abstract>
	<conference>CACM February, 1962</conference>
	<authors>
	<author>Watt, J. B.</author>
	<author>Wattenburg, W. H.</author>
	</authors>
	<location>CA620206 JB March 20, 1978  3:52 PM</location>
	<citations>
	<citation>1781	4	637</citation>
	<citation>637	4	637</citation>
	<citation>637	4	637</citation>
	<citation>123	4	637</citation>
	<citation>123	5	637</citation>
	<citation>165	5	637</citation>
	<citation>637	5	637</citation>
	<citation>637	5	637</citation>
	<citation>637	5	637</citation>
	</citations>
	</document>
	<document id= '636'>
	<citations>
	<citation>1117	5	636</citation>
	<citation>636	5	636</citation>
	<citation>636	5	636</citation>
	<citation>636	5	636</citation>
	<citation>861	6	636</citation>
	<citation>862	6	636</citation>
	<citation>636	6	636</citation>
	</citations>
	<title>Tape Splitting in an Iterative Program</title>
	<conference>CACM February, 1962</conference>
	<authors>
	<author>Weisert, C.</author>
	</authors>
	<location>CA620207 JB March 20, 1978  3:46 PM</location>
	</document>
	<document id= '635'>
	<citations>
	<citation>1151	5	635</citation>
	<citation>1265	5	635</citation>
	<citation>2769	5	635</citation>
	<citation>635	5	635</citation>
	<citation>635	5	635</citation>
	<citation>635	5	635</citation>
	<citation>404	6	635</citation>
	<citation>464	6	635</citation>
	<citation>3184	6	635</citation>
	<citation>631	6	635</citation>
	<citation>635	6	635</citation>
	<citation>635	6	635</citation>
	<citation>635	6	635</citation>
	</citations>
	<title>A Note on Multiplying Boolean Matrices</title>
	<conference>CACM February, 1962</conference>
	<authors>
	<author>Baker, J. J.</author>
	</authors>
	<location>CA620208 JB March 20, 1978  3:45 PM</location>
	</document>
	<document id= '634'>
	<citations>
	<citation>1087	4	634</citation>
	<citation>634	4	634</citation>
	<citation>931	5	634</citation>
	<citation>1324	5	634</citation>
	<citation>329	5	634</citation>
	<citation>634	5	634</citation>
	<citation>634	5	634</citation>
	<citation>634	5	634</citation>
	<citation>202	6	634</citation>
	<citation>396	6	634</citation>
	<citation>634	6	634</citation>
	<citation>634	6	634</citation>
	<citation>652	6	634</citation>
	<citation>653	6	634</citation>
	</citations>
	<title>Manipulation of Trees in Information Retrieval*</title>
	<conference>CACM February, 1962</conference>
	<authors>
	<author>Salton, G.</author>
	</authors>
	<location>CA620209 JB March 20, 1978  3:44 PM</location>
	</document>
	<document id= '633'>
	<citations>
	<citation>238	4	633</citation>
	<citation>633	4	633</citation>
	<citation>633	4	633</citation>
	<citation>643	4	633</citation>
	<citation>238	5	633</citation>
	<citation>633	5	633</citation>
	<citation>633	5	633</citation>
	<citation>633	5	633</citation>
	<citation>643	5	633</citation>
	<citation>238	6	633</citation>
	<citation>633	6	633</citation>
	<citation>633	6	633</citation>
	<citation>643	6	633</citation>
	</citations>
	<title>Simulation and Analysis of Biochemical Systems (III. Analysis and Pattern Recognition)</title>
	<conference>CACM February, 1962</conference>
	<authors>
	<author>Garfinkel, D.</author>
	<author>Polk, W.</author>
	<author>Higgins, J. J.</author>
	<author>Ochser, R. T.</author>
	</authors>
	<location>CA620210 JB March 20, 1978  3:43 PM</location>
	</document>
	<document id= '632'>
	<citations>
	<citation>249	4	632</citation>
	<citation>254	4	632</citation>
	<citation>272	4	632</citation>
	<citation>1102	4	632</citation>
	<citation>1109	4	632</citation>
	<citation>1140	4	632</citation>
	<citation>1188	4	632</citation>
	<citation>1306	4	632</citation>
	<citation>1464	4	632</citation>
	<citation>1491	4	632</citation>
	<citation>1767	4	632</citation>
	<citation>1781	4	632</citation>
	<citation>1787	4	632</citation>
	<citation>1949	4	632</citation>
	<citation>321	4	632</citation>
	<citation>2059	4	632</citation>
	<citation>2126	4	632</citation>
	<citation>435	4	632</citation>
	<citation>437	4	632</citation>
	<citation>463	4	632</citation>
	<citation>483	4	632</citation>
	<citation>491	4	632</citation>
	<citation>2732	4	632</citation>
	<citation>560	4	632</citation>
	<citation>583	4	632</citation>
	<citation>3073	4	632</citation>
	<citation>627	4	632</citation>
	<citation>631	4	632</citation>
	<citation>632	4	632</citation>
	<citation>642	4	632</citation>
	<citation>644	4	632</citation>
	<citation>653	4	632</citation>
	<citation>680	4	632</citation>
	<citation>761	4	632</citation>
	<citation>762	4	632</citation>
	<citation>763	4	632</citation>
	<citation>123	4	632</citation>
	<citation>140	4	632</citation>
	<citation>919	4	632</citation>
	<citation>989	4	632</citation>
	<citation>196	5	632</citation>
	<citation>632	5	632</citation>
	<citation>632	5	632</citation>
	<citation>632	5	632</citation>
	</citations>
	<title>Vectorcardiographic Diagnosis With The Aid of ALGOL</title>
	<conference>CACM February, 1962</conference>
	<authors>
	<author>Forsythe, G. E.</author>
	<author>Groeben, J.</author>
	<author>Toole, J. G.</author>
	</authors>
	<location>CA620211 JB March 20, 1978  3:41 PM</location>
	</document>
	<document id= '631'>
	<citations>
	<citation>249	4	631</citation>
	<citation>254	4	631</citation>
	<citation>272	4	631</citation>
	<citation>1046	4	631</citation>
	<citation>1102	4	631</citation>
	<citation>1105	4	631</citation>
	<citation>1109	4	631</citation>
	<citation>1139	4	631</citation>
	<citation>1140	4	631</citation>
	<citation>1140	4	631</citation>
	<citation>1188	4	631</citation>
	<citation>1234	4	631</citation>
	<citation>1263	4	631</citation>
	<citation>1265	4	631</citation>
	<citation>1306	4	631</citation>
	<citation>1464	4	631</citation>
	<citation>1491	4	631</citation>
	<citation>1496	4	631</citation>
	<citation>1767	4	631</citation>
	<citation>1781	4	631</citation>
	<citation>1781	4	631</citation>
	<citation>1787	4	631</citation>
	<citation>1824	4	631</citation>
	<citation>1949	4	631</citation>
	<citation>321	4	631</citation>
	<citation>2059	4	631</citation>
	<citation>2126	4	631</citation>
	<citation>2126	4	631</citation>
	<citation>2546	4	631</citation>
	<citation>435	4	631</citation>
	<citation>437	4	631</citation>
	<citation>463	4	631</citation>
	<citation>464	4	631</citation>
	<citation>483	4	631</citation>
	<citation>491	4	631</citation>
	<citation>2732	4	631</citation>
	<citation>560	4	631</citation>
	<citation>583	4	631</citation>
	<citation>584	4	631</citation>
	<citation>3073	4	631</citation>
	<citation>627	4	631</citation>
	<citation>631	4	631</citation>
	<citation>631	4	631</citation>
	<citation>632	4	631</citation>
	<citation>642	4	631</citation>
	<citation>644	4	631</citation>
	<citation>653	4	631</citation>
	<citation>653	4	631</citation>
	<citation>680	4	631</citation>
	<citation>680	4	631</citation>
	<citation>761	4	631</citation>
	<citation>762	4	631</citation>
	<citation>763	4	631</citation>
	<citation>763	4	631</citation>
	<citation>795	4	631</citation>
	<citation>799	4	631</citation>
	<citation>123	4	631</citation>
	<citation>140	4	631</citation>
	<citation>919	4	631</citation>
	<citation>945	4	631</citation>
	<citation>989	4	631</citation>
	<citation>196	5	631</citation>
	<citation>1139	5	631</citation>
	<citation>1265	5	631</citation>
	<citation>1665	5	631</citation>
	<citation>404	5	631</citation>
	<citation>631	5	631</citation>
	<citation>631	5	631</citation>
	<citation>631	5	631</citation>
	<citation>763	5	631</citation>
	<citation>196	6	631</citation>
	<citation>1781	6	631</citation>
	<citation>224	6	631</citation>
	<citation>224	6	631</citation>
	<citation>378	6	631</citation>
	<citation>399	6	631</citation>
	<citation>404	6	631</citation>
	<citation>404	6	631</citation>
	<citation>404	6	631</citation>
	<citation>412	6	631</citation>
	<citation>438	6	631</citation>
	<citation>464	6	631</citation>
	<citation>464	6	631</citation>
	<citation>3184	6	631</citation>
	<citation>631	6	631</citation>
	<citation>631	6	631</citation>
	<citation>631	6	631</citation>
	<citation>631	6	631</citation>
	<citation>635	6	631</citation>
	<citation>799	6	631</citation>
	</citations>
	<title>Automatic-Programming-Language Translation Through Syntactical Analysis*</title>
	<conference>CACM March, 1962</conference>
	<authors>
	<author>Ledley, R.S.</author>
	<author>Wilson, J. B.</author>
	</authors>
	<location>CA620301 JB March 20, 1978  3:17 PM</location>
	</document>
	<document id= '630'>
	<title>An Evaluation of Autocode Readability</title>
	<abstract>Of the many requirements of an autocode, the pair of requirements "easy to read" and "easy  to write" are not often compatible.  This paper argues that readability can be added automatically in  the translation process so that the programmer can enjoy the utmost economy of expression, while for  management a full and valid COBOL version is printed to give all the advantages of readability and compatibility.</abstract>
	<conference>CACM March, 1962</conference>
	<authors>
	<author>Ellis, P. V.</author>
	</authors>
	<location>CA620302 JB March 20, 1978  3:15 PM</location>
	<citations>
	<citation>630	5	630</citation>
	<citation>630	5	630</citation>
	<citation>630	5	630</citation>
	</citations>
	</document>
	<document id= '629'>
	<citations>
	<citation>629	5	629</citation>
	<citation>629	5	629</citation>
	<citation>629	5	629</citation>
	</citations>
	<title>On a Wired-In Binary-to-Decimal Conversion Scheme</title>
	<conference>CACM March, 1962</conference>
	<authors>
	<author>Lynch, W. C.</author>
	</authors>
	<location>CA620303 JB March 20, 1978  3:10 PM</location>
	</document>
	<document id= '628'>
	<citations>
	<citation>628	5	628</citation>
	<citation>628	5	628</citation>
	<citation>628	5	628</citation>
	</citations>
	<title>On a Floating-Point Number Representation For Use with Algorithmic Languages</title>
	<conference>CACM March, 1962</conference>
	<authors>
	<author>Grau, A. A.</author>
	</authors>
	<location>CA620304 JB March 20, 1978  3:09 PM</location>
	</document>
	<document id= '627'>
	<citations>
	<citation>249	4	627</citation>
	<citation>254	4	627</citation>
	<citation>272	4	627</citation>
	<citation>1024	4	627</citation>
	<citation>1050	4	627</citation>
	<citation>1051	4	627</citation>
	<citation>1102	4	627</citation>
	<citation>1102	4	627</citation>
	<citation>1109	4	627</citation>
	<citation>1132	4	627</citation>
	<citation>1140	4	627</citation>
	<citation>1188	4	627</citation>
	<citation>1306	4	627</citation>
	<citation>1390	4	627</citation>
	<citation>1393	4	627</citation>
	<citation>1464	4	627</citation>
	<citation>1486	4	627</citation>
	<citation>1491	4	627</citation>
	<citation>1549	4	627</citation>
	<citation>1549	4	627</citation>
	<citation>1706	4	627</citation>
	<citation>1767	4	627</citation>
	<citation>1781	4	627</citation>
	<citation>1787	4	627</citation>
	<citation>1826	4	627</citation>
	<citation>1878	4	627</citation>
	<citation>1949	4	627</citation>
	<citation>321	4	627</citation>
	<citation>378	4	627</citation>
	<citation>2023	4	627</citation>
	<citation>2059	4	627</citation>
	<citation>2060	4	627</citation>
	<citation>2126	4	627</citation>
	<citation>2155	4	627</citation>
	<citation>2168	4	627</citation>
	<citation>435	4	627</citation>
	<citation>437	4	627</citation>
	<citation>463	4	627</citation>
	<citation>483	4	627</citation>
	<citation>491	4	627</citation>
	<citation>2719	4	627</citation>
	<citation>2723	4	627</citation>
	<citation>2732	4	627</citation>
	<citation>2838	4	627</citation>
	<citation>2842	4	627</citation>
	<citation>2855	4	627</citation>
	<citation>2879	4	627</citation>
	<citation>560	4	627</citation>
	<citation>583	4	627</citation>
	<citation>3073	4	627</citation>
	<citation>3077	4	627</citation>
	<citation>3080	4	627</citation>
	<citation>3106	4	627</citation>
	<citation>3112	4	627</citation>
	<citation>627	4	627</citation>
	<citation>627	4	627</citation>
	<citation>627	4	627</citation>
	<citation>631	4	627</citation>
	<citation>632	4	627</citation>
	<citation>642	4	627</citation>
	<citation>644	4	627</citation>
	<citation>653	4	627</citation>
	<citation>680	4	627</citation>
	<citation>761	4	627</citation>
	<citation>762	4	627</citation>
	<citation>763	4	627</citation>
	<citation>106	4	627</citation>
	<citation>123	4	627</citation>
	<citation>140	4	627</citation>
	<citation>919	4	627</citation>
	<citation>989	4	627</citation>
	<citation>106	5	627</citation>
	<citation>196	5	627</citation>
	<citation>1050	5	627</citation>
	<citation>210	5	627</citation>
	<citation>1549	5	627</citation>
	<citation>2723	5	627</citation>
	<citation>2882	5	627</citation>
	<citation>627	5	627</citation>
	<citation>627	5	627</citation>
	<citation>627	5	627</citation>
	<citation>731	5	627</citation>
	<citation>793	5	627</citation>
	<citation>849	6	627</citation>
	<citation>106	6	627</citation>
	<citation>106	6	627</citation>
	<citation>1051	6	627</citation>
	<citation>1549	6	627</citation>
	<citation>1749	6	627</citation>
	<citation>209	6	627</citation>
	<citation>209	6	627</citation>
	<citation>1826	6	627</citation>
	<citation>210	6	627</citation>
	<citation>210	6	627</citation>
	<citation>367	6	627</citation>
	<citation>2198	6	627</citation>
	<citation>2452	6	627</citation>
	<citation>2651	6	627</citation>
	<citation>406	6	627</citation>
	<citation>627	6	627</citation>
	<citation>627	6	627</citation>
	<citation>627	6	627</citation>
	<citation>627	6	627</citation>
	<citation>627	6	627</citation>
	<citation>627	6	627</citation>
	<citation>731	6	627</citation>
	<citation>731	6	627</citation>
	<citation>753	6	627</citation>
	</citations>
	<title>Knotted List Structures</title>
	<conference>CACM March, 1962</conference>
	<authors>
	<author>Weizenbaum, J.</author>
	</authors>
	<location>CA620305 JB March 20, 1978  3:07 PM</location>
	</document>
	<document id= '626'>
	<citations>
	<citation>626	5	626</citation>
	<citation>626	5	626</citation>
	<citation>626	5	626</citation>
	</citations>
	<title>A Method of Representation, Storage and Retrieval of 13 Random Codes in a 4-Digit Number or 16  Random Codes in a 5-Digit Number</title>
	<conference>CACM March, 1962</conference>
	<authors>
	<author>Foster, M. B.</author>
	</authors>
	<location>CA620306 JB March 20, 1978  3:07 PM</location>
	</document>
	<document id= '625'>
	<citations>
	<citation>625	5	625</citation>
	<citation>625	5	625</citation>
	<citation>625	5	625</citation>
	</citations>
	<title>Reciprocal Gamma Function of Real Argument (Algorithm 80)</title>
	<conference>CACM March, 1962</conference>
	<authors>
	<author>Holsten, W.</author>
	</authors>
	<location>CA620307 JB March 20, 1978  3:05 PM</location>
	</document>
	<document id= '624'>
	<citations>
	<citation>624	5	624</citation>
	<citation>624	5	624</citation>
	<citation>624	5	624</citation>
	</citations>
	<title>Economising a Sequence 1 (Algorithm 81)</title>
	<conference>CACM March, 1962</conference>
	<authors>
	<author>Mayoh, B. H.</author>
	</authors>
	<location>CA620308 JB March 20, 1978  3:04 PM</location>
	</document>
	<document id= '623'>
	<citations>
	<citation>623	5	623</citation>
	<citation>623	5	623</citation>
	<citation>623	5	623</citation>
	</citations>
	<title>Economising a Sequence 2 (Algorithm 82)</title>
	<conference>CACM March, 1962</conference>
	<authors>
	<author>Mayoh, B. H.</author>
	</authors>
	<location>CA620309 JB March 20, 1978  3:03 PM</location>
	</document>
	<document id= '622'>
	<citations>
	<citation>622	5	622</citation>
	<citation>622	5	622</citation>
	<citation>622	5	622</citation>
	</citations>
	<title>Optimal Classification of Objects (Algorithm 83)</title>
	<conference>CACM March, 1962</conference>
	<authors>
	<author>Mayoh, B. H.</author>
	</authors>
	<location>CA620310 JB March 20, 1978  3:02 PM</location>
	</document>
	<document id= '621'>
	<citations>
	<citation>1040	5	621</citation>
	<citation>1352	5	621</citation>
	<citation>2040	5	621</citation>
	<citation>621	5	621</citation>
	<citation>621	5	621</citation>
	<citation>621	5	621</citation>
	<citation>834	6	621</citation>
	<citation>872	6	621</citation>
	<citation>885	6	621</citation>
	<citation>1040	6	621</citation>
	<citation>1092	6	621</citation>
	<citation>1241	6	621</citation>
	<citation>1241	6	621</citation>
	<citation>1273	6	621</citation>
	<citation>1273	6	621</citation>
	<citation>1352	6	621</citation>
	<citation>1356	6	621</citation>
	<citation>324	6	621</citation>
	<citation>324	6	621</citation>
	<citation>429	6	621</citation>
	<citation>570	6	621</citation>
	<citation>587	6	621</citation>
	<citation>621	6	621</citation>
	<citation>621	6	621</citation>
	<citation>621	6	621</citation>
	<citation>786	6	621</citation>
	</citations>
	<title>Romberg Integration (Algorithm 60)</title>
	<conference>CACM March, 1962</conference>
	<authors>
	</authors>
	<location>CA620311 JB March 20, 1978  3:01 PM</location>
	</document>
	<document id= '620'>
	<citations>
	<citation>620	5	620</citation>
	<citation>620	5	620</citation>
	<citation>620	5	620</citation>
	</citations>
	<title>RATFACT (Algorithm 78)</title>
	<conference>CACM March, 1962</conference>
	<authors>
	<author>Halstead, M. H.</author>
	</authors>
	<location>CA620312 JB March 20, 1978  3:00 PM</location>
	</document>
	<document id= '619'>
	<title>Retrieval of Misspelled Names in an Airlines Passenger Record System</title>
	<abstract>This paper discusses the limited problem of recognition and retrieval of a given misspelled  name from among a roster of several hundred names, such as the reservation inventory for a given flight  of a large jet airliner.  A program has been developed and operated on the Telefile (a stored-program  core and drum memory solid-state computer) which will retrieve passengers' records successfully, despite  significant misspellings either at original entry time or at retrieval time.  The procedure involves  an automatic scoring technique which matches the names in a condensed form. Only those few names most  closely resembling the requested name, with their phone numbers annexed, are presented for the agents  final manual selecton.  The program has successfully isolated and retrieved names which were subjected  to a number of unusual (as well as usual) misspellings.</abstract>
	<conference>CACM March, 1962</conference>
	<authors>
	<author>Davidson, L.</author>
	</authors>
	<location>CA620313 JB March 20, 1978  2:59 PM</location>
	<citations>
	<citation>1112	5	619</citation>
	<citation>1592	5	619</citation>
	<citation>2111	5	619</citation>
	<citation>2339	5	619</citation>
	<citation>440	5	619</citation>
	<citation>619	5	619</citation>
	<citation>619	5	619</citation>
	<citation>619	5	619</citation>
	<citation>830	6	619</citation>
	<citation>982	6	619</citation>
	<citation>1112	6	619</citation>
	<citation>1112	6	619</citation>
	<citation>1112	6	619</citation>
	<citation>1592	6	619</citation>
	<citation>1592	6	619</citation>
	<citation>440	6	619</citation>
	<citation>619	6	619</citation>
	<citation>619	6	619</citation>
	<citation>619	6	619</citation>
	<citation>619	6	619</citation>
	<citation>619	6	619</citation>
	</citations>
	</document>
	<document id= '618'>
	<title>Computers- The Key to Total Systems Control: An Industrial Viewpoint</title>
	<abstract>Man-Man-machine processes are characterized in five main types, and the markets for each type are  shown for 1950 and 1960 and estimated for 1970.</abstract>
	<conference>CACM March, 1962</conference>
	<authors>
	<author>Carlson, W. M.</author>
	</authors>
	<location>CA620314 JB March 20, 1978  2:53 PM</location>
	<citations>
	<citation>618	5	618</citation>
	<citation>618	5	618</citation>
	<citation>618	5	618</citation>
	</citations>
	</document>
	<document id= '617'>
	<title>POSEIDON</title>
	<abstract>Any computer that forms part of a control system-whether completely automatic or partly human-must  work at the same speed as the control system.  It must perform its calculations or data processing fast  enough for the results to be available at the required instants in the action of the control system.   This known as working in "real time."</abstract>
	<conference>CACM March, 1962</conference>
	<authors>
	<author>Wheeling, R. F.</author>
	</authors>
	<location>CA620315 JB March 20, 1978  2:51 PM</location>
	<citations>
	<citation>617	5	617</citation>
	<citation>617	5	617</citation>
	<citation>617	5	617</citation>
	</citations>
	</document>
	<document id= '616'>
	<citations>
	<citation>1135	5	616</citation>
	<citation>1136	5	616</citation>
	<citation>2710	5	616</citation>
	<citation>2765	5	616</citation>
	<citation>2888	5	616</citation>
	<citation>2906	5	616</citation>
	<citation>493	5	616</citation>
	<citation>616	5	616</citation>
	<citation>616	5	616</citation>
	<citation>616	5	616</citation>
	<citation>729	5	616</citation>
	<citation>1515	6	616</citation>
	<citation>288	6	616</citation>
	<citation>1936	6	616</citation>
	<citation>1976	6	616</citation>
	<citation>2046	6	616</citation>
	<citation>2046	6	616</citation>
	<citation>2046	6	616</citation>
	<citation>2451	6	616</citation>
	<citation>2452	6	616</citation>
	<citation>2715	6	616</citation>
	<citation>493	6	616</citation>
	<citation>616	6	616</citation>
	<citation>616	6	616</citation>
	<citation>616	6	616</citation>
	<citation>616	6	616</citation>
	<citation>616	6	616</citation>
	<citation>616	6	616</citation>
	<citation>616	6	616</citation>
	<citation>616	6	616</citation>
	<citation>657	6	616</citation>
	</citations>
	<title>An Information Algebra - Phase I Report-Language Structure Group of the CODASYL Development Committee</title>
	<abstract>This report represents the results of the first phase of the work of the Language Structure  Group.  The goal of this work is to arrive at a proper structure for a machine-independent problem-defining  language, at the systems level of data processing.  The report is based, for the most part, on a mathematical  model called "An Information Algebra" developed primarily by R. Bosak.  It is hoped that this report  will be read (a) with avid interest by programming language designers and implementors, and all those  interested in developing a theoretical approach to data processing; (b) with interest and understanding  by professional programmers and systems analysts; and (c) with appreciation by the businessman-analyst-manager.   The authors have not attempted an exhaustive discourse in this report.  Rather, they have tried to present  a philosophy to the professional people who are vitally concerned with providing a working language for  the systems analyst's use.  They trust that the ideas in this report will stimulate others to think along  similar lines.  Questions and comments will be welcomed, and can be addressed to any of the members of  the Language Structure Group:  Robert Bosak, System Development Corporation;  Richard F. Clippinger,  Honeywell EDP Division;  Carey Dobbs, Remington Rand Univac Division;  Roy Goldfinger (Chairman), IBM  Corporation;  Renee B. Jasper, Navy Management Office;  William Keating, National Cash Register;  George  Kendrick, General Electric Company;  Jean E. Sammet, IBM Corporation.</abstract>
	<conference>CACM April, 1962</conference>
	<location>CA620401 JB March 20, 1978  2:40 PM</location>
	</document>
	<document id= '615'>
	<title>Addressing Multidimensional Arrays</title>
	<abstract>A useful method of representing a function of n variables is to consider the function to assume  its values at selected points in n-dimensional space.  Although this picture is of value to the analyst,  the elements of an n-dimensional array must exist in conventional storage as a linear array or vector.   The means of performing the transformation of a set of indices locating on array element in n-space  to the location (address) of the element in its storage vector is the subject of this paper.  It is noted  that the index address transformation is computationally identical to the conversion of a number from  a fixed to a mixed radix number system.  Several ways of implementing the transformation are described.</abstract>
	<conference>CACM April, 1962</conference>
	<authors>
	<author>Hellerman, H.</author>
	</authors>
	<location>CA620402 JB March 20, 1978  2:29 PM</location>
	<citations>
	<citation>435	5	615</citation>
	<citation>615	5	615</citation>
	<citation>615	5	615</citation>
	<citation>615	5	615</citation>
	<citation>849	5	615</citation>
	<citation>155	6	615</citation>
	<citation>196	6	615</citation>
	<citation>615	6	615</citation>
	<citation>615	6	615</citation>
	</citations>
	</document>
	<document id= '614'>
	<citations>
	<citation>614	5	614</citation>
	<citation>614	5	614</citation>
	<citation>614	5	614</citation>
	</citations>
	<title>Simpson's Integration (Algorithm 84)</title>
	<conference>CACM April, 1962</conference>
	<authors>
	<author>Hennion, P. E.</author>
	</authors>
	<location>CA620403 JB March 20, 1978  2:25 PM</location>
	</document>
	<document id= '613'>
	<citations>
	<citation>2349	5	613</citation>
	<citation>613	5	613</citation>
	<citation>613	5	613</citation>
	<citation>613	5	613</citation>
	<citation>1648	6	613</citation>
	<citation>1716	6	613</citation>
	<citation>1794	6	613</citation>
	<citation>1894	6	613</citation>
	<citation>2043	6	613</citation>
	<citation>501	6	613</citation>
	<citation>613	6	613</citation>
	<citation>774	6	613</citation>
	</citations>
	<title>JACOBI (Algorithm 85)</title>
	<conference>CACM April, 1962</conference>
	<authors>
	<author>Evans, T. G.</author>
	</authors>
	<location>CA620404 JB March 20, 1978  2:22 PM</location>
	</document>
	<document id= '612'>
	<citations>
	<citation>3188	5	612</citation>
	<citation>612	5	612</citation>
	<citation>612	5	612</citation>
	<citation>612	5	612</citation>
	<citation>1594	6	612</citation>
	<citation>612	6	612</citation>
	</citations>
	<title>Permute (Algorithm 86)</title>
	<conference>CACM April, 1962</conference>
	<authors>
	<author>Peck, J. E. L.</author>
	<author>Schrack, G. F.</author>
	</authors>
	<location>CA620405 JB March 20, 1978  2:21 PM</location>
	</document>
	<document id= '611'>
	<citations>
	<citation>611	5	611</citation>
	<citation>611	5	611</citation>
	<citation>611	5	611</citation>
	</citations>
	<title>Permutation Generator (Algorithm 87)</title>
	<conference>CACM April, 1962</conference>
	<authors>
	<author>Howell, J. R.</author>
	</authors>
	<location>CA620406 JB March 20, 1978  2:20 PM</location>
	</document>
	<document id= '610'>
	<citations>
	<citation>610	5	610</citation>
	<citation>610	5	610</citation>
	<citation>610	5	610</citation>
	</citations>
	<title>SIEVE (Algorithm 35)</title>
	<conference>CACM April, 1962</conference>
	<authors>
	<author>Brown, P. J.</author>
	</authors>
	<location>CA620407 JB March 20, 1978  2:20 PM</location>
	</document>
	<document id= '609'>
	<citations>
	<citation>609	5	609</citation>
	<citation>609	5	609</citation>
	<citation>609	5	609</citation>
	</citations>
	<title>Permutation (Algorithm 71)</title>
	<conference>CACM April, 1962</conference>
	<authors>
	<author>Brown, P. J.</author>
	</authors>
	<location>CA620408 JB March 20, 1978  2:19 PM</location>
	</document>
	<document id= '608'>
	<citations>
	<citation>608	5	608</citation>
	<citation>608	5	608</citation>
	<citation>608	5	608</citation>
	</citations>
	<title>Permutation (Algorithm 71)</title>
	<conference>CACM April, 1962</conference>
	<authors>
	<author>Peck, J. E. L.</author>
	<author>Schrack, G. F.</author>
	</authors>
	<location>CA620409 JB March 20, 1978  2:18 PM</location>
	</document>
	<document id= '607'>
	<citations>
	<citation>607	5	607</citation>
	<citation>607	5	607</citation>
	<citation>607	5	607</citation>
	</citations>
	<title>The Calculation of Easter...</title>
	<conference>CACM April, 1962</conference>
	<authors>
	<author>Knuth, D.</author>
	</authors>
	<location>CA620410 JB March 20, 1978  2:17 PM</location>
	</document>
	<document id= '606'>
	<citations>
	<citation>606	5	606</citation>
	<citation>606	5	606</citation>
	<citation>606	5	606</citation>
	</citations>
	<title>A Method for Eliminating Ambiguity Due to Signal Coincidence in Digital Design</title>
	<conference>CACM April, 1962</conference>
	<authors>
	<author>Kaiser, C. J.</author>
	</authors>
	<location>CA620411 JB March 20, 1978  2:16 PM</location>
	</document>
	<document id= '605'>
	<citations>
	<citation>605	5	605</citation>
	<citation>605	5	605</citation>
	<citation>605	5	605</citation>
	</citations>
	<title>Computer Simulation Of City Traffic</title>
	<abstract>In simulating traffic flow on city streets, the National Bureau of Standards has used data  processing techniques to tabulate and make motion pictures of vehicle movements in the model.  Each vehicle  is assigned a digital identification giving points of entry and exit, type of vehicle, desired speed,  and actual speed, in proportions simulating field data.  Changes in the model can be made to observe  their consequences and to determine the ability of a real street to carry loads expected in the future.</abstract>
	<conference>CACM April, 1962</conference>
	<location>CA620412 JB March 20, 1978  2:00 PM</location>
	</document>
	<document id= '604'>
	<citations>
	<citation>604	5	604</citation>
	<citation>604	5	604</citation>
	<citation>604	5	604</citation>
	</citations>
	<title>Why COBOL?</title>
	<conference>CACM May, 1962</conference>
	<authors>
	<author>Cunningham, J. F.</author>
	</authors>
	<location>CA620501 JB March 20, 1978  1:55 PM</location>
	</document>
	<document id= '603'>
	<citations>
	<citation>1084	5	603</citation>
	<citation>603	5	603</citation>
	<citation>603	5	603</citation>
	<citation>603	5	603</citation>
	<citation>868	6	603</citation>
	<citation>603	6	603</citation>
	<citation>644	6	603</citation>
	<citation>669	6	603</citation>
	<citation>791	6	603</citation>
	<citation>797	6	603</citation>
	</citations>
	<title>Basic Elements of COBOL 61</title>
	<conference>CACM May, 1962</conference>
	<authors>
	<author>Sammet, J. E.</author>
	</authors>
	<location>CA620502 JB March 20, 1978  1:54 PM</location>
	</document>
	<document id= '602'>
	<citations>
	<citation>602	5	602</citation>
	<citation>602	5	602</citation>
	<citation>602	5	602</citation>
	</citations>
	<title>COBOL and Compatibility</title>
	<conference>CACM May, 1962</conference>
	<authors>
	<author>Lippitt, A.</author>
	</authors>
	<location>CA620503 JB March 20, 1978  1:54 PM</location>
	</document>
	<document id= '601'>
	<citations>
	<citation>601	5	601</citation>
	<citation>601	5	601</citation>
	<citation>601	5	601</citation>
	</citations>
	<title>Interim Report on Bureau of Ships COBOL Evaluation Program</title>
	<conference>CACM May, 1962</conference>
	<authors>
	<author>Siegel, M.</author>
	<author>Smith, A. E.</author>
	</authors>
	<location>CA620504 JB March 20, 1978  1:53 PM</location>
	</document>
	<document id= '600'>
	<citations>
	<citation>1781	5	600</citation>
	<citation>600	5	600</citation>
	<citation>600	5	600</citation>
	<citation>600	5	600</citation>
	<citation>123	6	600</citation>
	<citation>196	6	600</citation>
	<citation>919	6	600</citation>
	<citation>990	6	600</citation>
	<citation>1007	6	600</citation>
	<citation>1046	6	600</citation>
	<citation>1131	6	600</citation>
	<citation>1139	6	600</citation>
	<citation>1140	6	600</citation>
	<citation>1149	6	600</citation>
	<citation>1198	6	600</citation>
	<citation>1215	6	600</citation>
	<citation>1223	6	600</citation>
	<citation>1265	6	600</citation>
	<citation>1303	6	600</citation>
	<citation>1323	6	600</citation>
	<citation>1358	6	600</citation>
	<citation>1366	6	600</citation>
	<citation>1421	6	600</citation>
	<citation>1460	6	600</citation>
	<citation>1462	6	600</citation>
	<citation>1463	6	600</citation>
	<citation>1467	6	600</citation>
	<citation>1468	6	600</citation>
	<citation>1477	6	600</citation>
	<citation>1491	6	600</citation>
	<citation>1496	6	600</citation>
	<citation>1531	6	600</citation>
	<citation>1535	6	600</citation>
	<citation>1565	6	600</citation>
	<citation>1601	6	600</citation>
	<citation>1602	6	600</citation>
	<citation>1613	6	600</citation>
	<citation>1614	6	600</citation>
	<citation>1626	6	600</citation>
	<citation>1641	6	600</citation>
	<citation>1787	6	600</citation>
	<citation>1788	6	600</citation>
	<citation>205	6	600</citation>
	<citation>224	6	600</citation>
	<citation>249	6	600</citation>
	<citation>288	6	600</citation>
	<citation>316	6	600</citation>
	<citation>381	6	600</citation>
	<citation>398	6	600</citation>
	<citation>11	6	600</citation>
	<citation>404	6	600</citation>
	<citation>410	6	600</citation>
	<citation>463	6	600</citation>
	<citation>464	6	600</citation>
	<citation>483	6	600</citation>
	<citation>3184	6	600</citation>
	<citation>3188	6	600</citation>
	<citation>584	6	600</citation>
	<citation>600	6	600</citation>
	<citation>680	6	600</citation>
	<citation>691	6	600</citation>
	<citation>763	6	600</citation>
	<citation>799	6	600</citation>
	</citations>
	<title>Syntactical Charts of COBOL 61</title>
	<conference>CACM May, 1962</conference>
	<authors>
	<author>Berman, R.</author>
	<author>Sharp, J.</author>
	<author>Sturges, L.</author>
	</authors>
	<location>CA620505 JB March 20, 1978  1:52 PM</location>
	</document>
	<document id= '599'>
	<citations>
	<citation>599	5	599</citation>
	<citation>599	5	599</citation>
	<citation>599	5	599</citation>
	</citations>
	<title>A Report Writer For COBOL</title>
	<conference>CACM May, 1962</conference>
	<authors>
	<author>Donally, W. L.</author>
	</authors>
	<location>CA620506 JB March 20, 1978  1:51 PM</location>
	</document>
	<document id= '598'>
	<title>The COBOL Librarian - A Key to Object Program Efficiency</title>
	<abstract>Many answers to the question "How may a COBOL Compiler be forced into the generation of an  efficient object program?"  The purpose of this article is to present one possible answer: the creation  and full utilization of a well-constructed COBOL Library.</abstract>
	<conference>CACM May, 1962</conference>
	<authors>
	<author>Hicks, W.</author>
	</authors>
	<location>CA620507 JB March 20, 1978  1:50 PM</location>
	<citations>
	<citation>598	5	598</citation>
	<citation>598	5	598</citation>
	<citation>598	5	598</citation>
	</citations>
	</document>
	<document id= '597'>
	<citations>
	<citation>597	5	597</citation>
	<citation>597	5	597</citation>
	<citation>597	5	597</citation>
	</citations>
	<title>Modular Data Processing Systems Written in COBOL</title>
	<conference>CACM May, 1962</conference>
	<authors>
	<author>Emery, J. C.</author>
	</authors>
	<location>CA620508 JB March 20, 1978  1:47 PM</location>
	</document>
	<document id= '596'>
	<title>Floating-Point Arithmetic in COBOL</title>
	<abstract>In this paper the basic operations of floating-point arithmetic are examined and COBOL procedures  for carrying these out are given, along with specification of working storage.  The paper concludes with  an example in which these procedures are used.</abstract>
	<conference>CACM May, 1962</conference>
	<authors>
	<author>Kesner, O.</author>
	</authors>
	<location>CA620509 JB March 20, 1978  1:46 PM</location>
	<citations>
	<citation>596	5	596</citation>
	<citation>596	5	596</citation>
	<citation>596	5	596</citation>
	</citations>
	</document>
	<document id= '595'>
	<title>Guides to Teaching COBOL</title>
	<abstract>The teaching of COBOL can be divided into three main subject areas.  They are the syntax of  COBOL, the use of such syntax in solving any given problem, and programming concepts.  It is generally  accepted that some knowledge of the hardware and computer logic must be possessed by the programmer.   The teaching problem arises in determining how thoroughly a student must know the hardware and logic  for that computer for which he will write COBOL programs.  Unfortunately, historical data concerning  students' programming proficiency is almost non-existent and, at best, difficult to measure.  How then  might we approach solving this problem?</abstract>
	<conference>CACM May, 1962</conference>
	<authors>
	<author>Greene, I.</author>
	</authors>
	<location>CA620510 JB March 20, 1978  1:44 PM</location>
	<citations>
	<citation>595	5	595</citation>
	<citation>595	5	595</citation>
	<citation>595	5	595</citation>
	</citations>
	</document>
	<document id= '594'>
	<citations>
	<citation>594	5	594</citation>
	<citation>594	5	594</citation>
	<citation>594	5	594</citation>
	</citations>
	<title>An Advanced Input-Output System for a COBOL Compiler</title>
	<conference>CACM May, 1962</conference>
	<authors>
	<author>Bouman, C. A.</author>
	</authors>
	<location>CA620511 JB March 20, 1978  1:40 PM</location>
	</document>
	<document id= '593'>
	<citations>
	<citation>593	5	593</citation>
	<citation>593	5	593</citation>
	<citation>593	5	593</citation>
	</citations>
	<title>An Introduction to a Machine-Independent Data Division</title>
	<conference>CACM May, 1962</conference>
	<authors>
	<author>Mullin, J. P.</author>
	</authors>
	<location>CA620512 JB March 20, 1978  1:39 PM</location>
	</document>
	<document id= '592'>
	<citations>
	<citation>592	5	592</citation>
	<citation>592	5	592</citation>
	<citation>592	5	592</citation>
	</citations>
	<title>COBOL Batching Problems</title>
	<conference>CACM May, 1962</conference>
	<authors>
	<author>Mullen, J. W.</author>
	</authors>
	<location>CA620513 JB March 20, 1978  1:38 PM</location>
	</document>
	<document id= '591'>
	<citations>
	<citation>591	5	591</citation>
	<citation>591	5	591</citation>
	<citation>591	5	591</citation>
	</citations>
	<title>Evaluation of Asymptotic Expression for the Fresnel Sine and Cosine Integrals (Algorithm 88)</title>
	<conference>CACM May, 1962</conference>
	<authors>
	<author>Cundiff, J. L.</author>
	</authors>
	<location>CA620514 JB March 20, 1978  1:37 PM</location>
	</document>
	<document id= '590'>
	<citations>
	<citation>590	5	590</citation>
	<citation>590	5	590</citation>
	<citation>590	5	590</citation>
	</citations>
	<title>Evaluation of the Fresnel Sine Integral (Algorithm 89)</title>
	<conference>CACM May, 1962</conference>
	<authors>
	<author>Cundiff, J. L.</author>
	</authors>
	<location>CA620515 JB March 20, 1978  1:36 PM</location>
	</document>
	<document id= '589'>
	<citations>
	<citation>589	5	589</citation>
	<citation>589	5	589</citation>
	<citation>589	5	589</citation>
	</citations>
	<title>Evaluation of the Fresnel Cosine Integral (Algorithm 90)</title>
	<conference>CACM May, 1962</conference>
	<authors>
	<author>Cundiff, J. L.</author>
	</authors>
	<location>CA620516 JB March 20, 1978  1:35 PM</location>
	</document>
	<document id= '588'>
	<citations>
	<citation>588	5	588</citation>
	<citation>588	5	588</citation>
	<citation>588	5	588</citation>
	</citations>
	<title>Chebyshev Curve-Fit (Algorithm 91)</title>
	<conference>CACM May, 1962</conference>
	<authors>
	<author>Newhouse, A.</author>
	</authors>
	<location>CA620517 JB March 20, 1978  1:34 PM</location>
	</document>
	<document id= '587'>
	<citations>
	<citation>1040	5	587</citation>
	<citation>587	5	587</citation>
	<citation>587	5	587</citation>
	<citation>587	5	587</citation>
	<citation>885	6	587</citation>
	<citation>587	6	587</citation>
	<citation>621	6	587</citation>
	</citations>
	<title>Romberg Integration (Algorithm 60)</title>
	<conference>CACM May, 1962</conference>
	<authors>
	<author>Buchner, K. H.</author>
	</authors>
	<location>CA620518 JB March 20, 1978  1:33 PM</location>
	</document>
	<document id= '586'>
	<citations>
	<citation>454	5	586</citation>
	<citation>586	5	586</citation>
	<citation>586	5	586</citation>
	<citation>586	5	586</citation>
	<citation>152	6	586</citation>
	<citation>586	6	586</citation>
	</citations>
	<title>Simultaneous System of Equations and Matrix Inversion Routine (Algorithm 92)</title>
	<conference>CACM May, 1962</conference>
	<authors>
	<author>Roek, D. J.</author>
	</authors>
	<location>CA620519 JB March 20, 1978  1:31 PM</location>
	</document>
	<document id= '585'>
	<title>Initial Experience With an Operating Multiprogramming System</title>
	<abstract>The Lewis Research Center has been using various forms and degrees of program simultaneity  in the operation of its modified Sperry-Rand Univac Scientific Model 1103 computer during the last five  years.  This simultaneity has evolved from an initial achievement of self-searching input and output  to the automatic time sharing of independently coded problems.  Several important machine and program  system modifications were necessary to accomplish this evolution.  Several additional modifications,  although not required, were added to facilitate ease of coding and operation.  All modifications had  to proceed at a relatively temperate pace to insure that the basic data-reduction work load of the computing  center was completed on schedule.  Some educationally valuable mistakes were made, and their suggested  cures often pointed the way to useful future improvements or emphasized some of the basic principles  of a multiprogramming system.  The material that follows is a description of the evolution of the programming  and hardware system which has developed into the present multiprogramming system at Lewis research Center.</abstract>
	<conference>CACM May, 1962</conference>
	<authors>
	<author>Landis, N.</author>
	<author>Manos, A.</author>
	<author>Turner, L. R.</author>
	</authors>
	<location>CA620520 JB March 17, 1978  9:45 PM</location>
	<citations>
	<citation>585	5	585</citation>
	<citation>585	5	585</citation>
	<citation>585	5	585</citation>
	</citations>
	</document>
	<document id= '584'>
	<citations>
	<citation>1046	4	584</citation>
	<citation>1105	4	584</citation>
	<citation>1139	4	584</citation>
	<citation>1140	4	584</citation>
	<citation>1234	4	584</citation>
	<citation>1263	4	584</citation>
	<citation>1265	4	584</citation>
	<citation>1496	4	584</citation>
	<citation>1781	4	584</citation>
	<citation>1824	4	584</citation>
	<citation>2126	4	584</citation>
	<citation>2546	4	584</citation>
	<citation>464	4	584</citation>
	<citation>584	4	584</citation>
	<citation>631	4	584</citation>
	<citation>653	4	584</citation>
	<citation>680	4	584</citation>
	<citation>763	4	584</citation>
	<citation>795	4	584</citation>
	<citation>799	4	584</citation>
	<citation>945	4	584</citation>
	<citation>949	5	584</citation>
	<citation>1781	5	584</citation>
	<citation>1945	5	584</citation>
	<citation>404	5	584</citation>
	<citation>584	5	584</citation>
	<citation>584	5	584</citation>
	<citation>584	5	584</citation>
	<citation>823	6	584</citation>
	<citation>123	6	584</citation>
	<citation>196	6	584</citation>
	<citation>914	6	584</citation>
	<citation>915	6	584</citation>
	<citation>917	6	584</citation>
	<citation>919	6	584</citation>
	<citation>984	6	584</citation>
	<citation>989	6	584</citation>
	<citation>990	6	584</citation>
	<citation>990	6	584</citation>
	<citation>1007	6	584</citation>
	<citation>1012	6	584</citation>
	<citation>1046	6	584</citation>
	<citation>1084	6	584</citation>
	<citation>1098	6	584</citation>
	<citation>1122	6	584</citation>
	<citation>1131	6	584</citation>
	<citation>1138	6	584</citation>
	<citation>1139	6	584</citation>
	<citation>1139	6	584</citation>
	<citation>1140	6	584</citation>
	<citation>1141	6	584</citation>
	<citation>1149	6	584</citation>
	<citation>1198	6	584</citation>
	<citation>1200	6	584</citation>
	<citation>1215	6	584</citation>
	<citation>1223	6	584</citation>
	<citation>1223	6	584</citation>
	<citation>1265	6	584</citation>
	<citation>1265	6	584</citation>
	<citation>1303	6	584</citation>
	<citation>1323	6	584</citation>
	<citation>1336	6	584</citation>
	<citation>1358	6	584</citation>
	<citation>1366	6	584</citation>
	<citation>1396	6	584</citation>
	<citation>1421	6	584</citation>
	<citation>1455	6	584</citation>
	<citation>1460	6	584</citation>
	<citation>1462	6	584</citation>
	<citation>1463	6	584</citation>
	<citation>1467	6	584</citation>
	<citation>1468	6	584</citation>
	<citation>1477	6	584</citation>
	<citation>1477	6	584</citation>
	<citation>1487	6	584</citation>
	<citation>1491	6	584</citation>
	<citation>1491	6	584</citation>
	<citation>1496	6	584</citation>
	<citation>1496	6	584</citation>
	<citation>1531	6	584</citation>
	<citation>1535	6	584</citation>
	<citation>1565	6	584</citation>
	<citation>1601	6	584</citation>
	<citation>1602	6	584</citation>
	<citation>1613	6	584</citation>
	<citation>1614	6	584</citation>
	<citation>1626	6	584</citation>
	<citation>1641	6	584</citation>
	<citation>1787	6	584</citation>
	<citation>1788	6	584</citation>
	<citation>205	6	584</citation>
	<citation>224	6	584</citation>
	<citation>249	6	584</citation>
	<citation>288	6	584</citation>
	<citation>316	6	584</citation>
	<citation>381	6	584</citation>
	<citation>398	6	584</citation>
	<citation>11	6	584</citation>
	<citation>404	6	584</citation>
	<citation>410	6	584</citation>
	<citation>463	6	584</citation>
	<citation>464	6	584</citation>
	<citation>483	6	584</citation>
	<citation>483	6	584</citation>
	<citation>483	6	584</citation>
	<citation>3184	6	584</citation>
	<citation>3184	6	584</citation>
	<citation>3188	6	584</citation>
	<citation>584	6	584</citation>
	<citation>584	6	584</citation>
	<citation>584	6	584</citation>
	<citation>600	6	584</citation>
	<citation>669	6	584</citation>
	<citation>680	6	584</citation>
	<citation>680	6	584</citation>
	<citation>691	6	584</citation>
	<citation>763	6	584</citation>
	<citation>763	6	584</citation>
	<citation>799	6	584</citation>
	</citations>
	<title>Report on the Algorithmic Language FORTRAN II</title>
	<conference>CACM June, 1962</conference>
	<authors>
	<author>Rabinowitz, I. N.</author>
	</authors>
	<location>CA620601 JB March 17, 1978  9:38 PM</location>
	</document>
	<document id= '583'>
	<citations>
	<citation>249	4	583</citation>
	<citation>254	4	583</citation>
	<citation>272	4	583</citation>
	<citation>1102	4	583</citation>
	<citation>1109	4	583</citation>
	<citation>1140	4	583</citation>
	<citation>1188	4	583</citation>
	<citation>1306	4	583</citation>
	<citation>1464	4	583</citation>
	<citation>1491	4	583</citation>
	<citation>1767	4	583</citation>
	<citation>1781	4	583</citation>
	<citation>1787	4	583</citation>
	<citation>1949	4	583</citation>
	<citation>321	4	583</citation>
	<citation>2059	4	583</citation>
	<citation>2126	4	583</citation>
	<citation>435	4	583</citation>
	<citation>437	4	583</citation>
	<citation>463	4	583</citation>
	<citation>483	4	583</citation>
	<citation>491	4	583</citation>
	<citation>2732	4	583</citation>
	<citation>560	4	583</citation>
	<citation>583	4	583</citation>
	<citation>3073	4	583</citation>
	<citation>627	4	583</citation>
	<citation>631	4	583</citation>
	<citation>632	4	583</citation>
	<citation>642	4	583</citation>
	<citation>644	4	583</citation>
	<citation>653	4	583</citation>
	<citation>680	4	583</citation>
	<citation>761	4	583</citation>
	<citation>762	4	583</citation>
	<citation>763	4	583</citation>
	<citation>123	4	583</citation>
	<citation>140	4	583</citation>
	<citation>919	4	583</citation>
	<citation>989	4	583</citation>
	<citation>196	5	583</citation>
	<citation>583	5	583</citation>
	<citation>583	5	583</citation>
	<citation>583	5	583</citation>
	</citations>
	<title>A Redundancy Check for ALGOL Programs</title>
	<conference>CACM June, 1962</conference>
	<authors>
	</authors>
	<location>CA620602 JB March 17, 1978  9:37 PM</location>
	</document>
	<document id= '582'>
	<citations>
	<citation>582	5	582</citation>
	<citation>582	5	582</citation>
	<citation>582	5	582</citation>
	</citations>
	<title>One Lost Bit</title>
	<conference>CACM June, 1962</conference>
	<authors>
	<author>Oster, C. A.</author>
	</authors>
	<location>CA620603 JB March 17, 1978  9:36 PM</location>
	</document>
	<document id= '581'>
	<citations>
	<citation>581	5	581</citation>
	<citation>581	5	581</citation>
	<citation>581	5	581</citation>
	</citations>
	<title>A Note on Sampling a Tape-File</title>
	<conference>CACM June, 1962</conference>
	<authors>
	<author>Jones, T. G.</author>
	</authors>
	<location>CA620604 JB March 17, 1978  9:35 PM</location>
	</document>
	<document id= '580'>
	<citations>
	<citation>580	5	580</citation>
	<citation>580	5	580</citation>
	<citation>580	5	580</citation>
	</citations>
	<title>General Order Arithmetic (Algorithm 93)</title>
	<conference>CACM June, 1962</conference>
	<authors>
	<author>Perstein, M. H.</author>
	</authors>
	<location>CA620605 JB March 17, 1978  9:34 PM</location>
	</document>
	<document id= '579'>
	<citations>
	<citation>2690	5	579</citation>
	<citation>2853	5	579</citation>
	<citation>579	5	579</citation>
	<citation>579	5	579</citation>
	<citation>579	5	579</citation>
	<citation>3115	5	579</citation>
	<citation>907	6	579</citation>
	<citation>203	6	579</citation>
	<citation>2045	6	579</citation>
	<citation>2417	6	579</citation>
	<citation>2466	6	579</citation>
	<citation>2690	6	579</citation>
	<citation>2884	6	579</citation>
	<citation>579	6	579</citation>
	<citation>579	6	579</citation>
	<citation>579	6	579</citation>
	<citation>785	6	579</citation>
	</citations>
	<title>COMBINATION (Algorithm 94)</title>
	<conference>CACM June, 1962</conference>
	<authors>
	<author>Kurtzberg, J.</author>
	</authors>
	<location>CA620606 JB March 17, 1978  9:33 PM</location>
	</document>
	<document id= '578'>
	<citations>
	<citation>578	5	578</citation>
	<citation>578	5	578</citation>
	<citation>578	5	578</citation>
	</citations>
	<title>Generation of Partitions in Part-Count Form (Algorithm 95)</title>
	<conference>CACM June, 1962</conference>
	<authors>
	<author>Stockmal, F.</author>
	</authors>
	<location>CA620607 JB March 17, 1978  9:32 PM</location>
	</document>
	<document id= '577'>
	<citations>
	<citation>1836	5	577</citation>
	<citation>577	5	577</citation>
	<citation>577	5	577</citation>
	<citation>577	5	577</citation>
	<citation>1191	6	577</citation>
	<citation>1477	6	577</citation>
	<citation>1491	6	577</citation>
	<citation>1781	6	577</citation>
	<citation>577	6	577</citation>
	</citations>
	<title>ANCESTOR (Algorithm 96)</title>
	<conference>CACM June, 1962</conference>
	<authors>
	<author>Floyd, R. W.</author>
	</authors>
	<location>CA620608 JB March 17, 19789:31 PM</location>
	</document>
	<document id= '576'>
	<citations>
	<citation>1846	5	576</citation>
	<citation>2630	5	576</citation>
	<citation>2650	5	576</citation>
	<citation>576	5	576</citation>
	<citation>576	5	576</citation>
	<citation>576	5	576</citation>
	<citation>830	6	576</citation>
	<citation>1380	6	576</citation>
	<citation>1424	6	576</citation>
	<citation>1484	6	576</citation>
	<citation>1572	6	576</citation>
	<citation>2111	6	576</citation>
	<citation>576	6	576</citation>
	<citation>576	6	576</citation>
	<citation>576	6	576</citation>
	<citation>680	6	576</citation>
	</citations>
	<title>Shortest Path (Algorithm 97)</title>
	<conference>CACM June, 1962</conference>
	<authors>
	<author>Floyd, R. W.</author>
	</authors>
	<location>CA620609 JB March 17, 1978  9:30 PM</location>
	</document>
	<document id= '575'>
	<citations>
	<citation>575	5	575</citation>
	<citation>575	5	575</citation>
	<citation>575	5	575</citation>
	</citations>
	<title>Evaluation of Definite Complex Line Integrals (Algorithm 98)</title>
	<conference>CACM June, 1962</conference>
	<authors>
	<author>Pfaltz, J. L.</author>
	</authors>
	<location>CA620610 JB March 17, 1978  9:29 PM</location>
	</document>
	<document id= '574'>
	<citations>
	<citation>574	5	574</citation>
	<citation>574	5	574</citation>
	<citation>574	5	574</citation>
	</citations>
	<title>Evaluation of Jacobi Symbol (Algorithm 99)</title>
	<conference>CACM June, 1962</conference>
	<authors>
	<author>Garland, S. J.</author>
	<author>Knapp, A. W.</author>
	</authors>
	<location>CA620611 JB March 17, 1978  9:28 PM</location>
	</document>
	<document id= '573'>
	<citations>
	<citation>573	5	573</citation>
	<citation>573	5	573</citation>
	<citation>573	5	573</citation>
	</citations>
	<title>Remove Item From Chain-Linked List (Algorithm 101)</title>
	<conference>CACM June, 1962</conference>
	<authors>
	<author>Kiviat, P. J.</author>
	</authors>
	<location>CA620613 JB March 17, 1978  9:27 PM</location>
	</document>
	<document id= '572'>
	<citations>
	<citation>572	5	572</citation>
	<citation>572	5	572</citation>
	<citation>572	5	572</citation>
	</citations>
	<title>Add Item to Chain-Linked List (Algorithm 100)</title>
	<conference>CACM June, 1962</conference>
	<authors>
	<author>Kiviat, P. J.</author>
	</authors>
	<location>CA620612 JB March 17, 1978  9:26 PM</location>
	</document>
	<document id= '571'>
	<citations>
	<citation>571	5	571</citation>
	<citation>571	5	571</citation>
	<citation>571	5	571</citation>
	</citations>
	<title>Permutation in Lexicographical Order (Algorithm 102)</title>
	<conference>CACM June, 1962</conference>
	<authors>
	<author>Schrack, G. F.</author>
	<author>Shimrat, M.</author>
	</authors>
	<location>CA620614 JB March 17, 1978  9:25 PM</location>
	</document>
	<document id= '570'>
	<citations>
	<citation>1352	5	570</citation>
	<citation>570	5	570</citation>
	<citation>570	5	570</citation>
	<citation>570	5	570</citation>
	<citation>834	6	570</citation>
	<citation>872	6	570</citation>
	<citation>1040	6	570</citation>
	<citation>1092	6	570</citation>
	<citation>1241	6	570</citation>
	<citation>1273	6	570</citation>
	<citation>324	6	570</citation>
	<citation>429	6	570</citation>
	<citation>570	6	570</citation>
	<citation>621	6	570</citation>
	<citation>786	6	570</citation>
	</citations>
	<title>Simpson's Rule Integrator (Algorithm 103)</title>
	<conference>CACM June, 1962</conference>
	<authors>
	<author>Kuncir, G. F.</author>
	</authors>
	<location>CA620615 JB March 17, 1978  9:24 PM</location>
	</document>
	<document id= '569'>
	<citations>
	<citation>569	5	569</citation>
	<citation>569	5	569</citation>
	<citation>569	5	569</citation>
	</citations>
	<title>Binomial Coefficients (Algorithm 19)</title>
	<conference>CACM June, 1962</conference>
	<authors>
	<author>Steck, B.</author>
	</authors>
	<location>CA620616 JB March 17, 1978  9:22 PM</location>
	</document>
	<document id= '568'>
	<citations>
	<citation>568	5	568</citation>
	<citation>568	5	568</citation>
	<citation>568	5	568</citation>
	</citations>
	<title>Exponential of a Complex Number (Algorithm 46)</title>
	<conference>CACM June, 1962</conference>
	<authors>
	<author>Relph, A. P.</author>
	</authors>
	<location>CA620617 JB March 17, 1978  9:21 PM</location>
	</document>
	<document id= '567'>
	<citations>
	<citation>567	5	567</citation>
	<citation>567	5	567</citation>
	<citation>567	5	567</citation>
	</citations>
	<title>Logarithm of a Complex Number (Algorithm 48)</title>
	<conference>CACM June, 1962</conference>
	<authors>
	<author>Relph, A. P.</author>
	</authors>
	<location>CA620618 JB March 17, 1978  9:20 PM</location>
	</document>
	<document id= '566'>
	<citations>
	<citation>566	5	566</citation>
	<citation>566	5	566</citation>
	<citation>566	5	566</citation>
	</citations>
	<title>Matrix Inversion (Algorithm 58)</title>
	<conference>CACM June, 1962</conference>
	<authors>
	<author>Conger, R. A.</author>
	</authors>
	<location>CA620619 JB March 17, 1978  9:19 PM</location>
	</document>
	<document id= '565'>
	<citations>
	<citation>565	5	565</citation>
	<citation>565	5	565</citation>
	<citation>565	5	565</citation>
	</citations>
	<title>INVRS (Algorithm 66)</title>
	<conference>CACM June, 1962</conference>
	<authors>
	<author>Caffrey, J.</author>
	</authors>
	<location>CA620620 JB March 17, 1978  9:18 PM</location>
	</document>
	<document id= '564'>
	<citations>
	<citation>564	5	564</citation>
	<citation>564	5	564</citation>
	<citation>564	5	564</citation>
	</citations>
	<title>CRAM (Algorithm 67)</title>
	<conference>CACM June, 1962</conference>
	<authors>
	<author>Relph, A. P.</author>
	</authors>
	<location>CA620621 JB March 17, 1978  9:17 PM</location>
	</document>
	<document id= '563'>
	<citations>
	<citation>563	5	563</citation>
	<citation>563	5	563</citation>
	<citation>563	5	563</citation>
	</citations>
	<title>Sorting Procedures (Algorithm 76)</title>
	<conference>CACM June, 1962</conference>
	<authors>
	<author>Randell, B.</author>
	</authors>
	<location>CA620622 JB March 17, 1978  9:15 PM</location>
	</document>
	<document id= '562'>
	<citations>
	<citation>562	5	562</citation>
	<citation>562	5	562</citation>
	<citation>562	5	562</citation>
	</citations>
	<title>AVINT (Algorithm 77)</title>
	<conference>CACM June, 1962</conference>
	<authors>
	<author>Whittier, V. E.</author>
	</authors>
	<location>CA620623 JB March 17, 1978  9:14 PM</location>
	</document>
	<document id= '561'>
	<citations>
	<citation>1134	4	561</citation>
	<citation>1141	4	561</citation>
	<citation>364	4	561</citation>
	<citation>405	4	561</citation>
	<citation>438	4	561</citation>
	<citation>561	4	561</citation>
	<citation>561	4	561</citation>
	<citation>44	4	561</citation>
	<citation>964	5	561</citation>
	<citation>1028	5	561</citation>
	<citation>1216	5	561</citation>
	<citation>1396	5	561</citation>
	<citation>1392	5	561</citation>
	<citation>393	5	561</citation>
	<citation>77	5	561</citation>
	<citation>561	5	561</citation>
	<citation>561	5	561</citation>
	<citation>561	5	561</citation>
	<citation>964	6	561</citation>
	<citation>1028	6	561</citation>
	<citation>1028	6	561</citation>
	<citation>1029	6	561</citation>
	<citation>1029	6	561</citation>
	<citation>1029	6	561</citation>
	<citation>1083	6	561</citation>
	<citation>1132	6	561</citation>
	<citation>1214	6	561</citation>
	<citation>1278	6	561</citation>
	<citation>1334	6	561</citation>
	<citation>1365	6	561</citation>
	<citation>1386	6	561</citation>
	<citation>1387	6	561</citation>
	<citation>1388	6	561</citation>
	<citation>1392	6	561</citation>
	<citation>1393	6	561</citation>
	<citation>1394	6	561</citation>
	<citation>1395	6	561</citation>
	<citation>1396	6	561</citation>
	<citation>1397	6	561</citation>
	<citation>1496	6	561</citation>
	<citation>284	6	561</citation>
	<citation>284	6	561</citation>
	<citation>407	6	561</citation>
	<citation>3199	6	561</citation>
	<citation>3200	6	561</citation>
	<citation>3201	6	561</citation>
	<citation>3202	6	561</citation>
	<citation>3203	6	561</citation>
	<citation>3204	6	561</citation>
	<citation>561	6	561</citation>
	<citation>561	6	561</citation>
	<citation>561	6	561</citation>
	<citation>561	6	561</citation>
	<citation>561	6	561</citation>
	<citation>730	6	561</citation>
	<citation>759	6	561</citation>
	</citations>
	<title>Analytic Differentiation By Computer</title>
	<conference>CACM June, 1962</conference>
	<authors>
	<author>Hanson, J. W.</author>
	<author>Caviness, J. S.</author>
	<author>Joseph, C.</author>
	</authors>
	<location>CA620624 JB March 17, 1978  9:12 PM</location>
	</document>
	<document id= '560'>
	<citations>
	<citation>249	4	560</citation>
	<citation>254	4	560</citation>
	<citation>272	4	560</citation>
	<citation>1102	4	560</citation>
	<citation>1109	4	560</citation>
	<citation>1140	4	560</citation>
	<citation>1188	4	560</citation>
	<citation>1306	4	560</citation>
	<citation>1464	4	560</citation>
	<citation>1491	4	560</citation>
	<citation>1767	4	560</citation>
	<citation>1774	4	560</citation>
	<citation>1781	4	560</citation>
	<citation>1787	4	560</citation>
	<citation>1949	4	560</citation>
	<citation>321	4	560</citation>
	<citation>2059	4	560</citation>
	<citation>2126	4	560</citation>
	<citation>435	4	560</citation>
	<citation>437	4	560</citation>
	<citation>463	4	560</citation>
	<citation>483	4	560</citation>
	<citation>491	4	560</citation>
	<citation>2732	4	560</citation>
	<citation>560	4	560</citation>
	<citation>560	4	560</citation>
	<citation>583	4	560</citation>
	<citation>3073	4	560</citation>
	<citation>627	4	560</citation>
	<citation>631	4	560</citation>
	<citation>632	4	560</citation>
	<citation>642	4	560</citation>
	<citation>644	4	560</citation>
	<citation>653	4	560</citation>
	<citation>680	4	560</citation>
	<citation>761	4	560</citation>
	<citation>762	4	560</citation>
	<citation>763	4	560</citation>
	<citation>123	4	560</citation>
	<citation>140	4	560</citation>
	<citation>919	4	560</citation>
	<citation>972	4	560</citation>
	<citation>989	4	560</citation>
	<citation>196	5	560</citation>
	<citation>271	5	560</citation>
	<citation>560	5	560</citation>
	<citation>560	5	560</citation>
	<citation>560	5	560</citation>
	</citations>
	<title>Communication Between Independently Translated Blocks</title>
	<conference>CACM July, 1962</conference>
	<authors>
	<author>Wegner, P.</author>
	</authors>
	<location>CA620701 JB March 17, 1978  9:11 PM</location>
	</document>
	<document id= '559'>
	<citations>
	<citation>559	5	559</citation>
	<citation>559	5	559</citation>
	<citation>559	5	559</citation>
	</citations>
	<title>Solution of Eigenvalue Problems With Approximately Known Eigenvectors</title>
	<conference>CACM July, 1962</conference>
	<authors>
	<author>Appel, K.</author>
	</authors>
	<location>CA620702 JB March 17, 1978  9:10 PM</location>
	</document>
	<document id= '558'>
	<title>A Modified Inversion Procedure for Product Form of the Inverse Linear Programming Codes</title>
	<abstract>This paper describes a new algorithm for the selection of the pivot row in matrix inversion  when using the product form of the inverse.  This algorithm has been developed for linear programming  codes; however, it would be valuable for the inversion of any non-dense matrix.  The procedures described  in this paper have been thoroughly tested and have been in operation on the Esso Research and Engineering  IBM 7090 computer for nine months.  Substantial computer cost savings have been realized because of this  procedure.</abstract>
	<conference>CACM July,1962</conference>
	<authors>
	<author>Larsen, L. J.</author>
	</authors>
	<location>CA620703 JB March 17, 1978  9:07 PM</location>
	<citations>
	<citation>558	5	558</citation>
	<citation>558	5	558</citation>
	<citation>558	5	558</citation>
	</citations>
	</document>
	<document id= '557'>
	<citations>
	<citation>1380	4	557</citation>
	<citation>1552	4	557</citation>
	<citation>1693	4	557</citation>
	<citation>1781	4	557</citation>
	<citation>1854	4	557</citation>
	<citation>1860	4	557</citation>
	<citation>2060	4	557</citation>
	<citation>557	4	557</citation>
	<citation>1421	5	557</citation>
	<citation>557	5	557</citation>
	<citation>557	5	557</citation>
	<citation>557	5	557</citation>
	<citation>3184	5	557</citation>
	<citation>1198	6	557</citation>
	<citation>1749	6	557</citation>
	<citation>557	6	557</citation>
	</citations>
	<title>Simulation of Computer Timing Device</title>
	<conference>CACM July, 1962</conference>
	<location>CA620704 JB March 17, 1978  8:57 PM</location>
	</document>
	<document id= '556'>
	<citations>
	<citation>1139	4	556</citation>
	<citation>1947	4	556</citation>
	<citation>556	4	556</citation>
	<citation>799	4	556</citation>
	<citation>399	5	556</citation>
	<citation>556	5	556</citation>
	<citation>556	5	556</citation>
	<citation>556	5	556</citation>
	</citations>
	<title>On Translation of Boolean Expressions</title>
	<conference>CACM July, 1972</conference>
	<authors>
	<author>Bottenbirruch, H.</author>
	<author>Grau, A. A.</author>
	</authors>
	<location>CA620705 JB March 17, 1978  8:52 PM</location>
	</document>
	<document id= '555'>
	<citations>
	<citation>555	5	555</citation>
	<citation>555	5	555</citation>
	<citation>555	5	555</citation>
	</citations>
	<title>Reduction to Jacobi (Algorithm 104)</title>
	<conference>CACM July, 1962</conference>
	<authors>
	<author>Rutishausr, H.</author>
	</authors>
	<location>CA620706 JB March 17, 1978  8:45 PM</location>
	</document>
	<document id= '554'>
	<citations>
	<citation>554	5	554</citation>
	<citation>554	5	554</citation>
	<citation>554	5	554</citation>
	</citations>
	<title>Newton Maehly, (Algorithm 105)</title>
	<conference>CACM July, 1962</conference>
	<authors>
	<author>Bauer, F. L.</author>
	<author>Stoer, J.</author>
	</authors>
	<location>CA620707 JB March 17, 1978  8:44 PM</location>
	</document>
	<document id= '553'>
	<citations>
	<citation>553	5	553</citation>
	<citation>553	5	553</citation>
	<citation>553	5	553</citation>
	</citations>
	<title>Complex Number to a Real Power (Algorithm 106)</title>
	<conference>CACM July, 1962</conference>
	<authors>
	<author>Johnson, M. L.</author>
	<author>Sangren, W.</author>
	</authors>
	<location>CA620708 JB March 17, 1978  8:34 PM</location>
	</document>
	<document id= '552'>
	<citations>
	<citation>552	5	552</citation>
	<citation>552	5	552</citation>
	<citation>552	5	552</citation>
	</citations>
	<title>Gauss's Method (Algorithm 107)</title>
	<conference>CACM July, 1962</conference>
	<authors>
	<author>Counts, J. W.</author>
	</authors>
	<location>CA620709 JB March 17, 1978  8:33 PM</location>
	</document>
	<document id= '551'>
	<citations>
	<citation>551	5	551</citation>
	<citation>551	5	551</citation>
	<citation>551	5	551</citation>
	</citations>
	<title>Definite Exponential Integrals A (Algorithm 108)</title>
	<conference>CACM July, 1962</conference>
	<authors>
	<author>Kruglyak, Y. A.</author>
	<author>Whitman, D. R.</author>
	</authors>
	<location>CA620710 JB March 17, 1978  8:31 PM</location>
	</document>
	<document id= '550'>
	<citations>
	<citation>550	5	550</citation>
	<citation>550	5	550</citation>
	<citation>550	5	550</citation>
	</citations>
	<title>Definite Exponential Integrals B (Algorithm 109)</title>
	<conference>CACM July, 1962</conference>
	<authors>
	<author>Kruglyak, Y. A.</author>
	<author>Whitman, D. R.</author>
	</authors>
	<location>CA620711 JB March 17, 1978  8:30 PM</location>
	</document>
	<document id= '549'>
	<citations>
	<citation>549	5	549</citation>
	<citation>549	5	549</citation>
	<citation>549	5	549</citation>
	</citations>
	<title>Quantum Mechanical Integrals of Slater-Type Orbitals</title>
	<conference>CACM July, 1962</conference>
	<authors>
	<author>Kruglyak, Y. A.</author>
	<author>Whitman, D. R.</author>
	</authors>
	<location>CA620712 JB March 17, 1978  8:27 PM</location>
	</document>
	<document id= '548'>
	<citations>
	<citation>548	5	548</citation>
	<citation>548	5	548</citation>
	<citation>548	5	548</citation>
	</citations>
	<title>Molecular-Orbital Calculation of Molecular Interactions</title>
	<conference>CACM July, 1962</conference>
	<authors>
	<author>Kruglyak, Y. A.</author>
	<author>Whitman, D. R.</author>
	</authors>
	<location>CA620713 JB March 17, 1978  8:26 PM</location>
	</document>
	<document id= '547'>
	<citations>
	<citation>547	5	547</citation>
	<citation>547	5	547</citation>
	<citation>547	5	547</citation>
	</citations>
	<title>Gamma Function (Algorithm 34)</title>
	<conference>CACM July, 1962</conference>
	<authors>
	<author>Johnson, M. L.</author>
	<author>Sangren, W.</author>
	</authors>
	<location>CA620714 JB March 17, 1978  8:25 PM</location>
	</document>
	<document id= '546'>
	<citations>
	<citation>546	5	546</citation>
	<citation>546	5	546</citation>
	<citation>546	5	546</citation>
	</citations>
	<title>Logarithm of a Complex Number (Algorithm 48)</title>
	<conference>CACM July, 1962</conference>
	<authors>
	<author>Johnson, M. L.</author>
	<author>Sangren, W.</author>
	</authors>
	<location>CA620715 JB March 17, 1978  8:23 PM</location>
	</document>
	<document id= '545'>
	<citations>
	<citation>545	5	545</citation>
	<citation>545	5	545</citation>
	<citation>545	5	545</citation>
	</citations>
	<title>Adjust Inverse of a Matrix when an Element is Perturbed (Algorithm 51)</title>
	<conference>CACM July, 1962</conference>
	<authors>
	<author>George, R.</author>
	</authors>
	<location>CA620716 JB March 17, 1978  8:22 PM</location>
	</document>
	<document id= '544'>
	<citations>
	<citation>544	5	544</citation>
	<citation>544	5	544</citation>
	<citation>544	5	544</citation>
	</citations>
	<title>Ber or Bei Function (Algorithm 57)</title>
	<conference>CACM July, 1962</conference>
	<authors>
	<author>Relph, A. P.</author>
	</authors>
	<location>CA620717 JB March 17, 1978  8:21 PM</location>
	</document>
	<document id= '543'>
	<citations>
	<citation>543	5	543</citation>
	<citation>543	5	543</citation>
	<citation>543	5	543</citation>
	</citations>
	<title>Interpolation by Aitken (Algorithm 70)</title>
	<conference>CACM July, 1962</conference>
	<authors>
	<author>Relph, A. P.</author>
	</authors>
	<location>CA620718 JB March 17, 1978  8:19 PM</location>
	</document>
	<document id= '542'>
	<citations>
	<citation>542	5	542</citation>
	<citation>542	5	542</citation>
	<citation>542	5	542</citation>
	</citations>
	<title>FACTORS (Algorithm 75)</title>
	<conference>CACM July, 1962</conference>
	<authors>
	<author>Relph, A. P.</author>
	</authors>
	<location>CA620719 JB March 17, 1978  8:18 PM</location>
	</document>
	<document id= '541'>
	<citations>
	<citation>541	5	541</citation>
	<citation>541	5	541</citation>
	<citation>541	5	541</citation>
	</citations>
	<title>Simpson's Integration (Algorithm 84)</title>
	<conference>CACM July, 1962</conference>
	<authors>
	<author>Relph, A. P.</author>
	</authors>
	<location>CA620720 JB March 17, 1978  8:17 PM</location>
	</document>
	<document id= '540'>
	<citations>
	<citation>540	5	540</citation>
	<citation>540	5	540</citation>
	<citation>540	5	540</citation>
	</citations>
	<title>Definite Exponential Integrals A (Algorithm 108)</title>
	<conference>CACM July, 1962</conference>
	<authors>
	<author>Kruglyak, Y. A.</author>
	<author>Whitman, D. R.</author>
	</authors>
	<location>CA620721 JB March 17, 1978  8:16 PM</location>
	</document>
	<document id= '539'>
	<citations>
	<citation>539	5	539</citation>
	<citation>539	5	539</citation>
	<citation>539	5	539</citation>
	</citations>
	<title>Definite Exponential Integrals B (Algorithm 109)</title>
	<conference>CACM July, 1962</conference>
	<authors>
	<author>Kruglyak, Y. A.</author>
	<author>Whitman, D. R.</author>
	</authors>
	<location>CA620722 JB March 17, 1978  8:15 PM</location>
	</document>
	<document id= '538'>
	<citations>
	<citation>538	5	538</citation>
	<citation>538	5	538</citation>
	<citation>538	5	538</citation>
	</citations>
	<title>Quantum Mechanical Integrals of Slater-Type Orbitals (Algorithm 110)</title>
	<conference>CACM July, 1962</conference>
	<authors>
	<author>Kruglyak, Y. A.</author>
	<author>Whitman, D. R.</author>
	</authors>
	<location>CA620723 JB March 17, 1978  8:13 PM</location>
	</document>
	<document id= '537'>
	<title>A Machine Program for Theorem-Proving</title>
	<abstract>The program of a proof procedure is discussed in connection with trial runs and possible improvements.</abstract>
	<conference>CACM July, 1962</conference>
	<authors>
	<author>Davis, M.</author>
	<author>Logemann, G.</author>
	<author>Loveland, D.</author>
	</authors>
	<location>CA620724 JB March 17, 1978  8:11 PM</location>
	<citations>
	<citation>537	5	537</citation>
	<citation>537	5	537</citation>
	<citation>537	5	537</citation>
	</citations>
	</document>
	<document id= '536'>
	<title>Nonlinear Regression and the Solution of Simultaneous Equations</title>
	<abstract>If one has a set of observables (Z1,...,Zm) which are bound in a relation with certain parameters  (A1,...,An) by an equation S(Z1,...;A1,...)=0, one frequently has the problem of determining a set of  values of the Ai which minimizes the sum of squares of differences between observed and calculated values  of a distinguished observable, say Zm.  If the solution of the above equation for Zm,  Zm=N(Z1,...;A1,...)  gives rise to a function N which is nonlinear in the Ai, then one may rely on a version of Gaussian regression  [1,2] for an iteration scheme that converges to a minimizing set of values.  It is shown here that this  same minimization technique may be used for the solution of simultaneous (not necessarily linear) equations.</abstract>
	<conference>CACM July, 1962</conference>
	<authors>
	<author>Baer, R. M.</author>
	</authors>
	<location>CA620725 JB March 17, 1978  8:09 PM</location>
	<citations>
	<citation>536	5	536</citation>
	<citation>536	5	536</citation>
	<citation>536	5	536</citation>
	</citations>
	</document>
	<document id= '535'>
	<citations>
	<citation>1806	5	535</citation>
	<citation>535	5	535</citation>
	<citation>535	5	535</citation>
	<citation>535	5	535</citation>
	<citation>535	6	535</citation>
	</citations>
	<title>Triangular Walk Pattern for the Down-hill Method of Solving a Transcendental Equation</title>
	<conference>CACM July, 1962</conference>
	<authors>
	<author>Onoe, M.</author>
	</authors>
	<location>CA620726 JB March 17, 1978  8:02 PM</location>
	</document>
	<document id= '534'>
	<citations>
	<citation>534	5	534</citation>
	<citation>534	5	534</citation>
	<citation>534	5	534</citation>
	</citations>
	<title>Quick Calculation of Jacobian Elliptic Functions</title>
	<conference>CACM July, 1962</conference>
	<authors>
	<author>Salzer, H. E.</author>
	</authors>
	<location>CA620727 JB March 17, 1978  8:01 PM</location>
	</document>
	<document id= '533'>
	<title>Digital Synthesis of Correlated Stationary Noise</title>
	<abstract>In this note we propose a method of generating stationary noise with a prescribed auto-covariance  function by digital methods.  The need for such a technique often arises in testing the performance of  data processing and engineering systems, where inputs corrupted with correlated noise (of a known form)  are required.  The technique is quite simple and produces strict-sense stationary noise which agrees  approximately with R(t), the prescribed auto-covariance function (acf), over an interval [-T(0), T(0)].   The method consists of approximating the spectral density by a periodic process with spectral lines,  and then synthesizing the periodic noise with random phases and appropriate amplitudes.  In order to  simplify discussion of the statistical properties of the noise generated, the technique is first presented  in terms of exact harmonic analysis.  In practice, discrete harmonic analysis as presented in the third  section is used.</abstract>
	<conference>CACM July, 1962</conference>
	<authors>
	<author>Peabody, P. R.</author>
	<author>Adorno, D. S.</author>
	</authors>
	<location>CA620728 JB March 17, 1978  7:59 PM</location>
	<citations>
	<citation>533	5	533</citation>
	<citation>533	5	533</citation>
	<citation>533	5	533</citation>
	</citations>
	</document>
	<document id= '532'>
	<citations>
	<citation>951	5	532</citation>
	<citation>1015	5	532</citation>
	<citation>1346	5	532</citation>
	<citation>1440	5	532</citation>
	<citation>1645	5	532</citation>
	<citation>532	5	532</citation>
	<citation>532	5	532</citation>
	<citation>532	5	532</citation>
	<citation>951	6	532</citation>
	<citation>962	6	532</citation>
	<citation>532	6	532</citation>
	<citation>532	6	532</citation>
	<citation>532	6	532</citation>
	<citation>532	6	532</citation>
	<citation>532	6	532</citation>
	</citations>
	<title>On the Computation of Rational Approximations to Continuous Functions</title>
	<conference>CACM July, 1962</conference>
	<authors>
	<author>Fraser, W.</author>
	<author>HArt, J. F.</author>
	</authors>
	<location>CA620729 JB March 17, 1978  7:52 PM</location>
	</document>
	<document id= '531'>
	<title>Person-Matching by Electronic Methods</title>
	<abstract>Record linkage in the updating of files is accomplished in many establishments through the  use of a preassigned number, such as payroll number, customer number, or social security number.  In  vital and health records, however, a unique number is generally not preassigned to an individual for  purposes of reporting services received to the health department.  In order to determine whether different  physician reports refer to the same individual, name and other identification must be compared.  This  is a laborious operation which is subject to various errors because of name misspellings, changes of  name upon marriage, and other problems.  We are interested in the maintenance of a psychiatric case register  in Maryland, where many of the reports from over a hundred psychiatric agencies refer to the same patient.   These records must be linked in order to provide unduplicated counts of individuals under care and longitudinal  records of psychiatric history.  An earlier paper [1] describes our general procedures for register maintenance  by use of a digital computer (Honeywell 800).  Here we present in more detail our initial procedures  for the person-matching process in order to elicit comments and suggestions from persons who have had  experience in matching.</abstract>
	<conference>CACM July, 1962</conference>
	<authors>
	<author>Bahn, A. K.</author>
	<author>Miyasaki, M.</author>
	</authors>
	<location>CA620730 JB March 17, 1978  7:51 PM</location>
	<citations>
	<citation>531	5	531</citation>
	<citation>531	5	531</citation>
	<citation>531	5	531</citation>
	</citations>
	</document>
	<document id= '530'>
	<citations>
	<citation>530	5	530</citation>
	<citation>530	5	530</citation>
	<citation>530	5	530</citation>
	</citations>
	<title>A Computer Method for Radiation Treatment Planning</title>
	<conference>CACM July, 1962</conference>
	<authors>
	<author>Siler, W.</author>
	<author>Laughlin, J. S.</author>
	</authors>
	<location>CA620731 JB March 17, 1978  7:43 PM</location>
	</document>
	<document id= '529'>
	<citations>
	<citation>529	5	529</citation>
	<citation>529	5	529</citation>
	<citation>529	5	529</citation>
	</citations>
	<title>Regression and Coded Patterns in Data Editing</title>
	<conference>CACM July, 1962</conference>
	<authors>
	<author>Robison, D. E.</author>
	<author>Aroian, L. A.</author>
	</authors>
	<location>CA620732 JB March 17, 1978  7:42 PM</location>
	</document>
	<document id= '528'>
	<citations>
	<citation>1330	5	528</citation>
	<citation>528	5	528</citation>
	<citation>528	5	528</citation>
	<citation>528	5	528</citation>
	<citation>528	6	528</citation>
	<citation>728	6	528</citation>
	</citations>
	<title>FORTRAN for Business Data Processing</title>
	<conference>CACM July, 1962</conference>
	<authors>
	<author>Robbins, D. K.</author>
	</authors>
	<location>CA620733 JB March 17, 1978  7:41 PM</location>
	</document>
	<document id= '527'>
	<title>The Description List of Concepts</title>
	<abstract>A concept is defined as a class of objects whose members can be distinguished by processing  its properties.  Property is defined to mean a partition of the set of all objects into disjoint classes.   The formal definition of a concept is recursive in nature.  A concept is described by a list structure.   A one-to-one correspondence is established between the recursive definition of a concept and its description  list structure.  Like the definition, the description list structure of a concept is also built up from  elementary list structures by a recursive process.  The list structures obtained this way are compared  with the description list structure discussed by the author in a previous publication.</abstract>
	<conference>CACM August, 1962</conference>
	<authors>
	<author>Banerji, R. B.</author>
	</authors>
	<location>CA620801 JB March 17, 1978  7:39 PM</location>
	<citations>
	<citation>527	5	527</citation>
	<citation>527	5	527</citation>
	<citation>527	5	527</citation>
	</citations>
	</document>
	<document id= '526'>
	<citations>
	<citation>526	5	526</citation>
	<citation>526	5	526</citation>
	<citation>526	5	526</citation>
	</citations>
	<title>Character Manipulation in Fortran</title>
	<conference>CACM August, 1962</conference>
	<authors>
	<author>Pyle, I. C.</author>
	</authors>
	<location>CA620802 JB March 17, 1978  7:33 PM</location>
	</document>
	<document id= '525'>
	<citations>
	<citation>525	5	525</citation>
	<citation>525	5	525</citation>
	<citation>525	5	525</citation>
	</citations>
	<title>A Computer Technique for Handling Analysis of Variance</title>
	<conference>CACM August, 1962</conference>
	<authors>
	<author>Howell, J. R.</author>
	</authors>
	<location>CA620803 JB March 17, 1978  7:32 PM</location>
	</document>
	<document id= '524'>
	<citations>
	<citation>1804	5	524</citation>
	<citation>2987	5	524</citation>
	<citation>524	5	524</citation>
	<citation>524	5	524</citation>
	<citation>524	5	524</citation>
	<citation>1326	6	524</citation>
	<citation>1630	6	524</citation>
	<citation>2125	6	524</citation>
	<citation>2547	6	524</citation>
	<citation>2633	6	524</citation>
	<citation>421	6	524</citation>
	<citation>421	6	524</citation>
	<citation>524	6	524</citation>
	<citation>524	6	524</citation>
	</citations>
	<title>Position of Point Relative to Polygon (Algorithm 112)</title>
	<conference>CACM August, 1962</conference>
	<authors>
	<author>Shimrat, M.</author>
	</authors>
	<location>CA620804 JB March 17, 1978  7:30 PM</location>
	</document>
	<document id= '523'>
	<citations>
	<citation>523	5	523</citation>
	<citation>523	5	523</citation>
	<citation>523	5	523</citation>
	</citations>
	<title>TREESORT (Algorithm 113)</title>
	<conference>CACM August, 1962</conference>
	<authors>
	</authors>
	<location>CA620805 JB March 17, 1978  7:29 PM</location>
	</document>
	<document id= '522'>
	<citations>
	<citation>522	5	522</citation>
	<citation>522	5	522</citation>
	<citation>522	5	522</citation>
	</citations>
	<title>Generation of Partitions with Constraints (Algorithm 114)</title>
	<conference>CACM August, 1962</conference>
	<authors>
	<author>Stockmal, F.</author>
	</authors>
	<location>CA620806 JB March 17, 1978  7:28 PM</location>
	</document>
	<document id= '521'>
	<citations>
	<citation>2044	5	521</citation>
	<citation>2189	5	521</citation>
	<citation>2417	5	521</citation>
	<citation>2505	5	521</citation>
	<citation>2874	5	521</citation>
	<citation>2908	5	521</citation>
	<citation>521	5	521</citation>
	<citation>521	5	521</citation>
	<citation>521	5	521</citation>
	<citation>996	6	521</citation>
	<citation>1558	6	521</citation>
	<citation>1594	6	521</citation>
	<citation>1682	6	521</citation>
	<citation>2087	6	521</citation>
	<citation>2189	6	521</citation>
	<citation>2227	6	521</citation>
	<citation>2230	6	521</citation>
	<citation>2292	6	521</citation>
	<citation>2317	6	521</citation>
	<citation>2505	6	521</citation>
	<citation>2683	6	521</citation>
	<citation>2871	6	521</citation>
	<citation>2884	6	521</citation>
	<citation>3191	6	521</citation>
	<citation>521	6	521</citation>
	<citation>521	6	521</citation>
	<citation>521	6	521</citation>
	<citation>521	6	521</citation>
	<citation>521	6	521</citation>
	<citation>521	6	521</citation>
	</citations>
	<title>PERM (Algorithm 115)</title>
	<conference>CACM August, 1962</conference>
	<authors>
	<author>Trotter, H. F.</author>
	</authors>
	<location>CA620807 JB March 17, 1978  9:57 PM</location>
	</document>
	<document id= '520'>
	<citations>
	<citation>520	5	520</citation>
	<citation>520	5	520</citation>
	<citation>520	5	520</citation>
	</citations>
	<title>Complex Division (Algorithm 116)</title>
	<conference>CACM August, 1962</conference>
	<authors>
	<author>Smith, R. L.</author>
	</authors>
	<location>CA620808 JB March 17, 1978  9:47 PM</location>
	</document>
	<document id= '519'>
	<citations>
	<citation>519	5	519</citation>
	<citation>519	5	519</citation>
	<citation>519	5	519</citation>
	</citations>
	<title>Magic Square (Even Order) (Algorithm 117)</title>
	<conference>CACM August, 1962</conference>
	<authors>
	<author>Collison, D. M.</author>
	</authors>
	<location>CA620809 JB March 17, 1978  9:46 PM</location>
	</document>
	<document id= '518'>
	<citations>
	<citation>2082	5	518</citation>
	<citation>518	5	518</citation>
	<citation>518	5	518</citation>
	<citation>518	5	518</citation>
	<citation>1491	6	518</citation>
	<citation>518	6	518</citation>
	</citations>
	<title>Magic Square (Odd Order) (Algorithm 118)</title>
	<conference>CACM August, 1962</conference>
	<authors>
	<author>Collison, D. M.</author>
	</authors>
	<location>CA620810 JB March 17, 1978  9:45 PM</location>
	</document>
	<document id= '517'>
	<citations>
	<citation>517	5	517</citation>
	<citation>517	5	517</citation>
	<citation>517	5	517</citation>
	</citations>
	<title>Evaluation of Pert Network (Algorithm 119)</title>
	<conference>CACM August, 1962</conference>
	<authors>
	<author>Eisenman, B.</author>
	<author>Shapiro, M.</author>
	</authors>
	<location>CA620811 JB March 17, 1978  9:44 PM</location>
	</document>
	<document id= '516'>
	<citations>
	<citation>516	5	516</citation>
	<citation>516	5	516</citation>
	<citation>516	5	516</citation>
	</citations>
	<title>Matrix Inversion II (Algorithm 120)</title>
	<conference>CACM August, 1962</conference>
	<authors>
	<author>George, R.</author>
	</authors>
	<location>CA620812 JB March 17, 1978  9:42 PM</location>
	</document>
	<document id= '515'>
	<citations>
	<citation>515	5	515</citation>
	<citation>515	5	515</citation>
	<citation>515	5	515</citation>
	</citations>
	<title>Rational Interpolation by Continued Fractions (Algorithm 18)</title>
	<conference>CACM August, 1962</conference>
	<authors>
	</authors>
	<location>CA620813 JB March 17, 1978  9:41 PM</location>
	</document>
	<document id= '514'>
	<citations>
	<citation>514	5	514</citation>
	<citation>514	5	514</citation>
	<citation>514	5	514</citation>
	</citations>
	<title>Binomial Coefficients (Algorithm 19)</title>
	<conference>CACM August, 1962</conference>
	<authors>
	<author>George, R.</author>
	</authors>
	<location>CA620814 JB March 17, 1978  9:40 PM</location>
	</document>
	<document id= '513'>
	<citations>
	<citation>513	5	513</citation>
	<citation>513	5	513</citation>
	<citation>513	5	513</citation>
	</citations>
	<title>SIEVE (Algorithm 35)</title>
	<conference>CACM August, 1962</conference>
	<authors>
	<author>Hillmore, J. S.</author>
	</authors>
	<location>CA620815 JB March 17, 1978  9:37 PM</location>
	</document>
	<document id= '512'>
	<citations>
	<citation>512	5	512</citation>
	<citation>512	5	512</citation>
	<citation>512	5	512</citation>
	</citations>
	<title>Telescope 1 (Algorithm 37)</title>
	<conference>CACM August, 1962</conference>
	<authors>
	</authors>
	<location>CA620816 JB March 17, 1978  9:36 PM</location>
	</document>
	<document id= '511'>
	<citations>
	<citation>1707	5	511</citation>
	<citation>511	5	511</citation>
	<citation>511	5	511</citation>
	<citation>511	5	511</citation>
	<citation>1047	6	511</citation>
	<citation>511	6	511</citation>
	</citations>
	<title>A Set of Test Matrices (Algorithm 52)</title>
	<conference>CACM August, 1962</conference>
	<authors>
	<author>Hillmore, J. S.</author>
	</authors>
	<location>CA620817 JB March 17, 1978  9:35 PM</location>
	</document>
	<document id= '510'>
	<citations>
	<citation>510	5	510</citation>
	<citation>510	5	510</citation>
	<citation>510	5	510</citation>
	</citations>
	<title>Ber or Bei Function (Algorithm 57)</title>
	<conference>CACM August, 1962</conference>
	<authors>
	</authors>
	<location>CA620818 JB March 17, 1978  9:34 PM</location>
	</document>
	<document id= '509'>
	<citations>
	<citation>509	5	509</citation>
	<citation>509	5	509</citation>
	<citation>509	5	509</citation>
	</citations>
	<title>Matrix Inversion (Algorithm 58)</title>
	<conference>CACM August, 1962</conference>
	<authors>
	<author>Struble, G.</author>
	</authors>
	<location>CA620819 JB March 17, 1978  9:33 PM</location>
	</document>
	<document id= '508'>
	<citations>
	<citation>508	5	508</citation>
	<citation>508	5	508</citation>
	<citation>508	5	508</citation>
	</citations>
	<title>Matrix Inversion (Algorithm 58)</title>
	<conference>CACM August, 1962</conference>
	<authors>
	<author>George, R.</author>
	</authors>
	<location>CA620820 JB March 17, 1978  9:32 PM</location>
	</document>
	<document id= '507'>
	<citations>
	<citation>2679	5	507</citation>
	<citation>507	5	507</citation>
	<citation>507	5	507</citation>
	<citation>507	5	507</citation>
	<citation>970	6	507</citation>
	<citation>1175	6	507</citation>
	<citation>1190	6	507</citation>
	<citation>1228	6	507</citation>
	<citation>1969	6	507</citation>
	<citation>1997	6	507</citation>
	<citation>308	6	507</citation>
	<citation>2042	6	507</citation>
	<citation>3187	6	507</citation>
	<citation>507	6	507</citation>
	<citation>716	6	507</citation>
	<citation>783	6	507</citation>
	</citations>
	<title>Partition, Quicksort, Find (Algorithm 63, 64, 65)</title>
	<conference>CACM August, 1962</conference>
	<authors>
	<author>Hillmore, J. S.</author>
	</authors>
	<location>CA620821 JB March 17, 1978  9:32 PM</location>
	</document>
	<document id= '506'>
	<citations>
	<citation>506	5	506</citation>
	<citation>506	5	506</citation>
	<citation>506	5	506</citation>
	</citations>
	<title>PERMUTATION (Algorithm 71)</title>
	<conference>CACM August, 1962</conference>
	<authors>
	<author>Hillmore, J. S.</author>
	</authors>
	<location>CA620822 JB March 17, 1978  9:30 PM</location>
	</document>
	<document id= '505'>
	<citations>
	<citation>505	5	505</citation>
	<citation>505	5	505</citation>
	<citation>505	5	505</citation>
	</citations>
	<title>Composition Generator (Algorithm 72)</title>
	<conference>CACM August, 1962</conference>
	<authors>
	<author>Collison, D. M.</author>
	</authors>
	<location>CA620823 JB March 17, 1978  9:29 PM</location>
	</document>
	<document id= '504'>
	<citations>
	<citation>504	5	504</citation>
	<citation>504	5	504</citation>
	<citation>504	5	504</citation>
	</citations>
	<title>FACTORS (Algorithm 75)</title>
	<conference>CACM August, 1962</conference>
	<authors>
	<author>Hillmore, J. S.</author>
	</authors>
	<location>CA620824 JB March 17, 1978  9:28 PM</location>
	</document>
	<document id= '503'>
	<citations>
	<citation>503	5	503</citation>
	<citation>503	5	503</citation>
	<citation>503	5	503</citation>
	</citations>
	<title>Rational Roots of Polynomials with Integer Coefficients (Algorithm 78)</title>
	<conference>CACM August, 1962</conference>
	<authors>
	<author>Collison, D. M.</author>
	</authors>
	<location>CA620825 JB March 17, 1978  9:27 PM</location>
	</document>
	<document id= '502'>
	<citations>
	<citation>502	5	502</citation>
	<citation>502	5	502</citation>
	<citation>502	5	502</citation>
	</citations>
	<title>Simpson's Integration (Algorithm 84)</title>
	<conference>CACM August, 1962</conference>
	<authors>
	<author>George, R.</author>
	</authors>
	<location>CA620826 JB March 17, 1978  9:25 PM</location>
	</document>
	<document id= '501'>
	<citations>
	<citation>2349	5	501</citation>
	<citation>501	5	501</citation>
	<citation>501	5	501</citation>
	<citation>501	5	501</citation>
	<citation>1648	6	501</citation>
	<citation>1716	6	501</citation>
	<citation>1794	6	501</citation>
	<citation>1894	6	501</citation>
	<citation>2043	6	501</citation>
	<citation>501	6	501</citation>
	<citation>613	6	501</citation>
	<citation>774	6	501</citation>
	</citations>
	<title>JACOBI (Algorithm 85)</title>
	<conference>CACM August, 1962</conference>
	<authors>
	<author>Hillmore, J. S.</author>
	</authors>
	<location>CA620827 JB March 17, 1978  9:24 PM</location>
	</document>
	<document id= '500'>
	<citations>
	<citation>500	5	500</citation>
	<citation>500	5	500</citation>
	<citation>500	5	500</citation>
	</citations>
	<title>PERMUTE (Algorithm 86)</title>
	<conference>CACM August, 1962</conference>
	<authors>
	<author>Collison, D. M.</author>
	</authors>
	<location>CA620828 JB March 17, 1978  9:23 PM</location>
	</document>
	<document id= '499'>
	<citations>
	<citation>499	5	499</citation>
	<citation>499	5	499</citation>
	<citation>499	5	499</citation>
	</citations>
	<title>Permutation Generator (Algorithm 87)</title>
	<conference>CACM August, 1962</conference>
	<authors>
	<author>Collison, D. M.</author>
	</authors>
	<location>CA620829 JB March 17, 1978  9:22 PM</location>
	</document>
	<document id= '498'>
	<citations>
	<citation>498	5	498</citation>
	<citation>498	5	498</citation>
	<citation>498	5	498</citation>
	</citations>
	<title>Magic Square (Algorithm 117 &amp; 118)</title>
	<conference>CACM August, 1962</conference>
	<authors>
	<author>Collison, D. M.</author>
	</authors>
	<location>CA620830 JB March 17, 1978  9:20 PM</location>
	</document>
	<document id= '497'>
	<title>Further Remarks on Line Segment Curve-Fitting Using Dynamic Programming</title>
	<abstract>In a recent paper, Bellman showed how dynamic programming could be used to determine the solution  to a problem previously considered by Stone.  The problem comprises the determination, given N, of the  N points of subdivision of a given interval (a,B) and the corresponding line segments, that give the  best least squares fit to a function g(x) in the interval.  Bellman confined himself primarily to the  analytical derivation, suggesting briefly, however, how the solution of the equation derived for each  particular point of subdivision u(i) could be reduced to a discrete search.  In this paper, the computational  procedure is considered more fully, and the similarities to some of Stone's equations are indicated.   It is further shown that an equation for u(i) involving no minimization may be found.  In addition,  it is shown how Bellman's method may be applied to the curve-fitting problem when the additional constraints  are added that the ends of the line segments must be on the curve.</abstract>
	<conference>CACM August, 1962</conference>
	<authors>
	<author>Gluss, B.</author>
	</authors>
	<location>CA620831 JB March 17, 1978  9:19 PM</location>
	<citations>
	<citation>497	4	497</citation>
	<citation>867	4	497</citation>
	<citation>317	5	497</citation>
	<citation>497	5	497</citation>
	<citation>497	5	497</citation>
	<citation>497	5	497</citation>
	<citation>867	5	497</citation>
	<citation>317	6	497</citation>
	<citation>497	6	497</citation>
	</citations>
	</document>
	<document id= '496'>
	<citations>
	<citation>1047	5	496</citation>
	<citation>496	5	496</citation>
	<citation>496	5	496</citation>
	<citation>496	5	496</citation>
	<citation>496	6	496</citation>
	</citations>
	<title>A Set of Matrices for Testing Computer Programs</title>
	<conference>CACM August, 1962</conference>
	<authors>
	<author>Brenner, J. L.</author>
	</authors>
	<location>CA620832 JB March 17, 1978  9:10 PM</location>
	</document>
	<document id= '495'>
	<title>A Procedure for Inverting Large Symmetric Matrices</title>
	<abstract>In the least squares method for simultaneous adjustment of several parameters, the coefficients  of the normal equations are the elements of a symmetric positive-definite matrix.  In order to solve  the normal equations and evaluate the precision measures of the resulting parameters, inversion of this  matrix of coefficients is required.  Many available procedures for matrix inversion do not take advantage  of the symmetry.  Thus, when programmed for a high-speed computer, all n^2 elements must be stored and  manipulated, whereas only (n + 1)/2 of them are independent.  In order to allow a computer of given memory  capacity to handle a larger matrix, the following procedure for inverting a symmetric matrix has been  devised.</abstract>
	<conference>CACM August, 1962</conference>
	<authors>
	<author>Busing, W. R.</author>
	<author>Levy, H. S.</author>
	</authors>
	<location>CA620833 JB March 17, 1978  9:09 PM</location>
	<citations>
	<citation>495	5	495</citation>
	<citation>495	5	495</citation>
	<citation>495	5	495</citation>
	</citations>
	</document>
	<document id= '494'>
	<citations>
	<citation>494	5	494</citation>
	<citation>494	5	494</citation>
	<citation>494	5	494</citation>
	</citations>
	<title>A Finite Sequentially Compact Process for the Adjoints of Matrices Over Arbitrary Integral Domains</title>
	<conference>CACM August, 1962</conference>
	<authors>
	<author>Luther, H. A.</author>
	</authors>
	<location>CA620834 JB March 17, 1978  9:04 PM</location>
	</document>
	<document id= '493'>
	<citations>
	<citation>1135	4	493</citation>
	<citation>1136	4	493</citation>
	<citation>493	4	493</citation>
	<citation>2710	4	493</citation>
	<citation>2765	4	493</citation>
	<citation>2888	4	493</citation>
	<citation>2906	4	493</citation>
	<citation>729	4	493</citation>
	<citation>1136	5	493</citation>
	<citation>493	5	493</citation>
	<citation>493	5	493</citation>
	<citation>493	5	493</citation>
	<citation>616	5	493</citation>
	<citation>493	6	493</citation>
	<citation>616	6	493</citation>
	<citation>657	6	493</citation>
	</citations>
	<title>The Property Classification Method of File Design and Processing</title>
	<conference>CACM August, 1962</conference>
	<authors>
	<author>McGee, W. C.</author>
	</authors>
	<location>CA620835 JB March 17, 1978  9:03 PM</location>
	</document>
	<document id= '492'>
	<title>Analysis of a File Addressing Method</title>
	<abstract>This paper presents a new file addressing method based on the calculation of an address from  the identification of a record.  For large recirculating type files, it seems to be more advantageous  than customary ones.  The probability distribution of the displacement of records from their calculated  address, which is one less than the number of probes required to address a record, is computed on the  basis of a Markov chain model.  For the reader not interested in the mathematics, the introduction and  the summary should be sufficient.</abstract>
	<conference>CACM August, 1962</conference>
	<authors>
	<author>Spruth, W. G.</author>
	</authors>
	<location>CA620836 JB March 17, 1978  9:02 PM</location>
	<citations>
	<citation>911	5	492</citation>
	<citation>1785	5	492</citation>
	<citation>2203	5	492</citation>
	<citation>2860	5	492</citation>
	<citation>492	5	492</citation>
	<citation>492	5	492</citation>
	<citation>492	5	492</citation>
	<citation>911	6	492</citation>
	<citation>911	6	492</citation>
	<citation>1328	6	492</citation>
	<citation>1785	6	492</citation>
	<citation>1786	6	492</citation>
	<citation>332	6	492</citation>
	<citation>332	6	492</citation>
	<citation>2107	6	492</citation>
	<citation>2109	6	492</citation>
	<citation>2203	6	492</citation>
	<citation>492	6	492</citation>
	<citation>492	6	492</citation>
	<citation>492	6	492</citation>
	<citation>492	6	492</citation>
	</citations>
	</document>
	<document id= '491'>
	<citations>
	<citation>249	4	491</citation>
	<citation>254	4	491</citation>
	<citation>272	4	491</citation>
	<citation>1102	4	491</citation>
	<citation>1109	4	491</citation>
	<citation>1140	4	491</citation>
	<citation>1188	4	491</citation>
	<citation>1306	4	491</citation>
	<citation>1464	4	491</citation>
	<citation>1491	4	491</citation>
	<citation>1713	4	491</citation>
	<citation>1713	4	491</citation>
	<citation>1767	4	491</citation>
	<citation>1781	4	491</citation>
	<citation>1787	4	491</citation>
	<citation>1901	4	491</citation>
	<citation>1901	4	491</citation>
	<citation>1949	4	491</citation>
	<citation>321	4	491</citation>
	<citation>2059	4	491</citation>
	<citation>2126	4	491</citation>
	<citation>435	4	491</citation>
	<citation>437	4	491</citation>
	<citation>463	4	491</citation>
	<citation>483	4	491</citation>
	<citation>491	4	491</citation>
	<citation>491	4	491</citation>
	<citation>491	4	491</citation>
	<citation>491	4	491</citation>
	<citation>2732	4	491</citation>
	<citation>560	4	491</citation>
	<citation>583	4	491</citation>
	<citation>3073	4	491</citation>
	<citation>627	4	491</citation>
	<citation>631	4	491</citation>
	<citation>632	4	491</citation>
	<citation>642	4	491</citation>
	<citation>644	4	491</citation>
	<citation>653	4	491</citation>
	<citation>680	4	491</citation>
	<citation>761	4	491</citation>
	<citation>762	4	491</citation>
	<citation>763	4	491</citation>
	<citation>123	4	491</citation>
	<citation>140	4	491</citation>
	<citation>168	4	491</citation>
	<citation>919	4	491</citation>
	<citation>989	4	491</citation>
	<citation>168	5	491</citation>
	<citation>185	5	491</citation>
	<citation>196	5	491</citation>
	<citation>491	5	491</citation>
	<citation>491	5	491</citation>
	<citation>491	5	491</citation>
	<citation>46	5	491</citation>
	<citation>3193	5	491</citation>
	<citation>796	5	491</citation>
	<citation>491	6	491</citation>
	<citation>491	6	491</citation>
	</citations>
	<title>Use of Multiprogramming in the Design of a Low Cost Digital Computer</title>
	<conference>CACM September, 1962</conference>
	<authors>
	<author>Penny, J. P.</author>
	<author>Pearcey, T.</author>
	</authors>
	<location>CA620901 JB March 17, 1978  8:57 PM</location>
	</document>
	<document id= '490'>
	<citations>
	<citation>490	5	490</citation>
	<citation>490	5	490</citation>
	<citation>490	5	490</citation>
	</citations>
	<title>Programmed Methods for Printer Graphical Output</title>
	<conference>CACM September, 1962</conference>
	<authors>
	<author>Garfinkel, D.</author>
	</authors>
	<location>CA620902 JB March 17, 1978  8:56 PM</location>
	</document>
	<document id= '489'>
	<citations>
	<citation>489	5	489</citation>
	<citation>489	5	489</citation>
	<citation>489	5	489</citation>
	</citations>
	<title>Current Status of IPL-V for the Philco 2000 Computer (June 1962)</title>
	<conference>CACM September, 1962</conference>
	<authors>
	<author>Shaffer, S. S.</author>
	</authors>
	<location>CA620903 JB March 17, 1978  7:41 PM</location>
	</document>
	<document id= '488'>
	<citations>
	<citation>1754	4	488</citation>
	<citation>2358	4	488</citation>
	<citation>488	4	488</citation>
	<citation>274	5	488</citation>
	<citation>488	5	488</citation>
	<citation>488	5	488</citation>
	<citation>488	5	488</citation>
	</citations>
	<title>A Heuristic for Page Turning In a Multiprogrammed Computer</title>
	<conference>CACM September, 1962</conference>
	<authors>
	<author>Weil, J. W.</author>
	</authors>
	<location>CA620904 JB March 17, 1978  7:40 PM</location>
	</document>
	<document id= '487'>
	<citations>
	<citation>487	5	487</citation>
	<citation>487	5	487</citation>
	<citation>487	5	487</citation>
	</citations>
	<title>NORMDEV (Algorithm 121)</title>
	<conference>CACM September, 1962</conference>
	<authors>
	</authors>
	<location>CA620905 JB March 17, 1978  7:38 PM</location>
	</document>
	<document id= '486'>
	<citations>
	<citation>486	5	486</citation>
	<citation>486	5	486</citation>
	<citation>486	5	486</citation>
	</citations>
	<title>Tridiagonal Matrix (Algorithm 122)</title>
	<conference>CACM September, 1962</conference>
	<authors>
	<author>Dietzel, G. F.</author>
	</authors>
	<location>CA620906 JB March 17, 1978  7:36 PM</location>
	</document>
	<document id= '485'>
	<citations>
	<citation>1157	5	485</citation>
	<citation>485	5	485</citation>
	<citation>485	5	485</citation>
	<citation>485	5	485</citation>
	<citation>836	6	485</citation>
	<citation>1081	6	485</citation>
	<citation>485	6	485</citation>
	<citation>714	6	485</citation>
	</citations>
	<title>Real Error Function, ERF(x) (Algorithm 123)</title>
	<conference>CACM September, 1962</conference>
	<authors>
	<author>Crawford, M.</author>
	<author>Techo, R.</author>
	</authors>
	<location>CA620907 JB March 17, 1978  7:35 PM</location>
	</document>
	<document id= '484'>
	<citations>
	<citation>484	5	484</citation>
	<citation>484	5	484</citation>
	<citation>484	5	484</citation>
	</citations>
	<title>Hankel Function (Algorithm 124)</title>
	<conference>CACM September, 1962</conference>
	<authors>
	<author>Schaefer, L. J.</author>
	</authors>
	<location>CA620908 JB March 17, 1978  7:34 PM</location>
	</document>
	<document id= '483'>
	<title>On the Nonexistence of a Phrase Structure Grammar for ALGOL 60</title>
	<abstract>ALGOL 60 is defined partly by formal mechanisms of phrase structure grammar, partly by informally  stated restrictions.  It is shown that no formal mechanisms of the type used are sufficient to define  ALGOL 60.</abstract>
	<conference>CACM September, 1962</conference>
	<authors>
	<author>Floyd, R. W.</author>
	</authors>
	<location>CA620909 JB March 17, 1978  7:33 PM</location>
	<citations>
	<citation>249	4	483</citation>
	<citation>254	4	483</citation>
	<citation>272	4	483</citation>
	<citation>1102	4	483</citation>
	<citation>1109	4	483</citation>
	<citation>1140	4	483</citation>
	<citation>1188	4	483</citation>
	<citation>1306	4	483</citation>
	<citation>1464	4	483</citation>
	<citation>1491	4	483</citation>
	<citation>1767	4	483</citation>
	<citation>1781	4	483</citation>
	<citation>1787	4	483</citation>
	<citation>1949	4	483</citation>
	<citation>321	4	483</citation>
	<citation>2059	4	483</citation>
	<citation>2126	4	483</citation>
	<citation>435	4	483</citation>
	<citation>437	4	483</citation>
	<citation>463	4	483</citation>
	<citation>483	4	483</citation>
	<citation>491	4	483</citation>
	<citation>2732	4	483</citation>
	<citation>560	4	483</citation>
	<citation>583	4	483</citation>
	<citation>3073	4	483</citation>
	<citation>627	4	483</citation>
	<citation>631	4	483</citation>
	<citation>632	4	483</citation>
	<citation>642	4	483</citation>
	<citation>644	4	483</citation>
	<citation>653	4	483</citation>
	<citation>680	4	483</citation>
	<citation>761	4	483</citation>
	<citation>762	4	483</citation>
	<citation>763	4	483</citation>
	<citation>123	4	483</citation>
	<citation>140	4	483</citation>
	<citation>919	4	483</citation>
	<citation>989	4	483</citation>
	<citation>196	5	483</citation>
	<citation>949	5	483</citation>
	<citation>1102	5	483</citation>
	<citation>1142	5	483</citation>
	<citation>1781	5	483</citation>
	<citation>1945	5	483</citation>
	<citation>483	5	483</citation>
	<citation>483	5	483</citation>
	<citation>483	5	483</citation>
	<citation>762	5	483</citation>
	<citation>823	6	483</citation>
	<citation>123	6	483</citation>
	<citation>196	6	483</citation>
	<citation>196	6	483</citation>
	<citation>196	6	483</citation>
	<citation>914	6	483</citation>
	<citation>915	6	483</citation>
	<citation>917	6	483</citation>
	<citation>919	6	483</citation>
	<citation>984	6	483</citation>
	<citation>989	6	483</citation>
	<citation>990	6	483</citation>
	<citation>990	6	483</citation>
	<citation>1007	6	483</citation>
	<citation>1012	6	483</citation>
	<citation>1046	6	483</citation>
	<citation>1084	6	483</citation>
	<citation>1098	6	483</citation>
	<citation>1122	6	483</citation>
	<citation>1131	6	483</citation>
	<citation>1138	6	483</citation>
	<citation>1139	6	483</citation>
	<citation>1139	6	483</citation>
	<citation>1140	6	483</citation>
	<citation>1141	6	483</citation>
	<citation>1149	6	483</citation>
	<citation>1198	6	483</citation>
	<citation>1200	6	483</citation>
	<citation>1215	6	483</citation>
	<citation>1223	6	483</citation>
	<citation>1223	6	483</citation>
	<citation>1265	6	483</citation>
	<citation>1265	6	483</citation>
	<citation>1303	6	483</citation>
	<citation>1323	6	483</citation>
	<citation>1336	6	483</citation>
	<citation>1358	6	483</citation>
	<citation>1366	6	483</citation>
	<citation>1396	6	483</citation>
	<citation>1421	6	483</citation>
	<citation>1455	6	483</citation>
	<citation>1460	6	483</citation>
	<citation>1462	6	483</citation>
	<citation>1463	6	483</citation>
	<citation>1467	6	483</citation>
	<citation>1468	6	483</citation>
	<citation>1477	6	483</citation>
	<citation>1477	6	483</citation>
	<citation>1487	6	483</citation>
	<citation>1491	6	483</citation>
	<citation>1491	6	483</citation>
	<citation>1496	6	483</citation>
	<citation>1496	6	483</citation>
	<citation>1531	6	483</citation>
	<citation>1535	6	483</citation>
	<citation>1565	6	483</citation>
	<citation>1601	6	483</citation>
	<citation>1602	6	483</citation>
	<citation>1613	6	483</citation>
	<citation>1614	6	483</citation>
	<citation>1626	6	483</citation>
	<citation>1641	6	483</citation>
	<citation>1787	6	483</citation>
	<citation>1788	6	483</citation>
	<citation>205	6	483</citation>
	<citation>209	6	483</citation>
	<citation>210	6	483</citation>
	<citation>224	6	483</citation>
	<citation>249	6	483</citation>
	<citation>249	6	483</citation>
	<citation>288	6	483</citation>
	<citation>316	6	483</citation>
	<citation>381	6	483</citation>
	<citation>398	6	483</citation>
	<citation>11	6	483</citation>
	<citation>404	6	483</citation>
	<citation>406	6	483</citation>
	<citation>410	6	483</citation>
	<citation>463	6	483</citation>
	<citation>464	6	483</citation>
	<citation>483	6	483</citation>
	<citation>483	6	483</citation>
	<citation>483	6	483</citation>
	<citation>483	6	483</citation>
	<citation>483	6	483</citation>
	<citation>483	6	483</citation>
	<citation>3184	6	483</citation>
	<citation>3184	6	483</citation>
	<citation>3188	6	483</citation>
	<citation>584	6	483</citation>
	<citation>584	6	483</citation>
	<citation>584	6	483</citation>
	<citation>600	6	483</citation>
	<citation>669	6	483</citation>
	<citation>680	6	483</citation>
	<citation>680	6	483</citation>
	<citation>691	6	483</citation>
	<citation>763	6	483</citation>
	<citation>763	6	483</citation>
	<citation>799	6	483</citation>
	</citations>
	</document>
	<document id= '482'>
	<citations>
	<citation>482	5	482</citation>
	<citation>482	5	482</citation>
	<citation>482	5	482</citation>
	</citations>
	<title>TALL-A List Processor for the Philco 200 Computer</title>
	<conference>CACM September, 1962</conference>
	<authors>
	<author>Feldman, J.</author>
	</authors>
	<location>CA620910 JB March 17, 1978  7:31 PM</location>
	</document>
	<document id= '481'>
	<citations>
	<citation>481	5	481</citation>
	<citation>481	5	481</citation>
	<citation>481	5	481</citation>
	</citations>
	<title>A One-Day Look At Computing</title>
	<conference>CACM September, 1962</conference>
	<authors>
	<author>Armerding, G. W.</author>
	<author>Gruenberger, F. J.</author>
	<author>Marks, S. L.</author>
	<author>Parkin, T. R.</author>
	</authors>
	<location>CA620911 JB March 17, 1978  7:30 PM</location>
	</document>
	<document id= '480'>
	<citations>
	<citation>480	5	480</citation>
	<citation>480	5	480</citation>
	<citation>480	5	480</citation>
	</citations>
	<title>Quick Calculation of Jacobian Elliptic Functions (Corrigendum)</title>
	<conference>CACM September, 1962</conference>
	<authors>
	<author>Salzer, H. E.</author>
	</authors>
	<location>CA620912 JB March 17, 1978  7:28 PM</location>
	</document>
	<document id= '479'>
	<title>A Dispersion Pass Algorithm for the Polyphase Merge</title>
	<abstract>This paper presents a new manner of dispersing strings for a Polyphase merge.  If the number  of strings dispersed is between two levels acceptable by Polyphase merge, a more economical technique  of reaching the next level for Polyphase merge is shown and proved.</abstract>
	<conference>CACM October, 1962</conference>
	<authors>
	<author>Mendoza, A. G.</author>
	</authors>
	<location>CA621001 JB March 17, 1978  7:27 PM</location>
	<citations>
	<citation>2146	4	479</citation>
	<citation>479	4	479</citation>
	<citation>479	4	479</citation>
	<citation>862	4	479</citation>
	<citation>863	4	479</citation>
	<citation>264	5	479</citation>
	<citation>299	5	479</citation>
	<citation>479	5	479</citation>
	<citation>479	5	479</citation>
	<citation>479	5	479</citation>
	<citation>860	5	479</citation>
	<citation>862	5	479</citation>
	<citation>861	6	479</citation>
	<citation>299	6	479</citation>
	<citation>479	6	479</citation>
	<citation>479	6	479</citation>
	</citations>
	</document>
	<document id= '478'>
	<citations>
	<citation>478	5	478</citation>
	<citation>478	5	478</citation>
	<citation>478	5	478</citation>
	</citations>
	<title>Implementing a Stack</title>
	<conference>CACM October, 1962</conference>
	<authors>
	<author>Baecker, H.D.</author>
	</authors>
	<location>CA621002 JB March 17, 1978  7:25 PM</location>
	</document>
	<document id= '477'>
	<citations>
	<citation>477	4	477</citation>
	<citation>6	5	477</citation>
	<citation>477	5	477</citation>
	<citation>477	5	477</citation>
	<citation>477	5	477</citation>
	</citations>
	<title>Further Remarks on Sampling a Tape File-I</title>
	<conference>CACM October, 1962</conference>
	<authors>
	<author>Muller, M. E.</author>
	</authors>
	<location>CA621003 JB March 17, 1978  7:23 PM</location>
	</document>
	<document id= '476'>
	<citations>
	<citation>476	5	476</citation>
	<citation>476	5	476</citation>
	<citation>476	5	476</citation>
	</citations>
	<title>Further Remarks on Sampling a Tape File-II</title>
	<conference>CACM October, 1962</conference>
	<authors>
	<author>Nadler, M.</author>
	</authors>
	<location>CA621004 JB March 17, 1978  7:22 PM</location>
	</document>
	<document id= '475'>
	<citations>
	<citation>1963	5	475</citation>
	<citation>475	5	475</citation>
	<citation>475	5	475</citation>
	<citation>475	5	475</citation>
	<citation>909	6	475</citation>
	<citation>475	6	475</citation>
	<citation>750	6	475</citation>
	</citations>
	<title>A Test Matrix for Inversion Procedures</title>
	<conference>CACM October, 1962</conference>
	<authors>
	<author>Pei, M. L.</author>
	</authors>
	<location>CA621005 JB March 17, 1978  7:21 PM</location>
	</document>
	<document id= '474'>
	<citations>
	<citation>1053	5	474</citation>
	<citation>474	5	474</citation>
	<citation>474	5	474</citation>
	<citation>474	5	474</citation>
	<citation>720	5	474</citation>
	<citation>265	6	474</citation>
	<citation>435	6	474</citation>
	<citation>464	6	474</citation>
	<citation>474	6	474</citation>
	<citation>474	6	474</citation>
	<citation>718	6	474</citation>
	<citation>720	6	474</citation>
	</citations>
	<title>Input Data Organization in Fortran</title>
	<conference>CACM October, 1962</conference>
	<authors>
	<author>Yarbrough, L.D.</author>
	</authors>
	<location>CA621006 JB March 17, 1978  7:20 PM</location>
	</document>
	<document id= '473'>
	<citations>
	<citation>473	5	473</citation>
	<citation>473	5	473</citation>
	<citation>473	5	473</citation>
	</citations>
	<title>WEIGHTCOEFF (Algorithm 125)</title>
	<conference>CACM October, 1962</conference>
	<authors>
	<author>Rutishauser, H.</author>
	</authors>
	<location>CA621007 JB March 17, 1978  7:19 PM</location>
	</document>
	<document id= '472'>
	<citations>
	<citation>2075	5	472</citation>
	<citation>472	5	472</citation>
	<citation>472	5	472</citation>
	<citation>472	5	472</citation>
	<citation>472	6	472</citation>
	</citations>
	<title>Gauss' Method (Algorithm 126)</title>
	<conference>CACM October, 1962</conference>
	<authors>
	<author>Counts, J. W.</author>
	</authors>
	<location>CA621008 JB March 17, 1978  7:18 PM</location>
	</document>
	<document id= '471'>
	<citations>
	<citation>471	5	471</citation>
	<citation>471	5	471</citation>
	<citation>471	5	471</citation>
	</citations>
	<title>ORTHO (Algorithm 127)</title>
	<conference>CACM October, 1962</conference>
	<authors>
	<author>Walsh, P. J.</author>
	</authors>
	<location>CA621009 JB March 17, 1978  7:17 PM</location>
	</document>
	<document id= '470'>
	<citations>
	<citation>470	5	470</citation>
	<citation>470	5	470</citation>
	<citation>470	5	470</citation>
	</citations>
	<title>Summation of Fourier Series (Algorithm 128)</title>
	<conference>CACM October, 1962</conference>
	<authors>
	<author>Wells, M.</author>
	</authors>
	<location>CA621010 JB March 17, 1978  7:16 PM</location>
	</document>
	<document id= '469'>
	<citations>
	<citation>469	5	469</citation>
	<citation>469	5	469</citation>
	<citation>469	5	469</citation>
	</citations>
	<title>Critical Path Scheduling (Algorithm 40)</title>
	<conference>CACM October, 1962</conference>
	<authors>
	<author>Hellberg, L.</author>
	</authors>
	<location>CA621011 JB March 17, 1978  7:15 PM</location>
	</document>
	<document id= '468'>
	<citations>
	<citation>468	5	468</citation>
	<citation>468	5	468</citation>
	<citation>468	5	468</citation>
	</citations>
	<title>Incomplete Elliptic Integrals (Algorithm 73)</title>
	<conference>CACM October, 1962</conference>
	<authors>
	<author>Jefferson, D. K.</author>
	</authors>
	<location>CA621012 JB March 17, 1978  7:14 PM</location>
	</document>
	<document id= '467'>
	<citations>
	<citation>467	5	467</citation>
	<citation>467	5	467</citation>
	<citation>467	5	467</citation>
	</citations>
	<title>Permutation Generator (Algorithm 87)</title>
	<conference>CACM October, 1962</conference>
	<authors>
	<author>Schrack, G. F.</author>
	<author>Shimrat, M.</author>
	</authors>
	<location>CA621013 JB March 17, 1978  7:14 PM</location>
	</document>
	<document id= '466'>
	<citations>
	<citation>466	5	466</citation>
	<citation>466	5	466</citation>
	<citation>466	5	466</citation>
	</citations>
	<title>General Order Arithmetic (Algorithm 93)</title>
	<conference>CACM October, 1962</conference>
	<authors>
	<author>George, R.</author>
	</authors>
	<location>CA621014 JB March 17, 1978  7:13 PM</location>
	</document>
	<document id= '465'>
	<citations>
	<citation>465	5	465</citation>
	<citation>465	5	465</citation>
	<citation>465	5	465</citation>
	</citations>
	<title>PERM (Algorithm 115)</title>
	<conference>CACM October, 1962</conference>
	<authors>
	<author>Schrack, G. F.</author>
	</authors>
	<location>CA621015 JB March 17, 1978  7:12 PM</location>
	</document>
	<document id= '464'>
	<title>Syntactic Analysis by Digital Computer</title>
	<abstract>This paper provides an account of the Shadow language that is used to describe syntax and of  a corresponding subroutine that enables a computer to perform syntactic analysis.  The input to this  subroutine consists of a string to be analyzed and a description of the syntax that is to be used.  The  syntax is expressed in the Shadow language.  The output consists of a trace table that expresses the  results of the syntactic analysis in a tabular form.  Several versions of the subroutine and some associated  programs have been in use now for over three years.  The present account of the language and the subroutine  contains a summary of material that has been described previously in unpublished reports and also some  additional discussion of the work in relation to the more general questions of problem-oriented languages  and string transformations.</abstract>
	<conference>CACM October, 1962</conference>
	<authors>
	<author>Barnett, M. P.</author>
	<author>Futrelle, R. P.</author>
	</authors>
	<location>CA621016 JB March 17, 1978  7:11 PM</location>
	<citations>
	<citation>1046	4	464</citation>
	<citation>1105	4	464</citation>
	<citation>1139	4	464</citation>
	<citation>1140	4	464</citation>
	<citation>1234	4	464</citation>
	<citation>1263	4	464</citation>
	<citation>1265	4	464</citation>
	<citation>1496	4	464</citation>
	<citation>1781	4	464</citation>
	<citation>1824	4	464</citation>
	<citation>2126	4	464</citation>
	<citation>2546	4	464</citation>
	<citation>464	4	464</citation>
	<citation>464	4	464</citation>
	<citation>584	4	464</citation>
	<citation>631	4	464</citation>
	<citation>653	4	464</citation>
	<citation>680	4	464</citation>
	<citation>720	4	464</citation>
	<citation>763	4	464</citation>
	<citation>795	4	464</citation>
	<citation>799	4	464</citation>
	<citation>945	4	464</citation>
	<citation>1062	5	464</citation>
	<citation>1121	5	464</citation>
	<citation>1139	5	464</citation>
	<citation>1265	5	464</citation>
	<citation>265	5	464</citation>
	<citation>1781	5	464</citation>
	<citation>404	5	464</citation>
	<citation>464	5	464</citation>
	<citation>464	5	464</citation>
	<citation>464	5	464</citation>
	<citation>720	5	464</citation>
	<citation>759	5	464</citation>
	<citation>123	6	464</citation>
	<citation>196	6	464</citation>
	<citation>919	6	464</citation>
	<citation>990	6	464</citation>
	<citation>1007	6	464</citation>
	<citation>1046	6	464</citation>
	<citation>1131	6	464</citation>
	<citation>1139	6	464</citation>
	<citation>1140	6	464</citation>
	<citation>1149	6	464</citation>
	<citation>1198	6	464</citation>
	<citation>1215	6	464</citation>
	<citation>1223	6	464</citation>
	<citation>1265	6	464</citation>
	<citation>1303	6	464</citation>
	<citation>1323	6	464</citation>
	<citation>1358	6	464</citation>
	<citation>1366	6	464</citation>
	<citation>1421	6	464</citation>
	<citation>1460	6	464</citation>
	<citation>1462	6	464</citation>
	<citation>1463	6	464</citation>
	<citation>1467	6	464</citation>
	<citation>1468	6	464</citation>
	<citation>1477	6	464</citation>
	<citation>1491	6	464</citation>
	<citation>1496	6	464</citation>
	<citation>1531	6	464</citation>
	<citation>1535	6	464</citation>
	<citation>1565	6	464</citation>
	<citation>1601	6	464</citation>
	<citation>1602	6	464</citation>
	<citation>1613	6	464</citation>
	<citation>1614	6	464</citation>
	<citation>1626	6	464</citation>
	<citation>1641	6	464</citation>
	<citation>1787	6	464</citation>
	<citation>1788	6	464</citation>
	<citation>205	6	464</citation>
	<citation>224	6	464</citation>
	<citation>224	6	464</citation>
	<citation>249	6	464</citation>
	<citation>265	6	464</citation>
	<citation>288	6	464</citation>
	<citation>316	6	464</citation>
	<citation>381	6	464</citation>
	<citation>398	6	464</citation>
	<citation>399	6	464</citation>
	<citation>11	6	464</citation>
	<citation>404	6	464</citation>
	<citation>404	6	464</citation>
	<citation>404	6	464</citation>
	<citation>410	6	464</citation>
	<citation>438	6	464</citation>
	<citation>463	6	464</citation>
	<citation>464	6	464</citation>
	<citation>464	6	464</citation>
	<citation>464	6	464</citation>
	<citation>464	6	464</citation>
	<citation>464	6	464</citation>
	<citation>464	6	464</citation>
	<citation>464	6	464</citation>
	<citation>474	6	464</citation>
	<citation>483	6	464</citation>
	<citation>3184	6	464</citation>
	<citation>3184	6	464</citation>
	<citation>3188	6	464</citation>
	<citation>584	6	464</citation>
	<citation>600	6	464</citation>
	<citation>631	6	464</citation>
	<citation>631	6	464</citation>
	<citation>635	6	464</citation>
	<citation>680	6	464</citation>
	<citation>691	6	464</citation>
	<citation>759	6	464</citation>
	<citation>763	6	464</citation>
	<citation>794	6	464</citation>
	<citation>799	6	464</citation>
	</citations>
	</document>
	<document id= '463'>
	<citations>
	<citation>249	4	463</citation>
	<citation>254	4	463</citation>
	<citation>272	4	463</citation>
	<citation>1102	4	463</citation>
	<citation>1109	4	463</citation>
	<citation>1140	4	463</citation>
	<citation>1188	4	463</citation>
	<citation>1306	4	463</citation>
	<citation>1464	4	463</citation>
	<citation>1491	4	463</citation>
	<citation>1767	4	463</citation>
	<citation>1781	4	463</citation>
	<citation>1787	4	463</citation>
	<citation>1949	4	463</citation>
	<citation>321	4	463</citation>
	<citation>2059	4	463</citation>
	<citation>2126	4	463</citation>
	<citation>435	4	463</citation>
	<citation>437	4	463</citation>
	<citation>463	4	463</citation>
	<citation>483	4	463</citation>
	<citation>491	4	463</citation>
	<citation>2732	4	463</citation>
	<citation>560	4	463</citation>
	<citation>583	4	463</citation>
	<citation>3073	4	463</citation>
	<citation>627	4	463</citation>
	<citation>631	4	463</citation>
	<citation>632	4	463</citation>
	<citation>642	4	463</citation>
	<citation>644	4	463</citation>
	<citation>653	4	463</citation>
	<citation>680	4	463</citation>
	<citation>761	4	463</citation>
	<citation>762	4	463</citation>
	<citation>763	4	463</citation>
	<citation>123	4	463</citation>
	<citation>140	4	463</citation>
	<citation>919	4	463</citation>
	<citation>989	4	463</citation>
	<citation>196	5	463</citation>
	<citation>1306	5	463</citation>
	<citation>1781	5	463</citation>
	<citation>463	5	463</citation>
	<citation>463	5	463</citation>
	<citation>463	5	463</citation>
	<citation>123	6	463</citation>
	<citation>196	6	463</citation>
	<citation>196	6	463</citation>
	<citation>919	6	463</citation>
	<citation>990	6	463</citation>
	<citation>1007	6	463</citation>
	<citation>1046	6	463</citation>
	<citation>1131	6	463</citation>
	<citation>1139	6	463</citation>
	<citation>1140	6	463</citation>
	<citation>1149	6	463</citation>
	<citation>1198	6	463</citation>
	<citation>1215	6	463</citation>
	<citation>1223	6	463</citation>
	<citation>1265	6	463</citation>
	<citation>1303	6	463</citation>
	<citation>1323	6	463</citation>
	<citation>1358	6	463</citation>
	<citation>1366	6	463</citation>
	<citation>1421	6	463</citation>
	<citation>1460	6	463</citation>
	<citation>1462	6	463</citation>
	<citation>1463	6	463</citation>
	<citation>1467	6	463</citation>
	<citation>1468	6	463</citation>
	<citation>1477	6	463</citation>
	<citation>1491	6	463</citation>
	<citation>1496	6	463</citation>
	<citation>1531	6	463</citation>
	<citation>1535	6	463</citation>
	<citation>1565	6	463</citation>
	<citation>1601	6	463</citation>
	<citation>1602	6	463</citation>
	<citation>1613	6	463</citation>
	<citation>1614	6	463</citation>
	<citation>1626	6	463</citation>
	<citation>1641	6	463</citation>
	<citation>1787	6	463</citation>
	<citation>1788	6	463</citation>
	<citation>205	6	463</citation>
	<citation>224	6	463</citation>
	<citation>249	6	463</citation>
	<citation>288	6	463</citation>
	<citation>316	6	463</citation>
	<citation>381	6	463</citation>
	<citation>398	6	463</citation>
	<citation>11	6	463</citation>
	<citation>404	6	463</citation>
	<citation>410	6	463</citation>
	<citation>463	6	463</citation>
	<citation>463	6	463</citation>
	<citation>464	6	463</citation>
	<citation>483	6	463</citation>
	<citation>3184	6	463</citation>
	<citation>3188	6	463</citation>
	<citation>584	6	463</citation>
	<citation>600	6	463</citation>
	<citation>680	6	463</citation>
	<citation>691	6	463</citation>
	<citation>763	6	463</citation>
	<citation>799	6	463</citation>
	</citations>
	<title>On Ambiguity in Phrase Structure Languages</title>
	<conference>CACM October, 1962</conference>
	<authors>
	<author>Floyd, R. W.</author>
	</authors>
	<location>CA621017 JB March 17, 1978  7:05 PM</location>
	</document>
	<document id= '462'>
	<title>Computer Pattern Recognition Techniques: Electrocardiographic Diagnosis</title>
	<abstract>The use of programmed digital computers as general pattern classification and recognition devices  is one phase of the current lively interest in artificial intelligence.  It is important to choose a  class of signals which is, at present, undergoing a good deal of visual inspection by trained people  for the purpose of pattern recognition.  In this way comparisons between machine and human performance  may be obtained.  A practical result also serves as additional motivation.  Clinical electrocardiograms  make up such a class of signals.  The approach to the problem presented here centers upon the use of  multiple adaptive matched filters that classify normalized signals.  The present report fives some of  the background for the application of this method.</abstract>
	<conference>CACM October, 1962</conference>
	<authors>
	<author>Okajima, M.</author>
	<author>Whipple, G. H.</author>
	</authors>
	<location>CA621018 JB March 17, 1978  7:04 PM</location>
	<citations>
	<citation>1325	5	462</citation>
	<citation>462	5	462</citation>
	<citation>462	5	462</citation>
	<citation>462	5	462</citation>
	<citation>462	6	462</citation>
	</citations>
	</document>
	<document id= '461'>
	<citations>
	<citation>461	5	461</citation>
	<citation>461	5	461</citation>
	<citation>461	5	461</citation>
	</citations>
	<title>Coding of Medical Case History Data for Computer Analysis</title>
	<conference>CACM October, 1962</conference>
	<authors>
	<author>Lipkin, M.</author>
	<author>Woodbury, M. A.</author>
	</authors>
	<location>CA621019 JB March 17, 1978  6:59 PM</location>
	</document>
	<document id= '460'>
	<citations>
	<citation>460	5	460</citation>
	<citation>460	5	460</citation>
	<citation>460	5	460</citation>
	</citations>
	<title>MINIFUN (Algorithm 129)</title>
	<conference>CACM November, 1962</conference>
	<authors>
	<author>Whitley, V. W.</author>
	</authors>
	<location>CA621101 JB March 17, 1978  6:58 PM</location>
	</document>
	<document id= '459'>
	<citations>
	<citation>459	5	459</citation>
	<citation>459	5	459</citation>
	<citation>459	5	459</citation>
	</citations>
	<title>PERMUTE (Algorithm 130)</title>
	<conference>CACM November, 1962</conference>
	<authors>
	<author>Eaves, Lt. B. C.</author>
	</authors>
	<location>CA621102 JB March 17, 1978  6:57 PM</location>
	</document>
	<document id= '458'>
	<citations>
	<citation>458	5	458</citation>
	<citation>458	5	458</citation>
	<citation>458	5	458</citation>
	</citations>
	<title>Coefficient Determination (Algorithm 131)</title>
	<conference>CACM November, 1962</conference>
	<authors>
	<author>Smith, V. H.</author>
	<author>Allen, M. L.</author>
	</authors>
	<location>CA621103 JB March 17, 1978  6:56 PM</location>
	</document>
	<document id= '457'>
	<citations>
	<citation>457	5	457</citation>
	<citation>457	5	457</citation>
	<citation>457	5	457</citation>
	</citations>
	<title>Quantum Mechanical Integrals Over all Slater-Type Integrals</title>
	<conference>CACM November, 1962</conference>
	<authors>
	<author>Browne, J. C.</author>
	</authors>
	<location>CA621104 JB March 17, 1978  6:54 PM</location>
	</document>
	<document id= '456'>
	<citations>
	<citation>1190	5	456</citation>
	<citation>456	5	456</citation>
	<citation>456	5	456</citation>
	<citation>456	5	456</citation>
	<citation>456	6	456</citation>
	</citations>
	<title>RANDOM (Algorithm 133)</title>
	<conference>CACM November, 1962</conference>
	<authors>
	<author>Behrenz, P. G.</author>
	</authors>
	<location>CA621105 JB March 17, 1978  6:53 PM</location>
	</document>
	<document id= '455'>
	<citations>
	<citation>455	5	455</citation>
	<citation>455	5	455</citation>
	<citation>455	5	455</citation>
	</citations>
	<title>Exponentiation of Series (Algorithm 134)</title>
	<conference>CACM November, 1962</conference>
	<authors>
	<author>Fettis, H. E.</author>
	</authors>
	<location>CA621106 JB March 17, 1978  6:52 PM</location>
	</document>
	<document id= '454'>
	<citations>
	<citation>1319	4	454</citation>
	<citation>454	4	454</citation>
	<citation>454	4	454</citation>
	<citation>140	4	454</citation>
	<citation>152	5	454</citation>
	<citation>1177	5	454</citation>
	<citation>454	5	454</citation>
	<citation>454	5	454</citation>
	<citation>454	5	454</citation>
	<citation>586	5	454</citation>
	<citation>806	5	454</citation>
	<citation>932	6	454</citation>
	<citation>454	6	454</citation>
	<citation>454	6	454</citation>
	</citations>
	<title>Crout with Equilibration and Iteration (Algorithm 135)</title>
	<conference>CACM November, 1962</conference>
	<authors>
	<author>McKeeman, W. M.</author>
	</authors>
	<location>CA621107 JB March 17, 1978  6:51 PM</location>
	</document>
	<document id= '453'>
	<citations>
	<citation>453	5	453</citation>
	<citation>453	5	453</citation>
	<citation>453	5	453</citation>
	</citations>
	<title>Enlargement of a Group (Algorithm 136)</title>
	<conference>CACM November, 1962</conference>
	<authors>
	<author>Wells, M.</author>
	</authors>
	<location>CA621108 JB March 17, 1978  6:17 PM</location>
	</document>
	<document id= '452'>
	<citations>
	<citation>452	5	452</citation>
	<citation>452	5	452</citation>
	<citation>452	5	452</citation>
	</citations>
	<title>Nesting of for Statement I (Algorithm 137)</title>
	<conference>CACM November, 1962</conference>
	<authors>
	<author>Dahm, D. M.</author>
	<author>Wells, M.</author>
	</authors>
	<location>CA621109 JB March 17, 1978  6:15 PM</location>
	</document>
	<document id= '451'>
	<citations>
	<citation>451	5	451</citation>
	<citation>451	5	451</citation>
	<citation>451	5	451</citation>
	</citations>
	<title>Nesting of for Statement II (Algorithm 138)</title>
	<conference>CACM November, 1962</conference>
	<authors>
	<author>Dahm, D. M.</author>
	<author>Wells, M.</author>
	</authors>
	<location>CA621110 JB March 17, 1978  6:14 PM</location>
	</document>
	<document id= '450'>
	<citations>
	<citation>2031	5	450</citation>
	<citation>450	5	450</citation>
	<citation>450	5	450</citation>
	<citation>450	5	450</citation>
	<citation>1022	6	450</citation>
	<citation>450	6	450</citation>
	</citations>
	<title>Solution of the Diophantine Equation (Algorithm 139)</title>
	<conference>CACM November, 1962</conference>
	<authors>
	<author>Peck, J. E. L.</author>
	</authors>
	<location>CA621111 JB March 17, 1978  6:13 PM</location>
	</document>
	<document id= '449'>
	<citations>
	<citation>449	5	449</citation>
	<citation>449	5	449</citation>
	<citation>449	5	449</citation>
	</citations>
	<title>Matrix Inversion(Algorithm 140)</title>
	<conference>CACM November, 1962</conference>
	<authors>
	<author>Ingerman, P. Z.</author>
	</authors>
	<location>CA621112 JB March 17, 1978 6:12 PM</location>
	</document>
	<document id= '448'>
	<citations>
	<citation>448	5	448</citation>
	<citation>448	5	448</citation>
	<citation>448	5	448</citation>
	</citations>
	<title>Path Matrix (Algorithm 141)</title>
	<conference>CACM November, 1962</conference>
	<authors>
	<author>Ingerman, P. Z.</author>
	</authors>
	<location>CA621113 JB March 17, 1978  6:06 PM</location>
	</document>
	<document id= '447'>
	<citations>
	<citation>447	5	447</citation>
	<citation>447	5	447</citation>
	<citation>447	5	447</citation>
	</citations>
	<title>Certification of the Calculation of Easter</title>
	<conference>CACM November, 1962</conference>
	<authors>
	<author>Williams, M. R.</author>
	</authors>
	<location>CA621114 JB March 17, 1978  6:05 PM</location>
	</document>
	<document id= '446'>
	<citations>
	<citation>446	5	446</citation>
	<citation>446	5	446</citation>
	<citation>446	5	446</citation>
	</citations>
	<title>Simpson's Integration (Algorithm 84)</title>
	<conference>CACM November, 1962</conference>
	<authors>
	<author>Behrenz, P. G.</author>
	</authors>
	<location>CA621115 JB March 17, 1978  6:04 PM</location>
	</document>
	<document id= '445'>
	<citations>
	<citation>445	5	445</citation>
	<citation>445	5	445</citation>
	<citation>445	5	445</citation>
	</citations>
	<title>COMBINATION (Algorithm 94)</title>
	<conference>CACM November, 1962</conference>
	<authors>
	<author>May, R. W.</author>
	</authors>
	<location>CA621116 JB March 17, 1978  6:03 PM</location>
	</document>
	<document id= '444'>
	<citations>
	<citation>444	5	444</citation>
	<citation>444	5	444</citation>
	<citation>444	5	444</citation>
	</citations>
	<title>Evaluation of Jacobi Symbol (Algorithm 99)</title>
	<conference>CACM November, 1962</conference>
	<authors>
	<author>May, R. W.</author>
	</authors>
	<location>CA621117 JB March 17, 1978  6:02 PM</location>
	</document>
	<document id= '443'>
	<citations>
	<citation>443	5	443</citation>
	<citation>443	5	443</citation>
	<citation>443	5	443</citation>
	</citations>
	<title>Complex Number to a Real Power (Algorithm 106)</title>
	<conference>CACM December, 1962</conference>
	<authors>
	</authors>
	<location>CA621118 JB March 17, 1978  6:01 PM</location>
	</document>
	<document id= '442'>
	<citations>
	<citation>442	5	442</citation>
	<citation>442	5	442</citation>
	<citation>442	5	442</citation>
	</citations>
	<title>Crout with Equilibration and Iteration (Algorithm 135)</title>
	<conference>CACM November, 1962</conference>
	<authors>
	<author>McKeeman, W. M.</author>
	</authors>
	<location>CA621119 JB March 17, 1978  5:59 PM</location>
	</document>
	<document id= '441'>
	<title>Topological Sorting of Large Networks</title>
	<abstract>Topological Sorting is a procedure required for many problems involving analysis of networks.   An example of one such problem is PERT.  The present paper presents a very general method for obtaining  topological order.  It permits treatment of larger networks than can be handled on present procedures  and achieves this with greater efficiency.  Although the procedure can be adapted to any machine, it  is discussed in terms of the 7090.  A PERT network of 30,000 activities can be ordered in less than one  hour of machine time.  The method was developed as a byproduct of procedures needed by Westinghouse,  Baltimore.  It has not been programmed and at present there are no plans to implement it.  In regard  to the techniques described, Westinghouse's present and anticipated needs are completely served by the  Lockheed program, which is in current use.</abstract>
	<conference>CACM November, 1962</conference>
	<authors>
	<author>Kahn, A. B.</author>
	</authors>
	<location>CA621120 JB March 17, 1978  5:58 PM</location>
	<citations>
	<citation>1050	4	441</citation>
	<citation>1226	4	441</citation>
	<citation>441	4	441</citation>
	<citation>758	4	441</citation>
	<citation>1723	5	441</citation>
	<citation>367	5	441</citation>
	<citation>441	5	441</citation>
	<citation>441	5	441</citation>
	<citation>441	5	441</citation>
	<citation>758	5	441</citation>
	<citation>367	6	441</citation>
	<citation>441	6	441</citation>
	<citation>441	6	441</citation>
	</citations>
	</document>
	<document id= '440'>
	<title>Record Linkage</title>
	<abstract>Special difficulties are encountered in devising reliable systems for searching and updating  any large files of documents that must be identified primarily on the basis of names and other personal  particulars.  The underlying problem is that of making nearly maximum use of items of identifying information  that are individually unreliable but that may collectively be of considerable discriminating power.   Rules that can be applied generally to name retrieval systems have been developed in a methodological  study of the linkage of vital and health records into family groupings for demographic research purposes.   These rules are described, and the ways in which information utilization for matching may be optimized  are discussed.</abstract>
	<conference>CACM November, 1962</conference>
	<authors>
	<author>Newcombe, H. B.</author>
	<author>Kennedy, J. M.</author>
	</authors>
	<location>CA621121 JB March 17, 1978  5:51 PM</location>
	<citations>
	<citation>1112	4	440</citation>
	<citation>1592	4	440</citation>
	<citation>2111	4	440</citation>
	<citation>2339	4	440</citation>
	<citation>440	4	440</citation>
	<citation>2339	5	440</citation>
	<citation>440	5	440</citation>
	<citation>440	5	440</citation>
	<citation>440	5	440</citation>
	<citation>619	5	440</citation>
	<citation>1112	6	440</citation>
	<citation>1592	6	440</citation>
	<citation>440	6	440</citation>
	<citation>619	6	440</citation>
	</citations>
	</document>
	<document id= '439'>
	<citations>
	<citation>439	5	439</citation>
	<citation>439	5	439</citation>
	<citation>439	5	439</citation>
	</citations>
	<title>On-Line Digital Computer for Measurement of a Neurological Control System</title>
	<conference>CACM November, 1962</conference>
	<authors>
	<author>Stark, L.</author>
	<author>Payne, R.</author>
	<author>Okabe, Y.</author>
	</authors>
	<location>CA621122 JB March 17, 1978 5:20 PM</location>
	</document>
	<document id= '438'>
	<citations>
	<citation>249	4	438</citation>
	<citation>267	4	438</citation>
	<citation>1134	4	438</citation>
	<citation>1139	4	438</citation>
	<citation>1141	4	438</citation>
	<citation>1141	4	438</citation>
	<citation>1215	4	438</citation>
	<citation>1223	4	438</citation>
	<citation>1425	4	438</citation>
	<citation>1647	4	438</citation>
	<citation>1781	4	438</citation>
	<citation>1781	4	438</citation>
	<citation>1787	4	438</citation>
	<citation>1792	4	438</citation>
	<citation>364	4	438</citation>
	<citation>364	4	438</citation>
	<citation>405	4	438</citation>
	<citation>405	4	438</citation>
	<citation>438	4	438</citation>
	<citation>438	4	438</citation>
	<citation>438	4	438</citation>
	<citation>438	4	438</citation>
	<citation>561	4	438</citation>
	<citation>44	4	438</citation>
	<citation>3185	4	438</citation>
	<citation>762	4	438</citation>
	<citation>763	4	438</citation>
	<citation>1139	5	438</citation>
	<citation>224	5	438</citation>
	<citation>249	5	438</citation>
	<citation>303	5	438</citation>
	<citation>438	5	438</citation>
	<citation>438	5	438</citation>
	<citation>438	5	438</citation>
	<citation>77	5	438</citation>
	<citation>3185	5	438</citation>
	<citation>224	6	438</citation>
	<citation>303	6	438</citation>
	<citation>399	6	438</citation>
	<citation>404	6	438</citation>
	<citation>438	6	438</citation>
	<citation>438	6	438</citation>
	<citation>464	6	438</citation>
	<citation>631	6	438</citation>
	</citations>
	<title>Mechanical Pragmatics: A Time-Motion Study of a Miniature Mechanical Linguistic System</title>
	<conference>CACM December, 1962</conference>
	<authors>
	<author>Gorn, S.</author>
	</authors>
	<location>CA621201 JB March 17, 1978  5:19 PM</location>
	</document>
	<document id= '437'>
	<citations>
	<citation>249	4	437</citation>
	<citation>254	4	437</citation>
	<citation>272	4	437</citation>
	<citation>1102	4	437</citation>
	<citation>1109	4	437</citation>
	<citation>1140	4	437</citation>
	<citation>1188	4	437</citation>
	<citation>1306	4	437</citation>
	<citation>1464	4	437</citation>
	<citation>1491	4	437</citation>
	<citation>1767	4	437</citation>
	<citation>1781	4	437</citation>
	<citation>1787	4	437</citation>
	<citation>1949	4	437</citation>
	<citation>321	4	437</citation>
	<citation>2059	4	437</citation>
	<citation>2126	4	437</citation>
	<citation>435	4	437</citation>
	<citation>437	4	437</citation>
	<citation>463	4	437</citation>
	<citation>483	4	437</citation>
	<citation>491	4	437</citation>
	<citation>2732	4	437</citation>
	<citation>560	4	437</citation>
	<citation>583	4	437</citation>
	<citation>3073	4	437</citation>
	<citation>627	4	437</citation>
	<citation>631	4	437</citation>
	<citation>632	4	437</citation>
	<citation>642	4	437</citation>
	<citation>644	4	437</citation>
	<citation>653	4	437</citation>
	<citation>680	4	437</citation>
	<citation>761	4	437</citation>
	<citation>762	4	437</citation>
	<citation>763	4	437</citation>
	<citation>123	4	437</citation>
	<citation>140	4	437</citation>
	<citation>919	4	437</citation>
	<citation>989	4	437</citation>
	<citation>196	5	437</citation>
	<citation>1614	5	437</citation>
	<citation>2253	5	437</citation>
	<citation>2557	5	437</citation>
	<citation>437	5	437</citation>
	<citation>437	5	437</citation>
	<citation>437	5	437</citation>
	<citation>2081	6	437</citation>
	<citation>437	6	437</citation>
	<citation>437	6	437</citation>
	<citation>437	6	437</citation>
	<citation>3184	6	437</citation>
	</citations>
	<title>Compiling Matrix Operations</title>
	<conference>CACM December, 1962</conference>
	<authors>
	<author>Galler, B. A.</author>
	<author>Perlis, A. J.</author>
	</authors>
	<location>CA621202 JB March 17, 1978  5:17 PM</location>
	</document>
	<document id= '436'>
	<citations>
	<citation>1223	4	436</citation>
	<citation>1388	4	436</citation>
	<citation>436	4	436</citation>
	<citation>1620	5	436</citation>
	<citation>405	5	436</citation>
	<citation>436	5	436</citation>
	<citation>436	5	436</citation>
	<citation>436	5	436</citation>
	<citation>819	5	436</citation>
	<citation>819	6	436</citation>
	<citation>436	6	436</citation>
	<citation>436	6	436</citation>
	</citations>
	<title>Evaluation of Polynomials by Computer</title>
	<conference>CACM December, 1962</conference>
	<authors>
	<author>Knuth, D. E.</author>
	</authors>
	<location>CA621203 JB March 17, 1978  5:16 PM</location>
	</document>
	<document id= '435'>
	<title>A Decision Matrix as the Basis for a Simple Data Input Routine</title>
	<abstract>Currently a great deal of time and effort is being spent on the development of bigger and better  compiler languages, multiprogram executive systems, etc.  Since the implementation of  of new methods  and procedures is not instantaneous, but rather occurs by an evolutionary process, we should be concerned  also with the problem of maintaining, improving and incorporating new ideas into existing systems.  It  is with this somewhat neglected area that the author is interested.  A method employing a decision matrix  is presented for the handling of a standard systems programming problem,that of providing a data input  routine.</abstract>
	<conference>CACM December, 1962</conference>
	<authors>
	<author>Vasilakos, G. J.</author>
	</authors>
	<location>CA621204 JB March 17, 1978  5:15 PM</location>
	<citations>
	<citation>249	4	435</citation>
	<citation>254	4	435</citation>
	<citation>272	4	435</citation>
	<citation>1102	4	435</citation>
	<citation>1109	4	435</citation>
	<citation>1140	4	435</citation>
	<citation>1188	4	435</citation>
	<citation>1306	4	435</citation>
	<citation>1464	4	435</citation>
	<citation>1491	4	435</citation>
	<citation>1767	4	435</citation>
	<citation>1781	4	435</citation>
	<citation>1787	4	435</citation>
	<citation>1949	4	435</citation>
	<citation>321	4	435</citation>
	<citation>2059	4	435</citation>
	<citation>2126	4	435</citation>
	<citation>435	4	435</citation>
	<citation>435	4	435</citation>
	<citation>437	4	435</citation>
	<citation>463	4	435</citation>
	<citation>483	4	435</citation>
	<citation>491	4	435</citation>
	<citation>2732	4	435</citation>
	<citation>560	4	435</citation>
	<citation>583	4	435</citation>
	<citation>3073	4	435</citation>
	<citation>627	4	435</citation>
	<citation>631	4	435</citation>
	<citation>632	4	435</citation>
	<citation>642	4	435</citation>
	<citation>644	4	435</citation>
	<citation>653	4	435</citation>
	<citation>680	4	435</citation>
	<citation>761	4	435</citation>
	<citation>762	4	435</citation>
	<citation>763	4	435</citation>
	<citation>849	4	435</citation>
	<citation>123	4	435</citation>
	<citation>140	4	435</citation>
	<citation>919	4	435</citation>
	<citation>989	4	435</citation>
	<citation>196	5	435</citation>
	<citation>1053	5	435</citation>
	<citation>435	5	435</citation>
	<citation>435	5	435</citation>
	<citation>435	5	435</citation>
	<citation>615	5	435</citation>
	<citation>435	6	435</citation>
	<citation>474	6	435</citation>
	<citation>718	6	435</citation>
	<citation>720	6	435</citation>
	</citations>
	</document>
	<document id= '434'>
	<citations>
	<citation>434	5	434</citation>
	<citation>434	5	434</citation>
	<citation>434	5	434</citation>
	</citations>
	<title>Character Manipulation in 1620 Fortran II</title>
	<conference>CACM December, 1962</conference>
	<authors>
	</authors>
	<location>CA621205 JB March 17, 1978  5:11 PM</location>
	</document>
	<document id= '433'>
	<citations>
	<citation>433	5	433</citation>
	<citation>433	5	433</citation>
	<citation>433	5	433</citation>
	</citations>
	<title>Fixed-World-Length Arrays in Variable-Word-Length Computers</title>
	<conference>CACM December, 1962</conference>
	<authors>
	<author>Sonquist, J. A.</author>
	</authors>
	<location>CA621206 JB March 17, 1978  5:10 PM</location>
	</document>
	<document id= '432'>
	<citations>
	<citation>432	5	432</citation>
	<citation>432	5	432</citation>
	<citation>432	5	432</citation>
	</citations>
	<title>Triangular Regression (Algorithm 142)</title>
	<conference>CACM December, 1962</conference>
	<authors>
	<author>Hafley, W. L.</author>
	<author>Lewis, J. S.</author>
	</authors>
	<location>CA621207 JB March 17,1978  5:09 PM</location>
	</document>
	<document id= '431'>
	<citations>
	<citation>431	5	431</citation>
	<citation>431	5	431</citation>
	<citation>431	5	431</citation>
	</citations>
	<title>TREESORT1 (Algorithm 143)</title>
	<conference>CACM December, 1962</conference>
	<authors>
	</authors>
	<location>CA621208 JB March 17, 1978  5:08 PM</location>
	</document>
	<document id= '430'>
	<citations>
	<citation>430	5	430</citation>
	<citation>430	5	430</citation>
	<citation>430	5	430</citation>
	</citations>
	<title>TREESORT2 (Algorithm 144)</title>
	<conference>CACM December, 1962</conference>
	<authors>
	</authors>
	<location>CA621209 JB March 17, 1978  5:07 PM</location>
	</document>
	<document id= '429'>
	<citations>
	<citation>1352	5	429</citation>
	<citation>2048	5	429</citation>
	<citation>2074	5	429</citation>
	<citation>2093	5	429</citation>
	<citation>2550	5	429</citation>
	<citation>429	5	429</citation>
	<citation>429	5	429</citation>
	<citation>429	5	429</citation>
	<citation>834	6	429</citation>
	<citation>834	6	429</citation>
	<citation>834	6	429</citation>
	<citation>834	6	429</citation>
	<citation>872	6	429</citation>
	<citation>872	6	429</citation>
	<citation>872	6	429</citation>
	<citation>1040	6	429</citation>
	<citation>1092	6	429</citation>
	<citation>1092	6	429</citation>
	<citation>1241	6	429</citation>
	<citation>1273	6	429</citation>
	<citation>1298	6	429</citation>
	<citation>1573	6	429</citation>
	<citation>1573	6	429</citation>
	<citation>324	6	429</citation>
	<citation>2074	6	429</citation>
	<citation>429	6	429</citation>
	<citation>429	6	429</citation>
	<citation>429	6	429</citation>
	<citation>429	6	429</citation>
	<citation>429	6	429</citation>
	<citation>570	6	429</citation>
	<citation>621	6	429</citation>
	<citation>786	6	429</citation>
	<citation>786	6	429</citation>
	<citation>786	6	429</citation>
	</citations>
	<title>Adaptive Nimerical Integration by Simpson's Rule (Algorithm 145)</title>
	<conference>CACM December, 1962</conference>
	<authors>
	<author>McKeeman, W. M.</author>
	</authors>
	<location>CA621210 JB March 17, 1978  5:06 PM</location>
	</document>
	<document id= '428'>
	<citations>
	<citation>428	5	428</citation>
	<citation>428	5	428</citation>
	<citation>428	5	428</citation>
	</citations>
	<title>Multiple Integration (Algorithm 146)</title>
	<conference>CACM December, 1962</conference>
	<authors>
	<author>McKeeman, W. M.</author>
	</authors>
	<location>CA621211 JB March 17, 1978  5:04 PM</location>
	</document>
	<document id= '427'>
	<citations>
	<citation>427	5	427</citation>
	<citation>427	5	427</citation>
	<citation>427	5	427</citation>
	</citations>
	<title>PSIF (Algorithm 147)</title>
	<conference>CACM December, 1962</conference>
	<authors>
	<author>Amit, D.</author>
	</authors>
	<location>CA621212 JB March 17, 1978  5:03 PM</location>
	</document>
	<document id= '426'>
	<citations>
	<citation>426	5	426</citation>
	<citation>426	5	426</citation>
	<citation>426	5	426</citation>
	</citations>
	<title>Term of Magic Square (Algorithm 148)</title>
	<conference>CACM December, 1962</conference>
	<authors>
	<author>Collison, D. M.</author>
	</authors>
	<location>CA621213 JB March 17, 1978  5:00 PM</location>
	</document>
	<document id= '425'>
	<citations>
	<citation>425	5	425</citation>
	<citation>425	5	425</citation>
	<citation>425	5	425</citation>
	</citations>
	<title>Complete Elliptic Integral (Algorithm 149)</title>
	<conference>CACM December, 1962</conference>
	<authors>
	<author>Merner, J. N.</author>
	</authors>
	<location>CA621214 JB March 17,1978  4:59 PM</location>
	</document>
	<document id= '424'>
	<citations>
	<citation>424	5	424</citation>
	<citation>424	5	424</citation>
	<citation>424	5	424</citation>
	</citations>
	<title>Gamma Function (Algorithm 31)</title>
	<conference>CACM December, 1962</conference>
	<authors>
	<author>Behrenz, P. G.</author>
	</authors>
	<location>CA621215 JB March 17, 1978  4:58 PM</location>
	</document>
	<document id= '423'>
	<citations>
	<citation>423	5	423</citation>
	<citation>423	5	423</citation>
	<citation>423	5	423</citation>
	</citations>
	<title>Matrix Inversion (Algorithm 58)</title>
	<conference>CACM December, 1962</conference>
	<authors>
	<author>Behrenz, P. G.</author>
	</authors>
	<location>CA621216 JB March 17, 1978  4:57 PM</location>
	</document>
	<document id= '422'>
	<citations>
	<citation>422	5	422</citation>
	<citation>422	5	422</citation>
	<citation>422	5	422</citation>
	</citations>
	<title>COMBINATION (Algorithm 94)</title>
	<conference>CACM December, 1962</conference>
	<authors>
	<author>Grench, R. E.</author>
	</authors>
	<location>CA621217 JB March 17, 1978  4:56 PM</location>
	</document>
	<document id= '421'>
	<citations>
	<citation>1804	5	421</citation>
	<citation>2987	5	421</citation>
	<citation>421	5	421</citation>
	<citation>421	5	421</citation>
	<citation>421	5	421</citation>
	<citation>1326	6	421</citation>
	<citation>1630	6	421</citation>
	<citation>2125	6	421</citation>
	<citation>2547	6	421</citation>
	<citation>2633	6	421</citation>
	<citation>421	6	421</citation>
	<citation>421	6	421</citation>
	<citation>524	6	421</citation>
	<citation>524	6	421</citation>
	</citations>
	<title>Position of Point Relative to Polygon (Algorithm 112)</title>
	<conference>CACM December, 1962</conference>
	<authors>
	<author>Hacker, R.</author>
	</authors>
	<location>CA621218 JB March 17, 1978  4:54 PM</location>
	</document>
	<document id= '420'>
	<citations>
	<citation>420	5	420</citation>
	<citation>420	5	420</citation>
	<citation>420	5	420</citation>
	</citations>
	<title>PERM (Algorithm 115)</title>
	<conference>CACM December, 1962</conference>
	<authors>
	<author>Phillips, E. S.</author>
	</authors>
	<location>CA621219 JB March 17, 1978  4:53 PM</location>
	</document>
	<document id= '419'>
	<citations>
	<citation>419	5	419</citation>
	<citation>419	5	419</citation>
	<citation>419	5	419</citation>
	</citations>
	<title>Magic Square (Algorithm 118)</title>
	<conference>CACM December, 1962</conference>
	<authors>
	</authors>
	<location>CA621220 JB March 17, 1978  4:52 PM</location>
	</document>
	<document id= '418'>
	<citations>
	<citation>418	5	418</citation>
	<citation>418	5	418</citation>
	<citation>418	5	418</citation>
	</citations>
	<title>RANDOM (Algorithm 133)</title>
	<conference>CACM December, 1962</conference>
	<authors>
	<author>Behrenz, P. G.</author>
	</authors>
	<location>CA621221 JB March 17, 1978  4:38 PM</location>
	</document>
	<document id= '417'>
	<title>Legal Implications of Computer Use</title>
	<abstract>This paper points out a variety of ways computer systems used in business and industry can  be involved in legal entanglements and suggests that computer specialists have a responsibility to call  for assistance in forestalling or minimizing those entanglements during the planning stage.  Techniques  are suggested for making legal clearance effective with the least burden on the new technology and for  achieving a favorable legal climate for it generally.  Computer specialists also are alerted to potential  opportunities to interpret to lawyers the technical aspects of computer systems involved in legal situations.</abstract>
	<conference>CACM December, 1962</conference>
	<authors>
	<author>Freed, R. N.</author>
	</authors>
	<location>CA621222 JB March 17, 1978  4:37 PM</location>
	<citations>
	<citation>417	5	417</citation>
	<citation>417	5	417</citation>
	<citation>417	5	417</citation>
	</citations>
	</document>
	<document id= '416'>
	<citations>
	<citation>1049	5	416</citation>
	<citation>416	5	416</citation>
	<citation>416	5	416</citation>
	<citation>416	5	416</citation>
	<citation>416	6	416</citation>
	</citations>
	<title>Multiple Shooting Method for Two-Point Boundary Value Problems</title>
	<conference>CACM December, 1962</conference>
	<authors>
	<author>Morrison, D. D.</author>
	<author>Riley, J. D.</author>
	<author>Zancanaro, J. F.</author>
	</authors>
	<location>CA621223 JB March 17, 1978  4:33 PM</location>
	</document>
	<document id= '415'>
	<citations>
	<citation>1349	5	415</citation>
	<citation>415	5	415</citation>
	<citation>415	5	415</citation>
	<citation>415	5	415</citation>
	<citation>236	6	415</citation>
	<citation>323	6	415</citation>
	<citation>83	6	415</citation>
	<citation>415	6	415</citation>
	</citations>
	<title>The Use of Digital Computers in Western Germany</title>
	<conference>CACM December, 1962</conference>
	<authors>
	<author>Schuff, H. K.</author>
	</authors>
	<location>CA621224 JB March 17, 1978  4:32 PM</location>
	</document>
	<document id= '414'>
	<title>IBM 1440 Data Processing System Features Five New Units</title>
	<abstract>The IBM 1440 data processing system, announced recently by the International Business Machines  Corporation, not only features the 1311 disk storage drive with interchangeable disk packs but four other  newly developed units.</abstract>
	<conference>CACM December, 1961</conference>
	<authors>
	<author>Wheeling, R.</author>
	</authors>
	<location>CA621225 JB March 17,1978  4:30 PM</location>
	<citations>
	<citation>414	5	414</citation>
	<citation>414	5	414</citation>
	<citation>414	5	414</citation>
	</citations>
	</document>
	<document id= '413'>
	<citations>
	<citation>413	5	413</citation>
	<citation>413	5	413</citation>
	<citation>413	5	413</citation>
	</citations>
	<title>A Basic Compiler for Arithmetic Expressions</title>
	<conference>CACM January, 1961</conference>
	<authors>
	<author>Huskey, H. D.</author>
	<author>Wattenburg, W. H.</author>
	</authors>
	<location>CA610101 JB March 17, 1978  1:30 AM</location>
	</document>
	<document id= '412'>
	<citations>
	<citation>412	5	412</citation>
	<citation>412	5	412</citation>
	<citation>412	5	412</citation>
	<citation>763	5	412</citation>
	<citation>196	6	412</citation>
	<citation>224	6	412</citation>
	<citation>404	6	412</citation>
	<citation>412	6	412</citation>
	<citation>631	6	412</citation>
	</citations>
	<title>Recursive Processes and ALGOL Translation</title>
	<conference>CACM January, 1961</conference>
	<authors>
	<author>Gray, A. A.</author>
	</authors>
	<location>CA610102 JB March 17, 1978  1:29 AM</location>
	</document>
	<document id= '411'>
	<citations>
	<citation>411	5	411</citation>
	<citation>411	5	411</citation>
	<citation>411	5	411</citation>
	</citations>
	<title>Use of Magnetic Tape for Data Storage in the ORACLE-ALGOL Translator</title>
	<conference>CACM January, 1961</conference>
	<authors>
	<author>Bottenbruch, H.</author>
	</authors>
	<location>CA610103 JB March 17, 1978  1:28 AM</location>
	</document>
	<document id= '410'>
	<citations>
	<citation>1781	5	410</citation>
	<citation>410	5	410</citation>
	<citation>410	5	410</citation>
	<citation>410	5	410</citation>
	<citation>669	5	410</citation>
	<citation>1	6	410</citation>
	<citation>123	6	410</citation>
	<citation>196	6	410</citation>
	<citation>919	6	410</citation>
	<citation>990	6	410</citation>
	<citation>1007	6	410</citation>
	<citation>1046	6	410</citation>
	<citation>1131	6	410</citation>
	<citation>1139	6	410</citation>
	<citation>1140	6	410</citation>
	<citation>1149	6	410</citation>
	<citation>1198	6	410</citation>
	<citation>1215	6	410</citation>
	<citation>1223	6	410</citation>
	<citation>1265	6	410</citation>
	<citation>1303	6	410</citation>
	<citation>1323	6	410</citation>
	<citation>1358	6	410</citation>
	<citation>1366	6	410</citation>
	<citation>1421	6	410</citation>
	<citation>1460	6	410</citation>
	<citation>1462	6	410</citation>
	<citation>1463	6	410</citation>
	<citation>1467	6	410</citation>
	<citation>1468	6	410</citation>
	<citation>1477	6	410</citation>
	<citation>1491	6	410</citation>
	<citation>1496	6	410</citation>
	<citation>1531	6	410</citation>
	<citation>1535	6	410</citation>
	<citation>1565	6	410</citation>
	<citation>1601	6	410</citation>
	<citation>1602	6	410</citation>
	<citation>1613	6	410</citation>
	<citation>1614	6	410</citation>
	<citation>1626	6	410</citation>
	<citation>1641	6	410</citation>
	<citation>1787	6	410</citation>
	<citation>1788	6	410</citation>
	<citation>205	6	410</citation>
	<citation>224	6	410</citation>
	<citation>249	6	410</citation>
	<citation>288	6	410</citation>
	<citation>316	6	410</citation>
	<citation>381	6	410</citation>
	<citation>398	6	410</citation>
	<citation>11	6	410</citation>
	<citation>404	6	410</citation>
	<citation>410	6	410</citation>
	<citation>410	6	410</citation>
	<citation>463	6	410</citation>
	<citation>464	6	410</citation>
	<citation>483	6	410</citation>
	<citation>3184	6	410</citation>
	<citation>3184	6	410</citation>
	<citation>3188	6	410</citation>
	<citation>584	6	410</citation>
	<citation>600	6	410</citation>
	<citation>680	6	410</citation>
	<citation>691	6	410</citation>
	<citation>763	6	410</citation>
	<citation>799	6	410</citation>
	</citations>
	<title>The CLIP Translator</title>
	<conference>CACM January, 1961</conference>
	<authors>
	<author>Englund, D.</author>
	<author>Clark, E.</author>
	</authors>
	<location>CA610104 JB March 17, 1978  1:27 AM</location>
	</document>
	<document id= '409'>
	<title>CL-1, An Environment for a Compiler</title>
	<abstract>A flexible, large-scale programming system to facilitate the solution of information processing  problems and to provide intercommunication between programs and/or programmers has been developed and  realized on the IBM 709/7090 computer.  The system is based on a master file concept and has provisions  for accepting, storing, and retrieving both descriptions and instances of large and complex data sets,  as well as algorithms defined on these data sets.  Both data and algorithms may be expressed in a family  of command and descriptive languages.  The concept of distinct data descriptions and the content and  use of such descriptions are discussed in some detail.</abstract>
	<conference>CACM January, 1961</conference>
	<authors>
	<author>Leonard, G. F.</author>
	</authors>
	<location>CA610105 JB March 17, 1978  1:26 AM</location>
	<citations>
	<citation>409	5	409</citation>
	<citation>409	5	409</citation>
	<citation>409	5	409</citation>
	<citation>657	5	409</citation>
	<citation>279	6	409</citation>
	<citation>409	6	409</citation>
	</citations>
	</document>
	<document id= '408'>
	<citations>
	<citation>1134	5	408</citation>
	<citation>1179	5	408</citation>
	<citation>1861	5	408</citation>
	<citation>408	5	408</citation>
	<citation>408	5	408</citation>
	<citation>408	5	408</citation>
	<citation>830	6	408</citation>
	<citation>1614	6	408</citation>
	<citation>1781	6	408</citation>
	<citation>17	6	408</citation>
	<citation>77	6	408</citation>
	<citation>408	6	408</citation>
	<citation>408	6	408</citation>
	<citation>408	6	408</citation>
	</citations>
	<title>The Internal Organization of the MAD Translator</title>
	<conference>CACM January, 1961</conference>
	<authors>
	<author>Arden, B. W.</author>
	<author>Galler, B. A.</author>
	<author>Graham, R. M.</author>
	</authors>
	<location>CA610106 JB March 17, 1978  1:22 AM</location>
	</document>
	<document id= '407'>
	<citations>
	<citation>1083	5	407</citation>
	<citation>1396	5	407</citation>
	<citation>407	5	407</citation>
	<citation>407	5	407</citation>
	<citation>407	5	407</citation>
	<citation>679	5	407</citation>
	<citation>964	6	407</citation>
	<citation>1028	6	407</citation>
	<citation>1029	6	407</citation>
	<citation>1083	6	407</citation>
	<citation>1132	6	407</citation>
	<citation>1214	6	407</citation>
	<citation>1278	6	407</citation>
	<citation>1334	6	407</citation>
	<citation>1365	6	407</citation>
	<citation>1386	6	407</citation>
	<citation>1387	6	407</citation>
	<citation>1388	6	407</citation>
	<citation>1392	6	407</citation>
	<citation>1393	6	407</citation>
	<citation>1394	6	407</citation>
	<citation>1395	6	407</citation>
	<citation>1396	6	407</citation>
	<citation>1397	6	407</citation>
	<citation>1496	6	407</citation>
	<citation>284	6	407</citation>
	<citation>21	6	407</citation>
	<citation>407	6	407</citation>
	<citation>407	6	407</citation>
	<citation>407	6	407</citation>
	<citation>3184	6	407</citation>
	<citation>3192	6	407</citation>
	<citation>3193	6	407</citation>
	<citation>3199	6	407</citation>
	<citation>3200	6	407</citation>
	<citation>3201	6	407</citation>
	<citation>3202	6	407</citation>
	<citation>3203	6	407</citation>
	<citation>3204	6	407</citation>
	<citation>561	6	407</citation>
	<citation>730	6	407</citation>
	<citation>730	6	407</citation>
	</citations>
	<title>MADCAP: A Scientific Compiler for a Displayed Formula Textbook Language</title>
	<conference>CACM January, 1961</conference>
	<authors>
	<author>Wells, M. B.</author>
	</authors>
	<location>CA610107 JB March 17, 1978  1:21 AM</location>
	</document>
	<document id= '406'>
	<citations>
	<citation>1051	5	406</citation>
	<citation>1102	5	406</citation>
	<citation>1549	5	406</citation>
	<citation>406	5	406</citation>
	<citation>406	5	406</citation>
	<citation>406	5	406</citation>
	<citation>106	6	406</citation>
	<citation>196	6	406</citation>
	<citation>1051	6	406</citation>
	<citation>209	6	406</citation>
	<citation>210	6	406</citation>
	<citation>210	6	406</citation>
	<citation>210	6	406</citation>
	<citation>378	6	406</citation>
	<citation>406	6	406</citation>
	<citation>406	6	406</citation>
	<citation>406	6	406</citation>
	<citation>483	6	406</citation>
	<citation>627	6	406</citation>
	<citation>731	6	406</citation>
	<citation>731	6	406</citation>
	<citation>753	6	406</citation>
	<citation>793	6	406</citation>
	<citation>794	6	406</citation>
	</citations>
	<title>The Use of Threaded Lists in Constructing a Combined ALGOL and Machine-Like Assembly Processor</title>
	<conference>CACM January, 1961</conference>
	<authors>
	<author>Perlis, A. J.</author>
	<author>Zoeren, H.</author>
	</authors>
	<location>CA610108 JB March 17, 1978  1:20 AM</location>
	</document>
	<document id= '405'>
	<title>An Algorithm for Coding Efficient Arithmetic Operations</title>
	<abstract>Most existing formula translation schemes yield inefficient coding.  A method is described  which reduces the number of store and fetch operations, evaluates constant subexpressions during compilation,  and recognizes many equivalent subexpressions.</abstract>
	<conference>CACM January, 1961</conference>
	<authors>
	<author>Floyd, R. W.</author>
	</authors>
	<location>CA610109 JB March 17, 1978  1:19 AM</location>
	<citations>
	<citation>267	4	405</citation>
	<citation>1134	4	405</citation>
	<citation>1139	4	405</citation>
	<citation>1141	4	405</citation>
	<citation>1141	4	405</citation>
	<citation>1215	4	405</citation>
	<citation>1223	4	405</citation>
	<citation>1647	4	405</citation>
	<citation>1781	4	405</citation>
	<citation>1787	4	405</citation>
	<citation>1792	4	405</citation>
	<citation>364	4	405</citation>
	<citation>364	4	405</citation>
	<citation>405	4	405</citation>
	<citation>405	4	405</citation>
	<citation>405	4	405</citation>
	<citation>405	4	405</citation>
	<citation>438	4	405</citation>
	<citation>438	4	405</citation>
	<citation>561	4	405</citation>
	<citation>44	4	405</citation>
	<citation>54	4	405</citation>
	<citation>763	4	405</citation>
	<citation>1223	5	405</citation>
	<citation>224	5	405</citation>
	<citation>1388	5	405</citation>
	<citation>405	5	405</citation>
	<citation>405	5	405</citation>
	<citation>405	5	405</citation>
	<citation>436	5	405</citation>
	<citation>55	5	405</citation>
	<citation>77	5	405</citation>
	<citation>93	5	405</citation>
	<citation>224	6	405</citation>
	<citation>405	6	405</citation>
	<citation>405	6	405</citation>
	<citation>405	6	405</citation>
	<citation>731	6	405</citation>
	</citations>
	</document>
	<document id= '404'>
	<citations>
	<citation>945	5	404</citation>
	<citation>1046	5	404</citation>
	<citation>1105	5	404</citation>
	<citation>1139	5	404</citation>
	<citation>1140	5	404</citation>
	<citation>1234	5	404</citation>
	<citation>1263	5	404</citation>
	<citation>1265	5	404</citation>
	<citation>1496	5	404</citation>
	<citation>1781	5	404</citation>
	<citation>1824	5	404</citation>
	<citation>2126	5	404</citation>
	<citation>2546	5	404</citation>
	<citation>404	5	404</citation>
	<citation>404	5	404</citation>
	<citation>404	5	404</citation>
	<citation>464	5	404</citation>
	<citation>584	5	404</citation>
	<citation>631	5	404</citation>
	<citation>653	5	404</citation>
	<citation>680	5	404</citation>
	<citation>763	5	404</citation>
	<citation>795	5	404</citation>
	<citation>799	5	404</citation>
	<citation>823	6	404</citation>
	<citation>123	6	404</citation>
	<citation>196	6	404</citation>
	<citation>196	6	404</citation>
	<citation>196	6	404</citation>
	<citation>196	6	404</citation>
	<citation>196	6	404</citation>
	<citation>196	6	404</citation>
	<citation>196	6	404</citation>
	<citation>919	6	404</citation>
	<citation>931	6	404</citation>
	<citation>944	6	404</citation>
	<citation>945	6	404</citation>
	<citation>989	6	404</citation>
	<citation>990	6	404</citation>
	<citation>1007	6	404</citation>
	<citation>1046	6	404</citation>
	<citation>1131	6	404</citation>
	<citation>1137	6	404</citation>
	<citation>1139	6	404</citation>
	<citation>1140	6	404</citation>
	<citation>1141	6	404</citation>
	<citation>1149	6	404</citation>
	<citation>1198	6	404</citation>
	<citation>1215	6	404</citation>
	<citation>1223	6	404</citation>
	<citation>1265	6	404</citation>
	<citation>1303	6	404</citation>
	<citation>1323	6	404</citation>
	<citation>1358	6	404</citation>
	<citation>1358	6	404</citation>
	<citation>1366	6	404</citation>
	<citation>1421	6	404</citation>
	<citation>1460	6	404</citation>
	<citation>1462	6	404</citation>
	<citation>1463	6	404</citation>
	<citation>1467	6	404</citation>
	<citation>1468	6	404</citation>
	<citation>1477	6	404</citation>
	<citation>1477	6	404</citation>
	<citation>1491	6	404</citation>
	<citation>1491	6	404</citation>
	<citation>1496	6	404</citation>
	<citation>1531	6	404</citation>
	<citation>1535	6	404</citation>
	<citation>1565	6	404</citation>
	<citation>1601	6	404</citation>
	<citation>1602	6	404</citation>
	<citation>1613	6	404</citation>
	<citation>1614	6	404</citation>
	<citation>1614	6	404</citation>
	<citation>1614	6	404</citation>
	<citation>1626	6	404</citation>
	<citation>1641	6	404</citation>
	<citation>1693	6	404</citation>
	<citation>1781	6	404</citation>
	<citation>1787	6	404</citation>
	<citation>1788	6	404</citation>
	<citation>205	6	404</citation>
	<citation>224	6	404</citation>
	<citation>224	6	404</citation>
	<citation>224	6	404</citation>
	<citation>249	6	404</citation>
	<citation>265	6	404</citation>
	<citation>288	6	404</citation>
	<citation>316	6	404</citation>
	<citation>321	6	404</citation>
	<citation>381	6	404</citation>
	<citation>385	6	404</citation>
	<citation>398	6	404</citation>
	<citation>399	6	404</citation>
	<citation>399	6	404</citation>
	<citation>11	6	404</citation>
	<citation>2126	6	404</citation>
	<citation>82	6	404</citation>
	<citation>400	6	404</citation>
	<citation>402	6	404</citation>
	<citation>404	6	404</citation>
	<citation>404	6	404</citation>
	<citation>404	6	404</citation>
	<citation>404	6	404</citation>
	<citation>404	6	404</citation>
	<citation>404	6	404</citation>
	<citation>404	6	404</citation>
	<citation>404	6	404</citation>
	<citation>404	6	404</citation>
	<citation>404	6	404</citation>
	<citation>404	6	404</citation>
	<citation>404	6	404</citation>
	<citation>404	6	404</citation>
	<citation>404	6	404</citation>
	<citation>404	6	404</citation>
	<citation>404	6	404</citation>
	<citation>404	6	404</citation>
	<citation>404	6	404</citation>
	<citation>404	6	404</citation>
	<citation>404	6	404</citation>
	<citation>404	6	404</citation>
	<citation>410	6	404</citation>
	<citation>412	6	404</citation>
	<citation>438	6	404</citation>
	<citation>463	6	404</citation>
	<citation>464	6	404</citation>
	<citation>464	6	404</citation>
	<citation>464	6	404</citation>
	<citation>483	6	404</citation>
	<citation>3184	6	404</citation>
	<citation>3184	6	404</citation>
	<citation>3184	6	404</citation>
	<citation>3184	6	404</citation>
	<citation>3184	6	404</citation>
	<citation>3188	6	404</citation>
	<citation>584	6	404</citation>
	<citation>600	6	404</citation>
	<citation>631	6	404</citation>
	<citation>631	6	404</citation>
	<citation>631	6	404</citation>
	<citation>635	6	404</citation>
	<citation>680	6	404</citation>
	<citation>691	6	404</citation>
	<citation>729	6	404</citation>
	<citation>763	6	404</citation>
	<citation>799	6	404</citation>
	</citations>
	<title>A Syntax Directed Compiler for ALGOL 60</title>
	<conference>CACM January, 1961</conference>
	<authors>
	<author>Irons, E. T.</author>
	</authors>
	<location>CA610110 JB March 17, 1978  1:16 AM</location>
	</document>
	<document id= '403'>
	<citations>
	<citation>403	5	403</citation>
	<citation>403	5	403</citation>
	<citation>403	5	403</citation>
	</citations>
	<title>Thunks -- A Way of Compiling Procedure Statements with Some Comments on Procedure Declarations</title>
	<conference>CACM January, 1961</conference>
	<authors>
	<author>Ingerman, P. Z.</author>
	</authors>
	<location>CA610111 JB March 17, 1978  1:16 AM</location>
	</document>
	<document id= '402'>
	<citations>
	<citation>1234	5	402</citation>
	<citation>321	5	402</citation>
	<citation>402	5	402</citation>
	<citation>402	5	402</citation>
	<citation>402	5	402</citation>
	<citation>196	6	402</citation>
	<citation>944	6	402</citation>
	<citation>321	6	402</citation>
	<citation>385	6	402</citation>
	<citation>400	6	402</citation>
	<citation>400	6	402</citation>
	<citation>401	6	402</citation>
	<citation>402	6	402</citation>
	<citation>402	6	402</citation>
	<citation>404	6	402</citation>
	<citation>3184	6	402</citation>
	<citation>729	6	402</citation>
	</citations>
	<title>Dynamic Declarations</title>
	<conference>CACM January, 1961</conference>
	<authors>
	<author>Ingerman, P. Z.</author>
	</authors>
	<location>CA610112 JB March 17, 1978  1:14 AM</location>
	</document>
	<document id= '401'>
	<citations>
	<citation>321	5	401</citation>
	<citation>401	5	401</citation>
	<citation>401	5	401</citation>
	<citation>401	5	401</citation>
	<citation>196	6	401</citation>
	<citation>400	6	401</citation>
	<citation>401	6	401</citation>
	<citation>402	6	401</citation>
	</citations>
	<title>Allocation of Storage for Arrays in ALGOL 60</title>
	<conference>CACM January, 1961</conference>
	<authors>
	<author>Sattley, K.</author>
	</authors>
	<location>CA610113 JB March 17, 1978  1:14 AM</location>
	</document>
	<document id= '400'>
	<citations>
	<citation>1234	5	400</citation>
	<citation>321	5	400</citation>
	<citation>400	5	400</citation>
	<citation>400	5	400</citation>
	<citation>400	5	400</citation>
	<citation>196	6	400</citation>
	<citation>944	6	400</citation>
	<citation>321	6	400</citation>
	<citation>385	6	400</citation>
	<citation>400	6	400</citation>
	<citation>400	6	400</citation>
	<citation>401	6	400</citation>
	<citation>402	6	400</citation>
	<citation>402	6	400</citation>
	<citation>404	6	400</citation>
	<citation>3184	6	400</citation>
	<citation>729	6	400</citation>
	</citations>
	<title>Comments on the Implementation of Recursive Procedures and Blocks in ALGOL 60</title>
	<conference>CACM January, 1961</conference>
	<authors>
	<author>Irons, E. T.</author>
	<author>Feurzeig, W.</author>
	</authors>
	<location>CA610114 JB March 17, 1978  1:13 AM</location>
	</document>
	<document id= '399'>
	<citations>
	<citation>1139	5	399</citation>
	<citation>1947	5	399</citation>
	<citation>399	5	399</citation>
	<citation>399	5	399</citation>
	<citation>399	5	399</citation>
	<citation>556	5	399</citation>
	<citation>799	5	399</citation>
	<citation>945	6	399</citation>
	<citation>1134	6	399</citation>
	<citation>1223	6	399</citation>
	<citation>1248	6	399</citation>
	<citation>224	6	399</citation>
	<citation>399	6	399</citation>
	<citation>399	6	399</citation>
	<citation>399	6	399</citation>
	<citation>399	6	399</citation>
	<citation>82	6	399</citation>
	<citation>404	6	399</citation>
	<citation>404	6	399</citation>
	<citation>438	6	399</citation>
	<citation>464	6	399</citation>
	<citation>631	6	399</citation>
	</citations>
	<title>Compiling Techniques for Boolean Expressions and Conditional Statements in ALGOL 60</title>
	<conference>CACM January, 1961</conference>
	<authors>
	<author>Huskey, H. D.</author>
	<author>Wattenburg, W. H.</author>
	</authors>
	<location>CA610115 JB March 17, 1978  1:12 AM</location>
	</document>
	<document id= '398'>
	<citations>
	<citation>205	4	398</citation>
	<citation>210	4	398</citation>
	<citation>214	4	398</citation>
	<citation>1982	4	398</citation>
	<citation>398	4	398</citation>
	<citation>642	4	398</citation>
	<citation>669	4	398</citation>
	<citation>100	4	398</citation>
	<citation>123	4	398</citation>
	<citation>164	4	398</citation>
	<citation>1	5	398</citation>
	<citation>1781	5	398</citation>
	<citation>398	5	398</citation>
	<citation>398	5	398</citation>
	<citation>398	5	398</citation>
	<citation>123	6	398</citation>
	<citation>196	6	398</citation>
	<citation>919	6	398</citation>
	<citation>990	6	398</citation>
	<citation>1007	6	398</citation>
	<citation>1046	6	398</citation>
	<citation>1131	6	398</citation>
	<citation>1139	6	398</citation>
	<citation>1140	6	398</citation>
	<citation>1149	6	398</citation>
	<citation>1198	6	398</citation>
	<citation>1215	6	398</citation>
	<citation>1223	6	398</citation>
	<citation>1265	6	398</citation>
	<citation>1303	6	398</citation>
	<citation>1323	6	398</citation>
	<citation>1358	6	398</citation>
	<citation>1366	6	398</citation>
	<citation>1421	6	398</citation>
	<citation>1460	6	398</citation>
	<citation>1462	6	398</citation>
	<citation>1463	6	398</citation>
	<citation>1467	6	398</citation>
	<citation>1468	6	398</citation>
	<citation>1477	6	398</citation>
	<citation>1491	6	398</citation>
	<citation>1496	6	398</citation>
	<citation>1531	6	398</citation>
	<citation>1535	6	398</citation>
	<citation>1565	6	398</citation>
	<citation>1601	6	398</citation>
	<citation>1602	6	398</citation>
	<citation>1613	6	398</citation>
	<citation>1614	6	398</citation>
	<citation>1626	6	398</citation>
	<citation>1641	6	398</citation>
	<citation>1787	6	398</citation>
	<citation>1788	6	398</citation>
	<citation>205	6	398</citation>
	<citation>224	6	398</citation>
	<citation>249	6	398</citation>
	<citation>288	6	398</citation>
	<citation>316	6	398</citation>
	<citation>381	6	398</citation>
	<citation>398	6	398</citation>
	<citation>11	6	398</citation>
	<citation>404	6	398</citation>
	<citation>410	6	398</citation>
	<citation>463	6	398</citation>
	<citation>464	6	398</citation>
	<citation>483	6	398</citation>
	<citation>3184	6	398</citation>
	<citation>3188	6	398</citation>
	<citation>584	6	398</citation>
	<citation>600	6	398</citation>
	<citation>680	6	398</citation>
	<citation>691	6	398</citation>
	<citation>763	6	398</citation>
	<citation>799	6	398</citation>
	</citations>
	<title>The SLANG System</title>
	<conference>CACM January, 1961</conference>
	<authors>
	<author>Sibley, R. A.</author>
	</authors>
	<location>CA610116 JB March 17, 1978  1:10 AM</location>
	</document>
	<document id= '397'>
	<title>A Card Format for Reference Files in Information Processing</title>
	<abstract>This paper proposes a card format suitable for a variety of reference files in information  processing.  An 80-column IBM card is divided into two fields-reference material field (columns 1-67)  and identification field (columns 68-80).  The format for the reference material is flexible, while the  format for the identification is rigid.  The reference material includes basically an index, title, source,  class, summary and cross reference for each entry.  The identification includes basically codes for a  matrix of descriptors, an entry number, and the kind, major interest, and source of the reference.  The  identification also provides a choice to identify material for personal as well as general files.  Since  this card format is sufficient to identify the material normally associated with reference files for  books, articles, programming terms, hardware terms, equipment, machine systems, abbreviations, etc., it  is suitable as a standard for card reference files in information processing.</abstract>
	<conference>CACM February, 1961</conference>
	<authors>
	<author>Grems, M.</author>
	</authors>
	<location>CA610201 JB March 17, 1978  1:08 AM</location>
	<citations>
	<citation>929	5	397</citation>
	<citation>397	5	397</citation>
	<citation>397	5	397</citation>
	<citation>397	5	397</citation>
	<citation>397	6	397</citation>
	</citations>
	</document>
	<document id= '396'>
	<title>Automation of Program  Debugging</title>
	<abstract>Automatic Debugging can substantially reduce lead-time between the coding and the effective use of a complex program. It also enforces analysis of debugging criteria, resulting in verifiably accurate programs. The programmer specifies the program to be debugged, memory areas, set of input data, maximum repetition of loops, and checkpoint information for each set of data. The executive debugging program the runs the program to be debugged, performing checking functions and creating a trace record of its own later analysis and location of errors. Applications are quite flexible, and the system can be used alone or in conjunction with other debugging techniques.</abstract>
	<conference>CACM July, 1961</conference>
	<authors>
	<author>Jacoby, K.</author>
	<author>Layton, H.</author>
	</authors>
	<location>CA610714 ES March 17, 1982 10:10 AM</location>
	<citations>
	<citation>931	5	396</citation>
	<citation>396	5	396</citation>
	<citation>396	5	396</citation>
	<citation>396	5	396</citation>
	<citation>202	6	396</citation>
	<citation>396	6	396</citation>
	<citation>634	6	396</citation>
	</citations>
	</document>
	<document id= '395'>
	<citations>
	<citation>395	5	395</citation>
	<citation>395	5	395</citation>
	<citation>395	5	395</citation>
	</citations>
	<title>Multiple-Precision Division</title>
	<conference>CACM February, 1961</conference>
	<authors>
	<author>Rabinowitz, P.</author>
	</authors>
	<location>CA610202 JB March 17, 1978  1:01 AM</location>
	</document>
	<document id= '394'>
	<citations>
	<citation>394	5	394</citation>
	<citation>394	5	394</citation>
	<citation>394	5	394</citation>
	</citations>
	<title>Multiple Programming Data Processing</title>
	<conference>CACM February, 1961</conference>
	<authors>
	<author>Ryle, B. L.</author>
	</authors>
	<location>CA610204 JB March 17, 1978  1:00 AM</location>
	</document>
	<document id= '393'>
	<citations>
	<citation>393	5	393</citation>
	<citation>393	5	393</citation>
	<citation>393	5	393</citation>
	<citation>561	5	393</citation>
	<citation>393	6	393</citation>
	<citation>77	6	393</citation>
	</citations>
	<title>Two Subroutines for Symbol Manipulation with an Algebraic Compiler</title>
	<conference>CACM February, 1961</conference>
	<authors>
	<author>III, J. W.</author>
	<author>Hanson, J. W.</author>
	</authors>
	<location>CA610205 JB March 17, 1978  12:59 AM</location>
	</document>
	<document id= '392'>
	<citations>
	<citation>392	5	392</citation>
	<citation>392	5	392</citation>
	<citation>392	5	392</citation>
	</citations>
	<title>Comment on A Paper on Parallel Processing</title>
	<conference>CACM February, 1961</conference>
	<authors>
	<author>Nekora, M. R.</author>
	</authors>
	<location>CA610206 JB March 17, 1978  12:58 AM</location>
	</document>
	<document id= '391'>
	<citations>
	<citation>391	5	391</citation>
	<citation>391	5	391</citation>
	<citation>391	5	391</citation>
	</citations>
	<title>The BKS System for the Philco-2000</title>
	<conference>CACM February, 1961</conference>
	<authors>
	<author>Smith, R. B.</author>
	</authors>
	<location>CA610207 JB March 17, 1978  12:57 AM</location>
	</document>
	<document id= '390'>
	<citations>
	<citation>390	5	390</citation>
	<citation>390	5	390</citation>
	<citation>390	5	390</citation>
	</citations>
	<title>Complex Exponential Integral (Algorithm 13)</title>
	<conference>CACM February, 1961</conference>
	<authors>
	<author>Rader, P. J.</author>
	</authors>
	<location>CA610208 JB March 17, 1978  12:56 AM</location>
	</document>
	<document id= '389'>
	<citations>
	<citation>389	5	389</citation>
	<citation>389	5	389</citation>
	<citation>389	5	389</citation>
	</citations>
	<title>Real Exponential Integral (Algorithm 20)</title>
	<conference>CACM February, 1961</conference>
	<authors>
	<author>Peavy, S.</author>
	</authors>
	<location>CA610209 JB March 17, 1978  12:55 AM</location>
	</document>
	<document id= '388'>
	<citations>
	<citation>388	5	388</citation>
	<citation>388	5	388</citation>
	<citation>388	5	388</citation>
	</citations>
	<title>Solution of Polynomial Equations by Bairstow Hitchcock Method (Algorithm 3)</title>
	<conference>CACM February, 1961</conference>
	<authors>
	<author>Vandergraft, J. S.</author>
	</authors>
	<location>CA610210 JB March 17, 1978  12:54 AM</location>
	</document>
	<document id= '387'>
	<citations>
	<citation>254	5	387</citation>
	<citation>387	5	387</citation>
	<citation>387	5	387</citation>
	<citation>387	5	387</citation>
	<citation>196	6	387</citation>
	<citation>321	6	387</citation>
	<citation>387	6	387</citation>
	</citations>
	<title>Gamma Function (Algorithm 31)</title>
	<conference>CACM February, 1961</conference>
	<authors>
	</authors>
	<location>CA610211 JB March 17, 1978  12:53 AM</location>
	</document>
	<document id= '386'>
	<citations>
	<citation>1146	5	386</citation>
	<citation>386	5	386</citation>
	<citation>386	5	386</citation>
	<citation>386	5	386</citation>
	<citation>386	6	386</citation>
	</citations>
	<title>MULTINT (Algorithm 32)</title>
	<conference>CACM February, 1961</conference>
	<authors>
	</authors>
	<location>CA610212 JB March 17, 1978  12:52 AM</location>
	</document>
	<document id= '385'>
	<citations>
	<citation>1234	5	385</citation>
	<citation>385	5	385</citation>
	<citation>385	5	385</citation>
	<citation>385	5	385</citation>
	<citation>944	6	385</citation>
	<citation>321	6	385</citation>
	<citation>385	6	385</citation>
	<citation>400	6	385</citation>
	<citation>402	6	385</citation>
	<citation>404	6	385</citation>
	<citation>3184	6	385</citation>
	<citation>729	6	385</citation>
	</citations>
	<title>FACTORIAL (Algorithm 33)</title>
	<conference>CACM February, 1961</conference>
	<authors>
	<author>Lipp, M. F.</author>
	</authors>
	<location>CA610213 JB March 17, 1978  12:50 AM</location>
	</document>
	<document id= '384'>
	<citations>
	<citation>384	5	384</citation>
	<citation>384	5	384</citation>
	<citation>384	5	384</citation>
	</citations>
	<title>Gamma Function (Algorithm 34)</title>
	<conference>CACM February, 1961</conference>
	<authors>
	<author>Lipp, M. F.</author>
	</authors>
	<location>CA610214 JB March 17, 1978  12:49 AM</location>
	</document>
	<document id= '383'>
	<citations>
	<citation>383	5	383</citation>
	<citation>383	5	383</citation>
	<citation>383	5	383</citation>
	</citations>
	<title>On Finding Minimum Routes in a Network With Turn Penalties</title>
	<conference>CACM February, 1961</conference>
	<authors>
	<author>Caldwell, T.</author>
	</authors>
	<location>CA610215 JB March 17, 1978  12:49 AM</location>
	</document>
	<document id= '382'>
	<citations>
	<citation>382	5	382</citation>
	<citation>382	5	382</citation>
	<citation>382	5	382</citation>
	</citations>
	<title>Statistical Programs at the University of North Carolina</title>
	<conference>CACM February, 1961</conference>
	<authors>
	<author>Bush, N.</author>
	</authors>
	<location>CA610216 JB March 17, 1978  12:48 AM</location>
	</document>
	<document id= '381'>
	<citations>
	<citation>1159	4	381</citation>
	<citation>1988	4	381</citation>
	<citation>381	4	381</citation>
	<citation>1781	5	381</citation>
	<citation>1988	5	381</citation>
	<citation>381	5	381</citation>
	<citation>381	5	381</citation>
	<citation>381	5	381</citation>
	<citation>14	5	381</citation>
	<citation>123	6	381</citation>
	<citation>196	6	381</citation>
	<citation>919	6	381</citation>
	<citation>990	6	381</citation>
	<citation>1007	6	381</citation>
	<citation>1046	6	381</citation>
	<citation>1131	6	381</citation>
	<citation>1139	6	381</citation>
	<citation>1140	6	381</citation>
	<citation>1149	6	381</citation>
	<citation>1198	6	381</citation>
	<citation>1215	6	381</citation>
	<citation>1223	6	381</citation>
	<citation>1265	6	381</citation>
	<citation>1303	6	381</citation>
	<citation>1323	6	381</citation>
	<citation>1358	6	381</citation>
	<citation>1366	6	381</citation>
	<citation>1421	6	381</citation>
	<citation>1460	6	381</citation>
	<citation>1462	6	381</citation>
	<citation>1463	6	381</citation>
	<citation>1467	6	381</citation>
	<citation>1468	6	381</citation>
	<citation>1477	6	381</citation>
	<citation>1491	6	381</citation>
	<citation>1496	6	381</citation>
	<citation>1496	6	381</citation>
	<citation>1531	6	381</citation>
	<citation>1535	6	381</citation>
	<citation>1565	6	381</citation>
	<citation>1601	6	381</citation>
	<citation>1602	6	381</citation>
	<citation>1613	6	381</citation>
	<citation>1614	6	381</citation>
	<citation>1626	6	381</citation>
	<citation>1641	6	381</citation>
	<citation>1787	6	381</citation>
	<citation>1788	6	381</citation>
	<citation>205	6	381</citation>
	<citation>224	6	381</citation>
	<citation>249	6	381</citation>
	<citation>288	6	381</citation>
	<citation>316	6	381</citation>
	<citation>381	6	381</citation>
	<citation>381	6	381</citation>
	<citation>398	6	381</citation>
	<citation>11	6	381</citation>
	<citation>11	6	381</citation>
	<citation>14	6	381</citation>
	<citation>404	6	381</citation>
	<citation>410	6	381</citation>
	<citation>463	6	381</citation>
	<citation>464	6	381</citation>
	<citation>483	6	381</citation>
	<citation>3184	6	381</citation>
	<citation>3188	6	381</citation>
	<citation>584	6	381</citation>
	<citation>600	6	381</citation>
	<citation>680	6	381</citation>
	<citation>691	6	381</citation>
	<citation>763	6	381</citation>
	<citation>799	6	381</citation>
	</citations>
	<title>An Alternate Form of the "UNCOL Diagram"</title>
	<conference>CACM March, 1961</conference>
	<authors>
	<author>Bratman, H.</author>
	</authors>
	<location>CA610301 JB March 17, 1978  12:46 AM</location>
	</document>
	<document id= '380'>
	<title>Comparison of Iterative Methods for the Calculation of nth Roots</title>
	<abstract>Three iterative methods for calculation of nth roots (including one proposed by the author)  are compared in two ways: (1) Theoretical convergence estimates are given.  (2) A new macrocompiler which  estimates machine running time is used to compare the running time of the three methods for a variety  of input data.</abstract>
	<conference>CACM March, 1961</conference>
	<authors>
	<author>Traub, J. F.</author>
	</authors>
	<location>CA610302 JB March 17, 1978  12:45 AM</location>
	<citations>
	<citation>319	5	380</citation>
	<citation>380	5	380</citation>
	<citation>380	5	380</citation>
	<citation>380	5	380</citation>
	<citation>380	6	380</citation>
	</citations>
	</document>
	<document id= '379'>
	<citations>
	<citation>379	5	379</citation>
	<citation>379	5	379</citation>
	<citation>379	5	379</citation>
	</citations>
	<title>Bitwise Operations</title>
	<conference>CACM March, 1961</conference>
	<authors>
	<author>Strachey, C.</author>
	</authors>
	<location>CA610303 JB March 17, 1978  12:42 AM</location>
	</document>
	<document id= '378'>
	<citations>
	<citation>1024	4	378</citation>
	<citation>1050	4	378</citation>
	<citation>1051	4	378</citation>
	<citation>1102	4	378</citation>
	<citation>1102	4	378</citation>
	<citation>1132	4	378</citation>
	<citation>1390	4	378</citation>
	<citation>1486	4	378</citation>
	<citation>1549	4	378</citation>
	<citation>1706	4	378</citation>
	<citation>1826	4	378</citation>
	<citation>1878	4	378</citation>
	<citation>378	4	378</citation>
	<citation>378	4	378</citation>
	<citation>378	4	378</citation>
	<citation>2060	4	378</citation>
	<citation>2155	4	378</citation>
	<citation>2168	4	378</citation>
	<citation>2719	4	378</citation>
	<citation>2723	4	378</citation>
	<citation>2838	4	378</citation>
	<citation>2842	4	378</citation>
	<citation>2855	4	378</citation>
	<citation>2879	4	378</citation>
	<citation>3008	4	378</citation>
	<citation>3077	4	378</citation>
	<citation>3080	4	378</citation>
	<citation>3106	4	378</citation>
	<citation>627	4	378</citation>
	<citation>731	4	378</citation>
	<citation>798	4	378</citation>
	<citation>106	4	378</citation>
	<citation>1051	5	378</citation>
	<citation>208	5	378</citation>
	<citation>209	5	378</citation>
	<citation>210	5	378</citation>
	<citation>1552	5	378</citation>
	<citation>1665	5	378</citation>
	<citation>1860	5	378</citation>
	<citation>378	5	378</citation>
	<citation>378	5	378</citation>
	<citation>378	5	378</citation>
	<citation>2155	5	378</citation>
	<citation>1184	6	378</citation>
	<citation>1366	6	378</citation>
	<citation>1389	6	378</citation>
	<citation>1389	6	378</citation>
	<citation>1421	6	378</citation>
	<citation>1421	6	378</citation>
	<citation>1496	6	378</citation>
	<citation>1626	6	378</citation>
	<citation>1641	6	378</citation>
	<citation>1781	6	378</citation>
	<citation>1785	6	378</citation>
	<citation>1786	6	378</citation>
	<citation>210	6	378</citation>
	<citation>210	6	378</citation>
	<citation>378	6	378</citation>
	<citation>378	6	378</citation>
	<citation>378	6	378</citation>
	<citation>378	6	378</citation>
	<citation>378	6	378</citation>
	<citation>2046	6	378</citation>
	<citation>2060	6	378</citation>
	<citation>406	6	378</citation>
	<citation>3184	6	378</citation>
	<citation>631	6	378</citation>
	<citation>731	6	378</citation>
	<citation>793	6	378</citation>
	<citation>794	6	378</citation>
	<citation>799	6	378</citation>
	</citations>
	<title>A Generalized Technique for Symbol Manipulation and Numerical Calculation</title>
	<conference>CACM March, 1961</conference>
	<authors>
	<author>Ross, D. T.</author>
	</authors>
	<location>CA610304 JB March 17, 1978  12:42 AM</location>
	</document>
	<document id= '377'>
	<citations>
	<citation>1841	5	377</citation>
	<citation>377	5	377</citation>
	<citation>377	5	377</citation>
	<citation>377	5	377</citation>
	<citation>2120	5	377</citation>
	<citation>1537	6	377</citation>
	<citation>1539	6	377</citation>
	<citation>1539	6	377</citation>
	<citation>1841	6	377</citation>
	<citation>377	6	377</citation>
	<citation>377	6	377</citation>
	</citations>
	<title>SIEVE (Algorithm 35)</title>
	<conference>CACM March, 1961</conference>
	<authors>
	<author>Wood, T. C.</author>
	</authors>
	<location>CA610305 JB March 17, 1978  12:41 AM</location>
	</document>
	<document id= '376'>
	<citations>
	<citation>1754	5	376</citation>
	<citation>376	5	376</citation>
	<citation>376	5	376</citation>
	<citation>376	5	376</citation>
	<citation>274	6	376</citation>
	<citation>376	6	376</citation>
	</citations>
	<title>Tchebycheff (Algorithm 36)</title>
	<conference>CACM March, 1961</conference>
	<authors>
	<author>Gianni, A. J.</author>
	</authors>
	<location>CA610306 JB March 17, 1978  12:40 AM</location>
	</document>
	<document id= '375'>
	<citations>
	<citation>375	5	375</citation>
	<citation>375	5	375</citation>
	<citation>375	5	375</citation>
	</citations>
	<title>Telescope1 (Algorithm 37)</title>
	<conference>CACM March, 1961</conference>
	<authors>
	<author>Brons, K. A.</author>
	</authors>
	<location>CA610307 JB March 17, 1978  12:39 AM</location>
	</document>
	<document id= '374'>
	<citations>
	<citation>374	5	374</citation>
	<citation>374	5	374</citation>
	<citation>374	5	374</citation>
	</citations>
	<title>Telescope2 (Algorithm 38)</title>
	<conference>CACM March, 1961</conference>
	<authors>
	<author>Brons, K. A.</author>
	</authors>
	<location>CA610308 JB March 17, 1978  12:38 AM</location>
	</document>
	<document id= '373'>
	<citations>
	<citation>373	5	373</citation>
	<citation>373	5	373</citation>
	<citation>373	5	373</citation>
	</citations>
	<title>Correlation Coefficients with Matrix Multiplication (Algorithm 39)</title>
	<conference>CACM March, 1961</conference>
	<authors>
	<author>Sassouni, P.</author>
	</authors>
	<location>CA610309 JB March 17, 1978  12:37 AM</location>
	</document>
	<document id= '372'>
	<citations>
	<citation>372	5	372</citation>
	<citation>372	5	372</citation>
	<citation>372	5	372</citation>
	</citations>
	<title>Critical Path Scheduling (Algorithm 40)</title>
	<conference>CACM March, 1961</conference>
	<authors>
	<author>Leavenworth, B.</author>
	</authors>
	<location>CA610310 JB March 17, 1978  12:36 AM</location>
	</document>
	<document id= '371'>
	<citations>
	<citation>371	5	371</citation>
	<citation>371	5	371</citation>
	<citation>371	5	371</citation>
	</citations>
	<title>Remarks on Algorithms 2 and 3, Algorithm 15 and Algorithms 25 and 26</title>
	<conference>CACM March, 1961</conference>
	<authors>
	<author>Wilkinson, J. H.</author>
	</authors>
	<location>CA610311 JB March 17, 1978  12:35 AM</location>
	</document>
	<document id= '370'>
	<citations>
	<citation>370	5	370</citation>
	<citation>370	5	370</citation>
	<citation>370	5	370</citation>
	</citations>
	<title>Bisection Routine (Algorithm 4)</title>
	<conference>CACM March, 1961</conference>
	<authors>
	<author>Rader, P. J.</author>
	</authors>
	<location>CA610312 JB March 17, 1978  12:33 AM</location>
	</document>
	<document id= '369'>
	<citations>
	<citation>369	5	369</citation>
	<citation>369	5	369</citation>
	<citation>369	5	369</citation>
	</citations>
	<title>Crout with Pivoting (Algorithm 16)</title>
	<conference>CACM March, 1961</conference>
	<authors>
	</authors>
	<location>CA610313 JB March 17, 1978  12:32 AM</location>
	</document>
	<document id= '368'>
	<citations>
	<citation>368	5	368</citation>
	<citation>368	5	368</citation>
	<citation>368	5	368</citation>
	</citations>
	<title>Real Zeros of an Arbitrary Function (Algorithm 25)</title>
	<conference>CACM March, 1961</conference>
	<authors>
	<author>Collinge, R. M.</author>
	</authors>
	<location>CA610314 JB March 17, 1978  12:31 AM</location>
	</document>
	<document id= '367'>
	<title>Topological Ordering of a List of Randomly-Numbered Elements of a Network</title>
	<abstract>A network of directed line segments free of circular elements is assumed.  The lines are identified  by their terminal nodes and the nodes are assumed to be numbered by a non-topological system.  Given  a list of these lines in numeric order, a simple technique can be used to create at high speed a list  in topological order.</abstract>
	<conference>CACM April, 1961</conference>
	<authors>
	<author>Lasser, D. J.</author>
	</authors>
	<location>CA610401 JB March 17, 1978  12:17 AM</location>
	<citations>
	<citation>1050	5	367</citation>
	<citation>1226	5	367</citation>
	<citation>367	5	367</citation>
	<citation>367	5	367</citation>
	<citation>367	5	367</citation>
	<citation>441	5	367</citation>
	<citation>758	5	367</citation>
	<citation>849	6	367</citation>
	<citation>106	6	367</citation>
	<citation>209	6	367</citation>
	<citation>367	6	367</citation>
	<citation>367	6	367</citation>
	<citation>367	6	367</citation>
	<citation>367	6	367</citation>
	<citation>441	6	367</citation>
	<citation>627	6	367</citation>
	</citations>
	</document>
	<document id= '366'>
	<citations>
	<citation>366	5	366</citation>
	<citation>366	5	366</citation>
	<citation>366	5	366</citation>
	</citations>
	<title>Eigenvalues of a Symmetric 3 x 3 Matrix</title>
	<conference>CACM April, 1961</conference>
	<authors>
	<author>Smith, O. K.</author>
	</authors>
	<location>CA610402 JB March 17, 1978  12:14 AM</location>
	</document>
	<document id= '365'>
	<citations>
	<citation>365	5	365</citation>
	<citation>365	5	365</citation>
	<citation>365	5	365</citation>
	</citations>
	<title>Bessel Functions of Integral Order and Complex Argument</title>
	<conference>CACM April, 1961</conference>
	<authors>
	<author>Gray, M. C.</author>
	</authors>
	<location>CA610403 JB March 17, 1978  12:13 AM</location>
	</document>
	<document id= '364'>
	<citations>
	<citation>222	4	364</citation>
	<citation>224	4	364</citation>
	<citation>267	4	364</citation>
	<citation>1134	4	364</citation>
	<citation>1139	4	364</citation>
	<citation>1141	4	364</citation>
	<citation>1141	4	364</citation>
	<citation>1215	4	364</citation>
	<citation>1223	4	364</citation>
	<citation>1647	4	364</citation>
	<citation>1781	4	364</citation>
	<citation>1787	4	364</citation>
	<citation>1792	4	364</citation>
	<citation>364	4	364</citation>
	<citation>364	4	364</citation>
	<citation>364	4	364</citation>
	<citation>364	4	364</citation>
	<citation>364	4	364</citation>
	<citation>405	4	364</citation>
	<citation>405	4	364</citation>
	<citation>438	4	364</citation>
	<citation>438	4	364</citation>
	<citation>561	4	364</citation>
	<citation>44	4	364</citation>
	<citation>763	4	364</citation>
	<citation>100	5	364</citation>
	<citation>224	5	364</citation>
	<citation>364	5	364</citation>
	<citation>364	5	364</citation>
	<citation>364	5	364</citation>
	<citation>44	5	364</citation>
	<citation>77	5	364</citation>
	<citation>98	5	364</citation>
	</citations>
	<title>On the Compilation of Subscripted Variables</title>
	<conference>CACM April, 1961</conference>
	<authors>
	<author>Nather, R. E.</author>
	</authors>
	<location>CA610404 JB March 17, 1978  12:10 AM</location>
	</document>
	<document id= '363'>
	<citations>
	<citation>363	5	363</citation>
	<citation>363	5	363</citation>
	<citation>363	5	363</citation>
	</citations>
	<title>On Approximating Transcendental Numbers by Continued Fractions</title>
	<conference>CACM April, 1961</conference>
	<authors>
	<author>Karst, E.</author>
	</authors>
	<location>CA610405 JB March 17, 1978  12:09 AM</location>
	</document>
	<document id= '362'>
	<citations>
	<citation>362	4	362</citation>
	<citation>2952	4	362</citation>
	<citation>142	5	362</citation>
	<citation>362	5	362</citation>
	<citation>362	5	362</citation>
	<citation>362	5	362</citation>
	</citations>
	<title>Table Look-At Techniques</title>
	<conference>CACM April, 1961</conference>
	<authors>
	<author>Sherman, P. M.</author>
	</authors>
	<location>CA610406 JB March 17, 1978  12:08 AM</location>
	</document>
	<document id= '361'>
	<citations>
	<citation>361	4	361</citation>
	<citation>108	5	361</citation>
	<citation>361	5	361</citation>
	<citation>361	5	361</citation>
	<citation>361	5	361</citation>
	</citations>
	<title>Programmed Error Correction on a Decimal Computer</title>
	<conference>CACM April, 1961</conference>
	<authors>
	<author>Weinberg, G. M.</author>
	</authors>
	<location>CA610407 JB March 17, 1978  12:05 AM</location>
	</document>
	<document id= '360'>
	<citations>
	<citation>1946	5	360</citation>
	<citation>360	5	360</citation>
	<citation>360	5	360</citation>
	<citation>360	5	360</citation>
	<citation>878	6	360</citation>
	<citation>902	6	360</citation>
	<citation>1093	6	360</citation>
	<citation>1177	6	360</citation>
	<citation>1387	6	360</citation>
	<citation>1393	6	360</citation>
	<citation>360	6	360</citation>
	<citation>731	6	360</citation>
	</citations>
	<title>Evaluation of Determinant (Algorithm 41)</title>
	<conference>CACM April, 1961</conference>
	<authors>
	<author>Solomon, J. G.</author>
	</authors>
	<location>CA610408 JB March 17, 1978  12:04 AM</location>
	</document>
	<document id= '359'>
	<citations>
	<citation>359	5	359</citation>
	<citation>359	5	359</citation>
	<citation>359	5	359</citation>
	</citations>
	<title>INVERT (Algorithm 42)</title>
	<conference>CACM April, 1961</conference>
	<authors>
	<author>Wood, T. C.</author>
	</authors>
	<location>CA610409 JB March 17, 1978  12:03 AM</location>
	</document>
	<document id= '358'>
	<citations>
	<citation>358	5	358</citation>
	<citation>358	5	358</citation>
	<citation>358	5	358</citation>
	</citations>
	<title>Crout with Pivoting II (Algorithm 43)</title>
	<conference>CACM April, 1961</conference>
	<authors>
	</authors>
	<location>CA610410 JB March 17, 1978  12:02 AM</location>
	</document>
	<document id= '357'>
	<citations>
	<citation>357	5	357</citation>
	<citation>357	5	357</citation>
	<citation>357	5	357</citation>
	</citations>
	<title>Bessel Functions Computed Recursively (Algorithm 44)</title>
	<conference>CACM April, 1961</conference>
	<authors>
	<author>Wojcicki, M. E.</author>
	</authors>
	<location>CA610411 JB March 17, 1978  12:01 AM</location>
	</document>
	<document id= '356'>
	<citations>
	<citation>356	5	356</citation>
	<citation>356	5	356</citation>
	<citation>356	5	356</citation>
	</citations>
	<title>INTEREST (Algorithm 45)</title>
	<conference>CACM April, 1961</conference>
	<authors>
	<author>Ingerman, P. Z.</author>
	</authors>
	<location>CA610412 JB March 17, 1978  12:00 AM</location>
	</document>
	<document id= '355'>
	<citations>
	<citation>355	5	355</citation>
	<citation>355	5	355</citation>
	<citation>355	5	355</citation>
	</citations>
	<title>Exponential of a Complex Number (Algorithm 46)</title>
	<conference>CACM April, 1961</conference>
	<authors>
	<author>Herndon, J. R.</author>
	</authors>
	<location>CA610413 JB March 16, 1978  11:59 PM</location>
	</document>
	<document id= '354'>
	<citations>
	<citation>354	5	354</citation>
	<citation>354	5	354</citation>
	<citation>354	5	354</citation>
	</citations>
	<title>Associated Legendre Functions of the First Kind for Real or Imaginary Arguments (Algorithm 47)</title>
	<conference>CACM April, 1961</conference>
	<authors>
	<author>Herndon, J. R.</author>
	</authors>
	<location>CA610414 JB March 16, 1978  11:57 PM</location>
	</document>
	<document id= '353'>
	<citations>
	<citation>353	5	353</citation>
	<citation>353	5	353</citation>
	<citation>353	5	353</citation>
	</citations>
	<title>Logarithm of A Complex Number (Algorithm 48)</title>
	<conference>CACM April, 1961</conference>
	<authors>
	<author>Herndon, J. R.</author>
	</authors>
	<location>CA610415 JB March 16, 1978  11:53 PM</location>
	</document>
	<document id= '352'>
	<citations>
	<citation>352	5	352</citation>
	<citation>352	5	352</citation>
	<citation>352	5	352</citation>
	</citations>
	<title>Spherical Neumant Function (Algorithm 49)</title>
	<conference>CACM April, 1961</conference>
	<authors>
	<author>Herndon, J. R.</author>
	</authors>
	<location>CA610416 JB March 16, 1978  11:51 PM</location>
	</document>
	<document id= '351'>
	<citations>
	<citation>351	5	351</citation>
	<citation>351	5	351</citation>
	<citation>351	5	351</citation>
	</citations>
	<title>Inverse of a Finite Segment of the Hilbert Matrix (Algorithm 50)</title>
	<conference>CACM April, 1961</conference>
	<authors>
	<author>Herndon, J. R.</author>
	</authors>
	<location>CA610417 JB March 16, 1978  11:50 PM</location>
	</document>
	<document id= '350'>
	<citations>
	<citation>350	5	350</citation>
	<citation>350	5	350</citation>
	<citation>350	5	350</citation>
	</citations>
	<title>Adjust Inverse of a Matrix When an Element is Perturbed (Algorithm 51)</title>
	<conference>CACM April, 1961</conference>
	<authors>
	<author>Herndon, J. R.</author>
	</authors>
	<location>CA610418 JB March 16, 1978  11:49 PM</location>
	</document>
	<document id= '349'>
	<citations>
	<citation>349	5	349</citation>
	<citation>349	5	349</citation>
	<citation>349	5	349</citation>
	</citations>
	<title>A Set of Test Matrices</title>
	<conference>CACM April, 1961</conference>
	<authors>
	<author>Herndon, J. R.</author>
	</authors>
	<location>CA610419 JB March 16, 1978  11:47 PM</location>
	</document>
	<document id= '348'>
	<citations>
	<citation>348	5	348</citation>
	<citation>348	5	348</citation>
	<citation>348	5	348</citation>
	</citations>
	<title>Nth Roots of a Complex Number (Algorithm 53)</title>
	<conference>CACM April, 1961</conference>
	<authors>
	<author>Herndon, J. R.</author>
	</authors>
	<location>CA610420 JB March 16, 1978  11:47 PM</location>
	</document>
	<document id= '347'>
	<citations>
	<citation>347	5	347</citation>
	<citation>347	5	347</citation>
	<citation>347	5	347</citation>
	</citations>
	<title>Gamma Function for Range 1 to 2 (Algorithm 54)</title>
	<conference>CACM April, 1961</conference>
	<authors>
	<author>Herndon, J. R.</author>
	</authors>
	<location>CA610421 JB March 16, 1978  11:45 PM</location>
	</document>
	<document id= '346'>
	<citations>
	<citation>346	5	346</citation>
	<citation>346	5	346</citation>
	<citation>346	5	346</citation>
	</citations>
	<title>Complete Elliptic Integral of the First Kind (Algorithm 55)</title>
	<conference>CACM April, 1961</conference>
	<authors>
	<author>Herndon, J. R.</author>
	</authors>
	<location>CA610422 JB March 16, 1978  11:44 PM</location>
	</document>
	<document id= '345'>
	<citations>
	<citation>345	5	345</citation>
	<citation>345	5	345</citation>
	<citation>345	5	345</citation>
	</citations>
	<title>Complete Elliptic Integral of the Second Kind (Algorithm 56)</title>
	<conference>CACM April, 1961</conference>
	<authors>
	<author>Herndon, J. R.</author>
	</authors>
	<location>CA610423 JB March 16, 197811:43 PM</location>
	</document>
	<document id= '344'>
	<citations>
	<citation>344	5	344</citation>
	<citation>344	5	344</citation>
	<citation>344	5	344</citation>
	</citations>
	<title>Ber or Bei Function (Algorithm 57)</title>
	<conference>CACM April, 1961</conference>
	<authors>
	<author>Herndon, J. R.</author>
	</authors>
	<location>CA610424 JB March 16, 1978  11:42 PM</location>
	</document>
	<document id= '343'>
	<citations>
	<citation>343	5	343</citation>
	<citation>343	5	343</citation>
	<citation>343	5	343</citation>
	</citations>
	<title>On Frequently Occurring Errors in ALGOL 60 Programs (Algorithm 25)</title>
	<conference>CACM April, 1961</conference>
	<authors>
	<author>Herndon, J.</author>
	</authors>
	<location>CA610425 JB March 16, 1978  11:40 PM</location>
	</document>
	<document id= '342'>
	<citations>
	<citation>342	5	342</citation>
	<citation>342	5	342</citation>
	<citation>342	5	342</citation>
	</citations>
	<title>Solution of Polynomial Equation by Barstow-Hitchcock (Algorithm 3)</title>
	<conference>CACM April, 1961</conference>
	<authors>
	<author>Herndon, J.</author>
	</authors>
	<location>CA610426 JB March 16, 1978  11:39 PM</location>
	</document>
	<document id= '341'>
	<citations>
	<citation>341	5	341</citation>
	<citation>341	5	341</citation>
	<citation>341	5	341</citation>
	</citations>
	<title>Chebyschev Polynomial (Algorithm 10)</title>
	<conference>CACM April, 1961</conference>
	<authors>
	<author>Herndon, J.</author>
	</authors>
	<location>CA610427 JB March 16, 1978  11:38 PM</location>
	</document>
	<document id= '340'>
	<citations>
	<citation>1611	5	340</citation>
	<citation>340	5	340</citation>
	<citation>340	5	340</citation>
	<citation>340	5	340</citation>
	<citation>1295	6	340</citation>
	<citation>340	6	340</citation>
	</citations>
	<title>Legendre Polynomial (Algorithm 13)</title>
	<conference>CACM April, 1961</conference>
	<authors>
	<author>Herndon, J.</author>
	</authors>
	<location>CA610428 JB March 16, 1978  11:37 PM</location>
	</document>
	<document id= '339'>
	<citations>
	<citation>339	5	339</citation>
	<citation>339	5	339</citation>
	<citation>339	5	339</citation>
	</citations>
	<title>Real Exponential Integral (Algorithm 20)</title>
	<conference>CACM April, 1961</conference>
	<authors>
	<author>Alexander, W. J.</author>
	</authors>
	<location>CA610429 JB March 16, 1978  11:36 PM</location>
	</document>
	<document id= '338'>
	<citations>
	<citation>338	5	338</citation>
	<citation>338	5	338</citation>
	<citation>338	5	338</citation>
	</citations>
	<title>GROUT II (Algorithm 43)</title>
	<conference>CACM April, 1961</conference>
	<authors>
	</authors>
	<location>CA610430 JB March 16, 1978  11:35 PM</location>
	</document>
	<document id= '337'>
	<citations>
	<citation>337	5	337</citation>
	<citation>337	5	337</citation>
	<citation>337	5	337</citation>
	</citations>
	<title>Further Survey of Punched Card Codes</title>
	<conference>CACM April, 1961</conference>
	<authors>
	<author>Ross, H. M.</author>
	</authors>
	<location>CA610431 JB March 16, 1978  11:34 PM</location>
	</document>
	<document id= '336'>
	<citations>
	<citation>336	5	336</citation>
	<citation>336	5	336</citation>
	<citation>336	5	336</citation>
	</citations>
	<title>A Practical Technique for the Determination of the Optimum Relaxation Factor of the Successive  Over-Relaxation Method</title>
	<conference>CACM April, 1961</conference>
	<authors>
	<author>Kulsrud, H. E.</author>
	</authors>
	<location>CA610432 JB March 16, 1978  11:27 PM</location>
	</document>
	<document id= '335'>
	<title>Some Numerical Experiments Using Newton's Method for Nonlinear Parabolic and EllipticBoundary-Value  Problems</title>
	<abstract>Using a generalization of Newton's method, a nonlinear parabolic equation of the form U(t)-U(xx)=g(U)  and a nonlinear elliptic equation U(xx)+U(yy)=exp(U) are solved numerically Comparison of these results  with results obtained using the Picard iteration procedure show that in many cases the quisi linearization  method offers substantial advantages in both time and accuracy.</abstract>
	<conference>CACM April, 1961</conference>
	<authors>
	<author>Bellman, R.</author>
	<author>Juncosa, M. L.</author>
	<author>Kalaba, R.</author>
	</authors>
	<location>CA610433 JB March 16, 1978  11:20 PM</location>
	<citations>
	<citation>335	5	335</citation>
	<citation>335	5	335</citation>
	<citation>335	5	335</citation>
	</citations>
	</document>
	<document id= '334'>
	<citations>
	<citation>334	5	334</citation>
	<citation>334	5	334</citation>
	<citation>334	5	334</citation>
	</citations>
	<title>Division and Square Root in the Quater-Imaginary Number System</title>
	<conference>CACM April, 1961</conference>
	<authors>
	<author>Nadler, M.</author>
	</authors>
	<location>CA610334 JB March 16, 1978  11:16 PM</location>
	</document>
	<document id= '333'>
	<citations>
	<citation>333	4	333</citation>
	<citation>230	5	333</citation>
	<citation>333	5	333</citation>
	<citation>333	5	333</citation>
	<citation>333	5	333</citation>
	</citations>
	<title>Design of an Improved* Transmission/Data Processing Code</title>
	<conference>CACM May, 1961</conference>
	<authors>
	<author>Bemer, R. W.</author>
	</authors>
	<location>CA610501 JB March 16, 1978  11:14 PM</location>
	</document>
	<document id= '332'>
	<title>An Indirect Chaining Method for Addressing on Secondary Keys</title>
	<abstract>Methods for entering random access files on the basis of one key are briefly surveyed.  The  widely used chaining method, based on a pseudo-random key transformation, is reviewed in more detail.   An efficient generalization of the chaining method which permits recovery on additional keys is then  presented.</abstract>
	<conference>CACM May, 1961</conference>
	<authors>
	<author>Johnson, L. R.</author>
	</authors>
	<location>CA610502 JB March 16, 1978  11:13 PM</location>
	<citations>
	<citation>911	5	332</citation>
	<citation>1271	5	332</citation>
	<citation>1785	5	332</citation>
	<citation>332	5	332</citation>
	<citation>332	5	332</citation>
	<citation>332	5	332</citation>
	<citation>2543	5	332</citation>
	<citation>2552	5	332</citation>
	<citation>911	6	332</citation>
	<citation>911	6	332</citation>
	<citation>1785	6	332</citation>
	<citation>1785	6	332</citation>
	<citation>1786	6	332</citation>
	<citation>1973	6	332</citation>
	<citation>332	6	332</citation>
	<citation>332	6	332</citation>
	<citation>332	6	332</citation>
	<citation>332	6	332</citation>
	<citation>332	6	332</citation>
	<citation>2107	6	332</citation>
	<citation>2109	6	332</citation>
	<citation>2203	6	332</citation>
	<citation>492	6	332</citation>
	<citation>492	6	332</citation>
	</citations>
	</document>
	<document id= '331'>
	<citations>
	<citation>331	5	331</citation>
	<citation>331	5	331</citation>
	<citation>331	5	331</citation>
	</citations>
	<title>Successive Approximations and Computer Storage Problems in Ordinary Differential Equations</title>
	<conference>CACM May, 1961</conference>
	<authors>
	<author>Bellman, R.</author>
	</authors>
	<location>CA610503 JB March 16, 1978  11:10 PM</location>
	</document>
	<document id= '330'>
	<citations>
	<citation>330	5	330</citation>
	<citation>330	5	330</citation>
	<citation>330	5	330</citation>
	</citations>
	<title>A Method for Evaluating the Area of the Normal Function</title>
	<conference>CACM May, 1961</conference>
	<authors>
	<author>Baker, F. B.</author>
	</authors>
	<location>CA610504 JB March 16, 1978  11:09 PM</location>
	</document>
	<document id= '329'>
	<title>Automatic Abstracting and Indexing Survey and Recommendations</title>
	<abstract>In preparation for the widespread use of automatic scanners which will read documents and transmit  their contents to other machines for analysis, this report presents a new concept in automatic analysis:  the relative-frequency approach to measuring  the significance of words, word groups, and sentences.   The relative-frequency approach is discussed in detail, as is its application to problems of automatic  indexing and automatic abstracting.  Included in the report is a summary of automatic analysis studies  published as of the date of writing.  Conclusions are that point toward more sophisticated mathematical  and linguistic techniques for the solution of problems of automatic analysis.</abstract>
	<conference>CACM May, 1961</conference>
	<authors>
	<author>Edmundson, H. P.</author>
	<author>Wyllys, R. E.</author>
	</authors>
	<location>CA610505 JB March 16, 1978  11:08 PM</location>
	<citations>
	<citation>1087	5	329</citation>
	<citation>329	5	329</citation>
	<citation>329	5	329</citation>
	<citation>329	5	329</citation>
	<citation>634	5	329</citation>
	<citation>329	6	329</citation>
	<citation>329	6	329</citation>
	</citations>
	</document>
	<document id= '328'>
	<citations>
	<citation>328	5	328</citation>
	<citation>328	5	328</citation>
	<citation>328	5	328</citation>
	</citations>
	<title>Matrix Inversion (ALgorithm 58)</title>
	<conference>CACM May, 1961</conference>
	<authors>
	<author>Cohen, D.</author>
	</authors>
	<location>CA610506 JB March 16, 1978  11:03 PM</location>
	</document>
	<document id= '327'>
	<citations>
	<citation>1667	5	327</citation>
	<citation>327	5	327</citation>
	<citation>327	5	327</citation>
	<citation>327	5	327</citation>
	<citation>178	6	327</citation>
	<citation>1242	6	327</citation>
	<citation>327	6	327</citation>
	</citations>
	<title>Zeros of a Real Polynomial by Resultant Procedure (Algorithm 59)</title>
	<conference>CACM May, 1961</conference>
	<authors>
	<author>Bareiss, E. H.</author>
	<author>Fisherkeller, M. A.</author>
	</authors>
	<location>CA610507 JB March 16, 1978  11:01 PM</location>
	</document>
	<document id= '326'>
	<citations>
	<citation>326	5	326</citation>
	<citation>326	5	326</citation>
	<citation>326	5	326</citation>
	</citations>
	<title>MATHSORT (Algorithm 23)</title>
	<conference>CACM May, 1961</conference>
	<authors>
	<author>Ranshaw, R. W.</author>
	</authors>
	<location>CA610508 JB March 16, 1978  10:59 PM</location>
	</document>
	<document id= '325'>
	<citations>
	<citation>325	5	325</citation>
	<citation>325	5	325</citation>
	<citation>325	5	325</citation>
	</citations>
	<title>Numerical Solution of the Polynomial Equation (Algorithm 30)</title>
	<conference>CACM May, 1961</conference>
	<authors>
	<author>Alexander, W. J.</author>
	</authors>
	<location>CA610509 JB March 16, 1978  10:58 PM</location>
	</document>
	<document id= '324'>
	<citations>
	<citation>1352	5	324</citation>
	<citation>1982	5	324</citation>
	<citation>324	5	324</citation>
	<citation>324	5	324</citation>
	<citation>324	5	324</citation>
	<citation>2040	5	324</citation>
	<citation>1	6	324</citation>
	<citation>834	6	324</citation>
	<citation>872	6	324</citation>
	<citation>1040	6	324</citation>
	<citation>1092	6	324</citation>
	<citation>1241	6	324</citation>
	<citation>1241	6	324</citation>
	<citation>1273	6	324</citation>
	<citation>1273	6	324</citation>
	<citation>1273	6	324</citation>
	<citation>1352	6	324</citation>
	<citation>1356	6	324</citation>
	<citation>1883	6	324</citation>
	<citation>324	6	324</citation>
	<citation>324	6	324</citation>
	<citation>324	6	324</citation>
	<citation>429	6	324</citation>
	<citation>570	6	324</citation>
	<citation>621	6	324</citation>
	<citation>621	6	324</citation>
	<citation>786	6	324</citation>
	</citations>
	<title>Romberg Integration (Algorithm 60)</title>
	<conference>CACM June, 1961</conference>
	<authors>
	<author>Bauer, F. L.</author>
	</authors>
	<location>CA610601 JB March 16, 1978  10:57 PM</location>
	</document>
	<document id= '323'>
	<citations>
	<citation>323	4	323</citation>
	<citation>689	4	323</citation>
	<citation>1349	5	323</citation>
	<citation>217	5	323</citation>
	<citation>323	5	323</citation>
	<citation>323	5	323</citation>
	<citation>323	5	323</citation>
	<citation>689	5	323</citation>
	<citation>217	6	323</citation>
	<citation>236	6	323</citation>
	<citation>323	6	323</citation>
	<citation>323	6	323</citation>
	<citation>83	6	323</citation>
	<citation>415	6	323</citation>
	<citation>3197	6	323</citation>
	</citations>
	<title>The State of Digital Computer Technology in Europe</title>
	<conference>CACM June, 1961</conference>
	<authors>
	<author>Blachman, N. M.</author>
	</authors>
	<location>CA610602 JB March 16, 1978  10:56 PM</location>
	</document>
	<document id= '322'>
	<title>Operational Compatibility of Systems-CONVENTIONS</title>
	<abstract>The General Standards Committee of the SHARE organization has devoted considerable effort to  the problem of operating a computer efficiently in view of the growing number of programming systems  available.  Each of these programming systems has been coded to utilize a fixed set of hardware components  without recognizing the fact that others may be occupying a storage medium required by the first.  These  incompatibilities are currently resolved by manually setting up the computer for each system as required.   The following set of conventions is being considered to minimize computer set-up time.  They are of  sufficiently broad interest that we feel other computer users should be aware of them. -George F. Ryckman,  Chairman</abstract>
	<conference>CACM June, 1961</conference>
	<authors>
	<author>Bright, H. S.</author>
	</authors>
	<location>CA610603 JB March 16, 1978  10:55 PM</location>
	<citations>
	<citation>322	5	322</citation>
	<citation>322	5	322</citation>
	<citation>322	5	322</citation>
	</citations>
	</document>
	<document id= '321'>
	<title>ALGOL 60 Confidential</title>
	<abstract>The ALGOL 60 Report,* when first encountered, seems to describe a very complex language which  will be difficult to learn.  The "metalinguistic formulae" admirably serve the purpose of precisely specifying  a language, but they are certainly not very readable for a beginner.  However, experience has shown that  once the report is explained it is in fact easy to learn ALGOL and to write algorithms in it.  The language  is so general and powerful it can handle an enormous class of problems.  It is not hard to learn those  parts of ALGOL present in other compiler languages: how to write assignment and go to and for statements,  etc.  Indeed, a lot of the unnecessary restrictions imposed by other compiling languages have finally  been lifted.  But ALGOL also allows many unobvious things to be written, as we will see later, and herein  lies a problem: ALGOL seems to have become too general.  So many restrictions have been lifted that a  lot of technical details crop up which are hard to learn and to use correctly.  In this paper some of  the more obscure features of the language are considered and their usefulness is discussed.  Remarks  are based on the authors' interpretations of the ALGOL 60 Report.</abstract>
	<conference>CACM June, 1961</conference>
	<authors>
	<author>Knuth, D. E.</author>
	<author>Merner, J. N.</author>
	</authors>
	<location>CA610604 JB March 16, 1978  10:48 PM</location>
	<citations>
	<citation>249	4	321</citation>
	<citation>254	4	321</citation>
	<citation>272	4	321</citation>
	<citation>1102	4	321</citation>
	<citation>1109	4	321</citation>
	<citation>1140	4	321</citation>
	<citation>1188	4	321</citation>
	<citation>1234	4	321</citation>
	<citation>1234	4	321</citation>
	<citation>1306	4	321</citation>
	<citation>1464	4	321</citation>
	<citation>1491	4	321</citation>
	<citation>1767	4	321</citation>
	<citation>1781	4	321</citation>
	<citation>1787	4	321</citation>
	<citation>1949	4	321</citation>
	<citation>321	4	321</citation>
	<citation>321	4	321</citation>
	<citation>321	4	321</citation>
	<citation>321	4	321</citation>
	<citation>2059	4	321</citation>
	<citation>2126	4	321</citation>
	<citation>435	4	321</citation>
	<citation>437	4	321</citation>
	<citation>463	4	321</citation>
	<citation>483	4	321</citation>
	<citation>491	4	321</citation>
	<citation>2732	4	321</citation>
	<citation>560	4	321</citation>
	<citation>583	4	321</citation>
	<citation>3073	4	321</citation>
	<citation>627	4	321</citation>
	<citation>631	4	321</citation>
	<citation>632	4	321</citation>
	<citation>642	4	321</citation>
	<citation>644	4	321</citation>
	<citation>653	4	321</citation>
	<citation>680	4	321</citation>
	<citation>761	4	321</citation>
	<citation>762	4	321</citation>
	<citation>763	4	321</citation>
	<citation>123	4	321</citation>
	<citation>140	4	321</citation>
	<citation>919	4	321</citation>
	<citation>989	4	321</citation>
	<citation>196	5	321</citation>
	<citation>1234	5	321</citation>
	<citation>254	5	321</citation>
	<citation>321	5	321</citation>
	<citation>321	5	321</citation>
	<citation>321	5	321</citation>
	<citation>400	5	321</citation>
	<citation>401	5	321</citation>
	<citation>402	5	321</citation>
	<citation>196	6	321</citation>
	<citation>944	6	321</citation>
	<citation>321	6	321</citation>
	<citation>321	6	321</citation>
	<citation>385	6	321</citation>
	<citation>387	6	321</citation>
	<citation>400	6	321</citation>
	<citation>402	6	321</citation>
	<citation>404	6	321</citation>
	<citation>3184	6	321</citation>
	<citation>729	6	321</citation>
	</citations>
	</document>
	<document id= '320'>
	<title>Logic-Structure Tables</title>
	<abstract>Logic tables are an excellent way of developing and expressing the logic required in procedures,  operations, systems and circuits.  A set of rules for writing and using logic tables is explained by  means of some simple examples.  Then the logic structure of a vending machine is given in which two logic  tables are used.  Logic tables are two-dimensional in nature, enabling us to fully express and consider  both the sequential and parallel aspects of logic.  They can be compiled directly into a computer program  and so eliminate the need for flow charting and hand coding.</abstract>
	<conference>CACM June, 1961</conference>
	<authors>
	<author>Cantrell, H. N.</author>
	<author>King, J.</author>
	<author>King, F. E. H.</author>
	</authors>
	<location>CA610605 JB March 16, 1978  10:40 PM</location>
	<citations>
	<citation>1237	5	320</citation>
	<citation>250	5	320</citation>
	<citation>320	5	320</citation>
	<citation>320	5	320</citation>
	<citation>320	5	320</citation>
	<citation>250	6	320</citation>
	<citation>320	6	320</citation>
	<citation>320	6	320</citation>
	<citation>753	6	320</citation>
	</citations>
	</document>
	<document id= '319'>
	<title>On a Class of Iteration Formulas and Some Historical Notes</title>
	<abstract>The class of iteration formulas obtainable by rational approximations of "Euler's formula"  is derived with the corresponding error estimates.  Some historical notes on iterative procedures are  followed by a derivation of Euler's formula with the associated error estimate in a new notation which  simplifies the error estimate and suggests generalizations.  The final section considers the Pade approximants  to the "Euler polynomial" and shows how a number of known formulas may be derived from this unified approach.   There is a short discussion of the "best" formula.</abstract>
	<conference>CACM June, 1961</conference>
	<authors>
	<author>Traub, J. F.</author>
	</authors>
	<location>CA610606 JB March 16, 1978  10:36 PM</location>
	<citations>
	<citation>319	4	319</citation>
	<citation>319	5	319</citation>
	<citation>319	5	319</citation>
	<citation>319	5	319</citation>
	<citation>380	5	319</citation>
	</citations>
	</document>
	<document id= '318'>
	<citations>
	<citation>318	5	318</citation>
	<citation>318	5	318</citation>
	<citation>318	5	318</citation>
	</citations>
	<title>Combat Vehicle Firing Stability (Active Suspension)</title>
	<conference>CACM June, 1961</conference>
	<authors>
	<author>Fischer, C. M.</author>
	</authors>
	<location>CA610607 JB March 16, 1978  10:32 PM</location>
	</document>
	<document id= '317'>
	<citations>
	<citation>317	5	317</citation>
	<citation>317	5	317</citation>
	<citation>317	5	317</citation>
	<citation>497	5	317</citation>
	<citation>867	5	317</citation>
	<citation>317	6	317</citation>
	<citation>317	6	317</citation>
	<citation>497	6	317</citation>
	</citations>
	<title>On The Approximation of Curves by Line Segments Using Dynamic Programming</title>
	<conference>CACM June, 1961</conference>
	<authors>
	<author>Bellman, R.</author>
	</authors>
	<location>CA610608 JB March 16, 1978  10:31 PM</location>
	</document>
	<document id= '316'>
	<citations>
	<citation>1072	5	316</citation>
	<citation>1781	5	316</citation>
	<citation>316	5	316</citation>
	<citation>316	5	316</citation>
	<citation>316	5	316</citation>
	<citation>123	6	316</citation>
	<citation>196	6	316</citation>
	<citation>919	6	316</citation>
	<citation>990	6	316</citation>
	<citation>1007	6	316</citation>
	<citation>1046	6	316</citation>
	<citation>1131	6	316</citation>
	<citation>1139	6	316</citation>
	<citation>1140	6	316</citation>
	<citation>1149	6	316</citation>
	<citation>1198	6	316</citation>
	<citation>1215	6	316</citation>
	<citation>1223	6	316</citation>
	<citation>1265	6	316</citation>
	<citation>1303	6	316</citation>
	<citation>1323	6	316</citation>
	<citation>1358	6	316</citation>
	<citation>1366	6	316</citation>
	<citation>1421	6	316</citation>
	<citation>1460	6	316</citation>
	<citation>1462	6	316</citation>
	<citation>1463	6	316</citation>
	<citation>1467	6	316</citation>
	<citation>1468	6	316</citation>
	<citation>1477	6	316</citation>
	<citation>1491	6	316</citation>
	<citation>1496	6	316</citation>
	<citation>1531	6	316</citation>
	<citation>1535	6	316</citation>
	<citation>1565	6	316</citation>
	<citation>1601	6	316</citation>
	<citation>1602	6	316</citation>
	<citation>1613	6	316</citation>
	<citation>1614	6	316</citation>
	<citation>1626	6	316</citation>
	<citation>1641	6	316</citation>
	<citation>1787	6	316</citation>
	<citation>1788	6	316</citation>
	<citation>205	6	316</citation>
	<citation>224	6	316</citation>
	<citation>249	6	316</citation>
	<citation>288	6	316</citation>
	<citation>316	6	316</citation>
	<citation>316	6	316</citation>
	<citation>381	6	316</citation>
	<citation>398	6	316</citation>
	<citation>11	6	316</citation>
	<citation>404	6	316</citation>
	<citation>410	6	316</citation>
	<citation>463	6	316</citation>
	<citation>464	6	316</citation>
	<citation>483	6	316</citation>
	<citation>3184	6	316</citation>
	<citation>3188	6	316</citation>
	<citation>584	6	316</citation>
	<citation>600	6	316</citation>
	<citation>680	6	316</citation>
	<citation>691	6	316</citation>
	<citation>763	6	316</citation>
	<citation>799	6	316</citation>
	</citations>
	<title>An Algorithm for Equivalence Declarations</title>
	<conference>CACM July, 1961</conference>
	<authors>
	<author>Arden, B. W.</author>
	<author>Galler, A.</author>
	<author>Graham, R. M.</author>
	</authors>
	<location>CA610701 JB March 16, 1978  10:29 PM</location>
	</document>
	<document id= '315'>
	<citations>
	<citation>315	5	315</citation>
	<citation>315	5	315</citation>
	<citation>315	5	315</citation>
	</citations>
	<title>Solution of Tridiagonal Matrices</title>
	<conference>CACM July, 1961</conference>
	<authors>
	<author>Wenrick, R. C.</author>
	</authors>
	<location>CA610702 JB March 16, 1978  10:28 PM</location>
	</document>
	<document id= '314'>
	<citations>
	<citation>314	5	314</citation>
	<citation>314	5	314</citation>
	<citation>314	5	314</citation>
	</citations>
	<title>A Divisionless Method of Integer Conversion</title>
	<conference>CACM July, 1961</conference>
	<authors>
	<author>Clarkson, W. K.</author>
	<author>Prince, B. M.</author>
	</authors>
	<location>CA610703 JB March 16, 1978  10:27 PM</location>
	</document>
	<document id= '313'>
	<citations>
	<citation>313	5	313</citation>
	<citation>313	5	313</citation>
	<citation>313	5	313</citation>
	</citations>
	<title>An Iterative Method for Inversion of Power Series</title>
	<conference>CACM July, 1961</conference>
	<authors>
	<author>Bramhall, J. N.</author>
	</authors>
	<location>CA610704 JB March 16, 1978  10:26 PM</location>
	</document>
	<document id= '312'>
	<citations>
	<citation>312	5	312</citation>
	<citation>312	5	312</citation>
	<citation>312	5	312</citation>
	</citations>
	<title>A Further Note on Approximating e^x</title>
	<conference>CACM July, 1961</conference>
	<authors>
	<author>Olivier, D.</author>
	</authors>
	<location>CA610705 JB March 16, 1978  10:26 PM</location>
	</document>
	<document id= '311'>
	<citations>
	<citation>1524	5	311</citation>
	<citation>1931	5	311</citation>
	<citation>311	5	311</citation>
	<citation>311	5	311</citation>
	<citation>311	5	311</citation>
	<citation>2214	5	311</citation>
	<citation>2544	5	311</citation>
	<citation>879	6	311</citation>
	<citation>1177	6	311</citation>
	<citation>1197	6	311</citation>
	<citation>1524	6	311</citation>
	<citation>311	6	311</citation>
	<citation>311	6	311</citation>
	<citation>311	6	311</citation>
	<citation>311	6	311</citation>
	<citation>2214	6	311</citation>
	</citations>
	<title>Procedures for Range Arithmetic (Algorithm 61)</title>
	<conference>CACM July, 1961</conference>
	<authors>
	<author>Gibb, A.</author>
	</authors>
	<location>CA610706 JB March 16, 1978  10:25 PM</location>
	</document>
	<document id= '310'>
	<citations>
	<citation>1222	5	310</citation>
	<citation>310	5	310</citation>
	<citation>310	5	310</citation>
	<citation>310	5	310</citation>
	<citation>1130	6	310</citation>
	<citation>245	6	310</citation>
	<citation>310	6	310</citation>
	</citations>
	<title>A Set of Associate Legendre Polynomials of the Second Kind (Algorithm 62)</title>
	<conference>CACM July, 1961</conference>
	<authors>
	<author>Herndon, J. R.</author>
	</authors>
	<location>CA610707 JB March 16, 1978  10:23 PM</location>
	</document>
	<document id= '309'>
	<citations>
	<citation>1919	5	309</citation>
	<citation>309	5	309</citation>
	<citation>309	5	309</citation>
	<citation>309	5	309</citation>
	<citation>2191	5	309</citation>
	<citation>2388	5	309</citation>
	<citation>2783	5	309</citation>
	<citation>2784	5	309</citation>
	<citation>3054	5	309</citation>
	<citation>3121	5	309</citation>
	<citation>864	5	309</citation>
	<citation>864	6	309</citation>
	<citation>1175	6	309</citation>
	<citation>1175	6	309</citation>
	<citation>1312	6	309</citation>
	<citation>1729	6	309</citation>
	<citation>232	6	309</citation>
	<citation>1880	6	309</citation>
	<citation>1919	6	309</citation>
	<citation>1969	6	309</citation>
	<citation>1980	6	309</citation>
	<citation>1997	6	309</citation>
	<citation>307	6	309</citation>
	<citation>307	6	309</citation>
	<citation>308	6	309</citation>
	<citation>308	6	309</citation>
	<citation>308	6	309</citation>
	<citation>308	6	309</citation>
	<citation>308	6	309</citation>
	<citation>309	6	309</citation>
	<citation>309	6	309</citation>
	<citation>309	6	309</citation>
	<citation>309	6	309</citation>
	<citation>309	6	309</citation>
	<citation>309	6	309</citation>
	<citation>309	6	309</citation>
	<citation>309	6	309</citation>
	<citation>2017	6	309</citation>
	<citation>2456	6	309</citation>
	<citation>2679	6	309</citation>
	<citation>2709	6	309</citation>
	<citation>74	6	309</citation>
	<citation>74	6	309</citation>
	<citation>2783	6	309</citation>
	<citation>3187	6	309</citation>
	<citation>776	6	309</citation>
	</citations>
	<title>PARTITION (Algorithm 63)</title>
	<conference>CACM July, 1961</conference>
	<authors>
	<author>Hoare, C. A. R.</author>
	</authors>
	<location>CA610708 JB March 16, 1978  10:22 PM</location>
	</document>
	<document id= '308'>
	<citations>
	<citation>1175	5	308</citation>
	<citation>1919	5	308</citation>
	<citation>1969	5	308</citation>
	<citation>1997	5	308</citation>
	<citation>308	5	308</citation>
	<citation>308	5	308</citation>
	<citation>308	5	308</citation>
	<citation>2191	5	308</citation>
	<citation>2388	5	308</citation>
	<citation>2679	5	308</citation>
	<citation>3054	5	308</citation>
	<citation>3121	5	308</citation>
	<citation>864	6	308</citation>
	<citation>864	6	308</citation>
	<citation>970	6	308</citation>
	<citation>1175	6	308</citation>
	<citation>1175	6	308</citation>
	<citation>1175	6	308</citation>
	<citation>1175	6	308</citation>
	<citation>1190	6	308</citation>
	<citation>1228	6	308</citation>
	<citation>1312	6	308</citation>
	<citation>1880	6	308</citation>
	<citation>1919	6	308</citation>
	<citation>1969	6	308</citation>
	<citation>1969	6	308</citation>
	<citation>1969	6	308</citation>
	<citation>1980	6	308</citation>
	<citation>1997	6	308</citation>
	<citation>1997	6	308</citation>
	<citation>307	6	308</citation>
	<citation>308	6	308</citation>
	<citation>308	6	308</citation>
	<citation>308	6	308</citation>
	<citation>308	6	308</citation>
	<citation>308	6	308</citation>
	<citation>308	6	308</citation>
	<citation>308	6	308</citation>
	<citation>308	6	308</citation>
	<citation>308	6	308</citation>
	<citation>309	6	308</citation>
	<citation>309	6	308</citation>
	<citation>309	6	308</citation>
	<citation>309	6	308</citation>
	<citation>309	6	308</citation>
	<citation>2017	6	308</citation>
	<citation>2042	6	308</citation>
	<citation>2456	6	308</citation>
	<citation>2679	6	308</citation>
	<citation>2709	6	308</citation>
	<citation>74	6	308</citation>
	<citation>3187	6	308</citation>
	<citation>3187	6	308</citation>
	<citation>507	6	308</citation>
	<citation>716	6	308</citation>
	<citation>776	6	308</citation>
	<citation>783	6	308</citation>
	</citations>
	<title>QUICKSORT (Algorithm 64)</title>
	<conference>CACM July, 1961</conference>
	<authors>
	<author>Hoare, C. A. R.</author>
	</authors>
	<location>CA610709 JB March 16, 1978  10:21 PM</location>
	</document>
	<document id= '307'>
	<citations>
	<citation>307	5	307</citation>
	<citation>307	5	307</citation>
	<citation>307	5	307</citation>
	<citation>2227	5	307</citation>
	<citation>2783	5	307</citation>
	<citation>3054	5	307</citation>
	<citation>1175	6	307</citation>
	<citation>1834	6	307</citation>
	<citation>1880	6	307</citation>
	<citation>1919	6	307</citation>
	<citation>1969	6	307</citation>
	<citation>1980	6	307</citation>
	<citation>1997	6	307</citation>
	<citation>307	6	307</citation>
	<citation>307	6	307</citation>
	<citation>307	6	307</citation>
	<citation>308	6	307</citation>
	<citation>309	6	307</citation>
	<citation>309	6	307</citation>
	<citation>2017	6	307</citation>
	<citation>2679	6	307</citation>
	<citation>776	6	307</citation>
	</citations>
	<title>FIND (Algorithm 65)</title>
	<conference>CACM July, 1961</conference>
	<authors>
	<author>Hoare, C. A. R.</author>
	</authors>
	<location>CA610710 JB March 16, 1978  10:20 PM</location>
	</document>
	<document id= '306'>
	<citations>
	<citation>306	5	306</citation>
	<citation>306	5	306</citation>
	<citation>306	5	306</citation>
	</citations>
	<title>INVRS (Algorithm 66)</title>
	<conference>CACM July, 1961</conference>
	<authors>
	<author>Caffery, J.</author>
	</authors>
	<location>CA610711 JB March 16, 1978  10:19 PM</location>
	</document>
	<document id= '305'>
	<citations>
	<citation>305	5	305</citation>
	<citation>305	5	305</citation>
	<citation>305	5	305</citation>
	</citations>
	<title>CRAM (Algorithm 67)</title>
	<conference>CACM July, 1961</conference>
	<authors>
	<author>Caffrey, J.</author>
	</authors>
	<location>CA610712 JB March 16, 1978  10:18 PM</location>
	</document>
	<document id= '304'>
	<citations>
	<citation>304	5	304</citation>
	<citation>304	5	304</citation>
	<citation>304	5	304</citation>
	</citations>
	<title>Nth Roots of a Complex Number (Algorithm 53)</title>
	<conference>CACM July, 1961</conference>
	<authors>
	</authors>
	<location>CA610713 JB March 16, 1978  10:17 PM</location>
	</document>
	<document id= '303'>
	<title>Some Basic Terminology Connected With Mechanical Languages and Their Processors</title>
	<abstract>The suggestions in this paper are part of the terminology used in work for the University of  Pennsylvania's Office of computer Research and Education.  The work is jointly supported by the National  Science Foundation and the Air Force Office of Scientific Research.</abstract>
	<conference>CACM August, 1961</conference>
	<authors>
	<author>Gorn, S.</author>
	</authors>
	<location>CA610801 JB March 16, 1978  10:16 PM</location>
	<citations>
	<citation>249	5	303</citation>
	<citation>303	5	303</citation>
	<citation>303	5	303</citation>
	<citation>303	5	303</citation>
	<citation>438	5	303</citation>
	<citation>3185	5	303</citation>
	<citation>196	6	303</citation>
	<citation>224	6	303</citation>
	<citation>249	6	303</citation>
	<citation>303	6	303</citation>
	<citation>303	6	303</citation>
	<citation>303	6	303</citation>
	<citation>51	6	303</citation>
	<citation>77	6	303</citation>
	<citation>438	6	303</citation>
	</citations>
	</document>
	<document id= '302'>
	<citations>
	<citation>302	5	302</citation>
	<citation>302	5	302</citation>
	<citation>302	5	302</citation>
	</citations>
	<title>Augmentation (Algorithm 68)</title>
	<conference>CACM August, 1961</conference>
	<authors>
	<author>Rice, H. G.</author>
	</authors>
	<location>CA610802 JB March 16, 1978  10:14 PM</location>
	</document>
	<document id= '301'>
	<citations>
	<citation>301	5	301</citation>
	<citation>301	5	301</citation>
	<citation>301	5	301</citation>
	</citations>
	<title>A Set of Test Matrices (Algorithm 52)</title>
	<conference>CACM August, 1961</conference>
	<authors>
	<author>Gilbert, H. E.</author>
	</authors>
	<location>CA610803 JB March 16, 1978  10:13 PM</location>
	</document>
	<document id= '300'>
	<title>COBOL: A Sample Problem</title>
	<abstract>A simplified Merchandise Control problem has been chosen for presenting COBOL to users and  potential users of computing systems.  A mythical department store, "E. Language Bros., Inc.", is programming  in the COBOL language one of the many runs on its computer.</abstract>
	<conference>CACM August, 1961</conference>
	<authors>
	<author>Mackinson, T. N.</author>
	</authors>
	<location>CA610804 JB March 16, 1978  10:12 PM</location>
	<citations>
	<citation>300	5	300</citation>
	<citation>300	5	300</citation>
	<citation>300	5	300</citation>
	<citation>638	5	300</citation>
	<citation>300	6	300</citation>
	</citations>
	</document>
	<document id= '299'>
	<citations>
	<citation>299	5	299</citation>
	<citation>299	5	299</citation>
	<citation>299	5	299</citation>
	<citation>2146	5	299</citation>
	<citation>479	5	299</citation>
	<citation>862	5	299</citation>
	<citation>863	5	299</citation>
	<citation>861	6	299</citation>
	<citation>862	6	299</citation>
	<citation>863	6	299</citation>
	<citation>264	6	299</citation>
	<citation>299	6	299</citation>
	<citation>299	6	299</citation>
	<citation>299	6	299</citation>
	<citation>299	6	299</citation>
	<citation>479	6	299</citation>
	</citations>
	<title>A Generalized Polyphase Merge Algorithm</title>
	<conference>CACM August, 1961</conference>
	<authors>
	<author>Reynolds, S. W.</author>
	</authors>
	<location>CA610805 JB March 16, 1978  10:10 PM</location>
	</document>
	<document id= '298'>
	<title>A 48-Bit Pseudo-Random Number Generator</title>
	<abstract>A new 48-bit pseudo-random number generator, suitable for several computers, was tested statistically  for randomness to determine its adequacy for use in Monte Carlo programs.  Frequency tests, distributions  of certain low-order moments, runs up and down, and runs above and below the mean were applied to one-half  million generated numbers lying within the interval (0,1) and to three sets of integers obtained from  specified bits within the generated numbers.  These tests substantiated the randomness of all numbers  except for the set of integers coming from the least significant bits.</abstract>
	<conference>CACM August, 1961</conference>
	<authors>
	<author>Kuehn, H. G.</author>
	</authors>
	<location>CA610806 JB March 16, 1978  10:09 PM</location>
	<citations>
	<citation>298	5	298</citation>
	<citation>298	5	298</citation>
	<citation>298	5	298</citation>
	</citations>
	</document>
	<document id= '297'>
	<citations>
	<citation>297	4	297</citation>
	<citation>122	5	297</citation>
	<citation>297	5	297</citation>
	<citation>297	5	297</citation>
	<citation>297	5	297</citation>
	</citations>
	<title>A Note on Fitting Great Circles by Least Squares</title>
	<conference>CACM August, 1961</conference>
	<authors>
	<author>Marcus, C. F.</author>
	</authors>
	<location>CA610807 JB March 16, 1978  10:05 PM</location>
	</document>
	<document id= '296'>
	<citations>
	<citation>1393	5	296</citation>
	<citation>296	5	296</citation>
	<citation>296	5	296</citation>
	<citation>296	5	296</citation>
	<citation>106	6	296</citation>
	<citation>296	6	296</citation>
	<citation>731	6	296</citation>
	</citations>
	<title>A Note on Multiple Precision Arithmetic</title>
	<conference>CACM August, 1961</conference>
	<authors>
	<author>Cox, A. G.</author>
	<author>Luther, H. A.</author>
	</authors>
	<location>CA610808 JB March 16, 1978  10:04 PM</location>
	</document>
	<document id= '295'>
	<citations>
	<citation>295	5	295</citation>
	<citation>295	5	295</citation>
	<citation>295	5	295</citation>
	</citations>
	<title>Rational Approximations for the Error Function and for Similar Functions</title>
	<conference>CACM August, 1961</conference>
	<authors>
	<author>Clendenin, W. W.</author>
	</authors>
	<location>CA610809 JB March 16, 1978  10:03 PM</location>
	</document>
	<document id= '294'>
	<citations>
	<citation>294	5	294</citation>
	<citation>294	5	294</citation>
	<citation>294	5	294</citation>
	</citations>
	<title>An Imaginary Number System</title>
	<conference>CACM August, 1961</conference>
	<authors>
	<author>Knuth, D.</author>
	</authors>
	<location>CA610810 JB March 16, 1978  10:02 PM</location>
	</document>
	<document id= '293'>
	<citations>
	<citation>293	5	293</citation>
	<citation>293	5	293</citation>
	<citation>293	5	293</citation>
	</citations>
	<title>The Applied Mathematics Laboratory of the David W. Taylor Model Basin</title>
	<conference>CACM September, 1961</conference>
	<authors>
	<author>Richstone, M.</author>
	</authors>
	<location>CA610901 JB March 16, 1978  10:01 PM</location>
	</document>
	<document id= '292'>
	<citations>
	<citation>292	5	292</citation>
	<citation>292	5	292</citation>
	<citation>292	5	292</citation>
	</citations>
	<title>An Information Retrieval Language for Legal Studies</title>
	<conference>CACM September, 1961</conference>
	<authors>
	<author>Kehl, W. B.</author>
	<author>Horty, J. F.</author>
	<author>Bacon, C. R. T.</author>
	<author>Mitchell, D. S.</author>
	</authors>
	<location>CA610902 JB March 16, 1978  9:51 PM</location>
	</document>
	<document id= '291'>
	<citations>
	<citation>291	5	291</citation>
	<citation>291	5	291</citation>
	<citation>291	5	291</citation>
	</citations>
	<title>Use of MOBOL in PreparingRetrieval Programs</title>
	<conference>CACM September, 1961</conference>
	<authors>
	<author>Hoffman, J.</author>
	<author>Opler, A.</author>
	</authors>
	<location>CA610903 JB March 16, 1978  9:50 PM</location>
	</document>
	<document id= '290'>
	<citations>
	<citation>290	5	290</citation>
	<citation>290	5	290</citation>
	<citation>290	5	290</citation>
	</citations>
	<title>Chain Tracing (Algorithm 69)</title>
	<conference>CACM September, 1961</conference>
	<authors>
	<author>Mayoh, B. H.</author>
	</authors>
	<location>CA610904 JB March 16, 1978  9:45 PM</location>
	</document>
	<document id= '289'>
	<citations>
	<citation>289	5	289</citation>
	<citation>289	5	289</citation>
	<citation>289	5	289</citation>
	</citations>
	<title>Critical Path Scheduling (Algorithm 40)</title>
	<conference>CACM September, 1961</conference>
	<authors>
	<author>Alexander, N. P.</author>
	</authors>
	<location>CA610905 JB March 16, 1978  9:44 PM</location>
	</document>
	<document id= '288'>
	<citations>
	<citation>989	5	288</citation>
	<citation>288	5	288</citation>
	<citation>288	5	288</citation>
	<citation>288	5	288</citation>
	<citation>1781	5	288</citation>
	<citation>729	5	288</citation>
	<citation>123	6	288</citation>
	<citation>196	6	288</citation>
	<citation>196	6	288</citation>
	<citation>919	6	288</citation>
	<citation>990	6	288</citation>
	<citation>1007	6	288</citation>
	<citation>1046	6	288</citation>
	<citation>1131	6	288</citation>
	<citation>1139	6	288</citation>
	<citation>1140	6	288</citation>
	<citation>1149	6	288</citation>
	<citation>1198	6	288</citation>
	<citation>1215	6	288</citation>
	<citation>1223	6	288</citation>
	<citation>1265	6	288</citation>
	<citation>1303	6	288</citation>
	<citation>1323	6	288</citation>
	<citation>1358	6	288</citation>
	<citation>1366	6	288</citation>
	<citation>1421	6	288</citation>
	<citation>1460	6	288</citation>
	<citation>1462	6	288</citation>
	<citation>1463	6	288</citation>
	<citation>1467	6	288</citation>
	<citation>1468	6	288</citation>
	<citation>1477	6	288</citation>
	<citation>1491	6	288</citation>
	<citation>1496	6	288</citation>
	<citation>1531	6	288</citation>
	<citation>1535	6	288</citation>
	<citation>1565	6	288</citation>
	<citation>1601	6	288</citation>
	<citation>1602	6	288</citation>
	<citation>1613	6	288</citation>
	<citation>1614	6	288</citation>
	<citation>1626	6	288</citation>
	<citation>1641	6	288</citation>
	<citation>1787	6	288</citation>
	<citation>1788	6	288</citation>
	<citation>205	6	288</citation>
	<citation>224	6	288</citation>
	<citation>249	6	288</citation>
	<citation>288	6	288</citation>
	<citation>288	6	288</citation>
	<citation>288	6	288</citation>
	<citation>316	6	288</citation>
	<citation>381	6	288</citation>
	<citation>398	6	288</citation>
	<citation>11	6	288</citation>
	<citation>404	6	288</citation>
	<citation>410	6	288</citation>
	<citation>463	6	288</citation>
	<citation>464	6	288</citation>
	<citation>483	6	288</citation>
	<citation>3184	6	288</citation>
	<citation>3184	6	288</citation>
	<citation>3188	6	288</citation>
	<citation>584	6	288</citation>
	<citation>600	6	288</citation>
	<citation>616	6	288</citation>
	<citation>680	6	288</citation>
	<citation>691	6	288</citation>
	<citation>763	6	288</citation>
	<citation>799	6	288</citation>
	</citations>
	<title>A Syntactical Chart of ALGOL 60</title>
	<conference>CACM September, 1961</conference>
	<authors>
	<author>Taylor, W.</author>
	<author>Turner, L.</author>
	<author>Waychoff, R.</author>
	</authors>
	<location>CA610906JB March 16, 1978  9:43 PM</location>
	</document>
	<document id= '287'>
	<citations>
	<citation>287	5	287</citation>
	<citation>287	5	287</citation>
	<citation>287	5	287</citation>
	</citations>
	<title>The Generalized Important Event Technique</title>
	<conference>CACM September, 1961</conference>
	<authors>
	<author>Shapiro, N.</author>
	<author>Vreenegoor, H.</author>
	</authors>
	<location>CA610907 JB March 16, 1978  9:42 PM</location>
	</document>
	<document id= '286'>
	<citations>
	<citation>286	5	286</citation>
	<citation>286	5	286</citation>
	<citation>286	5	286</citation>
	</citations>
	<title>An Iterative Method for Inversion of Power Series</title>
	<conference>CACM September, 1961</conference>
	<authors>
	<author>Bramhall, J. N.</author>
	</authors>
	<location>CA610908 JB March 16, 1978  9:41 PM</location>
	</document>
	<document id= '285'>
	<citations>
	<citation>285	5	285</citation>
	<citation>285	5	285</citation>
	<citation>285	5	285</citation>
	</citations>
	<title>Solution of Tridiagonal Matrices</title>
	<conference>CACM September, 1961</conference>
	<authors>
	<author>Wenrick, R. C.</author>
	<author>Houghton, A. V.</author>
	</authors>
	<location>CA610909 JB March 16, 1978  9:39 PM</location>
	</document>
	<document id= '284'>
	<title>Manipulation of Algebraic Expressions</title>
	<abstract>An algorithm for algebraically manipulating expressions of the form SUM{CiPi, i=1,...,n}; has  been developed in conjunction with the development of programs for systems analysis problems.  This algorithm  enablesus to derive over-all system transfer functions from algebraically described block diagrams of  any linear continuous multi-loop feedback system.  The machine representation of the derived expression,  is, by virtue of the algorithm, in a form which simplifies the task of compiling.  The algorithm was  developed for a particular purpose in connection with system analysis studies.  However, its application  as a mathematical device extends far beyond the confines of the original problem.</abstract>
	<conference>CACM September, 1961</conference>
	<authors>
	<author>Rom, A. R. M.</author>
	</authors>
	<location>CA610910 JB March 16, 1978  9:36 PM</location>
	<citations>
	<citation>964	5	284</citation>
	<citation>1396	5	284</citation>
	<citation>284	5	284</citation>
	<citation>284	5	284</citation>
	<citation>284	5	284</citation>
	<citation>964	6	284</citation>
	<citation>1028	6	284</citation>
	<citation>1029	6	284</citation>
	<citation>1083	6	284</citation>
	<citation>1132	6	284</citation>
	<citation>1214	6	284</citation>
	<citation>1278	6	284</citation>
	<citation>1334	6	284</citation>
	<citation>1365	6	284</citation>
	<citation>1386	6	284</citation>
	<citation>1387	6	284</citation>
	<citation>1388	6	284</citation>
	<citation>1392	6	284</citation>
	<citation>1393	6	284</citation>
	<citation>1394	6	284</citation>
	<citation>1395	6	284</citation>
	<citation>1396	6	284</citation>
	<citation>1397	6	284</citation>
	<citation>1496	6	284</citation>
	<citation>284	6	284</citation>
	<citation>284	6	284</citation>
	<citation>407	6	284</citation>
	<citation>3199	6	284</citation>
	<citation>3200	6	284</citation>
	<citation>3201	6	284</citation>
	<citation>3202	6	284</citation>
	<citation>3203	6	284</citation>
	<citation>3204	6	284</citation>
	<citation>561	6	284</citation>
	<citation>561	6	284</citation>
	<citation>730	6	284</citation>
	<citation>759	6	284</citation>
	</citations>
	</document>
	<document id= '283'>
	<citations>
	<citation>283	5	283</citation>
	<citation>283	5	283</citation>
	<citation>283	5	283</citation>
	</citations>
	<title>Inversion of a Complex Matrix</title>
	<conference>CACM September, 1961</conference>
	<authors>
	<author>Tornheim, L.</author>
	</authors>
	<location>CA610911 JB March 16, 1978  1:44 PM</location>
	</document>
	<document id= '282'>
	<title>Optimum Tape-Writing Procedures</title>
	<abstract>Consider a magnetic tape system with a read check after writing.  Where an error occurs in  writing a record, a programmed error routine may either bypass some or all of the area on tape or try  to rewrite the record on the same area.  This paper evaluates these two procedures on the basis of expected  loss of computer time and develops a decision rule for selecting the optimum procedure.  The rule depends  critically on the number of times the tape being written will be used in the future.  In the case where  the optimum procedure is to bypass an area, a second decision-the size of the area to be bypassed-is  necessary.  A formula is developed to determine the optimum area to be bypassed for each procedure.</abstract>
	<conference>CACM September, 1961</conference>
	<authors>
	<author>Hutchinson, K.</author>
	</authors>
	<location>CA610912 JB March 16, 1978  1:32 PM</location>
	<citations>
	<citation>282	5	282</citation>
	<citation>282	5	282</citation>
	<citation>282	5	282</citation>
	</citations>
	</document>
	<document id= '281'>
	<title>Putting a Hex on e^x</title>
	<abstract>Recent notes on approximate natural antilogy have not considered indirect formulations for  describing e^x.  In this note we produce a particular family of very fast, high precision and eminently  practical exponential evaluation formulas derived from one such formulation.</abstract>
	<conference>CACM October, 1961</conference>
	<authors>
	<author>Feurzeig, W.</author>
	</authors>
	<location>CA610913 JB March 16, 1978  1:27 PM</location>
	<citations>
	<citation>281	5	281</citation>
	<citation>281	5	281</citation>
	<citation>281	5	281</citation>
	</citations>
	</document>
	<document id= '280'>
	<citations>
	<citation>280	5	280</citation>
	<citation>280	5	280</citation>
	<citation>280	5	280</citation>
	</citations>
	<title>A Preplanned Approach to a Storage Allocating Compiler</title>
	<conference>CACM October, 1961</conference>
	<authors>
	<author>Neil, R. W.</author>
	</authors>
	<location>CA611001 JB March 16, 1978  1:24 PM</location>
	</document>
	<document id= '279'>
	<citations>
	<citation>279	5	279</citation>
	<citation>279	5	279</citation>
	<citation>279	5	279</citation>
	<citation>657	5	279</citation>
	<citation>279	6	279</citation>
	<citation>409	6	279</citation>
	</citations>
	<title>The Case for Dynamic storage Allocation</title>
	<conference>CACM October, 1961</conference>
	<authors>
	<author>Sams, B. H.</author>
	</authors>
	<location>CA611002 JB March 16, 1978  1:23 PM</location>
	</document>
	<document id= '278'>
	<title>A General Formulation of storage Allocation</title>
	<abstract>Formalization of a general computer storage allocation process is attempted.  With a given  computer M is associated a fictitious computer M' essentially identical to M except in respect to possession  of unbounded primary storage.  Mappings of the total storage set (internal and external) of M into the  direct address set of M' are introduced.  A program sequence P for M' is termed M-admissible (relative  to a specific execution time period) if there is a mapping underwhich P and its effective data referents  are all located in the direct address set of M.  Storage allocation is considered as a process of establishing  for an arbitrary M' program  a sequence of mappings, a decoupling of the program into M-admissible subprograms  and a linking set of interludes.  An existence proof in terms of a completely interpretive M program  as indicated.  Some special cases are discussed.  Various restrictions on generality of M' programs are  considered under which more practical realization of allocation processes becomes tractable.</abstract>
	<conference>CACM October, 1961</conference>
	<authors>
	</authors>
	<location>CA611003 JB March 16, 1978  1:22 PM</location>
	<citations>
	<citation>278	5	278</citation>
	<citation>278	5	278</citation>
	<citation>278	5	278</citation>
	</citations>
	</document>
	<document id= '277'>
	<citations>
	<citation>277	5	277</citation>
	<citation>277	5	277</citation>
	<citation>277	5	277</citation>
	</citations>
	<title>Problems of Storage Allocation in a Multiprocessor Multiprogrammed System</title>
	<conference>CACM October, 1961</conference>
	<authors>
	<author>Maher, R. J.</author>
	</authors>
	<location>CA611004 JB March 16, 1978  1:12 PM</location>
	</document>
	<document id= '276'>
	<title>Program Organization and Record Keeping for Dynamic Storage Allocation</title>
	<abstract>The material presented in this paper is part of the design plan of the core allocation portion  of the ASCII-MATIC Programming System.  Project ASCII-MATIC is concerned with the application of computer  techniques to the activities of certain headquarters military intelligence operations of the U.S. Army.</abstract>
	<conference>CACM October, 1961</conference>
	<authors>
	<author>Holt, A. W.</author>
	</authors>
	<location>CA611005 JB March 16, 1978  1:02 PM</location>
	<citations>
	<citation>972	5	276</citation>
	<citation>276	5	276</citation>
	<citation>276	5	276</citation>
	<citation>276	5	276</citation>
	<citation>1471	5	276</citation>
	<citation>800	6	276</citation>
	<citation>271	6	276</citation>
	<citation>273	6	276</citation>
	<citation>276	6	276</citation>
	<citation>276	6	276</citation>
	</citations>
	</document>
	<document id= '275'>
	<citations>
	<citation>275	5	275</citation>
	<citation>275	5	275</citation>
	<citation>275	5	275</citation>
	</citations>
	<title>Dynamic Storage Allocation for an Information Retrieval System</title>
	<conference>CACM October, 1961</conference>
	<authors>
	<author>Sams, B. H.</author>
	</authors>
	<location>CA611006 JB March 16, 1978  12:58 PM</location>
	</document>
	<document id= '274'>
	<citations>
	<citation>274	5	274</citation>
	<citation>274	5	274</citation>
	<citation>274	5	274</citation>
	<citation>1754	5	274</citation>
	<citation>2358	5	274</citation>
	<citation>488	5	274</citation>
	<citation>1746	6	274</citation>
	<citation>1751	6	274</citation>
	<citation>1753	6	274</citation>
	<citation>274	6	274</citation>
	<citation>274	6	274</citation>
	<citation>274	6	274</citation>
	<citation>376	6	274</citation>
	</citations>
	<title>Dynamic Storage Allocation in the Atlas Computer, Including an Automatic Use of a Backing Store</title>
	<conference>CACM October, 1961</conference>
	<authors>
	<author>Fotheringham, J.</author>
	</authors>
	<location>CA611007 JB March 16, 1978  12:57 PM</location>
	</document>
	<document id= '273'>
	<citations>
	<citation>972	5	273</citation>
	<citation>273	5	273</citation>
	<citation>273	5	273</citation>
	<citation>273	5	273</citation>
	<citation>2911	5	273</citation>
	<citation>1879	6	273</citation>
	<citation>271	6	273</citation>
	<citation>273	6	273</citation>
	<citation>273	6	273</citation>
	<citation>276	6	273</citation>
	<citation>2435	6	273</citation>
	<citation>2498	6	273</citation>
	<citation>2734	6	273</citation>
	<citation>2773	6	273</citation>
	<citation>2983	6	273</citation>
	</citations>
	<title>Experience in Automatic Storage Allocation</title>
	<conference>CACM October, 1961</conference>
	<authors>
	</authors>
	<location>CA611008 JB March 16, 1978  12:55 PM</location>
	</document>
	<document id= '272'>
	<title>A Storage Allocation Scheme for ALGOL 60</title>
	<abstract>A storage allocation scheme for a machine with a 2048 instruction core store and a magnetic  drum is described.  The use of the drum for storing program blocks and/or data must be directed by the  programmer through auxiliary information in the ALGOL program.  The administrative routines controlling  the storage at run time are described in full.  A detailed example is given.</abstract>
	<conference>CACM October, 1961</conference>
	<authors>
	<author>Jensen, J.</author>
	<author>Mondrup, P.</author>
	<author>Naur, P.</author>
	</authors>
	<location>CA611009 JB March 16, 1978  12:54 PM</location>
	<citations>
	<citation>249	4	272</citation>
	<citation>254	4	272</citation>
	<citation>272	4	272</citation>
	<citation>1102	4	272</citation>
	<citation>1109	4	272</citation>
	<citation>1140	4	272</citation>
	<citation>1188	4	272</citation>
	<citation>1306	4	272</citation>
	<citation>1464	4	272</citation>
	<citation>1491	4	272</citation>
	<citation>1767	4	272</citation>
	<citation>1781	4	272</citation>
	<citation>1787	4	272</citation>
	<citation>1949	4	272</citation>
	<citation>321	4	272</citation>
	<citation>2059	4	272</citation>
	<citation>2126	4	272</citation>
	<citation>435	4	272</citation>
	<citation>437	4	272</citation>
	<citation>463	4	272</citation>
	<citation>483	4	272</citation>
	<citation>491	4	272</citation>
	<citation>2732	4	272</citation>
	<citation>560	4	272</citation>
	<citation>583	4	272</citation>
	<citation>3073	4	272</citation>
	<citation>627	4	272</citation>
	<citation>631	4	272</citation>
	<citation>632	4	272</citation>
	<citation>642	4	272</citation>
	<citation>644	4	272</citation>
	<citation>653	4	272</citation>
	<citation>680	4	272</citation>
	<citation>761	4	272</citation>
	<citation>762	4	272</citation>
	<citation>763	4	272</citation>
	<citation>123	4	272</citation>
	<citation>140	4	272</citation>
	<citation>919	4	272</citation>
	<citation>989	4	272</citation>
	<citation>196	5	272</citation>
	<citation>272	5	272</citation>
	<citation>272	5	272</citation>
	<citation>272	5	272</citation>
	</citations>
	</document>
	<document id= '271'>
	<citations>
	<citation>972	5	271</citation>
	<citation>271	5	271</citation>
	<citation>271	5	271</citation>
	<citation>271	5	271</citation>
	<citation>1774	5	271</citation>
	<citation>560	5	271</citation>
	<citation>800	6	271</citation>
	<citation>196	6	271</citation>
	<citation>1173	6	271</citation>
	<citation>271	6	271</citation>
	<citation>271	6	271</citation>
	<citation>271	6	271</citation>
	<citation>273	6	271</citation>
	<citation>276	6	271</citation>
	</citations>
	<title>A Semi-Automatic Storage Allocation System at Loading Time</title>
	<conference>CACM October, 1961</conference>
	<authors>
	<author>Heising, W. P.</author>
	<author>Larner, R. A.</author>
	</authors>
	<location>CA611010 JB March 16, 1978  12:51 PM</location>
	</document>
	<document id= '270'>
	<citations>
	<citation>270	5	270</citation>
	<citation>270	5	270</citation>
	<citation>270	5	270</citation>
	<citation>678	5	270</citation>
	<citation>270	6	270</citation>
	</citations>
	<title>Techniques for Storage Allocation Algorithms</title>
	<conference>CACM October, 1961</conference>
	<authors>
	</authors>
	<location>CA611011 JB March 16, 1978  12:50 PM</location>
	</document>
	<document id= '269'>
	<citations>
	<citation>269	5	269</citation>
	<citation>269	5	269</citation>
	<citation>269	5	269</citation>
	</citations>
	<title>Core Allocation Based on Probability</title>
	<conference>CACM October, 1961</conference>
	<authors>
	<author>Riskin, B. N.</author>
	</authors>
	<location>CA611012 JB March 16, 1978  12:49 PM</location>
	</document>
	<document id= '268'>
	<citations>
	<citation>268	5	268</citation>
	<citation>268	5	268</citation>
	<citation>268	5	268</citation>
	</citations>
	<title>Stochastic Evaluation of a Static Storage Allocation</title>
	<conference>CACM October, 1961</conference>
	<authors>
	<author>Cohen, L. J.</author>
	</authors>
	<location>CA611013 JB March 16, 1978  12:48 PM</location>
	</document>
	<document id= '267'>
	<citations>
	<citation>267	4	267</citation>
	<citation>1139	4	267</citation>
	<citation>1141	4	267</citation>
	<citation>1215	4	267</citation>
	<citation>1223	4	267</citation>
	<citation>1647	4	267</citation>
	<citation>1781	4	267</citation>
	<citation>1787	4	267</citation>
	<citation>1792	4	267</citation>
	<citation>364	4	267</citation>
	<citation>405	4	267</citation>
	<citation>438	4	267</citation>
	<citation>763	4	267</citation>
	<citation>1323	5	267</citation>
	<citation>224	5	267</citation>
	<citation>267	5	267</citation>
	<citation>267	5	267</citation>
	<citation>267	5	267</citation>
	<citation>267	6	267</citation>
	<citation>3184	6	267</citation>
	<citation>799	6	267</citation>
	</citations>
	<title>Some Proposals for Improving the Efficiency of ALGOL 60</title>
	<conference>CACM November, 1961</conference>
	<authors>
	<author>Wilkes, M. V.</author>
	</authors>
	<location>CA611101 JB March 15,1978  11:01 PM</location>
	</document>
	<document id= '266'>
	<citations>
	<citation>266	5	266</citation>
	<citation>266	5	266</citation>
	<citation>266	5	266</citation>
	</citations>
	<title>Fitting Spheres by the Method of Least Squares</title>
	<conference>CACM November, 1961</conference>
	<authors>
	<author>Robinson, S. M.</author>
	</authors>
	<location>CA611102 JB March 15, 1978  11:00 PM</location>
	</document>
	<document id= '265'>
	<title>Low Level Language Subroutines for Use Within Fortran</title>
	<abstract>This paper describes some subroutines, coded in symbolic languages and for use within Fortran  coded programs, to deal with "special arithmetic" (e.g. multi-precision arithmetic), symbol manipulation,  bit manipulation and expanded character set input-output, and visual display.</abstract>
	<conference>CACM November, 1961</conference>
	<authors>
	<author>Barnett, M. P.</author>
	</authors>
	<location>CA611103 JB March 15, 1978  10:59 PM</location>
	<citations>
	<citation>265	5	265</citation>
	<citation>265	5	265</citation>
	<citation>265	5	265</citation>
	<citation>464	5	265</citation>
	<citation>720	5	265</citation>
	<citation>265	6	265</citation>
	<citation>265	6	265</citation>
	<citation>404	6	265</citation>
	<citation>464	6	265</citation>
	<citation>474	6	265</citation>
	</citations>
	</document>
	<document id= '264'>
	<citations>
	<citation>264	5	264</citation>
	<citation>264	5	264</citation>
	<citation>264	5	264</citation>
	<citation>479	5	264</citation>
	<citation>264	6	264</citation>
	<citation>299	6	264</citation>
	</citations>
	<title>A Generalized Polyphase Merge Algorithm</title>
	<conference>CACM November, 1961</conference>
	<authors>
	<author>Reynolds, S. W.</author>
	</authors>
	<location>CA611104 JB March 15, 1978  10:56 PM</location>
	</document>
	<document id= '263'>
	<citations>
	<citation>263	5	263</citation>
	<citation>263	5	263</citation>
	<citation>263	5	263</citation>
	</citations>
	<title>Library Loading with Alternate Routine Selection</title>
	<conference>CACM November, 1961</conference>
	<authors>
	<author>Moore, D. P.</author>
	</authors>
	<location>CA611105 JB March 15, 1978  10:55 PM</location>
	</document>
	<document id= '262'>
	<citations>
	<citation>262	5	262</citation>
	<citation>262	5	262</citation>
	<citation>262	5	262</citation>
	</citations>
	<title>MAP</title>
	<conference>CACM November, 1961</conference>
	<authors>
	<author>Moore, C. L.</author>
	<author>Ruwe, M. L.</author>
	</authors>
	<location>CA611106 JB March 15, 1978  10:54 PM</location>
	</document>
	<document id= '261'>
	<citations>
	<citation>261	5	261</citation>
	<citation>261	5	261</citation>
	<citation>261	5	261</citation>
	</citations>
	<title>Tape Splitting</title>
	<conference>CACM November, 1961</conference>
	<authors>
	<author>Moore, D. P.</author>
	</authors>
	<location>CA611107 JB March 15, 1978  10:54 PM</location>
	</document>
	<document id= '260'>
	<citations>
	<citation>260	5	260</citation>
	<citation>260	5	260</citation>
	<citation>260	5	260</citation>
	</citations>
	<title>Interpolation By Aitken (Algorithm 70)</title>
	<conference>CACM November, 1961</conference>
	<authors>
	<author>Mifsud, C. J.</author>
	</authors>
	<location>CA611108 JB March 15, 1978  10:53 PM</location>
	</document>
	<document id= '259'>
	<citations>
	<citation>259	5	259</citation>
	<citation>259	5	259</citation>
	<citation>259	5	259</citation>
	</citations>
	<title>Permutation (Algorithm 71)</title>
	<conference>CACM November, 1961</conference>
	<authors>
	<author>Coveyou, R. R.</author>
	<author>Sullivan, J. G.</author>
	</authors>
	<location>CA611109 JB March 15, 1978  10:52 PM</location>
	</document>
	<document id= '258'>
	<citations>
	<citation>258	5	258</citation>
	<citation>258	5	258</citation>
	<citation>258	5	258</citation>
	</citations>
	<title>Composition Generator (Algorithm 72)</title>
	<conference>CACM November, 1961</conference>
	<authors>
	<author>Hellerman, O.</author>
	<author>Ogden, S.</author>
	</authors>
	<location>CA611110 JB March 15, 1978  10:48 PM</location>
	</document>
	<document id= '257'>
	<citations>
	<citation>257	5	257</citation>
	<citation>257	5	257</citation>
	<citation>257	5	257</citation>
	</citations>
	<title>Invert (Algorithm 42)</title>
	<conference>CACM November, 1961</conference>
	<authors>
	<author>Knapp, A. W.</author>
	<author>Shaman, P.</author>
	</authors>
	<location>CA611111 JB March 15, 1978  10:47 PM</location>
	</document>
	<document id= '256'>
	<citations>
	<citation>256	5	256</citation>
	<citation>256	5	256</citation>
	<citation>256	5	256</citation>
	</citations>
	<title>A Set of Test Matrices (Algorithm 52)</title>
	<conference>CACM November, 1961</conference>
	<authors>
	<author>Dubay, G. H.</author>
	</authors>
	<location>CA611112 JB March 15, 1978  10:46 PM</location>
	</document>
	<document id= '255'>
	<citations>
	<citation>255	5	255</citation>
	<citation>255	5	255</citation>
	<citation>255	5	255</citation>
	</citations>
	<title>Augmentation (Algorithm 68)</title>
	<conference>CACM November, 1961</conference>
	<authors>
	<author>Breed, L. M.</author>
	</authors>
	<location>CA611113 JB March 15, 1978  10:45 PM</location>
	</document>
	<document id= '254'>
	<title>SMALGOL-61</title>
	<abstract>Prior to and during the 1961 Western Joint Computer Conference, several people in the Joint  Users Groups had expressed interest in defining a "smalgol" language.  This is to be an ALGOL language  for use with compilers on relatively small size computers.  A preliminary report resulted.  At the ACM  National Conference four months later, after considering several counter proposals, a final version was  agreed upon by a subcommittee.  The recommendations of the Subcommittee for a standard subset of ALGOL  60 for use on small computers is presented here.</abstract>
	<conference>CACM November, 1961</conference>
	<authors>
	<author>Bachelork, G. A.</author>
	<author>Dempster, J. R. H.</author>
	<author>Knuth, D. E.</author>
	<author>Speroni, J.</author>
	</authors>
	<location>CA611114 JB March 15, 1978  10:44 PM</location>
	<citations>
	<citation>249	4	254</citation>
	<citation>254	4	254</citation>
	<citation>254	4	254</citation>
	<citation>254	4	254</citation>
	<citation>272	4	254</citation>
	<citation>1102	4	254</citation>
	<citation>1109	4	254</citation>
	<citation>1140	4	254</citation>
	<citation>1188	4	254</citation>
	<citation>1234	4	254</citation>
	<citation>1306	4	254</citation>
	<citation>1464	4	254</citation>
	<citation>1491	4	254</citation>
	<citation>1767	4	254</citation>
	<citation>1781	4	254</citation>
	<citation>1787	4	254</citation>
	<citation>1949	4	254</citation>
	<citation>321	4	254</citation>
	<citation>2059	4	254</citation>
	<citation>2126	4	254</citation>
	<citation>435	4	254</citation>
	<citation>437	4	254</citation>
	<citation>463	4	254</citation>
	<citation>483	4	254</citation>
	<citation>491	4	254</citation>
	<citation>2732	4	254</citation>
	<citation>560	4	254</citation>
	<citation>583	4	254</citation>
	<citation>3073	4	254</citation>
	<citation>627	4	254</citation>
	<citation>631	4	254</citation>
	<citation>632	4	254</citation>
	<citation>642	4	254</citation>
	<citation>644	4	254</citation>
	<citation>653	4	254</citation>
	<citation>680	4	254</citation>
	<citation>761	4	254</citation>
	<citation>762	4	254</citation>
	<citation>763	4	254</citation>
	<citation>123	4	254</citation>
	<citation>140	4	254</citation>
	<citation>919	4	254</citation>
	<citation>989	4	254</citation>
	<citation>196	5	254</citation>
	<citation>254	5	254</citation>
	<citation>254	5	254</citation>
	<citation>254	5	254</citation>
	<citation>321	5	254</citation>
	<citation>387	5	254</citation>
	<citation>794	5	254</citation>
	<citation>254	6	254</citation>
	</citations>
	</document>
	<document id= '253'>
	<citations>
	<citation>253	5	253</citation>
	<citation>253	5	253</citation>
	<citation>253	5	253</citation>
	</citations>
	<title>On a Program for Ray-Chaudhuri's Algorithm for a Minimum Cover of an Abstract Complex</title>
	<conference>CACM November, 1961</conference>
	<authors>
	<author>Foata, D. C.</author>
	</authors>
	<location>CA611115 JB March 15, 1978  10:41 PM</location>
	</document>
	<document id= '252'>
	<title>Programming a Duplex Computer System</title>
	<abstract>This paper describes a method of duplex-computer programming that has been used with two computers  in a military defense system.  The method combines special programs with a basic data processing program  package.  The duplex operation gives the system greater reliability.  After achieving the required level  of integration, both computers do similar processing on the same inputs and continually cross-check the  intermediate and final results.</abstract>
	<conference>CACM November, 1961</conference>
	<authors>
	<author>Dow, J.</author>
	</authors>
	<location>CA611116 JB March 15, 1978  10:40 PM</location>
	<citations>
	<citation>252	5	252</citation>
	<citation>252	5	252</citation>
	<citation>252	5	252</citation>
	</citations>
	</document>
	<document id= '251'>
	<title>Ballistic Cam Design</title>
	<abstract>This paper presents a digital computer program for the rapid calculation of manufacturing data  essential to the design of preproduction cams which are utilized in ballistic computers of tank fire  control systems.  The cam profile generated introduces the superelevation angle required by tank main  armament for a particular type ammunition.</abstract>
	<conference>CACM November, 1961</conference>
	<authors>
	<author>Archambault, M.</author>
	</authors>
	<location>CA611117 JB March 15, 1978  10:37 PM</location>
	<citations>
	<citation>251	5	251</citation>
	<citation>251	5	251</citation>
	<citation>251	5	251</citation>
	</citations>
	</document>
	<document id= '250'>
	<citations>
	<citation>250	4	250</citation>
	<citation>1237	4	250</citation>
	<citation>1237	5	250</citation>
	<citation>250	5	250</citation>
	<citation>250	5	250</citation>
	<citation>250	5	250</citation>
	<citation>320	5	250</citation>
	<citation>2220	5	250</citation>
	<citation>753	5	250</citation>
	<citation>1172	6	250</citation>
	<citation>1237	6	250</citation>
	<citation>1327	6	250</citation>
	<citation>1354	6	250</citation>
	<citation>1489	6	250</citation>
	<citation>1548	6	250</citation>
	<citation>250	6	250</citation>
	<citation>250	6	250</citation>
	<citation>250	6	250</citation>
	<citation>320	6	250</citation>
	<citation>753	6	250</citation>
	</citations>
	<title>An Engineering Application of Logic-Structure Tables</title>
	<conference>CACM November, 1961</conference>
	<authors>
	<author>Nickerson, R. C.</author>
	</authors>
	<location>CA611118 JB March 15, 1978  10:34 PM</location>
	</document>
	<document id= '249'>
	<citations>
	<citation>249	4	249</citation>
	<citation>249	4	249</citation>
	<citation>249	4	249</citation>
	<citation>254	4	249</citation>
	<citation>272	4	249</citation>
	<citation>1102	4	249</citation>
	<citation>1109	4	249</citation>
	<citation>1140	4	249</citation>
	<citation>1188	4	249</citation>
	<citation>1306	4	249</citation>
	<citation>1464	4	249</citation>
	<citation>1491	4	249</citation>
	<citation>1767	4	249</citation>
	<citation>1781	4	249</citation>
	<citation>1787	4	249</citation>
	<citation>1949	4	249</citation>
	<citation>321	4	249</citation>
	<citation>2059	4	249</citation>
	<citation>2126	4	249</citation>
	<citation>435	4	249</citation>
	<citation>437	4	249</citation>
	<citation>438	4	249</citation>
	<citation>463	4	249</citation>
	<citation>483	4	249</citation>
	<citation>491	4	249</citation>
	<citation>2732	4	249</citation>
	<citation>560	4	249</citation>
	<citation>583	4	249</citation>
	<citation>3073	4	249</citation>
	<citation>3185	4	249</citation>
	<citation>627	4	249</citation>
	<citation>631	4	249</citation>
	<citation>632	4	249</citation>
	<citation>642	4	249</citation>
	<citation>644	4	249</citation>
	<citation>653	4	249</citation>
	<citation>680	4	249</citation>
	<citation>761	4	249</citation>
	<citation>762	4	249</citation>
	<citation>763	4	249</citation>
	<citation>123	4	249</citation>
	<citation>140	4	249</citation>
	<citation>919	4	249</citation>
	<citation>989	4	249</citation>
	<citation>196	5	249</citation>
	<citation>249	5	249</citation>
	<citation>249	5	249</citation>
	<citation>249	5	249</citation>
	<citation>1425	5	249</citation>
	<citation>1781	5	249</citation>
	<citation>303	5	249</citation>
	<citation>438	5	249</citation>
	<citation>51	5	249</citation>
	<citation>762	5	249</citation>
	<citation>123	6	249</citation>
	<citation>196	6	249</citation>
	<citation>196	6	249</citation>
	<citation>919	6	249</citation>
	<citation>990	6	249</citation>
	<citation>1007	6	249</citation>
	<citation>1046	6	249</citation>
	<citation>1131	6	249</citation>
	<citation>1139	6	249</citation>
	<citation>1140	6	249</citation>
	<citation>1149	6	249</citation>
	<citation>1198	6	249</citation>
	<citation>1215	6	249</citation>
	<citation>1223	6	249</citation>
	<citation>1265	6	249</citation>
	<citation>1303	6	249</citation>
	<citation>1323	6	249</citation>
	<citation>1358	6	249</citation>
	<citation>1366	6	249</citation>
	<citation>1421	6	249</citation>
	<citation>1460	6	249</citation>
	<citation>1462	6	249</citation>
	<citation>1463	6	249</citation>
	<citation>1467	6	249</citation>
	<citation>1468	6	249</citation>
	<citation>1477	6	249</citation>
	<citation>1491	6	249</citation>
	<citation>1496	6	249</citation>
	<citation>1531	6	249</citation>
	<citation>1535	6	249</citation>
	<citation>1565	6	249</citation>
	<citation>1601	6	249</citation>
	<citation>1602	6	249</citation>
	<citation>1613	6	249</citation>
	<citation>1614	6	249</citation>
	<citation>1626	6	249</citation>
	<citation>1641	6	249</citation>
	<citation>1787	6	249</citation>
	<citation>1788	6	249</citation>
	<citation>205	6	249</citation>
	<citation>224	6	249</citation>
	<citation>224	6	249</citation>
	<citation>249	6	249</citation>
	<citation>249	6	249</citation>
	<citation>249	6	249</citation>
	<citation>249	6	249</citation>
	<citation>288	6	249</citation>
	<citation>303	6	249</citation>
	<citation>316	6	249</citation>
	<citation>381	6	249</citation>
	<citation>398	6	249</citation>
	<citation>11	6	249</citation>
	<citation>77	6	249</citation>
	<citation>404	6	249</citation>
	<citation>410	6	249</citation>
	<citation>463	6	249</citation>
	<citation>464	6	249</citation>
	<citation>483	6	249</citation>
	<citation>483	6	249</citation>
	<citation>3184	6	249</citation>
	<citation>3188	6	249</citation>
	<citation>584	6	249</citation>
	<citation>600	6	249</citation>
	<citation>680	6	249</citation>
	<citation>691	6	249</citation>
	<citation>763	6	249</citation>
	<citation>799	6	249</citation>
	</citations>
	<title>Specification Languages for Mechanical Languages and Their Processors*-A Baker's Dozen</title>
	<conference>CACM December, 1961</conference>
	<authors>
	<author>Gorn, S.</author>
	</authors>
	<location>CA611201 JB March 15, 1978  10:32 PM</location>
	</document>
	<document id= '248'>
	<title>What is Proprietary In Mathematical Programming?-Impressions of a Panel Discussion</title>
	<abstract>A panel discussion on "What is Proprietary in Mathematical Programming?" was sponsored by the  Special Interest Committee on Mathematical Programming of the ACM during a Hall of Discussion/on September  7th at the 16th National ACM meeting in Los Angeles.  This note consists solely of the impressions garnered  by the moderator of the panel and does not necessarily represent the position of any of the panelists  or other participants in the discussion.</abstract>
	<conference>CACM December, 1961</conference>
	<authors>
	<author>Smith, L. W.</author>
	</authors>
	<location>CA611202 JB March 15, 1978  10:31 PM</location>
	<citations>
	<citation>248	5	248</citation>
	<citation>248	5	248</citation>
	<citation>248	5	248</citation>
	</citations>
	</document>
	<document id= '247'>
	<citations>
	<citation>247	5	247</citation>
	<citation>247	5	247</citation>
	<citation>247	5	247</citation>
	</citations>
	<title>Incomplete Elliptic Integrals (Algorithm 73)</title>
	<conference>CACM December, 1961</conference>
	<authors>
	<author>Jefferson, D. K.</author>
	</authors>
	<location>CA611203 JB March 15, 1978  10:27 PM</location>
	</document>
	<document id= '246'>
	<citations>
	<citation>246	5	246</citation>
	<citation>246	5	246</citation>
	<citation>246	5	246</citation>
	</citations>
	<title>Least-Squares Fit by Orthogonal Polynomials (Algorithm 28)</title>
	<conference>CACM December, 1961</conference>
	<authors>
	<author>MacMillan, D. B.</author>
	</authors>
	<location>CA611204 JB March 15, 1978  10:27 PM</location>
	</document>
	<document id= '245'>
	<citations>
	<citation>1222	5	245</citation>
	<citation>245	5	245</citation>
	<citation>245	5	245</citation>
	<citation>245	5	245</citation>
	<citation>1130	6	245</citation>
	<citation>245	6	245</citation>
	<citation>310	6	245</citation>
	</citations>
	<title>A Set of Associate Legendre Polynomials of the Second Kind (Algorithm 62)</title>
	<conference>CACM December, 1961</conference>
	<authors>
	<author>Herndon, J. R.</author>
	</authors>
	<location>CA611205 JB March 15, 1978  10:25 PM</location>
	</document>
	<document id= '244'>
	<citations>
	<citation>244	5	244</citation>
	<citation>244	5	244</citation>
	<citation>244	5	244</citation>
	</citations>
	<title>Incomplete Elliptic Integrals (Algorithm 73)</title>
	<conference>CACM December, 1961</conference>
	<authors>
	<author>Kriebel, D. C.</author>
	</authors>
	<location>CA611206 JB March 15, 1978  10:24 PM</location>
	</document>
	<document id= '243'>
	<title>N-Dimensional Codes for Detecting and Correcting Multiple Errors</title>
	<abstract>The paper introduces a new family of codes for detecting and correcting multiple errors in  a binary-coded message.  The message itself is arranged (conceptually) into a multidimensional rectangular  array.  The processes of encoding and error detection are based upon parity evaluations along prescribed  dimensions of the array.  Effectiveness of the codes is increased by introducing a "system check bit",  which is essentially a parity check on the other parity bits.  Only three-dimensional codes are discussed  in this paper with parity evaluations along the horizontal, the vertical, and one main diagonal.  However,  the family of codes is not restricted to three dimensions, as evidenced by the discussion by Minnick  and Ashenhurst on a similar multidimensional single-bit selection plan used for another purpose [6].   A four-dimensional code, correcting three and detecting four errors, has been developed; the extension  to higher-dimensional codes with greater correction power is straightforward.</abstract>
	<conference>CACM December, 1961</conference>
	<authors>
	<author>Rubinoff, M.</author>
	</authors>
	<location>CA611207 JB March 15, 1978  10:23 PM</location>
	<citations>
	<citation>243	5	243</citation>
	<citation>243	5	243</citation>
	<citation>243	5	243</citation>
	</citations>
	</document>
	<document id= '242'>
	<title>Notes on Geometric Weighted Check Digit Verification</title>
	<abstract>This note describes a method for utilizing geometric weight modulus 11 checking digits on a  computer which does not have either multiplication or division.  In addition some attempt has been made  to show some limitations of this system.</abstract>
	<conference>CACM December, 1961</conference>
	<authors>
	<author>Wilson, J. G.</author>
	</authors>
	<location>CA611208 JB March 15, 1978  10:17 PM</location>
	<citations>
	<citation>242	5	242</citation>
	<citation>242	5	242</citation>
	<citation>242	5	242</citation>
	</citations>
	</document>
	<document id= '241'>
	<title>Machine Calculation of Moments of a Probability Distribution</title>
	<abstract>A method is presented for the calculation on a machine of the moments of a probability distribution,  necessitating little more than n additions and n references to memory for each moment, instead of the  minimum of n multiplication, 2n additions, and 2n references to memory required by the most straightforward  method (where n is the number of entries in the probability distribution).  The method is directly applicable  when a tabulated distribution exists, as when it has been computed by repeated convolution; but in this  case it conserves both time and accuracy.</abstract>
	<conference>CACM December, 1961</conference>
	<authors>
	<author>Lechner, J. A.</author>
	</authors>
	<location>CA611209 JB March 15, 1978  10:15 PM</location>
	<citations>
	<citation>241	5	241</citation>
	<citation>241	5	241</citation>
	<citation>241	5	241</citation>
	</citations>
	</document>
	<document id= '240'>
	<citations>
	<citation>240	5	240</citation>
	<citation>240	5	240</citation>
	<citation>240	5	240</citation>
	</citations>
	<title>Processing Magnetic Tape Files with Variable Blocks</title>
	<conference>CACM December, 1961</conference>
	<authors>
	<author>Graham, J. W.</author>
	<author>Sprott, D. A.</author>
	</authors>
	<location>CA611210 JB March 15, 1978  10:11 PM</location>
	</document>
	<document id= '239'>
	<citations>
	<citation>239	5	239</citation>
	<citation>239	5	239</citation>
	<citation>239	5	239</citation>
	</citations>
	<title>Inefficiency of the Use of Boolean Functions for Information Retrieval Systems</title>
	<conference>CACM December, 1961</conference>
	<authors>
	<author>Verhoeff, J.</author>
	<author>Goffman, W.</author>
	<author>Belzer, J.</author>
	</authors>
	<location>CA611211 JB March 15, 1978  10:10 PM</location>
	</document>
	<document id= '238'>
	<citations>
	<citation>238	4	238</citation>
	<citation>238	4	238</citation>
	<citation>633	4	238</citation>
	<citation>643	4	238</citation>
	<citation>238	5	238</citation>
	<citation>238	5	238</citation>
	<citation>238	5	238</citation>
	<citation>633	5	238</citation>
	<citation>643	5	238</citation>
	<citation>238	6	238</citation>
	<citation>238	6	238</citation>
	<citation>633	6	238</citation>
	<citation>643	6	238</citation>
	</citations>
	<title>Simulation and Analysis of Biochemical Systems</title>
	<conference>CACM December, 1961</conference>
	<authors>
	<author>Garfinkel, D.</author>
	<author>Rutledge, J. D.</author>
	<author>Higgins, J. J.</author>
	</authors>
	<location>CA611212 JB March 15, 1978  10:09 PM</location>
	</document>
	<document id= '237'>
	<citations>
	<citation>237	5	237</citation>
	<citation>237	5	237</citation>
	<citation>237	5	237</citation>
	</citations>
	<title>Computer Production of Peek-A-Boo Sheets</title>
	<conference>CACM December, 1961</conference>
	<authors>
	<author>Robbins, D.</author>
	</authors>
	<location>CA611213 JB March 15, 1978  10:07 PM</location>
	</document>
	<document id= '236'>
	<title>Soviet Cybernetics and Computer</title>
	<abstract>This article records observations on Soviet research and technology in cybernetics and computer  science, made by the author during a visit to the Soviet Union as a delegate to the IFAC Congress on  Automatic Control held in Moscow in the summer of 1960.</abstract>
	<conference>CACM December, 1961</conference>
	<authors>
	<author>Feigenbaum, E. A.</author>
	</authors>
	<location>CA611214 JB March 15, 1978  10:06 PM</location>
	<citations>
	<citation>1349	5	236</citation>
	<citation>236	5	236</citation>
	<citation>236	5	236</citation>
	<citation>236	5	236</citation>
	<citation>236	6	236</citation>
	<citation>323	6	236</citation>
	<citation>83	6	236</citation>
	<citation>415	6	236</citation>
	</citations>
	</document>
	<document id= '235'>
	<citations>
	<citation>235	5	235</citation>
	<citation>235	5	235</citation>
	<citation>235	5	235</citation>
	</citations>
	<title>Two Think Pieces</title>
	<conference>CACM January, 1960</conference>
	<authors>
	<author>Bagley, P. R.</author>
	</authors>
	<location>CA600101 JB March 22, 1978  2:30 PM</location>
	</document>
	<document id= '234'>
	<citations>
	<citation>234	5	234</citation>
	<citation>234	5	234</citation>
	<citation>234	5	234</citation>
	</citations>
	<title>A SAP-Like Assembly Program for the IBM 650</title>
	<conference>CACM January, 1960</conference>
	<authors>
	<author>Speckhard, A. E.</author>
	</authors>
	<location>CA600102JB March 22, 1978  2:30 PM</location>
	</document>
	<document id= '233'>
	<citations>
	<citation>233	5	233</citation>
	<citation>233	5	233</citation>
	<citation>233	5	233</citation>
	</citations>
	<title>Abstracts-Additional Nuclear Reactor Codes</title>
	<conference>CACM January, 1960</conference>
	<authors>
	<author>Nather, V.</author>
	<author>Sangren, W.</author>
	</authors>
	<location>CA600103 JB March 22, 1978  2:29 PM</location>
	</document>
	<document id= '232'>
	<citations>
	<citation>232	5	232</citation>
	<citation>232	5	232</citation>
	<citation>232	5	232</citation>
	<citation>852	5	232</citation>
	<citation>864	5	232</citation>
	<citation>232	6	232</citation>
	<citation>232	6	232</citation>
	<citation>309	6	232</citation>
	<citation>74	6	232</citation>
	<citation>74	6	232</citation>
	</citations>
	<title>A High-Speed Sorting Procedure</title>
	<conference>CACM January, 1960</conference>
	<authors>
	<author>Frank, R. M.</author>
	<author>Lazarus, R. B.</author>
	</authors>
	<location>CA600104 JB March 22, 1978  2:27 PM</location>
	</document>
	<document id= '231'>
	<citations>
	<citation>231	5	231</citation>
	<citation>231	5	231</citation>
	<citation>231	5	231</citation>
	</citations>
	<title>A Proposal for a Set of Publication Standards for Use by the ACM</title>
	<conference>CACM February, 1960</conference>
	<authors>
	<author>Kent, E. R.</author>
	</authors>
	<location>CA600201 JB March 22, 1978  2:26 PM</location>
	</document>
	<document id= '230'>
	<citations>
	<citation>230	5	230</citation>
	<citation>230	5	230</citation>
	<citation>230	5	230</citation>
	<citation>333	5	230</citation>
	<citation>230	6	230</citation>
	</citations>
	<title>A Proposal for Character Code Compatibility</title>
	<conference>CACM February, 1960</conference>
	<authors>
	<author>Bemer, R. W.</author>
	</authors>
	<location>CA600202 JB March 22, 1978  2:25 PM</location>
	</document>
	<document id= '229'>
	<citations>
	<citation>229	5	229</citation>
	<citation>229	5	229</citation>
	<citation>229	5	229</citation>
	</citations>
	<title>A Terminology Proposal</title>
	<conference>CACM February, 1960</conference>
	<authors>
	<author>Gruenberger, F.</author>
	</authors>
	<location>CA600203 JB March 22, 1978  2:24 PM</location>
	</document>
	<document id= '228'>
	<citations>
	<citation>228	5	228</citation>
	<citation>228	5	228</citation>
	<citation>228	5	228</citation>
	</citations>
	<title>QUADI (Algorithm 1)</title>
	<conference>CACM February, 1960</conference>
	<authors>
	<author>Herbold, R. J.</author>
	</authors>
	<location>CA600204 JB March 22, 1978  2:21 PM</location>
	</document>
	<document id= '227'>
	<citations>
	<citation>227	5	227</citation>
	<citation>227	5	227</citation>
	<citation>227	5	227</citation>
	</citations>
	<title>ROOTFINDER (Algorithm 2)</title>
	<conference>CACM February, 1960</conference>
	<authors>
	<author>Wegstein, J.</author>
	</authors>
	<location>CA600205 JB March 22, 1978  2:20 PM</location>
	</document>
	<document id= '226'>
	<citations>
	<citation>226	5	226</citation>
	<citation>226	5	226</citation>
	<citation>226	5	226</citation>
	</citations>
	<title>Solution of Polynomial Equation by Bairstow-Hitchcock Method (Algorithm 3)</title>
	<conference>CACM February, 1960</conference>
	<authors>
	<author>Grau, A. A.</author>
	</authors>
	<location>CA600206 JB March 22, 1978  2:20 PM</location>
	</document>
	<document id= '225'>
	<citations>
	<citation>225	5	225</citation>
	<citation>225	5	225</citation>
	<citation>225	5	225</citation>
	</citations>
	<title>A Techniquefor Handling Macro Instructions (Corrigendum)</title>
	<conference>CACM February, 1960</conference>
	<authors>
	<author>Greenwald, I. D.</author>
	</authors>
	<location>CA600207 JB March 22, 1978  2:18 PM</location>
	</document>
	<document id= '224'>
	<title>Sequential Formula Translation</title>
	<abstract>The syntax of an algorithmic language such as ALGOL is conveniently described as a sequence  of states indicated by an element called cellar.  Transitions are controlled by admissible state-symbol  pairs which may be represented by a transition matrix. This description of syntax furnishes at the same  time an extremely simple rule for translating into machine programs statements in the algorithmic language.   Sequential treatment, however, is not feasible in the case of certain optimizing processes such as recursive  address calculation.</abstract>
	<conference>CACM February, 1960</conference>
	<authors>
	<author>Samelson, K.</author>
	<author>Bauer, F. L.</author>
	</authors>
	<location>CA600208 JB March 22, 1978  2:17 PM</location>
	<citations>
	<citation>224	4	224</citation>
	<citation>364	4	224</citation>
	<citation>1139	5	224</citation>
	<citation>1141	5	224</citation>
	<citation>1215	5	224</citation>
	<citation>1223	5	224</citation>
	<citation>224	5	224</citation>
	<citation>224	5	224</citation>
	<citation>224	5	224</citation>
	<citation>267	5	224</citation>
	<citation>1647	5	224</citation>
	<citation>1781	5	224</citation>
	<citation>1787	5	224</citation>
	<citation>1792	5	224</citation>
	<citation>364	5	224</citation>
	<citation>405	5	224</citation>
	<citation>438	5	224</citation>
	<citation>98	5	224</citation>
	<citation>763	5	224</citation>
	<citation>100	6	224</citation>
	<citation>123	6	224</citation>
	<citation>196	6	224</citation>
	<citation>196	6	224</citation>
	<citation>196	6	224</citation>
	<citation>919	6	224</citation>
	<citation>990	6	224</citation>
	<citation>1007	6	224</citation>
	<citation>1025	6	224</citation>
	<citation>1046	6	224</citation>
	<citation>1131	6	224</citation>
	<citation>1139	6	224</citation>
	<citation>1140	6	224</citation>
	<citation>1141	6	224</citation>
	<citation>1149	6	224</citation>
	<citation>1179	6	224</citation>
	<citation>1198	6	224</citation>
	<citation>1215	6	224</citation>
	<citation>1215	6	224</citation>
	<citation>1223	6	224</citation>
	<citation>1265	6	224</citation>
	<citation>1303	6	224</citation>
	<citation>1323	6	224</citation>
	<citation>1358	6	224</citation>
	<citation>1366	6	224</citation>
	<citation>1421	6	224</citation>
	<citation>1460	6	224</citation>
	<citation>1462	6	224</citation>
	<citation>1463	6	224</citation>
	<citation>1467	6	224</citation>
	<citation>1468	6	224</citation>
	<citation>1477	6	224</citation>
	<citation>1491	6	224</citation>
	<citation>1491	6	224</citation>
	<citation>1496	6	224</citation>
	<citation>1496	6	224</citation>
	<citation>1531	6	224</citation>
	<citation>1535	6	224</citation>
	<citation>1565	6	224</citation>
	<citation>1601	6	224</citation>
	<citation>1602	6	224</citation>
	<citation>1605	6	224</citation>
	<citation>1613	6	224</citation>
	<citation>1614	6	224</citation>
	<citation>1626	6	224</citation>
	<citation>1641	6	224</citation>
	<citation>1781	6	224</citation>
	<citation>1787	6	224</citation>
	<citation>1788	6	224</citation>
	<citation>205	6	224</citation>
	<citation>224	6	224</citation>
	<citation>224	6	224</citation>
	<citation>224	6	224</citation>
	<citation>224	6	224</citation>
	<citation>224	6	224</citation>
	<citation>224	6	224</citation>
	<citation>224	6	224</citation>
	<citation>224	6	224</citation>
	<citation>224	6	224</citation>
	<citation>224	6	224</citation>
	<citation>224	6	224</citation>
	<citation>224	6	224</citation>
	<citation>224	6	224</citation>
	<citation>249	6	224</citation>
	<citation>249	6	224</citation>
	<citation>288	6	224</citation>
	<citation>303	6	224</citation>
	<citation>316	6	224</citation>
	<citation>381	6	224</citation>
	<citation>398	6	224</citation>
	<citation>399	6	224</citation>
	<citation>11	6	224</citation>
	<citation>44	6	224</citation>
	<citation>55	6	224</citation>
	<citation>77	6	224</citation>
	<citation>77	6	224</citation>
	<citation>77	6	224</citation>
	<citation>77	6	224</citation>
	<citation>93	6	224</citation>
	<citation>98	6	224</citation>
	<citation>404	6	224</citation>
	<citation>404	6	224</citation>
	<citation>404	6	224</citation>
	<citation>405	6	224</citation>
	<citation>410	6	224</citation>
	<citation>412	6	224</citation>
	<citation>438	6	224</citation>
	<citation>463	6	224</citation>
	<citation>464	6	224</citation>
	<citation>464	6	224</citation>
	<citation>483	6	224</citation>
	<citation>3184	6	224</citation>
	<citation>3188	6	224</citation>
	<citation>584	6	224</citation>
	<citation>600	6	224</citation>
	<citation>631	6	224</citation>
	<citation>631	6	224</citation>
	<citation>680	6	224</citation>
	<citation>691	6	224</citation>
	<citation>763	6	224</citation>
	<citation>763	6	224</citation>
	<citation>763	6	224</citation>
	<citation>799	6	224</citation>
	<citation>799	6	224</citation>
	</citations>
	</document>
	<document id= '223'>
	<citations>
	<citation>223	5	223</citation>
	<citation>223	5	223</citation>
	<citation>223	5	223</citation>
	</citations>
	<title>Selfcipher: Programming</title>
	<conference>CACM February, 1960</conference>
	<authors>
	<author>Pelta, H. N.</author>
	</authors>
	<location>CA600209 JB March 22, 1978  2:13 PM</location>
	</document>
	<document id= '222'>
	<title>Coding Isomorphisms</title>
	<abstract>The coding of external symbols into symbols internal to a compute can sometimes be carried  out in such a way that relevant informational properties are preserved, but in a form much more easily  dealt with.  A case in point is presented.</abstract>
	<conference>CACM February, 1960</conference>
	<authors>
	<author>Lynch, W. C.</author>
	</authors>
	<location>CA600210 JB March 22, 1978  2:12 PM</location>
	<citations>
	<citation>222	4	222</citation>
	<citation>222	4	222</citation>
	<citation>364	4	222</citation>
	<citation>799	4	222</citation>
	<citation>222	5	222</citation>
	<citation>222	5	222</citation>
	<citation>222	5	222</citation>
	<citation>44	5	222</citation>
	<citation>82	5	222</citation>
	</citations>
	</document>
	<document id= '221'>
	<citations>
	<citation>121	5	221</citation>
	<citation>221	5	221</citation>
	<citation>221	5	221</citation>
	<citation>221	5	221</citation>
	<citation>221	6	221</citation>
	</citations>
	<title>The Basic Side of Tape Labeling</title>
	<conference>CACM February, 1960</conference>
	<authors>
	<author>Logan, W. A.</author>
	</authors>
	<location>CA600211 JB March 22, 1978  2:09 PM</location>
	</document>
	<document id= '220'>
	<citations>
	<citation>220	5	220</citation>
	<citation>220	5	220</citation>
	<citation>220	5	220</citation>
	</citations>
	<title>A New Method of Computation of Square Roots Without Using Division</title>
	<conference>CACM February, 1960</conference>
	<authors>
	<author>Traub, J. F.</author>
	</authors>
	<location>CA600212 JB March 22, 1978  2:08 PM</location>
	</document>
	<document id= '219'>
	<citations>
	<citation>219	5	219</citation>
	<citation>219	5	219</citation>
	<citation>219	5	219</citation>
	</citations>
	<title>Marriage-with Problems</title>
	<conference>CACM February, 1960</conference>
	<authors>
	<author>Shuchter, J. P.</author>
	</authors>
	<location>CA600213 JB March 22, 1978  2:06 PM</location>
	</document>
	<document id= '218'>
	<citations>
	<citation>218	5	218</citation>
	<citation>218	5	218</citation>
	<citation>218	5	218</citation>
	</citations>
	<title>Computer Preparation of a Poetry Concordance</title>
	<conference>CACM February, 1960</conference>
	<authors>
	<author>Painter, J. A.</author>
	</authors>
	<location>CA600214 JB March 22, 1978  2:05 PM</location>
	</document>
	<document id= '217'>
	<citations>
	<citation>217	5	217</citation>
	<citation>217	5	217</citation>
	<citation>217	5	217</citation>
	<citation>323	5	217</citation>
	<citation>689	5	217</citation>
	<citation>217	6	217</citation>
	<citation>217	6	217</citation>
	<citation>323	6	217</citation>
	<citation>3197	6	217</citation>
	</citations>
	<title>Soviet Computer Technology-1959</title>
	<conference>CACM March, 1960</conference>
	<location>CA600301 JB March 22, 1978 2:04 PM</location>
	</document>
	<document id= '216'>
	<citations>
	<citation>216	5	216</citation>
	<citation>216	5	216</citation>
	<citation>216	5	216</citation>
	</citations>
	<title>A Note on the Use of the Abacus in Number Conversion</title>
	<conference>CACM March, 1960</conference>
	<authors>
	<author>Kanner, H.</author>
	</authors>
	<location>CA600302 JB March 22, 1978  2:03 PM</location>
	</document>
	<document id= '215'>
	<citations>
	<citation>215	4	215</citation>
	<citation>215	5	215</citation>
	<citation>215	5	215</citation>
	<citation>215	5	215</citation>
	<citation>58	5	215</citation>
	</citations>
	<title>The Execute Operations-A Fourth Mode of Instruction Sequencing</title>
	<conference>CACM March, 1960</conference>
	<authors>
	<author>Brooks, F. P.</author>
	</authors>
	<location>CA600303 JB March 22, 1978  2:02 PM</location>
	</document>
	<document id= '214'>
	<citations>
	<citation>205	4	214</citation>
	<citation>210	4	214</citation>
	<citation>214	4	214</citation>
	<citation>214	4	214</citation>
	<citation>214	4	214</citation>
	<citation>1593	4	214</citation>
	<citation>1982	4	214</citation>
	<citation>398	4	214</citation>
	<citation>642	4	214</citation>
	<citation>669	4	214</citation>
	<citation>100	4	214</citation>
	<citation>123	4	214</citation>
	<citation>164	4	214</citation>
	<citation>1	5	214</citation>
	<citation>214	5	214</citation>
	<citation>214	5	214</citation>
	<citation>214	5	214</citation>
	<citation>53	5	214</citation>
	<citation>91	5	214</citation>
	</citations>
	<title>An Algorithm Defining ALGOL Assignment Statements</title>
	<conference>CACM March, 1960</conference>
	<authors>
	<author>Floyd, R. W.</author>
	</authors>
	<location>CA600304 JB March 22, 1978  2:01 PM</location>
	</document>
	<document id= '213'>
	<citations>
	<citation>213	5	213</citation>
	<citation>213	5	213</citation>
	<citation>213	5	213</citation>
	</citations>
	<title>Numerical Inversion of Laplace Transforms</title>
	<conference>CACM March, 1960</conference>
	<authors>
	<author>Schmittroth, L. A.</author>
	</authors>
	<location>CA600305 JB March 22, 1978  2:00 PM</location>
	</document>
	<document id= '212'>
	<citations>
	<citation>212	5	212</citation>
	<citation>212	5	212</citation>
	<citation>212	5	212</citation>
	</citations>
	<title>Bisection Routine (Algorithm 4)</title>
	<conference>CACM March, 1960</conference>
	<authors>
	</authors>
	<location>CA600306 JB March 22, 1978  1:59 PM</location>
	</document>
	<document id= '211'>
	<citations>
	<citation>211	5	211</citation>
	<citation>211	5	211</citation>
	<citation>211	5	211</citation>
	</citations>
	<title>Share Standard Flow Chart Symbols</title>
	<conference>CACM March, 1960</conference>
	<authors>
	<author>Grems, M.</author>
	</authors>
	<location>CA600307 JB March 22, 1978  1:58 PM</location>
	</document>
	<document id= '210'>
	<citations>
	<citation>205	4	210</citation>
	<citation>210	4	210</citation>
	<citation>214	4	210</citation>
	<citation>1982	4	210</citation>
	<citation>398	4	210</citation>
	<citation>642	4	210</citation>
	<citation>669	4	210</citation>
	<citation>100	4	210</citation>
	<citation>123	4	210</citation>
	<citation>164	4	210</citation>
	<citation>106	5	210</citation>
	<citation>1	5	210</citation>
	<citation>1024	5	210</citation>
	<citation>1051	5	210</citation>
	<citation>1102	5	210</citation>
	<citation>1132	5	210</citation>
	<citation>210	5	210</citation>
	<citation>210	5	210</citation>
	<citation>210	5	210</citation>
	<citation>1390	5	210</citation>
	<citation>1486	5	210</citation>
	<citation>1549	5	210</citation>
	<citation>1706	5	210</citation>
	<citation>1826	5	210</citation>
	<citation>1878	5	210</citation>
	<citation>378	5	210</citation>
	<citation>2060	5	210</citation>
	<citation>2155	5	210</citation>
	<citation>2168	5	210</citation>
	<citation>2719	5	210</citation>
	<citation>2723	5	210</citation>
	<citation>2838	5	210</citation>
	<citation>2842	5	210</citation>
	<citation>2855	5	210</citation>
	<citation>2879	5	210</citation>
	<citation>3077	5	210</citation>
	<citation>3080	5	210</citation>
	<citation>3106	5	210</citation>
	<citation>627	5	210</citation>
	<citation>106	6	210</citation>
	<citation>106	6	210</citation>
	<citation>196	6	210</citation>
	<citation>196	6	210</citation>
	<citation>1051	6	210</citation>
	<citation>1180	6	210</citation>
	<citation>1303	6	210</citation>
	<citation>1380	6	210</citation>
	<citation>1389	6	210</citation>
	<citation>1421	6	210</citation>
	<citation>1469	6	210</citation>
	<citation>1477	6	210</citation>
	<citation>1491	6	210</citation>
	<citation>1549	6	210</citation>
	<citation>1549	6	210</citation>
	<citation>1549	6	210</citation>
	<citation>1626	6	210</citation>
	<citation>1626	6	210</citation>
	<citation>1626	6	210</citation>
	<citation>1749	6	210</citation>
	<citation>208	6	210</citation>
	<citation>209	6	210</citation>
	<citation>209	6	210</citation>
	<citation>1826	6	210</citation>
	<citation>1826	6	210</citation>
	<citation>1826	6	210</citation>
	<citation>210	6	210</citation>
	<citation>210	6	210</citation>
	<citation>210	6	210</citation>
	<citation>210	6	210</citation>
	<citation>210	6	210</citation>
	<citation>210	6	210</citation>
	<citation>210	6	210</citation>
	<citation>210	6	210</citation>
	<citation>210	6	210</citation>
	<citation>210	6	210</citation>
	<citation>210	6	210</citation>
	<citation>210	6	210</citation>
	<citation>210	6	210</citation>
	<citation>210	6	210</citation>
	<citation>210	6	210</citation>
	<citation>210	6	210</citation>
	<citation>210	6	210</citation>
	<citation>210	6	210</citation>
	<citation>210	6	210</citation>
	<citation>210	6	210</citation>
	<citation>210	6	210</citation>
	<citation>210	6	210</citation>
	<citation>210	6	210</citation>
	<citation>210	6	210</citation>
	<citation>210	6	210</citation>
	<citation>1834	6	210</citation>
	<citation>1869	6	210</citation>
	<citation>1878	6	210</citation>
	<citation>1972	6	210</citation>
	<citation>1972	6	210</citation>
	<citation>378	6	210</citation>
	<citation>378	6	210</citation>
	<citation>2046	6	210</citation>
	<citation>2060	6	210</citation>
	<citation>2060	6	210</citation>
	<citation>2060	6	210</citation>
	<citation>2110	6	210</citation>
	<citation>2148	6	210</citation>
	<citation>2151	6	210</citation>
	<citation>2167	6	210</citation>
	<citation>2192	6	210</citation>
	<citation>2210	6	210</citation>
	<citation>2457	6	210</citation>
	<citation>2513	6	210</citation>
	<citation>2645	6	210</citation>
	<citation>2651	6	210</citation>
	<citation>2657	6	210</citation>
	<citation>2665	6	210</citation>
	<citation>2723	6	210</citation>
	<citation>2766	6	210</citation>
	<citation>2766	6	210</citation>
	<citation>2833	6	210</citation>
	<citation>2850	6	210</citation>
	<citation>2855	6	210</citation>
	<citation>2954	6	210</citation>
	<citation>2998	6	210</citation>
	<citation>2998	6	210</citation>
	<citation>406	6	210</citation>
	<citation>406	6	210</citation>
	<citation>406	6	210</citation>
	<citation>483	6	210</citation>
	<citation>3184	6	210</citation>
	<citation>3184	6	210</citation>
	<citation>627	6	210</citation>
	<citation>627	6	210</citation>
	<citation>731	6	210</citation>
	<citation>731	6	210</citation>
	<citation>731	6	210</citation>
	<citation>731	6	210</citation>
	<citation>731	6	210</citation>
	<citation>731	6	210</citation>
	<citation>753	6	210</citation>
	<citation>793	6	210</citation>
	<citation>794	6	210</citation>
	</citations>
	<title>Recursive Functions of Symbolic Expressions and Their Computation by Machine, Part I</title>
	<conference>CACM April, 1960</conference>
	<authors>
	<author>McCarthy, J.</author>
	</authors>
	<location>CA600401 JB March 22, 1978  1:57 PM</location>
	</document>
	<document id= '209'>
	<citations>
	<citation>1050	5	209</citation>
	<citation>1102	5	209</citation>
	<citation>209	5	209</citation>
	<citation>209	5	209</citation>
	<citation>209	5	209</citation>
	<citation>378	5	209</citation>
	<citation>3008	5	209</citation>
	<citation>731	5	209</citation>
	<citation>798	5	209</citation>
	<citation>849	6	209</citation>
	<citation>106	6	209</citation>
	<citation>196	6	209</citation>
	<citation>208	6	209</citation>
	<citation>209	6	209</citation>
	<citation>209	6	209</citation>
	<citation>209	6	209</citation>
	<citation>209	6	209</citation>
	<citation>209	6	209</citation>
	<citation>209	6	209</citation>
	<citation>210	6	209</citation>
	<citation>210	6	209</citation>
	<citation>367	6	209</citation>
	<citation>406	6	209</citation>
	<citation>483	6	209</citation>
	<citation>627	6	209</citation>
	<citation>627	6	209</citation>
	</citations>
	<title>Symbol Manipulation by Threaded Lists</title>
	<conference>CACM April, 1960</conference>
	<authors>
	<author>Perlis, A. J.</author>
	<author>Thornton, C.</author>
	</authors>
	<location>CA600402 JB March 22, 1978  1:56 PM</location>
	</document>
	<document id= '208'>
	<citations>
	<citation>208	5	208</citation>
	<citation>208	5	208</citation>
	<citation>208	5	208</citation>
	<citation>378	5	208</citation>
	<citation>208	6	208</citation>
	<citation>209	6	208</citation>
	<citation>210	6	208</citation>
	</citations>
	<title>An Introduction to Information Processing Language V</title>
	<conference>CACM April, 1960</conference>
	<authors>
	<author>Newell, A.</author>
	<author>Tonge, F. M.</author>
	</authors>
	<location>CA600403 JB March 22, 1978  1:55 PM</location>
	</document>
	<document id= '207'>
	<citations>
	<citation>206	4	207</citation>
	<citation>207	4	207</citation>
	<citation>207	5	207</citation>
	<citation>207	5	207</citation>
	<citation>207	5	207</citation>
	<citation>64	5	207</citation>
	<citation>644	5	207</citation>
	<citation>196	6	207</citation>
	<citation>206	6	207</citation>
	<citation>207	6	207</citation>
	</citations>
	<title>Syntactic and Semantic Augments to ALGOL</title>
	<conference>CACM April, 1960</conference>
	<authors>
	<author>Smith, J. W.</author>
	</authors>
	<location>CA600404 JB March 22, 1978  1:54 PM</location>
	</document>
	<document id= '206'>
	<citations>
	<citation>206	4	206</citation>
	<citation>207	4	206</citation>
	<citation>206	5	206</citation>
	<citation>206	5	206</citation>
	<citation>206	5	206</citation>
	<citation>64	5	206</citation>
	<citation>644	5	206</citation>
	<citation>196	6	206</citation>
	<citation>206	6	206</citation>
	<citation>207	6	206</citation>
	</citations>
	<title>Symbol Manipulation in XTRAN</title>
	<conference>CACM April, 1960</conference>
	<authors>
	<author>Green, J.</author>
	</authors>
	<location>CA600405 JB March 22, 1978  1:50 PM</location>
	</document>
	<document id= '205'>
	<title>Macro Instruction Extensions of Compiler Languages</title>
	<abstract>Macroinstruction compilers constructed from a small set of functions can be made extremely  powerful.  In particular, conditional assembly, nested definitions, and parenthetical notation serve  to make a compiler capable of accepting very general extensions to its ground language.</abstract>
	<conference>CACM April, 1960</conference>
	<authors>
	<author>McIlroy, M. D.</author>
	</authors>
	<location>CA600406 JB March 22, 1978  1:49 PM</location>
	<citations>
	<citation>205	4	205</citation>
	<citation>205	4	205</citation>
	<citation>210	4	205</citation>
	<citation>214	4	205</citation>
	<citation>1982	4	205</citation>
	<citation>398	4	205</citation>
	<citation>642	4	205</citation>
	<citation>669	4	205</citation>
	<citation>100	4	205</citation>
	<citation>123	4	205</citation>
	<citation>164	4	205</citation>
	<citation>1	5	205</citation>
	<citation>205	5	205</citation>
	<citation>205	5	205</citation>
	<citation>205	5	205</citation>
	<citation>1358	5	205</citation>
	<citation>1565	5	205</citation>
	<citation>1781	5	205</citation>
	<citation>1788	5	205</citation>
	<citation>43	5	205</citation>
	<citation>123	6	205</citation>
	<citation>196	6	205</citation>
	<citation>919	6	205</citation>
	<citation>990	6	205</citation>
	<citation>1006	6	205</citation>
	<citation>1007	6	205</citation>
	<citation>1007	6	205</citation>
	<citation>1046	6	205</citation>
	<citation>1131	6	205</citation>
	<citation>1139	6	205</citation>
	<citation>1140	6	205</citation>
	<citation>1149	6	205</citation>
	<citation>1162	6	205</citation>
	<citation>1198	6	205</citation>
	<citation>1215	6	205</citation>
	<citation>1223	6	205</citation>
	<citation>1265	6	205</citation>
	<citation>1303	6	205</citation>
	<citation>1323	6	205</citation>
	<citation>1358	6	205</citation>
	<citation>1358	6	205</citation>
	<citation>1366	6	205</citation>
	<citation>1421	6	205</citation>
	<citation>1455	6	205</citation>
	<citation>1460	6	205</citation>
	<citation>1460	6	205</citation>
	<citation>1462	6	205</citation>
	<citation>1463	6	205</citation>
	<citation>1467	6	205</citation>
	<citation>1468	6	205</citation>
	<citation>1477	6	205</citation>
	<citation>1491	6	205</citation>
	<citation>1496	6	205</citation>
	<citation>1531	6	205</citation>
	<citation>1535	6	205</citation>
	<citation>1565	6	205</citation>
	<citation>1601	6	205</citation>
	<citation>1602	6	205</citation>
	<citation>1613	6	205</citation>
	<citation>1614	6	205</citation>
	<citation>1626	6	205</citation>
	<citation>1641	6	205</citation>
	<citation>1787	6	205</citation>
	<citation>1788	6	205</citation>
	<citation>205	6	205</citation>
	<citation>205	6	205</citation>
	<citation>205	6	205</citation>
	<citation>205	6	205</citation>
	<citation>224	6	205</citation>
	<citation>249	6	205</citation>
	<citation>288	6	205</citation>
	<citation>316	6	205</citation>
	<citation>381	6	205</citation>
	<citation>398	6	205</citation>
	<citation>11	6	205</citation>
	<citation>404	6	205</citation>
	<citation>410	6	205</citation>
	<citation>463	6	205</citation>
	<citation>464	6	205</citation>
	<citation>483	6	205</citation>
	<citation>3184	6	205</citation>
	<citation>3184	6	205</citation>
	<citation>3188	6	205</citation>
	<citation>3189	6	205</citation>
	<citation>584	6	205</citation>
	<citation>600	6	205</citation>
	<citation>680	6	205</citation>
	<citation>691	6	205</citation>
	<citation>729	6	205</citation>
	<citation>763	6	205</citation>
	<citation>799	6	205</citation>
	<citation>799	6	205</citation>
	</citations>
	</document>
	<document id= '204'>
	<citations>
	<citation>204	4	204</citation>
	<citation>204	5	204</citation>
	<citation>204	5	204</citation>
	<citation>204	5	204</citation>
	<citation>3194	5	204</citation>
	</citations>
	<title>Proving Theorems by Pattern Recognition I</title>
	<conference>CACM April, 1960</conference>
	<authors>
	<author>Wang, H.</author>
	</authors>
	<location>CA600407 JB March 22, 1978  1:47 PM</location>
	</document>
	<document id= '203'>
	<citations>
	<citation>203	5	203</citation>
	<citation>203	5	203</citation>
	<citation>203	5	203</citation>
	<citation>2690	5	203</citation>
	<citation>203	6	203</citation>
	<citation>579	6	203</citation>
	</citations>
	<title>Decoding Combinations of the First n Integers Taken k at a Time</title>
	<conference>CACM April, 1960</conference>
	<authors>
	<author>Brown, R. M.</author>
	</authors>
	<location>CA600408 JB March 22, 1978  1:46 PM</location>
	</document>
	<document id= '202'>
	<title>A Control System For Logical Block Diagnosis With Data Loading</title>
	<abstract>This paper describes a section of an integrated diagnostic monitor system which facilitates  the checking of sections of instructions or subroutines anywhere in the object program.  A new method  of specifying all diagnostic operations in a format similar to a computer program makes the system convenient  to use and relatively simple to understand.  The paper also describes a number of other novel diagnostic  features which can be included in the system.</abstract>
	<conference>CACM April, 1960</conference>
	<authors>
	<author>Senko, M. E.</author>
	</authors>
	<location>CA600409 JB March 22, 1978 1:45 PM</location>
	<citations>
	<citation>931	5	202</citation>
	<citation>202	5	202</citation>
	<citation>202	5	202</citation>
	<citation>202	5	202</citation>
	<citation>202	6	202</citation>
	<citation>396	6	202</citation>
	<citation>634	6	202</citation>
	</citations>
	</document>
	<document id= '201'>
	<citations>
	<citation>201	5	201</citation>
	<citation>201	5	201</citation>
	<citation>201	5	201</citation>
	</citations>
	<title>Bessel Funtion I, Series Expansion (Algorithm 5)</title>
	<conference>CACM April, 1960</conference>
	<authors>
	<author>Clarke, D. S.</author>
	</authors>
	<location>CA600410 JB March 22, 1978  1:40 PM</location>
	</document>
	<document id= '200'>
	<citations>
	<citation>200	5	200</citation>
	<citation>200	5	200</citation>
	<citation>200	5	200</citation>
	</citations>
	<title>Bessel Function I, Asymptotic Expansion (Algorithm 6)</title>
	<conference>CACM April, 1960</conference>
	<authors>
	<author>Clarke, D. S.</author>
	</authors>
	<location>CA600411 JB March 22, 1978  1:39 PM</location>
	</document>
	<document id= '199'>
	<citations>
	<citation>199	5	199</citation>
	<citation>199	5	199</citation>
	<citation>199	5	199</citation>
	</citations>
	<title>Euclidian Algorithm (Algorithm 7)</title>
	<conference>CACM April, 1960</conference>
	<authors>
	<author>Claussen, R.</author>
	</authors>
	<location>CA600412 JB March 22, 1978  1:37 PM</location>
	</document>
	<document id= '198'>
	<citations>
	<citation>198	5	198</citation>
	<citation>198	5	198</citation>
	<citation>198	5	198</citation>
	</citations>
	<title>A High-Speed Multiplication Process for Digital Computers</title>
	<conference>CACM April, 1960</conference>
	<authors>
	<author>Gurzi, F.</author>
	</authors>
	<location>CA600413 JB March 22, 1978  1:36 PM</location>
	</document>
	<document id= '197'>
	<citations>
	<citation>197	5	197</citation>
	<citation>197	5	197</citation>
	<citation>197	5	197</citation>
	</citations>
	<title>An Imaginary Number System</title>
	<conference>CACM April, 1960</conference>
	<authors>
	<author>Knuth, D. E.</author>
	</authors>
	<location>CA600414 JB March 22, 1978  1:35 PM</location>
	</document>
	<document id= '196'>
	<citations>
	<citation>123	5	196</citation>
	<citation>140	5	196</citation>
	<citation>196	5	196</citation>
	<citation>196	5	196</citation>
	<citation>196	5	196</citation>
	<citation>919	5	196</citation>
	<citation>989	5	196</citation>
	<citation>1102	5	196</citation>
	<citation>1109	5	196</citation>
	<citation>1140	5	196</citation>
	<citation>1188	5	196</citation>
	<citation>1306	5	196</citation>
	<citation>249	5	196</citation>
	<citation>254	5	196</citation>
	<citation>272	5	196</citation>
	<citation>1464	5	196</citation>
	<citation>1491	5	196</citation>
	<citation>1767	5	196</citation>
	<citation>1781	5	196</citation>
	<citation>1787	5	196</citation>
	<citation>1949	5	196</citation>
	<citation>321	5	196</citation>
	<citation>2059	5	196</citation>
	<citation>2126	5	196</citation>
	<citation>2732	5	196</citation>
	<citation>435	5	196</citation>
	<citation>437	5	196</citation>
	<citation>463	5	196</citation>
	<citation>483	5	196</citation>
	<citation>491	5	196</citation>
	<citation>560	5	196</citation>
	<citation>583	5	196</citation>
	<citation>3073	5	196</citation>
	<citation>627	5	196</citation>
	<citation>631	5	196</citation>
	<citation>632	5	196</citation>
	<citation>642	5	196</citation>
	<citation>644	5	196</citation>
	<citation>653	5	196</citation>
	<citation>680	5	196</citation>
	<citation>761	5	196</citation>
	<citation>762	5	196</citation>
	<citation>763	5	196</citation>
	<citation>1	6	196</citation>
	<citation>1	6	196</citation>
	<citation>823	6	196</citation>
	<citation>106	6	196</citation>
	<citation>123	6	196</citation>
	<citation>152	6	196</citation>
	<citation>165	6	196</citation>
	<citation>168	6	196</citation>
	<citation>185	6	196</citation>
	<citation>196	6	196</citation>
	<citation>196	6	196</citation>
	<citation>196	6	196</citation>
	<citation>196	6	196</citation>
	<citation>196	6	196</citation>
	<citation>196	6	196</citation>
	<citation>196	6	196</citation>
	<citation>196	6	196</citation>
	<citation>196	6	196</citation>
	<citation>196	6	196</citation>
	<citation>196	6	196</citation>
	<citation>196	6	196</citation>
	<citation>196	6	196</citation>
	<citation>196	6	196</citation>
	<citation>196	6	196</citation>
	<citation>196	6	196</citation>
	<citation>196	6	196</citation>
	<citation>196	6	196</citation>
	<citation>196	6	196</citation>
	<citation>196	6	196</citation>
	<citation>196	6	196</citation>
	<citation>196	6	196</citation>
	<citation>196	6	196</citation>
	<citation>196	6	196</citation>
	<citation>196	6	196</citation>
	<citation>196	6	196</citation>
	<citation>196	6	196</citation>
	<citation>196	6	196</citation>
	<citation>196	6	196</citation>
	<citation>196	6	196</citation>
	<citation>196	6	196</citation>
	<citation>196	6	196</citation>
	<citation>196	6	196</citation>
	<citation>196	6	196</citation>
	<citation>196	6	196</citation>
	<citation>196	6	196</citation>
	<citation>196	6	196</citation>
	<citation>196	6	196</citation>
	<citation>196	6	196</citation>
	<citation>196	6	196</citation>
	<citation>919	6	196</citation>
	<citation>946	6	196</citation>
	<citation>947	6	196</citation>
	<citation>990	6	196</citation>
	<citation>1007	6	196</citation>
	<citation>1046	6	196</citation>
	<citation>1131	6	196</citation>
	<citation>1139	6	196</citation>
	<citation>1140	6	196</citation>
	<citation>1140	6	196</citation>
	<citation>1141	6	196</citation>
	<citation>1149	6	196</citation>
	<citation>1198	6	196</citation>
	<citation>1215	6	196</citation>
	<citation>1215	6	196</citation>
	<citation>1223	6	196</citation>
	<citation>1265	6	196</citation>
	<citation>1303	6	196</citation>
	<citation>1303	6	196</citation>
	<citation>1323	6	196</citation>
	<citation>1358	6	196</citation>
	<citation>1366	6	196</citation>
	<citation>1421	6	196</citation>
	<citation>1460	6	196</citation>
	<citation>1462	6	196</citation>
	<citation>1463	6	196</citation>
	<citation>1467	6	196</citation>
	<citation>1467	6	196</citation>
	<citation>1468	6	196</citation>
	<citation>1468	6	196</citation>
	<citation>1477	6	196</citation>
	<citation>1491	6	196</citation>
	<citation>1491	6	196</citation>
	<citation>1496	6	196</citation>
	<citation>1496	6	196</citation>
	<citation>1496	6	196</citation>
	<citation>1531	6	196</citation>
	<citation>1535	6	196</citation>
	<citation>1565	6	196</citation>
	<citation>1601	6	196</citation>
	<citation>1602	6	196</citation>
	<citation>1613	6	196</citation>
	<citation>1614	6	196</citation>
	<citation>1614	6	196</citation>
	<citation>1626	6	196</citation>
	<citation>1641	6	196</citation>
	<citation>1693	6	196</citation>
	<citation>1781	6	196</citation>
	<citation>1787	6	196</citation>
	<citation>1788	6	196</citation>
	<citation>205	6	196</citation>
	<citation>206	6	196</citation>
	<citation>207	6	196</citation>
	<citation>209	6	196</citation>
	<citation>210	6	196</citation>
	<citation>210	6	196</citation>
	<citation>1834	6	196</citation>
	<citation>224	6	196</citation>
	<citation>224	6	196</citation>
	<citation>224	6	196</citation>
	<citation>249	6	196</citation>
	<citation>249	6	196</citation>
	<citation>271	6	196</citation>
	<citation>288	6	196</citation>
	<citation>288	6	196</citation>
	<citation>303	6	196</citation>
	<citation>316	6	196</citation>
	<citation>321	6	196</citation>
	<citation>381	6	196</citation>
	<citation>387	6	196</citation>
	<citation>398	6	196</citation>
	<citation>11	6	196</citation>
	<citation>46	6	196</citation>
	<citation>51	6	196</citation>
	<citation>2732	6	196</citation>
	<citation>400	6	196</citation>
	<citation>401	6	196</citation>
	<citation>402	6	196</citation>
	<citation>404	6	196</citation>
	<citation>404	6	196</citation>
	<citation>404	6	196</citation>
	<citation>404	6	196</citation>
	<citation>404	6	196</citation>
	<citation>404	6	196</citation>
	<citation>404	6	196</citation>
	<citation>406	6	196</citation>
	<citation>410	6	196</citation>
	<citation>412	6	196</citation>
	<citation>463	6	196</citation>
	<citation>463	6	196</citation>
	<citation>464	6	196</citation>
	<citation>483	6	196</citation>
	<citation>483	6	196</citation>
	<citation>483	6	196</citation>
	<citation>3184	6	196</citation>
	<citation>3184	6	196</citation>
	<citation>3184	6	196</citation>
	<citation>3184	6	196</citation>
	<citation>3184	6	196</citation>
	<citation>3188	6	196</citation>
	<citation>584	6	196</citation>
	<citation>600	6	196</citation>
	<citation>615	6	196</citation>
	<citation>631	6	196</citation>
	<citation>642	6	196</citation>
	<citation>680	6	196</citation>
	<citation>691	6	196</citation>
	<citation>729	6	196</citation>
	<citation>763	6	196</citation>
	<citation>763	6	196</citation>
	<citation>799	6	196</citation>
	<citation>799	6	196</citation>
	<citation>799	6	196</citation>
	</citations>
	<title>Report on the Algorithmic Language ALGOL 60</title>
	<conference>CACM May, 1960</conference>
	<authors>
	<author>Naur, P.</author>
	<author>Backus, J.</author>
	</authors>
	<location>CA600501 JB March 22, 1978  1:34 PM</location>
	</document>
	<document id= '195'>
	<citations>
	<citation>195	5	195</citation>
	<citation>195	5	195</citation>
	<citation>195	5	195</citation>
	</citations>
	<title>What is a Code?</title>
	<conference>CACM May, 1960</conference>
	<authors>
	<author>Patterson, G. W.</author>
	</authors>
	<location>CA600502 JB March 22, 1978  1:33 PM</location>
	</document>
	<document id= '194'>
	<citations>
	<citation>194	5	194</citation>
	<citation>194	5	194</citation>
	<citation>194	5	194</citation>
	</citations>
	<title>Divisionless Computation of Square Roots Through Continued Squaring</title>
	<conference>CACM May, 1960</conference>
	<authors>
	<author>Sarafyan, D.</author>
	</authors>
	<location>CA600503 JB March 22, 1978  1:32 PM</location>
	</document>
	<document id= '193'>
	<citations>
	<citation>193	5	193</citation>
	<citation>193	5	193</citation>
	<citation>193	5	193</citation>
	</citations>
	<title>A Start at Automatic Storage Assignment</title>
	<conference>CACM May, 1960</conference>
	<authors>
	<author>Patrick, R. L.</author>
	</authors>
	<location>CA600504 JB March 22, 1978  1:31 PM</location>
	</document>
	<document id= '192'>
	<citations>
	<citation>142	5	192</citation>
	<citation>192	5	192</citation>
	<citation>192	5	192</citation>
	<citation>192	5	192</citation>
	<citation>2952	5	192</citation>
	<citation>142	6	192</citation>
	<citation>162	6	192</citation>
	<citation>162	6	192</citation>
	<citation>163	6	192</citation>
	<citation>163	6	192</citation>
	<citation>192	6	192</citation>
	<citation>192	6	192</citation>
	<citation>2185	6	192</citation>
	<citation>2727	6	192</citation>
	</citations>
	<title>A Technique for Counting Ones in a Binary Computer</title>
	<conference>CACM May, 1960</conference>
	<authors>
	<author>Wegner, P.</author>
	</authors>
	<location>CA600505 JB March 22, 1978  1:30 PM</location>
	</document>
	<document id= '191'>
	<citations>
	<citation>191	5	191</citation>
	<citation>191	5	191</citation>
	<citation>191	5	191</citation>
	</citations>
	<title>Abbreviating Words Systematically</title>
	<conference>CACM May, 1960</conference>
	<authors>
	<author>Barrett, J. A.</author>
	<author>Grems, M.</author>
	</authors>
	<location>CA600506 JB March 22, 1978  1:29 PM</location>
	</document>
	<document id= '190'>
	<citations>
	<citation>190	5	190</citation>
	<citation>190	5	190</citation>
	<citation>190	5	190</citation>
	</citations>
	<title>Bendix G-20 System</title>
	<conference>CACM May, 1960</conference>
	<location>CA600507 JB March 22, 1978  1:28 PM</location>
	</document>
	<document id= '189'>
	<citations>
	<citation>189	5	189</citation>
	<citation>189	5	189</citation>
	<citation>189	5	189</citation>
	</citations>
	<title>The Future of Automatic Digital Computers</title>
	<conference>CACM June, 1960</conference>
	<authors>
	<author>Booth, A. D.</author>
	</authors>
	<location>CA600601 JB March 20, 1978  9:57PM</location>
	</document>
	<document id= '188'>
	<citations>
	<citation>188	5	188</citation>
	<citation>188	5	188</citation>
	<citation>188	5	188</citation>
	</citations>
	<title>The Department of Computer Mathematics at Moscow State University</title>
	<conference>CACM June, 1960</conference>
	<authors>
	<author>Berezin, I. S.</author>
	</authors>
	<location>CA600602 JB March 20, 1978  9:56 PM</location>
	</document>
	<document id= '187'>
	<citations>
	<citation>187	5	187</citation>
	<citation>187	5	187</citation>
	<citation>187	5	187</citation>
	</citations>
	<title>Compiling Connectives</title>
	<conference>CACM June, 1960</conference>
	<authors>
	<author>Swift, C. J.</author>
	</authors>
	<location>CA600603 JB March 20, 1978  9:54 PM</location>
	</document>
	<document id= '186'>
	<citations>
	<citation>186	5	186</citation>
	<citation>186	5	186</citation>
	<citation>186	5	186</citation>
	</citations>
	<title>An Algorithm Defining ALGOL Assignment Statements (Addendum)</title>
	<conference>CACM June, 1960</conference>
	<authors>
	<author>Floyd, R. W.</author>
	</authors>
	<location>CA600604 JB March 20, 1978  9:47 PM</location>
	</document>
	<document id= '185'>
	<title>Multiprogram Scheduling Parts 1 and 2.  Introduction and Theory*</title>
	<abstract>In order to exploit fully a fast computer which possesses simultaneous processing abilities,  it should to a large extent schedule its own workload.  The scheduling routine must be capable of extremely  rapid execution if it is not to prove self-defeating.  The construction of a schedule entails determining  which programs are to be run concurrently and which sequentially with respect to each other.  A concise  scheduling algorithm is described which tends to minimize the time for executing the entire pending workload  (or any subset of it), subject to external constraints such as precedence, urgency, etc.  The algorithm  is applicable to a wide class of machines.</abstract>
	<conference>CACM June, 1960</conference>
	<authors>
	<author>Codd, E. F.</author>
	</authors>
	<location>CA600605 JB March 20, 1978  9:46 PM</location>
	<citations>
	<citation>185	5	185</citation>
	<citation>185	5	185</citation>
	<citation>185	5	185</citation>
	<citation>1713	5	185</citation>
	<citation>1901	5	185</citation>
	<citation>491	5	185</citation>
	<citation>168	6	185</citation>
	<citation>168	6	185</citation>
	<citation>168	6	185</citation>
	<citation>185	6	185</citation>
	<citation>185	6	185</citation>
	<citation>185	6	185</citation>
	<citation>196	6	185</citation>
	<citation>1751	6	185</citation>
	<citation>1754	6	185</citation>
	<citation>46	6	185</citation>
	</citations>
	</document>
	<document id= '184'>
	<citations>
	<citation>184	5	184</citation>
	<citation>184	5	184</citation>
	<citation>184	5	184</citation>
	</citations>
	<title>A Short Method for Measuring Error in a Least-Squares Power Series</title>
	<conference>CACM June, 1960</conference>
	<authors>
	<author>Robinson, S. M.</author>
	<author>Struble, G. W.</author>
	</authors>
	<location>CA600606 JB March 20, 1978  9:41 PM</location>
	</document>
	<document id= '183'>
	<citations>
	<citation>183	5	183</citation>
	<citation>183	5	183</citation>
	<citation>183	5	183</citation>
	</citations>
	<title>Conversion Between Floating Point Representations</title>
	<conference>CACM June, 1960</conference>
	<authors>
	<author>Perry, C.</author>
	</authors>
	<location>CA600607 JB March 20, 1978  9:40 PM</location>
	</document>
	<document id= '182'>
	<citations>
	<citation>182	5	182</citation>
	<citation>182	5	182</citation>
	<citation>182	5	182</citation>
	</citations>
	<title>Evaluation of the Chebyshev Polynomial Tn(X) by Recursion (Algorithm)</title>
	<conference>CACM June, 1960</conference>
	<authors>
	<author>Galler, G. M.</author>
	</authors>
	<location>CA600608 JB March 20, 1978  9:38 PM</location>
	</document>
	<document id= '181'>
	<citations>
	<citation>181	5	181</citation>
	<citation>181	5	181</citation>
	<citation>181	5	181</citation>
	</citations>
	<title>Evaluation of the Hermite Polynomial Hn(X) by Recursion (Algorithm)</title>
	<conference>CACM June, 1960</conference>
	<authors>
	<author>Galler, G. M.</author>
	</authors>
	<location>CA600609 JB March 20, 1978  9:37 PM</location>
	</document>
	<document id= '180'>
	<citations>
	<citation>180	5	180</citation>
	<citation>180	5	180</citation>
	<citation>180	5	180</citation>
	</citations>
	<title>Evaluation of the Laguerre Polynomial Ln(X) by Recursion (Algorithm)</title>
	<conference>CACM June, 1960</conference>
	<authors>
	<author>Galler, G. M.</author>
	</authors>
	<location>CA600610 JB March 20, 1978  9:36 PM</location>
	</document>
	<document id= '179'>
	<citations>
	<citation>179	5	179</citation>
	<citation>179	5	179</citation>
	<citation>179	5	179</citation>
	</citations>
	<title>Evaluation of the Legendre Polynomial Pn(X) by Recursion (Algorithm)</title>
	<conference>CACM June, 1960</conference>
	<authors>
	<author>Galler, G. M.</author>
	</authors>
	<location>CA600611 JB March 20, 1978  9:35 PM</location>
	</document>
	<document id= '178'>
	<citations>
	<citation>178	5	178</citation>
	<citation>178	5	178</citation>
	<citation>178	5	178</citation>
	<citation>1667	5	178</citation>
	<citation>178	6	178</citation>
	<citation>1242	6	178</citation>
	<citation>327	6	178</citation>
	</citations>
	<title>ROOTFINDER (Algorithm)</title>
	<conference>CACM June, 1960</conference>
	<authors>
	</authors>
	<location>CA600612 JB March 20, 1978  9:32 PM</location>
	</document>
	<document id= '177'>
	<citations>
	<citation>177	5	177</citation>
	<citation>177	5	177</citation>
	<citation>177	5	177</citation>
	</citations>
	<title>Solution of Polynomial Equation by Bairstow Hitchcock Method, A. A. Grau Communications ACM,  February, 1960 (Algorithm)</title>
	<conference>CACM June, 1960</conference>
	<authors>
	</authors>
	<location>CA600613 JB March 20, 1978  9:31 PM</location>
	</document>
	<document id= '176'>
	<citations>
	<citation>176	5	176</citation>
	<citation>176	5	176</citation>
	<citation>176	5	176</citation>
	</citations>
	<title>Symbol Manipulation by Threaded Lists (Corrigendum)</title>
	<conference>CACM June, 1960</conference>
	<authors>
	<author>Perlis, A. J.</author>
	<author>Thornton, C.</author>
	</authors>
	<location>CA600614 JB March 20, 1978  9:26 PM</location>
	</document>
	<document id= '175'>
	<citations>
	<citation>120	5	175</citation>
	<citation>175	5	175</citation>
	<citation>175	5	175</citation>
	<citation>175	5	175</citation>
	<citation>175	6	175</citation>
	</citations>
	<title>The Solution of Simultaneous Ordinary Differential Equations Using a General Purpose Digital  Computer</title>
	<conference>CACM June, 1960</conference>
	<authors>
	<author>Anderson, W. H.</author>
	</authors>
	<location>CA600615 JB March 20, 1978  9:25 PM</location>
	</document>
	<document id= '174'>
	<citations>
	<citation>174	5	174</citation>
	<citation>174	5	174</citation>
	<citation>174	5	174</citation>
	</citations>
	<title>Interval Estimation of the Time in One State to Total Time Ratio in a DoubleExponential Process</title>
	<conference>CACM June, 1960</conference>
	<authors>
	<author>Neal, W. R.</author>
	</authors>
	<location>CA600616 JB March 20, 1978  9:24 PM</location>
	</document>
	<document id= '173'>
	<citations>
	<citation>173	5	173</citation>
	<citation>173	5	173</citation>
	<citation>173	5	173</citation>
	</citations>
	<title>ATLAS a new concept in large computer design</title>
	<conference>CACM June, 1960</conference>
	<location>CA600617 JB March 20, 1978  9:22 PM</location>
	</document>
	<document id= '172'>
	<citations>
	<citation>172	5	172</citation>
	<citation>172	5	172</citation>
	<citation>172	5	172</citation>
	</citations>
	<title>Complex Exponential Integral (Algorithm 13)</title>
	<conference>CACM July, 1960</conference>
	<authors>
	<author>Beam, A.</author>
	</authors>
	<location>CA600701 JB March 20, 1978  9:21 PM</location>
	</document>
	<document id= '171'>
	<citations>
	<citation>171	5	171</citation>
	<citation>171	5	171</citation>
	<citation>171	5	171</citation>
	</citations>
	<title>Digital Computers in Universities (Part I)</title>
	<conference>CACM July, 1960</conference>
	<authors>
	<author>Reeves, R. F.</author>
	</authors>
	<location>CA600702 JB March 20, 1978  9:20 PM</location>
	</document>
	<document id= '170'>
	<citations>
	<citation>170	5	170</citation>
	<citation>170	5	170</citation>
	<citation>170	5	170</citation>
	</citations>
	<title>Some Thoughts on Reconciling Various Character Set Proposals</title>
	<conference>CACM July, 1960</conference>
	<authors>
	<author>Voorhees, E. A.</author>
	</authors>
	<location>CA600703 JB March 20, 1978  9:18 PM</location>
	</document>
	<document id= '169'>
	<citations>
	<citation>169	5	169</citation>
	<citation>169	5	169</citation>
	<citation>169	5	169</citation>
	</citations>
	<title>The Multilingual Terminology Project</title>
	<conference>CACM July, 1960</conference>
	<authors>
	<author>Holmstrom, J. E.</author>
	</authors>
	<location>CA600704 JB March 20, 1978  9:17 PM</location>
	</document>
	<document id= '168'>
	<citations>
	<citation>491	4	168</citation>
	<citation>168	4	168</citation>
	<citation>168	5	168</citation>
	<citation>168	5	168</citation>
	<citation>168	5	168</citation>
	<citation>1713	5	168</citation>
	<citation>1901	5	168</citation>
	<citation>491	5	168</citation>
	<citation>46	5	168</citation>
	<citation>168	6	168</citation>
	<citation>168	6	168</citation>
	<citation>168	6	168</citation>
	<citation>185	6	168</citation>
	<citation>185	6	168</citation>
	<citation>185	6	168</citation>
	<citation>196	6	168</citation>
	<citation>1751	6	168</citation>
	<citation>1754	6	168</citation>
	<citation>46	6	168</citation>
	</citations>
	<title>Multiprogram Scheduling Parts 3 and 4 Scheduling Algorithm and External Constraints</title>
	<conference>CACM July, 1960</conference>
	<authors>
	<author>Codd, E. F.</author>
	</authors>
	<location>CA600705 JB March 20, 1978  9:16 PM</location>
	</document>
	<document id= '167'>
	<citations>
	<citation>167	5	167</citation>
	<citation>167	5	167</citation>
	<citation>167	5	167</citation>
	</citations>
	<title>Combining ALGOL Statement Analysis with Validity Checking</title>
	<conference>CACM July, 1960</conference>
	<authors>
	<author>McIsaac, P.</author>
	</authors>
	<location>CA600706 JB March 20, 1978  9:15 PM</location>
	</document>
	<document id= '166'>
	<citations>
	<citation>166	5	166</citation>
	<citation>166	5	166</citation>
	<citation>166	5	166</citation>
	</citations>
	<title>Programming Compatibility in a Family of Closely Related Digital Computers</title>
	<conference>CACM July, 1960</conference>
	<authors>
	<author>Luebbert, W. F.</author>
	</authors>
	<location>CA600707 JB March 20, 1978  9:14 PM</location>
	</document>
	<document id= '165'>
	<citations>
	<citation>123	5	165</citation>
	<citation>165	5	165</citation>
	<citation>165	5	165</citation>
	<citation>165	5	165</citation>
	<citation>637	5	165</citation>
	<citation>1	6	165</citation>
	<citation>123	6	165</citation>
	<citation>165	6	165</citation>
	<citation>165	6	165</citation>
	<citation>196	6	165</citation>
	</citations>
	<title>NELIAC-A Dialect of ALGOL</title>
	<conference>CACM August, 1960</conference>
	<authors>
	<author>Huskey, H. D.</author>
	<author>Halstead, M. H.</author>
	</authors>
	<location>CA600801 JB March 20, 1978  9:03 PM</location>
	</document>
	<document id= '164'>
	<citations>
	<citation>205	4	164</citation>
	<citation>210	4	164</citation>
	<citation>214	4	164</citation>
	<citation>1982	4	164</citation>
	<citation>398	4	164</citation>
	<citation>642	4	164</citation>
	<citation>669	4	164</citation>
	<citation>100	4	164</citation>
	<citation>123	4	164</citation>
	<citation>164	4	164</citation>
	<citation>164	5	164</citation>
	<citation>164	5	164</citation>
	<citation>164	5	164</citation>
	<citation>1	5	164</citation>
	</citations>
	<title>A Short Study of Notation Efficiency</title>
	<conference>CACM August, 1960</conference>
	<authors>
	</authors>
	<location>CA600802 JB March 20, 1978  9:02 PM</location>
	</document>
	<document id= '163'>
	<citations>
	<citation>142	5	163</citation>
	<citation>163	5	163</citation>
	<citation>163	5	163</citation>
	<citation>163	5	163</citation>
	<citation>2952	5	163</citation>
	<citation>142	6	163</citation>
	<citation>162	6	163</citation>
	<citation>162	6	163</citation>
	<citation>163	6	163</citation>
	<citation>163	6	163</citation>
	<citation>192	6	163</citation>
	<citation>192	6	163</citation>
	<citation>2185	6	163</citation>
	<citation>2727	6	163</citation>
	</citations>
	<title>Counting Ones on the IBM 7090</title>
	<conference>CACM August, 1960</conference>
	<authors>
	<author>Kutler, S. S.</author>
	</authors>
	<location>CA600803 JB March 20, 1978  9:01 PM</location>
	</document>
	<document id= '162'>
	<citations>
	<citation>142	5	162</citation>
	<citation>162	5	162</citation>
	<citation>162	5	162</citation>
	<citation>162	5	162</citation>
	<citation>2952	5	162</citation>
	<citation>142	6	162</citation>
	<citation>162	6	162</citation>
	<citation>162	6	162</citation>
	<citation>163	6	162</citation>
	<citation>163	6	162</citation>
	<citation>192	6	162</citation>
	<citation>192	6	162</citation>
	<citation>2185	6	162</citation>
	<citation>2727	6	162</citation>
	</citations>
	<title>A Variant Technique for Counting Ones</title>
	<conference>CACM August, 1960</conference>
	<authors>
	<author>Frieden, H.</author>
	</authors>
	<location>CA600804 JB March 20, 1978  9:00 PM</location>
	</document>
	<document id= '161'>
	<citations>
	<citation>161	5	161</citation>
	<citation>161	5	161</citation>
	<citation>161	5	161</citation>
	</citations>
	<title>Abbreviating Words Systematically (Corrigendum)</title>
	<conference>CACM August, 1960</conference>
	<authors>
	<author>Barrett, J. A.</author>
	<author>Grems, M.</author>
	</authors>
	<location>CA600805 JB March 20, 1978  8:58 PM</location>
	</document>
	<document id= '160'>
	<citations>
	<citation>160	5	160</citation>
	<citation>160	5	160</citation>
	<citation>160	5	160</citation>
	</citations>
	<title>ROOTFINDER II (Algorithm 15)</title>
	<conference>CACM August, 1960</conference>
	<authors>
	</authors>
	<location>CA600806 JB March 20, 1978  8:57 PM</location>
	</document>
	<document id= '159'>
	<citations>
	<citation>159	5	159</citation>
	<citation>159	5	159</citation>
	<citation>159	5	159</citation>
	</citations>
	<title>ROOTFINDER (Algorithm 2)</title>
	<conference>CACM August, 1960</conference>
	<authors>
	</authors>
	<location>CA600807 JB March 20, 1978  8:56 PM</location>
	</document>
	<document id= '158'>
	<citations>
	<citation>158	5	158</citation>
	<citation>158	5	158</citation>
	<citation>158	5	158</citation>
	</citations>
	<title>ROOTFINDER II (Algorithm 15)</title>
	<conference>CACM August, 1960</conference>
	<authors>
	</authors>
	<location>CA600808 JB March 20, 1978  8:55 PM</location>
	</document>
	<document id= '157'>
	<citations>
	<citation>157	5	157</citation>
	<citation>157	5	157</citation>
	<citation>157	5	157</citation>
	</citations>
	<title>Digital Computers in Universities -II</title>
	<conference>CACM August, 1960</conference>
	<authors>
	<author>Reeves, R. F.</author>
	</authors>
	<location>CA600809 JB March 20, 1978  8:54 PM</location>
	</document>
	<document id= '156'>
	<citations>
	<citation>156	5	156</citation>
	<citation>156	5	156</citation>
	<citation>156	5	156</citation>
	</citations>
	<title>An Introductory Problem in Symbol Manipulation for the Student</title>
	<conference>CACM September, 1960</conference>
	<authors>
	<author>Rosin, R. F.</author>
	</authors>
	<location>CA600901 JB March 20, 1978  8:51 PM</location>
	</document>
	<document id= '155'>
	<citations>
	<citation>155	5	155</citation>
	<citation>155	5	155</citation>
	<citation>155	5	155</citation>
	<citation>944	5	155</citation>
	<citation>2846	5	155</citation>
	<citation>849	5	155</citation>
	<citation>155	6	155</citation>
	<citation>155	6	155</citation>
	<citation>155	6	155</citation>
	<citation>615	6	155</citation>
	</citations>
	<title>Trie Memory</title>
	<conference>CACM September, 1960</conference>
	<authors>
	<author>Fredkin, E.</author>
	</authors>
	<location>CA600902 JB March 20, 1978  8:50 PM</location>
	</document>
	<document id= '154'>
	<citations>
	<citation>154	5	154</citation>
	<citation>154	5	154</citation>
	<citation>154	5	154</citation>
	</citations>
	<title>Rapidly Convergent Expressions for Evaluating e^x</title>
	<conference>CACM September, 1960</conference>
	<authors>
	<author>Berin, A.</author>
	</authors>
	<location>CA600903 JB March 20, 1978  8:49 PM</location>
	</document>
	<document id= '153'>
	<citations>
	<citation>153	5	153</citation>
	<citation>153	5	153</citation>
	<citation>153	5	153</citation>
	<citation>754	5	153</citation>
	<citation>153	6	153</citation>
	</citations>
	<title>Comments from a FORTRAN User</title>
	<conference>CACM September, 1960</conference>
	<authors>
	<author>Blatt, J. M.</author>
	</authors>
	<location>CA600904 JB March 20, 1978  8:48 PM</location>
	</document>
	<document id= '152'>
	<citations>
	<citation>140	5	152</citation>
	<citation>152	5	152</citation>
	<citation>152	5	152</citation>
	<citation>152	5	152</citation>
	<citation>1319	5	152</citation>
	<citation>454	5	152</citation>
	<citation>152	6	152</citation>
	<citation>152	6	152</citation>
	<citation>152	6	152</citation>
	<citation>196	6	152</citation>
	<citation>1128	6	152</citation>
	<citation>586	6	152</citation>
	</citations>
	<title>CROUT With Pivoting (Algorithm 16)</title>
	<conference>CACM September, 1960</conference>
	<authors>
	<author>Forsythe, G. E.</author>
	</authors>
	<location>CA600905 JB March 20, 1978  8:47 PM</location>
	</document>
	<document id= '151'>
	<citations>
	<citation>151	5	151</citation>
	<citation>151	5	151</citation>
	<citation>151	5	151</citation>
	</citations>
	<title>TRDIAG (Algorithm 17)</title>
	<conference>CACM September, 1960</conference>
	<authors>
	<author>III, C. D.</author>
	</authors>
	<location>CA600906 JB March 20, 1978  8:45 PM</location>
	</document>
	<document id= '150'>
	<citations>
	<citation>150	5	150</citation>
	<citation>150	5	150</citation>
	<citation>150	5	150</citation>
	</citations>
	<title>Rational Interpolation by Continued Fractions (Algorithm 18)</title>
	<conference>CACM September, 1960</conference>
	<authors>
	<author>Floyd, R. W.</author>
	</authors>
	<location>CA600907 JB March 20, 1978  8:44 PM</location>
	</document>
	<document id= '149'>
	<citations>
	<citation>149	5	149</citation>
	<citation>149	5	149</citation>
	<citation>149	5	149</citation>
	</citations>
	<title>A Decision Rule for Improved Efficiency in Solving Linear Programming Problems with the Simplex  Algorithm</title>
	<conference>CACM September, 1960</conference>
	<authors>
	<author>Dickson, J. C.</author>
	<author>Frederick, F. P.</author>
	</authors>
	<location>CA600908 JB March 20, 1978  8:43 PM</location>
	</document>
	<document id= '148'>
	<citations>
	<citation>148	5	148</citation>
	<citation>148	5	148</citation>
	<citation>148	5	148</citation>
	</citations>
	<title>Digital Computers in Universities-III</title>
	<conference>CACM September, 1960</conference>
	<authors>
	<author>Reeves, R. F.</author>
	</authors>
	<location>CA600909 JB March 20, 1978  8:41 PM</location>
	</document>
	<document id= '147'>
	<citations>
	<citation>147	5	147</citation>
	<citation>147	5	147</citation>
	<citation>147	5	147</citation>
	</citations>
	<title>Report on a Conference of University Computing Center Directors</title>
	<conference>CACM October, 1960</conference>
	<location>CA601001 JB March 20, 1978  8:38 PM</location>
	</document>
	<document id= '146'>
	<title>The Use of Computers in Engineering Classroom Instruction</title>
	<abstract>On April 29-30, the Computer Committee of the College of Engineering, University of Michigan,  which acts as a steering committee for The Ford Foundation Project on the Use of Computers in Engineering  Education, held a special conference to discuss certain timely topics pertinent to the Ford Project.   This report contains a condensed transcription of the key ideas offered by the conference attendees  on selected topics.</abstract>
	<conference>CACM October, 1960</conference>
	<authors>
	<author>Katz, D. L.</author>
	</authors>
	<location>CA601002 JB March 20, 1978  8:37 PM</location>
	<citations>
	<citation>146	5	146</citation>
	<citation>146	5	146</citation>
	<citation>146	5	146</citation>
	</citations>
	</document>
	<document id= '145'>
	<citations>
	<citation>145	5	145</citation>
	<citation>145	5	145</citation>
	<citation>145	5	145</citation>
	<citation>1270	5	145</citation>
	<citation>1902	5	145</citation>
	<citation>145	6	145</citation>
	<citation>145	6	145</citation>
	<citation>1270	6	145</citation>
	<citation>3184	6	145</citation>
	</citations>
	<title>Automatic Graders for Programming Classes</title>
	<conference>CACM October, 1960</conference>
	<authors>
	<author>Hollingsworth, J.</author>
	</authors>
	<location>CA601003 JB March 20, 1978  8:28 PM</location>
	</document>
	<document id= '144'>
	<title>Do It by the Numbers-Digital Shorthand</title>
	<abstract>Present communications systems transmit single characters in groups of coded pulses between  simple terminal equipments.  Since English words form only a sparse set of all possible alphabetic combinations,  present methods are inefficient when computer systems are substituted for these terminals.  Using numeric  representations of entire words or common phrases (rather than character-by-character representations)  requires approximately one-third of present transmission time.  This saving is reflected in overall costs.   Other benefits accrue in code and language translation schemes. Provision is made for transmission of  purely numeric and/or binary streams, and for single character-transmission of non-dictionary words such  as the names of people or places.</abstract>
	<conference>CACM October, 1960</conference>
	<authors>
	<author>Bemer, R. W.</author>
	</authors>
	<location>CA601004 JB March 20, 1978  8:27 PM</location>
	<citations>
	<citation>144	5	144</citation>
	<citation>144	5	144</citation>
	<citation>144	5	144</citation>
	</citations>
	</document>
	<document id= '143'>
	<citations>
	<citation>143	5	143</citation>
	<citation>143	5	143</citation>
	<citation>143	5	143</citation>
	</citations>
	<title>A List of Computer Systems Programs for the IBM 650, DATATRON 205, and UNIVAC SS-80</title>
	<conference>CACM October, 1960</conference>
	<authors>
	<author>Romberg, A.</author>
	</authors>
	<location>CA601005 JB March 20, 1978  8:21 PM</location>
	</document>
	<document id= '142'>
	<citations>
	<citation>2952	4	142</citation>
	<citation>2952	4	142</citation>
	<citation>2952	4	142</citation>
	<citation>142	4	142</citation>
	<citation>142	4	142</citation>
	<citation>142	4	142</citation>
	<citation>142	5	142</citation>
	<citation>142	5	142</citation>
	<citation>142	5	142</citation>
	<citation>162	5	142</citation>
	<citation>163	5	142</citation>
	<citation>192	5	142</citation>
	<citation>362	5	142</citation>
	<citation>2952	5	142</citation>
	<citation>142	6	142</citation>
	<citation>142	6	142</citation>
	<citation>162	6	142</citation>
	<citation>163	6	142</citation>
	<citation>192	6	142</citation>
	<citation>2185	6	142</citation>
	<citation>2727	6	142</citation>
	</citations>
	<title>Comments on a Technique for Counting Ones</title>
	<conference>CACM October, 1960</conference>
	<authors>
	<author>Sherman, P. M.</author>
	</authors>
	<location>CA601006 JB March 20, 1978  8:18 PM</location>
	</document>
	<document id= '141'>
	<citations>
	<citation>141	5	141</citation>
	<citation>141	5	141</citation>
	<citation>141	5	141</citation>
	</citations>
	<title>Some Thoughts on Parallel Processing</title>
	<conference>CACM October, 1960</conference>
	<authors>
	<author>Yarbrough, L. D.</author>
	</authors>
	<location>CA601007 JB March 20, 1978  8:16 PM</location>
	</document>
	<document id= '140'>
	<citations>
	<citation>249	4	140</citation>
	<citation>254	4	140</citation>
	<citation>272	4	140</citation>
	<citation>1102	4	140</citation>
	<citation>1109	4	140</citation>
	<citation>1140	4	140</citation>
	<citation>1188	4	140</citation>
	<citation>1306	4	140</citation>
	<citation>1319	4	140</citation>
	<citation>1464	4	140</citation>
	<citation>1491	4	140</citation>
	<citation>1767	4	140</citation>
	<citation>1781	4	140</citation>
	<citation>1787	4	140</citation>
	<citation>1949	4	140</citation>
	<citation>321	4	140</citation>
	<citation>2059	4	140</citation>
	<citation>2126	4	140</citation>
	<citation>435	4	140</citation>
	<citation>437	4	140</citation>
	<citation>454	4	140</citation>
	<citation>463	4	140</citation>
	<citation>483	4	140</citation>
	<citation>491	4	140</citation>
	<citation>2732	4	140</citation>
	<citation>560	4	140</citation>
	<citation>583	4	140</citation>
	<citation>3073	4	140</citation>
	<citation>627	4	140</citation>
	<citation>631	4	140</citation>
	<citation>632	4	140</citation>
	<citation>642	4	140</citation>
	<citation>644	4	140</citation>
	<citation>653	4	140</citation>
	<citation>680	4	140</citation>
	<citation>761	4	140</citation>
	<citation>762	4	140</citation>
	<citation>763	4	140</citation>
	<citation>123	4	140</citation>
	<citation>140	4	140</citation>
	<citation>140	4	140</citation>
	<citation>919	4	140</citation>
	<citation>989	4	140</citation>
	<citation>140	5	140</citation>
	<citation>140	5	140</citation>
	<citation>140	5	140</citation>
	<citation>152	5	140</citation>
	<citation>196	5	140</citation>
	</citations>
	<title>Crout with Pivoting (Algorithm 16)</title>
	<conference>CACM October, 1960</conference>
	<authors>
	<author>Forsythe, G. E.</author>
	</authors>
	<location>CA601008 JB March 20, 1978  8:15 PM</location>
	</document>
	<document id= '139'>
	<citations>
	<citation>139	5	139</citation>
	<citation>139	5	139</citation>
	<citation>139	5	139</citation>
	</citations>
	<title>Binomial Coefficients (Algorithm 19)</title>
	<conference>CACM October, 1960</conference>
	<authors>
	<author>Kenyon, R. R.</author>
	</authors>
	<location>CA601009 JB March 20, 1978  8:14 PM</location>
	</document>
	<document id= '138'>
	<citations>
	<citation>138	5	138</citation>
	<citation>138	5	138</citation>
	<citation>138	5	138</citation>
	</citations>
	<title>Some Thoughts on Reconciling Various Character Set Proposals (Corrigenda)</title>
	<conference>CACM October, 1960</conference>
	<authors>
	<author>Voorhees, E. A.</author>
	</authors>
	<location>CA601010 JB March 20, 1978  8:13 PM</location>
	</document>
	<document id= '137'>
	<citations>
	<citation>137	5	137</citation>
	<citation>137	5	137</citation>
	<citation>137	5	137</citation>
	</citations>
	<title>Evaluating Numbers Expressed as Strings of English Words</title>
	<conference>CACM October, 1960</conference>
	<authors>
	<author>Swift, C. J.</author>
	</authors>
	<location>CA601011 JB March 20, 1978  8:11 PM</location>
	</document>
	<document id= '136'>
	<citations>
	<citation>136	5	136</citation>
	<citation>136	5	136</citation>
	<citation>136	5	136</citation>
	</citations>
	<title>A Note on the Calculation of Interest</title>
	<conference>CACM October, 1960</conference>
	<authors>
	<author>Ingerman, P. Z.</author>
	</authors>
	<location>CA601012 JB March 20, 1978  8:09 PM</location>
	</document>
	<document id= '135'>
	<citations>
	<citation>135	5	135</citation>
	<citation>135	5	135</citation>
	<citation>135	5	135</citation>
	</citations>
	<title>Digital Computers in Universities-IV</title>
	<conference>CACM October, 1960</conference>
	<authors>
	<author>Reeves, R. F.</author>
	</authors>
	<location>CA601013 JB March 20, 1978  8:07 PM</location>
	</document>
	<document id= '134'>
	<citations>
	<citation>134	5	134</citation>
	<citation>134	5	134</citation>
	<citation>134	5	134</citation>
	<citation>1909	5	134</citation>
	<citation>134	6	134</citation>
	<citation>1023	6	134</citation>
	<citation>1284	6	134</citation>
	<citation>1316	6	134</citation>
	</citations>
	<title>Bessel Function for a Set of Integer Orders(Algorithm 21)</title>
	<conference>CACM November, 1960</conference>
	<authors>
	<author>Supan, W.</author>
	</authors>
	<location>CA601101 JB March 20, 1978 8:05 PM</location>
	</document>
	<document id= '133'>
	<citations>
	<citation>133	5	133</citation>
	<citation>133	5	133</citation>
	<citation>133	5	133</citation>
	</citations>
	<title>Riccati-Bessel Functions of First And Second Kind (Algorithm 22)</title>
	<conference>CACM November, 1960</conference>
	<authors>
	<author>Oser, H.</author>
	</authors>
	<location>CA601102 JB March 20, 1978  8:04 PM</location>
	</document>
	<document id= '132'>
	<citations>
	<citation>132	5	132</citation>
	<citation>132	5	132</citation>
	<citation>132	5	132</citation>
	</citations>
	<title>Math Sort (Algorithm 23)</title>
	<conference>CACM November, 1960</conference>
	<authors>
	<author>Feurzeig, W.</author>
	</authors>
	<location>CA601103 JB March 20, 1978  8:03 PM</location>
	</document>
	<document id= '131'>
	<citations>
	<citation>131	5	131</citation>
	<citation>131	5	131</citation>
	<citation>131	5	131</citation>
	</citations>
	<title>Solution of Tri-Diagonal Linear Equations (Algorithm 24)</title>
	<conference>CACM November, 1960</conference>
	<authors>
	<author>Leavenworth, B.</author>
	</authors>
	<location>CA601104 JB March 20, 1978  8:01 PM</location>
	</document>
	<document id= '130'>
	<citations>
	<citation>130	5	130</citation>
	<citation>130	5	130</citation>
	<citation>130	5	130</citation>
	</citations>
	<title>Real Zeros of an Arbitrary Function (Algorithm 25)</title>
	<conference>CACM November, 1960</conference>
	<authors>
	<author>Leavenworth, B.</author>
	</authors>
	<location>CA601105 JB March 20, 1978  8:00 PM</location>
	</document>
	<document id= '129'>
	<citations>
	<citation>129	5	129</citation>
	<citation>129	5	129</citation>
	<citation>129	5	129</citation>
	</citations>
	<title>ROOTFINDER II (Algorithm 15)</title>
	<conference>CACM November, 1960</conference>
	<authors>
	<author>Forsythe, G. E.</author>
	<author>Herriot, J. G.</author>
	</authors>
	<location>CA601106 JB March 20, 1978  7:59 PM</location>
	</document>
	<document id= '128'>
	<citations>
	<citation>128	5	128</citation>
	<citation>128	5	128</citation>
	<citation>128	5	128</citation>
	</citations>
	<title>ROOTFINDER III (Algorithm 26)</title>
	<conference>CACM November, 1960</conference>
	<authors>
	<author>Herroit, J. G.</author>
	</authors>
	<location>CA601107 JB March 20, 1978  7:57 PM</location>
	</document>
	<document id= '127'>
	<citations>
	<citation>127	5	127</citation>
	<citation>127	5	127</citation>
	<citation>127	5	127</citation>
	</citations>
	<title>ASSIGNMENT (Algorithm 27)</title>
	<conference>CACM November, 1960</conference>
	<authors>
	<author>Silver, R.</author>
	</authors>
	<location>CA601108 JB March 20, 1978  7:09 PM</location>
	</document>
	<document id= '126'>
	<citations>
	<citation>126	5	126</citation>
	<citation>126	5	126</citation>
	<citation>126	5	126</citation>
	</citations>
	<title>Least Squares Fit By Orthogonal polynomials (Algorithm 28)</title>
	<conference>CACM November, 1960</conference>
	<authors>
	<author>Mackinney, J. G.</author>
	</authors>
	<location>CA601109 JB March 20, 1978  7:08 PM</location>
	</document>
	<document id= '125'>
	<citations>
	<citation>125	5	125</citation>
	<citation>125	5	125</citation>
	<citation>125	5	125</citation>
	<citation>1816	5	125</citation>
	<citation>125	6	125</citation>
	</citations>
	<title>Polynomial Transformer (Algorithm 29)</title>
	<conference>CACM November, 1960</conference>
	<authors>
	<author>Mackinney, J. G.</author>
	</authors>
	<location>CA601110 JB March 20, 1978  7:06 PM</location>
	</document>
	<document id= '124'>
	<title>An Algorithm for the Assignment Problem</title>
	<abstract>The assignment problem is formulated and briefly discussed.  An efficient algorithm for its  solution is presented in ALGOL code.  An empirical relation between solution time and the size of the  problem is given, based on extensive experiments carried out on a digital computer.</abstract>
	<conference>CACM November, 1960</conference>
	<authors>
	<author>Silver, R.</author>
	</authors>
	<location>CA601111 JB March 20, 1978  7:05 PM</location>
	<citations>
	<citation>124	5	124</citation>
	<citation>124	5	124</citation>
	<citation>124	5	124</citation>
	<citation>2133	5	124</citation>
	<citation>2134	5	124</citation>
	<citation>124	6	124</citation>
	<citation>124	6	124</citation>
	<citation>2134	6	124</citation>
	</citations>
	</document>
	<document id= '123'>
	<title>Compilation for Two Computers with NELIAC</title>
	<abstract>NELIAC, a compiler based on ALGOL, was developed at the U.S. Navy Electronics Laboratory, San  Diego,California, as a"boot-strap" compiler for the Remington Rand Univac COUNTESS computer. This compiler  was used to generate a version of itself which, running as a COUNTESS program, generated machine code  for the Control Data Corporation CDC-1604.  All three versions of NELIAC accepted essentially identical  input language.</abstract>
	<conference>CACM November, 1960</conference>
	<authors>
	</authors>
	<location>CA601112 JB March 20, 1978  7:03 PM</location>
	<citations>
	<citation>205	4	123</citation>
	<citation>210	4	123</citation>
	<citation>214	4	123</citation>
	<citation>249	4	123</citation>
	<citation>254	4	123</citation>
	<citation>272	4	123</citation>
	<citation>1102	4	123</citation>
	<citation>1109	4	123</citation>
	<citation>1140	4	123</citation>
	<citation>1188	4	123</citation>
	<citation>1306	4	123</citation>
	<citation>1464	4	123</citation>
	<citation>1491	4	123</citation>
	<citation>1767	4	123</citation>
	<citation>1781	4	123</citation>
	<citation>1787	4	123</citation>
	<citation>1949	4	123</citation>
	<citation>1982	4	123</citation>
	<citation>321	4	123</citation>
	<citation>398	4	123</citation>
	<citation>2059	4	123</citation>
	<citation>2126	4	123</citation>
	<citation>435	4	123</citation>
	<citation>437	4	123</citation>
	<citation>463	4	123</citation>
	<citation>483	4	123</citation>
	<citation>491	4	123</citation>
	<citation>2732	4	123</citation>
	<citation>560	4	123</citation>
	<citation>583	4	123</citation>
	<citation>3073	4	123</citation>
	<citation>627	4	123</citation>
	<citation>631	4	123</citation>
	<citation>632	4	123</citation>
	<citation>637	4	123</citation>
	<citation>642	4	123</citation>
	<citation>642	4	123</citation>
	<citation>644	4	123</citation>
	<citation>653	4	123</citation>
	<citation>669	4	123</citation>
	<citation>680	4	123</citation>
	<citation>761	4	123</citation>
	<citation>762	4	123</citation>
	<citation>763	4	123</citation>
	<citation>100	4	123</citation>
	<citation>123	4	123</citation>
	<citation>123	4	123</citation>
	<citation>123	4	123</citation>
	<citation>140	4	123</citation>
	<citation>164	4	123</citation>
	<citation>919	4	123</citation>
	<citation>989	4	123</citation>
	<citation>123	5	123</citation>
	<citation>123	5	123</citation>
	<citation>123	5	123</citation>
	<citation>165	5	123</citation>
	<citation>196	5	123</citation>
	<citation>1	5	123</citation>
	<citation>1781	5	123</citation>
	<citation>637	5	123</citation>
	<citation>123	6	123</citation>
	<citation>123	6	123</citation>
	<citation>165	6	123</citation>
	<citation>196	6	123</citation>
	<citation>919	6	123</citation>
	<citation>990	6	123</citation>
	<citation>1007	6	123</citation>
	<citation>1046	6	123</citation>
	<citation>1131	6	123</citation>
	<citation>1139	6	123</citation>
	<citation>1140	6	123</citation>
	<citation>1149	6	123</citation>
	<citation>1198	6	123</citation>
	<citation>1215	6	123</citation>
	<citation>1223	6	123</citation>
	<citation>1265	6	123</citation>
	<citation>1303	6	123</citation>
	<citation>1323	6	123</citation>
	<citation>1358	6	123</citation>
	<citation>1366	6	123</citation>
	<citation>1421	6	123</citation>
	<citation>1460	6	123</citation>
	<citation>1462	6	123</citation>
	<citation>1463	6	123</citation>
	<citation>1467	6	123</citation>
	<citation>1468	6	123</citation>
	<citation>1477	6	123</citation>
	<citation>1491	6	123</citation>
	<citation>1496	6	123</citation>
	<citation>1531	6	123</citation>
	<citation>1535	6	123</citation>
	<citation>1565	6	123</citation>
	<citation>1601	6	123</citation>
	<citation>1602	6	123</citation>
	<citation>1613	6	123</citation>
	<citation>1614	6	123</citation>
	<citation>1626	6	123</citation>
	<citation>1641	6	123</citation>
	<citation>1787	6	123</citation>
	<citation>1788	6	123</citation>
	<citation>205	6	123</citation>
	<citation>224	6	123</citation>
	<citation>249	6	123</citation>
	<citation>288	6	123</citation>
	<citation>316	6	123</citation>
	<citation>381	6	123</citation>
	<citation>398	6	123</citation>
	<citation>11	6	123</citation>
	<citation>404	6	123</citation>
	<citation>410	6	123</citation>
	<citation>463	6	123</citation>
	<citation>464	6	123</citation>
	<citation>483	6	123</citation>
	<citation>3184	6	123</citation>
	<citation>3188	6	123</citation>
	<citation>584	6	123</citation>
	<citation>600	6	123</citation>
	<citation>680	6	123</citation>
	<citation>691	6	123</citation>
	<citation>763	6	123</citation>
	<citation>799	6	123</citation>
	</citations>
	</document>
	<document id= '122'>
	<citations>
	<citation>122	5	122</citation>
	<citation>122	5	122</citation>
	<citation>122	5	122</citation>
	<citation>297	5	122</citation>
	<citation>122	6	122</citation>
	</citations>
	<title>Least Squares Fitting of a Great Circle Through Points on a Sphere</title>
	<conference>CACM November,1960</conference>
	<authors>
	<author>DeWitte, L.</author>
	</authors>
	<location>CA601113 JB March 20, 1978  6:59 PM</location>
	</document>
	<document id= '121'>
	<citations>
	<citation>121	4	121</citation>
	<citation>121	5	121</citation>
	<citation>121	5	121</citation>
	<citation>121	5	121</citation>
	<citation>221	5	121</citation>
	</citations>
	<title>Over-all Computation Control and Labelling</title>
	<conference>CACM November, 1960</conference>
	<authors>
	<author>Holt, A.</author>
	</authors>
	<location>CA601114 JB March 20, 1978  6:58 PM</location>
	</document>
	<document id= '120'>
	<citations>
	<citation>120	4	120</citation>
	<citation>120	5	120</citation>
	<citation>120	5	120</citation>
	<citation>120	5	120</citation>
	<citation>175	5	120</citation>
	</citations>
	<title>A Simple Technique for Coding Differential Equations</title>
	<conference>CACM November, 1960</conference>
	<authors>
	<author>Sefton, P.</author>
	<author>Vaillancourt, R.</author>
	</authors>
	<location>CA601115 JB March 20, 1978  6:57 PM</location>
	</document>
	<document id= '119'>
	<citations>
	<citation>119	5	119</citation>
	<citation>119	5	119</citation>
	<citation>119	5	119</citation>
	</citations>
	<title>Note on Eigenvalue Computation</title>
	<conference>CACM November, 1960</conference>
	<authors>
	<author>Andrus, J. F.</author>
	</authors>
	<location>CA601116 JB March 20, 1978  6:53 PM</location>
	</document>
	<document id= '118'>
	<citations>
	<citation>118	5	118</citation>
	<citation>118	5	118</citation>
	<citation>118	5	118</citation>
	</citations>
	<title>Character Scanning on the IBM 7070</title>
	<conference>CACM November, 1960</conference>
	<authors>
	<author>Speckhard, A. E.</author>
	</authors>
	<location>CA601117 JB March 20, 1978  6:52 PM</location>
	</document>
	<document id= '117'>
	<citations>
	<citation>117	5	117</citation>
	<citation>117	5	117</citation>
	<citation>117	5	117</citation>
	</citations>
	<title>An Estimation of the Relative Efficiency of Two Internal Sorting Methods</title>
	<conference>CACM November, 1960</conference>
	<authors>
	<author>Nagler, H.</author>
	</authors>
	<location>CA601118 JB March 20, 1978  6:51 PM</location>
	</document>
	<document id= '116'>
	<title>The Sumador Chino</title>
	<abstract>On a recent motor trip through Mexico, the writer came across on adding device which was referred  to as a sumador chino (Chinese adder).  A survey of the more available literature on the history of mathematics  and on instruments of calculation has uncovered no reference to such a device.  The purpose of this communication  is to enlist the help of other members in bringing to light whatever may be known concerning the evolution  and present status of the sumador chino.</abstract>
	<conference>CACM November, 1960</conference>
	<authors>
	<author>Rogers, J. L.</author>
	</authors>
	<location>CA601119 JB March 20, 1978  6:50 PM</location>
	<citations>
	<citation>116	5	116</citation>
	<citation>116	5	116</citation>
	<citation>116	5	116</citation>
	</citations>
	</document>
	<document id= '115'>
	<citations>
	<citation>115	5	115</citation>
	<citation>115	5	115</citation>
	<citation>115	5	115</citation>
	</citations>
	<title>Optimizers: Their Structure</title>
	<conference>CACM December, 1960</conference>
	<authors>
	<author>Wheeling, R. F.</author>
	</authors>
	<location>CA601201 JB March 20, 1978  6:46 PM</location>
	</document>
	<document id= '114'>
	<citations>
	<citation>114	5	114</citation>
	<citation>114	5	114</citation>
	<citation>114	5	114</citation>
	</citations>
	<title>Survey of Punched Card Codes</title>
	<conference>CACM December, 1960</conference>
	<authors>
	<author>Smith, H. J.</author>
	<author>Williams, F. A.</author>
	</authors>
	<location>CA601202 JB March 20, 1978  6:45 PM</location>
	</document>
	<document id= '113'>
	<citations>
	<citation>113	5	113</citation>
	<citation>113	5	113</citation>
	<citation>113	5	113</citation>
	</citations>
	<title>Survey of Coded Character Representation</title>
	<conference>CACM December, 1960</conference>
	<authors>
	<author>Bemer, R. W.</author>
	</authors>
	<location>CA601203 JB March 20, 1978 6:44 PM</location>
	</document>
	<document id= '112'>
	<citations>
	<citation>112	5	112</citation>
	<citation>112	5	112</citation>
	<citation>112	5	112</citation>
	</citations>
	<title>Numerical Solution of the Polynomial Equation (Algorithm 30)</title>
	<conference>CACM December, 1960</conference>
	<authors>
	<author>Ellenberger, K. W.</author>
	</authors>
	<location>CA601204 JB March 20, 1978  6:44 PM</location>
	</document>
	<document id= '111'>
	<title>On Programming the Numerical Solution of Polynomial Equations</title>
	<abstract>Numerical techniques are presented for computing the roots of polynomial equations.  By applying  the recommended scaling and inversion rules, the basic Bairstow and Newton-Raphson iterative techniques  can be applied with great reliability.  Both a high degree of accuracy and rapid convergence are realized.   Numerical examples are shown to illustrate the pitfalls and to show how these are circumvented by application  of the recommended procedures.</abstract>
	<conference>CACM December, 1960</conference>
	<authors>
	<author>Ellenberger, K. W.</author>
	</authors>
	<location>CA601205 JB March 20, 1978  6:41 PM</location>
	<citations>
	<citation>111	5	111</citation>
	<citation>111	5	111</citation>
	<citation>111	5	111</citation>
	</citations>
	</document>
	<document id= '110'>
	<citations>
	<citation>110	5	110</citation>
	<citation>110	5	110</citation>
	<citation>110	5	110</citation>
	</citations>
	<title>Fibonaccian Searching</title>
	<conference>CACM December, 1960</conference>
	<authors>
	<author>Ferguson, D. E.</author>
	</authors>
	<location>CA601206 JB March 20, 1978  6:38 PM</location>
	</document>
	<document id= '109'>
	<citations>
	<citation>109	5	109</citation>
	<citation>109	5	109</citation>
	<citation>109	5	109</citation>
	</citations>
	<title>A Note on Approximating e^x</title>
	<conference>CACM December, 1960</conference>
	<authors>
	<author>Lubkin, S.</author>
	</authors>
	<location>CA601207 JB March 20, 1978  6:37 PM</location>
	</document>
	<document id= '108'>
	<citations>
	<citation>108	5	108</citation>
	<citation>108	5	108</citation>
	<citation>108	5	108</citation>
	<citation>361	5	108</citation>
	<citation>108	6	108</citation>
	</citations>
	<title>Programmed Error Correction in Project Mercury</title>
	<conference>CACM December, 1960</conference>
	<authors>
	<author>Dimsdale, B.</author>
	<author>Weinberg, G. M.</author>
	</authors>
	<location>CA601208 JB March 20, 1978  6:35 PM</location>
	</document>
	<document id= '107'>
	<citations>
	<citation>107	4	107</citation>
	<citation>107	5	107</citation>
	<citation>107	5	107</citation>
	<citation>107	5	107</citation>
	<citation>1026	5	107</citation>
	<citation>1258	5	107</citation>
	<citation>1292	5	107</citation>
	<citation>1497	5	107</citation>
	<citation>90	5	107</citation>
	<citation>107	6	107</citation>
	<citation>107	6	107</citation>
	<citation>107	6	107</citation>
	<citation>107	6	107</citation>
	<citation>1026	6	107</citation>
	<citation>1026	6	107</citation>
	<citation>1026	6	107</citation>
	<citation>1292	6	107</citation>
	<citation>1593	6	107</citation>
	</citations>
	<title>Multiple Precision Arithmetic</title>
	<conference>CACM December, 1960</conference>
	<authors>
	<author>Pope, D. A.</author>
	<author>Stein, M. L.</author>
	</authors>
	<location>CA601209 JB March 20, 1978  6:34 PM</location>
	</document>
	<document id= '106'>
	<title>A Method for Overlapping and Erasure of Lists</title>
	<abstract>An important property of the Newell-Shaw-Simon scheme for computer storage of lists is that  data having multiple occurrences need not be stored at more than one place in the computer.  That is,  lists may be "overlapped."  Unfortunately, overlapping poses a problem for subsequent erasure.  Given  a list that is no longer needed, it is desired to erase just those parts that do not overlap other lists.   In LISP, McCarthy employs an elegant but inefficient solution to the problem.  The present paper describes  a general method which enables efficient erasure.  The method employs interspersed reference counts to  describe the extent of the overlapping.</abstract>
	<conference>CACM December, 1960</conference>
	<authors>
	<author>Collins, G. E.</author>
	</authors>
	<location>CA601210 JB March 20, 1978  6:33 PM</location>
	<citations>
	<citation>1024	4	106</citation>
	<citation>1051	4	106</citation>
	<citation>1102	4	106</citation>
	<citation>1132	4	106</citation>
	<citation>1390	4	106</citation>
	<citation>1486	4	106</citation>
	<citation>1549	4	106</citation>
	<citation>1706	4	106</citation>
	<citation>1826	4	106</citation>
	<citation>1878	4	106</citation>
	<citation>378	4	106</citation>
	<citation>2060	4	106</citation>
	<citation>2155	4	106</citation>
	<citation>2168	4	106</citation>
	<citation>2719	4	106</citation>
	<citation>2723	4	106</citation>
	<citation>2838	4	106</citation>
	<citation>2842	4	106</citation>
	<citation>2855	4	106</citation>
	<citation>2879	4	106</citation>
	<citation>3077	4	106</citation>
	<citation>3080	4	106</citation>
	<citation>3106	4	106</citation>
	<citation>627	4	106</citation>
	<citation>106	4	106</citation>
	<citation>106	5	106</citation>
	<citation>106	5	106</citation>
	<citation>106	5	106</citation>
	<citation>1050	5	106</citation>
	<citation>210	5	106</citation>
	<citation>1393	5	106</citation>
	<citation>1549	5	106</citation>
	<citation>2023	5	106</citation>
	<citation>3112	5	106</citation>
	<citation>627	5	106</citation>
	<citation>849	6	106</citation>
	<citation>106	6	106</citation>
	<citation>106	6	106</citation>
	<citation>106	6	106</citation>
	<citation>106	6	106</citation>
	<citation>106	6	106</citation>
	<citation>106	6	106</citation>
	<citation>196	6	106</citation>
	<citation>1051	6	106</citation>
	<citation>1380	6	106</citation>
	<citation>209	6	106</citation>
	<citation>1826	6	106</citation>
	<citation>210	6	106</citation>
	<citation>210	6	106</citation>
	<citation>1878	6	106</citation>
	<citation>296	6	106</citation>
	<citation>1972	6	106</citation>
	<citation>367	6	106</citation>
	<citation>2438	6	106</citation>
	<citation>2723	6	106</citation>
	<citation>2736	6	106</citation>
	<citation>2833	6	106</citation>
	<citation>2838	6	106</citation>
	<citation>406	6	106</citation>
	<citation>627	6	106</citation>
	<citation>627	6	106</citation>
	<citation>731	6	106</citation>
	<citation>731	6	106</citation>
	<citation>731	6	106</citation>
	<citation>753	6	106</citation>
	</citations>
	</document>
	<document id= '105'>
	<citations>
	<citation>105	5	105</citation>
	<citation>105	5	105</citation>
	<citation>105	5	105</citation>
	</citations>
	<title>Two Methods for Word Inversion on the IBM 709</title>
	<conference>CACM December, 1960</conference>
	<authors>
	<author>Price, R. A.</author>
	<author>Jardins, P. D.</author>
	</authors>
	<location>CA601211 JB March 20, 1978  6:28 PM</location>
	</document>
	<document id= '104'>
	<title>Digital Simulation of Discrete Flow Systems*</title>
	<abstract>The discrete flow systems discussed are characterized by the movement of randomly arriving  items along interacting channels.  Programing a digital computer to simulate such systems utilizes some  techniques not common in other approaches to physical problems.  The principal portion of the paper is  a discussion of two simulation studies that illustrate some of the programming problems involved. One  is of an extensive package-handling plant, with the objective being optimization of parameters such as  storage capacities and processing rates.  In the other, air traffic flow and control procedures are simulated  to compare the effects of alternative control decisions.</abstract>
	<conference>CACM December, 1960</conference>
	<authors>
	<author>Moore, C. J.</author>
	<author>Lewis, T. S.</author>
	</authors>
	<location>CA601212 JB March 20, 1978  6:27 PM</location>
	<citations>
	<citation>104	5	104</citation>
	<citation>104	5	104</citation>
	<citation>104	5	104</citation>
	</citations>
	</document>
	<document id= '103'>
	<title>COPE (Console Operator Proficiency Examination)*</title>
	<abstract>Each year electronic computers become more sophisticated, and the programs they must process  become more complex.  Because of this,dependence of those in computing on the skill and experience of  operators is increasing.  At the same time, selection and training of qualified operators grows more  difficult.  To meet the need for a quick, accurate, uniform operator test and training aid, the authors  have developed COPE (Console Operator Proficiency Examination), outlined below.  While this examination  is programmed specifically for the IBM 705 Model II with two Tape Record Coordinators, similar programs  could be developed for other computers.</abstract>
	<conference>CACM December, 1960</conference>
	<authors>
	<author>Farbman, D.</author>
	<author>Ketover, R.</author>
	</authors>
	<location>CA601213 JB March 20, 1978  6:23 PM</location>
	<citations>
	<citation>103	5	103</citation>
	<citation>103	5	103</citation>
	<citation>103	5	103</citation>
	</citations>
	</document>
	<document id= '102'>
	<citations>
	<citation>102	5	102</citation>
	<citation>102	5	102</citation>
	<citation>102	5	102</citation>
	</citations>
	<title>A Comparison of 650 Programming Methods</title>
	<conference>CACM December, 1960</conference>
	<authors>
	<author>Curtz, T. B.</author>
	<author>Riordan, J. F.</author>
	</authors>
	<location>CA601214 JB March 20, 1978  6:18 PM</location>
	</document>
	<document id= '101'>
	<citations>
	<citation>101	5	101</citation>
	<citation>101	5	101</citation>
	<citation>101	5	101</citation>
	</citations>
	<title>Nuclear Reactor Codes</title>
	<conference>CACM January, 1959</conference>
	<authors>
	<author>Nather, V.</author>
	<author>Sangren, W.</author>
	</authors>
	<location>CA590101 JB March 22, 1978  8:24 PM</location>
	</document>
	<document id= '100'>
	<citations>
	<citation>205	4	100</citation>
	<citation>210	4	100</citation>
	<citation>214	4	100</citation>
	<citation>1982	4	100</citation>
	<citation>398	4	100</citation>
	<citation>642	4	100</citation>
	<citation>669	4	100</citation>
	<citation>100	4	100</citation>
	<citation>123	4	100</citation>
	<citation>164	4	100</citation>
	<citation>100	5	100</citation>
	<citation>100	5	100</citation>
	<citation>100	5	100</citation>
	<citation>1	5	100</citation>
	<citation>364	5	100</citation>
	<citation>100	6	100</citation>
	<citation>224	6	100</citation>
	<citation>44	6	100</citation>
	<citation>77	6	100</citation>
	<citation>98	6	100</citation>
	</citations>
	<title>Recursive Subscripting Compilers and List-Types Memories</title>
	<conference>CACM February, 1959</conference>
	<authors>
	<author>III, J. W.</author>
	</authors>
	<location>CA590201 JB March 22, 1978  8:23 PM</location>
	</document>
	<document id= '99'>
	<citations>
	<citation>99	5	99</citation>
	<citation>99	5	99</citation>
	<citation>99	5	99</citation>
	</citations>
	<title>Possible Modifications to the International Algebraic Language</title>
	<conference>CACM February, 1959</conference>
	<authors>
	<author>Green, J.</author>
	</authors>
	<location>CA590202 JB March 22, 1978  8:22 PM</location>
	</document>
	<document id= '98'>
	<citations>
	<citation>224	5	98</citation>
	<citation>364	5	98</citation>
	<citation>98	5	98</citation>
	<citation>98	5	98</citation>
	<citation>98	5	98</citation>
	<citation>100	6	98</citation>
	<citation>224	6	98</citation>
	<citation>44	6	98</citation>
	<citation>77	6	98</citation>
	<citation>98	6	98</citation>
	<citation>98	6	98</citation>
	</citations>
	<title>The Arithmetic Translator-Compiler of the IBM FORTRAN Automatic Coding System</title>
	<conference>CACM February, 1959</conference>
	<authors>
	<author>Sheridan, P. B.</author>
	</authors>
	<location>CA590203 JB March 22, 1978  8:21 PM</location>
	</document>
	<document id= '97'>
	<citations>
	<citation>97	5	97</citation>
	<citation>97	5	97</citation>
	<citation>97	5	97</citation>
	</citations>
	<title>Signal Corps Research and Development on Automatic Programming of Digital Computers</title>
	<conference>CACM February, 1959</conference>
	<authors>
	</authors>
	<location>CA590204 JB March 22, 1978  8:19 PM</location>
	</document>
	<document id= '96'>
	<title>On Computing Radiation Integrals</title>
	<abstract>The relative merit and cost of four ways of evaluating typical radiation integrals containing  spherical Bessel functions are investigated.  These methods are desk machine evaluation of a finite series,  integration of the appropriate differential equation by a Reeves Electronic Analog Computer and by a  Litton 40 IBM 704 computer.  Results are generally applicable to equations separated from a Helmholtz  or wave equation.</abstract>
	<conference>CACM February, 1959</conference>
	<authors>
	<author>Hansen, R. C.</author>
	<author>Bailin, L. L.</author>
	<author>Rutishauser, R. W.</author>
	</authors>
	<location>CA590205 JB March 22, 1978  8:16 PM</location>
	<citations>
	<citation>96	5	96</citation>
	<citation>96	5	96</citation>
	<citation>96	5	96</citation>
	</citations>
	</document>
	<document id= '95'>
	<title>Elimination of Special Functions from Differential Equations</title>
	<abstract>A set of ordinary differential equations which contains mathematical functions requiring the  use of subroutines for numerical solution by electronic computer, tabular data for numerical solution  by hand calculation or function generators when analog methods are applied can sometimes be expanded  to an equivalent set of equations which do not contain the functions.  This is practical if these functions  satisfy sufficiently simple differential equations.  Thus among those functions which can be eliminated  by this procedure are the trigonometric, inverse trigonometric, exponential, and many other transcendental  functions.</abstract>
	<conference>CACM March, 1959</conference>
	<authors>
	<author>Powers, J. E.</author>
	</authors>
	<location>CA590301 JB March 22, 1978  8:08 PM</location>
	<citations>
	<citation>95	5	95</citation>
	<citation>95	5	95</citation>
	<citation>95	5	95</citation>
	</citations>
	</document>
	<document id= '94'>
	<title>An Iterative Method for Fitting the Logistic Curve</title>
	<abstract>An iterative method is given for finding a logistic curve of best least squares fit to a set  of two-dimensional points.</abstract>
	<conference>CACM March, 1959</conference>
	<authors>
	<author>Howell, J.R.</author>
	</authors>
	<location>CA590302 JB March 22, 1978  8:04 PM</location>
	<citations>
	<citation>75	5	94</citation>
	<citation>94	5	94</citation>
	<citation>94	5	94</citation>
	<citation>94	5	94</citation>
	<citation>15	6	94</citation>
	<citation>94	6	94</citation>
	</citations>
	</document>
	<document id= '93'>
	<title>From Formulas to Computer Oriented Language</title>
	<abstract>A technique is shown for enabling a computer to translate simple algebraic formulas into a  three address computer code.</abstract>
	<conference>CACM March, 1959</conference>
	<authors>
	<author>Wegstein, J. H.</author>
	</authors>
	<location>CA590303 JB March 22, 1978  8:03 PM</location>
	<citations>
	<citation>405	5	93</citation>
	<citation>54	5	93</citation>
	<citation>93	5	93</citation>
	<citation>93	5	93</citation>
	<citation>93	5	93</citation>
	<citation>224	6	93</citation>
	<citation>55	6	93</citation>
	<citation>77	6	93</citation>
	<citation>93	6	93</citation>
	<citation>93	6	93</citation>
	</citations>
	</document>
	<document id= '92'>
	<title>A Checklist of Intelligence for Programming Systems</title>
	<abstract>A remarkable variation exists in the degree of sophistication of various programming systems.   A particular manifestation is the jungle of assorted devices for reproducing limited human decision  procedures.  An attempt is made here to begin a systematic classification of the various devices for  educating the computer to take over the decision-making functions of one or many human operators, both  those that have been demonstrated feasible to date and those that are highly desirable for the future.</abstract>
	<conference>CACM March, 1959</conference>
	<authors>
	<author>Bemer, R. W.</author>
	</authors>
	<location>CA590304 JB March 22, 1978  8:01 PM</location>
	<citations>
	<citation>92	5	92</citation>
	<citation>92	5	92</citation>
	<citation>92	5	92</citation>
	</citations>
	</document>
	<document id= '91'>
	<citations>
	<citation>214	5	91</citation>
	<citation>1593	5	91</citation>
	<citation>91	5	91</citation>
	<citation>91	5	91</citation>
	<citation>91	5	91</citation>
	<citation>1	6	91</citation>
	<citation>1292	6	91</citation>
	<citation>53	6	91</citation>
	<citation>91	6	91</citation>
	<citation>91	6	91</citation>
	</citations>
	<title>A Mathematical Procedure for Machine Division</title>
	<conference>CACM April, 1959</conference>
	<authors>
	<author>Gilman, R. E.</author>
	</authors>
	<location>CA590401 JB March 22, 1978  7:14 PM</location>
	</document>
	<document id= '90'>
	<citations>
	<citation>107	5	90</citation>
	<citation>90	5	90</citation>
	<citation>90	5	90</citation>
	<citation>90	5	90</citation>
	<citation>90	6	90</citation>
	</citations>
	<title>Binary Arithmetic for Discretely Variable Word Length in a Serial Computer</title>
	<conference>CACM April, 1959</conference>
	<authors>
	<author>Ercoli, P.</author>
	<author>Vacca, R.</author>
	</authors>
	<location>CA590402 JB March 22, 1978  7:13 PM</location>
	</document>
	<document id= '89'>
	<citations>
	<citation>89	5	89</citation>
	<citation>89	5	89</citation>
	<citation>89	5	89</citation>
	</citations>
	<title>A Routine to Find the Solution of Simultaneous Linear Equations with Polynomial Coefficients</title>
	<conference>CACM April, 1959</conference>
	<authors>
	<author>Larson, E. H.</author>
	<author>Marshall, D. P.</author>
	</authors>
	<location>CA590403 JB March 22, 1978  7:12 PM</location>
	</document>
	<document id= '88'>
	<citations>
	<citation>2333	5	88</citation>
	<citation>87	5	88</citation>
	<citation>88	5	88</citation>
	<citation>88	5	88</citation>
	<citation>88	5	88</citation>
	<citation>1793	6	88</citation>
	<citation>87	6	88</citation>
	<citation>88	6	88</citation>
	<citation>88	6	88</citation>
	</citations>
	<title>An Efficient Method for Generating Uniformly Distributed Points on the Surface of an n-Dimensional Sphere</title>
	<conference>CACM April, 1959</conference>
	<authors>
	<author>Hicks, J. S.</author>
	<author>Wheeling, R. F.</author>
	</authors>
	<location>CA590404 JB March 22, 1978  7:10 PM</location>
	</document>
	<document id= '87'>
	<citations>
	<citation>2333	4	87</citation>
	<citation>87	4	87</citation>
	<citation>2333	5	87</citation>
	<citation>87	5	87</citation>
	<citation>87	5	87</citation>
	<citation>87	5	87</citation>
	<citation>88	5	87</citation>
	<citation>1793	6	87</citation>
	<citation>87	6	87</citation>
	<citation>88	6	87</citation>
	</citations>
	<title>A Note on a Method for Generating Points Uniformly on N-Dimensional Spheres</title>
	<conference>CACM April, 1959</conference>
	<authors>
	<author>Muller, M. E.</author>
	</authors>
	<location>CA590405 JB March 22, 1978  7:04 PM</location>
	</document>
	<document id= '86'>
	<citations>
	<citation>86	5	86</citation>
	<citation>86	5	86</citation>
	<citation>86	5	86</citation>
	</citations>
	<title>Survey of Progress and Trend of Development and Use of Automatic Data Processing in Business  and Management Control Systems of the Federal Government, as of December 1957</title>
	<conference>CACM April, 1959</conference>
	<authors>
	</authors>
	<location>CA590406 JB March 22, 1978  6:48 PM</location>
	</document>
	<document id= '85'>
	<citations>
	<citation>1148	5	85</citation>
	<citation>85	5	85</citation>
	<citation>85	5	85</citation>
	<citation>85	5	85</citation>
	<citation>85	6	85</citation>
	</citations>
	<title>Error Analysis in Floating Point Arithmetic</title>
	<conference>CACM May, 1959</conference>
	<authors>
	<author>III, J. W.</author>
	</authors>
	<location>CA590501 JB March 22, 1978  6:43 PM</location>
	</document>
	<document id= '84'>
	<citations>
	<citation>84	5	84</citation>
	<citation>84	5	84</citation>
	<citation>84	5	84</citation>
	</citations>
	<title>Survey of Progress and Trend of Development and Use of Automatic Data Processing in Business and Management Control Systems of the Federal Government, as of December 1957-II (Part 2 see CA590406)</title>
	<conference>CACM May, 1959</conference>
	<location>CA590502 JB March 22, 1978  6:42 PM</location>
	</document>
	<document id= '83'>
	<citations>
	<citation>1134	4	83</citation>
	<citation>83	4	83</citation>
	<citation>1349	5	83</citation>
	<citation>17	5	83</citation>
	<citation>83	5	83</citation>
	<citation>83	5	83</citation>
	<citation>83	5	83</citation>
	<citation>236	6	83</citation>
	<citation>323	6	83</citation>
	<citation>83	6	83</citation>
	<citation>415	6	83</citation>
	</citations>
	<title>A Visit to Computation Centers in the Soviet Union</title>
	<conference>CACM June, 1959</conference>
	<authors>
	<author>III, J. W.</author>
	</authors>
	<location>CA590601 JB March 22, 1978  6:39 PM</location>
	</document>
	<document id= '82'>
	<title>Handling Identifiers as Internal Symbols in Language Processors</title>
	<abstract>Substitution of computer-oriented symbols for programmer-oriented symbols in language processors  is examined and a feasible method for doing so is presented.</abstract>
	<conference>CACM June, 1959</conference>
	<authors>
	<author>Williams, F. A.</author>
	</authors>
	<location>CA590602 JB March 22, 1978  6:38 PM</location>
	<citations>
	<citation>222	5	82</citation>
	<citation>82	5	82</citation>
	<citation>82	5	82</citation>
	<citation>82	5	82</citation>
	<citation>799	5	82</citation>
	<citation>945	6	82</citation>
	<citation>399	6	82</citation>
	<citation>44	6	82</citation>
	<citation>82	6	82</citation>
	<citation>82	6	82</citation>
	<citation>404	6	82</citation>
	</citations>
	</document>
	<document id= '81'>
	<citations>
	<citation>81	5	81</citation>
	<citation>81	5	81</citation>
	<citation>81	5	81</citation>
	</citations>
	<title>NORC High-Speed Printer</title>
	<conference>CACM June, 1959</conference>
	<authors>
	<author>Gleissner, G. H.</author>
	</authors>
	<location>CA590603 JB March 22, 1978  6:36 PM</location>
	</document>
	<document id= '80'>
	<citations>
	<citation>80	5	80</citation>
	<citation>80	5	80</citation>
	<citation>80	5	80</citation>
	</citations>
	<title>A Technique for Computing Critical Rotational Speeds of Flexible Shafts on an Automatic Computer</title>
	<conference>CACM June, 1959</conference>
	<authors>
	<author>Schwartz, B. L.</author>
	</authors>
	<location>CA590604 JB March 22, 1978  6:35 PM</location>
	</document>
	<document id= '79'>
	<citations>
	<citation>67	5	79</citation>
	<citation>79	5	79</citation>
	<citation>79	5	79</citation>
	<citation>79	5	79</citation>
	<citation>79	6	79</citation>
	</citations>
	<title>Programming for a Machine With an Extended Address Calculational Mechanism</title>
	<conference>CACM June, 1959</conference>
	<authors>
	<author>Schecher, H.</author>
	</authors>
	<location>CA590605 JB March 22, 1978  6:31 PM</location>
	</document>
	<document id= '78'>
	<title>Remarks on the Practical Solution of Characteristic Value Problems</title>
	<abstract>This paper is concerned with the practical solution of characteristic value problem for an  ordinary differential equation.  It is at once apparent that sequential computers, be they digital or  analog, solve initial value problems, rather than boundary value problems, and some mathematical process  must be found to compensate for the machine's inadequacy.  (Compensating for machine imperfection is,  of course, the normal activity of the numerical analyst.)  A number of other papers have applied particular  devices to particular problems.  The purpose of this note is to establish a mathematical framework or  model for these practical procedures and thus assist in the use and extension of the ideas in other particular  problems.</abstract>
	<conference>CACM June, 1959</conference>
	<authors>
	<author>Wouk, A.</author>
	</authors>
	<location>CA590606 JB March 22, 1978  6:30 PM</location>
	<citations>
	<citation>78	5	78</citation>
	<citation>78	5	78</citation>
	<citation>78	5	78</citation>
	</citations>
	</document>
	<document id= '77'>
	<citations>
	<citation>1134	5	77</citation>
	<citation>1141	5	77</citation>
	<citation>364	5	77</citation>
	<citation>405	5	77</citation>
	<citation>438	5	77</citation>
	<citation>44	5	77</citation>
	<citation>77	5	77</citation>
	<citation>77	5	77</citation>
	<citation>77	5	77</citation>
	<citation>561	5	77</citation>
	<citation>100	6	77</citation>
	<citation>224	6	77</citation>
	<citation>224	6	77</citation>
	<citation>224	6	77</citation>
	<citation>224	6	77</citation>
	<citation>249	6	77</citation>
	<citation>303	6	77</citation>
	<citation>393	6	77</citation>
	<citation>17	6	77</citation>
	<citation>44	6	77</citation>
	<citation>55	6	77</citation>
	<citation>77	6	77</citation>
	<citation>77	6	77</citation>
	<citation>77	6	77</citation>
	<citation>77	6	77</citation>
	<citation>77	6	77</citation>
	<citation>77	6	77</citation>
	<citation>77	6	77</citation>
	<citation>93	6	77</citation>
	<citation>98	6	77</citation>
	<citation>408	6	77</citation>
	</citations>
	<title>On GAT and the Construction of Translators</title>
	<conference>CACM July, 1959</conference>
	<authors>
	<author>Arden, B.</author>
	<author>Graham, R.</author>
	</authors>
	<location>CA590701 JB March 22, 1978  6:24 PM</location>
	</document>
	<document id= '76'>
	<citations>
	<citation>76	5	76</citation>
	<citation>76	5	76</citation>
	<citation>76	5	76</citation>
	</citations>
	<title>Binary Conversion, With Fixed Decimal Precision, Of a Decimal Fraction</title>
	<conference>CACM July, 1959</conference>
	<authors>
	<author>Taranto, D.</author>
	</authors>
	<location>CA590702 JB March 22, 1978  6:23 PM</location>
	</document>
	<document id= '75'>
	<citations>
	<citation>75	4	75</citation>
	<citation>75	4	75</citation>
	<citation>15	5	75</citation>
	<citation>75	5	75</citation>
	<citation>75	5	75</citation>
	<citation>75	5	75</citation>
	<citation>94	5	75</citation>
	</citations>
	<title>Parameter Estimation for Simple Nonlinear Models</title>
	<conference>CACM July, 1959</conference>
	<authors>
	<author>Chow, W. M.</author>
	</authors>
	<location>CA590703 JB March 22, 1978  6:22 PM</location>
	</document>
	<document id= '74'>
	<citations>
	<citation>1919	5	74</citation>
	<citation>74	5	74</citation>
	<citation>74	5	74</citation>
	<citation>74	5	74</citation>
	<citation>852	5	74</citation>
	<citation>864	5	74</citation>
	<citation>865	5	74</citation>
	<citation>864	6	74</citation>
	<citation>1175	6	74</citation>
	<citation>232	6	74</citation>
	<citation>232	6	74</citation>
	<citation>308	6	74</citation>
	<citation>309	6	74</citation>
	<citation>309	6	74</citation>
	<citation>74	6	74</citation>
	<citation>74	6	74</citation>
	<citation>74	6	74</citation>
	<citation>74	6	74</citation>
	<citation>3187	6	74</citation>
	</citations>
	<title>A High-Speed Sorting Procedure</title>
	<conference>CACM July, 1959</conference>
	<authors>
	<author>Shell, D. L.</author>
	</authors>
	<location>CA590704 JB March 22, 1978  6:20 PM</location>
	</document>
	<document id= '73'>
	<citations>
	<citation>73	5	73</citation>
	<citation>73	5	73</citation>
	<citation>73	5	73</citation>
	</citations>
	<title>A Real Time Data Assimilator</title>
	<conference>CACM July, 1959</conference>
	<authors>
	<author>Gschwind, H. W.</author>
	</authors>
	<location>CA590705 JB March 22, 1978  6:19 PM</location>
	</document>
	<document id= '72'>
	<citations>
	<citation>72	5	72</citation>
	<citation>72	5	72</citation>
	<citation>72	5	72</citation>
	</citations>
	<title>An Educational Program in Computing</title>
	<conference>CACM August, 1959</conference>
	<authors>
	<author>Hollingsworth, J.</author>
	</authors>
	<location>CA590801 JB March 22, 1978  6:18 PM</location>
	</document>
	<document id= '71'>
	<title>Proposal for a Feasible Programming System</title>
	<abstract>This paper proposes designing a programming facility (itself involving a digital computer and  a program) which will assist the preparation of large-scale real-time programs.  This facility is to  be capable of preparing programs for any of a variety of machines having characteristics similar to those  of the facility's computer.  One of the basic assumptions is that there will be enough random-access  storage available to avoid the necessity for segmenting a constructed program in any fashion other than  a trivial one.  While this assumption is somewhat unrealistic, it is intended to provide an opportunity  to concentrate on the other aspects of program construction.  The programming system should stress the  discovery in source program statements of as many errors as possible, before attempting to construct  an object program.  Among the computer characteristics which are advocated are a program interrupt scheme,  a large set of characters, and indirect addressing.</abstract>
	<conference>CACM August, 1959</conference>
	<authors>
	<author>Bagley, P. R.</author>
	</authors>
	<location>CA590802 JB March 22, 1978  6:16 PM</location>
	<citations>
	<citation>71	5	71</citation>
	<citation>71	5	71</citation>
	<citation>71	5	71</citation>
	</citations>
	</document>
	<document id= '70'>
	<title>Construction of a Set of Test Matrices</title>
	<abstract>This paper develops the equations and properties of a set of test matrices which are useful  in the determination of the accuracy of routines for finding the inverse, determinant and/or eigenvalues  of a matrix.</abstract>
	<conference>CACM August, 1959</conference>
	<authors>
	<author>Aegerter, M. J.</author>
	</authors>
	<location>CA590803 JB March 22, 1978  6:09 PM</location>
	<citations>
	<citation>70	5	70</citation>
	<citation>70	5	70</citation>
	<citation>70	5	70</citation>
	</citations>
	</document>
	<document id= '69'>
	<title>Statistical Programs for the IBM 650-Part I</title>
	<abstract>A collection is given of brief descriptions of statistical programs now in use in university  computing centers which have IBM 650's.</abstract>
	<conference>CACM August, 1959</conference>
	<authors>
	<author>Hamblen, J. W.</author>
	</authors>
	<location>CA590804 JB March 22, 1978  6:07 PM</location>
	<citations>
	<citation>69	5	69</citation>
	<citation>69	5	69</citation>
	<citation>69	5	69</citation>
	</citations>
	</document>
	<document id= '68'>
	<title>The Role of the University in Computers, Data Processing and Related Fields</title>
	<abstract>A study was made of university programs in the United States in the fields of computers, data  processing, operations research, and other closely related fields.  University policies, organization,  administration, faculties, students, researches, curricula, equipment, and financing were investigated.   An integrated university program is recommended reflecting the conviction that many present activities  related to computers will develop into disciplines and as such are the legitimate province of the university  scholar.  Details on a recommended Graduate School of "Computer Sciences" are given.</abstract>
	<conference>CACM September, 1959</conference>
	<authors>
	<author>Fein, L.</author>
	</authors>
	<location>CA590901 JB March 22, 1978  6:05 PM</location>
	<citations>
	<citation>1205	5	68</citation>
	<citation>68	5	68</citation>
	<citation>68	5	68</citation>
	<citation>68	5	68</citation>
	<citation>1100	6	68</citation>
	<citation>1104	6	68</citation>
	<citation>1107	6	68</citation>
	<citation>68	6	68</citation>
	</citations>
	</document>
	<document id= '67'>
	<citations>
	<citation>67	4	67</citation>
	<citation>41	5	67</citation>
	<citation>67	5	67</citation>
	<citation>67	5	67</citation>
	<citation>67	5	67</citation>
	<citation>79	5	67</citation>
	<citation>67	6	67</citation>
	</citations>
	<title>Central-European Computers</title>
	<conference>CACM September, 1959</conference>
	<authors>
	<author>Blachman, N. M.</author>
	</authors>
	<location>CA590902 JB March 22, 1978  4:52 PM</location>
	</document>
	<document id= '66'>
	<citations>
	<citation>66	5	66</citation>
	<citation>66	5	66</citation>
	<citation>66	5	66</citation>
	</citations>
	<title>A Proposal for a Generalized Card Code for 256 Characters</title>
	<conference>CACM September, 1959</conference>
	<authors>
	<author>Bemer, R. W.</author>
	</authors>
	<location>CA590903 JB March 22, 1978  4:50 PM</location>
	</document>
	<document id= '65'>
	<citations>
	<citation>65	5	65</citation>
	<citation>65	5	65</citation>
	<citation>65	5	65</citation>
	</citations>
	<title>ALGOL Sub-Committee Report - Extensions</title>
	<conference>CACM September, 1959</conference>
	<authors>
	<author>Dijkstra, E. W.</author>
	<author>Heise, W.</author>
	<author>Perlis, J. A.</author>
	<author>Samelson, K.</author>
	</authors>
	<location>CA590904 JB March 22, 1978  4:49 PM</location>
	</document>
	<document id= '64'>
	<citations>
	<citation>206	5	64</citation>
	<citation>207	5	64</citation>
	<citation>64	5	64</citation>
	<citation>64	5	64</citation>
	<citation>64	5	64</citation>
	<citation>64	6	64</citation>
	<citation>64	6	64</citation>
	</citations>
	<title>Remarks on ALGOL and Symbol Manipulation</title>
	<conference>CACM September, 1959</conference>
	<authors>
	<author>Green, J.</author>
	</authors>
	<location>CA590905 JB March 22, 1978  4:47 PM</location>
	</document>
	<document id= '63'>
	<title>Octal Diagrams of Binary Conception and Their Applicability to Computer Design Logic</title>
	<abstract>This paper dates back the genesis of binary conception circa 5000 years ago, and octal diagrams  about 4800 years ago, as derived by the Chinese ancients.  It analyzes the applicability of binary trinities  of the octal diagrams to modern electronic-digital-computer design logic.</abstract>
	<conference>CACM September, 1959</conference>
	<authors>
	<author>Li, S. T.</author>
	</authors>
	<location>CA590906 JB March 22, 1978  4:47 PM</location>
	<citations>
	<citation>63	5	63</citation>
	<citation>63	5	63</citation>
	<citation>63	5	63</citation>
	</citations>
	</document>
	<document id= '62'>
	<citations>
	<citation>62	5	62</citation>
	<citation>62	5	62</citation>
	<citation>62	5	62</citation>
	</citations>
	<title>Multi-Dimensional Least-Squares Polynomial Curve Fitting</title>
	<conference>CACM September, 1959</conference>
	<authors>
	<author>Lesh, F. H.</author>
	</authors>
	<location>CA590907 JB March 22, 1978  4:44 PM</location>
	</document>
	<document id= '61'>
	<citations>
	<citation>61	5	61</citation>
	<citation>61	5	61</citation>
	<citation>61	5	61</citation>
	</citations>
	<title>IBM 709 Tape Matrix Compiler</title>
	<conference>CACM September, 1959</conference>
	<authors>
	<author>Hornick, S. D.</author>
	</authors>
	<location>CA590908JB March 22, 1978  4:43 PM</location>
	</document>
	<document id= '60'>
	<citations>
	<citation>60	5	60</citation>
	<citation>60	5	60</citation>
	<citation>60	5	60</citation>
	</citations>
	<title>The Alpha Vector Transformation of a System of Linear Constraints</title>
	<conference>CACM September, 1959</conference>
	<authors>
	<author>Wersan, S. J.</author>
	</authors>
	<location>CA590909 JB March 22, 1978  4:42 PM</location>
	</document>
	<document id= '59'>
	<citations>
	<citation>59	5	59</citation>
	<citation>59	5	59</citation>
	<citation>59	5	59</citation>
	</citations>
	<title>Survey of Progress and Trend of Development and Use of Automatic Data Processing in Business and Management control Systems of the Federal Government, as of December 1957-III</title>
	<conference>CACM September, 1959</conference>
	<location>CA590910 JB March 22, 1978  4:41 PM</location>
	</document>
	<document id= '58'>
	<title>LEM-1, Small Size General Purpose Digital Computer Using Magnetic (Ferrite) Elements</title>
	<abstract>The paper examines some of the questions of development and construction of a general purpose  digital computer using contactless magnetic (ferrite) and capacitive "DEZU" (long duration capacitive  memory) elements, developed at the Laboratory of Electrical Modeling VINITYI AN SSSR, under the supervision  of Professor L.I. Gutenmacher.</abstract>
	<conference>CACM October, 1959</conference>
	<authors>
	<author>Machmudov, U. A.</author>
	</authors>
	<location>CA591001 JB March 22, 1978  4:21 PM</location>
	<citations>
	<citation>215	5	58</citation>
	<citation>58	5	58</citation>
	<citation>58	5	58</citation>
	<citation>58	5	58</citation>
	<citation>58	6	58</citation>
	</citations>
	</document>
	<document id= '57'>
	<citations>
	<citation>57	5	57</citation>
	<citation>57	5	57</citation>
	<citation>57	5	57</citation>
	</citations>
	<title>J.E.I.D.A. and Its Computer Center</title>
	<conference>CACM October, 1959</conference>
	<location>CA591002 JB March 22, 1978  4:17 PM</location>
	</document>
	<document id= '56'>
	<citations>
	<citation>56	5	56</citation>
	<citation>56	5	56</citation>
	<citation>56	5	56</citation>
	</citations>
	<title>Proposed Standard Flow Chart Symbols</title>
	<conference>CACM October, 1959</conference>
	<location>CA591003 JB March 22, 1978  4:16 PM</location>
	</document>
	<document id= '55'>
	<citations>
	<citation>405	5	55</citation>
	<citation>55	5	55</citation>
	<citation>55	5	55</citation>
	<citation>55	5	55</citation>
	<citation>224	6	55</citation>
	<citation>55	6	55</citation>
	<citation>77	6	55</citation>
	<citation>93	6	55</citation>
	</citations>
	<title>An Algebraic Translator</title>
	<conference>CACM October, 1959</conference>
	<authors>
	<author>Kaner, H.</author>
	</authors>
	<location>CA591004 JB March 22, 1978  4:15 PM</location>
	</document>
	<document id= '54'>
	<citations>
	<citation>405	4	54</citation>
	<citation>54	4	54</citation>
	<citation>54	5	54</citation>
	<citation>54	5	54</citation>
	<citation>54	5	54</citation>
	<citation>93	5	54</citation>
	</citations>
	<title>SALE, a Simple Algebraic Language for Engineers</title>
	<conference>CACM October, 1959</conference>
	<authors>
	<author>Brittenham, W. R.</author>
	<author>Clark, K.</author>
	<author>Kuss, G.</author>
	<author>Thompson, H.</author>
	<author>Smith, A. O.</author>
	</authors>
	<location>CA591005 JB March 22, 1978  4:14 PM</location>
	</document>
	<document id= '53'>
	<citations>
	<citation>214	5	53</citation>
	<citation>53	5	53</citation>
	<citation>53	5	53</citation>
	<citation>53	5	53</citation>
	<citation>1	6	53</citation>
	<citation>53	6	53</citation>
	<citation>91	6	53</citation>
	</citations>
	<title>Recommendations of the SHARE ALGOL Committee</title>
	<conference>CACM October, 1959</conference>
	<location>CA591006 JB March 22, 1978  4:13 PM</location>
	</document>
	<document id= '52'>
	<citations>
	<citation>52	5	52</citation>
	<citation>52	5	52</citation>
	<citation>52	5	52</citation>
	</citations>
	<title>An Efficient Method for Generating Uniformly Distributed Points on the Surface on an n-Dimensional  Sphere (Corrigendum)</title>
	<conference>CACM October, 1959</conference>
	<authors>
	<author>Cook, J. M.</author>
	</authors>
	<location>CA591007 JB March 22, 1978  4:12 PM</location>
	</document>
	<document id= '51'>
	<citations>
	<citation>249	5	51</citation>
	<citation>51	5	51</citation>
	<citation>51	5	51</citation>
	<citation>51	5	51</citation>
	<citation>196	6	51</citation>
	<citation>303	6	51</citation>
	<citation>51	6	51</citation>
	</citations>
	<title>On the Construction of Micro-Flowcharts</title>
	<conference>CACM October, 1959</conference>
	<authors>
	<author>Gorn, S.</author>
	<author>Ingerman, P. Z.</author>
	<author>Crozier, J. B.</author>
	</authors>
	<location>CA591008 JB March 22, 1978  4:10 PM</location>
	</document>
	<document id= '50'>
	<citations>
	<citation>50	5	50</citation>
	<citation>50	5	50</citation>
	<citation>50	5	50</citation>
	</citations>
	<title>Statistical Programs for the IBM 650-Part II</title>
	<conference>CACM October, 1959</conference>
	<authors>
	<author>Hamblen, J. W.</author>
	</authors>
	<location>CA591009 JB March 22, 1978  4:09 PM</location>
	</document>
	<document id= '49'>
	<citations>
	<citation>49	5	49</citation>
	<citation>49	5	49</citation>
	<citation>49	5	49</citation>
	</citations>
	<title>Scientific and Business Applications (Oracle Curve Plotter)</title>
	<conference>CACM October, 1959</conference>
	<authors>
	<author>Fike, C. T.</author>
	</authors>
	<location>CA591010 JB March 22, 1978  4:08 PM</location>
	</document>
	<document id= '48'>
	<title>Shift-Register Code for Indexing Applications</title>
	<abstract>In this communication the use of a shift-register code with n = 10 is described for calling  64 wireless telemetering stations in a fixed cyclical order.  A high degree of redundancy is used, permitting  a single-error correcting code ("minimum-distance-three" code) with 64 10-bit code words to be employed  as the station identification code.  Embedding this in the shift-register code with period 1023 permits  the code to be employed without punctuation, each of the telemetering station receivers simply putting  received ones and zeros into a shift register.  Each time the given code combination arises identifying  the particular station (barring for tuitous error combinations of very low probability) it has been called.   The communication describes the properties and application of the code in some detail and the finding  of the particular example to be employed on URAL, the Soviet-built drum computer donated to the Indian  Statistical Institute by the United Nations Technical Aid Administration (UNTAA).</abstract>
	<conference>CACM October, 1959</conference>
	<authors>
	<author>Nadler, M.</author>
	<author>Sengupta, A.</author>
	</authors>
	<location>CA591011 JB March 22, 1978  4:07 PM</location>
	<citations>
	<citation>48	5	48</citation>
	<citation>48	5	48</citation>
	<citation>48	5	48</citation>
	</citations>
	</document>
	<document id= '47'>
	<citations>
	<citation>47	5	47</citation>
	<citation>47	5	47</citation>
	<citation>47	5	47</citation>
	</citations>
	<title>Russian Visit to U.S. Computers</title>
	<conference>CACM November, 1959</conference>
	<authors>
	<author>Zaitzeff, E. M.</author>
	<author>Astrahan, M. M.</author>
	</authors>
	<location>CA591101 JB March 22, 1978  3:59 PM</location>
	</document>
	<document id= '46'>
	<title>Multiprogramming STRETCH: Feasibility Considerations</title>
	<abstract>The tendency towards increased parallelism in computers is noted.  Exploitation of this parallelism  presents a number of new problems in machine design and in programming systems.  Minimum requirements  for successful concurrent execution of several independent problem programs are discussed.  These requirements  are met in the STRETCH system by a carefully balanced combination of built-in and programmed logic.   Techniques are described which place the burden of the programmed logic on system programs (supervisory  program and compiler) rather than on problem programs.</abstract>
	<conference>CACM November, 1959</conference>
	<authors>
	<author>Codd, E. F.</author>
	<author>Lowry, E. S.</author>
	<author>McDonough, E.</author>
	<author>Scalzi, C. A.</author>
	</authors>
	<location>CA591102 JB March 22, 1978  3:57 PM</location>
	<citations>
	<citation>168	5	46</citation>
	<citation>491	5	46</citation>
	<citation>46	5	46</citation>
	<citation>46	5	46</citation>
	<citation>46	5	46</citation>
	<citation>168	6	46</citation>
	<citation>185	6	46</citation>
	<citation>196	6	46</citation>
	<citation>46	6	46</citation>
	<citation>46	6	46</citation>
	</citations>
	</document>
	<document id= '45'>
	<citations>
	<citation>45	5	45</citation>
	<citation>45	5	45</citation>
	<citation>45	5	45</citation>
	<citation>728	5	45</citation>
	<citation>920	6	45</citation>
	<citation>45	6	45</citation>
	</citations>
	<title>Flow Outlining-A Substitute for Flow Charting</title>
	<conference>CACM November, 1959</conference>
	<authors>
	<author>Gant, W. T.</author>
	</authors>
	<location>CA591103 JB March 22, 1978  3:53 PM</location>
	</document>
	<document id= '44'>
	<citations>
	<citation>1134	4	44</citation>
	<citation>1141	4	44</citation>
	<citation>364	4	44</citation>
	<citation>405	4	44</citation>
	<citation>438	4	44</citation>
	<citation>561	4	44</citation>
	<citation>44	4	44</citation>
	<citation>222	5	44</citation>
	<citation>364	5	44</citation>
	<citation>44	5	44</citation>
	<citation>44	5	44</citation>
	<citation>44	5	44</citation>
	<citation>77	5	44</citation>
	<citation>100	6	44</citation>
	<citation>224	6	44</citation>
	<citation>44	6	44</citation>
	<citation>44	6	44</citation>
	<citation>77	6	44</citation>
	<citation>82	6	44</citation>
	<citation>98	6	44</citation>
	</citations>
	<title>RUNCIBLE-Algebraic Translation on a Limited Computer</title>
	<conference>CACM November, 1959</conference>
	<authors>
	<author>Knuth, D. E.</author>
	</authors>
	<location>CA591104 JB March 22, 1978  3:52 PM</location>
	</document>
	<document id= '43'>
	<citations>
	<citation>205	5	43</citation>
	<citation>43	5	43</citation>
	<citation>43	5	43</citation>
	<citation>43	5	43</citation>
	<citation>1	6	43</citation>
	<citation>43	6	43</citation>
	</citations>
	<title>A Technique for Handling Macro Instructions</title>
	<conference>CACM November, 1959</conference>
	<authors>
	<author>Greenwald, I. D.</author>
	</authors>
	<location>CA591105 JB March 22, 1978  3:51 PM</location>
	</document>
	<document id= '42'>
	<citations>
	<citation>42	5	42</citation>
	<citation>42	5	42</citation>
	<citation>42	5	42</citation>
	</citations>
	<title>A New Method of Computation of Square Roots Without Using Division</title>
	<conference>CACM November, 1959</conference>
	<authors>
	<author>Sarafyan, D.</author>
	</authors>
	<location>CA591106 JB March 22, 1978  3:50 PM</location>
	</document>
	<document id= '41'>
	<citations>
	<citation>41	4	41</citation>
	<citation>41	5	41</citation>
	<citation>41	5	41</citation>
	<citation>41	5	41</citation>
	<citation>67	5	41</citation>
	</citations>
	<title>Some Notes on Computer Research in Eastern Europe</title>
	<conference>CACM December, 1959</conference>
	<authors>
	<author>Nadler, M.</author>
	</authors>
	<location>CA591201 JB March 22, 1978  3:48 PM</location>
	</document>
	<document id= '40'>
	<title>Fingers or Fists? (The Choice of Decimal or Binary Representation)</title>
	<abstract>The binary number system offers many advantages over a decimal representation for a high-performance,  general-purpose computer.  The greater simplicity of a binary arithmetic unit and the greater compactness  of binary numbers both contribute directly to arithmetic speed.  Less obvious and perhaps more important  is the way binary addressing and instruction formats can increase the overall performance.  Binary addresses  are also essential to certain powerful operations which are not practical with decimal instruction formats.   On the other hand, decimal numbers are essential for communicating between man and the computer.  In  applications requiring the processing of a large volume of inherently decimal input and output data,  the time for decimal-binary conversion needed by a purely binary computer may be significant.  A slower  decimal adder may take less time than a fast binary adder doing an addition and two conversions.  A careful  review of the significance of decimal and binary addressing and both binary and decimal data arithmetic,  supplemented by efficient conversion instructions.</abstract>
	<conference>CACM December, 1959</conference>
	<authors>
	<author>Buchholz, W.</author>
	</authors>
	<location>CA591202 JB March 22, 1978  3:47 PM</location>
	<citations>
	<citation>40	5	40</citation>
	<citation>40	5	40</citation>
	<citation>40	5	40</citation>
	</citations>
	</document>
	<document id= '39'>
	<title>The Secant Method for Simultaneous Nonlinear Equations</title>
	<abstract>A procedure for the simultaneous solution of a system of not-necessarily-linear equations,  a generalization of the secant method for a single function of one variable, is given.</abstract>
	<conference>CACM December, 1959</conference>
	<authors>
	<author>Wolfe, P.</author>
	</authors>
	<location>CA591203 JB March 22, 1978  3:39 PM</location>
	<citations>
	<citation>39	4	39</citation>
	<citation>16	5	39</citation>
	<citation>39	5	39</citation>
	<citation>39	5	39</citation>
	<citation>39	5	39</citation>
	</citations>
	</document>
	<document id= '38'>
	<citations>
	<citation>38	5	38</citation>
	<citation>38	5	38</citation>
	<citation>38	5	38</citation>
	</citations>
	<title>A Proposed Interpretation in ALGOL</title>
	<conference>CACM December, 1959</conference>
	<authors>
	<author>Irons, E. T.</author>
	<author>Acton, F. S.</author>
	</authors>
	<location>CA591204 JB March 22, 1978  3:37 PM</location>
	</document>
	<document id= '37'>
	<citations>
	<citation>37	5	37</citation>
	<citation>37	5	37</citation>
	<citation>37	5	37</citation>
	</citations>
	<title>Impact of Computer Developments</title>
	<conference>CACM December, 1959</conference>
	<authors>
	<author>Humphrey, S. M.</author>
	</authors>
	<location>CA591205 JB March 22, 1978  3:36 PM</location>
	</document>
	<document id= '36'>
	<citations>
	<citation>36	5	36</citation>
	<citation>36	5	36</citation>
	<citation>36	5	36</citation>
	</citations>
	<title>A Queue Network Simulator for the IBM 650 and Burroughs 220</title>
	<conference>CACM December, 1959</conference>
	<authors>
	<author>Conway, R. W.</author>
	<author>Johnson, B. M.</author>
	<author>Maxwell, W. L.</author>
	</authors>
	<location>CA591206 JB March 22, 1978  3:35 PM</location>
	</document>
	<document id= '35'>
	<citations>
	<citation>35	5	35</citation>
	<citation>35	5	35</citation>
	<citation>35	5	35</citation>
	<citation>848	5	35</citation>
	<citation>26	6	35</citation>
	<citation>35	6	35</citation>
	</citations>
	<title>A Machine Method for Square-Root Computation</title>
	<conference>CACM January, 1958</conference>
	<authors>
	<author>Bemer, R. W.</author>
	</authors>
	<location>CA580101 JB March 22, 1978  9:27 PM</location>
	</document>
	<document id= '34'>
	<citations>
	<citation>34	5	34</citation>
	<citation>34	5	34</citation>
	<citation>34	5	34</citation>
	</citations>
	<title>Tables for Automatic Computation</title>
	<conference>CACM January, 1958</conference>
	<authors>
	<author>Wilf, H. S.</author>
	</authors>
	<location>CA580102 JB March 22, 1978  9:26 PM</location>
	</document>
	<document id= '33'>
	<citations>
	<citation>33	5	33</citation>
	<citation>33	5	33</citation>
	<citation>33	5	33</citation>
	</citations>
	<title>A Programmed Binary Counter For The IBM Type 650 Calculator</title>
	<conference>CACM January, 1958</conference>
	<authors>
	<author>Kenny, B. C.</author>
	<author>Hunter, J. A.</author>
	</authors>
	<location>CA580103 JB March 22, 1978  9:25 PM</location>
	</document>
	<document id= '32'>
	<citations>
	<citation>32	5	32</citation>
	<citation>32	5	32</citation>
	<citation>32	5	32</citation>
	</citations>
	<title>Variable-Width Tables with Binary-Search Facility</title>
	<conference>CACM February, 1958</conference>
	<authors>
	<author>Halpern, M.</author>
	</authors>
	<location>CA580201 JB March 22, 1978  9:22 PM</location>
	</document>
	<document id= '31'>
	<citations>
	<citation>31	5	31</citation>
	<citation>31	5	31</citation>
	<citation>31	5	31</citation>
	</citations>
	<title>IBM 704 Code-Nundrums</title>
	<conference>CACM March, 1958</conference>
	<authors>
	<author>Grumette, M.</author>
	</authors>
	<location>CA580301 JB March 22, 1978  9:21 PM</location>
	</document>
	<document id= '30'>
	<citations>
	<citation>30	5	30</citation>
	<citation>30	5	30</citation>
	<citation>30	5	30</citation>
	</citations>
	<title>Algorithm for Analyzing Logical Statements to Produce a Truth Function Table</title>
	<conference>CACM March, 1958</conference>
	<authors>
	<author>Wolpe, H.</author>
	</authors>
	<location>CA580302 JB March 22, 1978  9:20 PM</location>
	</document>
	<document id= '29'>
	<citations>
	<citation>29	5	29</citation>
	<citation>29	5	29</citation>
	<citation>29	5	29</citation>
	</citations>
	<title>Need for an Algorithm</title>
	<conference>CACM April, 1958</conference>
	<authors>
	<author>Selden, W.</author>
	</authors>
	<location>CA580401 JB March 22, 1978  9:19 PM</location>
	</document>
	<document id= '28'>
	<citations>
	<citation>28	5	28</citation>
	<citation>28	5	28</citation>
	<citation>28	5	28</citation>
	</citations>
	<title>Request for Methods or Programs</title>
	<conference>CACM April, 1958</conference>
	<authors>
	<author>Corley, H. P. T.</author>
	</authors>
	<location>CA580402 JB March 22, 1978  9:18 PM</location>
	</document>
	<document id= '27'>
	<citations>
	<citation>27	5	27</citation>
	<citation>27	5	27</citation>
	<citation>27	5	27</citation>
	</citations>
	<title>Note On Empirical Bounds For Generating Bessel Functions</title>
	<conference>CACM May, 1958</conference>
	<authors>
	<author>Randels, J. B.</author>
	<author>Reeves, R. F.</author>
	</authors>
	<location>CA580501 JB March 22, 1978  9:17 PM</location>
	</document>
	<document id= '26'>
	<citations>
	<citation>26	5	26</citation>
	<citation>26	5	26</citation>
	<citation>26	5	26</citation>
	<citation>848	5	26</citation>
	<citation>26	6	26</citation>
	<citation>35	6	26</citation>
	</citations>
	<title>A Subroutine Method for Calculating Logarithms</title>
	<conference>CACM May, 1958</conference>
	<authors>
	<author>Bemer, R. W.</author>
	</authors>
	<location>CA580502 JB March 22, 1978  9:16 PM</location>
	</document>
	<document id= '25'>
	<citations>
	<citation>25	5	25</citation>
	<citation>25	5	25</citation>
	<citation>25	5	25</citation>
	</citations>
	<title>General Purpose Programming Systems</title>
	<conference>CACM May, 1958</conference>
	<authors>
	<author>Holt, A. W.</author>
	</authors>
	<location>CA580503 JB March 22, 1978  9:14 PM</location>
	</document>
	<document id= '24'>
	<citations>
	<citation>24	5	24</citation>
	<citation>24	5	24</citation>
	<citation>24	5	24</citation>
	</citations>
	<title>An Improved Decimal Redundancy Check</title>
	<conference>CACM May, 1958</conference>
	<authors>
	<author>Sisson, R. L.</author>
	</authors>
	<location>CA580504 JB March 22, 1978  9:13 PM</location>
	</document>
	<document id= '23'>
	<citations>
	<citation>23	5	23</citation>
	<citation>23	5	23</citation>
	<citation>23	5	23</citation>
	</citations>
	<title>Binary and Truth-Function Operations on a Decimal Computer with an Extract Command</title>
	<conference>CACM May, 1958</conference>
	<authors>
	<author>Kautz, W. H.</author>
	</authors>
	<location>CA580505 JB March 22, 1978  9:12 PM</location>
	</document>
	<document id= '22'>
	<citations>
	<citation>22	5	22</citation>
	<citation>22	5	22</citation>
	<citation>22	5	22</citation>
	</citations>
	<title>Unusual Applications Department--Automatic Implementation of Computer Logic</title>
	<conference>CACM May, 1958</conference>
	<authors>
	<author>Morris, E. F.</author>
	<author>Wohr, T. E.</author>
	</authors>
	<location>CA580506 JB March 22, 1978  9:11 PM</location>
	</document>
	<document id= '21'>
	<citations>
	<citation>21	5	21</citation>
	<citation>21	5	21</citation>
	<citation>21	5	21</citation>
	<citation>679	5	21</citation>
	<citation>21	6	21</citation>
	<citation>407	6	21</citation>
	<citation>3184	6	21</citation>
	</citations>
	<title>Algebraic Formulation of Flow Diagrams</title>
	<conference>CACM June, 1958</conference>
	<authors>
	<author>Voorhees, E. A.</author>
	</authors>
	<location>CA580601 JB March 22, 1978  9:10 PM</location>
	</document>
	<document id= '20'>
	<title>Accelerating Convergence of Iterative Processes</title>
	<abstract>A technique is discussed which, when applied to an iterative procedure for the solution of an equation, accelerates the rate of convergence if the iteration converges and induces convergence if the iteration diverges.  An illustrative example is given.</abstract>
	<conference>CACM June, 1958</conference>
	<authors>
	<author>Wegstein, J. H.</author>
	</authors>
	<location>CA580602 JB March 22, 1978  9:09 PM</location>
	<citations>
	<citation>20	5	20</citation>
	<citation>20	5	20</citation>
	<citation>20	5	20</citation>
	</citations>
	</document>
	<document id= '19'>
	<citations>
	<citation>19	5	19</citation>
	<citation>19	5	19</citation>
	<citation>19	5	19</citation>
	</citations>
	<title>Glossary of Computer Engineering and Programming Terminology</title>
	<conference>CACM June, 1958</conference>
	<location>CA580603 JB March 22, 1978  9:07 PM</location>
	</document>
	<document id= '18'>
	<citations>
	<citation>18	5	18</citation>
	<citation>18	5	18</citation>
	<citation>18	5	18</citation>
	</citations>
	<title>Simple Automatic Coding Systems</title>
	<conference>CACM July, 1958</conference>
	<authors>
	<author>Adams, E. S.</author>
	<author>Schlesinger, S. I.</author>
	</authors>
	<location>CA580701 JB March 22, 1978  9:06 PM</location>
	</document>
	<document id= '17'>
	<citations>
	<citation>1134	5	17</citation>
	<citation>17	5	17</citation>
	<citation>17	5	17</citation>
	<citation>17	5	17</citation>
	<citation>83	5	17</citation>
	<citation>17	6	17</citation>
	<citation>17	6	17</citation>
	<citation>77	6	17</citation>
	<citation>408	6	17</citation>
	</citations>
	<title>On Programming of Arithmetic Operations</title>
	<conference>CACM August, 1958</conference>
	<authors>
	<author>Ershov, A. P.</author>
	</authors>
	<location>CA580801 JB March 22, 1978  9:04 PM</location>
	</document>
	<document id= '16'>
	<citations>
	<citation>16	5	16</citation>
	<citation>16	5	16</citation>
	<citation>16	5	16</citation>
	<citation>39	5	16</citation>
	<citation>16	6	16</citation>
	</citations>
	<title>Secant Modification of Newton's Method</title>
	<conference>CACM August, 1958</conference>
	<authors>
	<author>Jeeves, T. A.</author>
	</authors>
	<location>CA580802 JB March 22, 1978  9:03 PM</location>
	</document>
	<document id= '15'>
	<citations>
	<citation>15	5	15</citation>
	<citation>15	5	15</citation>
	<citation>15	5	15</citation>
	<citation>75	5	15</citation>
	<citation>15	6	15</citation>
	<citation>94	6	15</citation>
	</citations>
	<title>Recursive Curve Fitting Technique</title>
	<conference>CACM August, 1958</conference>
	<authors>
	<author>Giblin, J.</author>
	</authors>
	<location>CA580803 JB March 22, 1978  9:02 PM</location>
	</document>
	<document id= '14'>
	<citations>
	<citation>1159	5	14</citation>
	<citation>1988	5	14</citation>
	<citation>381	5	14</citation>
	<citation>14	5	14</citation>
	<citation>14	5	14</citation>
	<citation>14	5	14</citation>
	<citation>1496	6	14</citation>
	<citation>381	6	14</citation>
	<citation>11	6	14</citation>
	<citation>14	6	14</citation>
	<citation>14	6	14</citation>
	<citation>14	6	14</citation>
	</citations>
	<title>The Problem of Programming Communication with Changing Machines A Proposed Solution (Part 1)</title>
	<conference>CACM August, 1958</conference>
	<authors>
	<author>Strong, J.</author>
	<author>Wegstein, J.</author>
	<author>Tritter, A.</author>
	<author>Olsztyn, J.</author>
	<author>Mock, O.</author>
	<author>Steel, T.</author>
	</authors>
	<location>CA580804 JB March 22, 1978  9:02 PM</location>
	</document>
	<document id= '13'>
	<citations>
	<citation>13	5	13</citation>
	<citation>13	5	13</citation>
	<citation>13	5	13</citation>
	</citations>
	<title>Glossary of Computer Engineering and Programming Terminology</title>
	<conference>CACM August, 1958</conference>
	<location>CA580805 JB March 22, 1978  8:57 PM</location>
	</document>
	<document id= '12'>
	<citations>
	<citation>12	5	12</citation>
	<citation>12	5	12</citation>
	<citation>12	5	12</citation>
	</citations>
	<title>Error Estimation in Runge-Kutta Procedures</title>
	<conference>CACM September, 1958</conference>
	<authors>
	<author>Call, D. H.</author>
	<author>Reeves, R. F.</author>
	</authors>
	<location>CA580901 JB March 22, 1978  8:56 PM</location>
	</document>
	<document id= '11'>
	<citations>
	<citation>1781	5	11</citation>
	<citation>1988	5	11</citation>
	<citation>11	5	11</citation>
	<citation>11	5	11</citation>
	<citation>11	5	11</citation>
	<citation>123	6	11</citation>
	<citation>196	6	11</citation>
	<citation>919	6	11</citation>
	<citation>990	6	11</citation>
	<citation>1007	6	11</citation>
	<citation>1046	6	11</citation>
	<citation>1131	6	11</citation>
	<citation>1139	6	11</citation>
	<citation>1140	6	11</citation>
	<citation>1149	6	11</citation>
	<citation>1198	6	11</citation>
	<citation>1215	6	11</citation>
	<citation>1223	6	11</citation>
	<citation>1265	6	11</citation>
	<citation>1303	6	11</citation>
	<citation>1323	6	11</citation>
	<citation>1358	6	11</citation>
	<citation>1366	6	11</citation>
	<citation>1421	6	11</citation>
	<citation>1460	6	11</citation>
	<citation>1462	6	11</citation>
	<citation>1463	6	11</citation>
	<citation>1467	6	11</citation>
	<citation>1468	6	11</citation>
	<citation>1477	6	11</citation>
	<citation>1491	6	11</citation>
	<citation>1496	6	11</citation>
	<citation>1496	6	11</citation>
	<citation>1531	6	11</citation>
	<citation>1535	6	11</citation>
	<citation>1565	6	11</citation>
	<citation>1601	6	11</citation>
	<citation>1602	6	11</citation>
	<citation>1613	6	11</citation>
	<citation>1614	6	11</citation>
	<citation>1626	6	11</citation>
	<citation>1641	6	11</citation>
	<citation>1787	6	11</citation>
	<citation>1788	6	11</citation>
	<citation>205	6	11</citation>
	<citation>224	6	11</citation>
	<citation>249	6	11</citation>
	<citation>288	6	11</citation>
	<citation>316	6	11</citation>
	<citation>381	6	11</citation>
	<citation>381	6	11</citation>
	<citation>398	6	11</citation>
	<citation>11	6	11</citation>
	<citation>11	6	11</citation>
	<citation>14	6	11</citation>
	<citation>404	6	11</citation>
	<citation>410	6	11</citation>
	<citation>463	6	11</citation>
	<citation>464	6	11</citation>
	<citation>483	6	11</citation>
	<citation>3184	6	11</citation>
	<citation>3188	6	11</citation>
	<citation>584	6	11</citation>
	<citation>600	6	11</citation>
	<citation>680	6	11</citation>
	<citation>691	6	11</citation>
	<citation>763	6	11</citation>
	<citation>799	6	11</citation>
	</citations>
	<title>The Problem of Programming Communication with Changing Machines A Proposed Solution-Part 2</title>
	<conference>CACM September, 1958</conference>
	<authors>
	<author>Strong, J.</author>
	<author>Wegstein, J.</author>
	<author>Tritter, A.</author>
	<author>Olsztyn, J.</author>
	<author>Mock, O.</author>
	<author>Steel, T.</author>
	</authors>
	<location>CA580902 JB March 22, 1978  8:41 PM</location>
	</document>
	<document id= '10'>
	<citations>
	<citation>10	5	10</citation>
	<citation>10	5	10</citation>
	<citation>10	5	10</citation>
	</citations>
	<title>Glossary of Computer Engineering and Programming Terminology</title>
	<conference>CACM September, 1958</conference>
	<location>CA580903 JB March 22, 1978  8:39 PM</location>
	</document>
	<document id= '9'>
	<citations>
	<citation>9	5	9</citation>
	<citation>9	5	9</citation>
	<citation>9	5	9</citation>
	</citations>
	<title>Proposal for an UNCOL</title>
	<conference>CACM October, 1958</conference>
	<authors>
	<author>Conway, M. E.</author>
	</authors>
	<location>CA581001 JB March 22, 1978  8:37 PM</location>
	</document>
	<document id= '8'>
	<citations>
	<citation>8	5	8</citation>
	<citation>8	5	8</citation>
	<citation>8	5	8</citation>
	</citations>
	<title>On The Equivalence and Transformation of Program Schemes</title>
	<conference>CACM October, 1958</conference>
	<authors>
	<author>Friedman, M. D.</author>
	</authors>
	<location>CA581002 JB March 22, 1978  8:36 PM</location>
	</document>
	<document id= '7'>
	<citations>
	<citation>7	5	7</citation>
	<citation>7	5	7</citation>
	<citation>7	5	7</citation>
	</citations>
	<title>Glossary of Computer Engineering and Programming Terminology</title>
	<conference>CACM October, 1958</conference>
	<location>CA581003 JB March 22, 1978  8:35 PM</location>
	</document>
	<document id= '6'>
	<citations>
	<citation>6	5	6</citation>
	<citation>6	5	6</citation>
	<citation>6	5	6</citation>
	<citation>477	5	6</citation>
	<citation>6	6	6</citation>
	</citations>
	<title>The Use of Computers in Inspection Procedures</title>
	<conference>CACM November, 1958</conference>
	<authors>
	<author>Muller, M. E.</author>
	</authors>
	<location>CA581101 JB March 22, 1978  8:33 PM</location>
	</document>
	<document id= '5'>
	<citations>
	<citation>5	5	5</citation>
	<citation>5	5	5</citation>
	<citation>5	5	5</citation>
	</citations>
	<title>Two Square-Root Approximations</title>
	<conference>CACM November, 1958</conference>
	<authors>
	<author>Wadey, W. G.</author>
	</authors>
	<location>CA581102 JB March 22, 1978  8:33 PM</location>
	</document>
	<document id= '4'>
	<citations>
	<citation>4	5	4</citation>
	<citation>4	5	4</citation>
	<citation>4	5	4</citation>
	</citations>
	<title>Glossary of Computer Engineering and Programming Terminology</title>
	<conference>CACM November, 1958</conference>
	<location>CA581103 JB March 22, 1978  8:32 PM</location>
	</document>
	<document id= '3'>
	<citations>
	<citation>3	5	3</citation>
	<citation>3	5	3</citation>
	<citation>3	5	3</citation>
	</citations>
	<title>Techniques Department on Matrix Program Schemes</title>
	<conference>CACM December, 1958</conference>
	<authors>
	<author>Friedman, M. D.</author>
	</authors>
	<location>CA581201 JB March 22, 1978  8:30 PM</location>
	</document>
	<document id= '2'>
	<citations>
	<citation>2	5	2</citation>
	<citation>2	5	2</citation>
	<citation>2	5	2</citation>
	</citations>
	<title>Extraction of Roots by Repeated Subtractions for Digital Computers</title>
	<conference>CACM December, 1958</conference>
	<authors>
	<author>Sugai, I.</author>
	</authors>
	<location>CA581202 JB March 22, 1978  8:29 PM</location>
	</document>
	<document id= '1'>
	<citations>
	<citation>100	5	1</citation>
	<citation>123	5	1</citation>
	<citation>164	5	1</citation>
	<citation>1	5	1</citation>
	<citation>1	5	1</citation>
	<citation>1	5	1</citation>
	<citation>205	5	1</citation>
	<citation>210	5	1</citation>
	<citation>214	5	1</citation>
	<citation>1982	5	1</citation>
	<citation>398	5	1</citation>
	<citation>642	5	1</citation>
	<citation>669	5	1</citation>
	<citation>1	6	1</citation>
	<citation>1	6	1</citation>
	<citation>1	6	1</citation>
	<citation>1	6	1</citation>
	<citation>1	6	1</citation>
	<citation>1	6	1</citation>
	<citation>1	6	1</citation>
	<citation>1	6	1</citation>
	<citation>1	6	1</citation>
	<citation>1	6	1</citation>
	<citation>165	6	1</citation>
	<citation>196	6	1</citation>
	<citation>196	6	1</citation>
	<citation>1273	6	1</citation>
	<citation>1883	6	1</citation>
	<citation>324	6	1</citation>
	<citation>43	6	1</citation>
	<citation>53	6	1</citation>
	<citation>91	6	1</citation>
	<citation>410	6	1</citation>
	<citation>3184	6	1</citation>
	</citations>
	<title>Preliminary Report-International Algebraic Language</title>
	<conference>CACM December, 1958</conference>
	<authors>
	<author>Perlis, A. J.</author>
	</authors>
	<location>CA581203 JB March 22, 1978  8:28 PM</location>
	</document>
</catalog>
